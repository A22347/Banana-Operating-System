
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e3 fb 00 00       	call   c000fc03 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 86 02 00       	call   c0028718 <_init>
c0000025:	c3                   	ret    
c0000026:	bb ce 92 02 c0       	mov    ebx,0xc00292ce
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb dc 92 02 c0    	cmp    ebx,0xc00292dc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 da 02 c0       	mov    eax,0xc002daf8
c0000049:	3d f8 da 02 c0       	cmp    eax,0xc002daf8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 da 02 c0       	push   0xc002daf8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 da 02 c0       	mov    eax,0xc002daf8
c0000075:	2d f8 da 02 c0       	sub    eax,0xc002daf8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 da 02 c0       	push   0xc002daf8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e128,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e4 92 02 c0       	mov    ebx,0xc00292e4
c00000bb:	81 eb e0 92 02 c0    	sub    ebx,0xc00292e0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e0 92 02 c0       	mov    esi,0xc00292e0
c00000ca:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c e1 02 c0       	mov    ds:0xc002e12c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 da 02 c0       	push   0xc002daf8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e128,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 e1 02 c0       	push   0xc002e130
c000012c:	68 f8 da 02 c0       	push   0xc002daf8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 7d d6 01 00       	call   c001da20 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 c8 28 01 00       	call   c0012c83 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 5b d6 01 00       	call   c001da20 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 a9 da 01 00       	call   c001de8d <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 91 e0 01 00       	call   c001e47e <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 e5 02 c0 	lgdtd  ds:0xc002e570
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 a6 45 01 00       	call   c0014b87 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>
c0000645:	66 90                	xchg   ax,ax
c0000647:	90                   	nop

c0000648 <memcmp>:
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000656:	85 f6                	test   esi,esi
c0000658:	74 1d                	je     c0000677 <memcmp+0x2f>
c000065a:	8a 08                	mov    cl,BYTE PTR [eax]
c000065c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000065f:	38 cb                	cmp    bl,cl
c0000661:	75 19                	jne    c000067c <memcmp+0x34>
c0000663:	01 c6                	add    esi,eax
c0000665:	eb 0a                	jmp    c0000671 <memcmp+0x29>
c0000667:	90                   	nop
c0000668:	8a 08                	mov    cl,BYTE PTR [eax]
c000066a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000066d:	38 d9                	cmp    cl,bl
c000066f:	75 0b                	jne    c000067c <memcmp+0x34>
c0000671:	40                   	inc    eax
c0000672:	42                   	inc    edx
c0000673:	39 f0                	cmp    eax,esi
c0000675:	75 f1                	jne    c0000668 <memcmp+0x20>
c0000677:	31 c0                	xor    eax,eax
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    
c000067c:	0f b6 c1             	movzx  eax,cl
c000067f:	29 d8                	sub    eax,ebx
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memmove>:
c0000684:	55                   	push   ebp
c0000685:	57                   	push   edi
c0000686:	56                   	push   esi
c0000687:	53                   	push   ebx
c0000688:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000068c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000694:	39 dd                	cmp    ebp,ebx
c0000696:	0f 83 80 00 00 00    	jae    c000071c <memmove+0x98>
c000069c:	85 d2                	test   edx,edx
c000069e:	74 74                	je     c0000714 <memmove+0x90>
c00006a0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006a6:	39 cd                	cmp    ebp,ecx
c00006a8:	0f 93 c1             	setae  cl
c00006ab:	39 f3                	cmp    ebx,esi
c00006ad:	0f 93 c0             	setae  al
c00006b0:	89 c6                	mov    esi,eax
c00006b2:	09 ce                	or     esi,ecx
c00006b4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006b7:	89 f0                	mov    eax,esi
c00006b9:	83 f9 0c             	cmp    ecx,0xc
c00006bc:	0f 97 c1             	seta   cl
c00006bf:	84 c8                	test   al,cl
c00006c1:	74 75                	je     c0000738 <memmove+0xb4>
c00006c3:	89 e9                	mov    ecx,ebp
c00006c5:	09 d9                	or     ecx,ebx
c00006c7:	83 e1 03             	and    ecx,0x3
c00006ca:	75 6c                	jne    c0000738 <memmove+0xb4>
c00006cc:	89 d7                	mov    edi,edx
c00006ce:	89 d9                	mov    ecx,ebx
c00006d0:	83 e7 fc             	and    edi,0xfffffffc
c00006d3:	89 ee                	mov    esi,ebp
c00006d5:	01 df                	add    edi,ebx
c00006d7:	90                   	nop
c00006d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006da:	83 c6 04             	add    esi,0x4
c00006dd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e0:	83 c1 04             	add    ecx,0x4
c00006e3:	39 f9                	cmp    ecx,edi
c00006e5:	75 f1                	jne    c00006d8 <memmove+0x54>
c00006e7:	89 d1                	mov    ecx,edx
c00006e9:	89 d7                	mov    edi,edx
c00006eb:	83 e1 fc             	and    ecx,0xfffffffc
c00006ee:	29 cf                	sub    edi,ecx
c00006f0:	01 cb                	add    ebx,ecx
c00006f2:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006f6:	39 ca                	cmp    edx,ecx
c00006f8:	74 1a                	je     c0000714 <memmove+0x90>
c00006fa:	8a 03                	mov    al,BYTE PTR [ebx]
c00006fc:	83 ff 01             	cmp    edi,0x1
c00006ff:	88 06                	mov    BYTE PTR [esi],al
c0000701:	74 11                	je     c0000714 <memmove+0x90>
c0000703:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000706:	83 ff 02             	cmp    edi,0x2
c0000709:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000070c:	74 06                	je     c0000714 <memmove+0x90>
c000070e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000711:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000714:	5b                   	pop    ebx
c0000715:	89 e8                	mov    eax,ebp
c0000717:	5e                   	pop    esi
c0000718:	5f                   	pop    edi
c0000719:	5d                   	pop    ebp
c000071a:	c3                   	ret    
c000071b:	90                   	nop
c000071c:	76 f6                	jbe    c0000714 <memmove+0x90>
c000071e:	85 d2                	test   edx,edx
c0000720:	74 f2                	je     c0000714 <memmove+0x90>
c0000722:	4b                   	dec    ebx
c0000723:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000726:	66 90                	xchg   ax,ax
c0000728:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000072e:	4a                   	dec    edx
c000072f:	75 f7                	jne    c0000728 <memmove+0xa4>
c0000731:	5b                   	pop    ebx
c0000732:	89 e8                	mov    eax,ebp
c0000734:	5e                   	pop    esi
c0000735:	5f                   	pop    edi
c0000736:	5d                   	pop    ebp
c0000737:	c3                   	ret    
c0000738:	01 ea                	add    edx,ebp
c000073a:	89 e9                	mov    ecx,ebp
c000073c:	8a 03                	mov    al,BYTE PTR [ebx]
c000073e:	41                   	inc    ecx
c000073f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000742:	43                   	inc    ebx
c0000743:	39 d1                	cmp    ecx,edx
c0000745:	75 f5                	jne    c000073c <memmove+0xb8>
c0000747:	eb cb                	jmp    c0000714 <memmove+0x90>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]

c000074c <memcpy>:
c000074c:	57                   	push   edi
c000074d:	56                   	push   esi
c000074e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000752:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000756:	a8 03                	test   al,0x3
c0000758:	74 12                	je     c000076c <memcpy+0x20>
c000075a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075e:	89 c1                	mov    ecx,eax
c0000760:	fc                   	cld    
c0000761:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000763:	29 c7                	sub    edi,eax
c0000765:	5e                   	pop    esi
c0000766:	89 f8                	mov    eax,edi
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax
c000076c:	89 c1                	mov    ecx,eax
c000076e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000772:	c1 e9 02             	shr    ecx,0x2
c0000775:	fc                   	cld    
c0000776:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000778:	29 c7                	sub    edi,eax
c000077a:	5e                   	pop    esi
c000077b:	89 f8                	mov    eax,edi
c000077d:	5f                   	pop    edi
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <memset>:
c0000780:	57                   	push   edi
c0000781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000785:	85 c9                	test   ecx,ecx
c0000787:	74 0b                	je     c0000794 <memset+0x14>
c0000789:	fc                   	cld    
c000078a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000792:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000798:	5f                   	pop    edi
c0000799:	c3                   	ret    
c000079a:	66 90                	xchg   ax,ax

c000079c <strlen>:
c000079c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007a5:	74 09                	je     c00007b0 <strlen+0x14>
c00007a7:	90                   	nop
c00007a8:	40                   	inc    eax
c00007a9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007ad:	75 f9                	jne    c00007a8 <strlen+0xc>
c00007af:	c3                   	ret    
c00007b0:	c3                   	ret    
c00007b1:	8d 76 00             	lea    esi,[esi+0x0]

c00007b4 <strpbrk>:
c00007b4:	57                   	push   edi
c00007b5:	56                   	push   esi
c00007b6:	53                   	push   ebx
c00007b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c1:	84 db                	test   bl,bl
c00007c3:	74 21                	je     c00007e6 <strpbrk+0x32>
c00007c5:	8a 07                	mov    al,BYTE PTR [edi]
c00007c7:	84 c0                	test   al,al
c00007c9:	74 14                	je     c00007df <strpbrk+0x2b>
c00007cb:	38 d8                	cmp    al,bl
c00007cd:	74 19                	je     c00007e8 <strpbrk+0x34>
c00007cf:	89 fa                	mov    edx,edi
c00007d1:	eb 05                	jmp    c00007d8 <strpbrk+0x24>
c00007d3:	90                   	nop
c00007d4:	38 d9                	cmp    cl,bl
c00007d6:	74 10                	je     c00007e8 <strpbrk+0x34>
c00007d8:	42                   	inc    edx
c00007d9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007db:	84 c9                	test   cl,cl
c00007dd:	75 f5                	jne    c00007d4 <strpbrk+0x20>
c00007df:	46                   	inc    esi
c00007e0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007e2:	84 db                	test   bl,bl
c00007e4:	75 e1                	jne    c00007c7 <strpbrk+0x13>
c00007e6:	31 f6                	xor    esi,esi
c00007e8:	89 f0                	mov    eax,esi
c00007ea:	5b                   	pop    ebx
c00007eb:	5e                   	pop    esi
c00007ec:	5f                   	pop    edi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strtok>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007fa:	85 db                	test   ebx,ebx
c00007fc:	75 07                	jne    c0000805 <strtok+0x15>
c00007fe:	eb 2c                	jmp    c000082c <strtok+0x3c>
c0000800:	43                   	inc    ebx
c0000801:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000805:	56                   	push   esi
c0000806:	53                   	push   ebx
c0000807:	e8 a8 ff ff ff       	call   c00007b4 <strpbrk>
c000080c:	5a                   	pop    edx
c000080d:	a3 48 e1 02 c0       	mov    ds:0xc002e148,eax
c0000812:	59                   	pop    ecx
c0000813:	39 d8                	cmp    eax,ebx
c0000815:	74 e9                	je     c0000800 <strtok+0x10>
c0000817:	85 c0                	test   eax,eax
c0000819:	74 1b                	je     c0000836 <strtok+0x46>
c000081b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000081e:	8d 50 01             	lea    edx,[eax+0x1]
c0000821:	89 d8                	mov    eax,ebx
c0000823:	89 15 48 e1 02 c0    	mov    DWORD PTR ds:0xc002e148,edx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    
c000082c:	8b 1d 48 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e148
c0000832:	85 db                	test   ebx,ebx
c0000834:	75 cf                	jne    c0000805 <strtok+0x15>
c0000836:	31 c0                	xor    eax,eax
c0000838:	5b                   	pop    ebx
c0000839:	5e                   	pop    esi
c000083a:	c3                   	ret    
c000083b:	90                   	nop

c000083c <strcpy>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000845:	89 c3                	mov    ebx,eax
c0000847:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000849:	84 d2                	test   dl,dl
c000084b:	74 0d                	je     c000085a <strcpy+0x1e>
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	88 13                	mov    BYTE PTR [ebx],dl
c0000852:	41                   	inc    ecx
c0000853:	43                   	inc    ebx
c0000854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000856:	84 d2                	test   dl,dl
c0000858:	75 f6                	jne    c0000850 <strcpy+0x14>
c000085a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000085d:	5b                   	pop    ebx
c000085e:	c3                   	ret    
c000085f:	90                   	nop

c0000860 <strncpy>:
c0000860:	55                   	push   ebp
c0000861:	57                   	push   edi
c0000862:	56                   	push   esi
c0000863:	53                   	push   ebx
c0000864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000868:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000086c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000870:	85 c0                	test   eax,eax
c0000872:	74 39                	je     c00008ad <strncpy+0x4d>
c0000874:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000876:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000879:	8d 55 01             	lea    edx,[ebp+0x1]
c000087c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 31                	je     c00008b4 <strncpy+0x54>
c0000883:	85 c9                	test   ecx,ecx
c0000885:	74 26                	je     c00008ad <strncpy+0x4d>
c0000887:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000088a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000088d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000890:	8d 46 02             	lea    eax,[esi+0x2]
c0000893:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000896:	84 db                	test   bl,bl
c0000898:	75 0f                	jne    c00008a9 <strncpy+0x49>
c000089a:	eb 18                	jmp    c00008b4 <strncpy+0x54>
c000089c:	40                   	inc    eax
c000089d:	42                   	inc    edx
c000089e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a1:	49                   	dec    ecx
c00008a2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a5:	84 db                	test   bl,bl
c00008a7:	74 0b                	je     c00008b4 <strncpy+0x54>
c00008a9:	85 c9                	test   ecx,ecx
c00008ab:	75 ef                	jne    c000089c <strncpy+0x3c>
c00008ad:	5b                   	pop    ebx
c00008ae:	89 e8                	mov    eax,ebp
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	5d                   	pop    ebp
c00008b3:	c3                   	ret    
c00008b4:	85 c9                	test   ecx,ecx
c00008b6:	74 f5                	je     c00008ad <strncpy+0x4d>
c00008b8:	fc                   	cld    
c00008b9:	31 c0                	xor    eax,eax
c00008bb:	89 d7                	mov    edi,edx
c00008bd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008bf:	89 e8                	mov    eax,ebp
c00008c1:	5b                   	pop    ebx
c00008c2:	5e                   	pop    esi
c00008c3:	5f                   	pop    edi
c00008c4:	5d                   	pop    ebp
c00008c5:	c3                   	ret    
c00008c6:	66 90                	xchg   ax,ax

c00008c8 <strcmp>:
c00008c8:	56                   	push   esi
c00008c9:	53                   	push   ebx
c00008ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008d4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008d7:	38 d1                	cmp    cl,dl
c00008d9:	75 1d                	jne    c00008f8 <strcmp+0x30>
c00008db:	84 c9                	test   cl,cl
c00008dd:	74 21                	je     c0000900 <strcmp+0x38>
c00008df:	b8 01 00 00 00       	mov    eax,0x1
c00008e4:	eb 07                	jmp    c00008ed <strcmp+0x25>
c00008e6:	66 90                	xchg   ax,ax
c00008e8:	40                   	inc    eax
c00008e9:	84 d2                	test   dl,dl
c00008eb:	74 13                	je     c0000900 <strcmp+0x38>
c00008ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008f4:	38 ca                	cmp    dl,cl
c00008f6:	74 f0                	je     c00008e8 <strcmp+0x20>
c00008f8:	0f b6 c2             	movzx  eax,dl
c00008fb:	5b                   	pop    ebx
c00008fc:	29 c8                	sub    eax,ecx
c00008fe:	5e                   	pop    esi
c00008ff:	c3                   	ret    
c0000900:	31 c0                	xor    eax,eax
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	c3                   	ret    
c0000905:	8d 76 00             	lea    esi,[esi+0x0]

c0000908 <strchr>:
c0000908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000090c:	8a 10                	mov    dl,BYTE PTR [eax]
c000090e:	84 d2                	test   dl,dl
c0000910:	74 15                	je     c0000927 <strchr+0x1f>
c0000912:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000916:	38 ca                	cmp    dl,cl
c0000918:	75 06                	jne    c0000920 <strchr+0x18>
c000091a:	eb 0e                	jmp    c000092a <strchr+0x22>
c000091c:	38 ca                	cmp    dl,cl
c000091e:	74 09                	je     c0000929 <strchr+0x21>
c0000920:	40                   	inc    eax
c0000921:	8a 10                	mov    dl,BYTE PTR [eax]
c0000923:	84 d2                	test   dl,dl
c0000925:	75 f5                	jne    c000091c <strchr+0x14>
c0000927:	31 c0                	xor    eax,eax
c0000929:	c3                   	ret    
c000092a:	c3                   	ret    
c000092b:	90                   	nop

c000092c <strncmp>:
c000092c:	57                   	push   edi
c000092d:	56                   	push   esi
c000092e:	53                   	push   ebx
c000092f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000093b:	85 ff                	test   edi,edi
c000093d:	74 28                	je     c0000967 <strncmp+0x3b>
c000093f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000941:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000944:	38 d1                	cmp    cl,dl
c0000946:	75 28                	jne    c0000970 <strncmp+0x44>
c0000948:	8d 46 01             	lea    eax,[esi+0x1]
c000094b:	84 c9                	test   cl,cl
c000094d:	74 18                	je     c0000967 <strncmp+0x3b>
c000094f:	01 fe                	add    esi,edi
c0000951:	eb 0f                	jmp    c0000962 <strncmp+0x36>
c0000953:	90                   	nop
c0000954:	8a 10                	mov    dl,BYTE PTR [eax]
c0000956:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000959:	38 ca                	cmp    dl,cl
c000095b:	75 13                	jne    c0000970 <strncmp+0x44>
c000095d:	40                   	inc    eax
c000095e:	84 d2                	test   dl,dl
c0000960:	74 05                	je     c0000967 <strncmp+0x3b>
c0000962:	43                   	inc    ebx
c0000963:	39 c6                	cmp    esi,eax
c0000965:	75 ed                	jne    c0000954 <strncmp+0x28>
c0000967:	5b                   	pop    ebx
c0000968:	31 c0                	xor    eax,eax
c000096a:	5e                   	pop    esi
c000096b:	5f                   	pop    edi
c000096c:	c3                   	ret    
c000096d:	8d 76 00             	lea    esi,[esi+0x0]
c0000970:	5b                   	pop    ebx
c0000971:	0f b6 c2             	movzx  eax,dl
c0000974:	5e                   	pop    esi
c0000975:	29 c8                	sub    eax,ecx
c0000977:	5f                   	pop    edi
c0000978:	c3                   	ret    
c0000979:	8d 76 00             	lea    esi,[esi+0x0]

c000097c <strcat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000986:	89 c3                	mov    ebx,eax
c0000988:	eb 04                	jmp    c000098e <strcat+0x12>
c000098a:	66 90                	xchg   ax,ax
c000098c:	89 d3                	mov    ebx,edx
c000098e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f5                	jne    c000098c <strcat+0x10>
c0000997:	31 d2                	xor    edx,edx
c0000999:	8d 76 00             	lea    esi,[esi+0x0]
c000099c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000099f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009a2:	42                   	inc    edx
c00009a3:	84 c9                	test   cl,cl
c00009a5:	75 f5                	jne    c000099c <strcat+0x20>
c00009a7:	5b                   	pop    ebx
c00009a8:	5e                   	pop    esi
c00009a9:	c3                   	ret    
c00009aa:	66 90                	xchg   ax,ax

c00009ac <strncat>:
c00009ac:	56                   	push   esi
c00009ad:	53                   	push   ebx
c00009ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009ba:	85 f6                	test   esi,esi
c00009bc:	74 1e                	je     c00009dc <strncat+0x30>
c00009be:	89 c2                	mov    edx,eax
c00009c0:	42                   	inc    edx
c00009c1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009c5:	75 f9                	jne    c00009c0 <strncat+0x14>
c00009c7:	01 ce                	add    esi,ecx
c00009c9:	eb 06                	jmp    c00009d1 <strncat+0x25>
c00009cb:	90                   	nop
c00009cc:	39 f1                	cmp    ecx,esi
c00009ce:	74 10                	je     c00009e0 <strncat+0x34>
c00009d0:	42                   	inc    edx
c00009d1:	41                   	inc    ecx
c00009d2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d8:	84 db                	test   bl,bl
c00009da:	75 f0                	jne    c00009cc <strncat+0x20>
c00009dc:	5b                   	pop    ebx
c00009dd:	5e                   	pop    esi
c00009de:	c3                   	ret    
c00009df:	90                   	nop
c00009e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009e3:	5b                   	pop    ebx
c00009e4:	5e                   	pop    esi
c00009e5:	c3                   	ret    
c00009e6:	66 90                	xchg   ax,ax

c00009e8 <strstr>:
c00009e8:	57                   	push   edi
c00009e9:	56                   	push   esi
c00009ea:	53                   	push   ebx
c00009eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009f3:	57                   	push   edi
c00009f4:	e8 a3 fd ff ff       	call   c000079c <strlen>
c00009f9:	59                   	pop    ecx
c00009fa:	85 c0                	test   eax,eax
c00009fc:	74 2a                	je     c0000a28 <strstr+0x40>
c00009fe:	89 c6                	mov    esi,eax
c0000a00:	eb 12                	jmp    c0000a14 <strstr+0x2c>
c0000a02:	66 90                	xchg   ax,ax
c0000a04:	56                   	push   esi
c0000a05:	57                   	push   edi
c0000a06:	53                   	push   ebx
c0000a07:	e8 3c fc ff ff       	call   c0000648 <memcmp>
c0000a0c:	83 c4 0c             	add    esp,0xc
c0000a0f:	85 c0                	test   eax,eax
c0000a11:	74 15                	je     c0000a28 <strstr+0x40>
c0000a13:	43                   	inc    ebx
c0000a14:	53                   	push   ebx
c0000a15:	e8 82 fd ff ff       	call   c000079c <strlen>
c0000a1a:	5a                   	pop    edx
c0000a1b:	39 f0                	cmp    eax,esi
c0000a1d:	73 e5                	jae    c0000a04 <strstr+0x1c>
c0000a1f:	5b                   	pop    ebx
c0000a20:	31 c0                	xor    eax,eax
c0000a22:	5e                   	pop    esi
c0000a23:	5f                   	pop    edi
c0000a24:	c3                   	ret    
c0000a25:	8d 76 00             	lea    esi,[esi+0x0]
c0000a28:	89 d8                	mov    eax,ebx
c0000a2a:	5b                   	pop    ebx
c0000a2b:	5e                   	pop    esi
c0000a2c:	5f                   	pop    edi
c0000a2d:	c3                   	ret    
c0000a2e:	66 90                	xchg   ax,ax

c0000a30 <toupper>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 00 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d00],0x2
c0000a3e:	74 03                	je     c0000a43 <toupper+0x13>
c0000a40:	83 e8 20             	sub    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <tolower>:
c0000a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a48:	0f b6 d0             	movzx  edx,al
c0000a4b:	f6 82 00 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d00],0x1
c0000a52:	74 03                	je     c0000a57 <tolower+0x13>
c0000a54:	83 c0 20             	add    eax,0x20
c0000a57:	c3                   	ret    

c0000a58 <simple_strtoul>:
c0000a58:	55                   	push   ebp
c0000a59:	57                   	push   edi
c0000a5a:	56                   	push   esi
c0000a5b:	53                   	push   ebx
c0000a5c:	83 ec 08             	sub    esp,0x8
c0000a5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a67:	90                   	nop
c0000a68:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a6b:	f6 82 00 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d00],0x8
c0000a72:	75 05                	jne    c0000a79 <simple_strtoul+0x21>
c0000a74:	80 fa 09             	cmp    dl,0x9
c0000a77:	75 03                	jne    c0000a7c <simple_strtoul+0x24>
c0000a79:	41                   	inc    ecx
c0000a7a:	eb ec                	jmp    c0000a68 <simple_strtoul+0x10>
c0000a7c:	80 fa 2d             	cmp    dl,0x2d
c0000a7f:	0f 84 1b 01 00 00    	je     c0000ba0 <simple_strtoul+0x148>
c0000a85:	80 fa 2b             	cmp    dl,0x2b
c0000a88:	0f 84 c2 00 00 00    	je     c0000b50 <simple_strtoul+0xf8>
c0000a8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a96:	85 f6                	test   esi,esi
c0000a98:	0f 85 c3 00 00 00    	jne    c0000b61 <simple_strtoul+0x109>
c0000a9e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa0:	80 fa 30             	cmp    dl,0x30
c0000aa3:	0f 84 47 01 00 00    	je     c0000bf0 <simple_strtoul+0x198>
c0000aa9:	be 0a 00 00 00       	mov    esi,0xa
c0000aae:	84 d2                	test   dl,dl
c0000ab0:	0f 84 6f 01 00 00    	je     c0000c25 <simple_strtoul+0x1cd>
c0000ab6:	31 ed                	xor    ebp,ebp
c0000ab8:	31 ff                	xor    edi,edi
c0000aba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac1:	eb 2b                	jmp    c0000aee <simple_strtoul+0x96>
c0000ac3:	90                   	nop
c0000ac4:	83 eb 30             	sub    ebx,0x30
c0000ac7:	39 f3                	cmp    ebx,esi
c0000ac9:	73 4d                	jae    c0000b18 <simple_strtoul+0xc0>
c0000acb:	31 d2                	xor    edx,edx
c0000acd:	89 d8                	mov    eax,ebx
c0000acf:	f7 d0                	not    eax
c0000ad1:	f7 f6                	div    esi
c0000ad3:	39 f8                	cmp    eax,edi
c0000ad5:	0f 82 b1 00 00 00    	jb     c0000b8c <simple_strtoul+0x134>
c0000adb:	0f af fe             	imul   edi,esi
c0000ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ae5:	01 df                	add    edi,ebx
c0000ae7:	41                   	inc    ecx
c0000ae8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aea:	84 d2                	test   dl,dl
c0000aec:	74 2a                	je     c0000b18 <simple_strtoul+0xc0>
c0000aee:	0f b6 da             	movzx  ebx,dl
c0000af1:	f6 83 00 93 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d00],0x4
c0000af8:	75 ca                	jne    c0000ac4 <simple_strtoul+0x6c>
c0000afa:	0f be d2             	movsx  edx,dl
c0000afd:	52                   	push   edx
c0000afe:	e8 2d ff ff ff       	call   c0000a30 <toupper>
c0000b03:	5b                   	pop    ebx
c0000b04:	0f b6 d0             	movzx  edx,al
c0000b07:	f6 82 00 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d00],0x1
c0000b0e:	74 08                	je     c0000b18 <simple_strtoul+0xc0>
c0000b10:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b13:	39 f3                	cmp    ebx,esi
c0000b15:	72 b4                	jb     c0000acb <simple_strtoul+0x73>
c0000b17:	90                   	nop
c0000b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1c:	85 c0                	test   eax,eax
c0000b1e:	74 14                	je     c0000b34 <simple_strtoul+0xdc>
c0000b20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b23:	09 f8                	or     eax,edi
c0000b25:	75 71                	jne    c0000b98 <simple_strtoul+0x140>
c0000b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b2f:	31 ff                	xor    edi,edi
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	90                   	nop
c0000b34:	4d                   	dec    ebp
c0000b35:	75 05                	jne    c0000b3c <simple_strtoul+0xe4>
c0000b37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b3c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b41:	75 02                	jne    c0000b45 <simple_strtoul+0xed>
c0000b43:	f7 df                	neg    edi
c0000b45:	83 c4 08             	add    esp,0x8
c0000b48:	89 f8                	mov    eax,edi
c0000b4a:	5b                   	pop    ebx
c0000b4b:	5e                   	pop    esi
c0000b4c:	5f                   	pop    edi
c0000b4d:	5d                   	pop    ebp
c0000b4e:	c3                   	ret    
c0000b4f:	90                   	nop
c0000b50:	41                   	inc    ecx
c0000b51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b59:	85 f6                	test   esi,esi
c0000b5b:	0f 84 3d ff ff ff    	je     c0000a9e <simple_strtoul+0x46>
c0000b61:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b64:	83 f8 22             	cmp    eax,0x22
c0000b67:	77 6a                	ja     c0000bd3 <simple_strtoul+0x17b>
c0000b69:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b6b:	83 fe 08             	cmp    esi,0x8
c0000b6e:	0f 84 a2 00 00 00    	je     c0000c16 <simple_strtoul+0x1be>
c0000b74:	83 fe 10             	cmp    esi,0x10
c0000b77:	0f 85 31 ff ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000b7d:	80 fa 30             	cmp    dl,0x30
c0000b80:	74 2c                	je     c0000bae <simple_strtoul+0x156>
c0000b82:	be 10 00 00 00       	mov    esi,0x10
c0000b87:	e9 22 ff ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000b8c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b91:	31 ff                	xor    edi,edi
c0000b93:	e9 4f ff ff ff       	jmp    c0000ae7 <simple_strtoul+0x8f>
c0000b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b9e:	eb 94                	jmp    c0000b34 <simple_strtoul+0xdc>
c0000ba0:	41                   	inc    ecx
c0000ba1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba9:	e9 e8 fe ff ff       	jmp    c0000a96 <simple_strtoul+0x3e>
c0000bae:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bb2:	88 04 24             	mov    BYTE PTR [esp],al
c0000bb5:	50                   	push   eax
c0000bb6:	e8 89 fe ff ff       	call   c0000a44 <tolower>
c0000bbb:	5e                   	pop    esi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	0f 84 84 00 00 00    	je     c0000c49 <simple_strtoul+0x1f1>
c0000bc5:	41                   	inc    ecx
c0000bc6:	be 10 00 00 00       	mov    esi,0x10
c0000bcb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bce:	e9 db fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000bd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bd7:	85 ff                	test   edi,edi
c0000bd9:	74 5c                	je     c0000c37 <simple_strtoul+0x1df>
c0000bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bdf:	85 c9                	test   ecx,ecx
c0000be1:	75 4e                	jne    c0000c31 <simple_strtoul+0x1d9>
c0000be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be9:	31 ff                	xor    edi,edi
c0000beb:	e9 4c ff ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000bf0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bf4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bf7:	50                   	push   eax
c0000bf8:	e8 47 fe ff ff       	call   c0000a44 <tolower>
c0000bfd:	5d                   	pop    ebp
c0000bfe:	83 f8 78             	cmp    eax,0x78
c0000c01:	74 3b                	je     c0000c3e <simple_strtoul+0x1e6>
c0000c03:	41                   	inc    ecx
c0000c04:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c07:	80 fa 30             	cmp    dl,0x30
c0000c0a:	74 13                	je     c0000c1f <simple_strtoul+0x1c7>
c0000c0c:	be 08 00 00 00       	mov    esi,0x8
c0000c11:	e9 98 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000c16:	80 fa 30             	cmp    dl,0x30
c0000c19:	0f 85 8f fe ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000c1f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c22:	41                   	inc    ecx
c0000c23:	eb e7                	jmp    c0000c0c <simple_strtoul+0x1b4>
c0000c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c29:	85 d2                	test   edx,edx
c0000c2b:	74 0a                	je     c0000c37 <simple_strtoul+0x1df>
c0000c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c35:	89 30                	mov    DWORD PTR [eax],esi
c0000c37:	31 ff                	xor    edi,edi
c0000c39:	e9 fe fe ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000c3e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c41:	83 c1 02             	add    ecx,0x2
c0000c44:	e9 34 ff ff ff       	jmp    c0000b7d <simple_strtoul+0x125>
c0000c49:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c4c:	be 10 00 00 00       	mov    esi,0x10
c0000c51:	83 c1 02             	add    ecx,0x2
c0000c54:	e9 55 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>

c0000c59 <largebin_index>:
c0000c59:	89 c2                	mov    edx,eax
c0000c5b:	c1 ea 08             	shr    edx,0x8
c0000c5e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c64:	77 10                	ja     c0000c76 <largebin_index+0x1d>
c0000c66:	0f bd d2             	bsr    edx,edx
c0000c69:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c6c:	d3 e8                	shr    eax,cl
c0000c6e:	83 e0 03             	and    eax,0x3
c0000c71:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c75:	c3                   	ret    
c0000c76:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c7b:	c3                   	ret    

c0000c7c <malloc_init_state>:
c0000c7c:	53                   	push   ebx
c0000c7d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c80:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c86:	89 d1                	mov    ecx,edx
c0000c88:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c8b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c8e:	83 c2 08             	add    edx,0x8
c0000c91:	39 da                	cmp    edx,ebx
c0000c93:	75 f3                	jne    c0000c88 <malloc_init_state+0xc>
c0000c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c97:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca1:	83 e2 03             	and    edx,0x3
c0000ca4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cae:	83 ca 48             	or     edx,0x48
c0000cb1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cbb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cc5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ccc:	89 10                	mov    DWORD PTR [eax],edx
c0000cce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cdb:	5b                   	pop    ebx
c0000cdc:	c3                   	ret    

c0000cdd <malloc_consolidate>:
c0000cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cdf:	85 d2                	test   edx,edx
c0000ce1:	0f 84 d8 00 00 00    	je     c0000dbf <malloc_consolidate+0xe2>
c0000ce7:	55                   	push   ebp
c0000ce8:	83 e2 fd             	and    edx,0xfffffffd
c0000ceb:	57                   	push   edi
c0000cec:	89 c5                	mov    ebp,eax
c0000cee:	56                   	push   esi
c0000cef:	8d 78 34             	lea    edi,[eax+0x34]
c0000cf2:	53                   	push   ebx
c0000cf3:	83 ec 10             	sub    esp,0x10
c0000cf6:	89 10                	mov    DWORD PTR [eax],edx
c0000cf8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cfc:	c1 ea 03             	shr    edx,0x3
c0000cff:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d03:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d0a:	85 d2                	test   edx,edx
c0000d0c:	0f 84 98 00 00 00    	je     c0000daa <malloc_consolidate+0xcd>
c0000d12:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d19:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d1c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d23:	89 f9                	mov    ecx,edi
c0000d25:	83 e1 fe             	and    ecx,0xfffffffe
c0000d28:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d2e:	83 e3 fc             	and    ebx,0xfffffffc
c0000d31:	83 e7 01             	and    edi,0x1
c0000d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d37:	75 14                	jne    c0000d4d <malloc_consolidate+0x70>
c0000d39:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d3b:	29 fa                	sub    edx,edi
c0000d3d:	01 f9                	add    ecx,edi
c0000d3f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d42:	89 fb                	mov    ebx,edi
c0000d44:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d47:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d4a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d4d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d50:	74 40                	je     c0000d92 <malloc_consolidate+0xb5>
c0000d52:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d55:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d58:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d5c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d5f:	83 e7 01             	and    edi,0x1
c0000d62:	75 0e                	jne    c0000d72 <malloc_consolidate+0x95>
c0000d64:	01 d9                	add    ecx,ebx
c0000d66:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d6f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d72:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d75:	89 ce                	mov    esi,ecx
c0000d77:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d7a:	83 ce 01             	or     esi,0x1
c0000d7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d80:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d83:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d86:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d8a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d8d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d90:	eb 0c                	jmp    c0000d9e <malloc_consolidate+0xc1>
c0000d92:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d95:	83 c9 01             	or     ecx,0x1
c0000d98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d9b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000da2:	85 d2                	test   edx,edx
c0000da4:	0f 85 6f ff ff ff    	jne    c0000d19 <malloc_consolidate+0x3c>
c0000daa:	83 c5 04             	add    ebp,0x4
c0000dad:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db1:	0f 85 50 ff ff ff    	jne    c0000d07 <malloc_consolidate+0x2a>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	5b                   	pop    ebx
c0000dbb:	5e                   	pop    esi
c0000dbc:	5f                   	pop    edi
c0000dbd:	5d                   	pop    ebp
c0000dbe:	c3                   	ret    
c0000dbf:	e9 b8 fe ff ff       	jmp    c0000c7c <malloc_init_state>

c0000dc4 <dlfree>:
c0000dc4:	57                   	push   edi
c0000dc5:	56                   	push   esi
c0000dc6:	53                   	push   ebx
c0000dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcb:	85 db                	test   ebx,ebx
c0000dcd:	0f 84 e2 00 00 00    	je     c0000eb5 <dlfree+0xf1>
c0000dd3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd6:	8b 0d 60 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e160
c0000ddc:	89 f0                	mov    eax,esi
c0000dde:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de1:	83 e0 fc             	and    eax,0xfffffffc
c0000de4:	39 c1                	cmp    ecx,eax
c0000de6:	72 24                	jb     c0000e0c <dlfree+0x48>
c0000de8:	83 c9 03             	or     ecx,0x3
c0000deb:	c1 e8 03             	shr    eax,0x3
c0000dee:	89 0d 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,ecx
c0000df4:	83 e8 02             	sub    eax,0x2
c0000df7:	8b 0c 85 64 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e9c]
c0000dfe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e00:	89 14 85 64 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e9c],edx
c0000e07:	e9 a9 00 00 00       	jmp    c0000eb5 <dlfree+0xf1>
c0000e0c:	83 e6 02             	and    esi,0x2
c0000e0f:	0f 85 a0 00 00 00    	jne    c0000eb5 <dlfree+0xf1>
c0000e15:	83 c9 01             	or     ecx,0x1
c0000e18:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1b:	89 0d 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,ecx
c0000e21:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e24:	83 e1 fc             	and    ecx,0xfffffffc
c0000e27:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2b:	75 13                	jne    c0000e40 <dlfree+0x7c>
c0000e2d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e30:	29 da                	sub    edx,ebx
c0000e32:	01 d8                	add    eax,ebx
c0000e34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e40:	39 35 8c e1 02 c0    	cmp    DWORD PTR ds:0xc002e18c,esi
c0000e46:	74 40                	je     c0000e88 <dlfree+0xc4>
c0000e48:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e4f:	80 e3 01             	and    bl,0x1
c0000e52:	75 0e                	jne    c0000e62 <dlfree+0x9e>
c0000e54:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e57:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5a:	01 c8                	add    eax,ecx
c0000e5c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e5f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e62:	8b 0d 9c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e19c
c0000e68:	c7 42 0c 94 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e194
c0000e6f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e72:	89 15 9c e1 02 c0    	mov    DWORD PTR ds:0xc002e19c,edx
c0000e78:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7b:	89 c1                	mov    ecx,eax
c0000e7d:	83 c9 01             	or     ecx,0x1
c0000e80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e83:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e86:	eb 10                	jmp    c0000e98 <dlfree+0xd4>
c0000e88:	01 c8                	add    eax,ecx
c0000e8a:	89 c1                	mov    ecx,eax
c0000e8c:	83 c9 01             	or     ecx,0x1
c0000e8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e92:	89 15 8c e1 02 c0    	mov    DWORD PTR ds:0xc002e18c,edx
c0000e98:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9d:	76 16                	jbe    c0000eb5 <dlfree+0xf1>
c0000e9f:	f6 05 60 e1 02 c0 02 	test   BYTE PTR ds:0xc002e160,0x2
c0000ea6:	74 0d                	je     c0000eb5 <dlfree+0xf1>
c0000ea8:	5b                   	pop    ebx
c0000ea9:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	e9 28 fe ff ff       	jmp    c0000cdd <malloc_consolidate>
c0000eb5:	5b                   	pop    ebx
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	c3                   	ret    

c0000eb9 <sYSMALLOc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	89 d3                	mov    ebx,edx
c0000ebf:	83 ec 2c             	sub    esp,0x2c
c0000ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ecc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed6:	74 1f                	je     c0000ef7 <sYSMALLOc+0x3e>
c0000ed8:	89 d8                	mov    eax,ebx
c0000eda:	e8 fe fd ff ff       	call   c0000cdd <malloc_consolidate>
c0000edf:	83 ec 0c             	sub    esp,0xc
c0000ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee6:	83 e8 07             	sub    eax,0x7
c0000ee9:	50                   	push   eax
c0000eea:	e8 30 02 00 00       	call   c000111f <dlmalloc>
c0000eef:	83 c4 10             	add    esp,0x10
c0000ef2:	e9 20 02 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000ef7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efa:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f03:	83 e0 fc             	and    eax,0xfffffffc
c0000f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f0e:	83 c0 10             	add    eax,0x10
c0000f11:	01 c1                	add    ecx,eax
c0000f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f17:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f1e:	74 04                	je     c0000f24 <sYSMALLOc+0x6b>
c0000f20:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f24:	f7 da                	neg    edx
c0000f26:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f2e:	21 d1                	and    ecx,edx
c0000f30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f34:	7f 07                	jg     c0000f3d <sYSMALLOc+0x84>
c0000f36:	31 c0                	xor    eax,eax
c0000f38:	e9 da 01 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000f3d:	83 ec 0c             	sub    esp,0xc
c0000f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f44:	e8 56 e7 00 00       	call   c000f69f <sbrk>
c0000f49:	83 c4 10             	add    esp,0x10
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f51:	74 e3                	je     c0000f36 <sYSMALLOc+0x7d>
c0000f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f57:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f5e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f64:	39 f1                	cmp    ecx,esi
c0000f66:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6c:	75 13                	jne    c0000f81 <sYSMALLOc+0xc8>
c0000f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f72:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f76:	83 c8 01             	or     eax,0x1
c0000f79:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7c:	e9 3e 01 00 00       	jmp    c00010bf <sYSMALLOc+0x206>
c0000f81:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f87:	88 d0                	mov    al,dl
c0000f89:	83 e0 01             	and    eax,0x1
c0000f8c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f95:	0f 95 c0             	setne  al
c0000f98:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9c:	39 f1                	cmp    ecx,esi
c0000f9e:	76 12                	jbe    c0000fb2 <sYSMALLOc+0xf9>
c0000fa0:	84 c0                	test   al,al
c0000fa2:	74 0e                	je     c0000fb2 <sYSMALLOc+0xf9>
c0000fa4:	83 e2 fe             	and    edx,0xfffffffe
c0000fa7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fad:	e9 83 00 00 00       	jmp    c0001035 <sYSMALLOc+0x17c>
c0000fb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb7:	74 7c                	je     c0001035 <sYSMALLOc+0x17c>
c0000fb9:	84 c0                	test   al,al
c0000fbb:	74 0c                	je     c0000fc9 <sYSMALLOc+0x110>
c0000fbd:	89 f0                	mov    eax,esi
c0000fbf:	29 c8                	sub    eax,ecx
c0000fc1:	01 e8                	add    eax,ebp
c0000fc3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc9:	89 f2                	mov    edx,esi
c0000fcb:	83 e2 07             	and    edx,0x7
c0000fce:	74 0c                	je     c0000fdc <sYSMALLOc+0x123>
c0000fd0:	b8 08 00 00 00       	mov    eax,0x8
c0000fd5:	29 d0                	sub    eax,edx
c0000fd7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fda:	eb 04                	jmp    c0000fe0 <sYSMALLOc+0x127>
c0000fdc:	89 f5                	mov    ebp,esi
c0000fde:	31 c0                	xor    eax,eax
c0000fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fec:	01 c1                	add    ecx,eax
c0000fee:	83 ec 0c             	sub    esp,0xc
c0000ff1:	01 f1                	add    ecx,esi
c0000ff3:	01 ca                	add    edx,ecx
c0000ff5:	29 c8                	sub    eax,ecx
c0000ff7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffb:	01 c2                	add    edx,eax
c0000ffd:	52                   	push   edx
c0000ffe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001002:	e8 98 e6 00 00       	call   c000f69f <sbrk>
c0001007:	83 c4 10             	add    esp,0x10
c000100a:	83 f8 ff             	cmp    eax,0xffffffff
c000100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001011:	75 0f                	jne    c0001022 <sYSMALLOc+0x169>
c0001013:	83 ec 0c             	sub    esp,0xc
c0001016:	6a 00                	push   0x0
c0001018:	e8 82 e6 00 00       	call   c000f69f <sbrk>
c000101d:	83 c4 10             	add    esp,0x10
c0001020:	eb 30                	jmp    c0001052 <sYSMALLOc+0x199>
c0001022:	39 c6                	cmp    esi,eax
c0001024:	76 33                	jbe    c0001059 <sYSMALLOc+0x1a0>
c0001026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001031:	01 f0                	add    eax,esi
c0001033:	eb 1d                	jmp    c0001052 <sYSMALLOc+0x199>
c0001035:	83 ec 0c             	sub    esp,0xc
c0001038:	89 f5                	mov    ebp,esi
c000103a:	6a 00                	push   0x0
c000103c:	e8 5e e6 00 00       	call   c000f69f <sbrk>
c0001041:	89 c2                	mov    edx,eax
c0001043:	29 f2                	sub    edx,esi
c0001045:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001052:	31 d2                	xor    edx,edx
c0001054:	83 f8 ff             	cmp    eax,0xffffffff
c0001057:	74 66                	je     c00010bf <sYSMALLOc+0x206>
c0001059:	29 e8                	sub    eax,ebp
c000105b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000105e:	01 d0                	add    eax,edx
c0001060:	83 c8 01             	or     eax,0x1
c0001063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001066:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001071:	74 4c                	je     c00010bf <sYSMALLOc+0x206>
c0001073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001077:	83 e8 0c             	sub    eax,0xc
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c2                	mov    edx,eax
c000107f:	83 ca 01             	or     edx,0x1
c0001082:	83 f8 0f             	cmp    eax,0xf
c0001085:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001088:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001090:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001098:	76 25                	jbe    c00010bf <sYSMALLOc+0x206>
c000109a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a0:	83 ec 0c             	sub    esp,0xc
c00010a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ad:	83 c7 08             	add    edi,0x8
c00010b0:	57                   	push   edi
c00010b1:	e8 0e fd ff ff       	call   c0000dc4 <dlfree>
c00010b6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x21a>
c00010cd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010df:	73 06                	jae    c00010e7 <sYSMALLOc+0x22e>
c00010e1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ed:	83 e2 fc             	and    edx,0xfffffffc
c00010f0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f4:	0f 82 3c fe ff ff    	jb     c0000f36 <sYSMALLOc+0x7d>
c00010fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010fe:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001101:	29 fa                	sub    edx,edi
c0001103:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001106:	83 ca 01             	or     edx,0x1
c0001109:	89 fb                	mov    ebx,edi
c000110b:	83 c0 08             	add    eax,0x8
c000110e:	83 cb 01             	or     ebx,0x1
c0001111:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	83 c4 2c             	add    esp,0x2c
c000111a:	5b                   	pop    ebx
c000111b:	5e                   	pop    esi
c000111c:	5f                   	pop    edi
c000111d:	5d                   	pop    ebp
c000111e:	c3                   	ret    

c000111f <dlmalloc>:
c000111f:	55                   	push   ebp
c0001120:	57                   	push   edi
c0001121:	56                   	push   esi
c0001122:	53                   	push   ebx
c0001123:	83 ec 1c             	sub    esp,0x1c
c0001126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112a:	83 f8 df             	cmp    eax,0xffffffdf
c000112d:	0f 87 70 03 00 00    	ja     c00014a3 <dlmalloc+0x384>
c0001133:	83 c0 0b             	add    eax,0xb
c0001136:	be 10 00 00 00       	mov    esi,0x10
c000113b:	83 f8 0f             	cmp    eax,0xf
c000113e:	76 05                	jbe    c0001145 <dlmalloc+0x26>
c0001140:	83 e0 f8             	and    eax,0xfffffff8
c0001143:	89 c6                	mov    esi,eax
c0001145:	8b 3d 60 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e160
c000114b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001151:	75 17                	jne    c000116a <dlmalloc+0x4b>
c0001153:	85 ff                	test   edi,edi
c0001155:	0f 85 05 03 00 00    	jne    c0001460 <dlmalloc+0x341>
c000115b:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001160:	e8 78 fb ff ff       	call   c0000cdd <malloc_consolidate>
c0001165:	e9 f6 02 00 00       	jmp    c0001460 <dlmalloc+0x341>
c000116a:	39 f7                	cmp    edi,esi
c000116c:	72 1f                	jb     c000118d <dlmalloc+0x6e>
c000116e:	89 f2                	mov    edx,esi
c0001170:	c1 ea 03             	shr    edx,0x3
c0001173:	83 ea 02             	sub    edx,0x2
c0001176:	8b 04 95 64 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e9c]
c000117d:	85 c0                	test   eax,eax
c000117f:	74 0c                	je     c000118d <dlmalloc+0x6e>
c0001181:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001184:	89 0c 95 64 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e9c],ecx
c000118b:	eb 30                	jmp    c00011bd <dlmalloc+0x9e>
c000118d:	89 f0                	mov    eax,esi
c000118f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001195:	77 2e                	ja     c00011c5 <dlmalloc+0xa6>
c0001197:	c1 e8 03             	shr    eax,0x3
c000119a:	8d 14 c5 94 e1 02 c0 	lea    edx,[eax*8-0x3ffd1e6c]
c00011a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ab:	39 c3                	cmp    ebx,eax
c00011ad:	74 2e                	je     c00011dd <dlmalloc+0xbe>
c00011af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011ba:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bd:	83 c0 08             	add    eax,0x8
c00011c0:	e9 e0 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c00011c5:	e8 8f fa ff ff       	call   c0000c59 <largebin_index>
c00011ca:	83 e7 02             	and    edi,0x2
c00011cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d1:	74 0a                	je     c00011dd <dlmalloc+0xbe>
c00011d3:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c00011d8:	e8 00 fb ff ff       	call   c0000cdd <malloc_consolidate>
c00011dd:	8d 46 10             	lea    eax,[esi+0x10]
c00011e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e4:	8b 1d a0 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1a0
c00011ea:	81 fb 94 e1 02 c0    	cmp    ebx,0xc002e194
c00011f0:	0f 84 13 01 00 00    	je     c0001309 <dlmalloc+0x1ea>
c00011f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fc:	83 e7 fc             	and    edi,0xfffffffc
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	77 4c                	ja     c0001253 <dlmalloc+0x134>
c0001207:	3d 94 e1 02 c0       	cmp    eax,0xc002e194
c000120c:	75 45                	jne    c0001253 <dlmalloc+0x134>
c000120e:	39 1d 90 e1 02 c0    	cmp    DWORD PTR ds:0xc002e190,ebx
c0001214:	75 3d                	jne    c0001253 <dlmalloc+0x134>
c0001216:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121a:	73 37                	jae    c0001253 <dlmalloc+0x134>
c000121c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000121f:	89 fa                	mov    edx,edi
c0001221:	a3 9c e1 02 c0       	mov    ds:0xc002e19c,eax
c0001226:	a3 a0 e1 02 c0       	mov    ds:0xc002e1a0,eax
c000122b:	a3 90 e1 02 c0       	mov    ds:0xc002e190,eax
c0001230:	29 f2                	sub    edx,esi
c0001232:	c7 40 08 94 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e194
c0001239:	c7 40 0c 94 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e194
c0001240:	83 ce 01             	or     esi,0x1
c0001243:	89 d1                	mov    ecx,edx
c0001245:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001248:	83 c9 01             	or     ecx,0x1
c000124b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000124e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001251:	eb 15                	jmp    c0001268 <dlmalloc+0x149>
c0001253:	a3 a0 e1 02 c0       	mov    ds:0xc002e1a0,eax
c0001258:	39 fe                	cmp    esi,edi
c000125a:	c7 40 08 94 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e194
c0001261:	75 0d                	jne    c0001270 <dlmalloc+0x151>
c0001263:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001268:	8d 43 08             	lea    eax,[ebx+0x8]
c000126b:	e9 35 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001270:	89 f8                	mov    eax,edi
c0001272:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001278:	77 19                	ja     c0001293 <dlmalloc+0x174>
c000127a:	c1 e8 03             	shr    eax,0x3
c000127d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001280:	83 c2 0d             	add    edx,0xd
c0001283:	8d 2c 95 58 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1ea8]
c000128a:	8b 14 95 60 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ea0]
c0001291:	eb 46                	jmp    c00012d9 <dlmalloc+0x1ba>
c0001293:	e8 c1 f9 ff ff       	call   c0000c59 <largebin_index>
c0001298:	8d 14 00             	lea    edx,[eax+eax*1]
c000129b:	83 c2 0d             	add    edx,0xd
c000129e:	8d 0c 95 60 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1ea0]
c00012a5:	8b 14 95 60 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ea0]
c00012ac:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b3:	89 d5                	mov    ebp,edx
c00012b5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b9:	74 1e                	je     c00012d9 <dlmalloc+0x1ba>
c00012bb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012be:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c1:	77 12                	ja     c00012d5 <dlmalloc+0x1b6>
c00012c3:	83 cf 01             	or     edi,0x1
c00012c6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c9:	76 05                	jbe    c00012d0 <dlmalloc+0x1b1>
c00012cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ce:	eb f6                	jmp    c00012c6 <dlmalloc+0x1a7>
c00012d0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d3:	eb 04                	jmp    c00012d9 <dlmalloc+0x1ba>
c00012d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d9:	89 c7                	mov    edi,eax
c00012db:	88 c1                	mov    cl,al
c00012dd:	c1 ff 05             	sar    edi,0x5
c00012e0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e4:	bf 01 00 00 00       	mov    edi,0x1
c00012e9:	d3 e7                	shl    edi,cl
c00012eb:	89 f8                	mov    eax,edi
c00012ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f1:	09 04 bd 94 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1b6c],eax
c00012f8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012fe:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001301:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001304:	e9 db fe ff ff       	jmp    c00011e4 <dlmalloc+0xc5>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	76 78                	jbe    c0001389 <dlmalloc+0x26a>
c0001311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001315:	8d 04 c5 94 e1 02 c0 	lea    eax,[eax*8-0x3ffd1e6c]
c000131c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000131f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001322:	39 ca                	cmp    edx,ecx
c0001324:	74 63                	je     c0001389 <dlmalloc+0x26a>
c0001326:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001329:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132c:	83 e3 fc             	and    ebx,0xfffffffc
c000132f:	39 de                	cmp    esi,ebx
c0001331:	77 52                	ja     c0001385 <dlmalloc+0x266>
c0001333:	89 df                	mov    edi,ebx
c0001335:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001338:	29 f7                	sub    edi,esi
c000133a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133d:	01 d3                	add    ebx,edx
c000133f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001342:	83 ff 0f             	cmp    edi,0xf
c0001345:	8d 42 08             	lea    eax,[edx+0x8]
c0001348:	77 09                	ja     c0001353 <dlmalloc+0x234>
c000134a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000134e:	e9 52 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001353:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001356:	83 ce 01             	or     esi,0x1
c0001359:	89 0d 9c e1 02 c0    	mov    DWORD PTR ds:0xc002e19c,ecx
c000135f:	89 0d a0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a0,ecx
c0001365:	c7 41 08 94 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e194
c000136c:	c7 41 0c 94 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e194
c0001373:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001376:	89 fa                	mov    edx,edi
c0001378:	83 ca 01             	or     edx,0x1
c000137b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000137e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001380:	e9 20 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001385:	89 c2                	mov    edx,eax
c0001387:	eb 99                	jmp    c0001322 <dlmalloc+0x203>
c0001389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138d:	b8 01 00 00 00       	mov    eax,0x1
c0001392:	41                   	inc    ecx
c0001393:	89 cb                	mov    ebx,ecx
c0001395:	8d 14 cd 8c e1 02 c0 	lea    edx,[ecx*8-0x3ffd1e74]
c000139c:	c1 eb 05             	shr    ebx,0x5
c000139f:	d3 e0                	shl    eax,cl
c00013a1:	8b 3c 9d 94 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b6c]
c00013a8:	39 f8                	cmp    eax,edi
c00013aa:	77 04                	ja     c00013b0 <dlmalloc+0x291>
c00013ac:	85 c0                	test   eax,eax
c00013ae:	75 26                	jne    c00013d6 <dlmalloc+0x2b7>
c00013b0:	43                   	inc    ebx
c00013b1:	83 fb 02             	cmp    ebx,0x2
c00013b4:	0f 87 a6 00 00 00    	ja     c0001460 <dlmalloc+0x341>
c00013ba:	8b 3c 9d 94 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b6c]
c00013c1:	85 ff                	test   edi,edi
c00013c3:	74 eb                	je     c00013b0 <dlmalloc+0x291>
c00013c5:	89 d8                	mov    eax,ebx
c00013c7:	c1 e0 06             	shl    eax,0x6
c00013ca:	8d 14 85 8c e1 02 c0 	lea    edx,[eax*4-0x3ffd1e74]
c00013d1:	b8 01 00 00 00       	mov    eax,0x1
c00013d6:	85 f8                	test   eax,edi
c00013d8:	75 07                	jne    c00013e1 <dlmalloc+0x2c2>
c00013da:	83 c2 08             	add    edx,0x8
c00013dd:	01 c0                	add    eax,eax
c00013df:	eb f5                	jmp    c00013d6 <dlmalloc+0x2b7>
c00013e1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e4:	39 ca                	cmp    edx,ecx
c00013e6:	75 14                	jne    c00013fc <dlmalloc+0x2dd>
c00013e8:	89 c1                	mov    ecx,eax
c00013ea:	83 c2 08             	add    edx,0x8
c00013ed:	f7 d1                	not    ecx
c00013ef:	01 c0                	add    eax,eax
c00013f1:	21 cf                	and    edi,ecx
c00013f3:	89 3c 9d 94 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1b6c],edi
c00013fa:	eb ac                	jmp    c00013a8 <dlmalloc+0x289>
c00013fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013ff:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001402:	83 e0 fc             	and    eax,0xfffffffc
c0001405:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001408:	89 c3                	mov    ebx,eax
c000140a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140d:	29 f3                	sub    ebx,esi
c000140f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001412:	83 fb 0f             	cmp    ebx,0xf
c0001415:	8d 41 08             	lea    eax,[ecx+0x8]
c0001418:	77 09                	ja     c0001423 <dlmalloc+0x304>
c000141a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000141e:	e9 82 00 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001423:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001426:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142c:	89 3d 9c e1 02 c0    	mov    DWORD PTR ds:0xc002e19c,edi
c0001432:	89 3d a0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a0,edi
c0001438:	c7 47 08 94 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e194
c000143f:	c7 47 0c 94 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e194
c0001446:	77 06                	ja     c000144e <dlmalloc+0x32f>
c0001448:	89 3d 90 e1 02 c0    	mov    DWORD PTR ds:0xc002e190,edi
c000144e:	83 ce 01             	or     esi,0x1
c0001451:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001454:	89 d9                	mov    ecx,ebx
c0001456:	83 c9 01             	or     ecx,0x1
c0001459:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145c:	89 1a                	mov    DWORD PTR [edx],ebx
c000145e:	eb 45                	jmp    c00014a5 <dlmalloc+0x386>
c0001460:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c0001465:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146b:	83 e2 fc             	and    edx,0xfffffffc
c000146e:	39 d1                	cmp    ecx,edx
c0001470:	77 1e                	ja     c0001490 <dlmalloc+0x371>
c0001472:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001475:	89 f3                	mov    ebx,esi
c0001477:	89 0d 8c e1 02 c0    	mov    DWORD PTR ds:0xc002e18c,ecx
c000147d:	83 cb 01             	or     ebx,0x1
c0001480:	29 f2                	sub    edx,esi
c0001482:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001485:	83 ca 01             	or     edx,0x1
c0001488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148b:	e9 2d fd ff ff       	jmp    c00011bd <dlmalloc+0x9e>
c0001490:	83 c4 1c             	add    esp,0x1c
c0001493:	89 f0                	mov    eax,esi
c0001495:	5b                   	pop    ebx
c0001496:	ba 60 e1 02 c0       	mov    edx,0xc002e160
c000149b:	5e                   	pop    esi
c000149c:	5f                   	pop    edi
c000149d:	5d                   	pop    ebp
c000149e:	e9 16 fa ff ff       	jmp    c0000eb9 <sYSMALLOc>
c00014a3:	31 c0                	xor    eax,eax
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	5b                   	pop    ebx
c00014a9:	5e                   	pop    esi
c00014aa:	5f                   	pop    edi
c00014ab:	5d                   	pop    ebp
c00014ac:	c3                   	ret    

c00014ad <iALLOc>:
c00014ad:	55                   	push   ebp
c00014ae:	89 c5                	mov    ebp,eax
c00014b0:	57                   	push   edi
c00014b1:	56                   	push   esi
c00014b2:	53                   	push   ebx
c00014b3:	83 ec 2c             	sub    esp,0x2c
c00014b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c2:	83 3d 60 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e160,0x0
c00014c9:	75 12                	jne    c00014dd <iALLOc+0x30>
c00014cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014cf:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c00014d4:	e8 04 f8 ff ff       	call   c0000cdd <malloc_consolidate>
c00014d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	74 12                	je     c00014f6 <iALLOc+0x49>
c00014e4:	85 ed                	test   ebp,ebp
c00014e6:	0f 84 64 01 00 00    	je     c0001650 <iALLOc+0x1a3>
c00014ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f4:	eb 33                	jmp    c0001529 <iALLOc+0x7c>
c00014f6:	85 ed                	test   ebp,ebp
c00014f8:	75 14                	jne    c000150e <iALLOc+0x61>
c00014fa:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001502:	83 c4 2c             	add    esp,0x2c
c0001505:	5b                   	pop    ebx
c0001506:	5e                   	pop    esi
c0001507:	5f                   	pop    edi
c0001508:	5d                   	pop    ebp
c0001509:	e9 11 fc ff ff       	jmp    c000111f <dlmalloc>
c000150e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001515:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151d:	83 f8 0f             	cmp    eax,0xf
c0001520:	76 07                	jbe    c0001529 <iALLOc+0x7c>
c0001522:	83 e0 f8             	and    eax,0xfffffff8
c0001525:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001529:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000152e:	75 09                	jne    c0001539 <iALLOc+0x8c>
c0001530:	89 d0                	mov    eax,edx
c0001532:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001535:	31 f6                	xor    esi,esi
c0001537:	eb 3b                	jmp    c0001574 <iALLOc+0xc7>
c0001539:	8b 02                	mov    eax,DWORD PTR [edx]
c000153b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001543:	83 c0 0b             	add    eax,0xb
c0001546:	83 f8 0f             	cmp    eax,0xf
c0001549:	76 07                	jbe    c0001552 <iALLOc+0xa5>
c000154b:	83 e0 f8             	and    eax,0xfffffff8
c000154e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001556:	0f af f5             	imul   esi,ebp
c0001559:	eb 25                	jmp    c0001580 <iALLOc+0xd3>
c000155b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001560:	bb 10 00 00 00       	mov    ebx,0x10
c0001565:	83 f9 0f             	cmp    ecx,0xf
c0001568:	76 05                	jbe    c000156f <iALLOc+0xc2>
c000156a:	83 e1 f8             	and    ecx,0xfffffff8
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	01 de                	add    esi,ebx
c0001571:	83 c0 04             	add    eax,0x4
c0001574:	39 c7                	cmp    edi,eax
c0001576:	75 e3                	jne    c000155b <iALLOc+0xae>
c0001578:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001580:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001584:	8b 1d b4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4b4
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	c7 05 b4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4b4,0x0
c0001597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000159f:	50                   	push   eax
c00015a0:	e8 7a fb ff ff       	call   c000111f <dlmalloc>
c00015a5:	83 c4 10             	add    esp,0x10
c00015a8:	89 1d b4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4b4,ebx
c00015ae:	85 c0                	test   eax,eax
c00015b0:	0f 84 92 00 00 00    	je     c0001648 <iALLOc+0x19b>
c00015b6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b9:	8d 78 f8             	lea    edi,[eax-0x8]
c00015bc:	83 e3 fc             	and    ebx,0xfffffffc
c00015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c8:	74 1e                	je     c00015e8 <iALLOc+0x13b>
c00015ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ce:	89 d9                	mov    ecx,ebx
c00015d0:	52                   	push   edx
c00015d1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d5:	83 e9 04             	sub    ecx,0x4
c00015d8:	51                   	push   ecx
c00015d9:	6a 00                	push   0x0
c00015db:	50                   	push   eax
c00015dc:	e8 9f f1 ff ff       	call   c0000780 <memset>
c00015e1:	83 c4 10             	add    esp,0x10
c00015e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ed:	75 14                	jne    c0001603 <iALLOc+0x156>
c00015ef:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f2:	29 f3                	sub    ebx,esi
c00015f4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f7:	83 cb 01             	or     ebx,0x1
c00015fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001601:	89 f3                	mov    ebx,esi
c0001603:	31 c0                	xor    eax,eax
c0001605:	4d                   	dec    ebp
c0001606:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001609:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160d:	39 c5                	cmp    ebp,eax
c000160f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001612:	74 2c                	je     c0001640 <iALLOc+0x193>
c0001614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001618:	85 c9                	test   ecx,ecx
c000161a:	75 15                	jne    c0001631 <iALLOc+0x184>
c000161c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000161f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001622:	b9 10 00 00 00       	mov    ecx,0x10
c0001627:	83 fe 0f             	cmp    esi,0xf
c000162a:	76 05                	jbe    c0001631 <iALLOc+0x184>
c000162c:	83 e6 f8             	and    esi,0xfffffff8
c000162f:	89 f1                	mov    ecx,esi
c0001631:	89 ce                	mov    esi,ecx
c0001633:	29 cb                	sub    ebx,ecx
c0001635:	83 ce 01             	or     esi,0x1
c0001638:	40                   	inc    eax
c0001639:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163c:	01 cf                	add    edi,ecx
c000163e:	eb c6                	jmp    c0001606 <iALLOc+0x159>
c0001640:	83 cb 01             	or     ebx,0x1
c0001643:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001646:	eb 08                	jmp    c0001650 <iALLOc+0x1a3>
c0001648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001654:	83 c4 2c             	add    esp,0x2c
c0001657:	5b                   	pop    ebx
c0001658:	5e                   	pop    esi
c0001659:	5f                   	pop    edi
c000165a:	5d                   	pop    ebp
c000165b:	c3                   	ret    

c000165c <dlrealloc>:
c000165c:	55                   	push   ebp
c000165d:	57                   	push   edi
c000165e:	56                   	push   esi
c000165f:	53                   	push   ebx
c0001660:	83 ec 1c             	sub    esp,0x1c
c0001663:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166b:	85 db                	test   ebx,ebx
c000166d:	75 10                	jne    c000167f <dlrealloc+0x23>
c000166f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001673:	83 c4 1c             	add    esp,0x1c
c0001676:	5b                   	pop    ebx
c0001677:	5e                   	pop    esi
c0001678:	5f                   	pop    edi
c0001679:	5d                   	pop    ebp
c000167a:	e9 a0 fa ff ff       	jmp    c000111f <dlmalloc>
c000167f:	83 f8 df             	cmp    eax,0xffffffdf
c0001682:	76 07                	jbe    c000168b <dlrealloc+0x2f>
c0001684:	31 db                	xor    ebx,ebx
c0001686:	e9 7c 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c000168b:	83 c0 0b             	add    eax,0xb
c000168e:	bf 10 00 00 00       	mov    edi,0x10
c0001693:	83 f8 0f             	cmp    eax,0xf
c0001696:	76 05                	jbe    c000169d <dlrealloc+0x41>
c0001698:	83 e0 f8             	and    eax,0xfffffff8
c000169b:	89 c7                	mov    edi,eax
c000169d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a3:	89 c6                	mov    esi,eax
c00016a5:	83 e6 fc             	and    esi,0xfffffffc
c00016a8:	a8 02                	test   al,0x2
c00016aa:	75 d8                	jne    c0001684 <dlrealloc+0x28>
c00016ac:	39 f7                	cmp    edi,esi
c00016ae:	0f 86 15 01 00 00    	jbe    c00017c9 <dlrealloc+0x16d>
c00016b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bb:	39 15 8c e1 02 c0    	cmp    DWORD PTR ds:0xc002e18c,edx
c00016c1:	75 33                	jne    c00016f6 <dlrealloc+0x9a>
c00016c3:	83 e1 fc             	and    ecx,0xfffffffc
c00016c6:	01 f1                	add    ecx,esi
c00016c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d3:	77 49                	ja     c000171e <dlrealloc+0xc2>
c00016d5:	01 fd                	add    ebp,edi
c00016d7:	83 e0 01             	and    eax,0x1
c00016da:	09 f8                	or     eax,edi
c00016dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016df:	89 2d 8c e1 02 c0    	mov    DWORD PTR ds:0xc002e18c,ebp
c00016e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e9:	29 f8                	sub    eax,edi
c00016eb:	83 c8 01             	or     eax,0x1
c00016ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f1:	e9 11 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c00016f6:	89 c8                	mov    eax,ecx
c00016f8:	83 e0 fe             	and    eax,0xfffffffe
c00016fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001700:	75 1c                	jne    c000171e <dlrealloc+0xc2>
c0001702:	83 e1 fc             	and    ecx,0xfffffffc
c0001705:	01 f1                	add    ecx,esi
c0001707:	39 cf                	cmp    edi,ecx
c0001709:	77 13                	ja     c000171e <dlrealloc+0xc2>
c000170b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000170e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001711:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001714:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001717:	89 ce                	mov    esi,ecx
c0001719:	e9 ab 00 00 00       	jmp    c00017c9 <dlrealloc+0x16d>
c000171e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001722:	8d 47 f9             	lea    eax,[edi-0x7]
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	50                   	push   eax
c0001729:	e8 f1 f9 ff ff       	call   c000111f <dlmalloc>
c000172e:	83 c4 10             	add    esp,0x10
c0001731:	89 c1                	mov    ecx,eax
c0001733:	85 c0                	test   eax,eax
c0001735:	0f 84 49 ff ff ff    	je     c0001684 <dlrealloc+0x28>
c000173b:	8d 40 f8             	lea    eax,[eax-0x8]
c000173e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001742:	39 c2                	cmp    edx,eax
c0001744:	75 0a                	jne    c0001750 <dlrealloc+0xf4>
c0001746:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	01 c6                	add    esi,eax
c000174e:	eb 79                	jmp    c00017c9 <dlrealloc+0x16d>
c0001750:	83 ee 04             	sub    esi,0x4
c0001753:	83 fe 27             	cmp    esi,0x27
c0001756:	76 16                	jbe    c000176e <dlrealloc+0x112>
c0001758:	50                   	push   eax
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	51                   	push   ecx
c000175c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001760:	e8 e7 ef ff ff       	call   c000074c <memcpy>
c0001765:	83 c4 10             	add    esp,0x10
c0001768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176c:	eb 43                	jmp    c00017b1 <dlrealloc+0x155>
c000176e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001770:	83 fe 13             	cmp    esi,0x13
c0001773:	89 01                	mov    DWORD PTR [ecx],eax
c0001775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001778:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000177e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001781:	76 2e                	jbe    c00017b1 <dlrealloc+0x155>
c0001783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001786:	83 fe 1b             	cmp    esi,0x1b
c0001789:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000178f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001792:	76 1d                	jbe    c00017b1 <dlrealloc+0x155>
c0001794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001797:	83 fe 23             	cmp    esi,0x23
c000179a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a3:	76 0c                	jbe    c00017b1 <dlrealloc+0x155>
c00017a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b5:	83 ec 0c             	sub    esp,0xc
c00017b8:	53                   	push   ebx
c00017b9:	e8 06 f6 ff ff       	call   c0000dc4 <dlfree>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c5:	89 cb                	mov    ebx,ecx
c00017c7:	eb 3e                	jmp    c0001807 <dlrealloc+0x1ab>
c00017c9:	89 f2                	mov    edx,esi
c00017cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ce:	29 fa                	sub    edx,edi
c00017d0:	83 e1 01             	and    ecx,0x1
c00017d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d7:	83 fa 0f             	cmp    edx,0xf
c00017da:	77 0b                	ja     c00017e7 <dlrealloc+0x18b>
c00017dc:	09 ce                	or     esi,ecx
c00017de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e5:	eb 20                	jmp    c0001807 <dlrealloc+0x1ab>
c00017e7:	01 fd                	add    ebp,edi
c00017e9:	83 ec 0c             	sub    esp,0xc
c00017ec:	09 cf                	or     edi,ecx
c00017ee:	83 ca 01             	or     edx,0x1
c00017f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f4:	83 c5 08             	add    ebp,0x8
c00017f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fe:	55                   	push   ebp
c00017ff:	e8 c0 f5 ff ff       	call   c0000dc4 <dlfree>
c0001804:	83 c4 10             	add    esp,0x10
c0001807:	83 c4 1c             	add    esp,0x1c
c000180a:	89 d8                	mov    eax,ebx
c000180c:	5b                   	pop    ebx
c000180d:	5e                   	pop    esi
c000180e:	5f                   	pop    edi
c000180f:	5d                   	pop    ebp
c0001810:	c3                   	ret    

c0001811 <dlmemalign>:
c0001811:	55                   	push   ebp
c0001812:	57                   	push   edi
c0001813:	56                   	push   esi
c0001814:	53                   	push   ebx
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001820:	83 fa 08             	cmp    edx,0x8
c0001823:	77 10                	ja     c0001835 <dlmemalign+0x24>
c0001825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001829:	83 c4 0c             	add    esp,0xc
c000182c:	5b                   	pop    ebx
c000182d:	5e                   	pop    esi
c000182e:	5f                   	pop    edi
c000182f:	5d                   	pop    ebp
c0001830:	e9 ea f8 ff ff       	jmp    c000111f <dlmalloc>
c0001835:	bf 10 00 00 00       	mov    edi,0x10
c000183a:	83 fa 0f             	cmp    edx,0xf
c000183d:	76 13                	jbe    c0001852 <dlmemalign+0x41>
c000183f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001842:	85 d1                	test   ecx,edx
c0001844:	75 04                	jne    c000184a <dlmemalign+0x39>
c0001846:	89 d7                	mov    edi,edx
c0001848:	eb 08                	jmp    c0001852 <dlmemalign+0x41>
c000184a:	39 d7                	cmp    edi,edx
c000184c:	73 04                	jae    c0001852 <dlmemalign+0x41>
c000184e:	01 ff                	add    edi,edi
c0001850:	eb f8                	jmp    c000184a <dlmemalign+0x39>
c0001852:	83 f8 df             	cmp    eax,0xffffffdf
c0001855:	76 07                	jbe    c000185e <dlmemalign+0x4d>
c0001857:	31 c0                	xor    eax,eax
c0001859:	e9 ce 00 00 00       	jmp    c000192c <dlmemalign+0x11b>
c000185e:	83 c0 0b             	add    eax,0xb
c0001861:	bd 10 00 00 00       	mov    ebp,0x10
c0001866:	83 f8 0f             	cmp    eax,0xf
c0001869:	76 05                	jbe    c0001870 <dlmemalign+0x5f>
c000186b:	83 e0 f8             	and    eax,0xfffffff8
c000186e:	89 c5                	mov    ebp,eax
c0001870:	83 ec 0c             	sub    esp,0xc
c0001873:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001877:	50                   	push   eax
c0001878:	e8 a2 f8 ff ff       	call   c000111f <dlmalloc>
c000187d:	83 c4 10             	add    esp,0x10
c0001880:	89 c1                	mov    ecx,eax
c0001882:	85 c0                	test   eax,eax
c0001884:	74 d1                	je     c0001857 <dlmemalign+0x46>
c0001886:	31 d2                	xor    edx,edx
c0001888:	8d 70 f8             	lea    esi,[eax-0x8]
c000188b:	f7 f7                	div    edi
c000188d:	85 d2                	test   edx,edx
c000188f:	74 62                	je     c00018f3 <dlmemalign+0xe2>
c0001891:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001895:	89 f8                	mov    eax,edi
c0001897:	f7 d8                	neg    eax
c0001899:	21 c3                	and    ebx,eax
c000189b:	83 eb 08             	sub    ebx,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	29 f0                	sub    eax,esi
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	77 02                	ja     c00018a9 <dlmemalign+0x98>
c00018a7:	01 fb                	add    ebx,edi
c00018a9:	89 d8                	mov    eax,ebx
c00018ab:	29 f0                	sub    eax,esi
c00018ad:	89 c6                	mov    esi,eax
c00018af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b2:	89 c2                	mov    edx,eax
c00018b4:	83 e2 fc             	and    edx,0xfffffffc
c00018b7:	29 f2                	sub    edx,esi
c00018b9:	a8 02                	test   al,0x2
c00018bb:	74 10                	je     c00018cd <dlmemalign+0xbc>
c00018bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c0:	83 ca 02             	or     edx,0x2
c00018c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c6:	89 33                	mov    DWORD PTR [ebx],esi
c00018c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cb:	eb 5f                	jmp    c000192c <dlmemalign+0x11b>
c00018cd:	83 ec 0c             	sub    esp,0xc
c00018d0:	89 d0                	mov    eax,edx
c00018d2:	83 c8 01             	or     eax,0x1
c00018d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e0:	83 e0 01             	and    eax,0x1
c00018e3:	09 f0                	or     eax,esi
c00018e5:	89 de                	mov    esi,ebx
c00018e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ea:	51                   	push   ecx
c00018eb:	e8 d4 f4 ff ff       	call   c0000dc4 <dlfree>
c00018f0:	83 c4 10             	add    esp,0x10
c00018f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f6:	a8 02                	test   al,0x2
c00018f8:	75 2f                	jne    c0001929 <dlmemalign+0x118>
c00018fa:	83 e0 fc             	and    eax,0xfffffffc
c00018fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001900:	39 c2                	cmp    edx,eax
c0001902:	73 25                	jae    c0001929 <dlmemalign+0x118>
c0001904:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	29 e8                	sub    eax,ebp
c000190c:	83 c2 08             	add    edx,0x8
c000190f:	83 c8 01             	or     eax,0x1
c0001912:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001915:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001918:	83 e0 01             	and    eax,0x1
c000191b:	09 c5                	or     ebp,eax
c000191d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001920:	52                   	push   edx
c0001921:	e8 9e f4 ff ff       	call   c0000dc4 <dlfree>
c0001926:	83 c4 10             	add    esp,0x10
c0001929:	8d 46 08             	lea    eax,[esi+0x8]
c000192c:	83 c4 0c             	add    esp,0xc
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlcalloc>:
c0001934:	53                   	push   ebx
c0001935:	83 ec 14             	sub    esp,0x14
c0001938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001941:	50                   	push   eax
c0001942:	e8 d8 f7 ff ff       	call   c000111f <dlmalloc>
c0001947:	83 c4 10             	add    esp,0x10
c000194a:	89 c3                	mov    ebx,eax
c000194c:	85 c0                	test   eax,eax
c000194e:	74 77                	je     c00019c7 <dlcalloc+0x93>
c0001950:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001953:	89 d0                	mov    eax,edx
c0001955:	83 e0 fc             	and    eax,0xfffffffc
c0001958:	80 e2 02             	and    dl,0x2
c000195b:	75 5a                	jne    c00019b7 <dlcalloc+0x83>
c000195d:	83 e8 04             	sub    eax,0x4
c0001960:	83 f8 27             	cmp    eax,0x27
c0001963:	76 03                	jbe    c0001968 <dlcalloc+0x34>
c0001965:	51                   	push   ecx
c0001966:	eb 53                	jmp    c00019bb <dlcalloc+0x87>
c0001968:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000196e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001975:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197c:	83 f8 13             	cmp    eax,0x13
c000197f:	76 46                	jbe    c00019c7 <dlcalloc+0x93>
c0001981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000198f:	83 f8 1b             	cmp    eax,0x1b
c0001992:	76 33                	jbe    c00019c7 <dlcalloc+0x93>
c0001994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a2:	83 f8 23             	cmp    eax,0x23
c00019a5:	76 20                	jbe    c00019c7 <dlcalloc+0x93>
c00019a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b5:	eb 10                	jmp    c00019c7 <dlcalloc+0x93>
c00019b7:	83 e8 08             	sub    eax,0x8
c00019ba:	52                   	push   edx
c00019bb:	50                   	push   eax
c00019bc:	6a 00                	push   0x0
c00019be:	53                   	push   ebx
c00019bf:	e8 bc ed ff ff       	call   c0000780 <memset>
c00019c4:	83 c4 10             	add    esp,0x10
c00019c7:	89 d8                	mov    eax,ebx
c00019c9:	83 c4 08             	add    esp,0x8
c00019cc:	5b                   	pop    ebx
c00019cd:	c3                   	ret    

c00019ce <dlcfree>:
c00019ce:	e9 f1 f3 ff ff       	jmp    c0000dc4 <dlfree>

c00019d3 <dlindependent_calloc>:
c00019d3:	83 ec 28             	sub    esp,0x28
c00019d6:	b9 03 00 00 00       	mov    ecx,0x3
c00019db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ef:	e8 b9 fa ff ff       	call   c00014ad <iALLOc>
c00019f4:	83 c4 2c             	add    esp,0x2c
c00019f7:	c3                   	ret    

c00019f8 <dlindependent_comalloc>:
c00019f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a00:	31 c9                	xor    ecx,ecx
c0001a02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0a:	e9 9e fa ff ff       	jmp    c00014ad <iALLOc>

c0001a0f <dlvalloc>:
c0001a0f:	83 ec 0c             	sub    esp,0xc
c0001a12:	83 3d 60 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e160,0x0
c0001a19:	75 0a                	jne    c0001a25 <dlvalloc+0x16>
c0001a1b:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001a20:	e8 b8 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a25:	50                   	push   eax
c0001a26:	50                   	push   eax
c0001a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2b:	ff 35 bc e4 02 c0    	push   DWORD PTR ds:0xc002e4bc
c0001a31:	e8 db fd ff ff       	call   c0001811 <dlmemalign>
c0001a36:	83 c4 1c             	add    esp,0x1c
c0001a39:	c3                   	ret    

c0001a3a <dlpvalloc>:
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 3d 60 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e160,0x0
c0001a44:	75 0a                	jne    c0001a50 <dlpvalloc+0x16>
c0001a46:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001a4b:	e8 8d f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a50:	a1 bc e4 02 c0       	mov    eax,ds:0xc002e4bc
c0001a55:	89 c1                	mov    ecx,eax
c0001a57:	52                   	push   edx
c0001a58:	f7 d9                	neg    ecx
c0001a5a:	52                   	push   edx
c0001a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a63:	21 ca                	and    edx,ecx
c0001a65:	52                   	push   edx
c0001a66:	50                   	push   eax
c0001a67:	e8 a5 fd ff ff       	call   c0001811 <dlmemalign>
c0001a6c:	83 c4 1c             	add    esp,0x1c
c0001a6f:	c3                   	ret    

c0001a70 <dlmalloc_trim>:
c0001a70:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001a75:	e8 63 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a7a:	31 c0                	xor    eax,eax
c0001a7c:	c3                   	ret    

c0001a7d <dlmalloc_usable_size>:
c0001a7d:	53                   	push   ebx
c0001a7e:	31 c0                	xor    eax,eax
c0001a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a84:	85 c9                	test   ecx,ecx
c0001a86:	74 24                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001a88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8b:	f6 c2 02             	test   dl,0x2
c0001a8e:	74 08                	je     c0001a98 <dlmalloc_usable_size+0x1b>
c0001a90:	83 e2 fc             	and    edx,0xfffffffc
c0001a93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a96:	eb 14                	jmp    c0001aac <dlmalloc_usable_size+0x2f>
c0001a98:	89 d3                	mov    ebx,edx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001a9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa4:	74 06                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001aa6:	83 e2 fc             	and    edx,0xfffffffc
c0001aa9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aac:	5b                   	pop    ebx
c0001aad:	c3                   	ret    

c0001aae <dlmallinfo>:
c0001aae:	55                   	push   ebp
c0001aaf:	57                   	push   edi
c0001ab0:	56                   	push   esi
c0001ab1:	53                   	push   ebx
c0001ab2:	83 ec 08             	sub    esp,0x8
c0001ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab9:	83 3d 8c e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e18c,0x0
c0001ac0:	75 0a                	jne    c0001acc <dlmallinfo+0x1e>
c0001ac2:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001ac7:	e8 11 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001acc:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c0001ad1:	31 ed                	xor    ebp,ebp
c0001ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad6:	31 c9                	xor    ecx,ecx
c0001ad8:	83 e0 fc             	and    eax,0xfffffffc
c0001adb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adf:	31 c0                	xor    eax,eax
c0001ae1:	8b 14 85 64 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e9c]
c0001ae8:	85 d2                	test   edx,edx
c0001aea:	74 0e                	je     c0001afa <dlmallinfo+0x4c>
c0001aec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aef:	45                   	inc    ebp
c0001af0:	83 e6 fc             	and    esi,0xfffffffc
c0001af3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af6:	01 f1                	add    ecx,esi
c0001af8:	eb ee                	jmp    c0001ae8 <dlmallinfo+0x3a>
c0001afa:	40                   	inc    eax
c0001afb:	83 f8 0a             	cmp    eax,0xa
c0001afe:	75 e1                	jne    c0001ae1 <dlmallinfo+0x33>
c0001b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b0e:	b8 94 e1 02 c0       	mov    eax,0xc002e194
c0001b13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b16:	39 f0                	cmp    eax,esi
c0001b18:	74 10                	je     c0001b2a <dlmallinfo+0x7c>
c0001b1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001b20:	83 e7 fc             	and    edi,0xfffffffc
c0001b23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b26:	01 fa                	add    edx,edi
c0001b28:	eb ec                	jmp    c0001b16 <dlmallinfo+0x68>
c0001b2a:	83 c0 08             	add    eax,0x8
c0001b2d:	3d 8c e4 02 c0       	cmp    eax,0xc002e48c
c0001b32:	75 df                	jne    c0001b13 <dlmallinfo+0x65>
c0001b34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b37:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3d:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0001b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b45:	89 03                	mov    DWORD PTR [ebx],eax
c0001b47:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4a:	8b 35 b0 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4b0
c0001b50:	29 d0                	sub    eax,edx
c0001b52:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b58:	8b 35 c4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4c4
c0001b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b65:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b68:	8b 35 d4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4d4
c0001b6e:	89 d8                	mov    eax,ebx
c0001b70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b73:	83 c4 08             	add    esp,0x8
c0001b76:	5b                   	pop    ebx
c0001b77:	5e                   	pop    esi
c0001b78:	5f                   	pop    edi
c0001b79:	5d                   	pop    ebp
c0001b7a:	c2 04 00             	ret    0x4

c0001b7d <dlmalloc_stats>:
c0001b7d:	83 ec 30             	sub    esp,0x30
c0001b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b84:	50                   	push   eax
c0001b85:	e8 24 ff ff ff       	call   c0001aae <dlmallinfo>
c0001b8a:	83 c4 30             	add    esp,0x30
c0001b8d:	c3                   	ret    

c0001b8e <dlmallopt>:
c0001b8e:	56                   	push   esi
c0001b8f:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001b94:	53                   	push   ebx
c0001b95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9d:	e8 3b f1 ff ff       	call   c0000cdd <malloc_consolidate>
c0001ba2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba5:	83 f8 05             	cmp    eax,0x5
c0001ba8:	77 67                	ja     c0001c11 <dlmallopt+0x83>
c0001baa:	ff 24 85 04 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6bfc]
c0001bb1:	83 fb 50             	cmp    ebx,0x50
c0001bb4:	77 5b                	ja     c0001c11 <dlmallopt+0x83>
c0001bb6:	ba 08 00 00 00       	mov    edx,0x8
c0001bbb:	85 db                	test   ebx,ebx
c0001bbd:	74 12                	je     c0001bd1 <dlmallopt+0x43>
c0001bbf:	83 c3 0b             	add    ebx,0xb
c0001bc2:	ba 10 00 00 00       	mov    edx,0x10
c0001bc7:	83 fb 0f             	cmp    ebx,0xf
c0001bca:	76 05                	jbe    c0001bd1 <dlmallopt+0x43>
c0001bcc:	89 da                	mov    edx,ebx
c0001bce:	83 e2 f8             	and    edx,0xfffffff8
c0001bd1:	a1 60 e1 02 c0       	mov    eax,ds:0xc002e160
c0001bd6:	83 e0 03             	and    eax,0x3
c0001bd9:	09 d0                	or     eax,edx
c0001bdb:	a3 60 e1 02 c0       	mov    ds:0xc002e160,eax
c0001be0:	eb 31                	jmp    c0001c13 <dlmallopt+0x85>
c0001be2:	89 1d a4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a4,ebx
c0001be8:	eb 06                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bea:	89 1d a8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a8,ebx
c0001bf0:	be 01 00 00 00       	mov    esi,0x1
c0001bf5:	eb 1c                	jmp    c0001c13 <dlmallopt+0x85>
c0001bf7:	89 1d ac e4 02 c0    	mov    DWORD PTR ds:0xc002e4ac,ebx
c0001bfd:	eb f1                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bff:	31 f6                	xor    esi,esi
c0001c01:	85 db                	test   ebx,ebx
c0001c03:	75 0e                	jne    c0001c13 <dlmallopt+0x85>
c0001c05:	c7 05 b4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4b4,0x0
c0001c0f:	eb df                	jmp    c0001bf0 <dlmallopt+0x62>
c0001c11:	31 f6                	xor    esi,esi
c0001c13:	89 f0                	mov    eax,esi
c0001c15:	5b                   	pop    ebx
c0001c16:	5e                   	pop    esi
c0001c17:	c3                   	ret    

c0001c18 <disk_status>:
c0001c18:	31 c0                	xor    eax,eax
c0001c1a:	c3                   	ret    

c0001c1b <disk_initialize>:
c0001c1b:	31 c0                	xor    eax,eax
c0001c1d:	c3                   	ret    

c0001c1e <disk_read>:
c0001c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c23:	0f b6 04 85 40 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce3c0]
c0001c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2f:	e9 42 f2 01 00       	jmp    c0020e76 <fatWrapperReadDisk>

c0001c34 <disk_write>:
c0001c34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c39:	0f b6 04 85 40 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce3c0]
c0001c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c45:	e9 73 f2 01 00       	jmp    c0020ebd <fatWrapperWriteDisk>

c0001c4a <disk_ioctl>:
c0001c4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c58:	0f b6 04 85 40 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce3c0]
c0001c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c64:	e9 9b f2 01 00       	jmp    c0020f04 <fatWrapperIoctl>

c0001c69 <ld_word>:
c0001c69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c70:	c1 e2 08             	shl    edx,0x8
c0001c73:	09 d0                	or     eax,edx
c0001c75:	c3                   	ret    

c0001c76 <ld_dword>:
c0001c76:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7a:	89 d1                	mov    ecx,edx
c0001c7c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c80:	c1 e1 08             	shl    ecx,0x8
c0001c83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c86:	09 ca                	or     edx,ecx
c0001c88:	c1 e2 08             	shl    edx,0x8
c0001c8b:	09 d0                	or     eax,edx
c0001c8d:	c3                   	ret    

c0001c8e <ld_qword>:
c0001c8e:	57                   	push   edi
c0001c8f:	56                   	push   esi
c0001c90:	53                   	push   ebx
c0001c91:	31 db                	xor    ebx,ebx
c0001c93:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c96:	89 df                	mov    edi,ebx
c0001c98:	89 ce                	mov    esi,ecx
c0001c9a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca2:	c1 e6 08             	shl    esi,0x8
c0001ca5:	09 f2                	or     edx,esi
c0001ca7:	89 d6                	mov    esi,edx
c0001ca9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cad:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb1:	c1 e6 08             	shl    esi,0x8
c0001cb4:	09 f2                	or     edx,esi
c0001cb6:	89 d6                	mov    esi,edx
c0001cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc3:	c1 e6 08             	shl    esi,0x8
c0001cc6:	89 fb                	mov    ebx,edi
c0001cc8:	09 f2                	or     edx,esi
c0001cca:	89 d1                	mov    ecx,edx
c0001ccc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd0:	c1 e1 08             	shl    ecx,0x8
c0001cd3:	89 da                	mov    edx,ebx
c0001cd5:	09 c8                	or     eax,ecx
c0001cd7:	5b                   	pop    ebx
c0001cd8:	5e                   	pop    esi
c0001cd9:	5f                   	pop    edi
c0001cda:	c3                   	ret    

c0001cdb <st_word>:
c0001cdb:	66 89 10             	mov    WORD PTR [eax],dx
c0001cde:	c3                   	ret    

c0001cdf <st_dword>:
c0001cdf:	89 10                	mov    DWORD PTR [eax],edx
c0001ce1:	c3                   	ret    

c0001ce2 <st_qword>:
c0001ce2:	89 10                	mov    DWORD PTR [eax],edx
c0001ce4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce7:	c3                   	ret    

c0001ce8 <mem_cpy>:
c0001ce8:	85 c9                	test   ecx,ecx
c0001cea:	74 10                	je     c0001cfc <mem_cpy+0x14>
c0001cec:	57                   	push   edi
c0001ced:	01 c1                	add    ecx,eax
c0001cef:	56                   	push   esi
c0001cf0:	89 c7                	mov    edi,eax
c0001cf2:	89 d6                	mov    esi,edx
c0001cf4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf5:	39 f9                	cmp    ecx,edi
c0001cf7:	75 fb                	jne    c0001cf4 <mem_cpy+0xc>
c0001cf9:	5e                   	pop    esi
c0001cfa:	5f                   	pop    edi
c0001cfb:	c3                   	ret    
c0001cfc:	c3                   	ret    

c0001cfd <mem_set>:
c0001cfd:	01 c1                	add    ecx,eax
c0001cff:	40                   	inc    eax
c0001d00:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d03:	39 c8                	cmp    eax,ecx
c0001d05:	75 f8                	jne    c0001cff <mem_set+0x2>
c0001d07:	c3                   	ret    

c0001d08 <mem_cmp>:
c0001d08:	57                   	push   edi
c0001d09:	56                   	push   esi
c0001d0a:	89 c6                	mov    esi,eax
c0001d0c:	53                   	push   ebx
c0001d0d:	46                   	inc    esi
c0001d0e:	42                   	inc    edx
c0001d0f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d13:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d17:	29 fb                	sub    ebx,edi
c0001d19:	89 cf                	mov    edi,ecx
c0001d1b:	29 f7                	sub    edi,esi
c0001d1d:	01 c7                	add    edi,eax
c0001d1f:	74 04                	je     c0001d25 <mem_cmp+0x1d>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	74 e8                	je     c0001d0d <mem_cmp+0x5>
c0001d25:	89 d8                	mov    eax,ebx
c0001d27:	5b                   	pop    ebx
c0001d28:	5e                   	pop    esi
c0001d29:	5f                   	pop    edi
c0001d2a:	c3                   	ret    

c0001d2b <chk_chr>:
c0001d2b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d2e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d31:	74 07                	je     c0001d3a <chk_chr+0xf>
c0001d33:	39 d1                	cmp    ecx,edx
c0001d35:	74 03                	je     c0001d3a <chk_chr+0xf>
c0001d37:	40                   	inc    eax
c0001d38:	eb f1                	jmp    c0001d2b <chk_chr>
c0001d3a:	89 c8                	mov    eax,ecx
c0001d3c:	c3                   	ret    

c0001d3d <dbc_1st>:
c0001d3d:	31 c0                	xor    eax,eax
c0001d3f:	c3                   	ret    

c0001d40 <dbc_2nd>:
c0001d40:	31 c0                	xor    eax,eax
c0001d42:	c3                   	ret    

c0001d43 <tchar2uni>:
c0001d43:	57                   	push   edi
c0001d44:	89 c7                	mov    edi,eax
c0001d46:	56                   	push   esi
c0001d47:	53                   	push   ebx
c0001d48:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d4f:	84 c9                	test   cl,cl
c0001d51:	78 0a                	js     c0001d5d <tchar2uni+0x1a>
c0001d53:	0f b6 d1             	movzx  edx,cl
c0001d56:	89 f3                	mov    ebx,esi
c0001d58:	e9 9f 00 00 00       	jmp    c0001dfc <tchar2uni+0xb9>
c0001d5d:	88 ca                	mov    dl,cl
c0001d5f:	83 e2 e0             	and    edx,0xffffffe0
c0001d62:	80 fa c0             	cmp    dl,0xc0
c0001d65:	75 0c                	jne    c0001d73 <tchar2uni+0x30>
c0001d67:	89 ca                	mov    edx,ecx
c0001d69:	b9 01 00 00 00       	mov    ecx,0x1
c0001d6e:	83 e2 1f             	and    edx,0x1f
c0001d71:	eb 2e                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d73:	88 ca                	mov    dl,cl
c0001d75:	83 e2 f0             	and    edx,0xfffffff0
c0001d78:	80 fa e0             	cmp    dl,0xe0
c0001d7b:	75 0c                	jne    c0001d89 <tchar2uni+0x46>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0001d84:	83 e2 0f             	and    edx,0xf
c0001d87:	eb 18                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d89:	88 ca                	mov    dl,cl
c0001d8b:	83 e2 f8             	and    edx,0xfffffff8
c0001d8e:	88 d0                	mov    al,dl
c0001d90:	83 ca ff             	or     edx,0xffffffff
c0001d93:	3c f0                	cmp    al,0xf0
c0001d95:	75 6c                	jne    c0001e03 <tchar2uni+0xc0>
c0001d97:	89 ca                	mov    edx,ecx
c0001d99:	b9 03 00 00 00       	mov    ecx,0x3
c0001d9e:	83 e2 07             	and    edx,0x7
c0001da1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da5:	46                   	inc    esi
c0001da6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da9:	88 c8                	mov    al,cl
c0001dab:	83 e0 c0             	and    eax,0xffffffc0
c0001dae:	3c 80                	cmp    al,0x80
c0001db0:	75 4e                	jne    c0001e00 <tchar2uni+0xbd>
c0001db2:	c1 e2 06             	shl    edx,0x6
c0001db5:	83 e1 3f             	and    ecx,0x3f
c0001db8:	09 ca                	or     edx,ecx
c0001dba:	39 de                	cmp    esi,ebx
c0001dbc:	75 e7                	jne    c0001da5 <tchar2uni+0x62>
c0001dbe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc7:	77 37                	ja     c0001e00 <tchar2uni+0xbd>
c0001dc9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dcf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd5:	76 29                	jbe    c0001e00 <tchar2uni+0xbd>
c0001dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddd:	76 1d                	jbe    c0001dfc <tchar2uni+0xb9>
c0001ddf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001deb:	c1 e1 06             	shl    ecx,0x6
c0001dee:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfc:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dfe:	eb 03                	jmp    c0001e03 <tchar2uni+0xc0>
c0001e00:	83 ca ff             	or     edx,0xffffffff
c0001e03:	5b                   	pop    ebx
c0001e04:	89 d0                	mov    eax,edx
c0001e06:	5e                   	pop    esi
c0001e07:	5f                   	pop    edi
c0001e08:	c3                   	ret    

c0001e09 <put_utf>:
c0001e09:	53                   	push   ebx
c0001e0a:	83 f8 7f             	cmp    eax,0x7f
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	b0 00                	mov    al,0x0
c0001e11:	77 11                	ja     c0001e24 <put_utf+0x1b>
c0001e13:	85 c9                	test   ecx,ecx
c0001e15:	0f 84 e5 00 00 00    	je     c0001f00 <put_utf+0xf7>
c0001e1b:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1d:	b0 01                	mov    al,0x1
c0001e1f:	e9 dc 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e24:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2a:	77 23                	ja     c0001e4f <put_utf+0x46>
c0001e2c:	83 f9 01             	cmp    ecx,0x1
c0001e2f:	0f 86 cb 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e35:	89 d8                	mov    eax,ebx
c0001e37:	83 e3 3f             	and    ebx,0x3f
c0001e3a:	c1 e8 06             	shr    eax,0x6
c0001e3d:	83 cb 80             	or     ebx,0xffffff80
c0001e40:	83 c8 c0             	or     eax,0xffffffc0
c0001e43:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e46:	88 02                	mov    BYTE PTR [edx],al
c0001e48:	b0 02                	mov    al,0x2
c0001e4a:	e9 b1 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e4f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e55:	77 40                	ja     c0001e97 <put_utf+0x8e>
c0001e57:	83 f9 02             	cmp    ecx,0x2
c0001e5a:	0f 86 a0 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e60:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e66:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6c:	0f 86 8e 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e72:	89 d8                	mov    eax,ebx
c0001e74:	c1 e8 0c             	shr    eax,0xc
c0001e77:	83 c8 e0             	or     eax,0xffffffe0
c0001e7a:	88 02                	mov    BYTE PTR [edx],al
c0001e7c:	89 d8                	mov    eax,ebx
c0001e7e:	83 e3 3f             	and    ebx,0x3f
c0001e81:	c1 e8 06             	shr    eax,0x6
c0001e84:	83 cb 80             	or     ebx,0xffffff80
c0001e87:	83 e0 3f             	and    eax,0x3f
c0001e8a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8d:	83 c8 80             	or     eax,0xffffff80
c0001e90:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e93:	b0 03                	mov    al,0x3
c0001e95:	eb 69                	jmp    c0001f00 <put_utf+0xf7>
c0001e97:	83 f9 03             	cmp    ecx,0x3
c0001e9a:	76 64                	jbe    c0001f00 <put_utf+0xf7>
c0001e9c:	89 d9                	mov    ecx,ebx
c0001e9e:	0f b7 c3             	movzx  eax,bx
c0001ea1:	66 31 c9             	xor    cx,cx
c0001ea4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eaa:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb0:	c1 e9 06             	shr    ecx,0x6
c0001eb3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb9:	77 43                	ja     c0001efe <put_utf+0xf5>
c0001ebb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec1:	77 3b                	ja     c0001efe <put_utf+0xf5>
c0001ec3:	09 cb                	or     ebx,ecx
c0001ec5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecb:	89 d8                	mov    eax,ebx
c0001ecd:	c1 e8 12             	shr    eax,0x12
c0001ed0:	83 c8 f0             	or     eax,0xfffffff0
c0001ed3:	88 02                	mov    BYTE PTR [edx],al
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	83 c8 80             	or     eax,0xffffff80
c0001ee0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee3:	89 d8                	mov    eax,ebx
c0001ee5:	83 e3 3f             	and    ebx,0x3f
c0001ee8:	c1 e8 06             	shr    eax,0x6
c0001eeb:	83 cb 80             	or     ebx,0xffffff80
c0001eee:	83 e0 3f             	and    eax,0x3f
c0001ef1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef4:	83 c8 80             	or     eax,0xffffff80
c0001ef7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efa:	b0 04                	mov    al,0x4
c0001efc:	eb 02                	jmp    c0001f00 <put_utf+0xf7>
c0001efe:	31 c0                	xor    eax,eax
c0001f00:	5b                   	pop    ebx
c0001f01:	c3                   	ret    

c0001f02 <clst2sect>:
c0001f02:	89 c1                	mov    ecx,eax
c0001f04:	83 ea 02             	sub    edx,0x2
c0001f07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0a:	83 e8 02             	sub    eax,0x2
c0001f0d:	39 d0                	cmp    eax,edx
c0001f0f:	76 0d                	jbe    c0001f1e <clst2sect+0x1c>
c0001f11:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f15:	f7 e2                	mul    edx
c0001f17:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1d:	c3                   	ret    
c0001f1e:	31 c0                	xor    eax,eax
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	c3                   	ret    

c0001f23 <clmt_clust>:
c0001f23:	57                   	push   edi
c0001f24:	89 cf                	mov    edi,ecx
c0001f26:	56                   	push   esi
c0001f27:	89 d6                	mov    esi,edx
c0001f29:	53                   	push   ebx
c0001f2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f2e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f31:	89 f2                	mov    edx,esi
c0001f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f35:	c1 ef 09             	shr    edi,0x9
c0001f38:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f3f:	89 f9                	mov    ecx,edi
c0001f41:	31 ff                	xor    edi,edi
c0001f43:	57                   	push   edi
c0001f44:	56                   	push   esi
c0001f45:	51                   	push   ecx
c0001f46:	52                   	push   edx
c0001f47:	e8 24 4b 02 00       	call   c0026a70 <__udivdi3>
c0001f4c:	83 c4 10             	add    esp,0x10
c0001f4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f51:	85 d2                	test   edx,edx
c0001f53:	74 10                	je     c0001f65 <clmt_clust+0x42>
c0001f55:	39 d0                	cmp    eax,edx
c0001f57:	72 07                	jb     c0001f60 <clmt_clust+0x3d>
c0001f59:	29 d0                	sub    eax,edx
c0001f5b:	83 c3 08             	add    ebx,0x8
c0001f5e:	eb ef                	jmp    c0001f4f <clmt_clust+0x2c>
c0001f60:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f63:	89 c2                	mov    edx,eax
c0001f65:	5b                   	pop    ebx
c0001f66:	89 d0                	mov    eax,edx
c0001f68:	5e                   	pop    esi
c0001f69:	5f                   	pop    edi
c0001f6a:	c3                   	ret    

c0001f6b <pick_lfn>:
c0001f6b:	55                   	push   ebp
c0001f6c:	57                   	push   edi
c0001f6d:	56                   	push   esi
c0001f6e:	89 d6                	mov    esi,edx
c0001f70:	53                   	push   ebx
c0001f71:	89 c3                	mov    ebx,eax
c0001f73:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f76:	e8 ee fc ff ff       	call   c0001c69 <ld_word>
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 04                	je     c0001f84 <pick_lfn+0x19>
c0001f80:	31 c0                	xor    eax,eax
c0001f82:	eb 5c                	jmp    c0001fe0 <pick_lfn+0x75>
c0001f84:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f87:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8c:	83 e1 bf             	and    ecx,0xffffffbf
c0001f8f:	31 ff                	xor    edi,edi
c0001f91:	49                   	dec    ecx
c0001f92:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f95:	0f b6 87 20 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ae0]
c0001f9c:	01 f0                	add    eax,esi
c0001f9e:	e8 c6 fc ff ff       	call   c0001c69 <ld_word>
c0001fa3:	66 85 ed             	test   bp,bp
c0001fa6:	74 11                	je     c0001fb9 <pick_lfn+0x4e>
c0001fa8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fae:	77 d0                	ja     c0001f80 <pick_lfn+0x15>
c0001fb0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb4:	89 c5                	mov    ebp,eax
c0001fb6:	41                   	inc    ecx
c0001fb7:	eb 04                	jmp    c0001fbd <pick_lfn+0x52>
c0001fb9:	66 40                	inc    ax
c0001fbb:	75 c3                	jne    c0001f80 <pick_lfn+0x15>
c0001fbd:	47                   	inc    edi
c0001fbe:	83 ff 0d             	cmp    edi,0xd
c0001fc1:	75 d2                	jne    c0001f95 <pick_lfn+0x2a>
c0001fc3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc6:	74 13                	je     c0001fdb <pick_lfn+0x70>
c0001fc8:	66 85 ed             	test   bp,bp
c0001fcb:	74 0e                	je     c0001fdb <pick_lfn+0x70>
c0001fcd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd3:	77 ab                	ja     c0001f80 <pick_lfn+0x15>
c0001fd5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdb:	b8 01 00 00 00       	mov    eax,0x1
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <put_lfn>:
c0001fe5:	55                   	push   ebp
c0001fe6:	31 ed                	xor    ebp,ebp
c0001fe8:	57                   	push   edi
c0001fe9:	89 d7                	mov    edi,edx
c0001feb:	56                   	push   esi
c0001fec:	31 f6                	xor    esi,esi
c0001fee:	53                   	push   ebx
c0001fef:	83 ec 08             	sub    esp,0x8
c0001ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ffd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002003:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002006:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002009:	31 d2                	xor    edx,edx
c000200b:	e8 cb fc ff ff       	call   c0001cdb <st_word>
c0002010:	0f b6 d9             	movzx  ebx,cl
c0002013:	4b                   	dec    ebx
c0002014:	6b db 0d             	imul   ebx,ebx,0xd
c0002017:	66 83 fe ff          	cmp    si,0xffff
c000201b:	74 08                	je     c0002025 <put_lfn+0x40>
c000201d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002020:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002024:	43                   	inc    ebx
c0002025:	0f b6 85 20 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ae0]
c000202c:	0f b7 d6             	movzx  edx,si
c000202f:	01 f8                	add    eax,edi
c0002031:	e8 a5 fc ff ff       	call   c0001cdb <st_word>
c0002036:	66 85 f6             	test   si,si
c0002039:	75 03                	jne    c000203e <put_lfn+0x59>
c000203b:	83 ce ff             	or     esi,0xffffffff
c000203e:	45                   	inc    ebp
c000203f:	83 fd 0d             	cmp    ebp,0xd
c0002042:	75 d3                	jne    c0002017 <put_lfn+0x32>
c0002044:	66 46                	inc    si
c0002046:	74 0a                	je     c0002052 <put_lfn+0x6d>
c0002048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002050:	75 09                	jne    c000205b <put_lfn+0x76>
c0002052:	88 c8                	mov    al,cl
c0002054:	83 c8 40             	or     eax,0x40
c0002057:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000205f:	88 07                	mov    BYTE PTR [edi],al
c0002061:	83 c4 08             	add    esp,0x8
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	5d                   	pop    ebp
c0002068:	c3                   	ret    

c0002069 <gen_numname>:
c0002069:	57                   	push   edi
c000206a:	89 cf                	mov    edi,ecx
c000206c:	56                   	push   esi
c000206d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002072:	53                   	push   ebx
c0002073:	89 c6                	mov    esi,eax
c0002075:	83 ec 10             	sub    esp,0x10
c0002078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207c:	e8 67 fc ff ff       	call   c0001ce8 <mem_cpy>
c0002081:	83 fb 05             	cmp    ebx,0x5
c0002084:	76 2d                	jbe    c00020b3 <gen_numname+0x4a>
c0002086:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002089:	66 85 c0             	test   ax,ax
c000208c:	74 25                	je     c00020b3 <gen_numname+0x4a>
c000208e:	83 c7 02             	add    edi,0x2
c0002091:	ba 10 00 00 00       	mov    edx,0x10
c0002096:	01 db                	add    ebx,ebx
c0002098:	89 c1                	mov    ecx,eax
c000209a:	66 d1 e8             	shr    ax,1
c000209d:	83 e1 01             	and    ecx,0x1
c00020a0:	01 cb                	add    ebx,ecx
c00020a2:	0f ba e3 10          	bt     ebx,0x10
c00020a6:	73 06                	jae    c00020ae <gen_numname+0x45>
c00020a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ae:	4a                   	dec    edx
c00020af:	75 e5                	jne    c0002096 <gen_numname+0x2d>
c00020b1:	eb d3                	jmp    c0002086 <gen_numname+0x1d>
c00020b3:	b8 07 00 00 00       	mov    eax,0x7
c00020b8:	88 d9                	mov    cl,bl
c00020ba:	83 e1 0f             	and    ecx,0xf
c00020bd:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c0:	80 fa 39             	cmp    dl,0x39
c00020c3:	76 03                	jbe    c00020c8 <gen_numname+0x5f>
c00020c5:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020cf:	89 da                	mov    edx,ebx
c00020d1:	c1 ea 04             	shr    edx,0x4
c00020d4:	83 fb 0f             	cmp    ebx,0xf
c00020d7:	76 06                	jbe    c00020df <gen_numname+0x76>
c00020d9:	89 c8                	mov    eax,ecx
c00020db:	89 d3                	mov    ebx,edx
c00020dd:	eb d9                	jmp    c00020b8 <gen_numname+0x4f>
c00020df:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e4:	31 d2                	xor    edx,edx
c00020e6:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e9:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ec:	39 ca                	cmp    edx,ecx
c00020ee:	73 18                	jae    c0002108 <gen_numname+0x9f>
c00020f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f3:	3c 20                	cmp    al,0x20
c00020f5:	74 11                	je     c0002108 <gen_numname+0x9f>
c00020f7:	e8 41 fc ff ff       	call   c0001d3d <dbc_1st>
c00020fc:	85 c0                	test   eax,eax
c00020fe:	74 05                	je     c0002105 <gen_numname+0x9c>
c0002100:	39 d3                	cmp    ebx,edx
c0002102:	74 04                	je     c0002108 <gen_numname+0x9f>
c0002104:	42                   	inc    edx
c0002105:	42                   	inc    edx
c0002106:	eb e1                	jmp    c00020e9 <gen_numname+0x80>
c0002108:	b0 20                	mov    al,0x20
c000210a:	83 f9 07             	cmp    ecx,0x7
c000210d:	77 05                	ja     c0002114 <gen_numname+0xab>
c000210f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002113:	41                   	inc    ecx
c0002114:	42                   	inc    edx
c0002115:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002119:	83 fa 07             	cmp    edx,0x7
c000211c:	76 ea                	jbe    c0002108 <gen_numname+0x9f>
c000211e:	83 c4 10             	add    esp,0x10
c0002121:	5b                   	pop    ebx
c0002122:	5e                   	pop    esi
c0002123:	5f                   	pop    edi
c0002124:	c3                   	ret    

c0002125 <sum_sfn>:
c0002125:	31 c9                	xor    ecx,ecx
c0002127:	31 d2                	xor    edx,edx
c0002129:	d0 ca                	ror    dl,1
c000212b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000212e:	41                   	inc    ecx
c000212f:	83 f9 0b             	cmp    ecx,0xb
c0002132:	75 f5                	jne    c0002129 <sum_sfn+0x4>
c0002134:	88 d0                	mov    al,dl
c0002136:	c3                   	ret    

c0002137 <xdir_sum>:
c0002137:	56                   	push   esi
c0002138:	31 c9                	xor    ecx,ecx
c000213a:	53                   	push   ebx
c000213b:	31 d2                	xor    edx,edx
c000213d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002141:	43                   	inc    ebx
c0002142:	c1 e3 05             	shl    ebx,0x5
c0002145:	83 fa 02             	cmp    edx,0x2
c0002148:	74 0b                	je     c0002155 <xdir_sum+0x1e>
c000214a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000214e:	66 d1 c9             	ror    cx,1
c0002151:	01 f1                	add    ecx,esi
c0002153:	eb 05                	jmp    c000215a <xdir_sum+0x23>
c0002155:	ba 03 00 00 00       	mov    edx,0x3
c000215a:	42                   	inc    edx
c000215b:	39 d3                	cmp    ebx,edx
c000215d:	77 e6                	ja     c0002145 <xdir_sum+0xe>
c000215f:	89 c8                	mov    eax,ecx
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	c3                   	ret    

c0002164 <xsum32>:
c0002164:	d1 ca                	ror    edx,1
c0002166:	0f b6 c0             	movzx  eax,al
c0002169:	01 d0                	add    eax,edx
c000216b:	c3                   	ret    

c000216c <get_xfileinfo>:
c000216c:	55                   	push   ebp
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	57                   	push   edi
c0002170:	bd 40 00 00 00       	mov    ebp,0x40
c0002175:	56                   	push   esi
c0002176:	31 ff                	xor    edi,edi
c0002178:	53                   	push   ebx
c0002179:	89 c6                	mov    esi,eax
c000217b:	83 ec 0c             	sub    esp,0xc
c000217e:	89 d3                	mov    ebx,edx
c0002180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002187:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000218e:	76 6d                	jbe    c00021fd <get_xfileinfo+0x91>
c0002190:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002196:	76 0b                	jbe    c00021a3 <get_xfileinfo+0x37>
c0002198:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219c:	bf 01 00 00 00       	mov    edi,0x1
c00021a1:	eb 63                	jmp    c0002206 <get_xfileinfo+0x9a>
c00021a3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a9:	75 03                	jne    c00021ae <get_xfileinfo+0x42>
c00021ab:	83 c5 02             	add    ebp,0x2
c00021ae:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b1:	83 c5 02             	add    ebp,0x2
c00021b4:	e8 b0 fa ff ff       	call   c0001c69 <ld_word>
c00021b9:	ff 04 24             	inc    DWORD PTR [esp]
c00021bc:	66 85 c9             	test   cx,cx
c00021bf:	75 0d                	jne    c00021ce <get_xfileinfo+0x62>
c00021c1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c7:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021cc:	76 2b                	jbe    c00021f9 <get_xfileinfo+0x8d>
c00021ce:	c1 e1 10             	shl    ecx,0x10
c00021d1:	ba ff 00 00 00       	mov    edx,0xff
c00021d6:	0f b7 c0             	movzx  eax,ax
c00021d9:	29 fa                	sub    edx,edi
c00021db:	09 c8                	or     eax,ecx
c00021dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e9:	e8 1b fc ff ff       	call   c0001e09 <put_utf>
c00021ee:	84 c0                	test   al,al
c00021f0:	74 a6                	je     c0002198 <get_xfileinfo+0x2c>
c00021f2:	0f b6 c0             	movzx  eax,al
c00021f5:	01 c7                	add    edi,eax
c00021f7:	31 c0                	xor    eax,eax
c00021f9:	89 c1                	mov    ecx,eax
c00021fb:	eb 8a                	jmp    c0002187 <get_xfileinfo+0x1b>
c00021fd:	85 ff                	test   edi,edi
c00021ff:	74 97                	je     c0002198 <get_xfileinfo+0x2c>
c0002201:	66 85 c9             	test   cx,cx
c0002204:	75 92                	jne    c0002198 <get_xfileinfo+0x2c>
c0002206:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220b:	31 c0                	xor    eax,eax
c000220d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002211:	31 d2                	xor    edx,edx
c0002213:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002216:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002219:	80 e1 10             	and    cl,0x10
c000221c:	75 08                	jne    c0002226 <get_xfileinfo+0xba>
c000221e:	8d 46 38             	lea    eax,[esi+0x38]
c0002221:	e8 68 fa ff ff       	call   c0001c8e <ld_qword>
c0002226:	89 03                	mov    DWORD PTR [ebx],eax
c0002228:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222b:	8d 46 0c             	lea    eax,[esi+0xc]
c000222e:	e8 36 fa ff ff       	call   c0001c69 <ld_word>
c0002233:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002237:	8d 46 0e             	lea    eax,[esi+0xe]
c000223a:	e8 2a fa ff ff       	call   c0001c69 <ld_word>
c000223f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002243:	83 c4 0c             	add    esp,0xc
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    

c000224b <get_ldnumber>:
c000224b:	8b 10                	mov    edx,DWORD PTR [eax]
c000224d:	85 d2                	test   edx,edx
c000224f:	74 14                	je     c0002265 <get_ldnumber+0x1a>
c0002251:	56                   	push   esi
c0002252:	53                   	push   ebx
c0002253:	89 d3                	mov    ebx,edx
c0002255:	43                   	inc    ebx
c0002256:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002259:	80 f9 1f             	cmp    cl,0x1f
c000225c:	76 0d                	jbe    c000226b <get_ldnumber+0x20>
c000225e:	80 f9 3a             	cmp    cl,0x3a
c0002261:	75 f2                	jne    c0002255 <get_ldnumber+0xa>
c0002263:	eb 0a                	jmp    c000226f <get_ldnumber+0x24>
c0002265:	83 c9 ff             	or     ecx,0xffffffff
c0002268:	89 c8                	mov    eax,ecx
c000226a:	c3                   	ret    
c000226b:	31 c9                	xor    ecx,ecx
c000226d:	eb 24                	jmp    c0002293 <get_ldnumber+0x48>
c000226f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002272:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002275:	80 f9 09             	cmp    cl,0x9
c0002278:	77 16                	ja     c0002290 <get_ldnumber+0x45>
c000227a:	83 c2 02             	add    edx,0x2
c000227d:	83 c9 ff             	or     ecx,0xffffffff
c0002280:	39 d3                	cmp    ebx,edx
c0002282:	75 0f                	jne    c0002293 <get_ldnumber+0x48>
c0002284:	89 f2                	mov    edx,esi
c0002286:	89 18                	mov    DWORD PTR [eax],ebx
c0002288:	0f be ca             	movsx  ecx,dl
c000228b:	83 e9 30             	sub    ecx,0x30
c000228e:	eb 03                	jmp    c0002293 <get_ldnumber+0x48>
c0002290:	83 c9 ff             	or     ecx,0xffffffff
c0002293:	89 c8                	mov    eax,ecx
c0002295:	5b                   	pop    ebx
c0002296:	5e                   	pop    esi
c0002297:	c3                   	ret    

c0002298 <crc32>:
c0002298:	56                   	push   esi
c0002299:	89 d6                	mov    esi,edx
c000229b:	53                   	push   ebx
c000229c:	b2 01                	mov    dl,0x1
c000229e:	bb 08 00 00 00       	mov    ebx,0x8
c00022a3:	89 f1                	mov    ecx,esi
c00022a5:	84 d1                	test   cl,dl
c00022a7:	0f 95 c1             	setne  cl
c00022aa:	0f b6 c9             	movzx  ecx,cl
c00022ad:	31 c1                	xor    ecx,eax
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	d1 e8                	shr    eax,1
c00022b3:	80 e1 01             	and    cl,0x1
c00022b6:	74 05                	je     c00022bd <crc32+0x25>
c00022b8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bd:	d1 e2                	shl    edx,1
c00022bf:	4b                   	dec    ebx
c00022c0:	75 e1                	jne    c00022a3 <crc32+0xb>
c00022c2:	5b                   	pop    ebx
c00022c3:	5e                   	pop    esi
c00022c4:	c3                   	ret    

c00022c5 <test_gpt_header>:
c00022c5:	55                   	push   ebp
c00022c6:	b9 10 00 00 00       	mov    ecx,0x10
c00022cb:	57                   	push   edi
c00022cc:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00022d1:	56                   	push   esi
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	53                   	push   ebx
c00022d5:	89 c3                	mov    ebx,eax
c00022d7:	e8 2c fa ff ff       	call   c0001d08 <mem_cmp>
c00022dc:	85 c0                	test   eax,eax
c00022de:	75 55                	jne    c0002335 <test_gpt_header+0x70>
c00022e0:	89 c7                	mov    edi,eax
c00022e2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e7:	83 ce ff             	or     esi,0xffffffff
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	83 fd 03             	cmp    ebp,0x3
c00022ef:	76 05                	jbe    c00022f6 <test_gpt_header+0x31>
c00022f1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f6:	89 f0                	mov    eax,esi
c00022f8:	45                   	inc    ebp
c00022f9:	e8 9a ff ff ff       	call   c0002298 <crc32>
c00022fe:	83 fd 4c             	cmp    ebp,0x4c
c0002301:	89 c6                	mov    esi,eax
c0002303:	75 e5                	jne    c00022ea <test_gpt_header+0x25>
c0002305:	8d 43 10             	lea    eax,[ebx+0x10]
c0002308:	f7 d6                	not    esi
c000230a:	e8 67 f9 ff ff       	call   c0001c76 <ld_dword>
c000230f:	39 c6                	cmp    esi,eax
c0002311:	75 22                	jne    c0002335 <test_gpt_header+0x70>
c0002313:	8d 43 54             	lea    eax,[ebx+0x54]
c0002316:	e8 5b f9 ff ff       	call   c0001c76 <ld_dword>
c000231b:	83 c0 80             	add    eax,0xffffff80
c000231e:	75 15                	jne    c0002335 <test_gpt_header+0x70>
c0002320:	8d 43 50             	lea    eax,[ebx+0x50]
c0002323:	e8 4e f9 ff ff       	call   c0001c76 <ld_dword>
c0002328:	3d 80 00 00 00       	cmp    eax,0x80
c000232d:	0f 96 c0             	setbe  al
c0002330:	0f b6 c0             	movzx  eax,al
c0002333:	89 c7                	mov    edi,eax
c0002335:	5b                   	pop    ebx
c0002336:	89 f8                	mov    eax,edi
c0002338:	5e                   	pop    esi
c0002339:	5f                   	pop    edi
c000233a:	5d                   	pop    ebp
c000233b:	c3                   	ret    

c000233c <make_rand>:
c000233c:	56                   	push   esi
c000233d:	85 c0                	test   eax,eax
c000233f:	53                   	push   ebx
c0002340:	75 05                	jne    c0002347 <make_rand+0xb>
c0002342:	b8 01 00 00 00       	mov    eax,0x1
c0002347:	01 d1                	add    ecx,edx
c0002349:	bb 08 00 00 00       	mov    ebx,0x8
c000234e:	89 c6                	mov    esi,eax
c0002350:	d1 e8                	shr    eax,1
c0002352:	83 e6 01             	and    esi,0x1
c0002355:	85 f6                	test   esi,esi
c0002357:	74 05                	je     c000235e <make_rand+0x22>
c0002359:	35 00 00 00 a3       	xor    eax,0xa3000000
c000235e:	4b                   	dec    ebx
c000235f:	75 ed                	jne    c000234e <make_rand+0x12>
c0002361:	42                   	inc    edx
c0002362:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002365:	39 ca                	cmp    edx,ecx
c0002367:	75 e0                	jne    c0002349 <make_rand+0xd>
c0002369:	5b                   	pop    ebx
c000236a:	5e                   	pop    esi
c000236b:	c3                   	ret    

c000236c <validate>:
c000236c:	56                   	push   esi
c000236d:	53                   	push   ebx
c000236e:	89 d6                	mov    esi,edx
c0002370:	51                   	push   ecx
c0002371:	85 c0                	test   eax,eax
c0002373:	75 09                	jne    c000237e <validate+0x12>
c0002375:	b8 09 00 00 00       	mov    eax,0x9
c000237a:	31 c9                	xor    ecx,ecx
c000237c:	eb 2f                	jmp    c00023ad <validate+0x41>
c000237e:	89 c3                	mov    ebx,eax
c0002380:	8b 00                	mov    eax,DWORD PTR [eax]
c0002382:	85 c0                	test   eax,eax
c0002384:	74 ef                	je     c0002375 <validate+0x9>
c0002386:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002389:	74 ea                	je     c0002375 <validate+0x9>
c000238b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000238f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002393:	75 e0                	jne    c0002375 <validate+0x9>
c0002395:	83 ec 0c             	sub    esp,0xc
c0002398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239c:	50                   	push   eax
c000239d:	e8 76 f8 ff ff       	call   c0001c18 <disk_status>
c00023a2:	83 c4 10             	add    esp,0x10
c00023a5:	a8 01                	test   al,0x1
c00023a7:	75 cc                	jne    c0002375 <validate+0x9>
c00023a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ab:	31 c0                	xor    eax,eax
c00023ad:	89 0e                	mov    DWORD PTR [esi],ecx
c00023af:	5a                   	pop    edx
c00023b0:	5b                   	pop    ebx
c00023b1:	5e                   	pop    esi
c00023b2:	c3                   	ret    

c00023b3 <sync_window>:
c00023b3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b7:	0f 84 85 00 00 00    	je     c0002442 <sync_window+0x8f>
c00023bd:	55                   	push   ebp
c00023be:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c1:	57                   	push   edi
c00023c2:	56                   	push   esi
c00023c3:	53                   	push   ebx
c00023c4:	89 c3                	mov    ebx,eax
c00023c6:	83 ec 28             	sub    esp,0x28
c00023c9:	6a 01                	push   0x1
c00023cb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ce:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d1:	55                   	push   ebp
c00023d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d6:	50                   	push   eax
c00023d7:	e8 58 f8 ff ff       	call   c0001c34 <disk_write>
c00023dc:	83 c4 20             	add    esp,0x20
c00023df:	ba 01 00 00 00       	mov    edx,0x1
c00023e4:	85 c0                	test   eax,eax
c00023e6:	75 50                	jne    c0002438 <sync_window+0x85>
c00023e8:	31 ff                	xor    edi,edi
c00023ea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fb:	89 c6                	mov    esi,eax
c00023fd:	89 d7                	mov    edi,edx
c00023ff:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002402:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002406:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002409:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002411:	73 23                	jae    c0002436 <sync_window+0x83>
c0002413:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002417:	75 1d                	jne    c0002436 <sync_window+0x83>
c0002419:	83 ec 0c             	sub    esp,0xc
c000241c:	6a 01                	push   0x1
c000241e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002422:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002426:	52                   	push   edx
c0002427:	50                   	push   eax
c0002428:	55                   	push   ebp
c0002429:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242d:	50                   	push   eax
c000242e:	e8 01 f8 ff ff       	call   c0001c34 <disk_write>
c0002433:	83 c4 20             	add    esp,0x20
c0002436:	31 d2                	xor    edx,edx
c0002438:	83 c4 1c             	add    esp,0x1c
c000243b:	89 d0                	mov    eax,edx
c000243d:	5b                   	pop    ebx
c000243e:	5e                   	pop    esi
c000243f:	5f                   	pop    edi
c0002440:	5d                   	pop    ebp
c0002441:	c3                   	ret    
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 d0                	mov    eax,edx
c0002446:	c3                   	ret    

c0002447 <move_window>:
c0002447:	56                   	push   esi
c0002448:	53                   	push   ebx
c0002449:	89 c3                	mov    ebx,eax
c000244b:	83 ec 14             	sub    esp,0x14
c000244e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002451:	75 07                	jne    c000245a <move_window+0x13>
c0002453:	31 f6                	xor    esi,esi
c0002455:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002458:	74 59                	je     c00024b3 <move_window+0x6c>
c000245a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000245e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002462:	89 d8                	mov    eax,ebx
c0002464:	e8 4a ff ff ff       	call   c00023b3 <sync_window>
c0002469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246d:	89 c6                	mov    esi,eax
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002475:	75 3c                	jne    c00024b3 <move_window+0x6c>
c0002477:	83 ec 0c             	sub    esp,0xc
c000247a:	8d 43 54             	lea    eax,[ebx+0x54]
c000247d:	6a 01                	push   0x1
c000247f:	51                   	push   ecx
c0002480:	52                   	push   edx
c0002481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002485:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002489:	50                   	push   eax
c000248a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248e:	50                   	push   eax
c000248f:	e8 8a f7 ff ff       	call   c0001c1e <disk_read>
c0002494:	83 c4 20             	add    esp,0x20
c0002497:	85 c0                	test   eax,eax
c0002499:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a1:	74 0a                	je     c00024ad <move_window+0x66>
c00024a3:	83 ca ff             	or     edx,0xffffffff
c00024a6:	be 01 00 00 00       	mov    esi,0x1
c00024ab:	89 d1                	mov    ecx,edx
c00024ad:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	83 c4 14             	add    esp,0x14
c00024b8:	5b                   	pop    ebx
c00024b9:	5e                   	pop    esi
c00024ba:	c3                   	ret    

c00024bb <check_fs>:
c00024bb:	53                   	push   ebx
c00024bc:	89 c3                	mov    ebx,eax
c00024be:	83 ec 08             	sub    esp,0x8
c00024c1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024cc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d3:	e8 6f ff ff ff       	call   c0002447 <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	0f 85 89 00 00 00    	jne    c000256e <check_fs+0xb3>
c00024e5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024eb:	e8 79 f7 ff ff       	call   c0001c69 <ld_word>
c00024f0:	ba 03 00 00 00       	mov    edx,0x3
c00024f5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f9:	75 73                	jne    c000256e <check_fs+0xb3>
c00024fb:	ba 40 95 02 c0       	mov    edx,0xc0029540
c0002500:	8d 43 54             	lea    eax,[ebx+0x54]
c0002503:	b9 0b 00 00 00       	mov    ecx,0xb
c0002508:	e8 fb f7 ff ff       	call   c0001d08 <mem_cmp>
c000250d:	ba 01 00 00 00       	mov    edx,0x1
c0002512:	85 c0                	test   eax,eax
c0002514:	74 58                	je     c000256e <check_fs+0xb3>
c0002516:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002519:	8d 50 18             	lea    edx,[eax+0x18]
c000251c:	80 fa 01             	cmp    dl,0x1
c000251f:	76 09                	jbe    c000252a <check_fs+0x6f>
c0002521:	ba 02 00 00 00       	mov    edx,0x2
c0002526:	3c eb                	cmp    al,0xeb
c0002528:	75 44                	jne    c000256e <check_fs+0xb3>
c000252a:	ba 6c c9 02 c0       	mov    edx,0xc002c96c
c000252f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002535:	b9 03 00 00 00       	mov    ecx,0x3
c000253a:	e8 c9 f7 ff ff       	call   c0001d08 <mem_cmp>
c000253f:	31 d2                	xor    edx,edx
c0002541:	85 c0                	test   eax,eax
c0002543:	74 29                	je     c000256e <check_fs+0xb3>
c0002545:	ba 4c 95 02 c0       	mov    edx,0xc002954c
c000254a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002550:	b9 05 00 00 00       	mov    ecx,0x5
c0002555:	e8 ae f7 ff ff       	call   c0001d08 <mem_cmp>
c000255a:	31 d2                	xor    edx,edx
c000255c:	85 c0                	test   eax,eax
c000255e:	74 0e                	je     c000256e <check_fs+0xb3>
c0002560:	31 d2                	xor    edx,edx
c0002562:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002569:	0f 95 c2             	setne  dl
c000256c:	01 d2                	add    edx,edx
c000256e:	89 d0                	mov    eax,edx
c0002570:	83 c4 08             	add    esp,0x8
c0002573:	5b                   	pop    ebx
c0002574:	c3                   	ret    

c0002575 <find_volume>:
c0002575:	55                   	push   ebp
c0002576:	31 c9                	xor    ecx,ecx
c0002578:	57                   	push   edi
c0002579:	56                   	push   esi
c000257a:	89 d6                	mov    esi,edx
c000257c:	53                   	push   ebx
c000257d:	31 d2                	xor    edx,edx
c000257f:	83 ec 3c             	sub    esp,0x3c
c0002582:	89 c3                	mov    ebx,eax
c0002584:	e8 32 ff ff ff       	call   c00024bb <check_fs>
c0002589:	83 f8 02             	cmp    eax,0x2
c000258c:	74 0e                	je     c000259c <find_volume+0x27>
c000258e:	0f 87 5d 01 00 00    	ja     c00026f1 <find_volume+0x17c>
c0002594:	85 f6                	test   esi,esi
c0002596:	0f 84 55 01 00 00    	je     c00026f1 <find_volume+0x17c>
c000259c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a3:	0f 85 dd 00 00 00    	jne    c0002686 <find_volume+0x111>
c00025a9:	31 c9                	xor    ecx,ecx
c00025ab:	ba 01 00 00 00       	mov    edx,0x1
c00025b0:	89 d8                	mov    eax,ebx
c00025b2:	e8 90 fe ff ff       	call   c0002447 <move_window>
c00025b7:	85 c0                	test   eax,eax
c00025b9:	74 0a                	je     c00025c5 <find_volume+0x50>
c00025bb:	b8 04 00 00 00       	mov    eax,0x4
c00025c0:	e9 2c 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025c5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c8:	89 e8                	mov    eax,ebp
c00025ca:	e8 f6 fc ff ff       	call   c00022c5 <test_gpt_header>
c00025cf:	85 c0                	test   eax,eax
c00025d1:	75 0a                	jne    c00025dd <find_volume+0x68>
c00025d3:	b8 03 00 00 00       	mov    eax,0x3
c00025d8:	e9 14 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025dd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e3:	e8 8e f6 ff ff       	call   c0001c76 <ld_dword>
c00025e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ec:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f2:	e8 97 f6 ff ff       	call   c0001c8e <ld_qword>
c00025f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000260f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002613:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002617:	74 ba                	je     c00025d3 <find_volume+0x5e>
c0002619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	c1 e7 07             	shl    edi,0x7
c0002622:	89 d8                	mov    eax,ebx
c0002624:	89 fa                	mov    edx,edi
c0002626:	c1 ea 09             	shr    edx,0x9
c0002629:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002631:	e8 11 fe ff ff       	call   c0002447 <move_window>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 81                	jne    c00025bb <find_volume+0x46>
c000263a:	81 e7 80 01 00 00    	and    edi,0x180
c0002640:	b9 10 00 00 00       	mov    ecx,0x10
c0002645:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002649:	ba 30 95 02 c0       	mov    edx,0xc0029530
c000264e:	e8 b5 f6 ff ff       	call   c0001d08 <mem_cmp>
c0002653:	85 c0                	test   eax,eax
c0002655:	75 29                	jne    c0002680 <find_volume+0x10b>
c0002657:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000265f:	e8 2a f6 ff ff       	call   c0001c8e <ld_qword>
c0002664:	89 d1                	mov    ecx,edx
c0002666:	89 c2                	mov    edx,eax
c0002668:	89 d8                	mov    eax,ebx
c000266a:	e8 4c fe ff ff       	call   c00024bb <check_fs>
c000266f:	85 f6                	test   esi,esi
c0002671:	75 07                	jne    c000267a <find_volume+0x105>
c0002673:	83 f8 01             	cmp    eax,0x1
c0002676:	77 08                	ja     c0002680 <find_volume+0x10b>
c0002678:	eb 77                	jmp    c00026f1 <find_volume+0x17c>
c000267a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000267e:	74 71                	je     c00026f1 <find_volume+0x17c>
c0002680:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002684:	eb 89                	jmp    c000260f <find_volume+0x9a>
c0002686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002690:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269a:	89 cd                	mov    ebp,ecx
c000269c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a0:	89 f8                	mov    eax,edi
c00026a2:	83 c7 10             	add    edi,0x10
c00026a5:	e8 cc f5 ff ff       	call   c0001c76 <ld_dword>
c00026aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ae:	89 01                	mov    DWORD PTR [ecx],eax
c00026b0:	83 c1 04             	add    ecx,0x4
c00026b3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b7:	75 e3                	jne    c000269c <find_volume+0x127>
c00026b9:	31 ff                	xor    edi,edi
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 03                	je     c00026c2 <find_volume+0x14d>
c00026bf:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c6:	85 d2                	test   edx,edx
c00026c8:	74 14                	je     c00026de <find_volume+0x169>
c00026ca:	31 c9                	xor    ecx,ecx
c00026cc:	89 d8                	mov    eax,ebx
c00026ce:	e8 e8 fd ff ff       	call   c00024bb <check_fs>
c00026d3:	83 f8 01             	cmp    eax,0x1
c00026d6:	76 19                	jbe    c00026f1 <find_volume+0x17c>
c00026d8:	85 f6                	test   esi,esi
c00026da:	74 0f                	je     c00026eb <find_volume+0x176>
c00026dc:	eb 13                	jmp    c00026f1 <find_volume+0x17c>
c00026de:	85 f6                	test   esi,esi
c00026e0:	0f 85 ed fe ff ff    	jne    c00025d3 <find_volume+0x5e>
c00026e6:	b8 03 00 00 00       	mov    eax,0x3
c00026eb:	47                   	inc    edi
c00026ec:	83 ff 03             	cmp    edi,0x3
c00026ef:	76 d1                	jbe    c00026c2 <find_volume+0x14d>
c00026f1:	83 c4 3c             	add    esp,0x3c
c00026f4:	5b                   	pop    ebx
c00026f5:	5e                   	pop    esi
c00026f6:	5f                   	pop    edi
c00026f7:	5d                   	pop    ebp
c00026f8:	c3                   	ret    

c00026f9 <mount_volume>:
c00026f9:	55                   	push   ebp
c00026fa:	57                   	push   edi
c00026fb:	89 cf                	mov    edi,ecx
c00026fd:	56                   	push   esi
c00026fe:	53                   	push   ebx
c00026ff:	bb 0b 00 00 00       	mov    ebx,0xb
c0002704:	83 ec 3c             	sub    esp,0x3c
c0002707:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002711:	e8 35 fb ff ff       	call   c000224b <get_ldnumber>
c0002716:	85 c0                	test   eax,eax
c0002718:	0f 88 3a 05 00 00    	js     c0002c58 <mount_volume+0x55f>
c000271e:	8b 2c 85 00 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1b00]
c0002725:	89 c6                	mov    esi,eax
c0002727:	bb 0c 00 00 00       	mov    ebx,0xc
c000272c:	85 ed                	test   ebp,ebp
c000272e:	0f 84 24 05 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002738:	83 e7 fe             	and    edi,0xfffffffe
c000273b:	89 2a                	mov    DWORD PTR [edx],ebp
c000273d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002741:	74 32                	je     c0002775 <mount_volume+0x7c>
c0002743:	83 ec 0c             	sub    esp,0xc
c0002746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274a:	50                   	push   eax
c000274b:	e8 c8 f4 ff ff       	call   c0001c18 <disk_status>
c0002750:	83 c4 10             	add    esp,0x10
c0002753:	a8 01                	test   al,0x1
c0002755:	75 1e                	jne    c0002775 <mount_volume+0x7c>
c0002757:	31 db                	xor    ebx,ebx
c0002759:	89 f9                	mov    ecx,edi
c000275b:	84 c9                	test   cl,cl
c000275d:	0f 84 f5 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002763:	a8 04                	test   al,0x4
c0002765:	0f 84 ed 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c000276b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002770:	e9 e3 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002775:	83 ec 0c             	sub    esp,0xc
c0002778:	89 f0                	mov    eax,esi
c000277a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000277e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002781:	0f b6 f0             	movzx  esi,al
c0002784:	bb 03 00 00 00       	mov    ebx,0x3
c0002789:	56                   	push   esi
c000278a:	e8 8c f4 ff ff       	call   c0001c1b <disk_initialize>
c000278f:	83 c4 10             	add    esp,0x10
c0002792:	a8 01                	test   al,0x1
c0002794:	0f 85 be 04 00 00    	jne    c0002c58 <mount_volume+0x55f>
c000279a:	89 f9                	mov    ecx,edi
c000279c:	84 c9                	test   cl,cl
c000279e:	74 04                	je     c00027a4 <mount_volume+0xab>
c00027a0:	a8 04                	test   al,0x4
c00027a2:	75 c7                	jne    c000276b <mount_volume+0x72>
c00027a4:	31 d2                	xor    edx,edx
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	e8 c8 fd ff ff       	call   c0002575 <find_volume>
c00027ad:	83 f8 04             	cmp    eax,0x4
c00027b0:	75 0a                	jne    c00027bc <mount_volume+0xc3>
c00027b2:	bb 01 00 00 00       	mov    ebx,0x1
c00027b7:	e9 9c 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027bc:	83 f8 01             	cmp    eax,0x1
c00027bf:	76 0a                	jbe    c00027cb <mount_volume+0xd2>
c00027c1:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c6:	e9 8d 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027cb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ce:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d9:	75 17                	jne    c00027f2 <mount_volume+0xf9>
c00027db:	b8 0b 00 00 00       	mov    eax,0xb
c00027e0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e5:	75 da                	jne    c00027c1 <mount_volume+0xc8>
c00027e7:	40                   	inc    eax
c00027e8:	83 f8 40             	cmp    eax,0x40
c00027eb:	75 f3                	jne    c00027e0 <mount_volume+0xe7>
c00027ed:	e9 5a 02 00 00       	jmp    c0002a4c <mount_volume+0x353>
c00027f2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f5:	e8 6f f4 ff ff       	call   c0001c69 <ld_word>
c00027fa:	66 3d 00 02          	cmp    ax,0x200
c00027fe:	75 c1                	jne    c00027c1 <mount_volume+0xc8>
c0002800:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002803:	e8 61 f4 ff ff       	call   c0001c69 <ld_word>
c0002808:	0f b7 c0             	movzx  eax,ax
c000280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000280f:	85 c0                	test   eax,eax
c0002811:	75 0c                	jne    c000281f <mount_volume+0x126>
c0002813:	8d 45 78             	lea    eax,[ebp+0x78]
c0002816:	e8 5b f4 ff ff       	call   c0001c76 <ld_dword>
c000281b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002823:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002826:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	48                   	dec    eax
c0002831:	3c 01                	cmp    al,0x1
c0002833:	77 8c                	ja     c00027c1 <mount_volume+0xc8>
c0002835:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002839:	89 c3                	mov    ebx,eax
c000283b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000283f:	66 85 c0             	test   ax,ax
c0002842:	0f 84 79 ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002848:	8d 40 ff             	lea    eax,[eax-0x1]
c000284b:	85 d8                	test   eax,ebx
c000284d:	0f 85 6e ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002853:	8d 45 65             	lea    eax,[ebp+0x65]
c0002856:	e8 0e f4 ff ff       	call   c0001c69 <ld_word>
c000285b:	89 c7                	mov    edi,eax
c000285d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002861:	a8 0f                	test   al,0xf
c0002863:	0f 85 58 ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002869:	8d 45 67             	lea    eax,[ebp+0x67]
c000286c:	e8 f8 f3 ff ff       	call   c0001c69 <ld_word>
c0002871:	0f b7 f0             	movzx  esi,ax
c0002874:	85 f6                	test   esi,esi
c0002876:	75 0a                	jne    c0002882 <mount_volume+0x189>
c0002878:	8d 45 74             	lea    eax,[ebp+0x74]
c000287b:	e8 f6 f3 ff ff       	call   c0001c76 <ld_dword>
c0002880:	89 c6                	mov    esi,eax
c0002882:	8d 45 62             	lea    eax,[ebp+0x62]
c0002885:	e8 df f3 ff ff       	call   c0001c69 <ld_word>
c000288a:	66 85 c0             	test   ax,ax
c000288d:	0f 84 2e ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002893:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002898:	0f b7 c8             	movzx  ecx,ax
c000289b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a4:	89 fa                	mov    edx,edi
c00028a6:	66 c1 ea 04          	shr    dx,0x4
c00028aa:	0f b7 d2             	movzx  edx,dx
c00028ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b8:	39 c6                	cmp    esi,eax
c00028ba:	0f 82 01 ff ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028c0:	29 c6                	sub    esi,eax
c00028c2:	31 d2                	xor    edx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	f7 f3                	div    ebx
c00028c8:	39 de                	cmp    esi,ebx
c00028ca:	0f 82 f1 fe ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d5:	0f 87 e6 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00028db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e0:	0f 86 63 03 00 00    	jbe    c0002c49 <mount_volume+0x550>
c00028e6:	bb 03 00 00 00       	mov    ebx,0x3
c00028eb:	8d 70 02             	lea    esi,[eax+0x2]
c00028ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fc:	31 d2                	xor    edx,edx
c00028fe:	89 c8                	mov    eax,ecx
c0002900:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000290f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292d:	83 fb 03             	cmp    ebx,0x3
c0002930:	75 2b                	jne    c000295d <mount_volume+0x264>
c0002932:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002935:	e8 2f f3 ff ff       	call   c0001c69 <ld_word>
c000293a:	66 09 c7             	or     di,ax
c000293d:	0f 85 7e fe ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002943:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002949:	c1 e6 02             	shl    esi,0x2
c000294c:	e8 25 f3 ff ff       	call   c0001c76 <ld_dword>
c0002951:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002958:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295b:	eb 30                	jmp    c000298d <mount_volume+0x294>
c000295d:	66 85 ff             	test   di,di
c0002960:	0f 84 5b fe ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002966:	31 d2                	xor    edx,edx
c0002968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002970:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297a:	83 fb 02             	cmp    ebx,0x2
c000297d:	75 04                	jne    c0002983 <mount_volume+0x28a>
c000297f:	01 f6                	add    esi,esi
c0002981:	eb 0a                	jmp    c000298d <mount_volume+0x294>
c0002983:	8d 04 76             	lea    eax,[esi+esi*2]
c0002986:	83 e6 01             	and    esi,0x1
c0002989:	d1 e8                	shr    eax,1
c000298b:	01 c6                	add    esi,eax
c000298d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002993:	c1 ee 09             	shr    esi,0x9
c0002996:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299a:	0f 87 21 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00029a0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ae:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b2:	83 fb 03             	cmp    ebx,0x3
c00029b5:	75 7a                	jne    c0002a31 <mount_volume+0x338>
c00029b7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bd:	e8 a7 f2 ff ff       	call   c0001c69 <ld_word>
c00029c2:	66 48                	dec    ax
c00029c4:	75 6b                	jne    c0002a31 <mount_volume+0x338>
c00029c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ce:	83 c2 01             	add    edx,0x1
c00029d1:	89 e8                	mov    eax,ebp
c00029d3:	83 d1 00             	adc    ecx,0x0
c00029d6:	e8 6c fa ff ff       	call   c0002447 <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	75 52                	jne    c0002a31 <mount_volume+0x338>
c00029df:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e9:	e8 7b f2 ff ff       	call   c0001c69 <ld_word>
c00029ee:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f2:	75 3d                	jne    c0002a31 <mount_volume+0x338>
c00029f4:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f7:	e8 7a f2 ff ff       	call   c0001c76 <ld_dword>
c00029fc:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a01:	75 2e                	jne    c0002a31 <mount_volume+0x338>
c0002a03:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a09:	e8 68 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a0e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a13:	75 1c                	jne    c0002a31 <mount_volume+0x338>
c0002a15:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1b:	e8 56 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a20:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a23:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a29:	e8 48 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a2e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a31:	66 a1 e0 e4 02 c0    	mov    ax,ds:0xc002e4e0
c0002a37:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3a:	40                   	inc    eax
c0002a3b:	31 db                	xor    ebx,ebx
c0002a3d:	66 a3 e0 e4 02 c0    	mov    ds:0xc002e4e0,ax
c0002a43:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a47:	e9 0c 02 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002a4c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a52:	e8 12 f2 ff ff       	call   c0001c69 <ld_word>
c0002a57:	66 3d 00 01          	cmp    ax,0x100
c0002a5b:	0f 85 60 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a61:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a68:	0f 85 53 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a6e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a74:	e8 15 f2 ff ff       	call   c0001c8e <ld_qword>
c0002a79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a81:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a87:	e8 ea f1 ff ff       	call   c0001c76 <ld_dword>
c0002a8c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a8f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a95:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a98:	fe c8                	dec    al
c0002a9a:	0f 85 21 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002aa0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa7:	bb 01 00 00 00       	mov    ebx,0x1
c0002aac:	d3 e3                	shl    ebx,cl
c0002aae:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab2:	66 85 db             	test   bx,bx
c0002ab5:	0f 84 06 fd ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002abb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac1:	e8 b0 f1 ff ff       	call   c0001c76 <ld_dword>
c0002ac6:	89 c6                	mov    esi,eax
c0002ac8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acd:	0f 87 ee fc ff ff    	ja     c00027c1 <mount_volume+0xc8>
c0002ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad7:	8d 40 02             	lea    eax,[eax+0x2]
c0002ada:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002add:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aed:	e8 84 f1 ff ff       	call   c0001c76 <ld_dword>
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b04:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b07:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b10:	e8 61 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b23:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b26:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b29:	0f b7 c3             	movzx  eax,bx
c0002b2c:	31 d2                	xor    edx,edx
c0002b2e:	0f af f0             	imul   esi,eax
c0002b31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b35:	89 f0                	mov    eax,esi
c0002b37:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b3f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b43:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b47:	39 c1                	cmp    ecx,eax
c0002b49:	89 df                	mov    edi,ebx
c0002b4b:	19 d7                	sbb    edi,edx
c0002b4d:	0f 82 6e fc ff ff    	jb     c00027c1 <mount_volume+0xc8>
c0002b53:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b59:	31 db                	xor    ebx,ebx
c0002b5b:	e8 16 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b60:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b67:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b72:	85 db                	test   ebx,ebx
c0002b74:	75 39                	jne    c0002baf <mount_volume+0x4b6>
c0002b76:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b7e:	0f 86 3d fc ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002b84:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b87:	31 ff                	xor    edi,edi
c0002b89:	89 e8                	mov    eax,ebp
c0002b8b:	e8 72 f3 ff ff       	call   c0001f02 <clst2sect>
c0002b90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b94:	01 c6                	add    esi,eax
c0002b96:	89 e8                	mov    eax,ebp
c0002b98:	11 d7                	adc    edi,edx
c0002b9a:	89 f2                	mov    edx,esi
c0002b9c:	89 f9                	mov    ecx,edi
c0002b9e:	e8 a4 f8 ff ff       	call   c0002447 <move_window>
c0002ba3:	85 c0                	test   eax,eax
c0002ba5:	0f 85 07 fc ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002bab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002baf:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb4:	74 0b                	je     c0002bc1 <mount_volume+0x4c8>
c0002bb6:	83 c3 20             	add    ebx,0x20
c0002bb9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bbf:	eb b1                	jmp    c0002b72 <mount_volume+0x479>
c0002bc1:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc8:	e8 a9 f0 ff ff       	call   c0001c76 <ld_dword>
c0002bcd:	89 c3                	mov    ebx,eax
c0002bcf:	83 f8 01             	cmp    eax,0x1
c0002bd2:	0f 86 e9 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002bd8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdb:	0f 86 e0 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002be1:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be8:	0f af c2             	imul   eax,edx
c0002beb:	31 d2                	xor    edx,edx
c0002bed:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	89 da                	mov    edx,ebx
c0002bfd:	89 e8                	mov    eax,ebp
c0002bff:	c1 ea 07             	shr    edx,0x7
c0002c02:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c05:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c08:	e8 3a f8 ff ff       	call   c0002447 <move_window>
c0002c0d:	85 c0                	test   eax,eax
c0002c0f:	0f 85 9d fb ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002c15:	89 d8                	mov    eax,ebx
c0002c17:	83 e0 7f             	and    eax,0x7f
c0002c1a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1d:	e8 54 f0 ff ff       	call   c0001c76 <ld_dword>
c0002c22:	83 f8 ff             	cmp    eax,0xffffffff
c0002c25:	74 0a                	je     c0002c31 <mount_volume+0x538>
c0002c27:	43                   	inc    ebx
c0002c28:	39 d8                	cmp    eax,ebx
c0002c2a:	74 cd                	je     c0002bf9 <mount_volume+0x500>
c0002c2c:	e9 90 fb ff ff       	jmp    c00027c1 <mount_volume+0xc8>
c0002c31:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c38:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c3f:	bb 04 00 00 00       	mov    ebx,0x4
c0002c44:	e9 e8 fd ff ff       	jmp    c0002a31 <mount_volume+0x338>
c0002c49:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c4e:	19 db                	sbb    ebx,ebx
c0002c50:	83 c3 02             	add    ebx,0x2
c0002c53:	e9 93 fc ff ff       	jmp    c00028eb <mount_volume+0x1f2>
c0002c58:	83 c4 3c             	add    esp,0x3c
c0002c5b:	89 d8                	mov    eax,ebx
c0002c5d:	5b                   	pop    ebx
c0002c5e:	5e                   	pop    esi
c0002c5f:	5f                   	pop    edi
c0002c60:	5d                   	pop    ebp
c0002c61:	c3                   	ret    

c0002c62 <find_bitmap>:
c0002c62:	55                   	push   ebp
c0002c63:	57                   	push   edi
c0002c64:	89 c7                	mov    edi,eax
c0002c66:	56                   	push   esi
c0002c67:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6a:	53                   	push   ebx
c0002c6b:	83 ec 1c             	sub    esp,0x1c
c0002c6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c75:	83 e8 02             	sub    eax,0x2
c0002c78:	39 f0                	cmp    eax,esi
c0002c7a:	77 02                	ja     c0002c7e <find_bitmap+0x1c>
c0002c7c:	31 f6                	xor    esi,esi
c0002c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c82:	89 f3                	mov    ebx,esi
c0002c84:	31 ed                	xor    ebp,ebp
c0002c86:	31 c9                	xor    ecx,ecx
c0002c88:	89 da                	mov    edx,ebx
c0002c8a:	89 f8                	mov    eax,edi
c0002c8c:	c1 ea 0c             	shr    edx,0xc
c0002c8f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c92:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c95:	e8 ad f7 ff ff       	call   c0002447 <move_window>
c0002c9a:	85 c0                	test   eax,eax
c0002c9c:	75 68                	jne    c0002d06 <find_bitmap+0xa4>
c0002c9e:	89 da                	mov    edx,ebx
c0002ca0:	89 d9                	mov    ecx,ebx
c0002ca2:	c1 ea 03             	shr    edx,0x3
c0002ca5:	83 e1 07             	and    ecx,0x7
c0002ca8:	b8 01 00 00 00       	mov    eax,0x1
c0002cad:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb3:	d3 e0                	shl    eax,cl
c0002cb5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb8:	83 e9 02             	sub    ecx,0x2
c0002cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cbf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc3:	43                   	inc    ebx
c0002cc4:	21 c1                	and    ecx,eax
c0002cc6:	d1 e0                	shl    eax,1
c0002cc8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ccc:	77 09                	ja     c0002cd7 <find_bitmap+0x75>
c0002cce:	31 db                	xor    ebx,ebx
c0002cd0:	ba 00 02 00 00       	mov    edx,0x200
c0002cd5:	31 c0                	xor    eax,eax
c0002cd7:	84 c9                	test   cl,cl
c0002cd9:	75 10                	jne    c0002ceb <find_bitmap+0x89>
c0002cdb:	45                   	inc    ebp
c0002cdc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce0:	75 0f                	jne    c0002cf1 <find_bitmap+0x8f>
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	83 c0 02             	add    eax,0x2
c0002ce9:	eb 22                	jmp    c0002d0d <find_bitmap+0xab>
c0002ceb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cef:	31 ed                	xor    ebp,ebp
c0002cf1:	39 de                	cmp    esi,ebx
c0002cf3:	74 16                	je     c0002d0b <find_bitmap+0xa9>
c0002cf5:	84 c0                	test   al,al
c0002cf7:	75 c6                	jne    c0002cbf <find_bitmap+0x5d>
c0002cf9:	42                   	inc    edx
c0002cfa:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d00:	77 84                	ja     c0002c86 <find_bitmap+0x24>
c0002d02:	b0 01                	mov    al,0x1
c0002d04:	eb b9                	jmp    c0002cbf <find_bitmap+0x5d>
c0002d06:	83 c8 ff             	or     eax,0xffffffff
c0002d09:	eb 02                	jmp    c0002d0d <find_bitmap+0xab>
c0002d0b:	31 c0                	xor    eax,eax
c0002d0d:	83 c4 1c             	add    esp,0x1c
c0002d10:	5b                   	pop    ebx
c0002d11:	5e                   	pop    esi
c0002d12:	5f                   	pop    edi
c0002d13:	5d                   	pop    ebp
c0002d14:	c3                   	ret    

c0002d15 <change_bitmap>:
c0002d15:	55                   	push   ebp
c0002d16:	89 cd                	mov    ebp,ecx
c0002d18:	57                   	push   edi
c0002d19:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1c:	56                   	push   esi
c0002d1d:	89 c7                	mov    edi,eax
c0002d1f:	53                   	push   ebx
c0002d20:	89 c8                	mov    eax,ecx
c0002d22:	83 ec 1c             	sub    esp,0x1c
c0002d25:	31 d2                	xor    edx,edx
c0002d27:	89 ce                	mov    esi,ecx
c0002d29:	c1 e8 0c             	shr    eax,0xc
c0002d2c:	bb 01 00 00 00       	mov    ebx,0x1
c0002d31:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d34:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d37:	c1 ee 03             	shr    esi,0x3
c0002d3a:	83 e1 07             	and    ecx,0x7
c0002d3d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d43:	d3 e3                	shl    ebx,cl
c0002d45:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	89 d3                	mov    ebx,edx
c0002d4d:	83 c1 01             	add    ecx,0x1
c0002d50:	83 d3 00             	adc    ebx,0x0
c0002d53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d57:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5b:	89 d1                	mov    ecx,edx
c0002d5d:	89 c2                	mov    edx,eax
c0002d5f:	89 f8                	mov    eax,edi
c0002d61:	e8 e1 f6 ff ff       	call   c0002447 <move_window>
c0002d66:	89 c1                	mov    ecx,eax
c0002d68:	85 c0                	test   eax,eax
c0002d6a:	75 48                	jne    c0002db4 <change_bitmap+0x9f>
c0002d6c:	31 d2                	xor    edx,edx
c0002d6e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d72:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d76:	0f 95 c2             	setne  dl
c0002d79:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7d:	74 3c                	je     c0002dbb <change_bitmap+0xa6>
c0002d7f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d83:	4d                   	dec    ebp
c0002d84:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d88:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8c:	74 32                	je     c0002dc0 <change_bitmap+0xab>
c0002d8e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d92:	75 d8                	jne    c0002d6c <change_bitmap+0x57>
c0002d94:	8d 46 01             	lea    eax,[esi+0x1]
c0002d97:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9c:	89 c3                	mov    ebx,eax
c0002d9e:	31 f6                	xor    esi,esi
c0002da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dae:	74 99                	je     c0002d49 <change_bitmap+0x34>
c0002db0:	89 de                	mov    esi,ebx
c0002db2:	eb b8                	jmp    c0002d6c <change_bitmap+0x57>
c0002db4:	b9 01 00 00 00       	mov    ecx,0x1
c0002db9:	eb 05                	jmp    c0002dc0 <change_bitmap+0xab>
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	83 c4 1c             	add    esp,0x1c
c0002dc3:	89 c8                	mov    eax,ecx
c0002dc5:	5b                   	pop    ebx
c0002dc6:	5e                   	pop    esi
c0002dc7:	5f                   	pop    edi
c0002dc8:	5d                   	pop    ebp
c0002dc9:	c3                   	ret    

c0002dca <put_fat>:
c0002dca:	83 fa 01             	cmp    edx,0x1
c0002dcd:	0f 86 7b 01 00 00    	jbe    c0002f4e <put_fat+0x184>
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	89 cf                	mov    edi,ecx
c0002dd7:	56                   	push   esi
c0002dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddd:	53                   	push   ebx
c0002dde:	89 c6                	mov    esi,eax
c0002de0:	83 ec 1c             	sub    esp,0x1c
c0002de3:	89 d3                	mov    ebx,edx
c0002de5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de8:	0f 86 68 01 00 00    	jbe    c0002f56 <put_fat+0x18c>
c0002dee:	8a 00                	mov    al,BYTE PTR [eax]
c0002df0:	3c 02                	cmp    al,0x2
c0002df2:	0f 84 c7 00 00 00    	je     c0002ebf <put_fat+0xf5>
c0002df8:	77 09                	ja     c0002e03 <put_fat+0x39>
c0002dfa:	fe c8                	dec    al
c0002dfc:	74 17                	je     c0002e15 <put_fat+0x4b>
c0002dfe:	e9 53 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e03:	b9 02 00 00 00       	mov    ecx,0x2
c0002e08:	3c 04                	cmp    al,0x4
c0002e0a:	0f 86 e1 00 00 00    	jbe    c0002ef1 <put_fat+0x127>
c0002e10:	e9 41 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e15:	89 d5                	mov    ebp,edx
c0002e17:	31 c9                	xor    ecx,ecx
c0002e19:	d1 ed                	shr    ebp,1
c0002e1b:	89 f0                	mov    eax,esi
c0002e1d:	01 d5                	add    ebp,edx
c0002e1f:	89 ea                	mov    edx,ebp
c0002e21:	c1 ea 09             	shr    edx,0x9
c0002e24:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e27:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2a:	e8 18 f6 ff ff       	call   c0002447 <move_window>
c0002e2f:	89 c1                	mov    ecx,eax
c0002e31:	85 c0                	test   eax,eax
c0002e33:	0f 85 1d 01 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e39:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e40:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e43:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e51:	89 f8                	mov    eax,edi
c0002e53:	83 e3 01             	and    ebx,0x1
c0002e56:	74 0d                	je     c0002e65 <put_fat+0x9b>
c0002e58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5b:	89 fa                	mov    edx,edi
c0002e5d:	83 e0 0f             	and    eax,0xf
c0002e60:	c1 e2 04             	shl    edx,0x4
c0002e63:	09 d0                	or     eax,edx
c0002e65:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6c:	31 c9                	xor    ecx,ecx
c0002e6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e72:	c1 ea 09             	shr    edx,0x9
c0002e75:	89 f0                	mov    eax,esi
c0002e77:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7d:	e8 c5 f5 ff ff       	call   c0002447 <move_window>
c0002e82:	89 c1                	mov    ecx,eax
c0002e84:	85 c0                	test   eax,eax
c0002e86:	0f 85 ca 00 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e96:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9a:	85 db                	test   ebx,ebx
c0002e9c:	74 07                	je     c0002ea5 <put_fat+0xdb>
c0002e9e:	c1 ef 04             	shr    edi,0x4
c0002ea1:	89 fa                	mov    edx,edi
c0002ea3:	eb 0e                	jmp    c0002eb3 <put_fat+0xe9>
c0002ea5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea8:	c1 ef 08             	shr    edi,0x8
c0002eab:	83 e2 f0             	and    edx,0xfffffff0
c0002eae:	83 e7 0f             	and    edi,0xf
c0002eb1:	09 fa                	or     edx,edi
c0002eb3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eba:	e9 97 00 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002ebf:	31 c9                	xor    ecx,ecx
c0002ec1:	c1 ea 08             	shr    edx,0x8
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ecc:	e8 76 f5 ff ff       	call   c0002447 <move_window>
c0002ed1:	89 c1                	mov    ecx,eax
c0002ed3:	85 c0                	test   eax,eax
c0002ed5:	75 7f                	jne    c0002f56 <put_fat+0x18c>
c0002ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edb:	01 db                	add    ebx,ebx
c0002edd:	0f b7 d7             	movzx  edx,di
c0002ee0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eea:	e8 ec ed ff ff       	call   c0001cdb <st_word>
c0002eef:	eb 53                	jmp    c0002f44 <put_fat+0x17a>
c0002ef1:	31 c9                	xor    ecx,ecx
c0002ef3:	c1 ea 07             	shr    edx,0x7
c0002ef6:	89 f0                	mov    eax,esi
c0002ef8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002efe:	e8 44 f5 ff ff       	call   c0002447 <move_window>
c0002f03:	89 c1                	mov    ecx,eax
c0002f05:	85 c0                	test   eax,eax
c0002f07:	75 4d                	jne    c0002f56 <put_fat+0x18c>
c0002f09:	c1 e3 02             	shl    ebx,0x2
c0002f0c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f12:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f15:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f19:	74 1c                	je     c0002f37 <put_fat+0x16d>
c0002f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f25:	89 d8                	mov    eax,ebx
c0002f27:	e8 4a ed ff ff       	call   c0001c76 <ld_dword>
c0002f2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f30:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f35:	09 c7                	or     edi,eax
c0002f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3b:	89 fa                	mov    edx,edi
c0002f3d:	89 d8                	mov    eax,ebx
c0002f3f:	e8 9b ed ff ff       	call   c0001cdf <st_dword>
c0002f44:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	eb 08                	jmp    c0002f56 <put_fat+0x18c>
c0002f4e:	b9 02 00 00 00       	mov    ecx,0x2
c0002f53:	89 c8                	mov    eax,ecx
c0002f55:	c3                   	ret    
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	89 c8                	mov    eax,ecx
c0002f5b:	5b                   	pop    ebx
c0002f5c:	5e                   	pop    esi
c0002f5d:	5f                   	pop    edi
c0002f5e:	5d                   	pop    ebp
c0002f5f:	c3                   	ret    

c0002f60 <fill_last_frag>:
c0002f60:	57                   	push   edi
c0002f61:	89 cf                	mov    edi,ecx
c0002f63:	56                   	push   esi
c0002f64:	89 d6                	mov    esi,edx
c0002f66:	53                   	push   ebx
c0002f67:	89 c3                	mov    ebx,eax
c0002f69:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6c:	85 c0                	test   eax,eax
c0002f6e:	74 21                	je     c0002f91 <fill_last_frag+0x31>
c0002f70:	89 f9                	mov    ecx,edi
c0002f72:	83 f8 01             	cmp    eax,0x1
c0002f75:	76 05                	jbe    c0002f7c <fill_last_frag+0x1c>
c0002f77:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7a:	29 c1                	sub    ecx,eax
c0002f7c:	8d 56 01             	lea    edx,[esi+0x1]
c0002f7f:	29 c2                	sub    edx,eax
c0002f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f83:	e8 42 fe ff ff       	call   c0002dca <put_fat>
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	75 05                	jne    c0002f91 <fill_last_frag+0x31>
c0002f8c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f8f:	eb d8                	jmp    c0002f69 <fill_last_frag+0x9>
c0002f91:	5b                   	pop    ebx
c0002f92:	5e                   	pop    esi
c0002f93:	5f                   	pop    edi
c0002f94:	c3                   	ret    

c0002f95 <fill_first_frag>:
c0002f95:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f99:	75 2d                	jne    c0002fc8 <fill_first_frag+0x33>
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa6:	01 d7                	add    edi,edx
c0002fa8:	39 fa                	cmp    edx,edi
c0002faa:	74 14                	je     c0002fc0 <fill_first_frag+0x2b>
c0002fac:	8d 72 01             	lea    esi,[edx+0x1]
c0002faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb1:	89 f1                	mov    ecx,esi
c0002fb3:	e8 12 fe ff ff       	call   c0002dca <put_fat>
c0002fb8:	89 f2                	mov    edx,esi
c0002fba:	85 c0                	test   eax,eax
c0002fbc:	74 ea                	je     c0002fa8 <fill_first_frag+0x13>
c0002fbe:	eb 0b                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc4:	31 c0                	xor    eax,eax
c0002fc6:	eb 03                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc8:	31 c0                	xor    eax,eax
c0002fca:	c3                   	ret    
c0002fcb:	5b                   	pop    ebx
c0002fcc:	5e                   	pop    esi
c0002fcd:	5f                   	pop    edi
c0002fce:	c3                   	ret    

c0002fcf <get_fat>:
c0002fcf:	83 fa 01             	cmp    edx,0x1
c0002fd2:	0f 86 db 01 00 00    	jbe    c00031b3 <get_fat+0x1e4>
c0002fd8:	55                   	push   ebp
c0002fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fde:	57                   	push   edi
c0002fdf:	56                   	push   esi
c0002fe0:	53                   	push   ebx
c0002fe1:	83 ec 1c             	sub    esp,0x1c
c0002fe4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe9:	0f 86 cc 01 00 00    	jbe    c00031bb <get_fat+0x1ec>
c0002fef:	89 c3                	mov    ebx,eax
c0002ff1:	89 d6                	mov    esi,edx
c0002ff3:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff5:	3c 02                	cmp    al,0x2
c0002ff7:	0f 84 99 00 00 00    	je     c0003096 <get_fat+0xc7>
c0002ffd:	77 09                	ja     c0003008 <get_fat+0x39>
c0002fff:	fe c8                	dec    al
c0003001:	74 1a                	je     c000301d <get_fat+0x4e>
c0003003:	e9 b3 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003008:	3c 03                	cmp    al,0x3
c000300a:	0f 84 b5 00 00 00    	je     c00030c5 <get_fat+0xf6>
c0003010:	3c 04                	cmp    al,0x4
c0003012:	0f 84 e3 00 00 00    	je     c00030fb <get_fat+0x12c>
c0003018:	e9 9e 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c000301d:	89 d3                	mov    ebx,edx
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	d1 eb                	shr    ebx,1
c0003023:	89 f8                	mov    eax,edi
c0003025:	01 d3                	add    ebx,edx
c0003027:	89 da                	mov    edx,ebx
c0003029:	c1 ea 09             	shr    edx,0x9
c000302c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000302f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003032:	e8 10 f4 ff ff       	call   c0002447 <move_window>
c0003037:	85 c0                	test   eax,eax
c0003039:	74 08                	je     c0003043 <get_fat+0x74>
c000303b:	83 c9 ff             	or     ecx,0xffffffff
c000303e:	e9 78 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003043:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003046:	31 c9                	xor    ecx,ecx
c0003048:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000304e:	89 ea                	mov    edx,ebp
c0003050:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003054:	c1 ea 09             	shr    edx,0x9
c0003057:	89 f8                	mov    eax,edi
c0003059:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000305f:	e8 e3 f3 ff ff       	call   c0002447 <move_window>
c0003064:	85 c0                	test   eax,eax
c0003066:	75 d3                	jne    c000303b <get_fat+0x6c>
c0003068:	0f b6 c3             	movzx  eax,bl
c000306b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003071:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003076:	c1 e3 08             	shl    ebx,0x8
c0003079:	09 c3                	or     ebx,eax
c000307b:	89 d9                	mov    ecx,ebx
c000307d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003083:	83 e6 01             	and    esi,0x1
c0003086:	0f 84 2f 01 00 00    	je     c00031bb <get_fat+0x1ec>
c000308c:	89 d9                	mov    ecx,ebx
c000308e:	c1 e9 04             	shr    ecx,0x4
c0003091:	e9 25 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003096:	31 c9                	xor    ecx,ecx
c0003098:	c1 ea 08             	shr    edx,0x8
c000309b:	89 f8                	mov    eax,edi
c000309d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a3:	e8 9f f3 ff ff       	call   c0002447 <move_window>
c00030a8:	85 c0                	test   eax,eax
c00030aa:	75 8f                	jne    c000303b <get_fat+0x6c>
c00030ac:	01 f6                	add    esi,esi
c00030ae:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b8:	e8 ac eb ff ff       	call   c0001c69 <ld_word>
c00030bd:	0f b7 c8             	movzx  ecx,ax
c00030c0:	e9 f6 00 00 00       	jmp    c00031bb <get_fat+0x1ec>
c00030c5:	31 c9                	xor    ecx,ecx
c00030c7:	c1 ea 07             	shr    edx,0x7
c00030ca:	89 f8                	mov    eax,edi
c00030cc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030cf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d2:	e8 70 f3 ff ff       	call   c0002447 <move_window>
c00030d7:	85 c0                	test   eax,eax
c00030d9:	0f 85 5c ff ff ff    	jne    c000303b <get_fat+0x6c>
c00030df:	c1 e6 02             	shl    esi,0x2
c00030e2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ec:	e8 85 eb ff ff       	call   c0001c76 <ld_dword>
c00030f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f6:	e9 b4 00 00 00       	jmp    c00031af <get_fat+0x1e0>
c00030fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003101:	89 d1                	mov    ecx,edx
c0003103:	09 c1                	or     ecx,eax
c0003105:	74 06                	je     c000310d <get_fat+0x13e>
c0003107:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310b:	75 0f                	jne    c000311c <get_fat+0x14d>
c000310d:	b9 01 00 00 00       	mov    ecx,0x1
c0003112:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003116:	0f 85 9f 00 00 00    	jne    c00031bb <get_fat+0x1ec>
c000311c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003120:	89 f5                	mov    ebp,esi
c0003122:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003127:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312d:	80 f9 02             	cmp    cl,0x2
c0003130:	75 35                	jne    c0003167 <get_fat+0x198>
c0003132:	83 c0 ff             	add    eax,0xffffffff
c0003135:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313a:	83 d2 ff             	adc    edx,0xffffffff
c000313d:	31 db                	xor    ebx,ebx
c000313f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003143:	53                   	push   ebx
c0003144:	c1 ea 09             	shr    edx,0x9
c0003147:	51                   	push   ecx
c0003148:	52                   	push   edx
c0003149:	50                   	push   eax
c000314a:	e8 21 39 02 00       	call   c0026a70 <__udivdi3>
c000314f:	83 c4 10             	add    esp,0x10
c0003152:	b9 01 00 00 00       	mov    ecx,0x1
c0003157:	39 c5                	cmp    ebp,eax
c0003159:	77 60                	ja     c00031bb <get_fat+0x1ec>
c000315b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003160:	74 59                	je     c00031bb <get_fat+0x1ec>
c0003162:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003165:	eb 54                	jmp    c00031bb <get_fat+0x1ec>
c0003167:	80 f9 03             	cmp    cl,0x3
c000316a:	75 05                	jne    c0003171 <get_fat+0x1a2>
c000316c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000316f:	77 f1                	ja     c0003162 <get_fat+0x193>
c0003171:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003176:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317a:	75 3f                	jne    c00031bb <get_fat+0x1ec>
c000317c:	31 c9                	xor    ecx,ecx
c000317e:	89 f2                	mov    edx,esi
c0003180:	89 f8                	mov    eax,edi
c0003182:	c1 ea 07             	shr    edx,0x7
c0003185:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003188:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318b:	e8 b7 f2 ff ff       	call   c0002447 <move_window>
c0003190:	85 c0                	test   eax,eax
c0003192:	0f 85 a3 fe ff ff    	jne    c000303b <get_fat+0x6c>
c0003198:	c1 e6 02             	shl    esi,0x2
c000319b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a5:	e8 cc ea ff ff       	call   c0001c76 <ld_dword>
c00031aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031af:	89 c1                	mov    ecx,eax
c00031b1:	eb 08                	jmp    c00031bb <get_fat+0x1ec>
c00031b3:	b9 01 00 00 00       	mov    ecx,0x1
c00031b8:	89 c8                	mov    eax,ecx
c00031ba:	c3                   	ret    
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	89 c8                	mov    eax,ecx
c00031c0:	5b                   	pop    ebx
c00031c1:	5e                   	pop    esi
c00031c2:	5f                   	pop    edi
c00031c3:	5d                   	pop    ebp
c00031c4:	c3                   	ret    

c00031c5 <dir_sdi>:
c00031c5:	55                   	push   ebp
c00031c6:	57                   	push   edi
c00031c7:	56                   	push   esi
c00031c8:	53                   	push   ebx
c00031c9:	89 c3                	mov    ebx,eax
c00031cb:	83 ec 1c             	sub    esp,0x1c
c00031ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d0:	31 c0                	xor    eax,eax
c00031d2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d5:	0f 94 c0             	sete   al
c00031d8:	48                   	dec    eax
c00031d9:	25 00 00 20 f0       	and    eax,0xf0200000
c00031de:	05 00 00 00 10       	add    eax,0x10000000
c00031e3:	39 d0                	cmp    eax,edx
c00031e5:	77 0a                	ja     c00031f1 <dir_sdi+0x2c>
c00031e7:	b8 02 00 00 00       	mov    eax,0x2
c00031ec:	e9 c4 00 00 00       	jmp    c00032b5 <dir_sdi+0xf0>
c00031f1:	89 d6                	mov    esi,edx
c00031f3:	f6 c2 1f             	test   dl,0x1f
c00031f6:	75 ef                	jne    c00031e7 <dir_sdi+0x22>
c00031f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031fe:	85 c9                	test   ecx,ecx
c0003200:	75 2d                	jne    c000322f <dir_sdi+0x6a>
c0003202:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003205:	77 1b                	ja     c0003222 <dir_sdi+0x5d>
c0003207:	89 f2                	mov    edx,esi
c0003209:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320d:	c1 ea 05             	shr    edx,0x5
c0003210:	39 c2                	cmp    edx,eax
c0003212:	73 d3                	jae    c00031e7 <dir_sdi+0x22>
c0003214:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003217:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003220:	eb 4b                	jmp    c000326d <dir_sdi+0xa8>
c0003222:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003225:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003229:	85 c0                	test   eax,eax
c000322b:	74 da                	je     c0003207 <dir_sdi+0x42>
c000322d:	89 c1                	mov    ecx,eax
c000322f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003233:	c1 e5 09             	shl    ebp,0x9
c0003236:	89 ca                	mov    edx,ecx
c0003238:	39 ee                	cmp    esi,ebp
c000323a:	72 1c                	jb     c0003258 <dir_sdi+0x93>
c000323c:	89 d8                	mov    eax,ebx
c000323e:	e8 8c fd ff ff       	call   c0002fcf <get_fat>
c0003243:	89 c1                	mov    ecx,eax
c0003245:	83 f8 ff             	cmp    eax,0xffffffff
c0003248:	74 66                	je     c00032b0 <dir_sdi+0xeb>
c000324a:	83 f8 01             	cmp    eax,0x1
c000324d:	76 98                	jbe    c00031e7 <dir_sdi+0x22>
c000324f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003252:	76 93                	jbe    c00031e7 <dir_sdi+0x22>
c0003254:	29 ee                	sub    esi,ebp
c0003256:	eb de                	jmp    c0003236 <dir_sdi+0x71>
c0003258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325c:	89 f8                	mov    eax,edi
c000325e:	e8 9f ec ff ff       	call   c0001f02 <clst2sect>
c0003263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003267:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003273:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003276:	89 d1                	mov    ecx,edx
c0003278:	09 c1                	or     ecx,eax
c000327a:	0f 84 67 ff ff ff    	je     c00031e7 <dir_sdi+0x22>
c0003280:	89 f1                	mov    ecx,esi
c0003282:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328a:	c1 e9 09             	shr    ecx,0x9
c000328d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003295:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003299:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ac:	31 c0                	xor    eax,eax
c00032ae:	eb 05                	jmp    c00032b5 <dir_sdi+0xf0>
c00032b0:	b8 01 00 00 00       	mov    eax,0x1
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	5b                   	pop    ebx
c00032b9:	5e                   	pop    esi
c00032ba:	5f                   	pop    edi
c00032bb:	5d                   	pop    ebp
c00032bc:	c3                   	ret    

c00032bd <create_chain>:
c00032bd:	55                   	push   ebp
c00032be:	89 c5                	mov    ebp,eax
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	85 d2                	test   edx,edx
c00032c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ce:	75 0e                	jne    c00032de <create_chain+0x21>
c00032d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d3:	85 ff                	test   edi,edi
c00032d5:	74 39                	je     c0003310 <create_chain+0x53>
c00032d7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032da:	77 39                	ja     c0003315 <create_chain+0x58>
c00032dc:	eb 32                	jmp    c0003310 <create_chain+0x53>
c00032de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e2:	e8 e8 fc ff ff       	call   c0002fcf <get_fat>
c00032e7:	89 c3                	mov    ebx,eax
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	77 0a                	ja     c00032f8 <create_chain+0x3b>
c00032ee:	bb 01 00 00 00       	mov    ebx,0x1
c00032f3:	e9 ba 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c00032f8:	83 f8 ff             	cmp    eax,0xffffffff
c00032fb:	0f 84 62 01 00 00    	je     c0003463 <create_chain+0x1a6>
c0003301:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003304:	0f 87 a8 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c000330a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000330e:	eb 05                	jmp    c0003315 <create_chain+0x58>
c0003310:	bf 01 00 00 00       	mov    edi,0x1
c0003315:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003319:	75 07                	jne    c0003322 <create_chain+0x65>
c000331b:	31 db                	xor    ebx,ebx
c000331d:	e9 90 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c0003322:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003325:	75 74                	jne    c000339b <create_chain+0xde>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	89 fa                	mov    edx,edi
c000332e:	89 f0                	mov    eax,esi
c0003330:	e8 2d f9 ff ff       	call   c0002c62 <find_bitmap>
c0003335:	89 c3                	mov    ebx,eax
c0003337:	8d 40 ff             	lea    eax,[eax-0x1]
c000333a:	83 f8 fd             	cmp    eax,0xfffffffd
c000333d:	0f 87 6f 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	b9 01 00 00 00       	mov    ecx,0x1
c000334b:	6a 01                	push   0x1
c000334d:	89 da                	mov    edx,ebx
c000334f:	89 f0                	mov    eax,esi
c0003351:	e8 bf f9 ff ff       	call   c0002d15 <change_bitmap>
c0003356:	83 c4 10             	add    esp,0x10
c0003359:	83 f8 02             	cmp    eax,0x2
c000335c:	74 90                	je     c00032ee <create_chain+0x31>
c000335e:	83 f8 01             	cmp    eax,0x1
c0003361:	0f 84 fc 00 00 00    	je     c0003463 <create_chain+0x1a6>
c0003367:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336c:	75 09                	jne    c0003377 <create_chain+0xba>
c000336e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003372:	e9 0c 01 00 00       	jmp    c0003483 <create_chain+0x1c6>
c0003377:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337b:	0f 85 e7 00 00 00    	jne    c0003468 <create_chain+0x1ab>
c0003381:	8d 57 01             	lea    edx,[edi+0x1]
c0003384:	39 da                	cmp    edx,ebx
c0003386:	0f 84 f7 00 00 00    	je     c0003483 <create_chain+0x1c6>
c000338c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000338f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003393:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003396:	e9 cd 00 00 00       	jmp    c0003468 <create_chain+0x1ab>
c000339b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000339f:	75 41                	jne    c00033e2 <create_chain+0x125>
c00033a1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a7:	77 05                	ja     c00033ae <create_chain+0xf1>
c00033a9:	bb 02 00 00 00       	mov    ebx,0x2
c00033ae:	89 da                	mov    edx,ebx
c00033b0:	89 e8                	mov    eax,ebp
c00033b2:	e8 18 fc ff ff       	call   c0002fcf <get_fat>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 2e ff ff ff    	je     c00032ee <create_chain+0x31>
c00033c0:	83 f8 ff             	cmp    eax,0xffffffff
c00033c3:	0f 84 9a 00 00 00    	je     c0003463 <create_chain+0x1a6>
c00033c9:	85 c0                	test   eax,eax
c00033cb:	74 11                	je     c00033de <create_chain+0x121>
c00033cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d0:	83 f8 01             	cmp    eax,0x1
c00033d3:	76 0d                	jbe    c00033e2 <create_chain+0x125>
c00033d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d8:	76 08                	jbe    c00033e2 <create_chain+0x125>
c00033da:	89 c7                	mov    edi,eax
c00033dc:	eb 04                	jmp    c00033e2 <create_chain+0x125>
c00033de:	85 db                	test   ebx,ebx
c00033e0:	75 38                	jne    c000341a <create_chain+0x15d>
c00033e2:	89 fb                	mov    ebx,edi
c00033e4:	43                   	inc    ebx
c00033e5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e8:	77 0e                	ja     c00033f8 <create_chain+0x13b>
c00033ea:	83 ff 01             	cmp    edi,0x1
c00033ed:	0f 86 28 ff ff ff    	jbe    c000331b <create_chain+0x5e>
c00033f3:	bb 02 00 00 00       	mov    ebx,0x2
c00033f8:	89 da                	mov    edx,ebx
c00033fa:	89 e8                	mov    eax,ebp
c00033fc:	e8 ce fb ff ff       	call   c0002fcf <get_fat>
c0003401:	85 c0                	test   eax,eax
c0003403:	74 15                	je     c000341a <create_chain+0x15d>
c0003405:	83 f8 01             	cmp    eax,0x1
c0003408:	0f 84 e0 fe ff ff    	je     c00032ee <create_chain+0x31>
c000340e:	40                   	inc    eax
c000340f:	74 52                	je     c0003463 <create_chain+0x1a6>
c0003411:	39 fb                	cmp    ebx,edi
c0003413:	75 cf                	jne    c00033e4 <create_chain+0x127>
c0003415:	e9 01 ff ff ff       	jmp    c000331b <create_chain+0x5e>
c000341a:	83 c9 ff             	or     ecx,0xffffffff
c000341d:	89 da                	mov    edx,ebx
c000341f:	89 f0                	mov    eax,esi
c0003421:	e8 a4 f9 ff ff       	call   c0002dca <put_fat>
c0003426:	85 c0                	test   eax,eax
c0003428:	75 32                	jne    c000345c <create_chain+0x19f>
c000342a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000342f:	74 11                	je     c0003442 <create_chain+0x185>
c0003431:	89 d9                	mov    ecx,ebx
c0003433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003437:	89 f0                	mov    eax,esi
c0003439:	e8 8c f9 ff ff       	call   c0002dca <put_fat>
c000343e:	85 c0                	test   eax,eax
c0003440:	75 1a                	jne    c000345c <create_chain+0x19f>
c0003442:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003445:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003448:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000344e:	39 d0                	cmp    eax,edx
c0003450:	77 04                	ja     c0003456 <create_chain+0x199>
c0003452:	48                   	dec    eax
c0003453:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003456:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345a:	eb 56                	jmp    c00034b2 <create_chain+0x1f5>
c000345c:	48                   	dec    eax
c000345d:	0f 85 8b fe ff ff    	jne    c00032ee <create_chain+0x31>
c0003463:	83 cb ff             	or     ebx,0xffffffff
c0003466:	eb 4a                	jmp    c00034b2 <create_chain+0x1f5>
c0003468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000346f:	41                   	inc    ecx
c0003470:	39 d9                	cmp    ecx,ebx
c0003472:	75 19                	jne    c000348d <create_chain+0x1d0>
c0003474:	b9 02 00 00 00       	mov    ecx,0x2
c0003479:	85 d2                	test   edx,edx
c000347b:	74 03                	je     c0003480 <create_chain+0x1c3>
c000347d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003480:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003483:	85 c0                	test   eax,eax
c0003485:	0f 85 63 fe ff ff    	jne    c00032ee <create_chain+0x31>
c000348b:	eb b5                	jmp    c0003442 <create_chain+0x185>
c000348d:	85 d2                	test   edx,edx
c000348f:	75 07                	jne    c0003498 <create_chain+0x1db>
c0003491:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000349e:	89 e8                	mov    eax,ebp
c00034a0:	e8 bb fa ff ff       	call   c0002f60 <fill_last_frag>
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 b3                	jne    c000345c <create_chain+0x19f>
c00034a9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b0:	eb 90                	jmp    c0003442 <create_chain+0x185>
c00034b2:	83 c4 1c             	add    esp,0x1c
c00034b5:	89 d8                	mov    eax,ebx
c00034b7:	5b                   	pop    ebx
c00034b8:	5e                   	pop    esi
c00034b9:	5f                   	pop    edi
c00034ba:	5d                   	pop    ebp
c00034bb:	c3                   	ret    

c00034bc <remove_chain>:
c00034bc:	55                   	push   ebp
c00034bd:	57                   	push   edi
c00034be:	56                   	push   esi
c00034bf:	53                   	push   ebx
c00034c0:	83 ec 1c             	sub    esp,0x1c
c00034c3:	83 fa 01             	cmp    edx,0x1
c00034c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ca:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034cc:	77 0a                	ja     c00034d8 <remove_chain+0x1c>
c00034ce:	b8 02 00 00 00       	mov    eax,0x2
c00034d3:	e9 24 01 00 00       	jmp    c00035fc <remove_chain+0x140>
c00034d8:	89 d6                	mov    esi,edx
c00034da:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034dd:	76 ef                	jbe    c00034ce <remove_chain+0x12>
c00034df:	89 c7                	mov    edi,eax
c00034e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e6:	75 06                	jne    c00034ee <remove_chain+0x32>
c00034e8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ec:	eb 54                	jmp    c0003542 <remove_chain+0x86>
c00034ee:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f1:	75 06                	jne    c00034f9 <remove_chain+0x3d>
c00034f3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f7:	74 ef                	je     c00034e8 <remove_chain+0x2c>
c00034f9:	83 c9 ff             	or     ecx,0xffffffff
c00034fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003500:	89 d8                	mov    eax,ebx
c0003502:	e8 c3 f8 ff ff       	call   c0002dca <put_fat>
c0003507:	85 c0                	test   eax,eax
c0003509:	74 dd                	je     c00034e8 <remove_chain+0x2c>
c000350b:	e9 ec 00 00 00       	jmp    c00035fc <remove_chain+0x140>
c0003510:	83 f8 01             	cmp    eax,0x1
c0003513:	74 b9                	je     c00034ce <remove_chain+0x12>
c0003515:	83 f8 ff             	cmp    eax,0xffffffff
c0003518:	74 6d                	je     c0003587 <remove_chain+0xcb>
c000351a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351d:	75 6f                	jne    c000358e <remove_chain+0xd2>
c000351f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003522:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003525:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003528:	39 d0                	cmp    eax,edx
c000352a:	73 08                	jae    c0003534 <remove_chain+0x78>
c000352c:	40                   	inc    eax
c000352d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003531:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003534:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003537:	39 e9                	cmp    ecx,ebp
c0003539:	75 64                	jne    c000359f <remove_chain+0xe3>
c000353b:	89 ee                	mov    esi,ebp
c000353d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003540:	76 0f                	jbe    c0003551 <remove_chain+0x95>
c0003542:	89 f2                	mov    edx,esi
c0003544:	89 f8                	mov    eax,edi
c0003546:	e8 84 fa ff ff       	call   c0002fcf <get_fat>
c000354b:	89 c5                	mov    ebp,eax
c000354d:	85 c0                	test   eax,eax
c000354f:	75 bf                	jne    c0003510 <remove_chain+0x54>
c0003551:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003554:	0f 85 a0 00 00 00    	jne    c00035fa <remove_chain+0x13e>
c000355a:	eb 6c                	jmp    c00035c8 <remove_chain+0x10c>
c000355c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000355f:	84 c0                	test   al,al
c0003561:	75 7d                	jne    c00035e0 <remove_chain+0x124>
c0003563:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003566:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356a:	0f 84 86 00 00 00    	je     c00035f6 <remove_chain+0x13a>
c0003570:	89 da                	mov    edx,ebx
c0003572:	89 f8                	mov    eax,edi
c0003574:	e8 56 fa ff ff       	call   c0002fcf <get_fat>
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	0f 86 4c ff ff ff    	jbe    c00034ce <remove_chain+0x12>
c0003582:	83 f8 ff             	cmp    eax,0xffffffff
c0003585:	75 4e                	jne    c00035d5 <remove_chain+0x119>
c0003587:	b8 01 00 00 00       	mov    eax,0x1
c000358c:	eb 6e                	jmp    c00035fc <remove_chain+0x140>
c000358e:	31 c9                	xor    ecx,ecx
c0003590:	89 f2                	mov    edx,esi
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 31 f8 ff ff       	call   c0002dca <put_fat>
c0003599:	85 c0                	test   eax,eax
c000359b:	74 82                	je     c000351f <remove_chain+0x63>
c000359d:	eb 5d                	jmp    c00035fc <remove_chain+0x140>
c000359f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a2:	75 1b                	jne    c00035bf <remove_chain+0x103>
c00035a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	83 ec 0c             	sub    esp,0xc
c00035ad:	6a 00                	push   0x0
c00035af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b3:	e8 5d f7 ff ff       	call   c0002d15 <change_bitmap>
c00035b8:	83 c4 10             	add    esp,0x10
c00035bb:	85 c0                	test   eax,eax
c00035bd:	75 3d                	jne    c00035fc <remove_chain+0x140>
c00035bf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c3:	e9 73 ff ff ff       	jmp    c000353b <remove_chain+0x7f>
c00035c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cd:	75 8d                	jne    c000355c <remove_chain+0xa0>
c00035cf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d3:	eb 25                	jmp    c00035fa <remove_chain+0x13e>
c00035d5:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d8:	89 c3                	mov    ebx,eax
c00035da:	39 c2                	cmp    edx,eax
c00035dc:	74 88                	je     c0003566 <remove_chain+0xaa>
c00035de:	eb 1a                	jmp    c00035fa <remove_chain+0x13e>
c00035e0:	3c 03                	cmp    al,0x3
c00035e2:	75 16                	jne    c00035fa <remove_chain+0x13e>
c00035e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035eb:	77 0d                	ja     c00035fa <remove_chain+0x13e>
c00035ed:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f4:	72 04                	jb     c00035fa <remove_chain+0x13e>
c00035f6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fa:	31 c0                	xor    eax,eax
c00035fc:	83 c4 1c             	add    esp,0x1c
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_clear>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	56                   	push   esi
c0003607:	89 c6                	mov    esi,eax
c0003609:	53                   	push   ebx
c000360a:	83 ec 1c             	sub    esp,0x1c
c000360d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003611:	e8 9d ed ff ff       	call   c00023b3 <sync_window>
c0003616:	85 c0                	test   eax,eax
c0003618:	0f 85 de 00 00 00    	jne    c00036fc <dir_clear+0xf8>
c000361e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003622:	89 f0                	mov    eax,esi
c0003624:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003627:	e8 d6 e8 ff ff       	call   c0001f02 <clst2sect>
c000362c:	b9 00 02 00 00       	mov    ecx,0x200
c0003631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003639:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000363f:	89 e8                	mov    eax,ebp
c0003641:	31 d2                	xor    edx,edx
c0003643:	e8 b5 e6 ff ff       	call   c0001cfd <mem_set>
c0003648:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364c:	c1 e3 09             	shl    ebx,0x9
c000364f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003655:	76 1f                	jbe    c0003676 <dir_clear+0x72>
c0003657:	bb 00 80 00 00       	mov    ebx,0x8000
c000365c:	eb 18                	jmp    c0003676 <dir_clear+0x72>
c000365e:	83 ec 0c             	sub    esp,0xc
c0003661:	53                   	push   ebx
c0003662:	e8 35 4e 00 00       	call   c000849c <ff_memalloc>
c0003667:	83 c4 10             	add    esp,0x10
c000366a:	89 c7                	mov    edi,eax
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 8f 00 00 00    	jne    c0003703 <dir_clear+0xff>
c0003674:	d1 eb                	shr    ebx,1
c0003676:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367c:	77 e0                	ja     c000365e <dir_clear+0x5a>
c000367e:	31 db                	xor    ebx,ebx
c0003680:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003684:	39 d8                	cmp    eax,ebx
c0003686:	76 66                	jbe    c00036ee <dir_clear+0xea>
c0003688:	83 ec 0c             	sub    esp,0xc
c000368b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000368f:	6a 01                	push   0x1
c0003691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003699:	55                   	push   ebp
c000369a:	50                   	push   eax
c000369b:	e8 94 e5 ff ff       	call   c0001c34 <disk_write>
c00036a0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 3d                	jne    c00036ee <dir_clear+0xea>
c00036b1:	43                   	inc    ebx
c00036b2:	eb cc                	jmp    c0003680 <dir_clear+0x7c>
c00036b4:	83 ec 0c             	sub    esp,0xc
c00036b7:	31 d2                	xor    edx,edx
c00036b9:	55                   	push   ebp
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c4:	52                   	push   edx
c00036c5:	50                   	push   eax
c00036c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ca:	57                   	push   edi
c00036cb:	50                   	push   eax
c00036cc:	e8 63 e5 ff ff       	call   c0001c34 <disk_write>
c00036d1:	83 c4 20             	add    esp,0x20
c00036d4:	85 c0                	test   eax,eax
c00036d6:	75 0a                	jne    c00036e2 <dir_clear+0xde>
c00036d8:	01 eb                	add    ebx,ebp
c00036da:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036de:	39 d8                	cmp    eax,ebx
c00036e0:	77 d2                	ja     c00036b4 <dir_clear+0xb0>
c00036e2:	83 ec 0c             	sub    esp,0xc
c00036e5:	57                   	push   edi
c00036e6:	e8 c7 4d 00 00       	call   c00084b2 <ff_memfree>
c00036eb:	83 c4 10             	add    esp,0x10
c00036ee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f2:	39 d8                	cmp    eax,ebx
c00036f4:	0f 95 c0             	setne  al
c00036f7:	0f b6 c0             	movzx  eax,al
c00036fa:	eb 19                	jmp    c0003715 <dir_clear+0x111>
c00036fc:	b8 01 00 00 00       	mov    eax,0x1
c0003701:	eb 12                	jmp    c0003715 <dir_clear+0x111>
c0003703:	89 d9                	mov    ecx,ebx
c0003705:	31 d2                	xor    edx,edx
c0003707:	c1 eb 09             	shr    ebx,0x9
c000370a:	e8 ee e5 ff ff       	call   c0001cfd <mem_set>
c000370f:	89 dd                	mov    ebp,ebx
c0003711:	31 db                	xor    ebx,ebx
c0003713:	eb c5                	jmp    c00036da <dir_clear+0xd6>
c0003715:	83 c4 1c             	add    esp,0x1c
c0003718:	5b                   	pop    ebx
c0003719:	5e                   	pop    esi
c000371a:	5f                   	pop    edi
c000371b:	5d                   	pop    ebp
c000371c:	c3                   	ret    

c000371d <dir_next>:
c000371d:	55                   	push   ebp
c000371e:	57                   	push   edi
c000371f:	56                   	push   esi
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 1c             	sub    esp,0x1c
c0003726:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000372f:	8d 78 20             	lea    edi,[eax+0x20]
c0003732:	31 c0                	xor    eax,eax
c0003734:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003738:	0f 94 c0             	sete   al
c000373b:	48                   	dec    eax
c000373c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003741:	05 00 00 00 10       	add    eax,0x10000000
c0003746:	39 f8                	cmp    eax,edi
c0003748:	77 0e                	ja     c0003758 <dir_next+0x3b>
c000374a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003751:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003758:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000375e:	b8 04 00 00 00       	mov    eax,0x4
c0003763:	89 ce                	mov    esi,ecx
c0003765:	09 d6                	or     esi,edx
c0003767:	0f 84 da 00 00 00    	je     c0003847 <dir_next+0x12a>
c000376d:	89 f8                	mov    eax,edi
c000376f:	25 ff 01 00 00       	and    eax,0x1ff
c0003774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003778:	0f 85 b9 00 00 00    	jne    c0003837 <dir_next+0x11a>
c000377e:	83 c2 01             	add    edx,0x1
c0003781:	83 d1 00             	adc    ecx,0x0
c0003784:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378d:	85 d2                	test   edx,edx
c000378f:	75 29                	jne    c00037ba <dir_next+0x9d>
c0003791:	89 fa                	mov    edx,edi
c0003793:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003797:	c1 ea 05             	shr    edx,0x5
c000379a:	39 c2                	cmp    edx,eax
c000379c:	0f 82 95 00 00 00    	jb     c0003837 <dir_next+0x11a>
c00037a2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b0:	b8 04 00 00 00       	mov    eax,0x4
c00037b5:	e9 8d 00 00 00       	jmp    c0003847 <dir_next+0x12a>
c00037ba:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037be:	89 f9                	mov    ecx,edi
c00037c0:	48                   	dec    eax
c00037c1:	c1 e9 09             	shr    ecx,0x9
c00037c4:	85 c8                	test   eax,ecx
c00037c6:	75 6f                	jne    c0003837 <dir_next+0x11a>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	e8 00 f8 ff ff       	call   c0002fcf <get_fat>
c00037cf:	89 c6                	mov    esi,eax
c00037d1:	83 f8 01             	cmp    eax,0x1
c00037d4:	77 07                	ja     c00037dd <dir_next+0xc0>
c00037d6:	b8 02 00 00 00       	mov    eax,0x2
c00037db:	eb 6a                	jmp    c0003847 <dir_next+0x12a>
c00037dd:	83 f8 ff             	cmp    eax,0xffffffff
c00037e0:	75 07                	jne    c00037e9 <dir_next+0xcc>
c00037e2:	b8 01 00 00 00       	mov    eax,0x1
c00037e7:	eb 5e                	jmp    c0003847 <dir_next+0x12a>
c00037e9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ec:	77 37                	ja     c0003825 <dir_next+0x108>
c00037ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f3:	74 ad                	je     c00037a2 <dir_next+0x85>
c00037f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f8:	89 d8                	mov    eax,ebx
c00037fa:	e8 be fa ff ff       	call   c00032bd <create_chain>
c00037ff:	89 c6                	mov    esi,eax
c0003801:	b8 07 00 00 00       	mov    eax,0x7
c0003806:	85 f6                	test   esi,esi
c0003808:	74 3d                	je     c0003847 <dir_next+0x12a>
c000380a:	83 fe 01             	cmp    esi,0x1
c000380d:	74 c7                	je     c00037d6 <dir_next+0xb9>
c000380f:	83 fe ff             	cmp    esi,0xffffffff
c0003812:	74 ce                	je     c00037e2 <dir_next+0xc5>
c0003814:	89 f2                	mov    edx,esi
c0003816:	89 e8                	mov    eax,ebp
c0003818:	e8 e7 fd ff ff       	call   c0003604 <dir_clear>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 c1                	jne    c00037e2 <dir_next+0xc5>
c0003821:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003825:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003828:	89 f2                	mov    edx,esi
c000382a:	89 e8                	mov    eax,ebp
c000382c:	e8 d1 e6 ff ff       	call   c0001f02 <clst2sect>
c0003831:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003834:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000383e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003842:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003845:	31 c0                	xor    eax,eax
c0003847:	83 c4 1c             	add    esp,0x1c
c000384a:	5b                   	pop    ebx
c000384b:	5e                   	pop    esi
c000384c:	5f                   	pop    edi
c000384d:	5d                   	pop    ebp
c000384e:	c3                   	ret    

c000384f <load_xdir>:
c000384f:	55                   	push   ebp
c0003850:	57                   	push   edi
c0003851:	56                   	push   esi
c0003852:	89 c6                	mov    esi,eax
c0003854:	53                   	push   ebx
c0003855:	83 ec 1c             	sub    esp,0x1c
c0003858:	8b 00                	mov    eax,DWORD PTR [eax]
c000385a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003863:	e8 df eb ff ff       	call   c0002447 <move_window>
c0003868:	89 c3                	mov    ebx,eax
c000386a:	85 c0                	test   eax,eax
c000386c:	0f 85 0c 01 00 00    	jne    c000397e <load_xdir+0x12f>
c0003872:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003875:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003878:	0f 85 fb 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c000387e:	89 f8                	mov    eax,edi
c0003880:	b9 20 00 00 00       	mov    ecx,0x20
c0003885:	e8 5e e4 ff ff       	call   c0001ce8 <mem_cpy>
c000388a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000388e:	40                   	inc    eax
c000388f:	c1 e0 05             	shl    eax,0x5
c0003892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003896:	83 e8 60             	sub    eax,0x60
c0003899:	3d 00 02 00 00       	cmp    eax,0x200
c000389e:	0f 87 d5 00 00 00    	ja     c0003979 <load_xdir+0x12a>
c00038a4:	31 d2                	xor    edx,edx
c00038a6:	89 f0                	mov    eax,esi
c00038a8:	e8 70 fe ff ff       	call   c000371d <dir_next>
c00038ad:	89 c3                	mov    ebx,eax
c00038af:	83 f8 04             	cmp    eax,0x4
c00038b2:	0f 84 c1 00 00 00    	je     c0003979 <load_xdir+0x12a>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 85 be 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038c0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c8:	e8 7a eb ff ff       	call   c0002447 <move_window>
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	85 c0                	test   eax,eax
c00038d1:	0f 85 a7 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038d7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038da:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038dd:	0f 85 96 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c00038e3:	8d 47 20             	lea    eax,[edi+0x20]
c00038e6:	b9 20 00 00 00       	mov    ecx,0x20
c00038eb:	e8 f8 e3 ff ff       	call   c0001ce8 <mem_cpy>
c00038f0:	31 d2                	xor    edx,edx
c00038f2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fb:	83 c0 2c             	add    eax,0x2c
c00038fe:	f7 f1                	div    ecx
c0003900:	c1 e0 05             	shl    eax,0x5
c0003903:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003907:	77 70                	ja     c0003979 <load_xdir+0x12a>
c0003909:	bd 40 00 00 00       	mov    ebp,0x40
c000390e:	31 d2                	xor    edx,edx
c0003910:	89 f0                	mov    eax,esi
c0003912:	e8 06 fe ff ff       	call   c000371d <dir_next>
c0003917:	89 c3                	mov    ebx,eax
c0003919:	83 f8 04             	cmp    eax,0x4
c000391c:	74 5b                	je     c0003979 <load_xdir+0x12a>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 5c                	jne    c000397e <load_xdir+0x12f>
c0003922:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003925:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003928:	8b 06                	mov    eax,DWORD PTR [esi]
c000392a:	e8 18 eb ff ff       	call   c0002447 <move_window>
c000392f:	89 c3                	mov    ebx,eax
c0003931:	85 c0                	test   eax,eax
c0003933:	75 49                	jne    c000397e <load_xdir+0x12f>
c0003935:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003938:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393b:	75 3c                	jne    c0003979 <load_xdir+0x12a>
c000393d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003943:	77 0d                	ja     c0003952 <load_xdir+0x103>
c0003945:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003948:	b9 20 00 00 00       	mov    ecx,0x20
c000394d:	e8 96 e3 ff ff       	call   c0001ce8 <mem_cpy>
c0003952:	83 c5 20             	add    ebp,0x20
c0003955:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003959:	77 b3                	ja     c000390e <load_xdir+0xbf>
c000395b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003961:	77 1b                	ja     c000397e <load_xdir+0x12f>
c0003963:	89 f8                	mov    eax,edi
c0003965:	e8 cd e7 ff ff       	call   c0002137 <xdir_sum>
c000396a:	89 c1                	mov    ecx,eax
c000396c:	8d 47 02             	lea    eax,[edi+0x2]
c000396f:	e8 f5 e2 ff ff       	call   c0001c69 <ld_word>
c0003974:	66 39 c1             	cmp    cx,ax
c0003977:	74 05                	je     c000397e <load_xdir+0x12f>
c0003979:	bb 02 00 00 00       	mov    ebx,0x2
c000397e:	83 c4 1c             	add    esp,0x1c
c0003981:	89 d8                	mov    eax,ebx
c0003983:	5b                   	pop    ebx
c0003984:	5e                   	pop    esi
c0003985:	5f                   	pop    edi
c0003986:	5d                   	pop    ebp
c0003987:	c3                   	ret    

c0003988 <load_obj_xdir>:
c0003988:	53                   	push   ebx
c0003989:	89 c3                	mov    ebx,eax
c000398b:	83 ec 08             	sub    esp,0x8
c000398e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003990:	89 03                	mov    DWORD PTR [ebx],eax
c0003992:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003995:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003998:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000399e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a8:	30 c0                	xor    al,al
c00039aa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b4:	89 d8                	mov    eax,ebx
c00039b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039bc:	e8 04 f8 ff ff       	call   c00031c5 <dir_sdi>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	75 0b                	jne    c00039d0 <load_obj_xdir+0x48>
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	83 c4 08             	add    esp,0x8
c00039ca:	5b                   	pop    ebx
c00039cb:	e9 7f fe ff ff       	jmp    c000384f <load_xdir>
c00039d0:	83 c4 08             	add    esp,0x8
c00039d3:	5b                   	pop    ebx
c00039d4:	c3                   	ret    

c00039d5 <dir_read>:
c00039d5:	55                   	push   ebp
c00039d6:	bd 04 00 00 00       	mov    ebp,0x4
c00039db:	57                   	push   edi
c00039dc:	56                   	push   esi
c00039dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e2:	53                   	push   ebx
c00039e3:	89 c3                	mov    ebx,eax
c00039e5:	83 ec 1c             	sub    esp,0x1c
c00039e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ec:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ee:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f9:	89 c8                	mov    eax,ecx
c00039fb:	09 d0                	or     eax,edx
c00039fd:	0f 84 25 01 00 00    	je     c0003b28 <dir_read+0x153>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 3d ea ff ff       	call   c0002447 <move_window>
c0003a0a:	89 c5                	mov    ebp,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 23 01 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a14:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a17:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a19:	84 c9                	test   cl,cl
c0003a1b:	0f 84 11 01 00 00    	je     c0003b32 <dir_read+0x15d>
c0003a21:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a24:	75 48                	jne    c0003a6e <dir_read+0x99>
c0003a26:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2b:	74 10                	je     c0003a3d <dir_read+0x68>
c0003a2d:	80 f9 83             	cmp    cl,0x83
c0003a30:	0f 85 dd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a36:	31 ed                	xor    ebp,ebp
c0003a38:	e9 08 01 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a3d:	80 f9 85             	cmp    cl,0x85
c0003a40:	0f 85 cd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a49:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4c:	89 d8                	mov    eax,ebx
c0003a4e:	e8 fc fd ff ff       	call   c000384f <load_xdir>
c0003a53:	89 c5                	mov    ebp,eax
c0003a55:	85 c0                	test   eax,eax
c0003a57:	0f 85 da 00 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a60:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a63:	83 e0 3f             	and    eax,0x3f
c0003a66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a69:	e9 d7 00 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a6e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a71:	83 e0 3f             	and    eax,0x3f
c0003a74:	80 f9 2e             	cmp    cl,0x2e
c0003a77:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	0f 84 8a 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a84:	80 f9 e5             	cmp    cl,0xe5
c0003a87:	0f 84 81 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a91:	83 e0 1f             	and    eax,0x1f
c0003a94:	83 f8 08             	cmp    eax,0x8
c0003a97:	0f 94 c0             	sete   al
c0003a9a:	0f b6 c0             	movzx  eax,al
c0003a9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa1:	75 6b                	jne    c0003b0e <dir_read+0x139>
c0003aa3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa8:	75 44                	jne    c0003aee <dir_read+0x119>
c0003aaa:	f6 c1 40             	test   cl,0x40
c0003aad:	74 12                	je     c0003ac1 <dir_read+0xec>
c0003aaf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab2:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003abf:	eb 06                	jmp    c0003ac7 <dir_read+0xf2>
c0003ac1:	89 f0                	mov    eax,esi
c0003ac3:	38 c8                	cmp    al,cl
c0003ac5:	75 47                	jne    c0003b0e <dir_read+0x139>
c0003ac7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acb:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad3:	75 3e                	jne    c0003b13 <dir_read+0x13e>
c0003ad5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003adc:	e8 8a e4 ff ff       	call   c0001f6b <pick_lfn>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 2e                	je     c0003b13 <dir_read+0x13e>
c0003ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae9:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aec:	eb 25                	jmp    c0003b13 <dir_read+0x13e>
c0003aee:	89 f0                	mov    eax,esi
c0003af0:	84 c0                	test   al,al
c0003af2:	75 11                	jne    c0003b05 <dir_read+0x130>
c0003af4:	89 d0                	mov    eax,edx
c0003af6:	e8 2a e6 ff ff       	call   c0002125 <sum_sfn>
c0003afb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003aff:	0f 84 31 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b05:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0c:	eb 37                	jmp    c0003b45 <dir_read+0x170>
c0003b0e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b13:	31 d2                	xor    edx,edx
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 01 fc ff ff       	call   c000371d <dir_next>
c0003b1c:	89 c5                	mov    ebp,eax
c0003b1e:	85 c0                	test   eax,eax
c0003b20:	0f 84 cd fe ff ff    	je     c00039f3 <dir_read+0x1e>
c0003b26:	eb 0f                	jmp    c0003b37 <dir_read+0x162>
c0003b28:	85 ed                	test   ebp,ebp
c0003b2a:	0f 84 06 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b30:	eb 05                	jmp    c0003b37 <dir_read+0x162>
c0003b32:	bd 04 00 00 00       	mov    ebp,0x4
c0003b37:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b3e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b45:	83 c4 1c             	add    esp,0x1c
c0003b48:	89 e8                	mov    eax,ebp
c0003b4a:	5b                   	pop    ebx
c0003b4b:	5e                   	pop    esi
c0003b4c:	5f                   	pop    edi
c0003b4d:	5d                   	pop    ebp
c0003b4e:	c3                   	ret    

c0003b4f <dir_alloc>:
c0003b4f:	55                   	push   ebp
c0003b50:	89 d5                	mov    ebp,edx
c0003b52:	57                   	push   edi
c0003b53:	31 d2                	xor    edx,edx
c0003b55:	56                   	push   esi
c0003b56:	53                   	push   ebx
c0003b57:	89 c3                	mov    ebx,eax
c0003b59:	83 ec 0c             	sub    esp,0xc
c0003b5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b5e:	e8 62 f6 ff ff       	call   c00031c5 <dir_sdi>
c0003b63:	85 c0                	test   eax,eax
c0003b65:	75 4e                	jne    c0003bb5 <dir_alloc+0x66>
c0003b67:	31 f6                	xor    esi,esi
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f8                	mov    eax,edi
c0003b71:	e8 d1 e8 ff ff       	call   c0002447 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 3b                	jne    c0003bb5 <dir_alloc+0x66>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b80:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b82:	75 07                	jne    c0003b8b <dir_alloc+0x3c>
c0003b84:	f7 d2                	not    edx
c0003b86:	c0 ea 07             	shr    dl,0x7
c0003b89:	eb 0d                	jmp    c0003b98 <dir_alloc+0x49>
c0003b8b:	84 d2                	test   dl,dl
c0003b8d:	0f 94 c1             	sete   cl
c0003b90:	80 fa e5             	cmp    dl,0xe5
c0003b93:	0f 94 c2             	sete   dl
c0003b96:	09 ca                	or     edx,ecx
c0003b98:	84 d2                	test   dl,dl
c0003b9a:	74 07                	je     c0003ba3 <dir_alloc+0x54>
c0003b9c:	46                   	inc    esi
c0003b9d:	39 ee                	cmp    esi,ebp
c0003b9f:	75 04                	jne    c0003ba5 <dir_alloc+0x56>
c0003ba1:	eb 1c                	jmp    c0003bbf <dir_alloc+0x70>
c0003ba3:	31 f6                	xor    esi,esi
c0003ba5:	ba 01 00 00 00       	mov    edx,0x1
c0003baa:	89 d8                	mov    eax,ebx
c0003bac:	e8 6c fb ff ff       	call   c000371d <dir_next>
c0003bb1:	85 c0                	test   eax,eax
c0003bb3:	74 b4                	je     c0003b69 <dir_alloc+0x1a>
c0003bb5:	83 f8 04             	cmp    eax,0x4
c0003bb8:	75 05                	jne    c0003bbf <dir_alloc+0x70>
c0003bba:	b8 07 00 00 00       	mov    eax,0x7
c0003bbf:	83 c4 0c             	add    esp,0xc
c0003bc2:	5b                   	pop    ebx
c0003bc3:	5e                   	pop    esi
c0003bc4:	5f                   	pop    edi
c0003bc5:	5d                   	pop    ebp
c0003bc6:	c3                   	ret    

c0003bc7 <store_xdir>:
c0003bc7:	55                   	push   ebp
c0003bc8:	57                   	push   edi
c0003bc9:	89 c7                	mov    edi,eax
c0003bcb:	56                   	push   esi
c0003bcc:	53                   	push   ebx
c0003bcd:	83 ec 0c             	sub    esp,0xc
c0003bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd5:	89 e8                	mov    eax,ebp
c0003bd7:	e8 5b e5 ff ff       	call   c0002137 <xdir_sum>
c0003bdc:	0f b7 d0             	movzx  edx,ax
c0003bdf:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be2:	e8 f4 e0 ff ff       	call   c0001cdb <st_word>
c0003be7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003beb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bee:	89 f8                	mov    eax,edi
c0003bf0:	e8 d0 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003bf5:	89 c6                	mov    esi,eax
c0003bf7:	85 f6                	test   esi,esi
c0003bf9:	75 3d                	jne    c0003c38 <store_xdir+0x71>
c0003bfb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bfe:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c03:	e8 3f e8 ff ff       	call   c0002447 <move_window>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	75 2a                	jne    c0003c38 <store_xdir+0x71>
c0003c0e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c11:	b9 20 00 00 00       	mov    ecx,0x20
c0003c16:	89 ea                	mov    edx,ebp
c0003c18:	e8 cb e0 ff ff       	call   c0001ce8 <mem_cpy>
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	85 db                	test   ebx,ebx
c0003c21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c25:	74 11                	je     c0003c38 <store_xdir+0x71>
c0003c27:	31 d2                	xor    edx,edx
c0003c29:	89 f8                	mov    eax,edi
c0003c2b:	83 c5 20             	add    ebp,0x20
c0003c2e:	e8 ea fa ff ff       	call   c000371d <dir_next>
c0003c33:	4b                   	dec    ebx
c0003c34:	89 c6                	mov    esi,eax
c0003c36:	eb bf                	jmp    c0003bf7 <store_xdir+0x30>
c0003c38:	89 f0                	mov    eax,esi
c0003c3a:	83 fe 02             	cmp    esi,0x2
c0003c3d:	76 05                	jbe    c0003c44 <store_xdir+0x7d>
c0003c3f:	b8 02 00 00 00       	mov    eax,0x2
c0003c44:	83 c4 0c             	add    esp,0xc
c0003c47:	5b                   	pop    ebx
c0003c48:	5e                   	pop    esi
c0003c49:	5f                   	pop    edi
c0003c4a:	5d                   	pop    ebp
c0003c4b:	c3                   	ret    

c0003c4c <dir_remove>:
c0003c4c:	57                   	push   edi
c0003c4d:	56                   	push   esi
c0003c4e:	53                   	push   ebx
c0003c4f:	89 c3                	mov    ebx,eax
c0003c51:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c54:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c56:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c59:	83 fa ff             	cmp    edx,0xffffffff
c0003c5c:	74 09                	je     c0003c67 <dir_remove+0x1b>
c0003c5e:	e8 62 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003c63:	85 c0                	test   eax,eax
c0003c65:	75 41                	jne    c0003ca8 <dir_remove+0x5c>
c0003c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6d:	89 f0                	mov    eax,esi
c0003c6f:	e8 d3 e7 ff ff       	call   c0002447 <move_window>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	75 26                	jne    c0003c9e <dir_remove+0x52>
c0003c78:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c7e:	75 05                	jne    c0003c85 <dir_remove+0x39>
c0003c80:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c83:	eb 03                	jmp    c0003c88 <dir_remove+0x3c>
c0003c85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c8f:	73 17                	jae    c0003ca8 <dir_remove+0x5c>
c0003c91:	31 d2                	xor    edx,edx
c0003c93:	89 d8                	mov    eax,ebx
c0003c95:	e8 83 fa ff ff       	call   c000371d <dir_next>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	74 c9                	je     c0003c67 <dir_remove+0x1b>
c0003c9e:	83 f8 04             	cmp    eax,0x4
c0003ca1:	75 05                	jne    c0003ca8 <dir_remove+0x5c>
c0003ca3:	b8 02 00 00 00       	mov    eax,0x2
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	c3                   	ret    

c0003cac <create_name>:
c0003cac:	55                   	push   ebp
c0003cad:	89 d5                	mov    ebp,edx
c0003caf:	57                   	push   edi
c0003cb0:	89 c7                	mov    edi,eax
c0003cb2:	56                   	push   esi
c0003cb3:	31 f6                	xor    esi,esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 3c             	sub    esp,0x3c
c0003cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ccc:	e8 72 e0 ff ff       	call   c0001d43 <tchar2uni>
c0003cd1:	89 c3                	mov    ebx,eax
c0003cd3:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd6:	75 0a                	jne    c0003ce2 <create_name+0x36>
c0003cd8:	b8 06 00 00 00       	mov    eax,0x6
c0003cdd:	e9 9e 02 00 00       	jmp    c0003f80 <create_name+0x2d4>
c0003ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce7:	76 0c                	jbe    c0003cf5 <create_name+0x49>
c0003ce9:	c1 e8 10             	shr    eax,0x10
c0003cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf4:	46                   	inc    esi
c0003cf5:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf9:	76 4f                	jbe    c0003d4a <create_name+0x9e>
c0003cfb:	66 83 fb 5c          	cmp    bx,0x5c
c0003cff:	74 35                	je     c0003d36 <create_name+0x8a>
c0003d01:	66 83 fb 2f          	cmp    bx,0x2f
c0003d05:	74 2f                	je     c0003d36 <create_name+0x8a>
c0003d07:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0b:	77 11                	ja     c0003d1e <create_name+0x72>
c0003d0d:	0f b7 d3             	movzx  edx,bx
c0003d10:	b8 52 95 02 c0       	mov    eax,0xc0029552
c0003d15:	e8 11 e0 ff ff       	call   c0001d2b <chk_chr>
c0003d1a:	85 c0                	test   eax,eax
c0003d1c:	75 ba                	jne    c0003cd8 <create_name+0x2c>
c0003d1e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d24:	77 b2                	ja     c0003cd8 <create_name+0x2c>
c0003d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d2e:	46                   	inc    esi
c0003d2f:	eb 97                	jmp    c0003cc8 <create_name+0x1c>
c0003d31:	40                   	inc    eax
c0003d32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3c:	80 fa 2f             	cmp    dl,0x2f
c0003d3f:	74 f0                	je     c0003d31 <create_name+0x85>
c0003d41:	80 fa 5c             	cmp    dl,0x5c
c0003d44:	74 eb                	je     c0003d31 <create_name+0x85>
c0003d46:	31 db                	xor    ebx,ebx
c0003d48:	eb 02                	jmp    c0003d4c <create_name+0xa0>
c0003d4a:	b3 04                	mov    bl,0x4
c0003d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d50:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d53:	85 f6                	test   esi,esi
c0003d55:	74 18                	je     c0003d6f <create_name+0xc3>
c0003d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d60:	66 83 f8 20          	cmp    ax,0x20
c0003d64:	74 06                	je     c0003d6c <create_name+0xc0>
c0003d66:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6a:	75 03                	jne    c0003d6f <create_name+0xc3>
c0003d6c:	4e                   	dec    esi
c0003d6d:	eb e4                	jmp    c0003d53 <create_name+0xa7>
c0003d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d73:	31 ed                	xor    ebp,ebp
c0003d75:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7b:	85 f6                	test   esi,esi
c0003d7d:	0f 84 55 ff ff ff    	je     c0003cd8 <create_name+0x2c>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d8e:	66 83 f8 20          	cmp    ax,0x20
c0003d92:	75 04                	jne    c0003d98 <create_name+0xec>
c0003d94:	89 d5                	mov    ebp,edx
c0003d96:	eb eb                	jmp    c0003d83 <create_name+0xd7>
c0003d98:	85 ed                	test   ebp,ebp
c0003d9a:	75 06                	jne    c0003da2 <create_name+0xf6>
c0003d9c:	66 83 f8 2e          	cmp    ax,0x2e
c0003da0:	75 08                	jne    c0003daa <create_name+0xfe>
c0003da2:	83 cb 03             	or     ebx,0x3
c0003da5:	eb 03                	jmp    c0003daa <create_name+0xfe>
c0003da7:	4e                   	dec    esi
c0003da8:	74 0c                	je     c0003db6 <create_name+0x10a>
c0003daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dae:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db4:	75 f1                	jne    c0003da7 <create_name+0xfb>
c0003db6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dbe:	ba 20 00 00 00       	mov    edx,0x20
c0003dc3:	e8 35 df ff ff       	call   c0001cfd <mem_set>
c0003dc8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd0:	31 c9                	xor    ecx,ecx
c0003dd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de6:	66 85 ed             	test   bp,bp
c0003de9:	0f 84 30 01 00 00    	je     c0003f1f <create_name+0x273>
c0003def:	66 83 fd 20          	cmp    bp,0x20
c0003df3:	74 10                	je     c0003e05 <create_name+0x159>
c0003df5:	66 83 fd 2e          	cmp    bp,0x2e
c0003df9:	75 13                	jne    c0003e0e <create_name+0x162>
c0003dfb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dff:	0f 84 6b 01 00 00    	je     c0003f70 <create_name+0x2c4>
c0003e05:	83 cb 03             	or     ebx,0x3
c0003e08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0c:	eb c9                	jmp    c0003dd7 <create_name+0x12b>
c0003e0e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e12:	73 0b                	jae    c0003e1f <create_name+0x173>
c0003e14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e18:	75 47                	jne    c0003e61 <create_name+0x1b5>
c0003e1a:	e9 51 01 00 00       	jmp    c0003f70 <create_name+0x2c4>
c0003e1f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e24:	75 10                	jne    c0003e36 <create_name+0x18a>
c0003e26:	83 cb 03             	or     ebx,0x3
c0003e29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e31:	e9 e9 00 00 00       	jmp    c0003f1f <create_name+0x273>
c0003e36:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3a:	74 0d                	je     c0003e49 <create_name+0x19d>
c0003e3c:	83 cb 03             	or     ebx,0x3
c0003e3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e43:	0f 87 d6 00 00 00    	ja     c0003f1f <create_name+0x273>
c0003e49:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e52:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5a:	b9 08 00 00 00       	mov    ecx,0x8
c0003e5f:	eb a7                	jmp    c0003e08 <create_name+0x15c>
c0003e61:	66 83 fd 7f          	cmp    bp,0x7f
c0003e65:	76 68                	jbe    c0003ecf <create_name+0x223>
c0003e67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6b:	88 da                	mov    dl,bl
c0003e6d:	83 ca 02             	or     edx,0x2
c0003e70:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e74:	50                   	push   eax
c0003e75:	50                   	push   eax
c0003e76:	68 b5 01 00 00       	push   0x1b5
c0003e7b:	55                   	push   ebp
c0003e7c:	e8 48 46 00 00       	call   c00084c9 <ff_uni2oem>
c0003e81:	83 c4 10             	add    esp,0x10
c0003e84:	89 c5                	mov    ebp,eax
c0003e86:	a8 80                	test   al,0x80
c0003e88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	74 0c                	je     c0003e9e <create_name+0x1f2>
c0003e92:	83 e5 7f             	and    ebp,0x7f
c0003e95:	0f b6 ad a0 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6b60]
c0003e9c:	eb 2a                	jmp    c0003ec8 <create_name+0x21c>
c0003e9e:	66 3d ff 00          	cmp    ax,0xff
c0003ea2:	76 24                	jbe    c0003ec8 <create_name+0x21c>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	48                   	dec    eax
c0003ea9:	39 c8                	cmp    eax,ecx
c0003eab:	77 0c                	ja     c0003eb9 <create_name+0x20d>
c0003ead:	83 cb 03             	or     ebx,0x3
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	e9 4f ff ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003eb9:	89 e8                	mov    eax,ebp
c0003ebb:	88 d3                	mov    bl,dl
c0003ebd:	66 c1 e8 08          	shr    ax,0x8
c0003ec1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec5:	41                   	inc    ecx
c0003ec6:	eb 4b                	jmp    c0003f13 <create_name+0x267>
c0003ec8:	88 d3                	mov    bl,dl
c0003eca:	66 85 ed             	test   bp,bp
c0003ecd:	74 19                	je     c0003ee8 <create_name+0x23c>
c0003ecf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed3:	0f b7 d5             	movzx  edx,bp
c0003ed6:	b8 5b 95 02 c0       	mov    eax,0xc002955b
c0003edb:	e8 4b de ff ff       	call   c0001d2b <chk_chr>
c0003ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee4:	85 c0                	test   eax,eax
c0003ee6:	74 0a                	je     c0003ef2 <create_name+0x246>
c0003ee8:	83 cb 03             	or     ebx,0x3
c0003eeb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef0:	eb 21                	jmp    c0003f13 <create_name+0x267>
c0003ef2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef5:	66 83 f8 19          	cmp    ax,0x19
c0003ef9:	77 07                	ja     c0003f02 <create_name+0x256>
c0003efb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f00:	eb 11                	jmp    c0003f13 <create_name+0x267>
c0003f02:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f05:	66 83 f8 19          	cmp    ax,0x19
c0003f09:	77 08                	ja     c0003f13 <create_name+0x267>
c0003f0b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f10:	83 ed 20             	sub    ebp,0x20
c0003f13:	89 e8                	mov    eax,ebp
c0003f15:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f19:	41                   	inc    ecx
c0003f1a:	e9 e9 fe ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003f1f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f23:	75 04                	jne    c0003f29 <create_name+0x27d>
c0003f25:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f29:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f2e:	75 05                	jne    c0003f35 <create_name+0x289>
c0003f30:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f39:	83 e0 0c             	and    eax,0xc
c0003f3c:	3c 0c                	cmp    al,0xc
c0003f3e:	74 0b                	je     c0003f4b <create_name+0x29f>
c0003f40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f44:	83 e0 03             	and    eax,0x3
c0003f47:	3c 03                	cmp    al,0x3
c0003f49:	75 05                	jne    c0003f50 <create_name+0x2a4>
c0003f4b:	83 cb 02             	or     ebx,0x2
c0003f4e:	eb 19                	jmp    c0003f69 <create_name+0x2bd>
c0003f50:	f6 c3 02             	test   bl,0x2
c0003f53:	75 14                	jne    c0003f69 <create_name+0x2bd>
c0003f55:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5a:	74 03                	je     c0003f5f <create_name+0x2b3>
c0003f5c:	83 cb 10             	or     ebx,0x10
c0003f5f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f64:	74 03                	je     c0003f69 <create_name+0x2bd>
c0003f66:	83 cb 08             	or     ebx,0x8
c0003f69:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6c:	31 c0                	xor    eax,eax
c0003f6e:	eb 10                	jmp    c0003f80 <create_name+0x2d4>
c0003f70:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f75:	0f 85 ce fe ff ff    	jne    c0003e49 <create_name+0x19d>
c0003f7b:	e9 a6 fe ff ff       	jmp    c0003e26 <create_name+0x17a>
c0003f80:	83 c4 3c             	add    esp,0x3c
c0003f83:	5b                   	pop    ebx
c0003f84:	5e                   	pop    esi
c0003f85:	5f                   	pop    edi
c0003f86:	5d                   	pop    ebp
c0003f87:	c3                   	ret    

c0003f88 <xname_sum>:
c0003f88:	56                   	push   esi
c0003f89:	53                   	push   ebx
c0003f8a:	89 c6                	mov    esi,eax
c0003f8c:	51                   	push   ecx
c0003f8d:	31 db                	xor    ebx,ebx
c0003f8f:	83 c6 02             	add    esi,0x2
c0003f92:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f96:	66 85 c0             	test   ax,ax
c0003f99:	74 1f                	je     c0003fba <xname_sum+0x32>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	66 d1 cb             	ror    bx,1
c0003fa1:	50                   	push   eax
c0003fa2:	e8 1e 46 00 00       	call   c00085c5 <ff_wtoupper>
c0003fa7:	83 c4 10             	add    esp,0x10
c0003faa:	0f b6 d0             	movzx  edx,al
c0003fad:	66 c1 e8 08          	shr    ax,0x8
c0003fb1:	01 d3                	add    ebx,edx
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	01 c3                	add    ebx,eax
c0003fb8:	eb d5                	jmp    c0003f8f <xname_sum+0x7>
c0003fba:	89 d8                	mov    eax,ebx
c0003fbc:	5a                   	pop    edx
c0003fbd:	5b                   	pop    ebx
c0003fbe:	5e                   	pop    esi
c0003fbf:	c3                   	ret    

c0003fc0 <create_xdir>:
c0003fc0:	55                   	push   ebp
c0003fc1:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc6:	57                   	push   edi
c0003fc7:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcc:	56                   	push   esi
c0003fcd:	31 ff                	xor    edi,edi
c0003fcf:	53                   	push   ebx
c0003fd0:	be 40 00 00 00       	mov    esi,0x40
c0003fd5:	89 c3                	mov    ebx,eax
c0003fd7:	83 ec 1c             	sub    esp,0x1c
c0003fda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fde:	31 d2                	xor    edx,edx
c0003fe0:	e8 18 dd ff ff       	call   c0001cfd <mem_set>
c0003fe5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fec:	31 c9                	xor    ecx,ecx
c0003fee:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff5:	83 c6 02             	add    esi,0x2
c0003ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffc:	66 85 ed             	test   bp,bp
c0003fff:	74 12                	je     c0004013 <create_xdir+0x53>
c0004001:	0f b6 c1             	movzx  eax,cl
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400c:	66 83 fd 01          	cmp    bp,0x1
c0004010:	80 d9 ff             	sbb    cl,0xff
c0004013:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004016:	0f b7 d5             	movzx  edx,bp
c0004019:	83 c6 02             	add    esi,0x2
c000401c:	e8 ba dc ff ff       	call   c0001cdb <st_word>
c0004021:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004027:	75 d3                	jne    c0003ffc <create_xdir+0x3c>
c0004029:	8d 47 01             	lea    eax,[edi+0x1]
c000402c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004030:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004034:	0f b6 c1             	movzx  eax,cl
c0004037:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403c:	74 07                	je     c0004045 <create_xdir+0x85>
c000403e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004043:	eb a9                	jmp    c0003fee <create_xdir+0x2e>
c0004045:	8d 47 02             	lea    eax,[edi+0x2]
c0004048:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000404e:	89 d0                	mov    eax,edx
c0004050:	e8 33 ff ff ff       	call   c0003f88 <xname_sum>
c0004055:	83 c4 1c             	add    esp,0x1c
c0004058:	0f b7 d0             	movzx  edx,ax
c000405b:	8d 43 24             	lea    eax,[ebx+0x24]
c000405e:	5b                   	pop    ebx
c000405f:	5e                   	pop    esi
c0004060:	5f                   	pop    edi
c0004061:	5d                   	pop    ebp
c0004062:	e9 74 dc ff ff       	jmp    c0001cdb <st_word>

c0004067 <cmp_lfn>:
c0004067:	55                   	push   ebp
c0004068:	57                   	push   edi
c0004069:	89 d7                	mov    edi,edx
c000406b:	56                   	push   esi
c000406c:	53                   	push   ebx
c000406d:	83 ec 1c             	sub    esp,0x1c
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004077:	e8 ed db ff ff       	call   c0001c69 <ld_word>
c000407c:	66 85 c0             	test   ax,ax
c000407f:	74 07                	je     c0004088 <cmp_lfn+0x21>
c0004081:	31 c0                	xor    eax,eax
c0004083:	e9 9a 00 00 00       	jmp    c0004122 <cmp_lfn+0xbb>
c0004088:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408a:	bd 01 00 00 00       	mov    ebp,0x1
c000408f:	83 e3 3f             	and    ebx,0x3f
c0004092:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409a:	4b                   	dec    ebx
c000409b:	6b db 0d             	imul   ebx,ebx,0xd
c000409e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a2:	0f b6 80 20 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ae0]
c00040a9:	01 f8                	add    eax,edi
c00040ab:	e8 b9 db ff ff       	call   c0001c69 <ld_word>
c00040b0:	66 85 ed             	test   bp,bp
c00040b3:	89 c6                	mov    esi,eax
c00040b5:	74 3c                	je     c00040f3 <cmp_lfn+0x8c>
c00040b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bd:	77 c2                	ja     c0004081 <cmp_lfn+0x1a>
c00040bf:	83 ec 0c             	sub    esp,0xc
c00040c2:	0f b7 c0             	movzx  eax,ax
c00040c5:	50                   	push   eax
c00040c6:	e8 fa 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040cb:	89 c5                	mov    ebp,eax
c00040cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040df:	e8 e1 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040e4:	83 c4 10             	add    esp,0x10
c00040e7:	39 c5                	cmp    ebp,eax
c00040e9:	75 96                	jne    c0004081 <cmp_lfn+0x1a>
c00040eb:	89 f5                	mov    ebp,esi
c00040ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f1:	eb 04                	jmp    c00040f7 <cmp_lfn+0x90>
c00040f3:	66 46                	inc    si
c00040f5:	75 8a                	jne    c0004081 <cmp_lfn+0x1a>
c00040f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004100:	75 9c                	jne    c000409e <cmp_lfn+0x37>
c0004102:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004105:	74 16                	je     c000411d <cmp_lfn+0xb6>
c0004107:	66 85 ed             	test   bp,bp
c000410a:	74 11                	je     c000411d <cmp_lfn+0xb6>
c000410c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004110:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004115:	0f 94 c0             	sete   al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	eb 05                	jmp    c0004122 <cmp_lfn+0xbb>
c000411d:	b8 01 00 00 00       	mov    eax,0x1
c0004122:	83 c4 1c             	add    esp,0x1c
c0004125:	5b                   	pop    ebx
c0004126:	5e                   	pop    esi
c0004127:	5f                   	pop    edi
c0004128:	5d                   	pop    ebp
c0004129:	c3                   	ret    

c000412a <dir_find>:
c000412a:	55                   	push   ebp
c000412b:	31 d2                	xor    edx,edx
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	89 c3                	mov    ebx,eax
c0004132:	83 ec 1c             	sub    esp,0x1c
c0004135:	8b 30                	mov    esi,DWORD PTR [eax]
c0004137:	e8 89 f0 ff ff       	call   c00031c5 <dir_sdi>
c000413c:	89 04 24             	mov    DWORD PTR [esp],eax
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 9e 01 00 00    	jne    c00042e5 <dir_find+0x1bb>
c0004147:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414a:	0f 85 8d 00 00 00    	jne    c00041dd <dir_find+0xb3>
c0004150:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004153:	e8 30 fe ff ff       	call   c0003f88 <xname_sum>
c0004158:	89 c7                	mov    edi,eax
c000415a:	31 d2                	xor    edx,edx
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 72 f8 ff ff       	call   c00039d5 <dir_read>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 5e 01 00 00    	jne    c00042c9 <dir_find+0x19f>
c000416b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000416e:	8d 41 24             	lea    eax,[ecx+0x24]
c0004171:	e8 f3 da ff ff       	call   c0001c69 <ld_word>
c0004176:	66 39 f8             	cmp    ax,di
c0004179:	75 df                	jne    c000415a <dir_find+0x30>
c000417b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000417e:	31 ed                	xor    ebp,ebp
c0004180:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004184:	ba 40 00 00 00       	mov    edx,0x40
c0004189:	89 e9                	mov    ecx,ebp
c000418b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000418f:	0f 84 42 01 00 00    	je     c00042d7 <dir_find+0x1ad>
c0004195:	f6 c2 1f             	test   dl,0x1f
c0004198:	75 03                	jne    c000419d <dir_find+0x73>
c000419a:	83 c2 02             	add    edx,0x2
c000419d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a1:	89 d0                	mov    eax,edx
c00041a3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a6:	e8 be da ff ff       	call   c0001c69 <ld_word>
c00041ab:	83 ec 0c             	sub    esp,0xc
c00041ae:	0f b7 c0             	movzx  eax,ax
c00041b1:	50                   	push   eax
c00041b2:	e8 0e 44 00 00       	call   c00085c5 <ff_wtoupper>
c00041b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041be:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c5:	e8 fb 43 00 00       	call   c00085c5 <ff_wtoupper>
c00041ca:	83 c4 10             	add    esp,0x10
c00041cd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d1:	75 87                	jne    c000415a <dir_find+0x30>
c00041d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d7:	45                   	inc    ebp
c00041d8:	83 c2 02             	add    edx,0x2
c00041db:	eb ac                	jmp    c0004189 <dir_find+0x5f>
c00041dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f4:	89 f0                	mov    eax,esi
c00041f6:	e8 4c e2 ff ff       	call   c0002447 <move_window>
c00041fb:	85 c0                	test   eax,eax
c00041fd:	0f 85 c6 00 00 00    	jne    c00042c9 <dir_find+0x19f>
c0004203:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004206:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004209:	84 c9                	test   cl,cl
c000420b:	0f 84 bd 00 00 00    	je     c00042ce <dir_find+0x1a4>
c0004211:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004214:	88 d0                	mov    al,dl
c0004216:	83 e0 3f             	and    eax,0x3f
c0004219:	80 f9 e5             	cmp    cl,0xe5
c000421c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000421f:	0f 84 87 00 00 00    	je     c00042ac <dir_find+0x182>
c0004225:	80 e2 08             	and    dl,0x8
c0004228:	74 06                	je     c0004230 <dir_find+0x106>
c000422a:	3c 0f                	cmp    al,0xf
c000422c:	75 7e                	jne    c00042ac <dir_find+0x182>
c000422e:	eb 04                	jmp    c0004234 <dir_find+0x10a>
c0004230:	3c 0f                	cmp    al,0xf
c0004232:	75 4c                	jne    c0004280 <dir_find+0x156>
c0004234:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004238:	75 7e                	jne    c00042b8 <dir_find+0x18e>
c000423a:	f6 c1 40             	test   cl,0x40
c000423d:	74 12                	je     c0004251 <dir_find+0x127>
c000423f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004242:	83 e1 bf             	and    ecx,0xffffffbf
c0004245:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004249:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424f:	eb 06                	jmp    c0004257 <dir_find+0x12d>
c0004251:	89 f8                	mov    eax,edi
c0004253:	38 c8                	cmp    al,cl
c0004255:	75 5c                	jne    c00042b3 <dir_find+0x189>
c0004257:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004260:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004263:	75 53                	jne    c00042b8 <dir_find+0x18e>
c0004265:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004269:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426c:	89 ea                	mov    edx,ebp
c000426e:	e8 f4 fd ff ff       	call   c0004067 <cmp_lfn>
c0004273:	85 c0                	test   eax,eax
c0004275:	74 41                	je     c00042b8 <dir_find+0x18e>
c0004277:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000427e:	eb 38                	jmp    c00042b8 <dir_find+0x18e>
c0004280:	89 f8                	mov    eax,edi
c0004282:	84 c0                	test   al,al
c0004284:	75 0d                	jne    c0004293 <dir_find+0x169>
c0004286:	89 e8                	mov    eax,ebp
c0004288:	e8 98 de ff ff       	call   c0002125 <sum_sfn>
c000428d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004291:	74 52                	je     c00042e5 <dir_find+0x1bb>
c0004293:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004297:	75 13                	jne    c00042ac <dir_find+0x182>
c0004299:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429c:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 60 da ff ff       	call   c0001d08 <mem_cmp>
c00042a8:	85 c0                	test   eax,eax
c00042aa:	74 39                	je     c00042e5 <dir_find+0x1bb>
c00042ac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b8:	31 d2                	xor    edx,edx
c00042ba:	89 d8                	mov    eax,ebx
c00042bc:	e8 5c f4 ff ff       	call   c000371d <dir_next>
c00042c1:	85 c0                	test   eax,eax
c00042c3:	0f 84 25 ff ff ff    	je     c00041ee <dir_find+0xc4>
c00042c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00042cc:	eb 17                	jmp    c00042e5 <dir_find+0x1bb>
c00042ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d5:	eb 0e                	jmp    c00042e5 <dir_find+0x1bb>
c00042d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042da:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042df:	0f 85 75 fe ff ff    	jne    c000415a <dir_find+0x30>
c00042e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e8:	83 c4 1c             	add    esp,0x1c
c00042eb:	5b                   	pop    ebx
c00042ec:	5e                   	pop    esi
c00042ed:	5f                   	pop    edi
c00042ee:	5d                   	pop    ebp
c00042ef:	c3                   	ret    

c00042f0 <dir_register>:
c00042f0:	55                   	push   ebp
c00042f1:	57                   	push   edi
c00042f2:	56                   	push   esi
c00042f3:	be 06 00 00 00       	mov    esi,0x6
c00042f8:	53                   	push   ebx
c00042f9:	83 ec 6c             	sub    esp,0x6c
c00042fc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004300:	0f 85 62 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004306:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004308:	31 ff                	xor    edi,edi
c000430a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004312:	74 03                	je     c0004317 <dir_register+0x27>
c0004314:	47                   	inc    edi
c0004315:	eb f6                	jmp    c000430d <dir_register+0x1d>
c0004317:	89 c3                	mov    ebx,eax
c0004319:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431d:	0f 85 e1 00 00 00    	jne    c0004404 <dir_register+0x114>
c0004323:	83 c7 0e             	add    edi,0xe
c0004326:	b9 0f 00 00 00       	mov    ecx,0xf
c000432b:	89 f8                	mov    eax,edi
c000432d:	31 d2                	xor    edx,edx
c000432f:	f7 f1                	div    ecx
c0004331:	8d 50 02             	lea    edx,[eax+0x2]
c0004334:	89 c7                	mov    edi,eax
c0004336:	89 d8                	mov    eax,ebx
c0004338:	e8 12 f8 ff ff       	call   c0003b4f <dir_alloc>
c000433d:	89 c6                	mov    esi,eax
c000433f:	85 c0                	test   eax,eax
c0004341:	0f 85 21 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004347:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004350:	c1 e7 05             	shl    edi,0x5
c0004353:	29 f8                	sub    eax,edi
c0004355:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004358:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435b:	a8 04                	test   al,0x4
c000435d:	0f 84 91 00 00 00    	je     c00043f4 <dir_register+0x104>
c0004363:	83 e0 fb             	and    eax,0xfffffffb
c0004366:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004369:	89 d8                	mov    eax,ebx
c000436b:	e8 25 ec ff ff       	call   c0002f95 <fill_first_frag>
c0004370:	85 c0                	test   eax,eax
c0004372:	0f 85 ee 01 00 00    	jne    c0004566 <dir_register+0x276>
c0004378:	83 c9 ff             	or     ecx,0xffffffff
c000437b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 db eb ff ff       	call   c0002f60 <fill_last_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 d9 01 00 00    	jne    c0004566 <dir_register+0x276>
c000438d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004391:	74 61                	je     c00043f4 <dir_register+0x104>
c0004393:	89 da                	mov    edx,ebx
c0004395:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004399:	e8 ea f5 ff ff       	call   c0003988 <load_obj_xdir>
c000439e:	85 c0                	test   eax,eax
c00043a0:	0f 85 c0 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043a6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043aa:	31 c9                	xor    ecx,ecx
c00043ac:	c1 e2 09             	shl    edx,0x9
c00043af:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043be:	83 c0 38             	add    eax,0x38
c00043c1:	e8 1c d9 ff ff       	call   c0001ce2 <st_qword>
c00043c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043cc:	83 c0 28             	add    eax,0x28
c00043cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d2:	e8 0b d9 ff ff       	call   c0001ce2 <st_qword>
c00043d7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043dd:	83 c8 01             	or     eax,0x1
c00043e0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e7:	e8 db f7 ff ff       	call   c0003bc7 <store_xdir>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 85 72 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fa:	e8 c1 fb ff ff       	call   c0003fc0 <create_xdir>
c00043ff:	e9 64 01 00 00       	jmp    c0004568 <dir_register+0x278>
c0004404:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004407:	b9 0c 00 00 00       	mov    ecx,0xc
c000440c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004410:	89 c2                	mov    edx,eax
c0004412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004416:	e8 cd d8 ff ff       	call   c0001ce8 <mem_cpy>
c000441b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004420:	74 58                	je     c000447a <dir_register+0x18a>
c0004422:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004426:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000442e:	83 ec 0c             	sub    esp,0xc
c0004431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004438:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004440:	e8 24 dc ff ff       	call   c0002069 <gen_numname>
c0004445:	89 d8                	mov    eax,ebx
c0004447:	e8 de fc ff ff       	call   c000412a <dir_find>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	89 c6                	mov    esi,eax
c0004451:	85 c0                	test   eax,eax
c0004453:	75 15                	jne    c000446a <dir_register+0x17a>
c0004455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004459:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000445e:	75 ce                	jne    c000442e <dir_register+0x13e>
c0004460:	be 07 00 00 00       	mov    esi,0x7
c0004465:	e9 fe 00 00 00       	jmp    c0004568 <dir_register+0x278>
c000446a:	83 f8 04             	cmp    eax,0x4
c000446d:	0f 85 f5 00 00 00    	jne    c0004568 <dir_register+0x278>
c0004473:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004477:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447a:	b9 01 00 00 00       	mov    ecx,0x1
c000447f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004484:	74 0f                	je     c0004495 <dir_register+0x1a5>
c0004486:	b9 0d 00 00 00       	mov    ecx,0xd
c000448b:	8d 47 0c             	lea    eax,[edi+0xc]
c000448e:	31 d2                	xor    edx,edx
c0004490:	f7 f1                	div    ecx
c0004492:	8d 48 01             	lea    ecx,[eax+0x1]
c0004495:	89 ca                	mov    edx,ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 ad f6 ff ff       	call   c0003b4f <dir_alloc>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 bc 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b0:	49                   	dec    ecx
c00044b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b5:	74 6a                	je     c0004521 <dir_register+0x231>
c00044b7:	89 c8                	mov    eax,ecx
c00044b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044bc:	c1 e0 05             	shl    eax,0x5
c00044bf:	29 c2                	sub    edx,eax
c00044c1:	89 d8                	mov    eax,ebx
c00044c3:	e8 fd ec ff ff       	call   c00031c5 <dir_sdi>
c00044c8:	89 c6                	mov    esi,eax
c00044ca:	85 c0                	test   eax,eax
c00044cc:	0f 85 96 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d6:	e8 4a dc ff ff       	call   c0002125 <sum_sfn>
c00044db:	0f b6 f8             	movzx  edi,al
c00044de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e4:	89 e8                	mov    eax,ebp
c00044e6:	e8 5c df ff ff       	call   c0002447 <move_window>
c00044eb:	89 c6                	mov    esi,eax
c00044ed:	85 c0                	test   eax,eax
c00044ef:	75 77                	jne    c0004568 <dir_register+0x278>
c00044f1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f9:	83 ec 0c             	sub    esp,0xc
c00044fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044ff:	57                   	push   edi
c0004500:	e8 e0 da ff ff       	call   c0001fe5 <put_lfn>
c0004505:	31 d2                	xor    edx,edx
c0004507:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450b:	89 d8                	mov    eax,ebx
c000450d:	e8 0b f2 ff ff       	call   c000371d <dir_next>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	89 c6                	mov    esi,eax
c0004517:	85 c0                	test   eax,eax
c0004519:	75 4d                	jne    c0004568 <dir_register+0x278>
c000451b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000451f:	75 bd                	jne    c00044de <dir_register+0x1ee>
c0004521:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004527:	89 e8                	mov    eax,ebp
c0004529:	e8 19 df ff ff       	call   c0002447 <move_window>
c000452e:	89 c6                	mov    esi,eax
c0004530:	85 c0                	test   eax,eax
c0004532:	75 34                	jne    c0004568 <dir_register+0x278>
c0004534:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004537:	b9 20 00 00 00       	mov    ecx,0x20
c000453c:	31 d2                	xor    edx,edx
c000453e:	e8 ba d7 ff ff       	call   c0001cfd <mem_set>
c0004543:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454a:	b9 0b 00 00 00       	mov    ecx,0xb
c000454f:	e8 94 d7 ff ff       	call   c0001ce8 <mem_cpy>
c0004554:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004557:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455a:	83 e0 18             	and    eax,0x18
c000455d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004560:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004564:	eb 02                	jmp    c0004568 <dir_register+0x278>
c0004566:	89 c6                	mov    esi,eax
c0004568:	83 c4 6c             	add    esp,0x6c
c000456b:	89 f0                	mov    eax,esi
c000456d:	5b                   	pop    ebx
c000456e:	5e                   	pop    esi
c000456f:	5f                   	pop    edi
c0004570:	5d                   	pop    ebp
c0004571:	c3                   	ret    

c0004572 <sync_fs>:
c0004572:	56                   	push   esi
c0004573:	53                   	push   ebx
c0004574:	53                   	push   ebx
c0004575:	89 c3                	mov    ebx,eax
c0004577:	e8 37 de ff ff       	call   c00023b3 <sync_window>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 85 b1 00 00 00    	jne    c0004635 <sync_fs+0xc3>
c0004584:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004587:	0f 85 8e 00 00 00    	jne    c000461b <sync_fs+0xa9>
c000458d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004591:	0f 85 84 00 00 00    	jne    c000461b <sync_fs+0xa9>
c0004597:	b9 00 02 00 00       	mov    ecx,0x200
c000459c:	8d 73 54             	lea    esi,[ebx+0x54]
c000459f:	31 d2                	xor    edx,edx
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	e8 55 d7 ff ff       	call   c0001cfd <mem_set>
c00045a8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ae:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b3:	e8 23 d7 ff ff       	call   c0001cdb <st_word>
c00045b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 1b d7 ff ff       	call   c0001cdf <st_dword>
c00045c4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00045cf:	e8 0b d7 ff ff       	call   c0001cdf <st_dword>
c00045d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045dd:	e8 fd d6 ff ff       	call   c0001cdf <st_dword>
c00045e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045eb:	e8 ef d6 ff ff       	call   c0001cdf <st_dword>
c00045f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f6:	83 c0 01             	add    eax,0x1
c00045f9:	83 d2 00             	adc    edx,0x0
c00045fc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045ff:	83 ec 0c             	sub    esp,0xc
c0004602:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004605:	6a 01                	push   0x1
c0004607:	52                   	push   edx
c0004608:	50                   	push   eax
c0004609:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460d:	56                   	push   esi
c000460e:	50                   	push   eax
c000460f:	e8 20 d6 ff ff       	call   c0001c34 <disk_write>
c0004614:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004618:	83 c4 20             	add    esp,0x20
c000461b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000461f:	51                   	push   ecx
c0004620:	6a 00                	push   0x0
c0004622:	6a 00                	push   0x0
c0004624:	50                   	push   eax
c0004625:	e8 20 d6 ff ff       	call   c0001c4a <disk_ioctl>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	85 c0                	test   eax,eax
c000462f:	0f 95 c0             	setne  al
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	5a                   	pop    edx
c0004636:	5b                   	pop    ebx
c0004637:	5e                   	pop    esi
c0004638:	c3                   	ret    

c0004639 <create_partition>:
c0004639:	55                   	push   ebp
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	57                   	push   edi
c000463e:	56                   	push   esi
c000463f:	53                   	push   ebx
c0004640:	83 ec 60             	sub    esp,0x60
c0004643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004647:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000464f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004653:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004657:	50                   	push   eax
c0004658:	6a 01                	push   0x1
c000465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000465e:	e8 e7 d5 ff ff       	call   c0001c4a <disk_ioctl>
c0004663:	83 c4 10             	add    esp,0x10
c0004666:	85 c0                	test   eax,eax
c0004668:	74 0a                	je     c0004674 <create_partition+0x3b>
c000466a:	b8 01 00 00 00       	mov    eax,0x1
c000466f:	e9 67 05 00 00       	jmp    c0004bdb <create_partition+0x5a2>
c0004674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004678:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004680:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004684:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004689:	0f 86 ed 03 00 00    	jbe    c0004a7c <create_partition+0x443>
c000468f:	83 c0 df             	add    eax,0xffffffdf
c0004692:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ad:	83 c0 bd             	add    eax,0xffffffbd
c00046b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b7:	83 d2 ff             	adc    edx,0xffffffff
c00046ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ca:	be 22 00 00 00       	mov    esi,0x22
c00046cf:	31 ff                	xor    edi,edi
c00046d1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ed:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f3:	75 0e                	jne    c0004703 <create_partition+0xca>
c00046f5:	b9 00 02 00 00       	mov    ecx,0x200
c00046fa:	31 d2                	xor    edx,edx
c00046fc:	89 d8                	mov    eax,ebx
c00046fe:	e8 fa d5 ff ff       	call   c0001cfd <mem_set>
c0004703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000470f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004712:	0f 84 23 01 00 00    	je     c000483b <create_partition+0x202>
c0004718:	89 f0                	mov    eax,esi
c000471a:	89 fa                	mov    edx,edi
c000471c:	05 ff 07 00 00       	add    eax,0x7ff
c0004721:	83 d2 00             	adc    edx,0x0
c0004724:	89 c1                	mov    ecx,eax
c0004726:	89 d7                	mov    edi,edx
c0004728:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000472e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004732:	89 ce                	mov    esi,ecx
c0004734:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004740:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004747:	89 04 24             	mov    DWORD PTR [esp],eax
c000474a:	b8 64 00 00 00       	mov    eax,0x64
c000474f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004752:	b8 00 00 00 00       	mov    eax,0x0
c0004757:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475b:	72 41                	jb     c000479e <create_partition+0x165>
c000475d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004765:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000476e:	01 c1                	add    ecx,eax
c0004770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004774:	f7 24 24             	mul    DWORD PTR [esp]
c0004777:	6a 00                	push   0x0
c0004779:	01 ca                	add    edx,ecx
c000477b:	6a 64                	push   0x64
c000477d:	52                   	push   edx
c000477e:	50                   	push   eax
c000477f:	e8 ec 22 02 00       	call   c0026a70 <__udivdi3>
c0004784:	83 c4 10             	add    esp,0x10
c0004787:	05 ff 07 00 00       	add    eax,0x7ff
c000478c:	83 d2 00             	adc    edx,0x0
c000478f:	89 c1                	mov    ecx,eax
c0004791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004795:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000479e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a5:	01 f0                	add    eax,esi
c00047a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ab:	11 fa                	adc    edx,edi
c00047ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b1:	19 d1                	sbb    ecx,edx
c00047b3:	73 2e                	jae    c00047e3 <create_partition+0x1aa>
c00047b5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b9:	89 f8                	mov    eax,edi
c00047bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ce:	73 6b                	jae    c000483b <create_partition+0x202>
c00047d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d8:	29 f0                	sub    eax,esi
c00047da:	19 fa                	sbb    edx,edi
c00047dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00047df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ea:	74 4f                	je     c000483b <create_partition+0x202>
c00047ec:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ef:	b9 10 00 00 00       	mov    ecx,0x10
c00047f4:	ba 30 95 02 c0       	mov    edx,0xc0029530
c00047f9:	e8 ea d4 ff ff       	call   c0001ce8 <mem_cpy>
c00047fe:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480b:	e8 2c db ff ff       	call   c000233c <make_rand>
c0004810:	89 f2                	mov    edx,esi
c0004812:	89 f9                	mov    ecx,edi
c0004814:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004818:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481c:	e8 c1 d4 ff ff       	call   c0001ce2 <st_qword>
c0004821:	03 34 24             	add    esi,DWORD PTR [esp]
c0004824:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004828:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	83 c2 ff             	add    edx,0xffffffff
c0004833:	83 d1 ff             	adc    ecx,0xffffffff
c0004836:	e8 a7 d4 ff ff       	call   c0001ce2 <st_qword>
c000483b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000483f:	83 e8 80             	sub    eax,0xffffff80
c0004842:	89 c5                	mov    ebp,eax
c0004844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004848:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000484e:	75 6b                	jne    c00048bb <create_partition+0x282>
c0004850:	45                   	inc    ebp
c0004851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004855:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485a:	e8 39 da ff ff       	call   c0002298 <crc32>
c000485f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004869:	75 e5                	jne    c0004850 <create_partition+0x217>
c000486b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000486f:	31 d2                	xor    edx,edx
c0004871:	83 ec 0c             	sub    esp,0xc
c0004874:	c1 ed 09             	shr    ebp,0x9
c0004877:	6a 01                	push   0x1
c0004879:	8d 45 02             	lea    eax,[ebp+0x2]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 ac d3 ff ff       	call   c0001c34 <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 d7 fd ff ff    	jne    c000466a <create_partition+0x31>
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	31 d2                	xor    edx,edx
c0004898:	6a 01                	push   0x1
c000489a:	89 e8                	mov    eax,ebp
c000489c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a4:	52                   	push   edx
c00048a5:	50                   	push   eax
c00048a6:	53                   	push   ebx
c00048a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ab:	e8 84 d3 ff ff       	call   c0001c34 <disk_write>
c00048b0:	83 c4 20             	add    esp,0x20
c00048b3:	85 c0                	test   eax,eax
c00048b5:	0f 85 af fd ff ff    	jne    c000466a <create_partition+0x31>
c00048bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c3:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c8:	74 0d                	je     c00048d7 <create_partition+0x29e>
c00048ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d2:	e9 12 fe ff ff       	jmp    c00046e9 <create_partition+0xb0>
c00048d7:	31 d2                	xor    edx,edx
c00048d9:	b9 00 02 00 00       	mov    ecx,0x200
c00048de:	89 d8                	mov    eax,ebx
c00048e0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e3:	e8 15 d4 ff ff       	call   c0001cfd <mem_set>
c00048e8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048eb:	b9 10 00 00 00       	mov    ecx,0x10
c00048f0:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00048f5:	89 d8                	mov    eax,ebx
c00048f7:	e8 ec d3 ff ff       	call   c0001ce8 <mem_cpy>
c00048fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004900:	8d 43 58             	lea    eax,[ebx+0x58]
c0004903:	f7 d2                	not    edx
c0004905:	e8 d5 d3 ff ff       	call   c0001cdf <st_dword>
c000490a:	8d 43 18             	lea    eax,[ebx+0x18]
c000490d:	31 c9                	xor    ecx,ecx
c000490f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004912:	ba 01 00 00 00       	mov    edx,0x1
c0004917:	e8 c6 d3 ff ff       	call   c0001ce2 <st_qword>
c000491c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004920:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004924:	83 c2 ff             	add    edx,0xffffffff
c0004927:	89 e8                	mov    eax,ebp
c0004929:	83 d1 ff             	adc    ecx,0xffffffff
c000492c:	e8 b1 d3 ff ff       	call   c0001ce2 <st_qword>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	8d 43 28             	lea    eax,[ebx+0x28]
c0004936:	ba 22 00 00 00       	mov    edx,0x22
c000493b:	e8 a2 d3 ff ff       	call   c0001ce2 <st_qword>
c0004940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004944:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004948:	83 c2 de             	add    edx,0xffffffde
c000494b:	8d 43 30             	lea    eax,[ebx+0x30]
c000494e:	83 d1 ff             	adc    ecx,0xffffffff
c0004951:	31 f6                	xor    esi,esi
c0004953:	e8 8a d3 ff ff       	call   c0001ce2 <st_qword>
c0004958:	8d 43 54             	lea    eax,[ebx+0x54]
c000495b:	ba 80 00 00 00       	mov    edx,0x80
c0004960:	e8 7a d3 ff ff       	call   c0001cdf <st_dword>
c0004965:	8d 43 50             	lea    eax,[ebx+0x50]
c0004968:	ba 80 00 00 00       	mov    edx,0x80
c000496d:	e8 6d d3 ff ff       	call   c0001cdf <st_dword>
c0004972:	ba 02 00 00 00       	mov    edx,0x2
c0004977:	89 f8                	mov    eax,edi
c0004979:	e8 61 d3 ff ff       	call   c0001cdf <st_dword>
c000497e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004981:	b9 10 00 00 00       	mov    ecx,0x10
c0004986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498a:	e8 ad d9 ff ff       	call   c000233c <make_rand>
c000498f:	83 c8 ff             	or     eax,0xffffffff
c0004992:	46                   	inc    esi
c0004993:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004998:	e8 fb d8 ff ff       	call   c0002298 <crc32>
c000499d:	83 fe 5c             	cmp    esi,0x5c
c00049a0:	75 f0                	jne    c0004992 <create_partition+0x359>
c00049a2:	f7 d0                	not    eax
c00049a4:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a7:	89 c2                	mov    edx,eax
c00049a9:	89 f0                	mov    eax,esi
c00049ab:	e8 2f d3 ff ff       	call   c0001cdf <st_dword>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 01                	push   0x1
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 71 d2 ff ff       	call   c0001c34 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 9c fc ff ff    	jne    c000466a <create_partition+0x31>
c00049ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d6:	83 c2 ff             	add    edx,0xffffffff
c00049d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049dc:	83 d1 ff             	adc    ecx,0xffffffff
c00049df:	e8 fe d2 ff ff       	call   c0001ce2 <st_qword>
c00049e4:	ba 01 00 00 00       	mov    edx,0x1
c00049e9:	31 c9                	xor    ecx,ecx
c00049eb:	89 e8                	mov    eax,ebp
c00049ed:	e8 f0 d2 ff ff       	call   c0001ce2 <st_qword>
c00049f2:	89 f8                	mov    eax,edi
c00049f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fc:	31 ff                	xor    edi,edi
c00049fe:	e8 df d2 ff ff       	call   c0001ce2 <st_qword>
c0004a03:	89 f0                	mov    eax,esi
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	e8 d3 d2 ff ff       	call   c0001cdf <st_dword>
c0004a0c:	83 c8 ff             	or     eax,0xffffffff
c0004a0f:	47                   	inc    edi
c0004a10:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a15:	e8 7e d8 ff ff       	call   c0002298 <crc32>
c0004a1a:	83 ff 5c             	cmp    edi,0x5c
c0004a1d:	75 f0                	jne    c0004a0f <create_partition+0x3d6>
c0004a1f:	f7 d0                	not    eax
c0004a21:	89 c2                	mov    edx,eax
c0004a23:	89 f0                	mov    eax,esi
c0004a25:	e8 b5 d2 ff ff       	call   c0001cdf <st_dword>
c0004a2a:	83 ec 0c             	sub    esp,0xc
c0004a2d:	6a 01                	push   0x1
c0004a2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a33:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a37:	83 c0 ff             	add    eax,0xffffffff
c0004a3a:	83 d2 ff             	adc    edx,0xffffffff
c0004a3d:	52                   	push   edx
c0004a3e:	50                   	push   eax
c0004a3f:	53                   	push   ebx
c0004a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a44:	e8 eb d1 ff ff       	call   c0001c34 <disk_write>
c0004a49:	83 c4 20             	add    esp,0x20
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	0f 85 16 fc ff ff    	jne    c000466a <create_partition+0x31>
c0004a54:	31 d2                	xor    edx,edx
c0004a56:	89 d8                	mov    eax,ebx
c0004a58:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5d:	e8 9b d2 ff ff       	call   c0001cfd <mem_set>
c0004a62:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a68:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6d:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0004a72:	e8 71 d2 ff ff       	call   c0001ce8 <mem_cpy>
c0004a77:	e9 21 01 00 00       	jmp    c0004b9d <create_partition+0x564>
c0004a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a80:	b9 05 00 00 00       	mov    ecx,0x5
c0004a85:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a88:	bf 08 00 00 00       	mov    edi,0x8
c0004a8d:	89 f8                	mov    eax,edi
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f b6 f0             	movzx  esi,al
c0004a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a97:	f7 f6                	div    esi
c0004a99:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a9e:	76 0a                	jbe    c0004aaa <create_partition+0x471>
c0004aa0:	d1 e7                	shl    edi,1
c0004aa2:	49                   	dec    ecx
c0004aa3:	75 e8                	jne    c0004a8d <create_partition+0x454>
c0004aa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aaa:	b9 00 02 00 00       	mov    ecx,0x200
c0004aaf:	31 d2                	xor    edx,edx
c0004ab1:	89 d8                	mov    eax,ebx
c0004ab3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab9:	e8 3f d2 ff ff       	call   c0001cfd <mem_set>
c0004abe:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac6:	31 d2                	xor    edx,edx
c0004ac8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad0:	f7 f1                	div    ecx
c0004ad2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004adb:	89 f8                	mov    eax,edi
c0004add:	0f b6 c0             	movzx  eax,al
c0004ae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae4:	e9 80 00 00 00       	jmp    c0004b69 <create_partition+0x530>
c0004ae9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aec:	29 cf                	sub    edi,ecx
c0004aee:	89 ca                	mov    edx,ecx
c0004af0:	89 f0                	mov    eax,esi
c0004af2:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af7:	e8 e3 d1 ff ff       	call   c0001cdf <st_dword>
c0004afc:	8d 46 04             	lea    eax,[esi+0x4]
c0004aff:	89 fa                	mov    edx,edi
c0004b01:	83 c6 10             	add    esi,0x10
c0004b04:	e8 d6 d1 ff ff       	call   c0001cdf <st_dword>
c0004b09:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0d:	31 d2                	xor    edx,edx
c0004b0f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b12:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b16:	89 c8                	mov    eax,ecx
c0004b18:	01 f9                	add    ecx,edi
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d5                	mov    ebp,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	45                   	inc    ebp
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b28:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2b:	89 c2                	mov    edx,eax
c0004b2d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b30:	c1 ea 02             	shr    edx,0x2
c0004b33:	83 e2 c0             	and    edx,0xffffffc0
c0004b36:	09 ea                	or     edx,ebp
c0004b38:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	f7 f5                	div    ebp
c0004b44:	89 d7                	mov    edi,edx
c0004b46:	31 d2                	xor    edx,edx
c0004b48:	47                   	inc    edi
c0004b49:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b50:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b53:	89 c5                	mov    ebp,eax
c0004b55:	c1 ed 02             	shr    ebp,0x2
c0004b58:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5b:	09 ef                	or     edi,ebp
c0004b5d:	89 fa                	mov    edx,edi
c0004b5f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b62:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b67:	74 34                	je     c0004b9d <create_partition+0x564>
c0004b69:	85 c9                	test   ecx,ecx
c0004b6b:	74 30                	je     c0004b9d <create_partition+0x564>
c0004b6d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b70:	76 2b                	jbe    c0004b9d <create_partition+0x564>
c0004b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7d:	83 ff 64             	cmp    edi,0x64
c0004b80:	76 4b                	jbe    c0004bcd <create_partition+0x594>
c0004b82:	89 f8                	mov    eax,edi
c0004b84:	01 c8                	add    eax,ecx
c0004b86:	0f 82 5d ff ff ff    	jb     c0004ae9 <create_partition+0x4b0>
c0004b8c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b8f:	0f 87 54 ff ff ff    	ja     c0004ae9 <create_partition+0x4b0>
c0004b95:	85 ff                	test   edi,edi
c0004b97:	0f 85 51 ff ff ff    	jne    c0004aee <create_partition+0x4b5>
c0004b9d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba8:	e8 2e d1 ff ff       	call   c0001cdb <st_word>
c0004bad:	83 ec 0c             	sub    esp,0xc
c0004bb0:	6a 01                	push   0x1
c0004bb2:	6a 00                	push   0x0
c0004bb4:	6a 00                	push   0x0
c0004bb6:	53                   	push   ebx
c0004bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbb:	e8 74 d0 ff ff       	call   c0001c34 <disk_write>
c0004bc0:	83 c4 20             	add    esp,0x20
c0004bc3:	85 c0                	test   eax,eax
c0004bc5:	0f 95 c0             	setne  al
c0004bc8:	0f b6 c0             	movzx  eax,al
c0004bcb:	eb 0e                	jmp    c0004bdb <create_partition+0x5a2>
c0004bcd:	74 07                	je     c0004bd6 <create_partition+0x59d>
c0004bcf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd4:	eb ac                	jmp    c0004b82 <create_partition+0x549>
c0004bd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd9:	eb a7                	jmp    c0004b82 <create_partition+0x549>
c0004bdb:	83 c4 5c             	add    esp,0x5c
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <get_fileinfo>:
c0004be3:	55                   	push   ebp
c0004be4:	57                   	push   edi
c0004be5:	56                   	push   esi
c0004be6:	53                   	push   ebx
c0004be7:	83 ec 1c             	sub    esp,0x1c
c0004bea:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bec:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfa:	0f 84 dc 01 00 00    	je     c0004ddc <get_fileinfo+0x1f9>
c0004c00:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c03:	75 0f                	jne    c0004c14 <get_fileinfo+0x31>
c0004c05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c08:	83 c4 1c             	add    esp,0x1c
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	5f                   	pop    edi
c0004c0e:	5d                   	pop    ebp
c0004c0f:	e9 58 d5 ff ff       	jmp    c000216c <get_xfileinfo>
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1c:	74 6a                	je     c0004c88 <get_fileinfo+0xa5>
c0004c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c26:	31 ed                	xor    ebp,ebp
c0004c28:	31 ff                	xor    edi,edi
c0004c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c35:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c39:	66 85 d2             	test   dx,dx
c0004c3c:	74 3e                	je     c0004c7c <get_fileinfo+0x99>
c0004c3e:	66 85 ed             	test   bp,bp
c0004c41:	75 0c                	jne    c0004c4f <get_fileinfo+0x6c>
c0004c43:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c49:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4d:	76 22                	jbe    c0004c71 <get_fileinfo+0x8e>
c0004c4f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c54:	89 e8                	mov    eax,ebp
c0004c56:	29 f9                	sub    ecx,edi
c0004c58:	c1 e0 10             	shl    eax,0x10
c0004c5b:	09 d0                	or     eax,edx
c0004c5d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c61:	e8 a3 d1 ff ff       	call   c0001e09 <put_utf>
c0004c66:	84 c0                	test   al,al
c0004c68:	74 10                	je     c0004c7a <get_fileinfo+0x97>
c0004c6a:	0f b6 c0             	movzx  eax,al
c0004c6d:	31 d2                	xor    edx,edx
c0004c6f:	01 c7                	add    edi,eax
c0004c71:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c76:	89 d5                	mov    ebp,edx
c0004c78:	eb b0                	jmp    c0004c2a <get_fileinfo+0x47>
c0004c7a:	31 ff                	xor    edi,edi
c0004c7c:	66 85 ed             	test   bp,bp
c0004c7f:	74 02                	je     c0004c83 <get_fileinfo+0xa0>
c0004c81:	31 ff                	xor    edi,edi
c0004c83:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c88:	31 ff                	xor    edi,edi
c0004c8a:	31 c9                	xor    ecx,ecx
c0004c8c:	83 f9 0a             	cmp    ecx,0xa
c0004c8f:	0f 87 ad 00 00 00    	ja     c0004d42 <get_fileinfo+0x15f>
c0004c95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c9f:	66 83 fa 20          	cmp    dx,0x20
c0004ca3:	0f 84 92 00 00 00    	je     c0004d3b <get_fileinfo+0x158>
c0004ca9:	66 83 fa 05          	cmp    dx,0x5
c0004cad:	75 05                	jne    c0004cb4 <get_fileinfo+0xd1>
c0004caf:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb4:	83 ff 0b             	cmp    edi,0xb
c0004cb7:	77 0b                	ja     c0004cc4 <get_fileinfo+0xe1>
c0004cb9:	83 fd 09             	cmp    ebp,0x9
c0004cbc:	75 06                	jne    c0004cc4 <get_fileinfo+0xe1>
c0004cbe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc3:	47                   	inc    edi
c0004cc4:	0f b7 c2             	movzx  eax,dx
c0004cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccb:	e8 6d d0 ff ff       	call   c0001d3d <dbc_1st>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 2f                	je     c0004d03 <get_fileinfo+0x120>
c0004cd4:	83 fd 08             	cmp    ebp,0x8
c0004cd7:	74 2a                	je     c0004d03 <get_fileinfo+0x120>
c0004cd9:	83 fd 0b             	cmp    ebp,0xb
c0004cdc:	74 25                	je     c0004d03 <get_fileinfo+0x120>
c0004cde:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce9:	e8 52 d0 ff ff       	call   c0001d40 <dbc_2nd>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 11                	je     c0004d03 <get_fileinfo+0x120>
c0004cf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfb:	c1 e2 08             	shl    edx,0x8
c0004cfe:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d01:	09 c2                	or     edx,eax
c0004d03:	0f b7 d2             	movzx  edx,dx
c0004d06:	50                   	push   eax
c0004d07:	50                   	push   eax
c0004d08:	68 b5 01 00 00       	push   0x1b5
c0004d0d:	52                   	push   edx
c0004d0e:	e8 46 38 00 00       	call   c0008559 <ff_oem2uni>
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	66 85 c0             	test   ax,ax
c0004d19:	75 04                	jne    c0004d1f <get_fileinfo+0x13c>
c0004d1b:	31 ff                	xor    edi,edi
c0004d1d:	eb 23                	jmp    c0004d42 <get_fileinfo+0x15f>
c0004d1f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d24:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d28:	29 f9                	sub    ecx,edi
c0004d2a:	0f b7 c0             	movzx  eax,ax
c0004d2d:	e8 d7 d0 ff ff       	call   c0001e09 <put_utf>
c0004d32:	84 c0                	test   al,al
c0004d34:	74 e5                	je     c0004d1b <get_fileinfo+0x138>
c0004d36:	0f b6 c0             	movzx  eax,al
c0004d39:	01 c7                	add    edi,eax
c0004d3b:	89 e9                	mov    ecx,ebp
c0004d3d:	e9 4a ff ff ff       	jmp    c0004c8c <get_fileinfo+0xa9>
c0004d42:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d47:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4b:	75 54                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d4d:	85 ff                	test   edi,edi
c0004d4f:	75 0b                	jne    c0004d5c <get_fileinfo+0x179>
c0004d51:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d55:	ba 01 00 00 00       	mov    edx,0x1
c0004d5a:	eb 33                	jmp    c0004d8f <get_fileinfo+0x1ac>
c0004d5c:	b1 08                	mov    cl,0x8
c0004d5e:	31 d2                	xor    edx,edx
c0004d60:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d66:	84 c0                	test   al,al
c0004d68:	74 25                	je     c0004d8f <get_fileinfo+0x1ac>
c0004d6a:	66 83 f8 2e          	cmp    ax,0x2e
c0004d6e:	74 16                	je     c0004d86 <get_fileinfo+0x1a3>
c0004d70:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d73:	66 83 ff 19          	cmp    di,0x19
c0004d77:	77 0f                	ja     c0004d88 <get_fileinfo+0x1a5>
c0004d79:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d7f:	74 07                	je     c0004d88 <get_fileinfo+0x1a5>
c0004d81:	83 c0 20             	add    eax,0x20
c0004d84:	eb 02                	jmp    c0004d88 <get_fileinfo+0x1a5>
c0004d86:	b1 10                	mov    cl,0x10
c0004d88:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8c:	42                   	inc    edx
c0004d8d:	eb d1                	jmp    c0004d60 <get_fileinfo+0x17d>
c0004d8f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d97:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9b:	75 04                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d9d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004daa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dad:	83 c0 1c             	add    eax,0x1c
c0004db0:	e8 c1 ce ff ff       	call   c0001c76 <ld_dword>
c0004db5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0004dbe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc1:	83 c0 16             	add    eax,0x16
c0004dc4:	e8 a0 ce ff ff       	call   c0001c69 <ld_word>
c0004dc9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd0:	83 c0 18             	add    eax,0x18
c0004dd3:	e8 91 ce ff ff       	call   c0001c69 <ld_word>
c0004dd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ddc:	83 c4 1c             	add    esp,0x1c
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	5d                   	pop    ebp
c0004de3:	c3                   	ret    

c0004de4 <ld_clust.isra.0>:
c0004de4:	56                   	push   esi
c0004de5:	89 c6                	mov    esi,eax
c0004de7:	53                   	push   ebx
c0004de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	e8 77 ce ff ff       	call   c0001c69 <ld_word>
c0004df2:	0f b7 c8             	movzx  ecx,ax
c0004df5:	89 f0                	mov    eax,esi
c0004df7:	3c 03                	cmp    al,0x3
c0004df9:	75 0d                	jne    c0004e08 <ld_clust.isra.0+0x24>
c0004dfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dfe:	e8 66 ce ff ff       	call   c0001c69 <ld_word>
c0004e03:	c1 e0 10             	shl    eax,0x10
c0004e06:	09 c1                	or     ecx,eax
c0004e08:	89 c8                	mov    eax,ecx
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <st_clust.isra.1>:
c0004e0d:	56                   	push   esi
c0004e0e:	89 c6                	mov    esi,eax
c0004e10:	53                   	push   ebx
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	0f b7 d1             	movzx  edx,cx
c0004e16:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e19:	e8 bd ce ff ff       	call   c0001cdb <st_word>
c0004e1e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e21:	75 0f                	jne    c0004e32 <st_clust.isra.1+0x25>
c0004e23:	c1 e9 10             	shr    ecx,0x10
c0004e26:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e29:	89 ca                	mov    edx,ecx
c0004e2b:	5b                   	pop    ebx
c0004e2c:	5e                   	pop    esi
c0004e2d:	e9 a9 ce ff ff       	jmp    c0001cdb <st_word>
c0004e32:	5b                   	pop    ebx
c0004e33:	5e                   	pop    esi
c0004e34:	c3                   	ret    

c0004e35 <init_alloc_info.isra.2>:
c0004e35:	56                   	push   esi
c0004e36:	53                   	push   ebx
c0004e37:	89 c6                	mov    esi,eax
c0004e39:	89 d3                	mov    ebx,edx
c0004e3b:	51                   	push   ecx
c0004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e3e:	83 c0 34             	add    eax,0x34
c0004e41:	e8 30 ce ff ff       	call   c0001c76 <ld_dword>
c0004e46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4b:	83 c0 38             	add    eax,0x38
c0004e4e:	e8 3b ce ff ff       	call   c0001c8e <ld_qword>
c0004e53:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e56:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e59:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e65:	83 e0 02             	and    eax,0x2
c0004e68:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5b                   	pop    ebx
c0004e6d:	5e                   	pop    esi
c0004e6e:	c3                   	ret    

c0004e6f <follow_path>:
c0004e6f:	56                   	push   esi
c0004e70:	53                   	push   ebx
c0004e71:	89 c3                	mov    ebx,eax
c0004e73:	83 ec 14             	sub    esp,0x14
c0004e76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e80:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e82:	80 fa 5c             	cmp    dl,0x5c
c0004e85:	75 07                	jne    c0004e8e <follow_path+0x1f>
c0004e87:	40                   	inc    eax
c0004e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8c:	eb ee                	jmp    c0004e7c <follow_path+0xd>
c0004e8e:	80 fa 2f             	cmp    dl,0x2f
c0004e91:	74 f4                	je     c0004e87 <follow_path+0x18>
c0004e93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea4:	77 52                	ja     c0004ef8 <follow_path+0x89>
c0004ea6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eaa:	31 d2                	xor    edx,edx
c0004eac:	89 d8                	mov    eax,ebx
c0004eae:	e8 12 e3 ff ff       	call   c00031c5 <dir_sdi>
c0004eb3:	eb 7c                	jmp    c0004f31 <follow_path+0xc2>
c0004eb5:	89 d8                	mov    eax,ebx
c0004eb7:	e8 6e f2 ff ff       	call   c000412a <dir_find>
c0004ebc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	75 46                	jne    c0004f09 <follow_path+0x9a>
c0004ec3:	80 e2 04             	and    dl,0x4
c0004ec6:	75 69                	jne    c0004f31 <follow_path+0xc2>
c0004ec8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ecc:	74 5e                	je     c0004f2c <follow_path+0xbd>
c0004ece:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed0:	3c 04                	cmp    al,0x4
c0004ed2:	75 41                	jne    c0004f15 <follow_path+0xa6>
c0004ed4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ede:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee1:	30 c0                	xor    al,al
c0004ee3:	09 d0                	or     eax,edx
c0004ee5:	89 da                	mov    edx,ebx
c0004ee7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef3:	e8 3d ff ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0004ef8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 a9 ed ff ff       	call   c0003cac <create_name>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	74 ae                	je     c0004eb5 <follow_path+0x46>
c0004f07:	eb 28                	jmp    c0004f31 <follow_path+0xc2>
c0004f09:	83 f8 04             	cmp    eax,0x4
c0004f0c:	75 23                	jne    c0004f31 <follow_path+0xc2>
c0004f0e:	80 e2 04             	and    dl,0x4
c0004f11:	74 19                	je     c0004f2c <follow_path+0xbd>
c0004f13:	eb 1c                	jmp    c0004f31 <follow_path+0xc2>
c0004f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f18:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f1e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f22:	e8 bd fe ff ff       	call   c0004de4 <ld_clust.isra.0>
c0004f27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2a:	eb cc                	jmp    c0004ef8 <follow_path+0x89>
c0004f2c:	b8 05 00 00 00       	mov    eax,0x5
c0004f31:	83 c4 14             	add    esp,0x14
c0004f34:	5b                   	pop    ebx
c0004f35:	5e                   	pop    esi
c0004f36:	c3                   	ret    

c0004f37 <f_mount>:
c0004f37:	53                   	push   ebx
c0004f38:	83 ec 18             	sub    esp,0x18
c0004f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4b:	e8 fb d2 ff ff       	call   c000224b <get_ldnumber>
c0004f50:	89 c2                	mov    edx,eax
c0004f52:	b8 0b 00 00 00       	mov    eax,0xb
c0004f57:	85 d2                	test   edx,edx
c0004f59:	78 39                	js     c0004f94 <f_mount+0x5d>
c0004f5b:	8b 04 95 00 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b00]
c0004f62:	85 c0                	test   eax,eax
c0004f64:	74 03                	je     c0004f69 <f_mount+0x32>
c0004f66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6d:	85 c0                	test   eax,eax
c0004f6f:	74 03                	je     c0004f74 <f_mount+0x3d>
c0004f71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	89 04 95 00 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1b00],eax
c0004f7f:	31 c0                	xor    eax,eax
c0004f81:	84 db                	test   bl,bl
c0004f83:	74 0f                	je     c0004f94 <f_mount+0x5d>
c0004f85:	31 c9                	xor    ecx,ecx
c0004f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8f:	e8 65 d7 ff ff       	call   c00026f9 <mount_volume>
c0004f94:	83 c4 18             	add    esp,0x18
c0004f97:	5b                   	pop    ebx
c0004f98:	c3                   	ret    

c0004f99 <f_open>:
c0004f99:	55                   	push   ebp
c0004f9a:	bd 09 00 00 00       	mov    ebp,0x9
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	53                   	push   ebx
c0004fa2:	83 ec 7c             	sub    esp,0x7c
c0004fa5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fac:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb3:	85 db                	test   ebx,ebx
c0004fb5:	0f 84 10 04 00 00    	je     c00053cb <f_open+0x432>
c0004fbb:	89 fe                	mov    esi,edi
c0004fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc1:	83 e6 3f             	and    esi,0x3f
c0004fc4:	89 f0                	mov    eax,esi
c0004fc6:	0f b6 c8             	movzx  ecx,al
c0004fc9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd0:	e8 24 d7 ff ff       	call   c00026f9 <mount_volume>
c0004fd5:	89 c5                	mov    ebp,eax
c0004fd7:	85 c0                	test   eax,eax
c0004fd9:	0f 85 e6 03 00 00    	jne    c00053c5 <f_open+0x42c>
c0004fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe3:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fec:	83 ec 0c             	sub    esp,0xc
c0004fef:	68 60 04 00 00       	push   0x460
c0004ff4:	e8 a3 34 00 00       	call   c000849c <ff_memalloc>
c0004ff9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ffd:	83 c4 10             	add    esp,0x10
c0005000:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005005:	0f 84 c0 03 00 00    	je     c00053cb <f_open+0x432>
c000500b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005013:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005019:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000501f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005026:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502a:	e8 40 fe ff ff       	call   c0004e6f <follow_path>
c000502f:	89 c5                	mov    ebp,eax
c0005031:	85 c0                	test   eax,eax
c0005033:	75 0c                	jne    c0005041 <f_open+0xa8>
c0005035:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503a:	79 05                	jns    c0005041 <f_open+0xa8>
c000503c:	bd 06 00 00 00       	mov    ebp,0x6
c0005041:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005047:	0f 84 84 01 00 00    	je     c00051d1 <f_open+0x238>
c000504d:	85 ed                	test   ebp,ebp
c000504f:	74 20                	je     c0005071 <f_open+0xd8>
c0005051:	83 fd 04             	cmp    ebp,0x4
c0005054:	0f 85 58 03 00 00    	jne    c00053b2 <f_open+0x419>
c000505a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000505e:	83 ce 08             	or     esi,0x8
c0005061:	e8 8a f2 ff ff       	call   c00042f0 <dir_register>
c0005066:	89 c5                	mov    ebp,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	74 2f                	je     c000509b <f_open+0x102>
c000506c:	e9 41 03 00 00       	jmp    c00053b2 <f_open+0x419>
c0005071:	bd 07 00 00 00       	mov    ebp,0x7
c0005076:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507b:	0f 85 31 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005081:	bd 08 00 00 00       	mov    ebp,0x8
c0005086:	f7 c7 04 00 00 00    	test   edi,0x4
c000508c:	0f 85 20 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005092:	83 e7 08             	and    edi,0x8
c0005095:	0f 84 65 01 00 00    	je     c0005200 <f_open+0x267>
c000509b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000509f:	8a 02                	mov    al,BYTE PTR [edx]
c00050a1:	3c 04                	cmp    al,0x4
c00050a3:	0f 85 97 00 00 00    	jne    c0005140 <f_open+0x1a7>
c00050a9:	8d 42 10             	lea    eax,[edx+0x10]
c00050ac:	89 13                	mov    DWORD PTR [ebx],edx
c00050ae:	89 da                	mov    edx,ebx
c00050b0:	e8 80 fd ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c3:	83 c0 02             	add    eax,0x2
c00050c6:	e8 32 cc ff ff       	call   c0001cfd <mem_set>
c00050cb:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d0:	31 d2                	xor    edx,edx
c00050d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d9:	83 c0 26             	add    eax,0x26
c00050dc:	e8 1c cc ff ff       	call   c0001cfd <mem_set>
c00050e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f4:	83 c0 08             	add    eax,0x8
c00050f7:	e8 e3 cb ff ff       	call   c0001cdf <st_dword>
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005103:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005107:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510b:	e8 b7 ea ff ff       	call   c0003bc7 <store_xdir>
c0005110:	89 c5                	mov    ebp,eax
c0005112:	85 c0                	test   eax,eax
c0005114:	0f 85 98 02 00 00    	jne    c00053b2 <f_open+0x419>
c000511a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511d:	85 d2                	test   edx,edx
c000511f:	0f 84 db 00 00 00    	je     c0005200 <f_open+0x267>
c0005125:	31 c9                	xor    ecx,ecx
c0005127:	89 d8                	mov    eax,ebx
c0005129:	e8 8e e3 ff ff       	call   c00034bc <remove_chain>
c000512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005132:	89 c5                	mov    ebp,eax
c0005134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005137:	48                   	dec    eax
c0005138:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513b:	e9 b8 00 00 00       	jmp    c00051f8 <f_open+0x25f>
c0005140:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005144:	89 ea                	mov    edx,ebp
c0005146:	e8 99 fc ff ff       	call   c0004de4 <ld_clust.isra.0>
c000514b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005150:	89 c7                	mov    edi,eax
c0005152:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005155:	e8 85 cb ff ff       	call   c0001cdf <st_dword>
c000515a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515e:	31 c9                	xor    ecx,ecx
c0005160:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516c:	e8 9c fc ff ff       	call   c0004e0d <st_clust.isra.1>
c0005171:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005175:	31 d2                	xor    edx,edx
c0005177:	83 c0 1c             	add    eax,0x1c
c000517a:	e8 60 cb ff ff       	call   c0001cdf <st_dword>
c000517f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005183:	85 ff                	test   edi,edi
c0005185:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005189:	74 75                	je     c0005200 <f_open+0x267>
c000518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518f:	31 c9                	xor    ecx,ecx
c0005191:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005194:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005197:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000519f:	89 fa                	mov    edx,edi
c00051a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a5:	e8 12 e3 ff ff       	call   c00034bc <remove_chain>
c00051aa:	89 c5                	mov    ebp,eax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	0f 85 fe 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c0:	4f                   	dec    edi
c00051c1:	e8 81 d2 ff ff       	call   c0002447 <move_window>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051cc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051cf:	eb 27                	jmp    c00051f8 <f_open+0x25f>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 d9 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051d9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051dd:	bd 04 00 00 00       	mov    ebp,0x4
c00051e2:	a8 10                	test   al,0x10
c00051e4:	0f 85 c8 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051ea:	83 e7 02             	and    edi,0x2
c00051ed:	74 11                	je     c0005200 <f_open+0x267>
c00051ef:	bd 07 00 00 00       	mov    ebp,0x7
c00051f4:	a8 01                	test   al,0x1
c00051f6:	eb 02                	jmp    c00051fa <f_open+0x261>
c00051f8:	85 ed                	test   ebp,ebp
c00051fa:	0f 85 b2 01 00 00    	jne    c00053b2 <f_open+0x419>
c0005200:	f7 c6 08 00 00 00    	test   esi,0x8
c0005206:	74 03                	je     c000520b <f_open+0x272>
c0005208:	83 ce 40             	or     esi,0x40
c000520b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000520f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005212:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005215:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005218:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000521f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005222:	8a 02                	mov    al,BYTE PTR [edx]
c0005224:	3c 04                	cmp    al,0x4
c0005226:	75 2a                	jne    c0005252 <f_open+0x2b9>
c0005228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005231:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005238:	30 c0                	xor    al,al
c000523a:	09 c8                	or     eax,ecx
c000523c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000523f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005243:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005246:	8d 42 10             	lea    eax,[edx+0x10]
c0005249:	89 da                	mov    edx,ebx
c000524b:	e8 e5 fb ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0005250:	eb 1c                	jmp    c000526e <f_open+0x2d5>
c0005252:	89 fa                	mov    edx,edi
c0005254:	e8 8b fb ff ff       	call   c0004de4 <ld_clust.isra.0>
c0005259:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000525f:	e8 12 ca ff ff       	call   c0001c76 <ld_dword>
c0005264:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005272:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005279:	89 03                	mov    DWORD PTR [ebx],eax
c000527b:	31 d2                	xor    edx,edx
c000527d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005281:	b9 00 02 00 00       	mov    ecx,0x200
c0005286:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000528e:	89 f0                	mov    eax,esi
c0005290:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005297:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b6:	e8 42 ca ff ff       	call   c0001cfd <mem_set>
c00052bb:	83 e6 20             	and    esi,0x20
c00052be:	75 07                	jne    c00052c7 <f_open+0x32e>
c00052c0:	31 ed                	xor    ebp,ebp
c00052c2:	e9 eb 00 00 00       	jmp    c00053b2 <f_open+0x419>
c00052c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052dd:	74 e1                	je     c00052c0 <f_open+0x327>
c00052df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ea:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f8:	31 ff                	xor    edi,edi
c00052fa:	c1 e5 09             	shl    ebp,0x9
c00052fd:	89 ee                	mov    esi,ebp
c00052ff:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005303:	89 f8                	mov    eax,edi
c0005305:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005309:	73 22                	jae    c000532d <f_open+0x394>
c000530b:	89 d8                	mov    eax,ebx
c000530d:	e8 bd dc ff ff       	call   c0002fcf <get_fat>
c0005312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005316:	89 c2                	mov    edx,eax
c0005318:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531c:	83 f8 01             	cmp    eax,0x1
c000531f:	76 10                	jbe    c0005331 <f_open+0x398>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 d9                	jne    c00052ff <f_open+0x366>
c0005326:	bd 01 00 00 00       	mov    ebp,0x1
c000532b:	eb 09                	jmp    c0005336 <f_open+0x39d>
c000532d:	31 ed                	xor    ebp,ebp
c000532f:	eb 05                	jmp    c0005336 <f_open+0x39d>
c0005331:	bd 02 00 00 00       	mov    ebp,0x2
c0005336:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005339:	85 ed                	test   ebp,ebp
c000533b:	75 75                	jne    c00053b2 <f_open+0x419>
c000533d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005341:	25 ff 01 00 00       	and    eax,0x1ff
c0005346:	0f 84 74 ff ff ff    	je     c00052c0 <f_open+0x327>
c000534c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005350:	bd 02 00 00 00       	mov    ebp,0x2
c0005355:	89 c8                	mov    eax,ecx
c0005357:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535b:	e8 a2 cb ff ff       	call   c0001f02 <clst2sect>
c0005360:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005364:	89 d7                	mov    edi,edx
c0005366:	09 c7                	or     edi,eax
c0005368:	74 48                	je     c00053b2 <f_open+0x419>
c000536a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000536e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537a:	0f ac fe 09          	shrd   esi,edi,0x9
c000537e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005382:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005386:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005389:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538d:	83 ec 0c             	sub    esp,0xc
c0005390:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005393:	6a 01                	push   0x1
c0005395:	52                   	push   edx
c0005396:	50                   	push   eax
c0005397:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539f:	50                   	push   eax
c00053a0:	e8 79 c8 ff ff       	call   c0001c1e <disk_read>
c00053a5:	83 c4 20             	add    esp,0x20
c00053a8:	85 c0                	test   eax,eax
c00053aa:	0f 95 c0             	setne  al
c00053ad:	0f b6 c0             	movzx  eax,al
c00053b0:	89 c5                	mov    ebp,eax
c00053b2:	83 ec 0c             	sub    esp,0xc
c00053b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b9:	e8 f4 30 00 00       	call   c00084b2 <ff_memfree>
c00053be:	83 c4 10             	add    esp,0x10
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	74 06                	je     c00053cb <f_open+0x432>
c00053c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cb:	83 c4 7c             	add    esp,0x7c
c00053ce:	89 e8                	mov    eax,ebp
c00053d0:	5b                   	pop    ebx
c00053d1:	5e                   	pop    esi
c00053d2:	5f                   	pop    edi
c00053d3:	5d                   	pop    ebp
c00053d4:	c3                   	ret    

c00053d5 <f_read>:
c00053d5:	55                   	push   ebp
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	53                   	push   ebx
c00053d9:	83 ec 2c             	sub    esp,0x2c
c00053dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	89 d8                	mov    eax,ebx
c00053f0:	e8 77 cf ff ff       	call   c000236c <validate>
c00053f5:	89 c5                	mov    ebp,eax
c00053f7:	85 c0                	test   eax,eax
c00053f9:	0f 85 4c 02 00 00    	jne    c000564b <f_read+0x276>
c00053ff:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005403:	85 ed                	test   ebp,ebp
c0005405:	0f 85 40 02 00 00    	jne    c000564b <f_read+0x276>
c000540b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000540f:	0f 84 31 02 00 00    	je     c0005646 <f_read+0x271>
c0005415:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005418:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000541e:	bf 00 00 00 00       	mov    edi,0x0
c0005423:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005426:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542a:	89 d1                	mov    ecx,edx
c000542c:	19 f9                	sbb    ecx,edi
c000542e:	0f 83 cf 00 00 00    	jae    c0005503 <f_read+0x12e>
c0005434:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005438:	e9 c6 00 00 00       	jmp    c0005503 <f_read+0x12e>
c000543d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005440:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005443:	89 d0                	mov    eax,edx
c0005445:	25 ff 01 00 00       	and    eax,0x1ff
c000544a:	0f 85 c9 01 00 00    	jne    c0005619 <f_read+0x244>
c0005450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005454:	89 d6                	mov    esi,edx
c0005456:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545a:	89 cf                	mov    edi,ecx
c000545c:	48                   	dec    eax
c000545d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005461:	21 f0                	and    eax,esi
c0005463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005467:	0f 84 a6 00 00 00    	je     c0005513 <f_read+0x13e>
c000546d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005471:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005474:	89 c8                	mov    eax,ecx
c0005476:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005479:	e8 84 ca ff ff       	call   c0001f02 <clst2sect>
c000547e:	89 d7                	mov    edi,edx
c0005480:	09 c7                	or     edi,eax
c0005482:	0f 84 b4 00 00 00    	je     c000553c <f_read+0x167>
c0005488:	31 ff                	xor    edi,edi
c000548a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000548e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005491:	01 c6                	add    esi,eax
c0005493:	11 d7                	adc    edi,edx
c0005495:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549d:	0f 86 fd 00 00 00    	jbe    c00055a0 <f_read+0x1cb>
c00054a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ab:	c1 e8 09             	shr    eax,0x9
c00054ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b5:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b8:	39 c2                	cmp    edx,eax
c00054ba:	76 07                	jbe    c00054c3 <f_read+0xee>
c00054bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c3:	83 ec 0c             	sub    esp,0xc
c00054c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ca:	57                   	push   edi
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d4:	50                   	push   eax
c00054d5:	e8 44 c7 ff ff       	call   c0001c1e <disk_read>
c00054da:	83 c4 20             	add    esp,0x20
c00054dd:	85 c0                	test   eax,eax
c00054df:	75 6e                	jne    c000554f <f_read+0x17a>
c00054e1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e5:	78 7e                	js     c0005565 <f_read+0x190>
c00054e7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ea:	c1 e6 09             	shl    esi,0x9
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fb:	01 30                	add    DWORD PTR [eax],esi
c00054fd:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005500:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005503:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005508:	0f 85 2f ff ff ff    	jne    c000543d <f_read+0x68>
c000550e:	e9 38 01 00 00       	jmp    c000564b <f_read+0x276>
c0005513:	89 c8                	mov    eax,ecx
c0005515:	09 d0                	or     eax,edx
c0005517:	75 05                	jne    c000551e <f_read+0x149>
c0005519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551c:	eb 19                	jmp    c0005537 <f_read+0x162>
c000551e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005522:	74 09                	je     c000552d <f_read+0x158>
c0005524:	89 d8                	mov    eax,ebx
c0005526:	e8 f8 c9 ff ff       	call   c0001f23 <clmt_clust>
c000552b:	eb 0a                	jmp    c0005537 <f_read+0x162>
c000552d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005530:	89 d8                	mov    eax,ebx
c0005532:	e8 98 da ff ff       	call   c0002fcf <get_fat>
c0005537:	83 f8 01             	cmp    eax,0x1
c000553a:	77 0e                	ja     c000554a <f_read+0x175>
c000553c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005540:	bd 02 00 00 00       	mov    ebp,0x2
c0005545:	e9 01 01 00 00       	jmp    c000564b <f_read+0x276>
c000554a:	83 f8 ff             	cmp    eax,0xffffffff
c000554d:	75 0e                	jne    c000555d <f_read+0x188>
c000554f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005553:	bd 01 00 00 00       	mov    ebp,0x1
c0005558:	e9 ee 00 00 00       	jmp    c000564b <f_read+0x276>
c000555d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005560:	e9 08 ff ff ff       	jmp    c000546d <f_read+0x98>
c0005565:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005568:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556b:	29 f0                	sub    eax,esi
c000556d:	19 fa                	sbb    edx,edi
c000556f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005572:	89 d7                	mov    edi,edx
c0005574:	ba 00 00 00 00       	mov    edx,0x0
c0005579:	89 f9                	mov    ecx,edi
c000557b:	19 d1                	sbb    ecx,edx
c000557d:	0f 83 64 ff ff ff    	jae    c00054e7 <f_read+0x112>
c0005583:	89 c7                	mov    edi,eax
c0005585:	8d 53 50             	lea    edx,[ebx+0x50]
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558f:	b9 00 02 00 00       	mov    ecx,0x200
c0005594:	01 f8                	add    eax,edi
c0005596:	e8 4d c7 ff ff       	call   c0001ce8 <mem_cpy>
c000559b:	e9 47 ff ff ff       	jmp    c00054e7 <f_read+0x112>
c00055a0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ad:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b1:	75 05                	jne    c00055b8 <f_read+0x1e3>
c00055b3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b6:	74 5b                	je     c0005613 <f_read+0x23e>
c00055b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c3:	79 2a                	jns    c00055ef <f_read+0x21a>
c00055c5:	83 ec 0c             	sub    esp,0xc
c00055c8:	6a 01                	push   0x1
c00055ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 54 c6 ff ff       	call   c0001c34 <disk_write>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 64 ff ff ff    	jne    c000554f <f_read+0x17a>
c00055eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ef:	83 ec 0c             	sub    esp,0xc
c00055f2:	6a 01                	push   0x1
c00055f4:	57                   	push   edi
c00055f5:	56                   	push   esi
c00055f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005602:	50                   	push   eax
c0005603:	e8 16 c6 ff ff       	call   c0001c1e <disk_read>
c0005608:	83 c4 20             	add    esp,0x20
c000560b:	85 c0                	test   eax,eax
c000560d:	0f 85 3c ff ff ff    	jne    c000554f <f_read+0x17a>
c0005613:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005616:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005619:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561c:	ba 00 02 00 00       	mov    edx,0x200
c0005621:	25 ff 01 00 00       	and    eax,0x1ff
c0005626:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562a:	29 c2                	sub    edx,eax
c000562c:	39 d6                	cmp    esi,edx
c000562e:	76 02                	jbe    c0005632 <f_read+0x25d>
c0005630:	89 d6                	mov    esi,edx
c0005632:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005636:	89 f1                	mov    ecx,esi
c0005638:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563c:	e8 a7 c6 ff ff       	call   c0001ce8 <mem_cpy>
c0005641:	e9 a7 fe ff ff       	jmp    c00054ed <f_read+0x118>
c0005646:	bd 07 00 00 00       	mov    ebp,0x7
c000564b:	83 c4 2c             	add    esp,0x2c
c000564e:	89 e8                	mov    eax,ebp
c0005650:	5b                   	pop    ebx
c0005651:	5e                   	pop    esi
c0005652:	5f                   	pop    edi
c0005653:	5d                   	pop    ebp
c0005654:	c3                   	ret    

c0005655 <f_write>:
c0005655:	55                   	push   ebp
c0005656:	57                   	push   edi
c0005657:	56                   	push   esi
c0005658:	53                   	push   ebx
c0005659:	83 ec 2c             	sub    esp,0x2c
c000565c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005660:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000566e:	89 d8                	mov    eax,ebx
c0005670:	e8 f7 cc ff ff       	call   c000236c <validate>
c0005675:	89 c5                	mov    ebp,eax
c0005677:	85 c0                	test   eax,eax
c0005679:	0f 85 86 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000567f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005683:	85 ed                	test   ebp,ebp
c0005685:	0f 85 7a 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000568b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000568f:	0f 84 6b 02 00 00    	je     c0005900 <f_write+0x2ab>
c0005695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005699:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569c:	0f 84 43 01 00 00    	je     c00057e5 <f_write+0x190>
c00056a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a5:	89 c1                	mov    ecx,eax
c00056a7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ab:	0f 83 34 01 00 00    	jae    c00057e5 <f_write+0x190>
c00056b1:	f7 d0                	not    eax
c00056b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b7:	e9 29 01 00 00       	jmp    c00057e5 <f_write+0x190>
c00056bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056bf:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c2:	89 d0                	mov    eax,edx
c00056c4:	25 ff 01 00 00       	and    eax,0x1ff
c00056c9:	0f 85 00 02 00 00    	jne    c00058cf <f_write+0x27a>
c00056cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d3:	89 d6                	mov    esi,edx
c00056d5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d9:	89 cf                	mov    edi,ecx
c00056db:	48                   	dec    eax
c00056dc:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e0:	21 f0                	and    eax,esi
c00056e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e6:	0f 84 06 01 00 00    	je     c00057f2 <f_write+0x19d>
c00056ec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f0:	0f 88 6e 01 00 00    	js     c0005864 <f_write+0x20f>
c00056f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056fd:	89 c8                	mov    eax,ecx
c00056ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005703:	e8 fa c7 ff ff       	call   c0001f02 <clst2sect>
c0005708:	89 d1                	mov    ecx,edx
c000570a:	09 c1                	or     ecx,eax
c000570c:	0f 84 1c 01 00 00    	je     c000582e <f_write+0x1d9>
c0005712:	31 ff                	xor    edi,edi
c0005714:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571c:	01 c6                	add    esi,eax
c000571e:	11 d7                	adc    edi,edx
c0005720:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005728:	0f 86 63 01 00 00    	jbe    c0005891 <f_write+0x23c>
c000572e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005736:	c1 e8 09             	shr    eax,0x9
c0005739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005741:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005745:	39 c2                	cmp    edx,eax
c0005747:	76 08                	jbe    c0005751 <f_write+0xfc>
c0005749:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005751:	83 ec 0c             	sub    esp,0xc
c0005754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005758:	57                   	push   edi
c0005759:	56                   	push   esi
c000575a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000575e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005762:	50                   	push   eax
c0005763:	e8 cc c4 ff ff       	call   c0001c34 <disk_write>
c0005768:	83 c4 20             	add    esp,0x20
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 ce 00 00 00    	jne    c0005841 <f_write+0x1ec>
c0005773:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005779:	29 f0                	sub    eax,esi
c000577b:	19 fa                	sbb    edx,edi
c000577d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005781:	89 d7                	mov    edi,edx
c0005783:	ba 00 00 00 00       	mov    edx,0x0
c0005788:	89 f9                	mov    ecx,edi
c000578a:	19 d1                	sbb    ecx,edx
c000578c:	73 1c                	jae    c00057aa <f_write+0x155>
c000578e:	89 c7                	mov    edi,eax
c0005790:	b9 00 02 00 00       	mov    ecx,0x200
c0005795:	c1 e7 09             	shl    edi,0x9
c0005798:	8d 43 50             	lea    eax,[ebx+0x50]
c000579b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000579f:	89 fa                	mov    edx,edi
c00057a1:	e8 42 c5 ff ff       	call   c0001ce8 <mem_cpy>
c00057a6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ae:	c1 e6 09             	shl    esi,0x9
c00057b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b5:	31 ff                	xor    edi,edi
c00057b7:	01 30                	add    DWORD PTR [eax],esi
c00057b9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ca:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cd:	89 c1                	mov    ecx,eax
c00057cf:	39 f2                	cmp    edx,esi
c00057d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d7:	19 f9                	sbb    ecx,edi
c00057d9:	73 04                	jae    c00057df <f_write+0x18a>
c00057db:	89 f2                	mov    edx,esi
c00057dd:	89 f8                	mov    eax,edi
c00057df:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ea:	0f 85 cc fe ff ff    	jne    c00056bc <f_write+0x67>
c00057f0:	eb 2e                	jmp    c0005820 <f_write+0x1cb>
c00057f2:	89 c8                	mov    eax,ecx
c00057f4:	09 d0                	or     eax,edx
c00057f6:	75 0b                	jne    c0005803 <f_write+0x1ae>
c00057f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 28                	jne    c0005829 <f_write+0x1d4>
c0005801:	eb 12                	jmp    c0005815 <f_write+0x1c0>
c0005803:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005807:	74 09                	je     c0005812 <f_write+0x1bd>
c0005809:	89 d8                	mov    eax,ebx
c000580b:	e8 13 c7 ff ff       	call   c0001f23 <clmt_clust>
c0005810:	eb 0a                	jmp    c000581c <f_write+0x1c7>
c0005812:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005815:	89 d8                	mov    eax,ebx
c0005817:	e8 a1 da ff ff       	call   c00032bd <create_chain>
c000581c:	85 c0                	test   eax,eax
c000581e:	75 09                	jne    c0005829 <f_write+0x1d4>
c0005820:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005824:	e9 dc 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c0005829:	83 f8 01             	cmp    eax,0x1
c000582c:	75 0e                	jne    c000583c <f_write+0x1e7>
c000582e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005832:	bd 02 00 00 00       	mov    ebp,0x2
c0005837:	e9 c9 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000583c:	83 f8 ff             	cmp    eax,0xffffffff
c000583f:	75 0e                	jne    c000584f <f_write+0x1fa>
c0005841:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005845:	bd 01 00 00 00       	mov    ebp,0x1
c000584a:	e9 b6 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000584f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005852:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005856:	0f 85 90 fe ff ff    	jne    c00056ec <f_write+0x97>
c000585c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000585f:	e9 88 fe ff ff       	jmp    c00056ec <f_write+0x97>
c0005864:	83 ec 0c             	sub    esp,0xc
c0005867:	8d 43 50             	lea    eax,[ebx+0x50]
c000586a:	6a 01                	push   0x1
c000586c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000586f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005872:	50                   	push   eax
c0005873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005877:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587b:	50                   	push   eax
c000587c:	e8 b3 c3 ff ff       	call   c0001c34 <disk_write>
c0005881:	83 c4 20             	add    esp,0x20
c0005884:	85 c0                	test   eax,eax
c0005886:	75 b9                	jne    c0005841 <f_write+0x1ec>
c0005888:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588c:	e9 65 fe ff ff       	jmp    c00056f6 <f_write+0xa1>
c0005891:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005894:	75 05                	jne    c000589b <f_write+0x246>
c0005896:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005899:	74 2e                	je     c00058c9 <f_write+0x274>
c000589b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a7:	73 20                	jae    c00058c9 <f_write+0x274>
c00058a9:	83 ec 0c             	sub    esp,0xc
c00058ac:	8d 43 50             	lea    eax,[ebx+0x50]
c00058af:	6a 01                	push   0x1
c00058b1:	57                   	push   edi
c00058b2:	56                   	push   esi
c00058b3:	50                   	push   eax
c00058b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b8:	50                   	push   eax
c00058b9:	e8 60 c3 ff ff       	call   c0001c1e <disk_read>
c00058be:	83 c4 20             	add    esp,0x20
c00058c1:	85 c0                	test   eax,eax
c00058c3:	0f 85 78 ff ff ff    	jne    c0005841 <f_write+0x1ec>
c00058c9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058cc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d2:	ba 00 02 00 00       	mov    edx,0x200
c00058d7:	25 ff 01 00 00       	and    eax,0x1ff
c00058dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e0:	29 c2                	sub    edx,eax
c00058e2:	39 d6                	cmp    esi,edx
c00058e4:	76 02                	jbe    c00058e8 <f_write+0x293>
c00058e6:	89 d6                	mov    esi,edx
c00058e8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ec:	89 f1                	mov    ecx,esi
c00058ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f2:	e8 f1 c3 ff ff       	call   c0001ce8 <mem_cpy>
c00058f7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fb:	e9 b1 fe ff ff       	jmp    c00057b1 <f_write+0x15c>
c0005900:	bd 07 00 00 00       	mov    ebp,0x7
c0005905:	83 c4 2c             	add    esp,0x2c
c0005908:	89 e8                	mov    eax,ebp
c000590a:	5b                   	pop    ebx
c000590b:	5e                   	pop    esi
c000590c:	5f                   	pop    edi
c000590d:	5d                   	pop    ebp
c000590e:	c3                   	ret    

c000590f <f_sync>:
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 64             	sub    esp,0x64
c0005914:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005918:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591c:	89 d8                	mov    eax,ebx
c000591e:	e8 49 ca ff ff       	call   c000236c <validate>
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 85 ba 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000592b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000592e:	f6 c2 40             	test   dl,0x40
c0005931:	0f 84 ae 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c0005937:	84 d2                	test   dl,dl
c0005939:	79 33                	jns    c000596e <f_sync+0x5f>
c000593b:	83 ec 0c             	sub    esp,0xc
c000593e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005941:	6a 01                	push   0x1
c0005943:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005946:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005949:	50                   	push   eax
c000594a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005952:	50                   	push   eax
c0005953:	e8 dc c2 ff ff       	call   c0001c34 <disk_write>
c0005958:	83 c4 20             	add    esp,0x20
c000595b:	89 c2                	mov    edx,eax
c000595d:	b8 01 00 00 00       	mov    eax,0x1
c0005962:	85 d2                	test   edx,edx
c0005964:	0f 85 7b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000596a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005972:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005975:	0f 85 11 01 00 00    	jne    c0005a8c <f_sync+0x17d>
c000597b:	89 d8                	mov    eax,ebx
c000597d:	e8 13 d6 ff ff       	call   c0002f95 <fill_first_frag>
c0005982:	85 c0                	test   eax,eax
c0005984:	0f 85 5b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000598a:	83 c9 ff             	or     ecx,0xffffffff
c000598d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 c9 d5 ff ff       	call   c0002f60 <fill_last_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 46 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000599f:	83 ec 0c             	sub    esp,0xc
c00059a2:	68 60 04 00 00       	push   0x460
c00059a7:	e8 f0 2a 00 00       	call   c000849c <ff_memalloc>
c00059ac:	83 c4 10             	add    esp,0x10
c00059af:	89 c6                	mov    esi,eax
c00059b1:	b8 11 00 00 00       	mov    eax,0x11
c00059b6:	85 f6                	test   esi,esi
c00059b8:	0f 84 27 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c00059be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ce:	89 da                	mov    edx,ebx
c00059d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d4:	e8 af df ff ff       	call   c0003988 <load_obj_xdir>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 95 00 00 00    	jne    c0005a76 <f_sync+0x167>
c00059e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ec:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ef:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f2:	83 ca 01             	or     edx,0x1
c00059f5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fe:	83 c0 34             	add    eax,0x34
c0005a01:	e8 d9 c2 ff ff       	call   c0001cdf <st_dword>
c0005a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a10:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a13:	83 c0 38             	add    eax,0x38
c0005a16:	e8 c7 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a28:	83 c0 28             	add    eax,0x28
c0005a2b:	e8 b2 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a34:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3c:	83 c0 0c             	add    eax,0xc
c0005a3f:	e8 9b c2 ff ff       	call   c0001cdf <st_dword>
c0005a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a4f:	31 d2                	xor    edx,edx
c0005a51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a54:	83 c0 10             	add    eax,0x10
c0005a57:	e8 83 c2 ff ff       	call   c0001cdf <st_dword>
c0005a5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a60:	e8 62 e1 ff ff       	call   c0003bc7 <store_xdir>
c0005a65:	85 c0                	test   eax,eax
c0005a67:	75 0d                	jne    c0005a76 <f_sync+0x167>
c0005a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6d:	e8 00 eb ff ff       	call   c0004572 <sync_fs>
c0005a72:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7a:	83 ec 0c             	sub    esp,0xc
c0005a7d:	56                   	push   esi
c0005a7e:	e8 2f 2a 00 00       	call   c00084b2 <ff_memfree>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	eb 59                	jmp    c0005ae5 <f_sync+0x1d6>
c0005a8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a8f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a92:	e8 b0 c9 ff ff       	call   c0002447 <move_window>
c0005a97:	85 c0                	test   eax,eax
c0005a99:	75 4a                	jne    c0005ae5 <f_sync+0x1d6>
c0005a9b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a9e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa2:	89 f2                	mov    edx,esi
c0005aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa9:	e8 5f f3 ff ff       	call   c0004e0d <st_clust.isra.1>
c0005aae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab1:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab4:	e8 26 c2 ff ff       	call   c0001cdf <st_dword>
c0005ab9:	8d 46 16             	lea    eax,[esi+0x16]
c0005abc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac1:	e8 19 c2 ff ff       	call   c0001cdf <st_dword>
c0005ac6:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac9:	31 d2                	xor    edx,edx
c0005acb:	e8 0b c2 ff ff       	call   c0001cdb <st_word>
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	e8 91 ea ff ff       	call   c0004572 <sync_fs>
c0005ae1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae5:	83 c4 64             	add    esp,0x64
c0005ae8:	5b                   	pop    ebx
c0005ae9:	5e                   	pop    esi
c0005aea:	c3                   	ret    

c0005aeb <f_close>:
c0005aeb:	53                   	push   ebx
c0005aec:	83 ec 24             	sub    esp,0x24
c0005aef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af3:	53                   	push   ebx
c0005af4:	e8 16 fe ff ff       	call   c000590f <f_sync>
c0005af9:	83 c4 10             	add    esp,0x10
c0005afc:	85 c0                	test   eax,eax
c0005afe:	75 15                	jne    c0005b15 <f_close+0x2a>
c0005b00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b04:	89 d8                	mov    eax,ebx
c0005b06:	e8 61 c8 ff ff       	call   c000236c <validate>
c0005b0b:	85 c0                	test   eax,eax
c0005b0d:	75 06                	jne    c0005b15 <f_close+0x2a>
c0005b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b15:	83 c4 18             	add    esp,0x18
c0005b18:	5b                   	pop    ebx
c0005b19:	c3                   	ret    

c0005b1a <f_lseek>:
c0005b1a:	55                   	push   ebp
c0005b1b:	57                   	push   edi
c0005b1c:	56                   	push   esi
c0005b1d:	53                   	push   ebx
c0005b1e:	83 ec 3c             	sub    esp,0x3c
c0005b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3a:	e8 2d c8 ff ff       	call   c000236c <validate>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	85 c0                	test   eax,eax
c0005b45:	0f 85 7a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b4b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b53:	85 c0                	test   eax,eax
c0005b55:	0f 85 6a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b62:	74 0c                	je     c0005b70 <f_lseek+0x56>
c0005b64:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b67:	85 c0                	test   eax,eax
c0005b69:	75 1f                	jne    c0005b8a <f_lseek+0x70>
c0005b6b:	e9 b5 01 00 00       	jmp    c0005d25 <f_lseek+0x20b>
c0005b70:	83 c9 ff             	or     ecx,0xffffffff
c0005b73:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 e3 d3 ff ff       	call   c0002f60 <fill_last_frag>
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	74 e3                	je     c0005b64 <f_lseek+0x4a>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	e9 3b 04 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005b8a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b8f:	0f 85 ac 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b95:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b99:	0f 85 a2 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b9f:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba7:	be 02 00 00 00       	mov    esi,0x2
c0005bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb0:	85 ed                	test   ebp,ebp
c0005bb2:	74 73                	je     c0005c27 <f_lseek+0x10d>
c0005bb4:	89 e9                	mov    ecx,ebp
c0005bb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbd:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc0:	89 ca                	mov    edx,ecx
c0005bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc6:	89 d8                	mov    eax,ebx
c0005bc8:	e8 02 d4 ff ff       	call   c0002fcf <get_fat>
c0005bcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd1:	83 f8 01             	cmp    eax,0x1
c0005bd4:	77 11                	ja     c0005be7 <f_lseek+0xcd>
c0005bd6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bda:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be2:	e9 de 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005be7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bea:	75 11                	jne    c0005bfd <f_lseek+0xe3>
c0005bec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf8:	e9 c8 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005bfd:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c00:	89 c1                	mov    ecx,eax
c0005c02:	39 c2                	cmp    edx,eax
c0005c04:	74 b7                	je     c0005bbd <f_lseek+0xa3>
c0005c06:	83 c6 02             	add    esi,0x2
c0005c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0d:	72 0b                	jb     c0005c1a <f_lseek+0x100>
c0005c0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c12:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c15:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c17:	83 c7 08             	add    edi,0x8
c0005c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c1e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c21:	76 04                	jbe    c0005c27 <f_lseek+0x10d>
c0005c23:	89 c5                	mov    ebp,eax
c0005c25:	eb 8d                	jmp    c0005bb4 <f_lseek+0x9a>
c0005c27:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c2e:	89 30                	mov    DWORD PTR [eax],esi
c0005c30:	0f 87 87 03 00 00    	ja     c0005fbd <f_lseek+0x4a3>
c0005c36:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3c:	e9 84 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005c41:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c53:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c5e:	73 0f                	jae    c0005c6f <f_lseek+0x155>
c0005c60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c85:	0f 84 3a 03 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005c8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c93:	83 c6 ff             	add    esi,0xffffffff
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	83 d7 ff             	adc    edi,0xffffffff
c0005c9b:	89 f2                	mov    edx,esi
c0005c9d:	89 f9                	mov    ecx,edi
c0005c9f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca6:	e8 78 c2 ff ff       	call   c0001f23 <clmt_clust>
c0005cab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005caf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb2:	89 c2                	mov    edx,eax
c0005cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb8:	89 c8                	mov    eax,ecx
c0005cba:	e8 43 c2 ff ff       	call   c0001f02 <clst2sect>
c0005cbf:	89 d7                	mov    edi,edx
c0005cc1:	09 c7                	or     edi,eax
c0005cc3:	0f 84 0d ff ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005cc9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd3:	0f 84 ec 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005cd9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cec:	4d                   	dec    ebp
c0005ced:	31 ff                	xor    edi,edi
c0005cef:	21 ee                	and    esi,ebp
c0005cf1:	01 c6                	add    esi,eax
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	11 d7                	adc    edi,edx
c0005cf8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfb:	39 fa                	cmp    edx,edi
c0005cfd:	75 08                	jne    c0005d07 <f_lseek+0x1ed>
c0005cff:	39 f0                	cmp    eax,esi
c0005d01:	0f 84 be 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005d07:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d0e:	0f 89 80 02 00 00    	jns    c0005f94 <f_lseek+0x47a>
c0005d14:	83 ec 0c             	sub    esp,0xc
c0005d17:	6a 01                	push   0x1
c0005d19:	52                   	push   edx
c0005d1a:	50                   	push   eax
c0005d1b:	55                   	push   ebp
c0005d1c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d20:	e9 5a 02 00 00       	jmp    c0005f7f <f_lseek+0x465>
c0005d25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d29:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2c:	74 16                	je     c0005d44 <f_lseek+0x22a>
c0005d2e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d33:	76 0f                	jbe    c0005d44 <f_lseek+0x22a>
c0005d35:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4d:	89 c7                	mov    edi,eax
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	73 0d                	jae    c0005d62 <f_lseek+0x248>
c0005d55:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d59:	75 07                	jne    c0005d62 <f_lseek+0x248>
c0005d5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d65:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d73:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7d:	75 09                	jne    c0005d88 <f_lseek+0x26e>
c0005d7f:	31 f6                	xor    esi,esi
c0005d81:	31 ff                	xor    edi,edi
c0005d83:	e9 af 01 00 00       	jmp    c0005f37 <f_lseek+0x41d>
c0005d88:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8c:	89 d7                	mov    edi,edx
c0005d8e:	c1 e1 09             	shl    ecx,0x9
c0005d91:	09 c7                	or     edi,eax
c0005d93:	89 cd                	mov    ebp,ecx
c0005d95:	74 6d                	je     c0005e04 <f_lseek+0x2ea>
c0005d97:	83 c0 ff             	add    eax,0xffffffff
c0005d9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d9e:	83 d2 ff             	adc    edx,0xffffffff
c0005da1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da8:	83 c0 ff             	add    eax,0xffffffff
c0005dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005daf:	83 d2 ff             	adc    edx,0xffffffff
c0005db2:	31 ff                	xor    edi,edi
c0005db4:	57                   	push   edi
c0005db5:	51                   	push   ecx
c0005db6:	52                   	push   edx
c0005db7:	50                   	push   eax
c0005db8:	e8 b3 0c 02 00       	call   c0026a70 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc8:	57                   	push   edi
c0005dc9:	55                   	push   ebp
c0005dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd2:	e8 99 0c 02 00       	call   c0026a70 <__udivdi3>
c0005dd7:	83 c4 10             	add    esp,0x10
c0005dda:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de2:	19 d1                	sbb    ecx,edx
c0005de4:	72 1e                	jb     c0005e04 <f_lseek+0x2ea>
c0005de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dea:	89 e9                	mov    ecx,ebp
c0005dec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005def:	f7 d9                	neg    ecx
c0005df1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dfe:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e02:	eb 28                	jmp    c0005e2c <f_lseek+0x312>
c0005e04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e07:	85 c0                	test   eax,eax
c0005e09:	75 1e                	jne    c0005e29 <f_lseek+0x30f>
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	89 d8                	mov    eax,ebx
c0005e0f:	e8 a9 d4 ff ff       	call   c00032bd <create_chain>
c0005e14:	83 f8 01             	cmp    eax,0x1
c0005e17:	0f 84 b9 fd ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0005e20:	0f 84 c6 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005e26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e29:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2c:	85 c0                	test   eax,eax
c0005e2e:	0f 84 4b ff ff ff    	je     c0005d7f <f_lseek+0x265>
c0005e34:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e40:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e47:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e51:	0f 83 9d 00 00 00    	jae    c0005ef4 <f_lseek+0x3da>
c0005e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e62:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e66:	01 f2                	add    edx,esi
c0005e68:	11 f9                	adc    ecx,edi
c0005e6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e72:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e75:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e78:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7b:	f6 c1 02             	test   cl,0x2
c0005e7e:	74 35                	je     c0005eb5 <f_lseek+0x39b>
c0005e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e84:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e87:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e8e:	73 16                	jae    c0005ea6 <f_lseek+0x38c>
c0005e90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e98:	88 ca                	mov    dl,cl
c0005e9a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9d:	83 ca 40             	or     edx,0x40
c0005ea0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea6:	89 c2                	mov    edx,eax
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 0e d4 ff ff       	call   c00032bd <create_chain>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	75 0b                	jne    c0005ebe <f_lseek+0x3a4>
c0005eb3:	eb 30                	jmp    c0005ee5 <f_lseek+0x3cb>
c0005eb5:	89 c2                	mov    edx,eax
c0005eb7:	89 d8                	mov    eax,ebx
c0005eb9:	e8 11 d1 ff ff       	call   c0002fcf <get_fat>
c0005ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec1:	0f 84 25 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005ec7:	83 f8 01             	cmp    eax,0x1
c0005eca:	0f 86 06 fd ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed7:	0f 86 f9 fc ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005edd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee0:	e9 5b ff ff ff       	jmp    c0005e40 <f_lseek+0x326>
c0005ee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005efe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f01:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f04:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0a:	0f 84 6f fe ff ff    	je     c0005d7f <f_lseek+0x265>
c0005f10:	89 c2                	mov    edx,eax
c0005f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f16:	e8 e7 bf ff ff       	call   c0001f02 <clst2sect>
c0005f1b:	89 d7                	mov    edi,edx
c0005f1d:	09 c7                	or     edi,eax
c0005f1f:	0f 84 b1 fc ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005f25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f30:	c1 ef 09             	shr    edi,0x9
c0005f33:	01 c6                	add    esi,eax
c0005f35:	11 d7                	adc    edi,edx
c0005f37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f40:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f43:	19 d1                	sbb    ecx,edx
c0005f45:	73 0a                	jae    c0005f51 <f_lseek+0x437>
c0005f47:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f51:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f56:	74 6d                	je     c0005fc5 <f_lseek+0x4ab>
c0005f58:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f5e:	39 fa                	cmp    edx,edi
c0005f60:	75 04                	jne    c0005f66 <f_lseek+0x44c>
c0005f62:	39 f0                	cmp    eax,esi
c0005f64:	74 5f                	je     c0005fc5 <f_lseek+0x4ab>
c0005f66:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f69:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6d:	79 25                	jns    c0005f94 <f_lseek+0x47a>
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	6a 01                	push   0x1
c0005f74:	52                   	push   edx
c0005f75:	50                   	push   eax
c0005f76:	55                   	push   ebp
c0005f77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7f:	50                   	push   eax
c0005f80:	e8 af bc ff ff       	call   c0001c34 <disk_write>
c0005f85:	83 c4 20             	add    esp,0x20
c0005f88:	85 c0                	test   eax,eax
c0005f8a:	0f 85 5c fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005f90:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	6a 01                	push   0x1
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	55                   	push   ebp
c0005f9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa4:	50                   	push   eax
c0005fa5:	e8 74 bc ff ff       	call   c0001c1e <disk_read>
c0005faa:	83 c4 20             	add    esp,0x20
c0005fad:	85 c0                	test   eax,eax
c0005faf:	0f 85 37 fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005fb5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbb:	eb 08                	jmp    c0005fc5 <f_lseek+0x4ab>
c0005fbd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc9:	83 c4 3c             	add    esp,0x3c
c0005fcc:	5b                   	pop    ebx
c0005fcd:	5e                   	pop    esi
c0005fce:	5f                   	pop    edi
c0005fcf:	5d                   	pop    ebp
c0005fd0:	c3                   	ret    

c0005fd1 <f_opendir>:
c0005fd1:	56                   	push   esi
c0005fd2:	b8 09 00 00 00       	mov    eax,0x9
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 24             	sub    esp,0x24
c0005fdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fdf:	85 db                	test   ebx,ebx
c0005fe1:	0f 84 e6 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0005fe7:	31 c9                	xor    ecx,ecx
c0005fe9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fed:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff1:	e8 03 c7 ff ff       	call   c00026f9 <mount_volume>
c0005ff6:	85 c0                	test   eax,eax
c0005ff8:	0f 85 c9 00 00 00    	jne    c00060c7 <f_opendir+0xf6>
c0005ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006002:	83 ec 0c             	sub    esp,0xc
c0006005:	89 03                	mov    DWORD PTR [ebx],eax
c0006007:	68 60 04 00 00       	push   0x460
c000600c:	e8 8b 24 00 00       	call   c000849c <ff_memalloc>
c0006011:	83 c4 10             	add    esp,0x10
c0006014:	89 c6                	mov    esi,eax
c0006016:	b8 11 00 00 00       	mov    eax,0x11
c000601b:	85 f6                	test   esi,esi
c000601d:	0f 84 aa 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0006023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006027:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006030:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006033:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006037:	89 d8                	mov    eax,ebx
c0006039:	e8 31 ee ff ff       	call   c0004e6f <follow_path>
c000603e:	85 c0                	test   eax,eax
c0006040:	75 61                	jne    c00060a3 <f_opendir+0xd2>
c0006042:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006046:	78 46                	js     c000608e <f_opendir+0xbd>
c0006048:	b8 05 00 00 00       	mov    eax,0x5
c000604d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006051:	74 50                	je     c00060a3 <f_opendir+0xd2>
c0006053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006057:	8a 01                	mov    al,BYTE PTR [ecx]
c0006059:	3c 04                	cmp    al,0x4
c000605b:	75 26                	jne    c0006083 <f_opendir+0xb2>
c000605d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006060:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006063:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006066:	30 d2                	xor    dl,dl
c0006068:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606c:	09 c2                	or     edx,eax
c000606e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006071:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006074:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006077:	89 da                	mov    edx,ebx
c0006079:	8d 41 10             	lea    eax,[ecx+0x10]
c000607c:	e8 b4 ed ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006081:	eb 0b                	jmp    c000608e <f_opendir+0xbd>
c0006083:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006086:	e8 59 ed ff ff       	call   c0004de4 <ld_clust.isra.0>
c000608b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000608e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006092:	31 d2                	xor    edx,edx
c0006094:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006098:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609c:	89 d8                	mov    eax,ebx
c000609e:	e8 22 d1 ff ff       	call   c00031c5 <dir_sdi>
c00060a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	56                   	push   esi
c00060ab:	e8 02 24 00 00       	call   c00084b2 <ff_memfree>
c00060b0:	83 c4 10             	add    esp,0x10
c00060b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b7:	83 f8 04             	cmp    eax,0x4
c00060ba:	74 06                	je     c00060c2 <f_opendir+0xf1>
c00060bc:	85 c0                	test   eax,eax
c00060be:	74 0d                	je     c00060cd <f_opendir+0xfc>
c00060c0:	eb 05                	jmp    c00060c7 <f_opendir+0xf6>
c00060c2:	b8 05 00 00 00       	mov    eax,0x5
c00060c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cd:	83 c4 24             	add    esp,0x24
c00060d0:	5b                   	pop    ebx
c00060d1:	5e                   	pop    esi
c00060d2:	c3                   	ret    

c00060d3 <f_closedir>:
c00060d3:	53                   	push   ebx
c00060d4:	83 ec 18             	sub    esp,0x18
c00060d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 86 c2 ff ff       	call   c000236c <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 06                	jne    c00060f0 <f_closedir+0x1d>
c00060ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f0:	83 c4 18             	add    esp,0x18
c00060f3:	5b                   	pop    ebx
c00060f4:	c3                   	ret    

c00060f5 <f_readdir>:
c00060f5:	57                   	push   edi
c00060f6:	56                   	push   esi
c00060f7:	53                   	push   ebx
c00060f8:	83 ec 20             	sub    esp,0x20
c00060fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006107:	89 d8                	mov    eax,ebx
c0006109:	e8 5e c2 ff ff       	call   c000236c <validate>
c000610e:	85 c0                	test   eax,eax
c0006110:	75 77                	jne    c0006189 <f_readdir+0x94>
c0006112:	85 ff                	test   edi,edi
c0006114:	75 0b                	jne    c0006121 <f_readdir+0x2c>
c0006116:	31 d2                	xor    edx,edx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 a6 d0 ff ff       	call   c00031c5 <dir_sdi>
c000611f:	eb 68                	jmp    c0006189 <f_readdir+0x94>
c0006121:	83 ec 0c             	sub    esp,0xc
c0006124:	68 60 04 00 00       	push   0x460
c0006129:	e8 6e 23 00 00       	call   c000849c <ff_memalloc>
c000612e:	83 c4 10             	add    esp,0x10
c0006131:	89 c6                	mov    esi,eax
c0006133:	b8 11 00 00 00       	mov    eax,0x11
c0006138:	85 f6                	test   esi,esi
c000613a:	74 4d                	je     c0006189 <f_readdir+0x94>
c000613c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006140:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006146:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006149:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614c:	31 d2                	xor    edx,edx
c000614e:	89 d8                	mov    eax,ebx
c0006150:	e8 80 d8 ff ff       	call   c00039d5 <dir_read>
c0006155:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615a:	75 19                	jne    c0006175 <f_readdir+0x80>
c000615c:	89 fa                	mov    edx,edi
c000615e:	89 d8                	mov    eax,ebx
c0006160:	e8 7e ea ff ff       	call   c0004be3 <get_fileinfo>
c0006165:	31 d2                	xor    edx,edx
c0006167:	89 d8                	mov    eax,ebx
c0006169:	e8 af d5 ff ff       	call   c000371d <dir_next>
c000616e:	83 f8 04             	cmp    eax,0x4
c0006171:	75 02                	jne    c0006175 <f_readdir+0x80>
c0006173:	31 c0                	xor    eax,eax
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	83 ec 0c             	sub    esp,0xc
c000617c:	56                   	push   esi
c000617d:	e8 30 23 00 00       	call   c00084b2 <ff_memfree>
c0006182:	83 c4 10             	add    esp,0x10
c0006185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006189:	83 c4 20             	add    esp,0x20
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	c3                   	ret    

c0006190 <f_stat>:
c0006190:	57                   	push   edi
c0006191:	31 c9                	xor    ecx,ecx
c0006193:	56                   	push   esi
c0006194:	53                   	push   ebx
c0006195:	83 ec 50             	sub    esp,0x50
c0006198:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619c:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a4:	e8 50 c5 ff ff       	call   c00026f9 <mount_volume>
c00061a9:	89 c3                	mov    ebx,eax
c00061ab:	85 c0                	test   eax,eax
c00061ad:	75 67                	jne    c0006216 <f_stat+0x86>
c00061af:	83 ec 0c             	sub    esp,0xc
c00061b2:	bb 11 00 00 00       	mov    ebx,0x11
c00061b7:	68 60 04 00 00       	push   0x460
c00061bc:	e8 db 22 00 00       	call   c000849c <ff_memalloc>
c00061c1:	83 c4 10             	add    esp,0x10
c00061c4:	89 c6                	mov    esi,eax
c00061c6:	85 c0                	test   eax,eax
c00061c8:	74 4c                	je     c0006216 <f_stat+0x86>
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061de:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e2:	e8 88 ec ff ff       	call   c0004e6f <follow_path>
c00061e7:	89 c3                	mov    ebx,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	75 1d                	jne    c000620a <f_stat+0x7a>
c00061ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f2:	78 11                	js     c0006205 <f_stat+0x75>
c00061f4:	85 ff                	test   edi,edi
c00061f6:	74 12                	je     c000620a <f_stat+0x7a>
c00061f8:	89 fa                	mov    edx,edi
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 e0 e9 ff ff       	call   c0004be3 <get_fileinfo>
c0006203:	eb 05                	jmp    c000620a <f_stat+0x7a>
c0006205:	bb 06 00 00 00       	mov    ebx,0x6
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	56                   	push   esi
c000620e:	e8 9f 22 00 00       	call   c00084b2 <ff_memfree>
c0006213:	83 c4 10             	add    esp,0x10
c0006216:	83 c4 50             	add    esp,0x50
c0006219:	89 d8                	mov    eax,ebx
c000621b:	5b                   	pop    ebx
c000621c:	5e                   	pop    esi
c000621d:	5f                   	pop    edi
c000621e:	c3                   	ret    

c000621f <f_getfree>:
c000621f:	55                   	push   ebp
c0006220:	31 c9                	xor    ecx,ecx
c0006222:	57                   	push   edi
c0006223:	56                   	push   esi
c0006224:	53                   	push   ebx
c0006225:	83 ec 5c             	sub    esp,0x5c
c0006228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006230:	e8 c4 c4 ff ff       	call   c00026f9 <mount_volume>
c0006235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006239:	85 c0                	test   eax,eax
c000623b:	0f 85 9d 01 00 00    	jne    c00063de <f_getfree+0x1bf>
c0006241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006245:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006249:	89 02                	mov    DWORD PTR [edx],eax
c000624b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000624e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006251:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006254:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006258:	39 f2                	cmp    edx,esi
c000625a:	77 0b                	ja     c0006267 <f_getfree+0x48>
c000625c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006260:	89 10                	mov    DWORD PTR [eax],edx
c0006262:	e9 77 01 00 00       	jmp    c00063de <f_getfree+0x1bf>
c0006267:	8a 10                	mov    dl,BYTE PTR [eax]
c0006269:	80 fa 01             	cmp    dl,0x1
c000626c:	75 3a                	jne    c00062a8 <f_getfree+0x89>
c000626e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006272:	be 02 00 00 00       	mov    esi,0x2
c0006277:	31 db                	xor    ebx,ebx
c0006279:	89 f2                	mov    edx,esi
c000627b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000627f:	e8 4b cd ff ff       	call   c0002fcf <get_fat>
c0006284:	83 f8 ff             	cmp    eax,0xffffffff
c0006287:	0f 84 28 01 00 00    	je     c00063b5 <f_getfree+0x196>
c000628d:	83 f8 01             	cmp    eax,0x1
c0006290:	0f 84 29 01 00 00    	je     c00063bf <f_getfree+0x1a0>
c0006296:	83 d3 00             	adc    ebx,0x0
c0006299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629d:	46                   	inc    esi
c000629e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a1:	77 d6                	ja     c0006279 <f_getfree+0x5a>
c00062a3:	e9 25 01 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c00062a8:	80 fa 04             	cmp    dl,0x4
c00062ab:	0f 85 88 00 00 00    	jne    c0006339 <f_getfree+0x11a>
c00062b1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b4:	31 ed                	xor    ebp,ebp
c00062b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c1:	31 db                	xor    ebx,ebx
c00062c3:	85 ed                	test   ebp,ebp
c00062c5:	75 3f                	jne    c0006306 <f_getfree+0xe7>
c00062c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062cf:	83 c0 01             	add    eax,0x1
c00062d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d6:	83 d2 00             	adc    edx,0x0
c00062d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e9:	e8 59 c1 ff ff       	call   c0002447 <move_window>
c00062ee:	85 c0                	test   eax,eax
c00062f0:	0f 85 d3 00 00 00    	jne    c00063c9 <f_getfree+0x1aa>
c00062f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006311:	89 cf                	mov    edi,ecx
c0006313:	85 f6                	test   esi,esi
c0006315:	74 12                	je     c0006329 <f_getfree+0x10a>
c0006317:	88 c1                	mov    cl,al
c0006319:	83 e1 01             	and    ecx,0x1
c000631c:	80 f9 01             	cmp    cl,0x1
c000631f:	83 d3 00             	adc    ebx,0x0
c0006322:	d0 e8                	shr    al,1
c0006324:	4e                   	dec    esi
c0006325:	39 fe                	cmp    esi,edi
c0006327:	75 ea                	jne    c0006313 <f_getfree+0xf4>
c0006329:	45                   	inc    ebp
c000632a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006330:	85 f6                	test   esi,esi
c0006332:	75 8f                	jne    c00062c3 <f_getfree+0xa4>
c0006334:	e9 94 00 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c0006339:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000633f:	31 f6                	xor    esi,esi
c0006341:	31 db                	xor    ebx,ebx
c0006343:	85 f6                	test   esi,esi
c0006345:	75 1b                	jne    c0006362 <f_getfree+0x143>
c0006347:	89 d7                	mov    edi,edx
c0006349:	89 cd                	mov    ebp,ecx
c000634b:	83 c7 01             	add    edi,0x1
c000634e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006352:	83 d5 00             	adc    ebp,0x0
c0006355:	e8 ed c0 ff ff       	call   c0002447 <move_window>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 6b                	jne    c00063c9 <f_getfree+0x1aa>
c000635e:	89 fa                	mov    edx,edi
c0006360:	89 e9                	mov    ecx,ebp
c0006362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006366:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000636e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006375:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006379:	75 11                	jne    c000638c <f_getfree+0x16d>
c000637b:	e8 e9 b8 ff ff       	call   c0001c69 <ld_word>
c0006380:	66 83 f8 01          	cmp    ax,0x1
c0006384:	83 d3 00             	adc    ebx,0x0
c0006387:	83 c6 02             	add    esi,0x2
c000638a:	eb 13                	jmp    c000639f <f_getfree+0x180>
c000638c:	e8 e5 b8 ff ff       	call   c0001c76 <ld_dword>
c0006391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006396:	83 f8 01             	cmp    eax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 04             	add    esi,0x4
c000639f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ad:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b1:	75 90                	jne    c0006343 <f_getfree+0x124>
c00063b3:	eb 18                	jmp    c00063cd <f_getfree+0x1ae>
c00063b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bd:	eb 0e                	jmp    c00063cd <f_getfree+0x1ae>
c00063bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c7:	eb 04                	jmp    c00063cd <f_getfree+0x1ae>
c00063c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d1:	89 18                	mov    DWORD PTR [eax],ebx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063da:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e2:	83 c4 5c             	add    esp,0x5c
c00063e5:	5b                   	pop    ebx
c00063e6:	5e                   	pop    esi
c00063e7:	5f                   	pop    edi
c00063e8:	5d                   	pop    ebp
c00063e9:	c3                   	ret    

c00063ea <f_truncate>:
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 14             	sub    esp,0x14
c00063ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f7:	89 d8                	mov    eax,ebx
c00063f9:	e8 6e bf ff ff       	call   c000236c <validate>
c00063fe:	89 c6                	mov    esi,eax
c0006400:	85 c0                	test   eax,eax
c0006402:	0f 85 d2 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006408:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640c:	85 f6                	test   esi,esi
c000640e:	0f 85 c6 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006414:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006418:	0f 84 b7 00 00 00    	je     c00064d5 <f_truncate+0xeb>
c000641e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006421:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006424:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006427:	89 d1                	mov    ecx,edx
c0006429:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642c:	0f 83 a8 00 00 00    	jae    c00064da <f_truncate+0xf0>
c0006432:	09 c2                	or     edx,eax
c0006434:	75 15                	jne    c000644b <f_truncate+0x61>
c0006436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006439:	31 c9                	xor    ecx,ecx
c000643b:	89 d8                	mov    eax,ebx
c000643d:	e8 7a d0 ff ff       	call   c00034bc <remove_chain>
c0006442:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006449:	eb 35                	jmp    c0006480 <f_truncate+0x96>
c000644b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000644e:	89 d8                	mov    eax,ebx
c0006450:	e8 7a cb ff ff       	call   c0002fcf <get_fat>
c0006455:	89 c2                	mov    edx,eax
c0006457:	b8 01 00 00 00       	mov    eax,0x1
c000645c:	83 fa ff             	cmp    edx,0xffffffff
c000645f:	74 1f                	je     c0006480 <f_truncate+0x96>
c0006461:	b8 02 00 00 00       	mov    eax,0x2
c0006466:	83 fa 01             	cmp    edx,0x1
c0006469:	74 15                	je     c0006480 <f_truncate+0x96>
c000646b:	31 c0                	xor    eax,eax
c000646d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006471:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006474:	76 0a                	jbe    c0006480 <f_truncate+0x96>
c0006476:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006479:	89 d8                	mov    eax,ebx
c000647b:	e8 3c d0 ff ff       	call   c00034bc <remove_chain>
c0006480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006486:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006489:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000648f:	83 ca 40             	or     edx,0x40
c0006492:	85 c0                	test   eax,eax
c0006494:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006497:	75 35                	jne    c00064ce <f_truncate+0xe4>
c0006499:	84 d2                	test   dl,dl
c000649b:	79 3d                	jns    c00064da <f_truncate+0xf0>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a3:	6a 01                	push   0x1
c00064a5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ab:	50                   	push   eax
c00064ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b4:	50                   	push   eax
c00064b5:	e8 7a b7 ff ff       	call   c0001c34 <disk_write>
c00064ba:	83 c4 20             	add    esp,0x20
c00064bd:	85 c0                	test   eax,eax
c00064bf:	75 08                	jne    c00064c9 <f_truncate+0xdf>
c00064c1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c5:	31 f6                	xor    esi,esi
c00064c7:	eb 11                	jmp    c00064da <f_truncate+0xf0>
c00064c9:	b8 01 00 00 00       	mov    eax,0x1
c00064ce:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	eb 05                	jmp    c00064da <f_truncate+0xf0>
c00064d5:	be 07 00 00 00       	mov    esi,0x7
c00064da:	89 f0                	mov    eax,esi
c00064dc:	83 c4 14             	add    esp,0x14
c00064df:	5b                   	pop    ebx
c00064e0:	5e                   	pop    esi
c00064e1:	c3                   	ret    

c00064e2 <f_unlink>:
c00064e2:	56                   	push   esi
c00064e3:	b9 02 00 00 00       	mov    ecx,0x2
c00064e8:	53                   	push   ebx
c00064e9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fa:	e8 fa c1 ff ff       	call   c00026f9 <mount_volume>
c00064ff:	85 c0                	test   eax,eax
c0006501:	0f 85 55 01 00 00    	jne    c000665c <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	83 ec 0c             	sub    esp,0xc
c000650e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006512:	68 60 04 00 00       	push   0x460
c0006517:	e8 80 1f 00 00       	call   c000849c <ff_memalloc>
c000651c:	83 c4 10             	add    esp,0x10
c000651f:	89 c3                	mov    ebx,eax
c0006521:	b8 11 00 00 00       	mov    eax,0x11
c0006526:	85 db                	test   ebx,ebx
c0006528:	0f 84 2e 01 00 00    	je     c000665c <f_unlink+0x17a>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006538:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000653e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006545:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006549:	e8 21 e9 ff ff       	call   c0004e6f <follow_path>
c000654e:	85 c0                	test   eax,eax
c0006550:	0f 85 f2 00 00 00    	jne    c0006648 <f_unlink+0x166>
c0006556:	b8 06 00 00 00       	mov    eax,0x6
c000655b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006563:	0f 88 df 00 00 00    	js     c0006648 <f_unlink+0x166>
c0006569:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000656e:	74 0a                	je     c000657a <f_unlink+0x98>
c0006570:	b8 07 00 00 00       	mov    eax,0x7
c0006575:	e9 ce 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c000657a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006582:	8a 02                	mov    al,BYTE PTR [edx]
c0006584:	3c 04                	cmp    al,0x4
c0006586:	75 12                	jne    c000659a <f_unlink+0xb8>
c0006588:	8d 42 10             	lea    eax,[edx+0x10]
c000658b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000658f:	e8 a1 e8 ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006598:	eb 0e                	jmp    c00065a8 <f_unlink+0xc6>
c000659a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a1:	e8 3e e8 ff ff       	call   c0004de4 <ld_clust.isra.0>
c00065a6:	89 c6                	mov    esi,eax
c00065a8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ad:	75 12                	jne    c00065c1 <f_unlink+0xdf>
c00065af:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b3:	e8 94 d6 ff ff       	call   c0003c4c <dir_remove>
c00065b8:	85 c0                	test   eax,eax
c00065ba:	74 6c                	je     c0006628 <f_unlink+0x146>
c00065bc:	e9 87 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c00065c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d6:	75 21                	jne    c00065f9 <f_unlink+0x117>
c00065d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ee:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f9:	31 d2                	xor    edx,edx
c00065fb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006602:	e8 be cb ff ff       	call   c00031c5 <dir_sdi>
c0006607:	85 c0                	test   eax,eax
c0006609:	75 3d                	jne    c0006648 <f_unlink+0x166>
c000660b:	31 d2                	xor    edx,edx
c000660d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006614:	e8 bc d3 ff ff       	call   c00039d5 <dir_read>
c0006619:	85 c0                	test   eax,eax
c000661b:	0f 84 4f ff ff ff    	je     c0006570 <f_unlink+0x8e>
c0006621:	83 f8 04             	cmp    eax,0x4
c0006624:	75 22                	jne    c0006648 <f_unlink+0x166>
c0006626:	eb 87                	jmp    c00065af <f_unlink+0xcd>
c0006628:	85 f6                	test   esi,esi
c000662a:	75 0b                	jne    c0006637 <f_unlink+0x155>
c000662c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006630:	e8 3d df ff ff       	call   c0004572 <sync_fs>
c0006635:	eb 11                	jmp    c0006648 <f_unlink+0x166>
c0006637:	31 c9                	xor    ecx,ecx
c0006639:	89 f2                	mov    edx,esi
c000663b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000663f:	e8 78 ce ff ff       	call   c00034bc <remove_chain>
c0006644:	85 c0                	test   eax,eax
c0006646:	74 e4                	je     c000662c <f_unlink+0x14a>
c0006648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664c:	83 ec 0c             	sub    esp,0xc
c000664f:	53                   	push   ebx
c0006650:	e8 5d 1e 00 00       	call   c00084b2 <ff_memfree>
c0006655:	83 c4 10             	add    esp,0x10
c0006658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	c3                   	ret    

c0006665 <f_mkdir>:
c0006665:	57                   	push   edi
c0006666:	b9 02 00 00 00       	mov    ecx,0x2
c000666b:	56                   	push   esi
c000666c:	53                   	push   ebx
c000666d:	83 c4 80             	add    esp,0xffffff80
c0006670:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006674:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667b:	e8 79 c0 ff ff       	call   c00026f9 <mount_volume>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 85 fe 01 00 00    	jne    c0006888 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	bb 11 00 00 00       	mov    ebx,0x11
c0006693:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	68 60 04 00 00       	push   0x460
c000669f:	e8 f8 1d 00 00       	call   c000849c <ff_memalloc>
c00066a4:	83 c4 10             	add    esp,0x10
c00066a7:	89 c7                	mov    edi,eax
c00066a9:	85 c0                	test   eax,eax
c00066ab:	0f 84 d7 01 00 00    	je     c0006888 <f_mkdir+0x223>
c00066b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066cc:	e8 9e e7 ff ff       	call   c0004e6f <follow_path>
c00066d1:	89 c3                	mov    ebx,eax
c00066d3:	85 c0                	test   eax,eax
c00066d5:	74 3e                	je     c0006715 <f_mkdir+0xb0>
c00066d7:	83 f8 04             	cmp    eax,0x4
c00066da:	75 3e                	jne    c000671a <f_mkdir+0xb5>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	31 d2                	xor    edx,edx
c00066e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ea:	e8 ce cb ff ff       	call   c00032bd <create_chain>
c00066ef:	89 c6                	mov    esi,eax
c00066f1:	85 c0                	test   eax,eax
c00066f3:	74 0c                	je     c0006701 <f_mkdir+0x9c>
c00066f5:	bb 02 00 00 00       	mov    ebx,0x2
c00066fa:	83 f8 01             	cmp    eax,0x1
c00066fd:	74 07                	je     c0006706 <f_mkdir+0xa1>
c00066ff:	eb 2a                	jmp    c000672b <f_mkdir+0xc6>
c0006701:	bb 07 00 00 00       	mov    ebx,0x7
c0006706:	31 c9                	xor    ecx,ecx
c0006708:	89 f2                	mov    edx,esi
c000670a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000670e:	e8 a9 cd ff ff       	call   c00034bc <remove_chain>
c0006713:	eb 05                	jmp    c000671a <f_mkdir+0xb5>
c0006715:	bb 08 00 00 00       	mov    ebx,0x8
c000671a:	83 ec 0c             	sub    esp,0xc
c000671d:	57                   	push   edi
c000671e:	e8 8f 1d 00 00       	call   c00084b2 <ff_memfree>
c0006723:	83 c4 10             	add    esp,0x10
c0006726:	e9 5d 01 00 00       	jmp    c0006888 <f_mkdir+0x223>
c000672b:	bb 01 00 00 00       	mov    ebx,0x1
c0006730:	83 f8 ff             	cmp    eax,0xffffffff
c0006733:	74 d1                	je     c0006706 <f_mkdir+0xa1>
c0006735:	89 f2                	mov    edx,esi
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	e8 c4 ce ff ff       	call   c0003604 <dir_clear>
c0006740:	89 c3                	mov    ebx,eax
c0006742:	85 c0                	test   eax,eax
c0006744:	75 c0                	jne    c0006706 <f_mkdir+0xa1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674d:	74 69                	je     c00067b8 <f_mkdir+0x153>
c000674f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006754:	83 c0 54             	add    eax,0x54
c0006757:	ba 20 00 00 00       	mov    edx,0x20
c000675c:	e8 9c b5 ff ff       	call   c0001cfd <mem_set>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	ba 00 00 21 50       	mov    edx,0x50210000
c000676a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000676e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006772:	83 c0 6a             	add    eax,0x6a
c0006775:	e8 65 b5 ff ff       	call   c0001cdf <st_dword>
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	89 f1                	mov    ecx,esi
c0006780:	8d 50 54             	lea    edx,[eax+0x54]
c0006783:	e8 85 e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	b9 20 00 00 00       	mov    ecx,0x20
c0006791:	8d 50 54             	lea    edx,[eax+0x54]
c0006794:	83 c0 74             	add    eax,0x74
c0006797:	e8 4c b5 ff ff       	call   c0001ce8 <mem_cpy>
c000679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a8:	8d 50 74             	lea    edx,[eax+0x74]
c00067ab:	e8 5d e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067bc:	e8 2f db ff ff       	call   c00042f0 <dir_register>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 85 3b ff ff ff    	jne    c0006706 <f_mkdir+0xa1>
c00067cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d2:	75 74                	jne    c0006848 <f_mkdir+0x1e3>
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067dc:	83 c0 0c             	add    eax,0xc
c00067df:	e8 fb b4 ff ff       	call   c0001cdf <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	89 f2                	mov    edx,esi
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	83 c0 34             	add    eax,0x34
c00067f0:	e8 ea b4 ff ff       	call   c0001cdf <st_dword>
c00067f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006800:	c1 e2 09             	shl    edx,0x9
c0006803:	83 c0 38             	add    eax,0x38
c0006806:	e8 d4 b4 ff ff       	call   c0001cdf <st_dword>
c000680b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006813:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006816:	c1 e2 09             	shl    edx,0x9
c0006819:	83 c0 28             	add    eax,0x28
c000681c:	e8 be b4 ff ff       	call   c0001cdf <st_dword>
c0006821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006837:	e8 8b d3 ff ff       	call   c0003bc7 <store_xdir>
c000683c:	89 c3                	mov    ebx,eax
c000683e:	85 c0                	test   eax,eax
c0006840:	0f 85 d4 fe ff ff    	jne    c000671a <f_mkdir+0xb5>
c0006846:	eb 30                	jmp    c0006878 <f_mkdir+0x213>
c0006848:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006851:	83 c0 16             	add    eax,0x16
c0006854:	e8 86 b4 ff ff       	call   c0001cdf <st_dword>
c0006859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685d:	89 f1                	mov    ecx,esi
c000685f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006863:	e8 a5 e5 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006868:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	e8 f1 dc ff ff       	call   c0004572 <sync_fs>
c0006881:	89 c3                	mov    ebx,eax
c0006883:	e9 92 fe ff ff       	jmp    c000671a <f_mkdir+0xb5>
c0006888:	83 ec 80             	sub    esp,0xffffff80
c000688b:	89 d8                	mov    eax,ebx
c000688d:	5b                   	pop    ebx
c000688e:	5e                   	pop    esi
c000688f:	5f                   	pop    edi
c0006890:	c3                   	ret    

c0006891 <f_rename>:
c0006891:	55                   	push   ebp
c0006892:	57                   	push   edi
c0006893:	56                   	push   esi
c0006894:	53                   	push   ebx
c0006895:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a2:	e8 a4 b9 ff ff       	call   c000224b <get_ldnumber>
c00068a7:	b9 02 00 00 00       	mov    ecx,0x2
c00068ac:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b7:	e8 3d be ff ff       	call   c00026f9 <mount_volume>
c00068bc:	85 c0                	test   eax,eax
c00068be:	0f 85 b5 02 00 00    	jne    c0006b79 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	83 ec 0c             	sub    esp,0xc
c00068cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068cf:	68 60 04 00 00       	push   0x460
c00068d4:	e8 c3 1b 00 00       	call   c000849c <ff_memalloc>
c00068d9:	83 c4 10             	add    esp,0x10
c00068dc:	89 c3                	mov    ebx,eax
c00068de:	b8 11 00 00 00       	mov    eax,0x11
c00068e3:	85 db                	test   ebx,ebx
c00068e5:	0f 84 8e 02 00 00    	je     c0006b79 <f_rename+0x2e8>
c00068eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ef:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006902:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006906:	e8 64 e5 ff ff       	call   c0004e6f <follow_path>
c000690b:	85 c0                	test   eax,eax
c000690d:	0f 85 52 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006913:	b8 06 00 00 00       	mov    eax,0x6
c0006918:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006920:	0f 85 3f 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692d:	0f 85 05 01 00 00    	jne    c0006a38 <f_rename+0x1a7>
c0006933:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006936:	b9 40 00 00 00       	mov    ecx,0x40
c000693b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693f:	e8 a4 b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006944:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006949:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006954:	e8 8f b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006959:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 03 e5 ff ff       	call   c0004e6f <follow_path>
c000696c:	85 c0                	test   eax,eax
c000696e:	75 29                	jne    c0006999 <f_rename+0x108>
c0006970:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006974:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697b:	74 0a                	je     c0006987 <f_rename+0xf6>
c000697d:	b8 08 00 00 00       	mov    eax,0x8
c0006982:	e9 de 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006987:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000698e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006995:	75 e6                	jne    c000697d <f_rename+0xec>
c0006997:	eb 09                	jmp    c00069a2 <f_rename+0x111>
c0006999:	83 f8 04             	cmp    eax,0x4
c000699c:	0f 85 c3 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 42 d9 ff ff       	call   c00042f0 <dir_register>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	0f 85 af 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c0:	89 c5                	mov    ebp,eax
c00069c2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c9:	8d 46 24             	lea    eax,[esi+0x24]
c00069cc:	e8 98 b2 ff ff       	call   c0001c69 <ld_word>
c00069d1:	b9 40 00 00 00       	mov    ecx,0x40
c00069d6:	89 c7                	mov    edi,eax
c00069d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069dc:	89 f0                	mov    eax,esi
c00069de:	e8 05 b3 ff ff       	call   c0001ce8 <mem_cpy>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	89 e9                	mov    ecx,ebp
c00069e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ec:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fa:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069fd:	0f b7 d7             	movzx  edx,di
c0006a00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a03:	83 c0 24             	add    eax,0x24
c0006a06:	e8 d0 b2 ff ff       	call   c0001cdb <st_word>
c0006a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a12:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a15:	a8 10                	test   al,0x10
c0006a17:	75 06                	jne    c0006a1f <f_rename+0x18e>
c0006a19:	83 c8 20             	or     eax,0x20
c0006a1c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a1f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a26:	e8 9c d1 ff ff       	call   c0003bc7 <store_xdir>
c0006a2b:	85 c0                	test   eax,eax
c0006a2d:	0f 84 1c 01 00 00    	je     c0006b4f <f_rename+0x2be>
c0006a33:	e9 2d 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006a38:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a48:	e8 9b b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a4d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a52:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a56:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5d:	e8 86 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a62:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a69:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a70:	e8 fa e3 ff ff       	call   c0004e6f <follow_path>
c0006a75:	85 c0                	test   eax,eax
c0006a77:	75 27                	jne    c0006aa0 <f_rename+0x20f>
c0006a79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a84:	0f 85 f3 fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a91:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a98:	0f 85 df fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a9e:	eb 09                	jmp    c0006aa9 <f_rename+0x218>
c0006aa0:	83 f8 04             	cmp    eax,0x4
c0006aa3:	0f 85 bc 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006aa9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab0:	e8 3b d8 ff ff       	call   c00042f0 <dir_register>
c0006ab5:	85 c0                	test   eax,eax
c0006ab7:	0f 85 a8 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006abd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac4:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac9:	8d 46 0d             	lea    eax,[esi+0xd]
c0006acc:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad0:	e8 13 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006ad5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad9:	a8 10                	test   al,0x10
c0006adb:	75 03                	jne    c0006ae0 <f_rename+0x24f>
c0006add:	83 c8 20             	or     eax,0x20
c0006ae0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aeb:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aef:	74 5e                	je     c0006b4f <f_rename+0x2be>
c0006af1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afc:	74 51                	je     c0006b4f <f_rename+0x2be>
c0006afe:	89 f2                	mov    edx,esi
c0006b00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b04:	8a 07                	mov    al,BYTE PTR [edi]
c0006b06:	e8 d9 e2 ff ff       	call   c0004de4 <ld_clust.isra.0>
c0006b0b:	89 c2                	mov    edx,eax
c0006b0d:	89 f8                	mov    eax,edi
c0006b0f:	e8 ee b3 ff ff       	call   c0001f02 <clst2sect>
c0006b14:	89 c6                	mov    esi,eax
c0006b16:	89 d1                	mov    ecx,edx
c0006b18:	b8 02 00 00 00       	mov    eax,0x2
c0006b1d:	09 f2                	or     edx,esi
c0006b1f:	74 44                	je     c0006b65 <f_rename+0x2d4>
c0006b21:	89 f2                	mov    edx,esi
c0006b23:	89 f8                	mov    eax,edi
c0006b25:	e8 1d b9 ff ff       	call   c0002447 <move_window>
c0006b2a:	85 c0                	test   eax,eax
c0006b2c:	75 37                	jne    c0006b65 <f_rename+0x2d4>
c0006b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b32:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b36:	75 17                	jne    c0006b4f <f_rename+0x2be>
c0006b38:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b42:	e8 c6 e2 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b4f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b53:	e8 f4 d0 ff ff       	call   c0003c4c <dir_remove>
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	75 09                	jne    c0006b65 <f_rename+0x2d4>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	e8 0d da ff ff       	call   c0004572 <sync_fs>
c0006b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	53                   	push   ebx
c0006b6d:	e8 40 19 00 00       	call   c00084b2 <ff_memfree>
c0006b72:	83 c4 10             	add    esp,0x10
c0006b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b79:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b7f:	5b                   	pop    ebx
c0006b80:	5e                   	pop    esi
c0006b81:	5f                   	pop    edi
c0006b82:	5d                   	pop    ebp
c0006b83:	c3                   	ret    

c0006b84 <f_chmod>:
c0006b84:	57                   	push   edi
c0006b85:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8a:	56                   	push   esi
c0006b8b:	53                   	push   ebx
c0006b8c:	83 ec 60             	sub    esp,0x60
c0006b8f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b93:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b97:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b9f:	e8 55 bb ff ff       	call   c00026f9 <mount_volume>
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	0f 85 af 00 00 00    	jne    c0006c5b <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	83 ec 0c             	sub    esp,0xc
c0006bb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb7:	68 60 04 00 00       	push   0x460
c0006bbc:	e8 db 18 00 00       	call   c000849c <ff_memalloc>
c0006bc1:	83 c4 10             	add    esp,0x10
c0006bc4:	89 c6                	mov    esi,eax
c0006bc6:	b8 11 00 00 00       	mov    eax,0x11
c0006bcb:	85 f6                	test   esi,esi
c0006bcd:	0f 84 88 00 00 00    	je     c0006c5b <f_chmod+0xd7>
c0006bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006beb:	e8 7f e2 ff ff       	call   c0004e6f <follow_path>
c0006bf0:	85 c0                	test   eax,eax
c0006bf2:	75 53                	jne    c0006c47 <f_chmod+0xc3>
c0006bf4:	b8 06 00 00 00       	mov    eax,0x6
c0006bf9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bfe:	75 47                	jne    c0006c47 <f_chmod+0xc3>
c0006c00:	89 f9                	mov    ecx,edi
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	83 e1 27             	and    ecx,0x27
c0006c09:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0c:	75 1d                	jne    c0006c2b <f_chmod+0xa7>
c0006c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c11:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c14:	21 cb                	and    ebx,ecx
c0006c16:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c19:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c20:	e8 a2 cf ff ff       	call   c0003bc7 <store_xdir>
c0006c25:	85 c0                	test   eax,eax
c0006c27:	75 1e                	jne    c0006c47 <f_chmod+0xc3>
c0006c29:	eb 13                	jmp    c0006c3e <f_chmod+0xba>
c0006c2b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c2f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c32:	21 cb                	and    ebx,ecx
c0006c34:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c37:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	e8 2b d9 ff ff       	call   c0004572 <sync_fs>
c0006c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4b:	83 ec 0c             	sub    esp,0xc
c0006c4e:	56                   	push   esi
c0006c4f:	e8 5e 18 00 00       	call   c00084b2 <ff_memfree>
c0006c54:	83 c4 10             	add    esp,0x10
c0006c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5b:	83 c4 60             	add    esp,0x60
c0006c5e:	5b                   	pop    ebx
c0006c5f:	5e                   	pop    esi
c0006c60:	5f                   	pop    edi
c0006c61:	c3                   	ret    

c0006c62 <f_utime>:
c0006c62:	56                   	push   esi
c0006c63:	b9 02 00 00 00       	mov    ecx,0x2
c0006c68:	53                   	push   ebx
c0006c69:	83 ec 64             	sub    esp,0x64
c0006c6c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c78:	e8 7c ba ff ff       	call   c00026f9 <mount_volume>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	0f 85 b5 00 00 00    	jne    c0006d3a <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	83 ec 0c             	sub    esp,0xc
c0006c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c90:	68 60 04 00 00       	push   0x460
c0006c95:	e8 02 18 00 00       	call   c000849c <ff_memalloc>
c0006c9a:	83 c4 10             	add    esp,0x10
c0006c9d:	89 c3                	mov    ebx,eax
c0006c9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ca4:	85 db                	test   ebx,ebx
c0006ca6:	0f 84 8e 00 00 00    	je     c0006d3a <f_utime+0xd8>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc4:	e8 a6 e1 ff ff       	call   c0004e6f <follow_path>
c0006cc9:	85 c0                	test   eax,eax
c0006ccb:	75 59                	jne    c0006d26 <f_utime+0xc4>
c0006ccd:	b8 06 00 00 00       	mov    eax,0x6
c0006cd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd7:	75 4d                	jne    c0006d26 <f_utime+0xc4>
c0006cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce5:	c1 e2 10             	shl    edx,0x10
c0006ce8:	09 ca                	or     edx,ecx
c0006cea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ced:	75 1a                	jne    c0006d09 <f_utime+0xa7>
c0006cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf2:	83 c0 0c             	add    eax,0xc
c0006cf5:	e8 e5 af ff ff       	call   c0001cdf <st_dword>
c0006cfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cfe:	e8 c4 ce ff ff       	call   c0003bc7 <store_xdir>
c0006d03:	85 c0                	test   eax,eax
c0006d05:	75 1f                	jne    c0006d26 <f_utime+0xc4>
c0006d07:	eb 14                	jmp    c0006d1d <f_utime+0xbb>
c0006d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0d:	83 c0 16             	add    eax,0x16
c0006d10:	e8 ca af ff ff       	call   c0001cdf <st_dword>
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	e8 4c d8 ff ff       	call   c0004572 <sync_fs>
c0006d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2a:	83 ec 0c             	sub    esp,0xc
c0006d2d:	53                   	push   ebx
c0006d2e:	e8 7f 17 00 00       	call   c00084b2 <ff_memfree>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3a:	83 c4 64             	add    esp,0x64
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	c3                   	ret    

c0006d40 <f_getlabel>:
c0006d40:	55                   	push   ebp
c0006d41:	31 c9                	xor    ecx,ecx
c0006d43:	57                   	push   edi
c0006d44:	56                   	push   esi
c0006d45:	53                   	push   ebx
c0006d46:	83 ec 6c             	sub    esp,0x6c
c0006d49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d54:	e8 a0 b9 ff ff       	call   c00026f9 <mount_volume>
c0006d59:	89 c6                	mov    esi,eax
c0006d5b:	85 c0                	test   eax,eax
c0006d5d:	0f 85 c1 01 00 00    	jne    c0006f24 <f_getlabel+0x1e4>
c0006d63:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6b:	0f 84 5f 01 00 00    	je     c0006ed0 <f_getlabel+0x190>
c0006d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d75:	31 d2                	xor    edx,edx
c0006d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d87:	e8 39 c4 ff ff       	call   c00031c5 <dir_sdi>
c0006d8c:	85 c0                	test   eax,eax
c0006d8e:	0f 85 2d 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006d94:	ba 01 00 00 00       	mov    edx,0x1
c0006d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9d:	e8 33 cc ff ff       	call   c00039d5 <dir_read>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	0f 85 17 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db1:	74 09                	je     c0006dbc <f_getlabel+0x7c>
c0006db3:	31 db                	xor    ebx,ebx
c0006db5:	31 c9                	xor    ecx,ecx
c0006db7:	e9 c8 00 00 00       	jmp    c0006e84 <f_getlabel+0x144>
c0006dbc:	31 ed                	xor    ebp,ebp
c0006dbe:	31 db                	xor    ebx,ebx
c0006dc0:	31 ff                	xor    edi,edi
c0006dc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dca:	39 fa                	cmp    edx,edi
c0006dcc:	76 4b                	jbe    c0006e19 <f_getlabel+0xd9>
c0006dce:	47                   	inc    edi
c0006dcf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd2:	01 d0                	add    eax,edx
c0006dd4:	e8 90 ae ff ff       	call   c0001c69 <ld_word>
c0006dd9:	66 85 ed             	test   bp,bp
c0006ddc:	75 0d                	jne    c0006deb <f_getlabel+0xab>
c0006dde:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de9:	76 28                	jbe    c0006e13 <f_getlabel+0xd3>
c0006deb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df2:	89 e9                	mov    ecx,ebp
c0006df4:	01 da                	add    edx,ebx
c0006df6:	c1 e1 10             	shl    ecx,0x10
c0006df9:	0f b7 c0             	movzx  eax,ax
c0006dfc:	09 c8                	or     eax,ecx
c0006dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0006e03:	e8 01 b0 ff ff       	call   c0001e09 <put_utf>
c0006e08:	84 c0                	test   al,al
c0006e0a:	74 0b                	je     c0006e17 <f_getlabel+0xd7>
c0006e0c:	0f b6 c0             	movzx  eax,al
c0006e0f:	01 c3                	add    ebx,eax
c0006e11:	31 c0                	xor    eax,eax
c0006e13:	89 c5                	mov    ebp,eax
c0006e15:	eb ab                	jmp    c0006dc2 <f_getlabel+0x82>
c0006e17:	31 db                	xor    ebx,ebx
c0006e19:	66 85 ed             	test   bp,bp
c0006e1c:	74 02                	je     c0006e20 <f_getlabel+0xe0>
c0006e1e:	31 db                	xor    ebx,ebx
c0006e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e27:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2b:	e9 a0 00 00 00       	jmp    c0006ed0 <f_getlabel+0x190>
c0006e30:	83 ff 0b             	cmp    edi,0xb
c0006e33:	74 11                	je     c0006e46 <f_getlabel+0x106>
c0006e35:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e41:	c1 e0 08             	shl    eax,0x8
c0006e44:	09 c2                	or     edx,eax
c0006e46:	0f b7 d2             	movzx  edx,dx
c0006e49:	50                   	push   eax
c0006e4a:	50                   	push   eax
c0006e4b:	68 b5 01 00 00       	push   0x1b5
c0006e50:	52                   	push   edx
c0006e51:	e8 03 17 00 00       	call   c0008559 <ff_oem2uni>
c0006e56:	83 c4 10             	add    esp,0x10
c0006e59:	66 85 c0             	test   ax,ax
c0006e5c:	74 46                	je     c0006ea4 <f_getlabel+0x164>
c0006e5e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e65:	0f b7 c0             	movzx  eax,ax
c0006e68:	01 da                	add    edx,ebx
c0006e6a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e6f:	e8 95 af ff ff       	call   c0001e09 <put_utf>
c0006e74:	84 c0                	test   al,al
c0006e76:	74 2c                	je     c0006ea4 <f_getlabel+0x164>
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	01 c3                	add    ebx,eax
c0006e7d:	83 ff 0b             	cmp    edi,0xb
c0006e80:	74 24                	je     c0006ea6 <f_getlabel+0x166>
c0006e82:	89 f9                	mov    ecx,edi
c0006e84:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e88:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e90:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e99:	e8 9f ae ff ff       	call   c0001d3d <dbc_1st>
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	74 a4                	je     c0006e46 <f_getlabel+0x106>
c0006ea2:	eb 8c                	jmp    c0006e30 <f_getlabel+0xf0>
c0006ea4:	31 db                	xor    ebx,ebx
c0006ea6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb7:	74 17                	je     c0006ed0 <f_getlabel+0x190>
c0006eb9:	4b                   	dec    ebx
c0006eba:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebd:	74 ee                	je     c0006ead <f_getlabel+0x16d>
c0006ebf:	eb 0f                	jmp    c0006ed0 <f_getlabel+0x190>
c0006ec1:	83 f8 04             	cmp    eax,0x4
c0006ec4:	75 5c                	jne    c0006f22 <f_getlabel+0x1e2>
c0006ec6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed8:	74 4a                	je     c0006f24 <f_getlabel+0x1e4>
c0006eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ede:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee4:	e8 5e b5 ff ff       	call   c0002447 <move_window>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	75 35                	jne    c0006f24 <f_getlabel+0x1e4>
c0006eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef3:	b8 43 00 00 00       	mov    eax,0x43
c0006ef8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efa:	80 f9 03             	cmp    cl,0x3
c0006efd:	74 0f                	je     c0006f0e <f_getlabel+0x1ce>
c0006eff:	31 c0                	xor    eax,eax
c0006f01:	80 f9 04             	cmp    cl,0x4
c0006f04:	0f 94 c0             	sete   al
c0006f07:	48                   	dec    eax
c0006f08:	83 e0 c3             	and    eax,0xffffffc3
c0006f0b:	83 c0 64             	add    eax,0x64
c0006f0e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f12:	e8 5f ad ff ff       	call   c0001c76 <ld_dword>
c0006f17:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f1e:	89 07                	mov    DWORD PTR [edi],eax
c0006f20:	eb 02                	jmp    c0006f24 <f_getlabel+0x1e4>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	83 c4 6c             	add    esp,0x6c
c0006f27:	89 f0                	mov    eax,esi
c0006f29:	5b                   	pop    ebx
c0006f2a:	5e                   	pop    esi
c0006f2b:	5f                   	pop    edi
c0006f2c:	5d                   	pop    ebp
c0006f2d:	c3                   	ret    

c0006f2e <f_setlabel>:
c0006f2e:	56                   	push   esi
c0006f2f:	b9 02 00 00 00       	mov    ecx,0x2
c0006f34:	53                   	push   ebx
c0006f35:	83 ec 74             	sub    esp,0x74
c0006f38:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f43:	e8 b1 b7 ff ff       	call   c00026f9 <mount_volume>
c0006f48:	89 c6                	mov    esi,eax
c0006f4a:	85 c0                	test   eax,eax
c0006f4c:	0f 85 41 02 00 00    	jne    c0007193 <f_setlabel+0x265>
c0006f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f59:	0f 85 8e 00 00 00    	jne    c0006fed <f_setlabel+0xbf>
c0006f5f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f64:	31 d2                	xor    edx,edx
c0006f66:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	e8 8c ad ff ff       	call   c0001cfd <mem_set>
c0006f71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7b:	0f 86 0a 01 00 00    	jbe    c000708b <f_setlabel+0x15d>
c0006f81:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f88:	e8 b6 ad ff ff       	call   c0001d43 <tchar2uni>
c0006f8d:	89 c6                	mov    esi,eax
c0006f8f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f94:	76 2a                	jbe    c0006fc0 <f_setlabel+0x92>
c0006f96:	83 f8 ff             	cmp    eax,0xffffffff
c0006f99:	74 05                	je     c0006fa0 <f_setlabel+0x72>
c0006f9b:	83 fb 09             	cmp    ebx,0x9
c0006f9e:	76 0a                	jbe    c0006faa <f_setlabel+0x7c>
c0006fa0:	be 06 00 00 00       	mov    esi,0x6
c0006fa5:	e9 e9 01 00 00       	jmp    c0007193 <f_setlabel+0x265>
c0006faa:	89 c2                	mov    edx,eax
c0006fac:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb3:	c1 ea 10             	shr    edx,0x10
c0006fb6:	01 c8                	add    eax,ecx
c0006fb8:	43                   	inc    ebx
c0006fb9:	e8 1d ad ff ff       	call   c0001cdb <st_word>
c0006fbe:	eb 04                	jmp    c0006fc4 <f_setlabel+0x96>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	74 dc                	je     c0006fa0 <f_setlabel+0x72>
c0006fc4:	89 f2                	mov    edx,esi
c0006fc6:	b8 77 94 02 c0       	mov    eax,0xc0029477
c0006fcb:	e8 5b ad ff ff       	call   c0001d2b <chk_chr>
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	75 cc                	jne    c0006fa0 <f_setlabel+0x72>
c0006fd4:	83 fb 0a             	cmp    ebx,0xa
c0006fd7:	77 c7                	ja     c0006fa0 <f_setlabel+0x72>
c0006fd9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fdc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe0:	0f b7 d6             	movzx  edx,si
c0006fe3:	01 c8                	add    eax,ecx
c0006fe5:	43                   	inc    ebx
c0006fe6:	e8 f0 ac ff ff       	call   c0001cdb <st_word>
c0006feb:	eb 84                	jmp    c0006f71 <f_setlabel+0x43>
c0006fed:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff2:	ba 20 00 00 00       	mov    edx,0x20
c0006ff7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffb:	31 db                	xor    ebx,ebx
c0006ffd:	e8 fb ac ff ff       	call   c0001cfd <mem_set>
c0007002:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007009:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700c:	76 60                	jbe    c000706e <f_setlabel+0x140>
c000700e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007015:	e8 29 ad ff ff       	call   c0001d43 <tchar2uni>
c000701a:	3d ff ff 00 00       	cmp    eax,0xffff
c000701f:	0f 87 7b ff ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	e8 97 15 00 00       	call   c00085c5 <ff_wtoupper>
c000702e:	5a                   	pop    edx
c000702f:	59                   	pop    ecx
c0007030:	68 b5 01 00 00       	push   0x1b5
c0007035:	50                   	push   eax
c0007036:	e8 8e 14 00 00       	call   c00084c9 <ff_uni2oem>
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	89 c6                	mov    esi,eax
c0007040:	66 85 c0             	test   ax,ax
c0007043:	0f 84 57 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007049:	0f b7 d0             	movzx  edx,ax
c000704c:	b8 70 94 02 c0       	mov    eax,0xc0029470
c0007051:	e8 d5 ac ff ff       	call   c0001d2b <chk_chr>
c0007056:	85 c0                	test   eax,eax
c0007058:	0f 85 42 ff ff ff    	jne    c0006fa0 <f_setlabel+0x72>
c000705e:	66 81 fe ff 00       	cmp    si,0xff
c0007063:	0f 87 14 01 00 00    	ja     c000717d <f_setlabel+0x24f>
c0007069:	e9 fa 00 00 00       	jmp    c0007168 <f_setlabel+0x23a>
c000706e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007073:	0f 84 27 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007079:	85 db                	test   ebx,ebx
c000707b:	74 0e                	je     c000708b <f_setlabel+0x15d>
c000707d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007080:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007085:	75 04                	jne    c000708b <f_setlabel+0x15d>
c0007087:	89 c3                	mov    ebx,eax
c0007089:	eb ee                	jmp    c0007079 <f_setlabel+0x14b>
c000708b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708f:	31 d2                	xor    edx,edx
c0007091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007095:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a1:	e8 1f c1 ff ff       	call   c00031c5 <dir_sdi>
c00070a6:	89 c6                	mov    esi,eax
c00070a8:	85 c0                	test   eax,eax
c00070aa:	0f 85 e3 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c00070b0:	ba 01 00 00 00       	mov    edx,0x1
c00070b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b9:	e8 17 c9 ff ff       	call   c00039d5 <dir_read>
c00070be:	85 c0                	test   eax,eax
c00070c0:	75 21                	jne    c00070e3 <f_setlabel+0x1b5>
c00070c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ca:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cd:	74 5d                	je     c000712c <f_setlabel+0x1fe>
c00070cf:	85 db                	test   ebx,ebx
c00070d1:	74 0b                	je     c00070de <f_setlabel+0x1b0>
c00070d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070dc:	eb 70                	jmp    c000714e <f_setlabel+0x220>
c00070de:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e1:	eb 70                	jmp    c0007153 <f_setlabel+0x225>
c00070e3:	83 f8 04             	cmp    eax,0x4
c00070e6:	75 7c                	jne    c0007164 <f_setlabel+0x236>
c00070e8:	85 db                	test   ebx,ebx
c00070ea:	0f 84 a3 00 00 00    	je     c0007193 <f_setlabel+0x265>
c00070f0:	ba 01 00 00 00       	mov    edx,0x1
c00070f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f9:	e8 51 ca ff ff       	call   c0003b4f <dir_alloc>
c00070fe:	89 c6                	mov    esi,eax
c0007100:	85 c0                	test   eax,eax
c0007102:	0f 85 8b 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c0007108:	31 d2                	xor    edx,edx
c000710a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710e:	b9 20 00 00 00       	mov    ecx,0x20
c0007113:	e8 e5 ab ff ff       	call   c0001cfd <mem_set>
c0007118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	75 18                	jne    c000713d <f_setlabel+0x20f>
c0007125:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000712f:	b9 16 00 00 00       	mov    ecx,0x16
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	83 c0 02             	add    eax,0x2
c000713b:	eb 9b                	jmp    c00070d8 <f_setlabel+0x1aa>
c000713d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007141:	b9 0b 00 00 00       	mov    ecx,0xb
c0007146:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714e:	e8 95 ab ff ff       	call   c0001ce8 <mem_cpy>
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	e8 0e d4 ff ff       	call   c0004572 <sync_fs>
c0007164:	89 c6                	mov    esi,eax
c0007166:	eb 2b                	jmp    c0007193 <f_setlabel+0x265>
c0007168:	83 fb 0a             	cmp    ebx,0xa
c000716b:	0f 87 2f fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007171:	89 f0                	mov    eax,esi
c0007173:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007177:	43                   	inc    ebx
c0007178:	e9 85 fe ff ff       	jmp    c0007002 <f_setlabel+0xd4>
c000717d:	83 fb 09             	cmp    ebx,0x9
c0007180:	0f 87 1a fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	66 c1 e8 08          	shr    ax,0x8
c000718c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007190:	43                   	inc    ebx
c0007191:	eb de                	jmp    c0007171 <f_setlabel+0x243>
c0007193:	89 f0                	mov    eax,esi
c0007195:	83 c4 74             	add    esp,0x74
c0007198:	5b                   	pop    ebx
c0007199:	5e                   	pop    esi
c000719a:	c3                   	ret    

c000719b <f_forward>:
c000719b:	55                   	push   ebp
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	53                   	push   ebx
c000719f:	83 ec 2c             	sub    esp,0x2c
c00071a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b4:	89 d8                	mov    eax,ebx
c00071b6:	e8 b1 b1 ff ff       	call   c000236c <validate>
c00071bb:	89 c5                	mov    ebp,eax
c00071bd:	85 c0                	test   eax,eax
c00071bf:	0f 85 aa 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c9:	85 ed                	test   ebp,ebp
c00071cb:	0f 85 9e 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071d1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d5:	0f 84 8f 01 00 00    	je     c000736a <f_forward+0x1cf>
c00071db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e4:	bf 00 00 00 00       	mov    edi,0x0
c00071e9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ec:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f0:	89 d1                	mov    ecx,edx
c00071f2:	19 f9                	sbb    ecx,edi
c00071f4:	0f 83 cf 00 00 00    	jae    c00072c9 <f_forward+0x12e>
c00071fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071fe:	e9 c6 00 00 00       	jmp    c00072c9 <f_forward+0x12e>
c0007203:	50                   	push   eax
c0007204:	50                   	push   eax
c0007205:	6a 00                	push   0x0
c0007207:	6a 00                	push   0x0
c0007209:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	85 c0                	test   eax,eax
c0007212:	0f 84 57 01 00 00    	je     c000736f <f_forward+0x1d4>
c0007218:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007222:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007226:	89 d7                	mov    edi,edx
c0007228:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722b:	89 c6                	mov    esi,eax
c000722d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007231:	21 ce                	and    esi,ecx
c0007233:	89 c1                	mov    ecx,eax
c0007235:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723b:	0f 84 98 00 00 00    	je     c00072d9 <f_forward+0x13e>
c0007241:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007245:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007248:	89 c8                	mov    eax,ecx
c000724a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000724e:	e8 af ac ff ff       	call   c0001f02 <clst2sect>
c0007253:	89 d7                	mov    edi,edx
c0007255:	09 c7                	or     edi,eax
c0007257:	0f 84 9e 00 00 00    	je     c00072fb <f_forward+0x160>
c000725d:	31 ff                	xor    edi,edi
c000725f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007262:	01 c6                	add    esi,eax
c0007264:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007268:	11 d7                	adc    edi,edx
c000726a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007274:	39 fa                	cmp    edx,edi
c0007276:	0f 85 a2 00 00 00    	jne    c000731e <f_forward+0x183>
c000727c:	39 f0                	cmp    eax,esi
c000727e:	0f 85 9a 00 00 00    	jne    c000731e <f_forward+0x183>
c0007284:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007287:	ba 00 02 00 00       	mov    edx,0x200
c000728c:	25 ff 01 00 00       	and    eax,0x1ff
c0007291:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007295:	29 c2                	sub    edx,eax
c0007297:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729d:	39 d1                	cmp    ecx,edx
c000729f:	76 02                	jbe    c00072a3 <f_forward+0x108>
c00072a1:	89 d1                	mov    ecx,edx
c00072a3:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a6:	52                   	push   edx
c00072a7:	01 c6                	add    esi,eax
c00072a9:	52                   	push   edx
c00072aa:	51                   	push   ecx
c00072ab:	56                   	push   esi
c00072ac:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 44                	je     c00072fb <f_forward+0x160>
c00072b7:	31 ff                	xor    edi,edi
c00072b9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072bc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c7:	01 07                	add    DWORD PTR [edi],eax
c00072c9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ce:	0f 85 2f ff ff ff    	jne    c0007203 <f_forward+0x68>
c00072d4:	e9 96 00 00 00       	jmp    c000736f <f_forward+0x1d4>
c00072d9:	85 f6                	test   esi,esi
c00072db:	0f 85 60 ff ff ff    	jne    c0007241 <f_forward+0xa6>
c00072e1:	89 d7                	mov    edi,edx
c00072e3:	09 c7                	or     edi,eax
c00072e5:	75 05                	jne    c00072ec <f_forward+0x151>
c00072e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ea:	eb 0a                	jmp    c00072f6 <f_forward+0x15b>
c00072ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ef:	89 d8                	mov    eax,ebx
c00072f1:	e8 d9 bc ff ff       	call   c0002fcf <get_fat>
c00072f6:	83 f8 01             	cmp    eax,0x1
c00072f9:	77 0b                	ja     c0007306 <f_forward+0x16b>
c00072fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072ff:	bd 02 00 00 00       	mov    ebp,0x2
c0007304:	eb 69                	jmp    c000736f <f_forward+0x1d4>
c0007306:	83 f8 ff             	cmp    eax,0xffffffff
c0007309:	75 0b                	jne    c0007316 <f_forward+0x17b>
c000730b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000730f:	bd 01 00 00 00       	mov    ebp,0x1
c0007314:	eb 59                	jmp    c000736f <f_forward+0x1d4>
c0007316:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007319:	e9 23 ff ff ff       	jmp    c0007241 <f_forward+0xa6>
c000731e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007322:	79 20                	jns    c0007344 <f_forward+0x1a9>
c0007324:	83 ec 0c             	sub    esp,0xc
c0007327:	6a 01                	push   0x1
c0007329:	52                   	push   edx
c000732a:	50                   	push   eax
c000732b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007333:	50                   	push   eax
c0007334:	e8 fb a8 ff ff       	call   c0001c34 <disk_write>
c0007339:	83 c4 20             	add    esp,0x20
c000733c:	85 c0                	test   eax,eax
c000733e:	75 cb                	jne    c000730b <f_forward+0x170>
c0007340:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	6a 01                	push   0x1
c0007349:	57                   	push   edi
c000734a:	56                   	push   esi
c000734b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007353:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007357:	50                   	push   eax
c0007358:	e8 c1 a8 ff ff       	call   c0001c1e <disk_read>
c000735d:	83 c4 20             	add    esp,0x20
c0007360:	85 c0                	test   eax,eax
c0007362:	0f 84 1c ff ff ff    	je     c0007284 <f_forward+0xe9>
c0007368:	eb a1                	jmp    c000730b <f_forward+0x170>
c000736a:	bd 07 00 00 00       	mov    ebp,0x7
c000736f:	83 c4 2c             	add    esp,0x2c
c0007372:	89 e8                	mov    eax,ebp
c0007374:	5b                   	pop    ebx
c0007375:	5e                   	pop    esi
c0007376:	5f                   	pop    edi
c0007377:	5d                   	pop    ebp
c0007378:	c3                   	ret    

c0007379 <f_mkfs>:
c0007379:	55                   	push   ebp
c000737a:	57                   	push   edi
c000737b:	56                   	push   esi
c000737c:	53                   	push   ebx
c000737d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007382:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007388:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000738f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007396:	e8 b0 ae ff ff       	call   c000224b <get_ldnumber>
c000739b:	85 c0                	test   eax,eax
c000739d:	0f 88 ec 10 00 00    	js     c000848f <f_mkfs+0x1116>
c00073a3:	8b 14 85 00 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b00]
c00073aa:	85 d2                	test   edx,edx
c00073ac:	74 03                	je     c00073b1 <f_mkfs+0x38>
c00073ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b1:	85 f6                	test   esi,esi
c00073b3:	75 05                	jne    c00073ba <f_mkfs+0x41>
c00073b5:	be 60 94 02 c0       	mov    esi,0xc0029460
c00073ba:	83 ec 0c             	sub    esp,0xc
c00073bd:	0f b6 c0             	movzx  eax,al
c00073c0:	bb 03 00 00 00       	mov    ebx,0x3
c00073c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cd:	e8 49 a8 ff ff       	call   c0001c1b <disk_initialize>
c00073d2:	83 c4 10             	add    esp,0x10
c00073d5:	a8 01                	test   al,0x1
c00073d7:	0f 85 b2 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073dd:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e2:	a8 04                	test   al,0x4
c00073e4:	0f 85 a5 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f1:	85 c0                	test   eax,eax
c00073f3:	75 20                	jne    c0007415 <f_mkfs+0x9c>
c00073f5:	51                   	push   ecx
c00073f6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fa:	50                   	push   eax
c00073fb:	6a 03                	push   0x3
c00073fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007401:	e8 44 a8 ff ff       	call   c0001c4a <disk_ioctl>
c0007406:	83 c4 10             	add    esp,0x10
c0007409:	85 c0                	test   eax,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0x9c>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007419:	8d 42 ff             	lea    eax,[edx-0x1]
c000741c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007421:	77 04                	ja     c0007427 <f_mkfs+0xae>
c0007423:	85 c2                	test   edx,eax
c0007425:	74 08                	je     c000742f <f_mkfs+0xb6>
c0007427:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007432:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007436:	48                   	dec    eax
c0007437:	3c 01                	cmp    al,0x1
c0007439:	76 05                	jbe    c0007440 <f_mkfs+0xc7>
c000743b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007440:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007447:	48                   	dec    eax
c0007448:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xdd>
c000744f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007454:	74 08                	je     c000745e <f_mkfs+0xe5>
c0007456:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000745e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007461:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007467:	77 07                	ja     c0007470 <f_mkfs+0xf7>
c0007469:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746c:	85 d8                	test   eax,ebx
c000746e:	74 02                	je     c0007472 <f_mkfs+0xf9>
c0007470:	31 db                	xor    ebx,ebx
c0007472:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747d:	77 0a                	ja     c0007489 <f_mkfs+0x110>
c000747f:	bb 11 00 00 00       	mov    ebx,0x11
c0007484:	e9 06 10 00 00       	jmp    c000848f <f_mkfs+0x1116>
c0007489:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007490:	8b 36                	mov    esi,DWORD PTR [esi]
c0007492:	85 ed                	test   ebp,ebp
c0007494:	75 1e                	jne    c00074b4 <f_mkfs+0x13b>
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a5:	50                   	push   eax
c00074a6:	e8 f1 0f 00 00       	call   c000849c <ff_memalloc>
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	89 c5                	mov    ebp,eax
c00074b0:	85 c0                	test   eax,eax
c00074b2:	74 cb                	je     c000747f <f_mkfs+0x106>
c00074b4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074bc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c4:	52                   	push   edx
c00074c5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c9:	50                   	push   eax
c00074ca:	6a 01                	push   0x1
c00074cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d0:	e8 75 a7 ff ff       	call   c0001c4a <disk_ioctl>
c00074d5:	83 c4 10             	add    esp,0x10
c00074d8:	85 c0                	test   eax,eax
c00074da:	0f 85 4a 0f 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ea:	83 e1 0f             	and    ecx,0xf
c00074ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f9:	83 e6 08             	and    esi,0x8
c00074fc:	75 56                	jne    c0007554 <f_mkfs+0x1db>
c00074fe:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007502:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007506:	83 ff 00             	cmp    edi,0x0
c0007509:	76 20                	jbe    c000752b <f_mkfs+0x1b2>
c000750b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007510:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007518:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000751e:	83 d7 ff             	adc    edi,0xffffffff
c0007521:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007525:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007529:	eb 21                	jmp    c000754c <f_mkfs+0x1d3>
c000752b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007530:	39 f2                	cmp    edx,esi
c0007532:	19 f8                	sbb    eax,edi
c0007534:	73 1e                	jae    c0007554 <f_mkfs+0x1db>
c0007536:	83 c6 c1             	add    esi,0xffffffc1
c0007539:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007541:	83 d7 ff             	adc    edi,0xffffffff
c0007544:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007548:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007554:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007558:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755c:	89 04 24             	mov    DWORD PTR [esp],eax
c000755f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007563:	31 c0                	xor    eax,eax
c0007565:	ba 7f 00 00 00       	mov    edx,0x7f
c000756a:	89 c7                	mov    edi,eax
c000756c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000756f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007573:	0f 83 c5 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007579:	89 df                	mov    edi,ebx
c000757b:	c1 ef 09             	shr    edi,0x9
c000757e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007582:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007589:	c1 ef 09             	shr    edi,0x9
c000758c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007591:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007595:	74 29                	je     c00075c0 <f_mkfs+0x247>
c0007597:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a2:	0f 97 c2             	seta   dl
c00075a5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ac:	0f 92 c0             	setb   al
c00075af:	08 c2                	or     dl,al
c00075b1:	75 5b                	jne    c000760e <f_mkfs+0x295>
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	83 e0 07             	and    eax,0x7
c00075ba:	3c 04                	cmp    al,0x4
c00075bc:	74 50                	je     c000760e <f_mkfs+0x295>
c00075be:	eb 1b                	jmp    c00075db <f_mkfs+0x262>
c00075c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c5:	0f 87 73 0a 00 00    	ja     c000803e <f_mkfs+0xcc5>
c00075cb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d1:	76 08                	jbe    c00075db <f_mkfs+0x262>
c00075d3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075df:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e3:	83 e0 01             	and    eax,0x1
c00075e6:	80 e1 02             	and    cl,0x2
c00075e9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ed:	74 0d                	je     c00075fc <f_mkfs+0x283>
c00075ef:	84 c0                	test   al,al
c00075f1:	0f 84 53 09 00 00    	je     c0007f4a <f_mkfs+0xbd1>
c00075f7:	e9 12 08 00 00       	jmp    c0007e0e <f_mkfs+0xa95>
c00075fc:	bb 13 00 00 00       	mov    ebx,0x13
c0007601:	84 c0                	test   al,al
c0007603:	0f 85 05 08 00 00    	jne    c0007e0e <f_mkfs+0xa95>
c0007609:	e9 39 0e 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c000760e:	31 c0                	xor    eax,eax
c0007610:	ba ff 0f 00 00       	mov    edx,0xfff
c0007615:	89 c7                	mov    edi,eax
c0007617:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000761e:	0f 83 1a 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007624:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762a:	77 39                	ja     c0007665 <f_mkfs+0x2ec>
c000762c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007631:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007639:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007640:	73 08                	jae    c000764a <f_mkfs+0x2d1>
c0007642:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000764f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007652:	b8 00 00 00 00       	mov    eax,0x0
c0007657:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765b:	73 08                	jae    c0007665 <f_mkfs+0x2ec>
c000765d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766d:	83 c0 20             	add    eax,0x20
c0007670:	83 d2 00             	adc    edx,0x0
c0007673:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007677:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767f:	31 d2                	xor    edx,edx
c0007681:	31 ff                	xor    edi,edi
c0007683:	52                   	push   edx
c0007684:	89 fb                	mov    ebx,edi
c0007686:	50                   	push   eax
c0007687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768f:	e8 dc f3 01 00       	call   c0026a70 <__udivdi3>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	c1 e0 02             	shl    eax,0x2
c000769a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000769e:	05 07 02 00 00       	add    eax,0x207
c00076a3:	89 f1                	mov    ecx,esi
c00076a5:	c1 e8 09             	shr    eax,0x9
c00076a8:	83 c1 ff             	add    ecx,0xffffffff
c00076ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076af:	83 d3 ff             	adc    ebx,0xffffffff
c00076b2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076ba:	31 d2                	xor    edx,edx
c00076bc:	01 c8                	add    eax,ecx
c00076be:	11 da                	adc    edx,ebx
c00076c0:	89 c1                	mov    ecx,eax
c00076c2:	f7 de                	neg    esi
c00076c4:	89 d0                	mov    eax,edx
c00076c6:	83 d7 00             	adc    edi,0x0
c00076c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cd:	f7 df                	neg    edi
c00076cf:	21 f1                	and    ecx,esi
c00076d1:	21 f8                	and    eax,edi
c00076d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ea:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ee:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f2:	89 df                	mov    edi,ebx
c00076f4:	d1 ea                	shr    edx,1
c00076f6:	39 c1                	cmp    ecx,eax
c00076f8:	19 d7                	sbb    edi,edx
c00076fa:	0f 83 3e 09 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007704:	31 d2                	xor    edx,edx
c0007706:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007719:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007725:	83 f8 0f             	cmp    eax,0xf
c0007728:	0f 86 10 09 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c000772e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007736:	0f 87 02 09 00 00    	ja     c000803e <f_mkfs+0xcc5>
c000773c:	31 d2                	xor    edx,edx
c000773e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007742:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774a:	83 c0 07             	add    eax,0x7
c000774d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007755:	c1 e8 03             	shr    eax,0x3
c0007758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000775f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	c1 e0 09             	shl    eax,0x9
c000776a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000776e:	48                   	dec    eax
c000776f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007773:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007777:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000777f:	31 d2                	xor    edx,edx
c0007781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007785:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007790:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007795:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007799:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a5:	31 ff                	xor    edi,edi
c00077a7:	31 f6                	xor    esi,esi
c00077a9:	31 db                	xor    ebx,ebx
c00077ab:	85 ff                	test   edi,edi
c00077ad:	74 05                	je     c00077b4 <f_mkfs+0x43b>
c00077af:	4f                   	dec    edi
c00077b0:	74 44                	je     c00077f6 <f_mkfs+0x47d>
c00077b2:	eb 4f                	jmp    c0007803 <f_mkfs+0x48a>
c00077b4:	83 ec 0c             	sub    esp,0xc
c00077b7:	0f b7 c3             	movzx  eax,bx
c00077ba:	50                   	push   eax
c00077bb:	e8 05 0e 00 00       	call   c00085c5 <ff_wtoupper>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	89 c1                	mov    ecx,eax
c00077c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c8:	66 39 c3             	cmp    bx,ax
c00077cb:	75 3e                	jne    c000780b <f_mkfs+0x492>
c00077cd:	be 01 00 00 00       	mov    esi,0x1
c00077d2:	89 df                	mov    edi,ebx
c00077d4:	66 01 f7             	add    di,si
c00077d7:	75 07                	jne    c00077e0 <f_mkfs+0x467>
c00077d9:	83 fe 7f             	cmp    esi,0x7f
c00077dc:	77 31                	ja     c000780f <f_mkfs+0x496>
c00077de:	eb 16                	jmp    c00077f6 <f_mkfs+0x47d>
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	0f b7 ff             	movzx  edi,di
c00077e6:	57                   	push   edi
c00077e7:	e8 d9 0d 00 00       	call   c00085c5 <ff_wtoupper>
c00077ec:	83 c4 10             	add    esp,0x10
c00077ef:	39 c7                	cmp    edi,eax
c00077f1:	75 e6                	jne    c00077d9 <f_mkfs+0x460>
c00077f3:	46                   	inc    esi
c00077f4:	eb dc                	jmp    c00077d2 <f_mkfs+0x459>
c00077f6:	31 c0                	xor    eax,eax
c00077f8:	89 d9                	mov    ecx,ebx
c00077fa:	4e                   	dec    esi
c00077fb:	0f 95 c0             	setne  al
c00077fe:	43                   	inc    ebx
c00077ff:	89 c7                	mov    edi,eax
c0007801:	eb 14                	jmp    c0007817 <f_mkfs+0x49e>
c0007803:	89 f1                	mov    ecx,esi
c0007805:	01 f3                	add    ebx,esi
c0007807:	31 ff                	xor    edi,edi
c0007809:	eb 0c                	jmp    c0007817 <f_mkfs+0x49e>
c000780b:	89 d3                	mov    ebx,edx
c000780d:	eb 08                	jmp    c0007817 <f_mkfs+0x49e>
c000780f:	bf 02 00 00 00       	mov    edi,0x2
c0007814:	83 c9 ff             	or     ecx,0xffffffff
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000781e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007822:	0f b6 c1             	movzx  eax,cl
c0007825:	e8 3a a9 ff ff       	call   c0002164 <xsum32>
c000782a:	66 c1 e9 08          	shr    cx,0x8
c000782e:	89 c2                	mov    edx,eax
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007837:	0f b7 c1             	movzx  eax,cx
c000783a:	e8 25 a9 ff ff       	call   c0002164 <xsum32>
c000783f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007844:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007848:	66 85 db             	test   bx,bx
c000784b:	74 1f                	je     c000786c <f_mkfs+0x4f3>
c000784d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007850:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007857:	83 c0 02             	add    eax,0x2
c000785a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007860:	39 c2                	cmp    edx,eax
c0007862:	74 08                	je     c000786c <f_mkfs+0x4f3>
c0007864:	89 04 24             	mov    DWORD PTR [esp],eax
c0007867:	e9 3f ff ff ff       	jmp    c00077ab <f_mkfs+0x432>
c000786c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	05 01 02 00 00       	add    eax,0x201
c0007877:	c1 e8 09             	shr    eax,0x9
c000787a:	50                   	push   eax
c000787b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000787f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007887:	55                   	push   ebp
c0007888:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788c:	e8 a3 a3 ff ff       	call   c0001c34 <disk_write>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	85 c0                	test   eax,eax
c0007896:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007899:	0f 85 8b 0b 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000789f:	89 d0                	mov    eax,edx
c00078a1:	31 d2                	xor    edx,edx
c00078a3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ab:	66 85 db             	test   bx,bx
c00078ae:	74 04                	je     c00078b4 <f_mkfs+0x53b>
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	eb b0                	jmp    c0007864 <f_mkfs+0x4eb>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d7:	c1 eb 09             	shr    ebx,0x9
c00078da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f1:	8d 70 01             	lea    esi,[eax+0x1]
c00078f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fc:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007903:	31 d2                	xor    edx,edx
c0007905:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790a:	89 04 24             	mov    DWORD PTR [esp],eax
c000790d:	89 c1                	mov    ecx,eax
c000790f:	89 e8                	mov    eax,ebp
c0007911:	e8 e7 a3 ff ff       	call   c0001cfd <mem_set>
c0007916:	31 c0                	xor    eax,eax
c0007918:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791b:	76 10                	jbe    c000792d <f_mkfs+0x5b4>
c000791d:	83 fe 07             	cmp    esi,0x7
c0007920:	76 0b                	jbe    c000792d <f_mkfs+0x5b4>
c0007922:	40                   	inc    eax
c0007923:	83 ee 08             	sub    esi,0x8
c0007926:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792b:	eb eb                	jmp    c0007918 <f_mkfs+0x59f>
c000792d:	b2 01                	mov    dl,0x1
c000792f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007933:	85 f6                	test   esi,esi
c0007935:	74 0c                	je     c0007943 <f_mkfs+0x5ca>
c0007937:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793a:	76 07                	jbe    c0007943 <f_mkfs+0x5ca>
c000793c:	08 11                	or     BYTE PTR [ecx],dl
c000793e:	4e                   	dec    esi
c000793f:	d1 e2                	shl    edx,1
c0007941:	eb f0                	jmp    c0007933 <f_mkfs+0x5ba>
c0007943:	89 df                	mov    edi,ebx
c0007945:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007949:	76 04                	jbe    c000794f <f_mkfs+0x5d6>
c000794b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000794f:	83 ec 0c             	sub    esp,0xc
c0007952:	57                   	push   edi
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795b:	55                   	push   ebp
c000795c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007960:	e8 cf a2 ff ff       	call   c0001c34 <disk_write>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	85 c0                	test   eax,eax
c000796a:	0f 85 ba 0a 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007970:	31 d2                	xor    edx,edx
c0007972:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007976:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797a:	29 fb                	sub    ebx,edi
c000797c:	0f 85 7a ff ff ff    	jne    c00078fc <f_mkfs+0x583>
c0007982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000798e:	31 f6                	xor    esi,esi
c0007990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007994:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007997:	31 d2                	xor    edx,edx
c0007999:	89 e8                	mov    eax,ebp
c000799b:	e8 5d a3 ff ff       	call   c0001cfd <mem_set>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	85 db                	test   ebx,ebx
c00079a4:	75 40                	jne    c00079e6 <f_mkfs+0x66d>
c00079a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ab:	89 e8                	mov    eax,ebp
c00079ad:	bb 02 00 00 00       	mov    ebx,0x2
c00079b2:	e8 28 a3 ff ff       	call   c0001cdf <st_dword>
c00079b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00079ba:	83 ca ff             	or     edx,0xffffffff
c00079bd:	e8 1d a3 ff ff       	call   c0001cdf <st_dword>
c00079c2:	b9 08 00 00 00       	mov    ecx,0x8
c00079c7:	eb 1d                	jmp    c00079e6 <f_mkfs+0x66d>
c00079c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079cc:	76 3b                	jbe    c0007a09 <f_mkfs+0x690>
c00079ce:	43                   	inc    ebx
c00079cf:	83 fe 01             	cmp    esi,0x1
c00079d2:	89 da                	mov    edx,ebx
c00079d4:	77 03                	ja     c00079d9 <f_mkfs+0x660>
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079dd:	4e                   	dec    esi
c00079de:	e8 fc a2 ff ff       	call   c0001cdf <st_dword>
c00079e3:	83 c1 04             	add    ecx,0x4
c00079e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ea:	85 f6                	test   esi,esi
c00079ec:	75 db                	jne    c00079c9 <f_mkfs+0x650>
c00079ee:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f3:	77 14                	ja     c0007a09 <f_mkfs+0x690>
c00079f5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a00:	85 f6                	test   esi,esi
c0007a02:	74 05                	je     c0007a09 <f_mkfs+0x690>
c0007a04:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a07:	77 dd                	ja     c00079e6 <f_mkfs+0x66d>
c0007a09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a11:	39 cf                	cmp    edi,ecx
c0007a13:	76 02                	jbe    c0007a17 <f_mkfs+0x69e>
c0007a15:	89 cf                	mov    edi,ecx
c0007a17:	83 ec 0c             	sub    esp,0xc
c0007a1a:	57                   	push   edi
c0007a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a23:	55                   	push   ebp
c0007a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a28:	e8 07 a2 ff ff       	call   c0001c34 <disk_write>
c0007a2d:	83 c4 20             	add    esp,0x20
c0007a30:	85 c0                	test   eax,eax
c0007a32:	0f 85 f2 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007a38:	31 d2                	xor    edx,edx
c0007a3a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a3e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a42:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a46:	0f 85 48 ff ff ff    	jne    c0007994 <f_mkfs+0x61b>
c0007a4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	89 e8                	mov    eax,ebp
c0007a53:	31 ff                	xor    edi,edi
c0007a55:	e8 a3 a2 ff ff       	call   c0001cfd <mem_set>
c0007a5a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5d:	ba 02 00 00 00       	mov    edx,0x2
c0007a62:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a66:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6a:	e8 70 a2 ff ff       	call   c0001cdf <st_dword>
c0007a6f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a72:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a76:	e8 64 a2 ff ff       	call   c0001cdf <st_dword>
c0007a7b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a7e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a82:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a86:	e8 54 a2 ff ff       	call   c0001cdf <st_dword>
c0007a8b:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a92:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a96:	83 c2 02             	add    edx,0x2
c0007a99:	e8 41 a2 ff ff       	call   c0001cdf <st_dword>
c0007a9e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa9:	e8 31 a2 ff ff       	call   c0001cdf <st_dword>
c0007aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab7:	89 c6                	mov    esi,eax
c0007ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007acf:	39 cb                	cmp    ebx,ecx
c0007ad1:	76 02                	jbe    c0007ad5 <f_mkfs+0x75c>
c0007ad3:	89 cb                	mov    ebx,ecx
c0007ad5:	83 ec 0c             	sub    esp,0xc
c0007ad8:	53                   	push   ebx
c0007ad9:	57                   	push   edi
c0007ada:	56                   	push   esi
c0007adb:	55                   	push   ebp
c0007adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae0:	e8 4f a1 ff ff       	call   c0001c34 <disk_write>
c0007ae5:	83 c4 20             	add    esp,0x20
c0007ae8:	85 c0                	test   eax,eax
c0007aea:	0f 85 3a 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007af0:	31 d2                	xor    edx,edx
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	89 e8                	mov    eax,ebp
c0007af9:	e8 ff a1 ff ff       	call   c0001cfd <mem_set>
c0007afe:	31 d2                	xor    edx,edx
c0007b00:	01 de                	add    esi,ebx
c0007b02:	11 d7                	adc    edi,edx
c0007b04:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b07:	75 bf                	jne    c0007ac8 <f_mkfs+0x74f>
c0007b09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b11:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b19:	b9 00 02 00 00       	mov    ecx,0x200
c0007b1e:	31 d2                	xor    edx,edx
c0007b20:	89 e8                	mov    eax,ebp
c0007b22:	e8 d6 a1 ff ff       	call   c0001cfd <mem_set>
c0007b27:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2c:	ba 40 95 02 c0       	mov    edx,0xc0029540
c0007b31:	89 e8                	mov    eax,ebp
c0007b33:	e8 b0 a1 ff ff       	call   c0001ce8 <mem_cpy>
c0007b38:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b43:	e8 9a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b48:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b4f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b53:	e8 8a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b58:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5b:	ba 20 00 00 00       	mov    edx,0x20
c0007b60:	e8 7a a1 ff ff       	call   c0001cdf <st_dword>
c0007b65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6d:	e8 6d a1 ff ff       	call   c0001cdf <st_dword>
c0007b72:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b7e:	e8 5c a1 ff ff       	call   c0001cdf <st_dword>
c0007b83:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8a:	e8 50 a1 ff ff       	call   c0001cdf <st_dword>
c0007b8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b93:	8d 50 02             	lea    edx,[eax+0x2]
c0007b96:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b99:	e8 41 a1 ff ff       	call   c0001cdf <st_dword>
c0007b9e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba6:	e8 34 a1 ff ff       	call   c0001cdf <st_dword>
c0007bab:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bae:	ba 00 01 00 00       	mov    edx,0x100
c0007bb3:	e8 23 a1 ff ff       	call   c0001cdb <st_word>
c0007bb8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbc:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc1:	48                   	dec    eax
c0007bc2:	74 05                	je     c0007bc9 <f_mkfs+0x850>
c0007bc4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc7:	eb f8                	jmp    c0007bc1 <f_mkfs+0x848>
c0007bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd9:	74 05                	je     c0007be0 <f_mkfs+0x867>
c0007bdb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bde:	eb f5                	jmp    c0007bd5 <f_mkfs+0x85c>
c0007be0:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be3:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bee:	31 db                	xor    ebx,ebx
c0007bf0:	e8 e6 a0 ff ff       	call   c0001cdb <st_word>
c0007bf5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c03:	e8 d3 a0 ff ff       	call   c0001cdb <st_word>
c0007c08:	31 c9                	xor    ecx,ecx
c0007c0a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0d:	83 f8 01             	cmp    eax,0x1
c0007c10:	76 13                	jbe    c0007c25 <f_mkfs+0x8ac>
c0007c12:	83 f9 70             	cmp    ecx,0x70
c0007c15:	74 0e                	je     c0007c25 <f_mkfs+0x8ac>
c0007c17:	89 da                	mov    edx,ebx
c0007c19:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c1e:	e8 41 a5 ff ff       	call   c0002164 <xsum32>
c0007c23:	89 c3                	mov    ebx,eax
c0007c25:	41                   	inc    ecx
c0007c26:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2c:	75 dc                	jne    c0007c0a <f_mkfs+0x891>
c0007c2e:	89 f0                	mov    eax,esi
c0007c30:	89 fa                	mov    edx,edi
c0007c32:	83 c0 01             	add    eax,0x1
c0007c35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c39:	83 d2 00             	adc    edx,0x0
c0007c3c:	83 ec 0c             	sub    esp,0xc
c0007c3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c43:	6a 01                	push   0x1
c0007c45:	57                   	push   edi
c0007c46:	56                   	push   esi
c0007c47:	55                   	push   ebp
c0007c48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4c:	e8 e3 9f ff ff       	call   c0001c34 <disk_write>
c0007c51:	83 c4 20             	add    esp,0x20
c0007c54:	85 c0                	test   eax,eax
c0007c56:	0f 85 ce 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007c5c:	31 d2                	xor    edx,edx
c0007c5e:	b9 00 02 00 00       	mov    ecx,0x200
c0007c63:	89 e8                	mov    eax,ebp
c0007c65:	e8 93 a0 ff ff       	call   c0001cfd <mem_set>
c0007c6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c72:	e8 64 a0 ff ff       	call   c0001cdb <st_word>
c0007c77:	89 f0                	mov    eax,esi
c0007c79:	89 fa                	mov    edx,edi
c0007c7b:	83 c0 09             	add    eax,0x9
c0007c7e:	83 d2 00             	adc    edx,0x0
c0007c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c88:	31 c9                	xor    ecx,ecx
c0007c8a:	41                   	inc    ecx
c0007c8b:	89 da                	mov    edx,ebx
c0007c8d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c92:	e8 cd a4 ff ff       	call   c0002164 <xsum32>
c0007c97:	89 c3                	mov    ebx,eax
c0007c99:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c9f:	75 e9                	jne    c0007c8a <f_mkfs+0x911>
c0007ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca9:	83 c0 01             	add    eax,0x1
c0007cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb0:	83 d2 00             	adc    edx,0x0
c0007cb3:	83 ec 0c             	sub    esp,0xc
c0007cb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cba:	6a 01                	push   0x1
c0007cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc4:	55                   	push   ebp
c0007cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc9:	e8 66 9f ff ff       	call   c0001c34 <disk_write>
c0007cce:	83 c4 20             	add    esp,0x20
c0007cd1:	85 c0                	test   eax,eax
c0007cd3:	0f 85 51 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce1:	75 09                	jne    c0007cec <f_mkfs+0x973>
c0007ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cea:	74 12                	je     c0007cfe <f_mkfs+0x985>
c0007cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfc:	eb 8a                	jmp    c0007c88 <f_mkfs+0x90f>
c0007cfe:	31 d2                	xor    edx,edx
c0007d00:	b9 00 02 00 00       	mov    ecx,0x200
c0007d05:	89 e8                	mov    eax,ebp
c0007d07:	e8 f1 9f ff ff       	call   c0001cfd <mem_set>
c0007d0c:	83 c6 0b             	add    esi,0xb
c0007d0f:	83 d7 00             	adc    edi,0x0
c0007d12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d16:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1a:	31 c9                	xor    ecx,ecx
c0007d1c:	41                   	inc    ecx
c0007d1d:	89 da                	mov    edx,ebx
c0007d1f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d24:	e8 3b a4 ff ff       	call   c0002164 <xsum32>
c0007d29:	89 c3                	mov    ebx,eax
c0007d2b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d31:	75 e9                	jne    c0007d1c <f_mkfs+0x9a3>
c0007d33:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d36:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3a:	83 c6 01             	add    esi,0x1
c0007d3d:	83 d7 00             	adc    edi,0x0
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	6a 01                	push   0x1
c0007d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4d:	55                   	push   ebp
c0007d4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d52:	e8 dd 9e ff ff       	call   c0001c34 <disk_write>
c0007d57:	83 c4 20             	add    esp,0x20
c0007d5a:	85 c0                	test   eax,eax
c0007d5c:	0f 85 c8 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007d62:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d66:	75 06                	jne    c0007d6e <f_mkfs+0x9f5>
c0007d68:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6c:	74 09                	je     c0007d77 <f_mkfs+0x9fe>
c0007d6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d71:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d75:	eb a3                	jmp    c0007d1a <f_mkfs+0x9a1>
c0007d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7b:	89 da                	mov    edx,ebx
c0007d7d:	01 e8                	add    eax,ebp
c0007d7f:	e8 5b 9f ff ff       	call   c0001cdf <st_dword>
c0007d84:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d89:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d91:	75 e4                	jne    c0007d77 <f_mkfs+0x9fe>
c0007d93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d96:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9a:	83 c6 02             	add    esi,0x2
c0007d9d:	83 d7 00             	adc    edi,0x0
c0007da0:	83 ec 0c             	sub    esp,0xc
c0007da3:	6a 01                	push   0x1
c0007da5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dad:	55                   	push   ebp
c0007dae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db2:	e8 7d 9e ff ff       	call   c0001c34 <disk_write>
c0007db7:	83 c4 20             	add    esp,0x20
c0007dba:	85 c0                	test   eax,eax
c0007dbc:	0f 85 68 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007dc2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc7:	74 0d                	je     c0007dd6 <f_mkfs+0xa5d>
c0007dc9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd1:	e9 43 fd ff ff       	jmp    c0007b19 <f_mkfs+0x7a0>
c0007dd6:	b1 07                	mov    cl,0x7
c0007dd8:	e9 e3 05 00 00       	jmp    c00083c0 <f_mkfs+0x1047>
c0007ddd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de2:	0f 85 4f 02 00 00    	jne    c0008037 <f_mkfs+0xcbe>
c0007de8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ded:	0f 86 22 02 00 00    	jbe    c0008015 <f_mkfs+0xc9c>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	0f 85 81 06 00 00    	jne    c000847f <f_mkfs+0x1106>
c0007dfe:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e05:	83 f8 40             	cmp    eax,0x40
c0007e08:	0f 87 51 06 00 00    	ja     c000845f <f_mkfs+0x10e6>
c0007e0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e12:	85 ff                	test   edi,edi
c0007e14:	75 1c                	jne    c0007e32 <f_mkfs+0xab9>
c0007e16:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e19:	ba 40 94 02 c0       	mov    edx,0xc0029440
c0007e1e:	c1 e9 0c             	shr    ecx,0xc
c0007e21:	bf 01 00 00 00       	mov    edi,0x1
c0007e26:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e29:	66 85 c0             	test   ax,ax
c0007e2c:	0f 85 95 01 00 00    	jne    c0007fc7 <f_mkfs+0xc4e>
c0007e32:	31 d2                	xor    edx,edx
c0007e34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e37:	f7 f7                	div    edi
c0007e39:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3e:	0f 86 95 01 00 00    	jbe    c0007fd9 <f_mkfs+0xc60>
c0007e44:	83 c0 02             	add    eax,0x2
c0007e47:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4c:	01 c0                	add    eax,eax
c0007e4e:	05 ff 01 00 00       	add    eax,0x1ff
c0007e53:	be 01 00 00 00       	mov    esi,0x1
c0007e58:	c1 e8 09             	shr    eax,0x9
c0007e5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e63:	c1 e0 05             	shl    eax,0x5
c0007e66:	c1 e8 09             	shr    eax,0x9
c0007e69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e72:	31 d2                	xor    edx,edx
c0007e74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e78:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7c:	89 f0                	mov    eax,esi
c0007e7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e82:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e92:	31 d2                	xor    edx,edx
c0007e94:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e99:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea1:	31 db                	xor    ebx,ebx
c0007ea3:	01 c8                	add    eax,ecx
c0007ea5:	11 da                	adc    edx,ebx
c0007ea7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eab:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eaf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebb:	f7 da                	neg    edx
c0007ebd:	21 d1                	and    ecx,edx
c0007ebf:	29 d9                	sub    ecx,ebx
c0007ec1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec6:	0f 85 20 01 00 00    	jne    c0007fec <f_mkfs+0xc73>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	01 ce                	add    esi,ecx
c0007ed0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed8:	31 d2                	xor    edx,edx
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee0:	c1 e0 04             	shl    eax,0x4
c0007ee3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eeb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007eef:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef6:	19 d3                	sbb    ebx,edx
c0007ef8:	0f 82 40 01 00 00    	jb     c000803e <f_mkfs+0xcc5>
c0007efe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f05:	89 c8                	mov    eax,ecx
c0007f07:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f10:	29 f0                	sub    eax,esi
c0007f12:	29 d0                	sub    eax,edx
c0007f14:	31 d2                	xor    edx,edx
c0007f16:	f7 f7                	div    edi
c0007f18:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	0f 85 b8 fe ff ff    	jne    c0007ddd <f_mkfs+0xa64>
c0007f25:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2a:	0f 87 1d 01 00 00    	ja     c000804d <f_mkfs+0xcd4>
c0007f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f35:	0f 85 03 01 00 00    	jne    c000803e <f_mkfs+0xcc5>
c0007f3b:	83 ff 01             	cmp    edi,0x1
c0007f3e:	0f 86 fa 00 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c0007f44:	d1 ef                	shr    edi,1
c0007f46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	85 db                	test   ebx,ebx
c0007f53:	75 2d                	jne    c0007f82 <f_mkfs+0xc09>
c0007f55:	89 cb                	mov    ebx,ecx
c0007f57:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0007f5c:	c1 eb 11             	shr    ebx,0x11
c0007f5f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f67:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6a:	66 85 c0             	test   ax,ax
c0007f6d:	74 11                	je     c0007f80 <f_mkfs+0xc07>
c0007f6f:	83 c2 02             	add    edx,0x2
c0007f72:	39 d8                	cmp    eax,ebx
c0007f74:	77 0a                	ja     c0007f80 <f_mkfs+0xc07>
c0007f76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f7e:	eb e7                	jmp    c0007f67 <f_mkfs+0xbee>
c0007f80:	31 db                	xor    ebx,ebx
c0007f82:	31 d2                	xor    edx,edx
c0007f84:	89 c8                	mov    eax,ecx
c0007f86:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f91:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f96:	c1 ea 09             	shr    edx,0x9
c0007f99:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f9e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa2:	0f 87 96 00 00 00    	ja     c000803e <f_mkfs+0xcc5>
c0007fa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fac:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb8:	be 20 00 00 00       	mov    esi,0x20
c0007fbd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc2:	e9 a6 fe ff ff       	jmp    c0007e6d <f_mkfs+0xaf4>
c0007fc7:	83 c2 02             	add    edx,0x2
c0007fca:	39 c8                	cmp    eax,ecx
c0007fcc:	0f 87 60 fe ff ff    	ja     c0007e32 <f_mkfs+0xab9>
c0007fd2:	01 ff                	add    edi,edi
c0007fd4:	e9 4d fe ff ff       	jmp    c0007e26 <f_mkfs+0xaad>
c0007fd9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fdc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe1:	40                   	inc    eax
c0007fe2:	d1 e8                	shr    eax,1
c0007fe4:	83 c0 03             	add    eax,0x3
c0007fe7:	e9 62 fe ff ff       	jmp    c0007e4e <f_mkfs+0xad5>
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	89 c8                	mov    eax,ecx
c0007ff0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff4:	85 d2                	test   edx,edx
c0007ff6:	74 0c                	je     c0008004 <f_mkfs+0xc8b>
c0007ff8:	49                   	dec    ecx
c0007ff9:	46                   	inc    esi
c0007ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fff:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008004:	89 c8                	mov    eax,ecx
c0008006:	31 d2                	xor    edx,edx
c0008008:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008010:	e9 c3 fe ff ff       	jmp    c0007ed8 <f_mkfs+0xb5f>
c0008015:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801a:	77 31                	ja     c000804d <f_mkfs+0xcd4>
c000801c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008021:	75 1b                	jne    c000803e <f_mkfs+0xcc5>
c0008023:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802a:	3d 80 00 00 00       	cmp    eax,0x80
c000802f:	0f 86 d9 fd ff ff    	jbe    c0007e0e <f_mkfs+0xa95>
c0008035:	eb 07                	jmp    c000803e <f_mkfs+0xcc5>
c0008037:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803c:	76 0a                	jbe    c0008048 <f_mkfs+0xccf>
c000803e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008043:	e9 ff 03 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c0008048:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804d:	31 d2                	xor    edx,edx
c000804f:	b9 00 02 00 00       	mov    ecx,0x200
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 a2 9c ff ff       	call   c0001cfd <mem_set>
c000805b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008060:	ba 62 95 02 c0       	mov    edx,0xc0029562
c0008065:	89 e8                	mov    eax,ebp
c0008067:	e8 7c 9c ff ff       	call   c0001ce8 <mem_cpy>
c000806c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000806f:	ba 00 02 00 00       	mov    edx,0x200
c0008074:	e8 62 9c ff ff       	call   c0001cdb <st_word>
c0008079:	89 f8                	mov    eax,edi
c000807b:	0f b7 d6             	movzx  edx,si
c000807e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008081:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008084:	e8 52 9c ff ff       	call   c0001cdb <st_word>
c0008089:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008092:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008095:	75 08                	jne    c000809f <f_mkfs+0xd26>
c0008097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000809f:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a6:	e8 30 9c ff ff       	call   c0001cdb <st_word>
c00080ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b4:	39 d0                	cmp    eax,edx
c00080b6:	b8 00 00 00 00       	mov    eax,0x0
c00080bb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080bf:	72 0a                	jb     c00080cb <f_mkfs+0xd52>
c00080c1:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c4:	e8 12 9c ff ff       	call   c0001cdb <st_word>
c00080c9:	eb 08                	jmp    c00080d3 <f_mkfs+0xd5a>
c00080cb:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ce:	e8 0c 9c ff ff       	call   c0001cdf <st_dword>
c00080d3:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00080db:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080df:	e8 f7 9b ff ff       	call   c0001cdb <st_word>
c00080e4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e7:	ba ff 00 00 00       	mov    edx,0xff
c00080ec:	e8 ea 9b ff ff       	call   c0001cdb <st_word>
c00080f1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f8:	e8 e2 9b ff ff       	call   c0001cdf <st_dword>
c00080fd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008102:	75 57                	jne    c000815b <f_mkfs+0xde2>
c0008104:	8d 45 43             	lea    eax,[ebp+0x43]
c0008107:	ba 00 00 21 50       	mov    edx,0x50210000
c000810c:	e8 ce 9b ff ff       	call   c0001cdf <st_dword>
c0008111:	8d 45 24             	lea    eax,[ebp+0x24]
c0008114:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008118:	e8 c2 9b ff ff       	call   c0001cdf <st_dword>
c000811d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008120:	ba 02 00 00 00       	mov    edx,0x2
c0008125:	e8 b5 9b ff ff       	call   c0001cdf <st_dword>
c000812a:	8d 45 30             	lea    eax,[ebp+0x30]
c000812d:	ba 01 00 00 00       	mov    edx,0x1
c0008132:	e8 a4 9b ff ff       	call   c0001cdb <st_word>
c0008137:	8d 45 32             	lea    eax,[ebp+0x32]
c000813a:	ba 06 00 00 00       	mov    edx,0x6
c000813f:	e8 97 9b ff ff       	call   c0001cdb <st_word>
c0008144:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008148:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814c:	8d 45 47             	lea    eax,[ebp+0x47]
c000814f:	b9 13 00 00 00       	mov    ecx,0x13
c0008154:	ba 6e 95 02 c0       	mov    edx,0xc002956e
c0008159:	eb 2f                	jmp    c000818a <f_mkfs+0xe11>
c000815b:	8d 45 27             	lea    eax,[ebp+0x27]
c000815e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008163:	e8 77 9b ff ff       	call   c0001cdf <st_dword>
c0008168:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008170:	e8 66 9b ff ff       	call   c0001cdb <st_word>
c0008175:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008179:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008180:	b9 13 00 00 00       	mov    ecx,0x13
c0008185:	ba 82 95 02 c0       	mov    edx,0xc0029582
c000818a:	e8 59 9b ff ff       	call   c0001ce8 <mem_cpy>
c000818f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008195:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819a:	89 f0                	mov    eax,esi
c000819c:	e8 3a 9b ff ff       	call   c0001cdb <st_word>
c00081a1:	83 ec 0c             	sub    esp,0xc
c00081a4:	6a 01                	push   0x1
c00081a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ae:	55                   	push   ebp
c00081af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b3:	e8 7c 9a ff ff       	call   c0001c34 <disk_write>
c00081b8:	83 c4 20             	add    esp,0x20
c00081bb:	85 c0                	test   eax,eax
c00081bd:	0f 85 67 02 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00081c3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c8:	0f 85 b7 00 00 00    	jne    c0008285 <f_mkfs+0xf0c>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	6a 01                	push   0x1
c00081d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081db:	83 c0 06             	add    eax,0x6
c00081de:	83 d2 00             	adc    edx,0x0
c00081e1:	52                   	push   edx
c00081e2:	50                   	push   eax
c00081e3:	55                   	push   ebp
c00081e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e8:	e8 47 9a ff ff       	call   c0001c34 <disk_write>
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	b9 00 02 00 00       	mov    ecx,0x200
c00081f5:	31 d2                	xor    edx,edx
c00081f7:	89 e8                	mov    eax,ebp
c00081f9:	e8 ff 9a ff ff       	call   c0001cfd <mem_set>
c00081fe:	ba 52 52 61 41       	mov    edx,0x41615252
c0008203:	89 e8                	mov    eax,ebp
c0008205:	e8 d5 9a ff ff       	call   c0001cdf <st_dword>
c000820a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008210:	ba 72 72 41 61       	mov    edx,0x61417272
c0008215:	e8 c5 9a ff ff       	call   c0001cdf <st_dword>
c000821a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008223:	e8 b7 9a ff ff       	call   c0001cdf <st_dword>
c0008228:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000822e:	ba 02 00 00 00       	mov    edx,0x2
c0008233:	e8 a7 9a ff ff       	call   c0001cdf <st_dword>
c0008238:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823d:	89 f0                	mov    eax,esi
c000823f:	e8 97 9a ff ff       	call   c0001cdb <st_word>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	6a 01                	push   0x1
c0008249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008251:	83 c0 07             	add    eax,0x7
c0008254:	83 d2 00             	adc    edx,0x0
c0008257:	52                   	push   edx
c0008258:	50                   	push   eax
c0008259:	55                   	push   ebp
c000825a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825e:	e8 d1 99 ff ff       	call   c0001c34 <disk_write>
c0008263:	83 c4 14             	add    esp,0x14
c0008266:	6a 01                	push   0x1
c0008268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008270:	83 c0 01             	add    eax,0x1
c0008273:	83 d2 00             	adc    edx,0x0
c0008276:	52                   	push   edx
c0008277:	50                   	push   eax
c0008278:	55                   	push   ebp
c0008279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827d:	e8 b2 99 ff ff       	call   c0001c34 <disk_write>
c0008282:	83 c4 20             	add    esp,0x20
c0008285:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828c:	31 d2                	xor    edx,edx
c000828e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008294:	31 db                	xor    ebx,ebx
c0008296:	89 e8                	mov    eax,ebp
c0008298:	e8 60 9a ff ff       	call   c0001cfd <mem_set>
c000829d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a9:	0f 94 c3             	sete   bl
c00082ac:	4b                   	dec    ebx
c00082ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082be:	75 21                	jne    c00082e1 <f_mkfs+0xf68>
c00082c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c5:	89 e8                	mov    eax,ebp
c00082c7:	e8 13 9a ff ff       	call   c0001cdf <st_dword>
c00082cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00082cf:	83 ca ff             	or     edx,0xffffffff
c00082d2:	e8 08 9a ff ff       	call   c0001cdf <st_dword>
c00082d7:	8d 45 08             	lea    eax,[ebp+0x8]
c00082da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082df:	eb 04                	jmp    c00082e5 <f_mkfs+0xf6c>
c00082e1:	89 da                	mov    edx,ebx
c00082e3:	89 e8                	mov    eax,ebp
c00082e5:	e8 f5 99 ff ff       	call   c0001cdf <st_dword>
c00082ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fa:	39 ce                	cmp    esi,ecx
c00082fc:	76 02                	jbe    c0008300 <f_mkfs+0xf87>
c00082fe:	89 ce                	mov    esi,ecx
c0008300:	83 ec 0c             	sub    esp,0xc
c0008303:	56                   	push   esi
c0008304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830c:	55                   	push   ebp
c000830d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008311:	e8 1e 99 ff ff       	call   c0001c34 <disk_write>
c0008316:	83 c4 20             	add    esp,0x20
c0008319:	85 c0                	test   eax,eax
c000831b:	0f 85 09 01 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0008321:	31 d2                	xor    edx,edx
c0008323:	b9 00 02 00 00       	mov    ecx,0x200
c0008328:	89 e8                	mov    eax,ebp
c000832a:	e8 ce 99 ff ff       	call   c0001cfd <mem_set>
c000832f:	31 d2                	xor    edx,edx
c0008331:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008335:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008339:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833d:	75 b3                	jne    c00082f2 <f_mkfs+0xf79>
c000833f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008342:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008349:	40                   	inc    eax
c000834a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000834e:	0f 87 65 ff ff ff    	ja     c00082b9 <f_mkfs+0xf40>
c0008354:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008359:	74 04                	je     c000835f <f_mkfs+0xfe6>
c000835b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000835f:	89 fb                	mov    ebx,edi
c0008361:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008365:	76 04                	jbe    c000836b <f_mkfs+0xff2>
c0008367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836b:	83 ec 0c             	sub    esp,0xc
c000836e:	53                   	push   ebx
c000836f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008373:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008377:	55                   	push   ebp
c0008378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837c:	e8 b3 98 ff ff       	call   c0001c34 <disk_write>
c0008381:	83 c4 20             	add    esp,0x20
c0008384:	85 c0                	test   eax,eax
c0008386:	0f 85 9e 00 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000838c:	31 d2                	xor    edx,edx
c000838e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008392:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008396:	29 df                	sub    edi,ebx
c0008398:	75 c5                	jne    c000835f <f_mkfs+0xfe6>
c000839a:	b1 0c                	mov    cl,0xc
c000839c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a1:	74 1d                	je     c00083c0 <f_mkfs+0x1047>
c00083a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a8:	b1 06                	mov    cl,0x6
c00083aa:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ae:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b2:	72 0c                	jb     c00083c0 <f_mkfs+0x1047>
c00083b4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b9:	0f 94 c1             	sete   cl
c00083bc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c5:	75 4c                	jne    c0008413 <f_mkfs+0x109a>
c00083c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083dd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f3:	0f b6 c9             	movzx  ecx,cl
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	55                   	push   ebp
c00083fa:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008405:	e8 2f c2 ff ff       	call   c0004639 <create_partition>
c000840a:	83 c4 10             	add    esp,0x10
c000840d:	89 c3                	mov    ebx,eax
c000840f:	85 c0                	test   eax,eax
c0008411:	75 34                	jne    c0008447 <f_mkfs+0x10ce>
c0008413:	31 db                	xor    ebx,ebx
c0008415:	50                   	push   eax
c0008416:	6a 00                	push   0x0
c0008418:	6a 00                	push   0x0
c000841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000841e:	e8 27 98 ff ff       	call   c0001c4a <disk_ioctl>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	85 c0                	test   eax,eax
c0008428:	74 1d                	je     c0008447 <f_mkfs+0x10ce>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 0c                	jne    c0008440 <f_mkfs+0x10c7>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 75 00 00 00       	call   c00084b2 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	bb 01 00 00 00       	mov    ebx,0x1
c0008445:	eb 48                	jmp    c000848f <f_mkfs+0x1116>
c0008447:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844f:	75 3e                	jne    c000848f <f_mkfs+0x1116>
c0008451:	83 ec 0c             	sub    esp,0xc
c0008454:	55                   	push   ebp
c0008455:	e8 58 00 00 00       	call   c00084b2 <ff_memfree>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	eb 30                	jmp    c000848f <f_mkfs+0x1116>
c000845f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008464:	0f 85 eb fa ff ff    	jne    c0007f55 <f_mkfs+0xbdc>
c000846a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000846e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008474:	0f 86 b8 f9 ff ff    	jbe    c0007e32 <f_mkfs+0xab9>
c000847a:	e9 bf fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000847f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008484:	0f 85 c0 fa ff ff    	jne    c0007f4a <f_mkfs+0xbd1>
c000848a:	e9 af fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000848f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008495:	89 d8                	mov    eax,ebx
c0008497:	5b                   	pop    ebx
c0008498:	5e                   	pop    esi
c0008499:	5f                   	pop    edi
c000849a:	5d                   	pop    ebp
c000849b:	c3                   	ret    

c000849c <ff_memalloc>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	83 ec 0c             	sub    esp,0xc
c00084a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a6:	e8 a0 73 00 00       	call   c000f84b <malloc>
c00084ab:	83 c4 10             	add    esp,0x10
c00084ae:	83 c4 0c             	add    esp,0xc
c00084b1:	c3                   	ret    

c00084b2 <ff_memfree>:
c00084b2:	83 ec 0c             	sub    esp,0xc
c00084b5:	83 ec 0c             	sub    esp,0xc
c00084b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bc:	e8 9a 73 00 00       	call   c000f85b <free>
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	90                   	nop
c00084c5:	83 c4 0c             	add    esp,0xc
c00084c8:	c3                   	ret    

c00084c9 <ff_uni2oem>:
c00084c9:	83 ec 14             	sub    esp,0x14
c00084cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084db:	c7 44 24 0c a0 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc00298a0
c00084e3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e8:	77 0b                	ja     c00084f5 <ff_uni2oem+0x2c>
c00084ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	eb 5b                	jmp    c0008550 <ff_uni2oem+0x87>
c00084f5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084fd:	77 51                	ja     c0008550 <ff_uni2oem+0x87>
c00084ff:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008505:	75 49                	jne    c0008550 <ff_uni2oem+0x87>
c0008507:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000850e:	eb 0b                	jmp    c000851b <ff_uni2oem+0x52>
c0008510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008515:	40                   	inc    eax
c0008516:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008521:	77 1b                	ja     c000853e <ff_uni2oem+0x75>
c0008523:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008528:	01 c0                	add    eax,eax
c000852a:	89 c2                	mov    edx,eax
c000852c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008530:	01 d0                	add    eax,edx
c0008532:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008535:	0f b7 c0             	movzx  eax,ax
c0008538:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853c:	75 d2                	jne    c0008510 <ff_uni2oem+0x47>
c000853e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008543:	83 e8 80             	sub    eax,0xffffff80
c0008546:	25 ff 00 00 00       	and    eax,0xff
c000854b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008550:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008555:	83 c4 14             	add    esp,0x14
c0008558:	c3                   	ret    

c0008559 <ff_oem2uni>:
c0008559:	83 ec 18             	sub    esp,0x18
c000855c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008564:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008569:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008574:	c7 44 24 10 a0 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc00298a0
c000857c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008582:	77 0b                	ja     c000858f <ff_oem2uni+0x36>
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858d:	eb 2d                	jmp    c00085bc <ff_oem2uni+0x63>
c000858f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008595:	75 25                	jne    c00085bc <ff_oem2uni+0x63>
c0008597:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000859e:	77 1c                	ja     c00085bc <ff_oem2uni+0x63>
c00085a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085aa:	01 c0                	add    eax,eax
c00085ac:	89 c2                	mov    edx,eax
c00085ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b2:	01 d0                	add    eax,edx
c00085b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085bc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c1:	83 c4 18             	add    esp,0x18
c00085c4:	c3                   	ret    

c00085c5 <ff_wtoupper>:
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d0:	0f 87 3e 01 00 00    	ja     c0008714 <ff_wtoupper+0x14f>
c00085d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e6:	77 07                	ja     c00085ef <ff_wtoupper+0x2a>
c00085e8:	b8 a0 96 02 c0       	mov    eax,0xc00296a0
c00085ed:	eb 05                	jmp    c00085f4 <ff_wtoupper+0x2f>
c00085ef:	b8 e0 95 02 c0       	mov    eax,0xc00295e0
c00085f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fc:	8d 50 02             	lea    edx,[eax+0x2]
c00085ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008603:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008606:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008611:	0f 84 f4 00 00 00    	je     c000870b <ff_wtoupper+0x146>
c0008617:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008621:	0f 82 e4 00 00 00    	jb     c000870b <ff_wtoupper+0x146>
c0008627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862b:	8d 50 02             	lea    edx,[eax+0x2]
c000862e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000863f:	66 c1 e8 08          	shr    ax,0x8
c0008643:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008648:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000864f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008654:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008659:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000865e:	01 ca                	add    edx,ecx
c0008660:	39 d0                	cmp    eax,edx
c0008662:	0f 8d 86 00 00 00    	jge    c00086ee <ff_wtoupper+0x129>
c0008668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866d:	83 f8 08             	cmp    eax,0x8
c0008670:	0f 87 94 00 00 00    	ja     c000870a <ff_wtoupper+0x145>
c0008676:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c000867d:	ff e0                	jmp    eax
c000867f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008684:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008689:	29 c2                	sub    edx,eax
c000868b:	89 d0                	mov    eax,edx
c000868d:	01 c0                	add    eax,eax
c000868f:	89 c2                	mov    edx,eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	01 d0                	add    eax,edx
c0008697:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000869f:	eb 4b                	jmp    c00086ec <ff_wtoupper+0x127>
c00086a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086aa:	83 e0 01             	and    eax,0x1
c00086ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b2:	eb 38                	jmp    c00086ec <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086ba:	eb 30                	jmp    c00086ec <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c2:	eb 28                	jmp    c00086ec <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ca:	eb 20                	jmp    c00086ec <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d2:	eb 18                	jmp    c00086ec <ff_wtoupper+0x127>
c00086d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086da:	eb 10                	jmp    c00086ec <ff_wtoupper+0x127>
c00086dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e2:	eb 08                	jmp    c00086ec <ff_wtoupper+0x127>
c00086e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086eb:	90                   	nop
c00086ec:	eb 1c                	jmp    c000870a <ff_wtoupper+0x145>
c00086ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f4:	0f 85 fe fe ff ff    	jne    c00085f8 <ff_wtoupper+0x33>
c00086fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086ff:	01 c0                	add    eax,eax
c0008701:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008705:	e9 ee fe ff ff       	jmp    c00085f8 <ff_wtoupper+0x33>
c000870a:	90                   	nop
c000870b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008718:	83 c4 10             	add    esp,0x10
c000871b:	c3                   	ret    

c000871c <psrc_set_converter>:
c000871c:	56                   	push   esi
c000871d:	89 d6                	mov    esi,edx
c000871f:	53                   	push   ebx
c0008720:	89 c3                	mov    ebx,eax
c0008722:	83 ec 0c             	sub    esp,0xc
c0008725:	52                   	push   edx
c0008726:	50                   	push   eax
c0008727:	e8 6f 55 00 00       	call   c000dc9b <sinc_set_converter>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	85 c0                	test   eax,eax
c0008731:	74 25                	je     c0008758 <psrc_set_converter+0x3c>
c0008733:	50                   	push   eax
c0008734:	50                   	push   eax
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	e8 17 5d 00 00       	call   c000e453 <zoh_set_converter>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	85 c0                	test   eax,eax
c0008741:	74 15                	je     c0008758 <psrc_set_converter+0x3c>
c0008743:	51                   	push   ecx
c0008744:	51                   	push   ecx
c0008745:	56                   	push   esi
c0008746:	53                   	push   ebx
c0008747:	e8 0f 11 00 00       	call   c000985b <linear_set_converter>
c000874c:	83 c4 10             	add    esp,0x10
c000874f:	ba 0a 00 00 00       	mov    edx,0xa
c0008754:	85 c0                	test   eax,eax
c0008756:	75 02                	jne    c000875a <psrc_set_converter+0x3e>
c0008758:	31 d2                	xor    edx,edx
c000875a:	89 d0                	mov    eax,edx
c000875c:	5a                   	pop    edx
c000875d:	5b                   	pop    ebx
c000875e:	5e                   	pop    esi
c000875f:	c3                   	ret    

c0008760 <src_delete>:
c0008760:	53                   	push   ebx
c0008761:	83 ec 08             	sub    esp,0x8
c0008764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008768:	85 db                	test   ebx,ebx
c000876a:	74 29                	je     c0008795 <src_delete+0x35>
c000876c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000876f:	85 c0                	test   eax,eax
c0008771:	74 0c                	je     c000877f <src_delete+0x1f>
c0008773:	83 ec 0c             	sub    esp,0xc
c0008776:	50                   	push   eax
c0008777:	e8 df 70 00 00       	call   c000f85b <free>
c000877c:	83 c4 10             	add    esp,0x10
c000877f:	50                   	push   eax
c0008780:	6a 3c                	push   0x3c
c0008782:	6a 00                	push   0x0
c0008784:	53                   	push   ebx
c0008785:	e8 f6 7f ff ff       	call   c0000780 <memset>
c000878a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878d:	e8 c9 70 00 00       	call   c000f85b <free>
c0008792:	83 c4 10             	add    esp,0x10
c0008795:	31 c0                	xor    eax,eax
c0008797:	83 c4 08             	add    esp,0x8
c000879a:	5b                   	pop    ebx
c000879b:	c3                   	ret    

c000879c <src_process>:
c000879c:	55                   	push   ebp
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 1c             	sub    esp,0x1c
c00087a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ab:	85 ed                	test   ebp,ebp
c00087ad:	0f 84 6f 01 00 00    	je     c0008922 <src_process+0x186>
c00087b3:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b7:	0f 84 6c 01 00 00    	je     c0008929 <src_process+0x18d>
c00087bd:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c1:	0f 84 62 01 00 00    	je     c0008929 <src_process+0x18d>
c00087c7:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ce:	0f 85 5c 01 00 00    	jne    c0008930 <src_process+0x194>
c00087d4:	85 db                	test   ebx,ebx
c00087d6:	0f 84 5b 01 00 00    	je     c0008937 <src_process+0x19b>
c00087dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087de:	85 f6                	test   esi,esi
c00087e0:	0f 84 58 01 00 00    	je     c000893e <src_process+0x1a2>
c00087e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e9:	85 ff                	test   edi,edi
c00087eb:	0f 84 4d 01 00 00    	je     c000893e <src_process+0x1a2>
c00087f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087ff:	68 00 00 70 3f       	push   0x3f700000
c0008804:	6a 00                	push   0x0
c0008806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880e:	e8 30 fd 01 00       	call   c0028543 <__ltdf2>
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	0f 88 27 01 00 00    	js     c0008945 <src_process+0x1a9>
c000881e:	68 00 00 70 40       	push   0x40700000
c0008823:	6a 00                	push   0x0
c0008825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882d:	e8 f3 fc 01 00       	call   c0028525 <__gtdf2>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	85 c0                	test   eax,eax
c0008837:	0f 8f 08 01 00 00    	jg     c0008945 <src_process+0x1a9>
c000883d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008841:	79 07                	jns    c000884a <src_process+0xae>
c0008843:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884d:	85 c0                	test   eax,eax
c000884f:	79 50                	jns    c00088a1 <src_process+0x105>
c0008851:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008858:	39 fe                	cmp    esi,edi
c000885a:	72 37                	jb     c0008893 <src_process+0xf7>
c000885c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886a:	68 00 00 70 3f       	push   0x3f700000
c000886f:	6a 00                	push   0x0
c0008871:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008874:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008877:	e8 c7 fc 01 00       	call   c0028543 <__ltdf2>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	85 c0                	test   eax,eax
c0008881:	79 37                	jns    c00088ba <src_process+0x11e>
c0008883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000888e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008891:	eb 27                	jmp    c00088ba <src_process+0x11e>
c0008893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008896:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889a:	8d 04 86             	lea    eax,[esi+eax*4]
c000889d:	39 c7                	cmp    edi,eax
c000889f:	eb 0d                	jmp    c00088ae <src_process+0x112>
c00088a1:	39 fe                	cmp    esi,edi
c00088a3:	72 ee                	jb     c0008893 <src_process+0xf7>
c00088a5:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a9:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ac:	39 c6                	cmp    esi,eax
c00088ae:	73 ac                	jae    c000885c <src_process+0xc0>
c00088b0:	b8 10 00 00 00       	mov    eax,0x10
c00088b5:	e9 90 00 00 00       	jmp    c000894a <src_process+0x1ae>
c00088ba:	83 ec 10             	sub    esp,0x10
c00088bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c9:	e8 7a f3 01 00       	call   c0027c48 <__subdf3>
c00088ce:	83 c4 18             	add    esp,0x18
c00088d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	e8 00 fe 01 00       	call   c00286e0 <fabs>
c00088e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	68 af 03 d2 3c       	push   0x3cd203af
c00088f0:	68 16 56 e7 9e       	push   0x9ee75616
c00088f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fd:	e8 41 fc 01 00       	call   c0028543 <__ltdf2>
c0008902:	83 c4 10             	add    esp,0x10
c0008905:	85 c0                	test   eax,eax
c0008907:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000890f:	79 05                	jns    c0008916 <src_process+0x17a>
c0008911:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008914:	eb 03                	jmp    c0008919 <src_process+0x17d>
c0008916:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008919:	83 c4 1c             	add    esp,0x1c
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	5d                   	pop    ebp
c0008920:	ff e0                	jmp    eax
c0008922:	b8 02 00 00 00       	mov    eax,0x2
c0008927:	eb 21                	jmp    c000894a <src_process+0x1ae>
c0008929:	b8 07 00 00 00       	mov    eax,0x7
c000892e:	eb 1a                	jmp    c000894a <src_process+0x1ae>
c0008930:	b8 12 00 00 00       	mov    eax,0x12
c0008935:	eb 13                	jmp    c000894a <src_process+0x1ae>
c0008937:	b8 03 00 00 00       	mov    eax,0x3
c000893c:	eb 0c                	jmp    c000894a <src_process+0x1ae>
c000893e:	b8 04 00 00 00       	mov    eax,0x4
c0008943:	eb 05                	jmp    c000894a <src_process+0x1ae>
c0008945:	b8 06 00 00 00       	mov    eax,0x6
c000894a:	83 c4 1c             	add    esp,0x1c
c000894d:	5b                   	pop    ebx
c000894e:	5e                   	pop    esi
c000894f:	5f                   	pop    edi
c0008950:	5d                   	pop    ebp
c0008951:	c3                   	ret    

c0008952 <src_callback_read>:
c0008952:	55                   	push   ebp
c0008953:	57                   	push   edi
c0008954:	56                   	push   esi
c0008955:	53                   	push   ebx
c0008956:	83 ec 3c             	sub    esp,0x3c
c0008959:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008961:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008965:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008969:	85 ed                	test   ebp,ebp
c000896b:	0f 8e 52 01 00 00    	jle    c0008ac3 <src_callback_read+0x171>
c0008971:	85 db                	test   ebx,ebx
c0008973:	0f 84 4a 01 00 00    	je     c0008ac3 <src_callback_read+0x171>
c0008979:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008980:	74 0c                	je     c000898e <src_callback_read+0x3c>
c0008982:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008989:	e9 35 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c000898e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008992:	75 0c                	jne    c00089a0 <src_callback_read+0x4e>
c0008994:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899b:	e9 23 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c00089a0:	51                   	push   ecx
c00089a1:	6a 24                	push   0x24
c00089a3:	6a 00                	push   0x0
c00089a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a9:	50                   	push   eax
c00089aa:	e8 d1 7d ff ff       	call   c0000780 <memset>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	68 00 00 70 3f       	push   0x3f700000
c00089b7:	6a 00                	push   0x0
c00089b9:	57                   	push   edi
c00089ba:	56                   	push   esi
c00089bb:	e8 83 fb 01 00       	call   c0028543 <__ltdf2>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	85 c0                	test   eax,eax
c00089c5:	78 3e                	js     c0008a05 <src_callback_read+0xb3>
c00089c7:	68 00 00 70 40       	push   0x40700000
c00089cc:	6a 00                	push   0x0
c00089ce:	57                   	push   edi
c00089cf:	56                   	push   esi
c00089d0:	e8 50 fb 01 00       	call   c0028525 <__gtdf2>
c00089d5:	83 c4 10             	add    esp,0x10
c00089d8:	85 c0                	test   eax,eax
c00089da:	7f 29                	jg     c0008a05 <src_callback_read+0xb3>
c00089dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e8:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ef:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	31 f6                	xor    esi,esi
c00089f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a00:	e9 97 00 00 00       	jmp    c0008a9c <src_callback_read+0x14a>
c0008a05:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0c:	e9 b2 00 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c0008a11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a19:	52                   	push   edx
c0008a1a:	52                   	push   edx
c0008a1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a1f:	50                   	push   eax
c0008a20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a23:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 08                	jne    c0008a41 <src_callback_read+0xef>
c0008a39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a41:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a48:	50                   	push   eax
c0008a49:	50                   	push   eax
c0008a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a4e:	50                   	push   eax
c0008a4f:	53                   	push   ebx
c0008a50:	e8 47 fd ff ff       	call   c000879c <src_process>
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5f:	85 c0                	test   eax,eax
c0008a61:	75 49                	jne    c0008aac <src_callback_read+0x15a>
c0008a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a67:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6a:	89 f9                	mov    ecx,edi
c0008a6c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a70:	0f af ca             	imul   ecx,edx
c0008a73:	c1 e1 02             	shl    ecx,0x2
c0008a76:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a7e:	0f af d1             	imul   edx,ecx
c0008a81:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a85:	c1 e2 02             	shl    edx,0x2
c0008a88:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8c:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a94:	74 12                	je     c0008aa8 <src_callback_read+0x156>
c0008a96:	39 d5                	cmp    ebp,edx
c0008a98:	7e 14                	jle    c0008aae <src_callback_read+0x15c>
c0008a9a:	89 d6                	mov    esi,edx
c0008a9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa1:	75 9e                	jne    c0008a41 <src_callback_read+0xef>
c0008aa3:	e9 69 ff ff ff       	jmp    c0008a11 <src_callback_read+0xbf>
c0008aa8:	85 c9                	test   ecx,ecx
c0008aaa:	75 ea                	jne    c0008a96 <src_callback_read+0x144>
c0008aac:	89 f2                	mov    edx,esi
c0008aae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abb:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008abe:	74 05                	je     c0008ac5 <src_callback_read+0x173>
c0008ac0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac3:	31 d2                	xor    edx,edx
c0008ac5:	83 c4 3c             	add    esp,0x3c
c0008ac8:	89 d0                	mov    eax,edx
c0008aca:	5b                   	pop    ebx
c0008acb:	5e                   	pop    esi
c0008acc:	5f                   	pop    edi
c0008acd:	5d                   	pop    ebp
c0008ace:	c3                   	ret    

c0008acf <src_set_ratio>:
c0008acf:	57                   	push   edi
c0008ad0:	ba 02 00 00 00       	mov    edx,0x2
c0008ad5:	56                   	push   esi
c0008ad6:	53                   	push   ebx
c0008ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008adf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae3:	85 db                	test   ebx,ebx
c0008ae5:	74 4c                	je     c0008b33 <src_set_ratio+0x64>
c0008ae7:	ba 07 00 00 00       	mov    edx,0x7
c0008aec:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af0:	74 41                	je     c0008b33 <src_set_ratio+0x64>
c0008af2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af6:	74 3b                	je     c0008b33 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 3f       	push   0x3f700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 3d fa 01 00       	call   c0028543 <__ltdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	78 21                	js     c0008b33 <src_set_ratio+0x64>
c0008b12:	68 00 00 70 40       	push   0x40700000
c0008b17:	6a 00                	push   0x0
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	e8 05 fa 01 00       	call   c0028525 <__gtdf2>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 06 00 00 00       	mov    edx,0x6
c0008b28:	85 c0                	test   eax,eax
c0008b2a:	7f 07                	jg     c0008b33 <src_set_ratio+0x64>
c0008b2c:	89 33                	mov    DWORD PTR [ebx],esi
c0008b2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b31:	31 d2                	xor    edx,edx
c0008b33:	5b                   	pop    ebx
c0008b34:	89 d0                	mov    eax,edx
c0008b36:	5e                   	pop    esi
c0008b37:	5f                   	pop    edi
c0008b38:	c3                   	ret    

c0008b39 <src_get_channels>:
c0008b39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3d:	b8 02 00 00 00       	mov    eax,0x2
c0008b42:	85 d2                	test   edx,edx
c0008b44:	74 14                	je     c0008b5a <src_get_channels+0x21>
c0008b46:	b8 07 00 00 00       	mov    eax,0x7
c0008b4b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b4f:	74 09                	je     c0008b5a <src_get_channels+0x21>
c0008b51:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b55:	74 03                	je     c0008b5a <src_get_channels+0x21>
c0008b57:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5a:	c3                   	ret    

c0008b5b <src_reset>:
c0008b5b:	53                   	push   ebx
c0008b5c:	b8 02 00 00 00       	mov    eax,0x2
c0008b61:	83 ec 08             	sub    esp,0x8
c0008b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b68:	85 db                	test   ebx,ebx
c0008b6a:	74 36                	je     c0008ba2 <src_reset+0x47>
c0008b6c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b6f:	85 c0                	test   eax,eax
c0008b71:	74 09                	je     c0008b7c <src_reset+0x21>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	53                   	push   ebx
c0008b77:	ff d0                	call   eax
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	31 c0                	xor    eax,eax
c0008b7e:	31 d2                	xor    edx,edx
c0008b80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b83:	89 03                	mov    DWORD PTR [ebx],eax
c0008b85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b88:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b92:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba0:	31 c0                	xor    eax,eax
c0008ba2:	83 c4 08             	add    esp,0x8
c0008ba5:	5b                   	pop    ebx
c0008ba6:	c3                   	ret    

c0008ba7 <src_new>:
c0008ba7:	57                   	push   edi
c0008ba8:	56                   	push   esi
c0008ba9:	53                   	push   ebx
c0008baa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb2:	85 f6                	test   esi,esi
c0008bb4:	74 73                	je     c0008c29 <src_new+0x82>
c0008bb6:	85 ff                	test   edi,edi
c0008bb8:	7f 08                	jg     c0008bc2 <src_new+0x1b>
c0008bba:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc0:	eb 1e                	jmp    c0008be0 <src_new+0x39>
c0008bc2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc8:	50                   	push   eax
c0008bc9:	50                   	push   eax
c0008bca:	6a 3c                	push   0x3c
c0008bcc:	6a 01                	push   0x1
c0008bce:	e8 a8 6c 00 00       	call   c000f87b <calloc>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	89 c3                	mov    ebx,eax
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	75 10                	jne    c0008bec <src_new+0x45>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	75 04                	jne    c0008be4 <src_new+0x3d>
c0008be0:	31 db                	xor    ebx,ebx
c0008be2:	eb 4b                	jmp    c0008c2f <src_new+0x88>
c0008be4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bea:	eb 43                	jmp    c0008c2f <src_new+0x88>
c0008bec:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bef:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfa:	e8 1d fb ff ff       	call   c000871c <psrc_set_converter>
c0008bff:	85 c0                	test   eax,eax
c0008c01:	74 18                	je     c0008c1b <src_new+0x74>
c0008c03:	85 f6                	test   esi,esi
c0008c05:	74 06                	je     c0008c0d <src_new+0x66>
c0008c07:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0d:	83 ec 0c             	sub    esp,0xc
c0008c10:	53                   	push   ebx
c0008c11:	31 db                	xor    ebx,ebx
c0008c13:	e8 43 6c 00 00       	call   c000f85b <free>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	83 ec 0c             	sub    esp,0xc
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 37 ff ff ff       	call   c0008b5b <src_reset>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	eb 06                	jmp    c0008c2f <src_new+0x88>
c0008c29:	85 ff                	test   edi,edi
c0008c2b:	7f 9b                	jg     c0008bc8 <src_new+0x21>
c0008c2d:	eb b1                	jmp    c0008be0 <src_new+0x39>
c0008c2f:	89 d8                	mov    eax,ebx
c0008c31:	5b                   	pop    ebx
c0008c32:	5e                   	pop    esi
c0008c33:	5f                   	pop    edi
c0008c34:	c3                   	ret    

c0008c35 <src_callback_new>:
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	53                   	push   ebx
c0008c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c40:	85 f6                	test   esi,esi
c0008c42:	75 0e                	jne    c0008c52 <src_callback_new+0x1d>
c0008c44:	31 db                	xor    ebx,ebx
c0008c46:	85 c0                	test   eax,eax
c0008c48:	74 47                	je     c0008c91 <src_callback_new+0x5c>
c0008c4a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c50:	eb 3f                	jmp    c0008c91 <src_callback_new+0x5c>
c0008c52:	85 c0                	test   eax,eax
c0008c54:	74 06                	je     c0008c5c <src_callback_new+0x27>
c0008c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5c:	51                   	push   ecx
c0008c5d:	50                   	push   eax
c0008c5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c66:	e8 3c ff ff ff       	call   c0008ba7 <src_new>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 c3                	mov    ebx,eax
c0008c70:	85 c0                	test   eax,eax
c0008c72:	74 1d                	je     c0008c91 <src_callback_new+0x5c>
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	50                   	push   eax
c0008c78:	e8 de fe ff ff       	call   c0008b5b <src_reset>
c0008c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c81:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c88:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	89 d8                	mov    eax,ebx
c0008c93:	5a                   	pop    edx
c0008c94:	5b                   	pop    ebx
c0008c95:	5e                   	pop    esi
c0008c96:	c3                   	ret    

c0008c97 <src_get_name>:
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 14             	sub    esp,0x14
c0008c9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c9f:	53                   	push   ebx
c0008ca0:	e8 d0 4f 00 00       	call   c000dc75 <sinc_get_name>
c0008ca5:	83 c4 10             	add    esp,0x10
c0008ca8:	85 c0                	test   eax,eax
c0008caa:	75 1d                	jne    c0008cc9 <src_get_name+0x32>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	53                   	push   ebx
c0008cb0:	e8 80 57 00 00       	call   c000e435 <zoh_get_name>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 0d                	jne    c0008cc9 <src_get_name+0x32>
c0008cbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	e9 74 0b 00 00       	jmp    c000983d <linear_get_name>
c0008cc9:	83 c4 08             	add    esp,0x8
c0008ccc:	5b                   	pop    ebx
c0008ccd:	c3                   	ret    

c0008cce <src_get_description>:
c0008cce:	53                   	push   ebx
c0008ccf:	83 ec 14             	sub    esp,0x14
c0008cd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd6:	53                   	push   ebx
c0008cd7:	e8 ac 4f 00 00       	call   c000dc88 <sinc_get_description>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	85 c0                	test   eax,eax
c0008ce1:	75 1d                	jne    c0008d00 <src_get_description+0x32>
c0008ce3:	83 ec 0c             	sub    esp,0xc
c0008ce6:	53                   	push   ebx
c0008ce7:	e8 58 57 00 00       	call   c000e444 <zoh_get_description>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	85 c0                	test   eax,eax
c0008cf1:	75 0d                	jne    c0008d00 <src_get_description+0x32>
c0008cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf7:	83 c4 08             	add    esp,0x8
c0008cfa:	5b                   	pop    ebx
c0008cfb:	e9 4c 0b 00 00       	jmp    c000984c <linear_get_description>
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	c3                   	ret    

c0008d05 <src_get_version>:
c0008d05:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c0008d0a:	c3                   	ret    

c0008d0b <src_is_valid_ratio>:
c0008d0b:	83 ec 1c             	sub    esp,0x1c
c0008d0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	68 00 00 70 3f       	push   0x3f700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 11 f8 01 00       	call   c0028543 <__ltdf2>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	85 c0                	test   eax,eax
c0008d39:	78 1e                	js     c0008d59 <src_is_valid_ratio+0x4e>
c0008d3b:	68 00 00 70 40       	push   0x40700000
c0008d40:	6a 00                	push   0x0
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 d6 f7 01 00       	call   c0028525 <__gtdf2>
c0008d4f:	31 d2                	xor    edx,edx
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	0f 9e c2             	setle  dl
c0008d59:	89 d0                	mov    eax,edx
c0008d5b:	83 c4 1c             	add    esp,0x1c
c0008d5e:	c3                   	ret    

c0008d5f <src_error>:
c0008d5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 03                	je     c0008d6c <src_error+0xd>
c0008d69:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6c:	c3                   	ret    

c0008d6d <src_strerror>:
c0008d6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d71:	31 c0                	xor    eax,eax
c0008d73:	83 fa 17             	cmp    edx,0x17
c0008d76:	77 07                	ja     c0008d7f <src_strerror+0x12>
c0008d78:	8b 04 95 00 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6200]
c0008d7f:	c3                   	ret    

c0008d80 <src_simple>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	83 ec 18             	sub    esp,0x18
c0008d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8d:	50                   	push   eax
c0008d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d96:	e8 0c fe ff ff       	call   c0008ba7 <src_new>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	85 c0                	test   eax,eax
c0008da0:	75 06                	jne    c0008da8 <src_simple+0x28>
c0008da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da6:	eb 25                	jmp    c0008dcd <src_simple+0x4d>
c0008da8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008daf:	89 c3                	mov    ebx,eax
c0008db1:	50                   	push   eax
c0008db2:	50                   	push   eax
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	e8 e2 f9 ff ff       	call   c000879c <src_process>
c0008dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc1:	e8 9a f9 ff ff       	call   c0008760 <src_delete>
c0008dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	83 c4 14             	add    esp,0x14
c0008dd0:	5b                   	pop    ebx
c0008dd1:	5e                   	pop    esi
c0008dd2:	c3                   	ret    

c0008dd3 <src_short_to_float_array>:
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 18             	sub    esp,0x18
c0008dd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddb:	85 db                	test   ebx,ebx
c0008ddd:	74 54                	je     c0008e33 <src_short_to_float_array+0x60>
c0008ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de3:	4b                   	dec    ebx
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008deb:	50                   	push   eax
c0008dec:	e8 e6 f4 01 00       	call   c00282d7 <__floatsidf>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfc:	68 00 00 00 3f       	push   0x3f000000
c0008e01:	6a 00                	push   0x0
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0b:	e8 64 ee 01 00       	call   c0027c74 <__muldf3>
c0008e10:	59                   	pop    ecx
c0008e11:	59                   	pop    ecx
c0008e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e22:	e8 20 f7 01 00       	call   c0028547 <__truncdfsf2>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e2e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e31:	eb a8                	jmp    c0008ddb <src_short_to_float_array+0x8>
c0008e33:	83 c4 18             	add    esp,0x18
c0008e36:	5b                   	pop    ebx
c0008e37:	c3                   	ret    

c0008e38 <src_float_to_short_array>:
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 14             	sub    esp,0x14
c0008e3d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e45:	85 db                	test   ebx,ebx
c0008e47:	0f 84 a4 00 00 00    	je     c0008ef1 <src_float_to_short_array+0xb9>
c0008e4d:	83 ec 0c             	sub    esp,0xc
c0008e50:	4b                   	dec    ebx
c0008e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e58:	e8 0e f8 01 00       	call   c002866b <__extendsfdf2>
c0008e5d:	83 c4 10             	add    esp,0x10
c0008e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e68:	68 00 00 e0 41       	push   0x41e00000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e77:	e8 f8 ed 01 00       	call   c0027c74 <__muldf3>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 ff ff df 41       	push   0x41dfffff
c0008e8c:	68 00 00 c0 ff       	push   0xffc00000
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e99:	e8 a3 f6 01 00       	call   c0028541 <__gedf2>
c0008e9e:	83 c4 10             	add    esp,0x10
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	78 08                	js     c0008ead <src_float_to_short_array+0x75>
c0008ea5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eab:	eb 98                	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ead:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb2:	6a 00                	push   0x0
c0008eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	e8 84 f6 01 00       	call   c0028545 <__ledf2>
c0008ec1:	83 c4 10             	add    esp,0x10
c0008ec4:	85 c0                	test   eax,eax
c0008ec6:	7f 0b                	jg     c0008ed3 <src_float_to_short_array+0x9b>
c0008ec8:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ece:	e9 72 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ed3:	50                   	push   eax
c0008ed4:	50                   	push   eax
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 1e f8 01 00       	call   c0028700 <lrint>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	c1 f8 10             	sar    eax,0x10
c0008ee8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eec:	e9 54 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ef1:	83 c4 14             	add    esp,0x14
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	c3                   	ret    

c0008ef7 <src_int_to_float_array>:
c0008ef7:	53                   	push   ebx
c0008ef8:	83 ec 18             	sub    esp,0x18
c0008efb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008eff:	85 db                	test   ebx,ebx
c0008f01:	74 52                	je     c0008f55 <src_int_to_float_array+0x5e>
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	4b                   	dec    ebx
c0008f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f0e:	e8 c4 f3 01 00       	call   c00282d7 <__floatsidf>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f1e:	68 00 00 00 3e       	push   0x3e000000
c0008f23:	6a 00                	push   0x0
c0008f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	e8 42 ed 01 00       	call   c0027c74 <__muldf3>
c0008f32:	59                   	pop    ecx
c0008f33:	59                   	pop    ecx
c0008f34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f44:	e8 fe f5 01 00       	call   c0028547 <__truncdfsf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f50:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f53:	eb aa                	jmp    c0008eff <src_int_to_float_array+0x8>
c0008f55:	83 c4 18             	add    esp,0x18
c0008f58:	5b                   	pop    ebx
c0008f59:	c3                   	ret    

c0008f5a <src_float_to_int_array>:
c0008f5a:	56                   	push   esi
c0008f5b:	53                   	push   ebx
c0008f5c:	83 ec 14             	sub    esp,0x14
c0008f5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f63:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f67:	85 db                	test   ebx,ebx
c0008f69:	0f 84 a2 00 00 00    	je     c0009011 <src_float_to_int_array+0xb7>
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	4b                   	dec    ebx
c0008f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7a:	e8 ec f6 01 00       	call   c002866b <__extendsfdf2>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8a:	68 00 00 e0 41       	push   0x41e00000
c0008f8f:	6a 00                	push   0x0
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	e8 d6 ec 01 00       	call   c0027c74 <__muldf3>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa9:	68 ff ff df 41       	push   0x41dfffff
c0008fae:	68 00 00 c0 ff       	push   0xffc00000
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	e8 81 f5 01 00       	call   c0028541 <__gedf2>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	85 c0                	test   eax,eax
c0008fc5:	78 09                	js     c0008fd0 <src_float_to_int_array+0x76>
c0008fc7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fce:	eb 97                	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008fd0:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd5:	6a 00                	push   0x0
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdf:	e8 61 f5 01 00       	call   c0028545 <__ledf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	7f 0c                	jg     c0008ff7 <src_float_to_int_array+0x9d>
c0008feb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff2:	e9 70 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008ff7:	50                   	push   eax
c0008ff8:	50                   	push   eax
c0008ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009001:	e8 fa f6 01 00       	call   c0028700 <lrint>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900c:	e9 56 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0009011:	83 c4 14             	add    esp,0x14
c0009014:	5b                   	pop    ebx
c0009015:	5e                   	pop    esi
c0009016:	c3                   	ret    

c0009017 <linear_vari_process>:
c0009017:	55                   	push   ebp
c0009018:	31 d2                	xor    edx,edx
c000901a:	57                   	push   edi
c000901b:	56                   	push   esi
c000901c:	53                   	push   ebx
c000901d:	83 ec 3c             	sub    esp,0x3c
c0009020:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009024:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009028:	0f 8e d3 07 00 00    	jle    c0009801 <linear_vari_process+0x7ea>
c000902e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009032:	ba 05 00 00 00       	mov    edx,0x5
c0009037:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903a:	85 db                	test   ebx,ebx
c000903c:	0f 84 bf 07 00 00    	je     c0009801 <linear_vari_process+0x7ea>
c0009042:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009045:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009049:	74 19                	je     c0009064 <linear_vari_process+0x4d>
c000904b:	31 d2                	xor    edx,edx
c000904d:	39 c2                	cmp    edx,eax
c000904f:	7d 0c                	jge    c000905d <linear_vari_process+0x46>
c0009051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009053:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009056:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905a:	42                   	inc    edx
c000905b:	eb f0                	jmp    c000904d <linear_vari_process+0x36>
c000905d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009064:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009067:	0f af d0             	imul   edx,eax
c000906a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009071:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009078:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009082:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009086:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009089:	8b 00                	mov    eax,DWORD PTR [eax]
c000908b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	68 00 00 70 3f       	push   0x3f700000
c0009098:	6a 00                	push   0x0
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a2:	e8 9c f4 01 00       	call   c0028543 <__ltdf2>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	ba 16 00 00 00       	mov    edx,0x16
c00090af:	85 c0                	test   eax,eax
c00090b1:	0f 88 4a 07 00 00    	js     c0009801 <linear_vari_process+0x7ea>
c00090b7:	68 00 00 70 40       	push   0x40700000
c00090bc:	6a 00                	push   0x0
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 5a f4 01 00       	call   c0028525 <__gtdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	ba 16 00 00 00       	mov    edx,0x16
c00090d3:	85 c0                	test   eax,eax
c00090d5:	0f 8f 26 07 00 00    	jg     c0009801 <linear_vari_process+0x7ea>
c00090db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ed:	68 00 00 f0 3f       	push   0x3ff00000
c00090f2:	6a 00                	push   0x0
c00090f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	e8 42 f4 01 00       	call   c0028543 <__ltdf2>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	85 c0                	test   eax,eax
c0009106:	0f 89 89 02 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c000910c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000910f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009112:	0f 8d 7d 02 00 00    	jge    c0009395 <linear_vari_process+0x37e>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 b4 f1 01 00       	call   c00282d7 <__floatsidf>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	89 04 24             	mov    DWORD PTR [esp],eax
c0009129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912d:	68 00 00 f0 3f       	push   0x3ff00000
c0009132:	6a 00                	push   0x0
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913c:	e8 b6 e4 01 00       	call   c00275f7 <__adddf3>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914c:	52                   	push   edx
c000914d:	50                   	push   eax
c000914e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	e8 19 eb 01 00       	call   c0027c74 <__muldf3>
c000915b:	5d                   	pop    ebp
c000915c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009160:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009164:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009167:	e8 6b f1 01 00       	call   c00282d7 <__floatsidf>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009177:	52                   	push   edx
c0009178:	50                   	push   eax
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	e8 71 e4 01 00       	call   c00275f7 <__adddf3>
c0009186:	59                   	pop    ecx
c0009187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000918f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009192:	e8 40 f1 01 00       	call   c00282d7 <__floatsidf>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a2:	52                   	push   edx
c00091a3:	50                   	push   eax
c00091a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ac:	e8 90 f3 01 00       	call   c0028541 <__gedf2>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	85 c0                	test   eax,eax
c00091b6:	0f 89 d9 01 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c00091bc:	85 ff                	test   edi,edi
c00091be:	0f 8e f4 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c00091c4:	83 ec 10             	sub    esp,0x10
c00091c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d4:	ff 30                	push   DWORD PTR [eax]
c00091d6:	e8 6d ea 01 00       	call   c0027c48 <__subdf3>
c00091db:	83 c4 18             	add    esp,0x18
c00091de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e6:	52                   	push   edx
c00091e7:	50                   	push   eax
c00091e8:	e8 f3 f4 01 00       	call   c00286e0 <fabs>
c00091ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091fd:	68 23 42 92 0c       	push   0xc924223
c0009202:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920a:	e8 16 f3 01 00       	call   c0028525 <__gtdf2>
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	85 c0                	test   eax,eax
c0009214:	0f 8e 9e 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c000921a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000921e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009221:	8b 00                	mov    eax,DWORD PTR [eax]
c0009223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009227:	89 04 24             	mov    DWORD PTR [esp],eax
c000922a:	52                   	push   edx
c000922b:	50                   	push   eax
c000922c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000922f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009232:	e8 11 ea 01 00       	call   c0027c48 <__subdf3>
c0009237:	59                   	pop    ecx
c0009238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009243:	e8 8f f0 01 00       	call   c00282d7 <__floatsidf>
c0009248:	83 c4 10             	add    esp,0x10
c000924b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 12 ea 01 00       	call   c0027c74 <__muldf3>
c0009262:	5f                   	pop    edi
c0009263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009267:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000926e:	e8 64 f0 01 00       	call   c00282d7 <__floatsidf>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927e:	52                   	push   edx
c000927f:	50                   	push   eax
c0009280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 cb ec 01 00       	call   c0027f58 <__divdf3>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a8:	e8 4a e3 01 00       	call   c00275f7 <__adddf3>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b8:	31 ff                	xor    edi,edi
c00092ba:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bd:	0f 8e 9d 00 00 00    	jle    c0009360 <linear_vari_process+0x349>
c00092c3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c6:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d6:	52                   	push   edx
c00092d7:	52                   	push   edx
c00092d8:	55                   	push   ebp
c00092d9:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092dc:	47                   	inc    edi
c00092dd:	e8 aa dc 01 00       	call   c0026f8c <__subsf3>
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 81 f3 01 00       	call   c002866b <__extendsfdf2>
c00092ea:	83 c4 10             	add    esp,0x10
c00092ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 6a e9 01 00       	call   c0027c74 <__muldf3>
c000930a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009315:	e8 51 f3 01 00       	call   c002866b <__extendsfdf2>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009325:	52                   	push   edx
c0009326:	50                   	push   eax
c0009327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932f:	e8 c3 e2 01 00       	call   c00275f7 <__adddf3>
c0009334:	59                   	pop    ecx
c0009335:	5d                   	pop    ebp
c0009336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000933e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009342:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009346:	e8 fc f1 01 00       	call   c0028547 <__truncdfsf2>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009355:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009358:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935b:	e9 5a ff ff ff       	jmp    c00092ba <linear_vari_process+0x2a3>
c0009360:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009368:	68 00 00 f0 3f       	push   0x3ff00000
c000936d:	6a 00                	push   0x0
c000936f:	e8 e4 eb 01 00       	call   c0027f58 <__divdf3>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	89 04 24             	mov    DWORD PTR [esp],eax
c000937a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009388:	e8 6a e2 01 00       	call   c00275f7 <__adddf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	e9 50 fd ff ff       	jmp    c00090e5 <linear_vari_process+0xce>
c0009395:	50                   	push   eax
c0009396:	50                   	push   eax
c0009397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939f:	e8 5c f3 01 00       	call   c0028700 <lrint>
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	50                   	push   eax
c00093a8:	e8 2a ef 01 00       	call   c00282d7 <__floatsidf>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	52                   	push   edx
c00093b9:	50                   	push   eax
c00093ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c2:	e8 81 e8 01 00       	call   c0027c48 <__subdf3>
c00093c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093cf:	83 c4 20             	add    esp,0x20
c00093d2:	6a 00                	push   0x0
c00093d4:	6a 00                	push   0x0
c00093d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093de:	e8 60 f1 01 00       	call   c0028543 <__ltdf2>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	85 c0                	test   eax,eax
c00093e8:	79 1e                	jns    c0009408 <linear_vari_process+0x3f1>
c00093ea:	68 00 00 f0 3f       	push   0x3ff00000
c00093ef:	6a 00                	push   0x0
c00093f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f9:	e8 f9 e1 01 00       	call   c00275f7 <__adddf3>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	89 04 24             	mov    DWORD PTR [esp],eax
c0009404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009408:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940b:	83 ec 10             	sub    esp,0x10
c000940e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	e8 25 e8 01 00       	call   c0027c48 <__subdf3>
c0009423:	83 c4 18             	add    esp,0x18
c0009426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000942e:	52                   	push   edx
c000942f:	50                   	push   eax
c0009430:	e8 cb f2 01 00       	call   c0028700 <lrint>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	0f af f8             	imul   edi,eax
c000943b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000943e:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009441:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009444:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009447:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944a:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000944e:	0f 8d 13 03 00 00    	jge    c0009767 <linear_vari_process+0x750>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945a:	e8 78 ee 01 00       	call   c00282d7 <__floatsidf>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	e8 f5 e7 01 00       	call   c0027c74 <__muldf3>
c000947f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948a:	e8 48 ee 01 00       	call   c00282d7 <__floatsidf>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	52                   	push   edx
c000949b:	50                   	push   eax
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	e8 4e e1 01 00       	call   c00275f7 <__adddf3>
c00094a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b4:	e8 1e ee 01 00       	call   c00282d7 <__floatsidf>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c4:	52                   	push   edx
c00094c5:	50                   	push   eax
c00094c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	e8 70 f0 01 00       	call   c0028543 <__ltdf2>
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094dc:	0f 89 85 02 00 00    	jns    c0009767 <linear_vari_process+0x750>
c00094e2:	85 c9                	test   ecx,ecx
c00094e4:	0f 8e f5 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c00094ea:	83 ec 10             	sub    esp,0x10
c00094ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fa:	ff 30                	push   DWORD PTR [eax]
c00094fc:	e8 47 e7 01 00       	call   c0027c48 <__subdf3>
c0009501:	83 c4 18             	add    esp,0x18
c0009504:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009508:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950c:	52                   	push   edx
c000950d:	50                   	push   eax
c000950e:	e8 cd f1 01 00       	call   c00286e0 <fabs>
c0009513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009517:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009523:	68 23 42 92 0c       	push   0xc924223
c0009528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	e8 f0 ef 01 00       	call   c0028525 <__gtdf2>
c0009535:	83 c4 10             	add    esp,0x10
c0009538:	85 c0                	test   eax,eax
c000953a:	0f 8e 9f 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c0009540:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009544:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009547:	8b 00                	mov    eax,DWORD PTR [eax]
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009551:	52                   	push   edx
c0009552:	50                   	push   eax
c0009553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009559:	e8 ea e6 01 00       	call   c0027c48 <__subdf3>
c000955e:	5f                   	pop    edi
c000955f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009563:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009567:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956a:	e8 68 ed 01 00       	call   c00282d7 <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	e8 eb e6 01 00       	call   c0027c74 <__muldf3>
c0009589:	5d                   	pop    ebp
c000958a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000958e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009592:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009595:	e8 3d ed 01 00       	call   c00282d7 <__floatsidf>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a5:	52                   	push   edx
c00095a6:	50                   	push   eax
c00095a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095af:	e8 a4 e9 01 00       	call   c0027f58 <__divdf3>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cf:	e8 23 e0 01 00       	call   c00275f7 <__adddf3>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095df:	31 ff                	xor    edi,edi
c00095e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e4:	39 f8                	cmp    eax,edi
c00095e6:	0f 8e ac 00 00 00    	jle    c0009698 <linear_vari_process+0x681>
c00095ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f1:	29 c1                	sub    ecx,eax
c00095f3:	89 c8                	mov    eax,ecx
c00095f5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f8:	01 f8                	add    eax,edi
c00095fa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960b:	51                   	push   ecx
c000960c:	01 f8                	add    eax,edi
c000960e:	51                   	push   ecx
c000960f:	47                   	inc    edi
c0009610:	55                   	push   ebp
c0009611:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009614:	e8 73 d9 01 00       	call   c0026f8c <__subsf3>
c0009619:	89 04 24             	mov    DWORD PTR [esp],eax
c000961c:	e8 4a f0 01 00       	call   c002866b <__extendsfdf2>
c0009621:	83 c4 10             	add    esp,0x10
c0009624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009628:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009630:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	e8 33 e6 01 00       	call   c0027c74 <__muldf3>
c0009641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964c:	e8 1a f0 01 00       	call   c002866b <__extendsfdf2>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009658:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965c:	52                   	push   edx
c000965d:	50                   	push   eax
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009666:	e8 8c df 01 00       	call   c00275f7 <__adddf3>
c000966b:	5d                   	pop    ebp
c000966c:	59                   	pop    ecx
c000966d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009671:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967d:	e8 c5 ee 01 00       	call   c0028547 <__truncdfsf2>
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009690:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009693:	e9 49 ff ff ff       	jmp    c00095e1 <linear_vari_process+0x5ca>
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	68 00 00 f0 3f       	push   0x3ff00000
c00096a5:	6a 00                	push   0x0
c00096a7:	e8 ac e8 01 00       	call   c0027f58 <__divdf3>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 2b df 01 00       	call   c00275f7 <__adddf3>
c00096cc:	59                   	pop    ecx
c00096cd:	5f                   	pop    edi
c00096ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096de:	e8 1d f0 01 00       	call   c0028700 <lrint>
c00096e3:	83 ec 0c             	sub    esp,0xc
c00096e6:	50                   	push   eax
c00096e7:	e8 eb eb 01 00       	call   c00282d7 <__floatsidf>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f7:	52                   	push   edx
c00096f8:	50                   	push   eax
c00096f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009701:	e8 42 e5 01 00       	call   c0027c48 <__subdf3>
c0009706:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000970e:	83 c4 20             	add    esp,0x20
c0009711:	6a 00                	push   0x0
c0009713:	6a 00                	push   0x0
c0009715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971d:	e8 21 ee 01 00       	call   c0028543 <__ltdf2>
c0009722:	83 c4 10             	add    esp,0x10
c0009725:	85 c0                	test   eax,eax
c0009727:	79 1e                	jns    c0009747 <linear_vari_process+0x730>
c0009729:	68 00 00 f0 3f       	push   0x3ff00000
c000972e:	6a 00                	push   0x0
c0009730:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009734:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009738:	e8 ba de 01 00       	call   c00275f7 <__adddf3>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009747:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974a:	83 ec 10             	sub    esp,0x10
c000974d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009755:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009759:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975d:	e8 e6 e4 01 00       	call   c0027c48 <__subdf3>
c0009762:	e9 bc fc ff ff       	jmp    c0009423 <linear_vari_process+0x40c>
c0009767:	39 fd                	cmp    ebp,edi
c0009769:	7d 38                	jge    c00097a3 <linear_vari_process+0x78c>
c000976b:	83 ec 0c             	sub    esp,0xc
c000976e:	89 f8                	mov    eax,edi
c0009770:	29 e8                	sub    eax,ebp
c0009772:	99                   	cdq    
c0009773:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009776:	50                   	push   eax
c0009777:	e8 5b eb 01 00       	call   c00282d7 <__floatsidf>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009791:	e8 61 de 01 00       	call   c00275f7 <__adddf3>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979c:	89 04 24             	mov    DWORD PTR [esp],eax
c000979f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ae:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b7:	85 c0                	test   eax,eax
c00097b9:	7f 29                	jg     c00097e4 <linear_vari_process+0x7cd>
c00097bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c7:	89 01                	mov    DWORD PTR [ecx],eax
c00097c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097cf:	99                   	cdq    
c00097d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d9:	99                   	cdq    
c00097da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097dd:	31 d2                	xor    edx,edx
c00097df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e2:	eb 1d                	jmp    c0009801 <linear_vari_process+0x7ea>
c00097e4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e7:	31 d2                	xor    edx,edx
c00097e9:	29 c8                	sub    eax,ecx
c00097eb:	c1 e0 02             	shl    eax,0x2
c00097ee:	39 d1                	cmp    ecx,edx
c00097f0:	7e c9                	jle    c00097bb <linear_vari_process+0x7a4>
c00097f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f4:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f7:	83 c0 04             	add    eax,0x4
c00097fa:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097fe:	42                   	inc    edx
c00097ff:	eb ed                	jmp    c00097ee <linear_vari_process+0x7d7>
c0009801:	83 c4 3c             	add    esp,0x3c
c0009804:	89 d0                	mov    eax,edx
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <linear_reset>:
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009812:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009815:	85 c0                	test   eax,eax
c0009817:	74 20                	je     c0009839 <linear_reset+0x2e>
c0009819:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981c:	83 c0 1c             	add    eax,0x1c
c000981f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009822:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009829:	c1 e2 02             	shl    edx,0x2
c000982c:	51                   	push   ecx
c000982d:	52                   	push   edx
c000982e:	6a 00                	push   0x0
c0009830:	50                   	push   eax
c0009831:	e8 4a 6f ff ff       	call   c0000780 <memset>
c0009836:	83 c4 10             	add    esp,0x10
c0009839:	83 c4 0c             	add    esp,0xc
c000983c:	c3                   	ret    

c000983d <linear_get_name>:
c000983d:	31 c0                	xor    eax,eax
c000983f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009844:	75 05                	jne    c000984b <linear_get_name+0xe>
c0009846:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c000984b:	c3                   	ret    

c000984c <linear_get_description>:
c000984c:	31 c0                	xor    eax,eax
c000984e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009853:	75 05                	jne    c000985a <linear_get_description+0xe>
c0009855:	b8 74 9e 02 c0       	mov    eax,0xc0029e74
c000985a:	c3                   	ret    

c000985b <linear_set_converter>:
c000985b:	53                   	push   ebx
c000985c:	b8 0a 00 00 00       	mov    eax,0xa
c0009861:	83 ec 08             	sub    esp,0x8
c0009864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009868:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986d:	75 6e                	jne    c00098dd <linear_set_converter+0x82>
c000986f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009872:	85 c0                	test   eax,eax
c0009874:	74 13                	je     c0009889 <linear_set_converter+0x2e>
c0009876:	83 ec 0c             	sub    esp,0xc
c0009879:	50                   	push   eax
c000987a:	e8 dc 5f 00 00       	call   c000f85b <free>
c000987f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009886:	83 c4 10             	add    esp,0x10
c0009889:	50                   	push   eax
c000988a:	50                   	push   eax
c000988b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009895:	50                   	push   eax
c0009896:	6a 01                	push   0x1
c0009898:	e8 de 5f 00 00       	call   c000f87b <calloc>
c000989d:	83 c4 10             	add    esp,0x10
c00098a0:	89 c2                	mov    edx,eax
c00098a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a5:	85 d2                	test   edx,edx
c00098a7:	b8 01 00 00 00       	mov    eax,0x1
c00098ac:	74 2f                	je     c00098dd <linear_set_converter+0x82>
c00098ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b1:	83 ec 0c             	sub    esp,0xc
c00098b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bd:	c7 43 24 17 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009017
c00098c4:	c7 43 20 17 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009017
c00098cb:	c7 43 28 0b 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980b
c00098d2:	53                   	push   ebx
c00098d3:	e8 33 ff ff ff       	call   c000980b <linear_reset>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	31 c0                	xor    eax,eax
c00098dd:	83 c4 08             	add    esp,0x8
c00098e0:	5b                   	pop    ebx
c00098e1:	c3                   	ret    

c00098e2 <int_to_fp>:
c00098e2:	c1 e0 0c             	shl    eax,0xc
c00098e5:	c3                   	ret    

c00098e6 <fp_to_int>:
c00098e6:	c1 f8 0c             	sar    eax,0xc
c00098e9:	c3                   	ret    

c00098ea <fp_fraction_part>:
c00098ea:	25 ff 0f 00 00       	and    eax,0xfff
c00098ef:	c3                   	ret    

c00098f0 <fp_to_double>:
c00098f0:	83 ec 1c             	sub    esp,0x1c
c00098f3:	e8 f2 ff ff ff       	call   c00098ea <fp_fraction_part>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 d6 e9 01 00       	call   c00282d7 <__floatsidf>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990c:	68 00 00 30 3f       	push   0x3f300000
c0009911:	6a 00                	push   0x0
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 54 e3 01 00       	call   c0027c74 <__muldf3>
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <calc_output_single>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	89 c6                	mov    esi,eax
c0009929:	53                   	push   ebx
c000992a:	89 d3                	mov    ebx,edx
c000992c:	83 ec 4c             	sub    esp,0x4c
c000992f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009936:	e8 a7 ff ff ff       	call   c00098e2 <int_to_fp>
c000993b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000993e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009942:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009946:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994d:	99                   	cdq    
c000994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009956:	f7 fb                	idiv   ebx
c0009958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009960:	89 da                	mov    edx,ebx
c0009962:	0f af d0             	imul   edx,eax
c0009965:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009971:	29 c2                	sub    edx,eax
c0009973:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997a:	83 c5 04             	add    ebp,0x4
c000997d:	e8 6e ff ff ff       	call   c00098f0 <fp_to_double>
c0009982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000998e:	e8 53 ff ff ff       	call   c00098e6 <fp_to_int>
c0009993:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009996:	52                   	push   edx
c0009997:	52                   	push   edx
c0009998:	51                   	push   ecx
c0009999:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a1:	e8 e6 d5 01 00       	call   c0026f8c <__subsf3>
c00099a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a9:	e8 bd ec 01 00       	call   c002866b <__extendsfdf2>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c9:	e8 a6 e2 01 00       	call   c0027c74 <__muldf3>
c00099ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099dd:	e8 89 ec 01 00       	call   c002866b <__extendsfdf2>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ed:	52                   	push   edx
c00099ee:	50                   	push   eax
c00099ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f7:	e8 fb db 01 00       	call   c00275f7 <__adddf3>
c00099fc:	59                   	pop    ecx
c00099fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a05:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0b:	e8 5b ec 01 00       	call   c002866b <__extendsfdf2>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a25:	e8 4a e2 01 00       	call   c0027c74 <__muldf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a35:	52                   	push   edx
c0009a36:	50                   	push   eax
c0009a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3f:	e8 b3 db 01 00       	call   c00275f7 <__adddf3>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a4f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a53:	0f 89 1d ff ff ff    	jns    c0009976 <calc_output_single+0x52>
c0009a59:	89 d9                	mov    ecx,ebx
c0009a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a5f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a63:	89 dd                	mov    ebp,ebx
c0009a65:	29 c8                	sub    eax,ecx
c0009a67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a6f:	99                   	cdq    
c0009a70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a78:	f7 fb                	idiv   ebx
c0009a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a7e:	0f af e8             	imul   ebp,eax
c0009a81:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a85:	01 cd                	add    ebp,ecx
c0009a87:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8a:	89 e8                	mov    eax,ebp
c0009a8c:	83 ee 04             	sub    esi,0x4
c0009a8f:	e8 5c fe ff ff       	call   c00098f0 <fp_to_double>
c0009a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	29 dd                	sub    ebp,ebx
c0009aa0:	e8 41 fe ff ff       	call   c00098e6 <fp_to_int>
c0009aa5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa8:	52                   	push   edx
c0009aa9:	52                   	push   edx
c0009aaa:	51                   	push   ecx
c0009aab:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aaf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab3:	e8 d4 d4 01 00       	call   c0026f8c <__subsf3>
c0009ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abb:	e8 ab eb 01 00       	call   c002866b <__extendsfdf2>
c0009ac0:	83 c4 10             	add    esp,0x10
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adb:	e8 94 e1 01 00       	call   c0027c74 <__muldf3>
c0009ae0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aef:	e8 77 eb 01 00       	call   c002866b <__extendsfdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aff:	52                   	push   edx
c0009b00:	50                   	push   eax
c0009b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b09:	e8 e9 da 01 00       	call   c00275f7 <__adddf3>
c0009b0e:	59                   	pop    ecx
c0009b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b17:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1d:	e8 49 eb 01 00       	call   c002866b <__extendsfdf2>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b37:	e8 38 e1 01 00       	call   c0027c74 <__muldf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b47:	52                   	push   edx
c0009b48:	50                   	push   eax
c0009b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b51:	e8 a1 da 01 00       	call   c00275f7 <__adddf3>
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	85 ed                	test   ebp,ebp
c0009b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b63:	0f 8f 21 ff ff ff    	jg     c0009a8a <calc_output_single+0x166>
c0009b69:	52                   	push   edx
c0009b6a:	50                   	push   eax
c0009b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b73:	e8 7f da 01 00       	call   c00275f7 <__adddf3>
c0009b78:	83 c4 5c             	add    esp,0x5c
c0009b7b:	5b                   	pop    ebx
c0009b7c:	5e                   	pop    esi
c0009b7d:	5f                   	pop    edi
c0009b7e:	5d                   	pop    ebp
c0009b7f:	c3                   	ret    

c0009b80 <calc_output_stereo>:
c0009b80:	55                   	push   ebp
c0009b81:	89 cd                	mov    ebp,ecx
c0009b83:	57                   	push   edi
c0009b84:	56                   	push   esi
c0009b85:	53                   	push   ebx
c0009b86:	89 c3                	mov    ebx,eax
c0009b88:	83 ec 6c             	sub    esp,0x6c
c0009b8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba8:	e8 35 fd ff ff       	call   c00098e2 <int_to_fp>
c0009bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc1:	29 c8                	sub    eax,ecx
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bcc:	0f af d0             	imul   edx,eax
c0009bcf:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd2:	31 d2                	xor    edx,edx
c0009bd4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bdc:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bdf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bee:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf1:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf6:	29 c1                	sub    ecx,eax
c0009bf8:	31 c0                	xor    eax,eax
c0009bfa:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c05:	83 c7 08             	add    edi,0x8
c0009c08:	e8 e3 fc ff ff       	call   c00098f0 <fp_to_double>
c0009c0d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c19:	e8 c8 fc ff ff       	call   c00098e6 <fp_to_int>
c0009c1e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c21:	52                   	push   edx
c0009c22:	52                   	push   edx
c0009c23:	51                   	push   ecx
c0009c24:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2c:	e8 5b d3 01 00       	call   c0026f8c <__subsf3>
c0009c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c34:	e8 32 ea 01 00       	call   c002866b <__extendsfdf2>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c54:	e8 1b e0 01 00       	call   c0027c74 <__muldf3>
c0009c59:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c64:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c68:	e8 fe e9 01 00       	call   c002866b <__extendsfdf2>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c74:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c78:	52                   	push   edx
c0009c79:	50                   	push   eax
c0009c7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c82:	e8 70 d9 01 00       	call   c00275f7 <__adddf3>
c0009c87:	59                   	pop    ecx
c0009c88:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c90:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c96:	e8 d0 e9 01 00       	call   c002866b <__extendsfdf2>
c0009c9b:	83 c4 10             	add    esp,0x10
c0009c9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009caa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb6:	e8 b9 df 01 00       	call   c0027c74 <__muldf3>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc6:	52                   	push   edx
c0009cc7:	50                   	push   eax
c0009cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd0:	e8 22 d9 01 00       	call   c00275f7 <__adddf3>
c0009cd5:	59                   	pop    ecx
c0009cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cda:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cde:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce4:	e8 82 e9 01 00       	call   c002866b <__extendsfdf2>
c0009ce9:	83 c4 10             	add    esp,0x10
c0009cec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d04:	e8 6b df 01 00       	call   c0027c74 <__muldf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d10:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d14:	52                   	push   edx
c0009d15:	50                   	push   eax
c0009d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1e:	e8 d4 d8 01 00       	call   c00275f7 <__adddf3>
c0009d23:	83 c4 10             	add    esp,0x10
c0009d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d2e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d32:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d36:	0f 89 c5 fe ff ff    	jns    c0009c01 <calc_output_stereo+0x81>
c0009d3c:	29 e9                	sub    ecx,ebp
c0009d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d46:	29 c8                	sub    eax,ecx
c0009d48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d50:	99                   	cdq    
c0009d51:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d55:	31 d2                	xor    edx,edx
c0009d57:	0f af f8             	imul   edi,eax
c0009d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d5e:	40                   	inc    eax
c0009d5f:	01 cf                	add    edi,ecx
c0009d61:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d66:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d72:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7b:	89 f8                	mov    eax,edi
c0009d7d:	83 eb 08             	sub    ebx,0x8
c0009d80:	e8 6b fb ff ff       	call   c00098f0 <fp_to_double>
c0009d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8d:	89 f8                	mov    eax,edi
c0009d8f:	e8 52 fb ff ff       	call   c00098e6 <fp_to_int>
c0009d94:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d97:	52                   	push   edx
c0009d98:	52                   	push   edx
c0009d99:	55                   	push   ebp
c0009d9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d9e:	e8 e9 d1 01 00       	call   c0026f8c <__subsf3>
c0009da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da6:	e8 c0 e8 01 00       	call   c002866b <__extendsfdf2>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc6:	e8 a9 de 01 00       	call   c0027c74 <__muldf3>
c0009dcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd6:	e8 90 e8 01 00       	call   c002866b <__extendsfdf2>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de6:	52                   	push   edx
c0009de7:	50                   	push   eax
c0009de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df0:	e8 02 d8 01 00       	call   c00275f7 <__adddf3>
c0009df5:	59                   	pop    ecx
c0009df6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfa:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dfe:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e04:	e8 62 e8 01 00       	call   c002866b <__extendsfdf2>
c0009e09:	83 c4 10             	add    esp,0x10
c0009e0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e24:	e8 4b de 01 00       	call   c0027c74 <__muldf3>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e34:	52                   	push   edx
c0009e35:	50                   	push   eax
c0009e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3e:	e8 b4 d7 01 00       	call   c00275f7 <__adddf3>
c0009e43:	5d                   	pop    ebp
c0009e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e52:	e8 14 e8 01 00       	call   c002866b <__extendsfdf2>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e72:	e8 fd dd 01 00       	call   c0027c74 <__muldf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e82:	52                   	push   edx
c0009e83:	50                   	push   eax
c0009e84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8c:	e8 66 d7 01 00       	call   c00275f7 <__adddf3>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea0:	85 ff                	test   edi,edi
c0009ea2:	0f 8f d3 fe ff ff    	jg     c0009d7b <calc_output_stereo+0x1fb>
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	e8 3a d7 01 00       	call   c00275f7 <__adddf3>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed8:	e8 97 dd 01 00       	call   c0027c74 <__muldf3>
c0009edd:	59                   	pop    ecx
c0009ede:	5b                   	pop    ebx
c0009edf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eef:	e8 53 e6 01 00       	call   c0028547 <__truncdfsf2>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009efe:	89 03                	mov    DWORD PTR [ebx],eax
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	e8 e2 d6 01 00       	call   c00275f7 <__adddf3>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f30:	e8 3f dd 01 00       	call   c0027c74 <__muldf3>
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f47:	e8 fb e5 01 00       	call   c0028547 <__truncdfsf2>
c0009f4c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f53:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f56:	83 c4 7c             	add    esp,0x7c
c0009f59:	5b                   	pop    ebx
c0009f5a:	5e                   	pop    esi
c0009f5b:	5f                   	pop    edi
c0009f5c:	5d                   	pop    ebp
c0009f5d:	c3                   	ret    

c0009f5e <calc_output_quad>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	89 c6                	mov    esi,eax
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 7c             	sub    esp,0x7c
c0009f67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f6f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f76:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f88:	e8 55 f9 ff ff       	call   c00098e2 <int_to_fp>
c0009f8d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f90:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f93:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f9f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa3:	99                   	cdq    
c0009fa4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fac:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009faf:	31 d2                	xor    edx,edx
c0009fb1:	0f af d8             	imul   ebx,eax
c0009fb4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbc:	0f af c7             	imul   eax,edi
c0009fbf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc3:	29 c1                	sub    ecx,eax
c0009fc5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcd:	31 c0                	xor    eax,eax
c0009fcf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fea:	89 d8                	mov    eax,ebx
c0009fec:	83 c7 10             	add    edi,0x10
c0009fef:	e8 fc f8 ff ff       	call   c00098f0 <fp_to_double>
c0009ff4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffc:	89 d8                	mov    eax,ebx
c0009ffe:	e8 e3 f8 ff ff       	call   c00098e6 <fp_to_int>
c000a003:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a007:	52                   	push   edx
c000a008:	52                   	push   edx
c000a009:	51                   	push   ecx
c000a00a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 75 cf 01 00       	call   c0026f8c <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 4c e6 01 00       	call   c002866b <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 35 dc 01 00       	call   c0027c74 <__muldf3>
c000a03f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a047:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04e:	e8 18 e6 01 00       	call   c002866b <__extendsfdf2>
c000a053:	83 c4 10             	add    esp,0x10
c000a056:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05e:	52                   	push   edx
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a068:	e8 8a d5 01 00       	call   c00275f7 <__adddf3>
c000a06d:	59                   	pop    ecx
c000a06e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a072:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a076:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07c:	e8 ea e5 01 00       	call   c002866b <__extendsfdf2>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a088:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	e8 d3 db 01 00       	call   c0027c74 <__muldf3>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b6:	e8 3c d5 01 00       	call   c00275f7 <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ca:	e8 9c e5 01 00       	call   c002866b <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 85 db 01 00       	call   c0027c74 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a104:	e8 ee d4 01 00       	call   c00275f7 <__adddf3>
c000a109:	59                   	pop    ecx
c000a10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a10e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a112:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a118:	e8 4e e5 01 00       	call   c002866b <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 37 db 01 00       	call   c0027c74 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a152:	e8 a0 d4 01 00       	call   c00275f7 <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a160:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a166:	e8 00 e5 01 00       	call   c002866b <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 e9 da 01 00       	call   c0027c74 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a0:	e8 52 d4 01 00       	call   c00275f7 <__adddf3>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b4:	0f 89 30 fe ff ff    	jns    c0009fea <calc_output_quad+0x8c>
c000a1ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d2:	29 c8                	sub    eax,ecx
c000a1d4:	99                   	cdq    
c000a1d5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d9:	31 d2                	xor    edx,edx
c000a1db:	0f af d8             	imul   ebx,eax
c000a1de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e2:	40                   	inc    eax
c000a1e3:	01 cb                	add    ebx,ecx
c000a1e5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ea:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ee:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f6:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a201:	31 c0                	xor    eax,eax
c000a203:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a207:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a20f:	89 d8                	mov    eax,ebx
c000a211:	83 ee 10             	sub    esi,0x10
c000a214:	e8 d7 f6 ff ff       	call   c00098f0 <fp_to_double>
c000a219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a221:	89 d8                	mov    eax,ebx
c000a223:	e8 be f6 ff ff       	call   c00098e6 <fp_to_int>
c000a228:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22c:	52                   	push   edx
c000a22d:	52                   	push   edx
c000a22e:	57                   	push   edi
c000a22f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a233:	e8 54 cd 01 00       	call   c0026f8c <__subsf3>
c000a238:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23b:	e8 2b e4 01 00       	call   c002866b <__extendsfdf2>
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a247:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a253:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a257:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25b:	e8 14 da 01 00       	call   c0027c74 <__muldf3>
c000a260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26b:	e8 fb e3 01 00       	call   c002866b <__extendsfdf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a277:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27b:	52                   	push   edx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a285:	e8 6d d3 01 00       	call   c00275f7 <__adddf3>
c000a28a:	59                   	pop    ecx
c000a28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a28f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a293:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a299:	e8 cd e3 01 00       	call   c002866b <__extendsfdf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b9:	e8 b6 d9 01 00       	call   c0027c74 <__muldf3>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c9:	52                   	push   edx
c000a2ca:	50                   	push   eax
c000a2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d3:	e8 1f d3 01 00       	call   c00275f7 <__adddf3>
c000a2d8:	5f                   	pop    edi
c000a2d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e7:	e8 7f e3 01 00       	call   c002866b <__extendsfdf2>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a303:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a307:	e8 68 d9 01 00       	call   c0027c74 <__muldf3>
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a313:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a317:	52                   	push   edx
c000a318:	50                   	push   eax
c000a319:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a321:	e8 d1 d2 01 00       	call   c00275f7 <__adddf3>
c000a326:	59                   	pop    ecx
c000a327:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a32f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a335:	e8 31 e3 01 00       	call   c002866b <__extendsfdf2>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a341:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a351:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a355:	e8 1a d9 01 00       	call   c0027c74 <__muldf3>
c000a35a:	83 c4 10             	add    esp,0x10
c000a35d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a361:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a365:	52                   	push   edx
c000a366:	50                   	push   eax
c000a367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36f:	e8 83 d2 01 00       	call   c00275f7 <__adddf3>
c000a374:	5f                   	pop    edi
c000a375:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a379:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a383:	e8 e3 e2 01 00       	call   c002866b <__extendsfdf2>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a38f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a3:	e8 cc d8 01 00       	call   c0027c74 <__muldf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b3:	52                   	push   edx
c000a3b4:	50                   	push   eax
c000a3b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bd:	e8 35 d2 01 00       	call   c00275f7 <__adddf3>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d1:	85 db                	test   ebx,ebx
c000a3d3:	0f 8f 36 fe ff ff    	jg     c000a20f <calc_output_quad+0x2b1>
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	e8 09 d2 01 00       	call   c00275f7 <__adddf3>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	e8 66 d8 01 00       	call   c0027c74 <__muldf3>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	e8 22 e1 01 00       	call   c0028547 <__truncdfsf2>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a42f:	89 06                	mov    DWORD PTR [esi],eax
c000a431:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a435:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a439:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a441:	e8 b1 d1 01 00       	call   c00275f7 <__adddf3>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	e8 0e d8 01 00       	call   c0027c74 <__muldf3>
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 ca e0 01 00       	call   c0028547 <__truncdfsf2>
c000a47d:	83 c4 10             	add    esp,0x10
c000a480:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a487:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49a:	e8 58 d1 01 00       	call   c00275f7 <__adddf3>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	e8 b5 d7 01 00       	call   c0027c74 <__muldf3>
c000a4bf:	5d                   	pop    ebp
c000a4c0:	59                   	pop    ecx
c000a4c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 71 e0 01 00       	call   c0028547 <__truncdfsf2>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	e8 ff d0 01 00       	call   c00275f7 <__adddf3>
c000a4f8:	83 c4 10             	add    esp,0x10
c000a4fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	e8 5c d7 01 00       	call   c0027c74 <__muldf3>
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a51e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52a:	e8 18 e0 01 00       	call   c0028547 <__truncdfsf2>
c000a52f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a536:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a539:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a53f:	5b                   	pop    ebx
c000a540:	5e                   	pop    esi
c000a541:	5f                   	pop    edi
c000a542:	5d                   	pop    ebp
c000a543:	c3                   	ret    

c000a544 <calc_output_hex>:
c000a544:	55                   	push   ebp
c000a545:	89 cd                	mov    ebp,ecx
c000a547:	57                   	push   edi
c000a548:	56                   	push   esi
c000a549:	53                   	push   ebx
c000a54a:	89 c3                	mov    ebx,eax
c000a54c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a552:	89 14 24             	mov    DWORD PTR [esp],edx
c000a555:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a56e:	e8 6f f3 ff ff       	call   c00098e2 <int_to_fp>
c000a573:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57d:	29 c8                	sub    eax,ecx
c000a57f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a583:	99                   	cdq    
c000a584:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a58f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a597:	0f af f8             	imul   edi,eax
c000a59a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59d:	01 cf                	add    edi,ecx
c000a59f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5aa:	0f af c2             	imul   eax,edx
c000a5ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b1:	29 c1                	sub    ecx,eax
c000a5b3:	31 d2                	xor    edx,edx
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e2:	89 f8                	mov    eax,edi
c000a5e4:	e8 07 f3 ff ff       	call   c00098f0 <fp_to_double>
c000a5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f1:	89 f8                	mov    eax,edi
c000a5f3:	e8 ee f2 ff ff       	call   c00098e6 <fp_to_int>
c000a5f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5ff:	52                   	push   edx
c000a600:	52                   	push   edx
c000a601:	51                   	push   ecx
c000a602:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a606:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a611:	e8 76 c9 01 00       	call   c0026f8c <__subsf3>
c000a616:	89 04 24             	mov    DWORD PTR [esp],eax
c000a619:	e8 4d e0 01 00       	call   c002866b <__extendsfdf2>
c000a61e:	83 c4 10             	add    esp,0x10
c000a621:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a625:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	e8 36 d6 01 00       	call   c0027c74 <__muldf3>
c000a63e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a646:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64d:	e8 19 e0 01 00       	call   c002866b <__extendsfdf2>
c000a652:	83 c4 10             	add    esp,0x10
c000a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a659:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65d:	52                   	push   edx
c000a65e:	50                   	push   eax
c000a65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a667:	e8 8b cf 01 00       	call   c00275f7 <__adddf3>
c000a66c:	59                   	pop    ecx
c000a66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a671:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a675:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67b:	e8 eb df 01 00       	call   c002866b <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a687:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a697:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69b:	e8 d4 d5 01 00       	call   c0027c74 <__muldf3>
c000a6a0:	83 c4 10             	add    esp,0x10
c000a6a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ab:	52                   	push   edx
c000a6ac:	50                   	push   eax
c000a6ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b5:	e8 3d cf 01 00       	call   c00275f7 <__adddf3>
c000a6ba:	59                   	pop    ecx
c000a6bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c9:	e8 9d df 01 00       	call   c002866b <__extendsfdf2>
c000a6ce:	83 c4 10             	add    esp,0x10
c000a6d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e9:	e8 86 d5 01 00       	call   c0027c74 <__muldf3>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f9:	52                   	push   edx
c000a6fa:	50                   	push   eax
c000a6fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a703:	e8 ef ce 01 00       	call   c00275f7 <__adddf3>
c000a708:	59                   	pop    ecx
c000a709:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a711:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a717:	e8 4f df 01 00       	call   c002866b <__extendsfdf2>
c000a71c:	83 c4 10             	add    esp,0x10
c000a71f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a723:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a733:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a737:	e8 38 d5 01 00       	call   c0027c74 <__muldf3>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a743:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a747:	52                   	push   edx
c000a748:	50                   	push   eax
c000a749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a751:	e8 a1 ce 01 00       	call   c00275f7 <__adddf3>
c000a756:	59                   	pop    ecx
c000a757:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a75f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a765:	e8 01 df 01 00       	call   c002866b <__extendsfdf2>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a771:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a781:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a785:	e8 ea d4 01 00       	call   c0027c74 <__muldf3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a791:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79f:	e8 53 ce 01 00       	call   c00275f7 <__adddf3>
c000a7a4:	59                   	pop    ecx
c000a7a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b3:	e8 b3 de 01 00       	call   c002866b <__extendsfdf2>
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d3:	e8 9c d4 01 00       	call   c0027c74 <__muldf3>
c000a7d8:	83 c4 10             	add    esp,0x10
c000a7db:	83 c6 18             	add    esi,0x18
c000a7de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e6:	52                   	push   edx
c000a7e7:	50                   	push   eax
c000a7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f0:	e8 02 ce 01 00       	call   c00275f7 <__adddf3>
c000a7f5:	59                   	pop    ecx
c000a7f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a804:	e8 62 de 01 00       	call   c002866b <__extendsfdf2>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a810:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a820:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a824:	e8 4b d4 01 00       	call   c0027c74 <__muldf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a834:	52                   	push   edx
c000a835:	50                   	push   eax
c000a836:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83e:	e8 b4 cd 01 00       	call   c00275f7 <__adddf3>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a84e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a851:	0f 89 8b fd ff ff    	jns    c000a5e2 <calc_output_hex+0x9e>
c000a857:	31 f6                	xor    esi,esi
c000a859:	31 ff                	xor    edi,edi
c000a85b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a85f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a862:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a866:	29 e9                	sub    ecx,ebp
c000a868:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86c:	29 c8                	sub    eax,ecx
c000a86e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a871:	99                   	cdq    
c000a872:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a876:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a879:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87d:	0f af e8             	imul   ebp,eax
c000a880:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a884:	40                   	inc    eax
c000a885:	01 cd                	add    ebp,ecx
c000a887:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a890:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a894:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a898:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a89f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a7:	89 e8                	mov    eax,ebp
c000a8a9:	e8 42 f0 ff ff       	call   c00098f0 <fp_to_double>
c000a8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b6:	89 e8                	mov    eax,ebp
c000a8b8:	e8 29 f0 ff ff       	call   c00098e6 <fp_to_int>
c000a8bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c4:	52                   	push   edx
c000a8c5:	52                   	push   edx
c000a8c6:	51                   	push   ecx
c000a8c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d9:	e8 ae c6 01 00       	call   c0026f8c <__subsf3>
c000a8de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e1:	e8 85 dd 01 00       	call   c002866b <__extendsfdf2>
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a901:	e8 6e d3 01 00       	call   c0027c74 <__muldf3>
c000a906:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a911:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a918:	e8 4e dd 01 00       	call   c002866b <__extendsfdf2>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a924:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a928:	52                   	push   edx
c000a929:	50                   	push   eax
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 c0 cc 01 00       	call   c00275f7 <__adddf3>
c000a937:	59                   	pop    ecx
c000a938:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a940:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a946:	e8 20 dd 01 00       	call   c002866b <__extendsfdf2>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a952:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a962:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a966:	e8 09 d3 01 00       	call   c0027c74 <__muldf3>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a972:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a976:	52                   	push   edx
c000a977:	50                   	push   eax
c000a978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a980:	e8 72 cc 01 00       	call   c00275f7 <__adddf3>
c000a985:	59                   	pop    ecx
c000a986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a98e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a994:	e8 d2 dc 01 00       	call   c002866b <__extendsfdf2>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b4:	e8 bb d2 01 00       	call   c0027c74 <__muldf3>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ce:	e8 24 cc 01 00       	call   c00275f7 <__adddf3>
c000a9d3:	59                   	pop    ecx
c000a9d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e2:	e8 84 dc 01 00       	call   c002866b <__extendsfdf2>
c000a9e7:	83 c4 10             	add    esp,0x10
c000a9ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa02:	e8 6d d2 01 00       	call   c0027c74 <__muldf3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa12:	52                   	push   edx
c000aa13:	50                   	push   eax
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1c:	e8 d6 cb 01 00       	call   c00275f7 <__adddf3>
c000aa21:	59                   	pop    ecx
c000aa22:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa26:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa30:	e8 36 dc 01 00       	call   c002866b <__extendsfdf2>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa48:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa50:	e8 1f d2 01 00       	call   c0027c74 <__muldf3>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa60:	52                   	push   edx
c000aa61:	50                   	push   eax
c000aa62:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa66:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6a:	e8 88 cb 01 00       	call   c00275f7 <__adddf3>
c000aa6f:	59                   	pop    ecx
c000aa70:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa74:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa78:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa7e:	e8 e8 db 01 00       	call   c002866b <__extendsfdf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9e:	e8 d1 d1 01 00       	call   c0027c74 <__muldf3>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	83 eb 18             	sub    ebx,0x18
c000aaa9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab1:	52                   	push   edx
c000aab2:	50                   	push   eax
c000aab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabb:	e8 37 cb 01 00       	call   c00275f7 <__adddf3>
c000aac0:	59                   	pop    ecx
c000aac1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aacf:	e8 97 db 01 00       	call   c002866b <__extendsfdf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aadf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaeb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaef:	e8 80 d1 01 00       	call   c0027c74 <__muldf3>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaff:	52                   	push   edx
c000ab00:	50                   	push   eax
c000ab01:	57                   	push   edi
c000ab02:	56                   	push   esi
c000ab03:	e8 ef ca 01 00       	call   c00275f7 <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 c6                	mov    esi,eax
c000ab0d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab10:	89 d7                	mov    edi,edx
c000ab12:	85 ed                	test   ebp,ebp
c000ab14:	0f 8f 8d fd ff ff    	jg     c000a8a7 <calc_output_hex+0x363>
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	e8 c8 ca 01 00       	call   c00275f7 <__adddf3>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	e8 26 d1 01 00       	call   c0027c74 <__muldf3>
c000ab4e:	59                   	pop    ecx
c000ab4f:	5b                   	pop    ebx
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab60:	e8 e2 d9 01 00       	call   c0028547 <__truncdfsf2>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ab71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab81:	e8 71 ca 01 00       	call   c00275f7 <__adddf3>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	e8 cf d0 01 00       	call   c0027c74 <__muldf3>
c000aba5:	5d                   	pop    ebp
c000aba6:	59                   	pop    ecx
c000aba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb7:	e8 8b d9 01 00       	call   c0028547 <__truncdfsf2>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd9:	e8 19 ca 01 00       	call   c00275f7 <__adddf3>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	e8 77 d0 01 00       	call   c0027c74 <__muldf3>
c000abfd:	5b                   	pop    ebx
c000abfe:	5d                   	pop    ebp
c000abff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0f:	e8 33 d9 01 00       	call   c0028547 <__truncdfsf2>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac31:	e8 c1 c9 01 00       	call   c00275f7 <__adddf3>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	e8 1f d0 01 00       	call   c0027c74 <__muldf3>
c000ac55:	59                   	pop    ecx
c000ac56:	5b                   	pop    ebx
c000ac57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac67:	e8 db d8 01 00       	call   c0028547 <__truncdfsf2>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac76:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac89:	e8 69 c9 01 00       	call   c00275f7 <__adddf3>
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	e8 c7 cf 01 00       	call   c0027c74 <__muldf3>
c000acad:	5d                   	pop    ebp
c000acae:	59                   	pop    ecx
c000acaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbf:	e8 83 d8 01 00       	call   c0028547 <__truncdfsf2>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdb:	e8 17 c9 01 00       	call   c00275f7 <__adddf3>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	e8 75 cf 01 00       	call   c0027c74 <__muldf3>
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad11:	e8 31 d8 01 00       	call   c0028547 <__truncdfsf2>
c000ad16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad26:	5b                   	pop    ebx
c000ad27:	5e                   	pop    esi
c000ad28:	5f                   	pop    edi
c000ad29:	5d                   	pop    ebp
c000ad2a:	c3                   	ret    

c000ad2b <sinc_reset>:
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	51                   	push   ecx
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad35:	85 db                	test   ebx,ebx
c000ad37:	74 59                	je     c000ad92 <sinc_reset+0x67>
c000ad39:	31 d2                	xor    edx,edx
c000ad3b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad42:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad45:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad48:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad4f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad56:	31 c0                	xor    eax,eax
c000ad58:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad5e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad64:	52                   	push   edx
c000ad65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad68:	c1 e0 02             	shl    eax,0x2
c000ad6b:	50                   	push   eax
c000ad6c:	6a 00                	push   0x0
c000ad6e:	56                   	push   esi
c000ad6f:	e8 0c 5a ff ff       	call   c0000780 <memset>
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7a:	c1 e0 02             	shl    eax,0x2
c000ad7d:	50                   	push   eax
c000ad7e:	68 aa 00 00 00       	push   0xaa
c000ad83:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad86:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad89:	50                   	push   eax
c000ad8a:	e8 f1 59 ff ff       	call   c0000780 <memset>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	58                   	pop    eax
c000ad93:	5b                   	pop    ebx
c000ad94:	5e                   	pop    esi
c000ad95:	c3                   	ret    

c000ad96 <calc_output_multi>:
c000ad96:	55                   	push   ebp
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	89 c6                	mov    esi,eax
c000ad9b:	53                   	push   ebx
c000ad9c:	83 ec 4c             	sub    esp,0x4c
c000ad9f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adab:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adaf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbb:	8d 46 44             	lea    eax,[esi+0x44]
c000adbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adce:	e8 0f eb ff ff       	call   c00098e2 <int_to_fp>
c000add3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adda:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adde:	99                   	cdq    
c000addf:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade7:	0f af d0             	imul   edx,eax
c000adea:	0f af c3             	imul   eax,ebx
c000aded:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf1:	29 c1                	sub    ecx,eax
c000adf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfb:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae06:	57                   	push   edi
c000ae07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae11:	e8 6a 59 ff ff       	call   c0000780 <memset>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1d:	89 df                	mov    edi,ebx
c000ae1f:	e8 cc ea ff ff       	call   c00098f0 <fp_to_double>
c000ae24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae30:	e8 b1 ea ff ff       	call   c00098e6 <fp_to_int>
c000ae35:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae38:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3b:	51                   	push   ecx
c000ae3c:	51                   	push   ecx
c000ae3d:	55                   	push   ebp
c000ae3e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae42:	e8 45 c1 01 00       	call   c0026f8c <__subsf3>
c000ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4a:	e8 1c d8 01 00       	call   c002866b <__extendsfdf2>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6a:	e8 05 ce 01 00       	call   c0027c74 <__muldf3>
c000ae6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7a:	e8 ec d7 01 00       	call   c002866b <__extendsfdf2>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8a:	52                   	push   edx
c000ae8b:	50                   	push   eax
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 5e c7 01 00       	call   c00275f7 <__adddf3>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea4:	89 f8                	mov    eax,edi
c000aea6:	b9 08 00 00 00       	mov    ecx,0x8
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	4a                   	dec    edx
c000aeaf:	83 fa 06             	cmp    edx,0x6
c000aeb2:	77 07                	ja     c000aebb <calc_output_multi+0x125>
c000aeb4:	ff 24 95 a4 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd615c]
c000aebb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aebe:	4f                   	dec    edi
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed4:	e8 92 d7 01 00       	call   c002866b <__extendsfdf2>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef4:	e8 7b cd 01 00       	call   c0027c74 <__muldf3>
c000aef9:	83 c4 10             	add    esp,0x10
c000aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af04:	52                   	push   edx
c000af05:	50                   	push   eax
c000af06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0c:	e8 e6 c6 01 00       	call   c00275f7 <__adddf3>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af17:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1d:	4f                   	dec    edi
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af28:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af2f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af33:	e8 33 d7 01 00       	call   c002866b <__extendsfdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af53:	e8 1c cd 01 00       	call   c0027c74 <__muldf3>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af63:	52                   	push   edx
c000af64:	50                   	push   eax
c000af65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6b:	e8 87 c6 01 00       	call   c00275f7 <__adddf3>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af76:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7c:	4f                   	dec    edi
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af92:	e8 d4 d6 01 00       	call   c002866b <__extendsfdf2>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb2:	e8 bd cc 01 00       	call   c0027c74 <__muldf3>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc2:	52                   	push   edx
c000afc3:	50                   	push   eax
c000afc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afca:	e8 28 c6 01 00       	call   c00275f7 <__adddf3>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdb:	4f                   	dec    edi
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff1:	e8 75 d6 01 00       	call   c002866b <__extendsfdf2>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000affd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b009:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b011:	e8 5e cc 01 00       	call   c0027c74 <__muldf3>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b021:	52                   	push   edx
c000b022:	50                   	push   eax
c000b023:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b026:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b029:	e8 c9 c5 01 00       	call   c00275f7 <__adddf3>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b034:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b037:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03a:	4f                   	dec    edi
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b045:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b050:	e8 16 d6 01 00       	call   c002866b <__extendsfdf2>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b068:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b070:	e8 ff cb 01 00       	call   c0027c74 <__muldf3>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b085:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b088:	e8 6a c5 01 00       	call   c00275f7 <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b093:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b096:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b099:	4f                   	dec    edi
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0af:	e8 b7 d5 01 00       	call   c002866b <__extendsfdf2>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cf:	e8 a0 cb 01 00       	call   c0027c74 <__muldf3>
c000b0d4:	83 c4 10             	add    esp,0x10
c000b0d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0df:	52                   	push   edx
c000b0e0:	50                   	push   eax
c000b0e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e7:	e8 0b c5 01 00       	call   c00275f7 <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f8:	4f                   	dec    edi
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b103:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b10e:	e8 58 d5 01 00       	call   c002866b <__extendsfdf2>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12e:	e8 41 cb 01 00       	call   c0027c74 <__muldf3>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13e:	52                   	push   edx
c000b13f:	50                   	push   eax
c000b140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b143:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b146:	e8 ac c4 01 00       	call   c00275f7 <__adddf3>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b151:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b157:	4f                   	dec    edi
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b162:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b169:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16d:	e8 f9 d4 01 00       	call   c002866b <__extendsfdf2>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b179:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b185:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18d:	e8 e2 ca 01 00       	call   c0027c74 <__muldf3>
c000b192:	83 c4 10             	add    esp,0x10
c000b195:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b199:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19d:	52                   	push   edx
c000b19e:	50                   	push   eax
c000b19f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a5:	e8 4d c4 01 00       	call   c00275f7 <__adddf3>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b3:	85 ff                	test   edi,edi
c000b1b5:	0f 8f e9 fc ff ff    	jg     c000aea4 <calc_output_multi+0x10e>
c000b1bb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c7:	0f 89 4c fc ff ff    	jns    c000ae19 <calc_output_multi+0x83>
c000b1cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d5:	29 c8                	sub    eax,ecx
c000b1d7:	99                   	cdq    
c000b1d8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e0:	0f af d0             	imul   edx,eax
c000b1e3:	40                   	inc    eax
c000b1e4:	01 d1                	add    ecx,edx
c000b1e6:	0f af c3             	imul   eax,ebx
c000b1e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ed:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f4:	55                   	push   ebp
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	6a 00                	push   0x0
c000b1fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1ff:	e8 7c 55 ff ff       	call   c0000780 <memset>
c000b204:	83 c4 10             	add    esp,0x10
c000b207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20b:	e8 e0 e6 ff ff       	call   c00098f0 <fp_to_double>
c000b210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21c:	e8 c5 e6 ff ff       	call   c00098e6 <fp_to_int>
c000b221:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b224:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b227:	57                   	push   edi
c000b228:	57                   	push   edi
c000b229:	89 df                	mov    edi,ebx
c000b22b:	55                   	push   ebp
c000b22c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b230:	e8 57 bd 01 00       	call   c0026f8c <__subsf3>
c000b235:	89 04 24             	mov    DWORD PTR [esp],eax
c000b238:	e8 2e d4 01 00       	call   c002866b <__extendsfdf2>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	e8 17 ca 01 00       	call   c0027c74 <__muldf3>
c000b25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b268:	e8 fe d3 01 00       	call   c002866b <__extendsfdf2>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b274:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b278:	52                   	push   edx
c000b279:	50                   	push   eax
c000b27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 70 c3 01 00       	call   c00275f7 <__adddf3>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b28e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b292:	89 f8                	mov    eax,edi
c000b294:	b9 08 00 00 00       	mov    ecx,0x8
c000b299:	99                   	cdq    
c000b29a:	f7 f9                	idiv   ecx
c000b29c:	4a                   	dec    edx
c000b29d:	83 fa 06             	cmp    edx,0x6
c000b2a0:	77 07                	ja     c000b2a9 <calc_output_multi+0x513>
c000b2a2:	ff 24 95 c0 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6140]
c000b2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ad:	4f                   	dec    edi
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2bf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c3:	e8 a3 d3 01 00       	call   c002866b <__extendsfdf2>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e3:	e8 8c c9 01 00       	call   c0027c74 <__muldf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f3:	52                   	push   edx
c000b2f4:	50                   	push   eax
c000b2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fb:	e8 f7 c2 01 00       	call   c00275f7 <__adddf3>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b306:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30d:	4f                   	dec    edi
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b318:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b31f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b323:	e8 43 d3 01 00       	call   c002866b <__extendsfdf2>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b343:	e8 2c c9 01 00       	call   c0027c74 <__muldf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b353:	52                   	push   edx
c000b354:	50                   	push   eax
c000b355:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b358:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35b:	e8 97 c2 01 00       	call   c00275f7 <__adddf3>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b366:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36d:	4f                   	dec    edi
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b378:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b37f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b383:	e8 e3 d2 01 00       	call   c002866b <__extendsfdf2>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b38f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a3:	e8 cc c8 01 00       	call   c0027c74 <__muldf3>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b3:	52                   	push   edx
c000b3b4:	50                   	push   eax
c000b3b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bb:	e8 37 c2 01 00       	call   c00275f7 <__adddf3>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cd:	4f                   	dec    edi
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3df:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e3:	e8 83 d2 01 00       	call   c002866b <__extendsfdf2>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b403:	e8 6c c8 01 00       	call   c0027c74 <__muldf3>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b413:	52                   	push   edx
c000b414:	50                   	push   eax
c000b415:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b418:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41b:	e8 d7 c1 01 00       	call   c00275f7 <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b426:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42d:	4f                   	dec    edi
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b438:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b43f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b443:	e8 23 d2 01 00       	call   c002866b <__extendsfdf2>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b44f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b463:	e8 0c c8 01 00       	call   c0027c74 <__muldf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b473:	52                   	push   edx
c000b474:	50                   	push   eax
c000b475:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b478:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47b:	e8 77 c1 01 00       	call   c00275f7 <__adddf3>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b486:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	4f                   	dec    edi
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b498:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b49f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a3:	e8 c3 d1 01 00       	call   c002866b <__extendsfdf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c3:	e8 ac c7 01 00       	call   c0027c74 <__muldf3>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4db:	e8 17 c1 01 00       	call   c00275f7 <__adddf3>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4f                   	dec    edi
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4ff:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b503:	e8 63 d1 01 00       	call   c002866b <__extendsfdf2>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b523:	e8 4c c7 01 00       	call   c0027c74 <__muldf3>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b533:	52                   	push   edx
c000b534:	50                   	push   eax
c000b535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b538:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53b:	e8 b7 c0 01 00       	call   c00275f7 <__adddf3>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b546:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4f                   	dec    edi
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b558:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b55f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b563:	e8 03 d1 01 00       	call   c002866b <__extendsfdf2>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b56f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b583:	e8 ec c6 01 00       	call   c0027c74 <__muldf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b593:	52                   	push   edx
c000b594:	50                   	push   eax
c000b595:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b598:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59b:	e8 57 c0 01 00       	call   c00275f7 <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a9:	85 ff                	test   edi,edi
c000b5ab:	0f 8f e1 fc ff ff    	jg     c000b292 <calc_output_multi+0x4fc>
c000b5b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c2:	0f 8f 3f fc ff ff    	jg     c000b207 <calc_output_multi+0x471>
c000b5c8:	be 08 00 00 00       	mov    esi,0x8
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 fe                	idiv   esi
c000b5d2:	4a                   	dec    edx
c000b5d3:	83 fa 06             	cmp    edx,0x6
c000b5d6:	77 07                	ja     c000b5df <calc_output_multi+0x849>
c000b5d8:	ff 24 95 dc 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6124]
c000b5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e3:	4b                   	dec    ebx
c000b5e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f6:	e8 fc bf 01 00       	call   c00275f7 <__adddf3>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b616:	e8 59 c6 01 00       	call   c0027c74 <__muldf3>
c000b61b:	5d                   	pop    ebp
c000b61c:	59                   	pop    ecx
c000b61d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b621:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	e8 15 cf 01 00       	call   c0028547 <__truncdfsf2>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b639:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b640:	4b                   	dec    ebx
c000b641:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b645:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b650:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b653:	e8 9f bf 01 00       	call   c00275f7 <__adddf3>
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b673:	e8 fc c5 01 00       	call   c0027c74 <__muldf3>
c000b678:	59                   	pop    ecx
c000b679:	5f                   	pop    edi
c000b67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	e8 b8 ce 01 00       	call   c0028547 <__truncdfsf2>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b696:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69d:	4b                   	dec    ebx
c000b69e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b0:	e8 42 bf 01 00       	call   c00275f7 <__adddf3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d0:	e8 9f c5 01 00       	call   c0027c74 <__muldf3>
c000b6d5:	5f                   	pop    edi
c000b6d6:	5d                   	pop    ebp
c000b6d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	e8 5b ce 01 00       	call   c0028547 <__truncdfsf2>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	4b                   	dec    ebx
c000b6fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70d:	e8 e5 be 01 00       	call   c00275f7 <__adddf3>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72d:	e8 42 c5 01 00       	call   c0027c74 <__muldf3>
c000b732:	5d                   	pop    ebp
c000b733:	59                   	pop    ecx
c000b734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	e8 fe cd 01 00       	call   c0028547 <__truncdfsf2>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b750:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b757:	4b                   	dec    ebx
c000b758:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b763:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b767:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76a:	e8 88 be 01 00       	call   c00275f7 <__adddf3>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b776:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78a:	e8 e5 c4 01 00       	call   c0027c74 <__muldf3>
c000b78f:	59                   	pop    ecx
c000b790:	5f                   	pop    edi
c000b791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	e8 a1 cd 01 00       	call   c0028547 <__truncdfsf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b4:	4b                   	dec    ebx
c000b7b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c7:	e8 2b be 01 00       	call   c00275f7 <__adddf3>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e7:	e8 88 c4 01 00       	call   c0027c74 <__muldf3>
c000b7ec:	5f                   	pop    edi
c000b7ed:	5d                   	pop    ebp
c000b7ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	e8 44 cd 01 00       	call   c0028547 <__truncdfsf2>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	4b                   	dec    ebx
c000b812:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b816:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b821:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b824:	e8 ce bd 01 00       	call   c00275f7 <__adddf3>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 2b c4 01 00       	call   c0027c74 <__muldf3>
c000b849:	5d                   	pop    ebp
c000b84a:	59                   	pop    ecx
c000b84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b84f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	e8 e7 cc 01 00       	call   c0028547 <__truncdfsf2>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b867:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	4b                   	dec    ebx
c000b86f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b873:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b881:	e8 71 bd 01 00       	call   c00275f7 <__adddf3>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	e8 ce c3 01 00       	call   c0027c74 <__muldf3>
c000b8a6:	59                   	pop    ecx
c000b8a7:	5f                   	pop    edi
c000b8a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b8:	e8 8a cc 01 00       	call   c0028547 <__truncdfsf2>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	85 db                	test   ebx,ebx
c000b8c2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c9:	0f 8f fe fc ff ff    	jg     c000b5cd <calc_output_multi+0x837>
c000b8cf:	83 c4 4c             	add    esp,0x4c
c000b8d2:	5b                   	pop    ebx
c000b8d3:	5e                   	pop    esi
c000b8d4:	5f                   	pop    edi
c000b8d5:	5d                   	pop    ebp
c000b8d6:	c3                   	ret    

c000b8d7 <double_to_fp>:
c000b8d7:	83 ec 0c             	sub    esp,0xc
c000b8da:	68 00 00 b0 40       	push   0x40b00000
c000b8df:	6a 00                	push   0x0
c000b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	e8 86 c3 01 00       	call   c0027c74 <__muldf3>
c000b8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	e9 02 ce 01 00       	jmp    c0028700 <lrint>

c000b8fe <prepare_data>:
c000b8fe:	55                   	push   ebp
c000b8ff:	57                   	push   edi
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	83 ec 1c             	sub    esp,0x1c
c000b905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b909:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90d:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b911:	0f 89 57 01 00 00    	jns    c000ba6e <prepare_data+0x170>
c000b917:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	75 0d                	jne    c000b92e <prepare_data+0x30>
c000b921:	8d 14 36             	lea    edx,[esi+esi*1]
c000b924:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b927:	29 d0                	sub    eax,edx
c000b929:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92c:	eb 44                	jmp    c000b972 <prepare_data+0x74>
c000b92e:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b931:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b934:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b937:	39 c1                	cmp    ecx,eax
c000b939:	7d 04                	jge    c000b93f <prepare_data+0x41>
c000b93b:	29 d0                	sub    eax,edx
c000b93d:	eb 2d                	jmp    c000b96c <prepare_data+0x6e>
c000b93f:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b945:	29 d7                	sub    edi,edx
c000b947:	01 f7                	add    edi,esi
c000b949:	51                   	push   ecx
c000b94a:	29 f2                	sub    edx,esi
c000b94c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b953:	8d 14 90             	lea    edx,[eax+edx*4]
c000b956:	51                   	push   ecx
c000b957:	52                   	push   edx
c000b958:	50                   	push   eax
c000b959:	e8 26 4d ff ff       	call   c0000684 <memmove>
c000b95e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b961:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b964:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b967:	29 f0                	sub    eax,esi
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	29 f0                	sub    eax,esi
c000b96e:	79 02                	jns    c000b972 <prepare_data+0x74>
c000b970:	31 c0                	xor    eax,eax
c000b972:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b975:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b978:	29 ef                	sub    edi,ebp
c000b97a:	39 c7                	cmp    edi,eax
c000b97c:	7e 02                	jle    c000b980 <prepare_data+0x82>
c000b97e:	89 c7                	mov    edi,eax
c000b980:	89 f8                	mov    eax,edi
c000b982:	99                   	cdq    
c000b983:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b986:	b8 15 00 00 00       	mov    eax,0x15
c000b98b:	29 d7                	sub    edi,edx
c000b98d:	0f 88 dd 00 00 00    	js     c000ba70 <prepare_data+0x172>
c000b993:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b996:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b999:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99c:	0f 8f ce 00 00 00    	jg     c000ba70 <prepare_data+0x172>
c000b9a2:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a8:	50                   	push   eax
c000b9a9:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b0:	50                   	push   eax
c000b9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b7:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9ba:	50                   	push   eax
c000b9bb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c2:	50                   	push   eax
c000b9c3:	e8 84 4d ff ff       	call   c000074c <memcpy>
c000b9c8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cb:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ce:	01 fd                	add    ebp,edi
c000b9d0:	01 f9                	add    ecx,edi
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d8:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9db:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f 85 86 00 00 00    	jne    c000ba6e <prepare_data+0x170>
c000b9e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9eb:	89 e8                	mov    eax,ebp
c000b9ed:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f0:	29 c8                	sub    eax,ecx
c000b9f2:	39 f8                	cmp    eax,edi
c000b9f4:	7d 78                	jge    c000ba6e <prepare_data+0x170>
c000b9f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fa:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9fe:	74 6e                	je     c000ba6e <prepare_data+0x170>
c000ba00:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba07:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0a:	29 ef                	sub    edi,ebp
c000ba0c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba10:	7c 29                	jl     c000ba3b <prepare_data+0x13d>
c000ba12:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba15:	29 f1                	sub    ecx,esi
c000ba17:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba1e:	55                   	push   ebp
c000ba1f:	50                   	push   eax
c000ba20:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba23:	50                   	push   eax
c000ba24:	52                   	push   edx
c000ba25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba29:	e8 56 4c ff ff       	call   c0000684 <memmove>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba34:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba41:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba44:	83 c6 05             	add    esi,0x5
c000ba47:	78 07                	js     c000ba50 <prepare_data+0x152>
c000ba49:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4c:	39 cf                	cmp    edi,ecx
c000ba4e:	7e 04                	jle    c000ba54 <prepare_data+0x156>
c000ba50:	89 ce                	mov    esi,ecx
c000ba52:	29 c6                	sub    esi,eax
c000ba54:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba57:	51                   	push   ecx
c000ba58:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba5f:	51                   	push   ecx
c000ba60:	6a 00                	push   0x0
c000ba62:	50                   	push   eax
c000ba63:	e8 18 4d ff ff       	call   c0000780 <memset>
c000ba68:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	31 c0                	xor    eax,eax
c000ba70:	83 c4 1c             	add    esp,0x1c
c000ba73:	5b                   	pop    ebx
c000ba74:	5e                   	pop    esi
c000ba75:	5f                   	pop    edi
c000ba76:	5d                   	pop    ebp
c000ba77:	c3                   	ret    

c000ba78 <sinc_multichan_vari_process>:
c000ba78:	55                   	push   ebp
c000ba79:	ba 05 00 00 00       	mov    edx,0x5
c000ba7e:	57                   	push   edi
c000ba7f:	56                   	push   esi
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 4c             	sub    esp,0x4c
c000ba84:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba8f:	85 db                	test   ebx,ebx
c000ba91:	0f 84 9b 06 00 00    	je     c000c132 <sinc_multichan_vari_process+0x6ba>
c000ba97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9d:	0f af c5             	imul   eax,ebp
c000baa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab4:	0f af c5             	imul   eax,ebp
c000bab7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babd:	8b 06                	mov    eax,DWORD PTR [esi]
c000babf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	68 00 00 70 3f       	push   0x3f700000
c000bacc:	6a 00                	push   0x0
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad6:	e8 68 ca 01 00       	call   c0028543 <__ltdf2>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	ba 16 00 00 00       	mov    edx,0x16
c000bae3:	85 c0                	test   eax,eax
c000bae5:	0f 88 47 06 00 00    	js     c000c132 <sinc_multichan_vari_process+0x6ba>
c000baeb:	68 00 00 70 40       	push   0x40700000
c000baf0:	6a 00                	push   0x0
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 26 ca 01 00       	call   c0028525 <__gtdf2>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	ba 16 00 00 00       	mov    edx,0x16
c000bb07:	85 c0                	test   eax,eax
c000bb09:	0f 8f 23 06 00 00    	jg     c000c132 <sinc_multichan_vari_process+0x6ba>
c000bb0f:	83 ec 0c             	sub    esp,0xc
c000bb12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb15:	e8 bd c7 01 00       	call   c00282d7 <__floatsidf>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb25:	68 00 00 00 40       	push   0x40000000
c000bb2a:	6a 00                	push   0x0
c000bb2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	e8 be ba 01 00       	call   c00275f7 <__adddf3>
c000bb39:	59                   	pop    ecx
c000bb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb3e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb45:	e8 8d c7 01 00       	call   c00282d7 <__floatsidf>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	52                   	push   edx
c000bb56:	50                   	push   eax
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	e8 f4 c3 01 00       	call   c0027f58 <__divdf3>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb6f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb72:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	e8 93 c9 01 00       	call   c0028525 <__gtdf2>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	7e 2d                	jle    c000bbc6 <sinc_multichan_vari_process+0x14e>
c000bb99:	68 00 00 f0 3f       	push   0x3ff00000
c000bb9e:	6a 00                	push   0x0
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba8:	e8 96 c9 01 00       	call   c0028543 <__ltdf2>
c000bbad:	83 c4 10             	add    esp,0x10
c000bbb0:	85 c0                	test   eax,eax
c000bbb2:	79 4d                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc4:	eb 1b                	jmp    c000bbe1 <sinc_multichan_vari_process+0x169>
c000bbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcb:	6a 00                	push   0x0
c000bbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd5:	e8 69 c9 01 00       	call   c0028543 <__ltdf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	79 20                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 62 c3 01 00       	call   c0027f58 <__divdf3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 f0 ca 01 00       	call   c0028700 <lrint>
c000bc10:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc13:	40                   	inc    eax
c000bc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc18:	0f af c5             	imul   eax,ebp
c000bc1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc26:	58                   	pop    eax
c000bc27:	5a                   	pop    edx
c000bc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc30:	e8 cb ca 01 00       	call   c0028700 <lrint>
c000bc35:	83 ec 0c             	sub    esp,0xc
c000bc38:	50                   	push   eax
c000bc39:	e8 99 c6 01 00       	call   c00282d7 <__floatsidf>
c000bc3e:	83 c4 10             	add    esp,0x10
c000bc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc49:	52                   	push   edx
c000bc4a:	50                   	push   eax
c000bc4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc53:	e8 f0 bf 01 00       	call   c0027c48 <__subdf3>
c000bc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc60:	83 c4 20             	add    esp,0x20
c000bc63:	6a 00                	push   0x0
c000bc65:	6a 00                	push   0x0
c000bc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6f:	e8 cf c8 01 00       	call   c0028543 <__ltdf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	79 1f                	jns    c000bc9a <sinc_multichan_vari_process+0x222>
c000bc7b:	68 00 00 f0 3f       	push   0x3ff00000
c000bc80:	6a 00                	push   0x0
c000bc82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8a:	e8 68 b9 01 00       	call   c00275f7 <__adddf3>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9d:	83 ec 10             	sub    esp,0x10
c000bca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb7:	e8 8c bf 01 00       	call   c0027c48 <__subdf3>
c000bcbc:	83 c4 18             	add    esp,0x18
c000bcbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	e8 32 ca 01 00       	call   c0028700 <lrint>
c000bcce:	0f af e8             	imul   ebp,eax
c000bcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd5:	01 e8                	add    eax,ebp
c000bcd7:	99                   	cdq    
c000bcd8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce6:	68 00 00 f0 3f       	push   0x3ff00000
c000bceb:	6a 00                	push   0x0
c000bced:	e8 66 c2 01 00       	call   c0027f58 <__divdf3>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcfd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd02:	68 23 42 92 0c       	push   0xc924223
c000bd07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0f:	e8 e3 b8 01 00       	call   c00275f7 <__adddf3>
c000bd14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1c:	83 c4 20             	add    esp,0x20
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd35:	7d 50                	jge    c000bd87 <sinc_multichan_vari_process+0x30f>
c000bd37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3d:	01 c8                	add    eax,ecx
c000bd3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd42:	99                   	cdq    
c000bd43:	f7 f9                	idiv   ecx
c000bd45:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd49:	7d 0c                	jge    c000bd57 <sinc_multichan_vari_process+0x2df>
c000bd4b:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd4e:	85 ed                	test   ebp,ebp
c000bd50:	79 6b                	jns    c000bdbd <sinc_multichan_vari_process+0x345>
c000bd52:	e9 e6 00 00 00       	jmp    c000be3d <sinc_multichan_vari_process+0x3c5>
c000bd57:	50                   	push   eax
c000bd58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5c:	57                   	push   edi
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 9b fb ff ff       	call   c000b8fe <prepare_data>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	89 c2                	mov    edx,eax
c000bd68:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6b:	85 c0                	test   eax,eax
c000bd6d:	0f 85 bf 03 00 00    	jne    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bd73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd76:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd79:	01 c8                	add    eax,ecx
c000bd7b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 f9                	idiv   ecx
c000bd81:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd85:	7c c4                	jl     c000bd4b <sinc_multichan_vari_process+0x2d3>
c000bd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd92:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9d:	89 06                	mov    DWORD PTR [esi],eax
c000bd9f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda5:	99                   	cdq    
c000bda6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdaf:	99                   	cdq    
c000bdb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb8:	e9 75 03 00 00       	jmp    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc3:	e8 0f c5 01 00       	call   c00282d7 <__floatsidf>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde3:	e8 0f b8 01 00       	call   c00275f7 <__adddf3>
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	e8 ef b7 01 00       	call   c00275f7 <__adddf3>
c000be08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be13:	e8 bf c4 01 00       	call   c00282d7 <__floatsidf>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2d:	e8 0f c7 01 00       	call   c0028541 <__gedf2>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	85 c0                	test   eax,eax
c000be37:	0f 89 4a ff ff ff    	jns    c000bd87 <sinc_multichan_vari_process+0x30f>
c000be3d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be41:	0f 8e ed 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be47:	83 ec 10             	sub    esp,0x10
c000be4a:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4d:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be53:	ff 36                	push   DWORD PTR [esi]
c000be55:	e8 ee bd 01 00       	call   c0027c48 <__subdf3>
c000be5a:	83 c4 18             	add    esp,0x18
c000be5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be65:	52                   	push   edx
c000be66:	50                   	push   eax
c000be67:	e8 74 c8 01 00       	call   c00286e0 <fabs>
c000be6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be89:	e8 97 c6 01 00       	call   c0028525 <__gtdf2>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	85 c0                	test   eax,eax
c000be93:	0f 8e 9b 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be99:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea6:	52                   	push   edx
c000bea7:	50                   	push   eax
c000bea8:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beab:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beae:	e8 95 bd 01 00       	call   c0027c48 <__subdf3>
c000beb3:	59                   	pop    ecx
c000beb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bebf:	e8 13 c4 01 00       	call   c00282d7 <__floatsidf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000becf:	52                   	push   edx
c000bed0:	50                   	push   eax
c000bed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	e8 96 bd 01 00       	call   c0027c74 <__muldf3>
c000bede:	5d                   	pop    ebp
c000bedf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beea:	e8 e8 c3 01 00       	call   c00282d7 <__floatsidf>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf04:	e8 4f c0 01 00       	call   c0027f58 <__divdf3>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf24:	e8 ce b6 01 00       	call   c00275f7 <__adddf3>
c000bf29:	83 c4 10             	add    esp,0x10
c000bf2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3a:	e8 98 c3 01 00       	call   c00282d7 <__floatsidf>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	e8 e4 c5 01 00       	call   c0028543 <__ltdf2>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	85 c0                	test   eax,eax
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf70:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf74:	78 10                	js     c000bf86 <sinc_multichan_vari_process+0x50e>
c000bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	e8 d9 bc 01 00       	call   c0027c74 <__muldf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	5d                   	pop    ebp
c000bf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfad:	e8 25 f9 ff ff       	call   c000b8d7 <double_to_fp>
c000bfb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc4:	e8 ab bc 01 00       	call   c0027c74 <__muldf3>
c000bfc9:	83 c4 18             	add    esp,0x18
c000bfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd4:	52                   	push   edx
c000bfd5:	50                   	push   eax
c000bfd6:	e8 fc f8 ff ff       	call   c000b8d7 <double_to_fp>
c000bfdb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe5:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	50                   	push   eax
c000bfeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfee:	e8 e4 c2 01 00       	call   c00282d7 <__floatsidf>
c000bff3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	e8 48 bf 01 00       	call   c0027f58 <__divdf3>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c017:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01b:	52                   	push   edx
c000c01c:	89 ea                	mov    edx,ebp
c000c01e:	50                   	push   eax
c000c01f:	89 d8                	mov    eax,ebx
c000c021:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c024:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c028:	e8 69 ed ff ff       	call   c000ad96 <calc_output_multi>
c000c02d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c030:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c043:	e8 10 bf 01 00       	call   c0027f58 <__divdf3>
c000c048:	83 c4 10             	add    esp,0x10
c000c04b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c04f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c063:	e8 8f b5 01 00       	call   c00275f7 <__adddf3>
c000c068:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c070:	83 c4 28             	add    esp,0x28
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07b:	e8 80 c6 01 00       	call   c0028700 <lrint>
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	50                   	push   eax
c000c084:	e8 4e c2 01 00       	call   c00282d7 <__floatsidf>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c090:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c094:	52                   	push   edx
c000c095:	50                   	push   eax
c000c096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09e:	e8 a5 bb 01 00       	call   c0027c48 <__subdf3>
c000c0a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ab:	83 c4 20             	add    esp,0x20
c000c0ae:	6a 00                	push   0x0
c000c0b0:	6a 00                	push   0x0
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	e8 84 c4 01 00       	call   c0028543 <__ltdf2>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	79 20                	jns    c000c0e6 <sinc_multichan_vari_process+0x66e>
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 1c b5 01 00       	call   c00275f7 <__adddf3>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c103:	e8 40 bb 01 00       	call   c0027c48 <__subdf3>
c000c108:	83 c4 18             	add    esp,0x18
c000c10b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c10f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	e8 e6 c5 01 00       	call   c0028700 <lrint>
c000c11a:	0f af e8             	imul   ebp,eax
c000c11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	01 e8                	add    eax,ebp
c000c126:	99                   	cdq    
c000c127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12d:	e9 fd fb ff ff       	jmp    c000bd2f <sinc_multichan_vari_process+0x2b7>
c000c132:	83 c4 4c             	add    esp,0x4c
c000c135:	89 d0                	mov    eax,edx
c000c137:	5b                   	pop    ebx
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	5d                   	pop    ebp
c000c13b:	c3                   	ret    

c000c13c <sinc_hex_vari_process>:
c000c13c:	55                   	push   ebp
c000c13d:	ba 05 00 00 00       	mov    edx,0x5
c000c142:	57                   	push   edi
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 4c             	sub    esp,0x4c
c000c148:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c150:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c153:	85 db                	test   ebx,ebx
c000c155:	0f 84 9c 06 00 00    	je     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c15b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c15e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c161:	0f af c7             	imul   eax,edi
c000c164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c167:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c178:	0f af c7             	imul   eax,edi
c000c17b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c17e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c181:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c184:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18c:	68 00 00 70 3f       	push   0x3f700000
c000c191:	6a 00                	push   0x0
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 a3 c3 01 00       	call   c0028543 <__ltdf2>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	ba 16 00 00 00       	mov    edx,0x16
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	0f 88 47 06 00 00    	js     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1b0:	68 00 00 70 40       	push   0x40700000
c000c1b5:	6a 00                	push   0x0
c000c1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bf:	e8 61 c3 01 00       	call   c0028525 <__gtdf2>
c000c1c4:	83 c4 10             	add    esp,0x10
c000c1c7:	ba 16 00 00 00       	mov    edx,0x16
c000c1cc:	85 c0                	test   eax,eax
c000c1ce:	0f 8f 23 06 00 00    	jg     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1da:	e8 f8 c0 01 00       	call   c00282d7 <__floatsidf>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ea:	68 00 00 00 40       	push   0x40000000
c000c1ef:	6a 00                	push   0x0
c000c1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	e8 f9 b3 01 00       	call   c00275f7 <__adddf3>
c000c1fe:	59                   	pop    ecx
c000c1ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c203:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c207:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20a:	e8 c8 c0 01 00       	call   c00282d7 <__floatsidf>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	52                   	push   edx
c000c21b:	50                   	push   eax
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	e8 2f bd 01 00       	call   c0027f58 <__divdf3>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c234:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c237:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	e8 ce c2 01 00       	call   c0028525 <__gtdf2>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	85 c0                	test   eax,eax
c000c25c:	7e 2d                	jle    c000c28b <sinc_hex_vari_process+0x14f>
c000c25e:	68 00 00 f0 3f       	push   0x3ff00000
c000c263:	6a 00                	push   0x0
c000c265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26d:	e8 d1 c2 01 00       	call   c0028543 <__ltdf2>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	79 4d                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c289:	eb 1b                	jmp    c000c2a6 <sinc_hex_vari_process+0x16a>
c000c28b:	68 00 00 f0 3f       	push   0x3ff00000
c000c290:	6a 00                	push   0x0
c000c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29a:	e8 a4 c2 01 00       	call   c0028543 <__ltdf2>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	85 c0                	test   eax,eax
c000c2a4:	79 20                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c2a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 9d bc 01 00       	call   c0027f58 <__divdf3>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c6:	50                   	push   eax
c000c2c7:	50                   	push   eax
c000c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d0:	e8 2b c4 01 00       	call   c0028700 <lrint>
c000c2d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d8:	40                   	inc    eax
c000c2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dd:	0f af c7             	imul   eax,edi
c000c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2eb:	58                   	pop    eax
c000c2ec:	5a                   	pop    edx
c000c2ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f5:	e8 06 c4 01 00       	call   c0028700 <lrint>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 d4 bf 01 00       	call   c00282d7 <__floatsidf>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c30e:	52                   	push   edx
c000c30f:	50                   	push   eax
c000c310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c318:	e8 2b b9 01 00       	call   c0027c48 <__subdf3>
c000c31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c325:	83 c4 20             	add    esp,0x20
c000c328:	6a 00                	push   0x0
c000c32a:	6a 00                	push   0x0
c000c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c334:	e8 0a c2 01 00       	call   c0028543 <__ltdf2>
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	85 c0                	test   eax,eax
c000c33e:	79 1f                	jns    c000c35f <sinc_hex_vari_process+0x223>
c000c340:	68 00 00 f0 3f       	push   0x3ff00000
c000c345:	6a 00                	push   0x0
c000c347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34f:	e8 a3 b2 01 00       	call   c00275f7 <__adddf3>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c362:	83 ec 10             	sub    esp,0x10
c000c365:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c369:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37c:	e8 c7 b8 01 00       	call   c0027c48 <__subdf3>
c000c381:	83 c4 18             	add    esp,0x18
c000c384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38c:	52                   	push   edx
c000c38d:	50                   	push   eax
c000c38e:	e8 6d c3 01 00       	call   c0028700 <lrint>
c000c393:	0f af f8             	imul   edi,eax
c000c396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39a:	01 f8                	add    eax,edi
c000c39c:	99                   	cdq    
c000c39d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b0:	6a 00                	push   0x0
c000c3b2:	e8 a1 bb 01 00       	call   c0027f58 <__divdf3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c7:	68 23 42 92 0c       	push   0xc924223
c000c3cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d4:	e8 1e b2 01 00       	call   c00275f7 <__adddf3>
c000c3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3dd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e1:	83 c4 20             	add    esp,0x20
c000c3e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ec:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fa:	7d 50                	jge    c000c44c <sinc_hex_vari_process+0x310>
c000c3fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c402:	01 c8                	add    eax,ecx
c000c404:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c407:	99                   	cdq    
c000c408:	f7 f9                	idiv   ecx
c000c40a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c40e:	7d 0c                	jge    c000c41c <sinc_hex_vari_process+0x2e0>
c000c410:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c413:	85 ff                	test   edi,edi
c000c415:	79 6c                	jns    c000c483 <sinc_hex_vari_process+0x347>
c000c417:	e9 e7 00 00 00       	jmp    c000c503 <sinc_hex_vari_process+0x3c7>
c000c41c:	50                   	push   eax
c000c41d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c421:	56                   	push   esi
c000c422:	53                   	push   ebx
c000c423:	e8 d6 f4 ff ff       	call   c000b8fe <prepare_data>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	89 c2                	mov    edx,eax
c000c42d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c430:	85 c0                	test   eax,eax
c000c432:	0f 85 bf 03 00 00    	jne    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c438:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c43e:	01 c8                	add    eax,ecx
c000c440:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c443:	99                   	cdq    
c000c444:	f7 f9                	idiv   ecx
c000c446:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44a:	7c c4                	jl     c000c410 <sinc_hex_vari_process+0x2d4>
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c454:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c457:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c462:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c465:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46b:	99                   	cdq    
c000c46c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c46f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c472:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c475:	99                   	cdq    
c000c476:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c479:	31 d2                	xor    edx,edx
c000c47b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c47e:	e9 74 03 00 00       	jmp    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c489:	e8 49 be 01 00       	call   c00282d7 <__floatsidf>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c495:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c499:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a9:	e8 49 b1 01 00       	call   c00275f7 <__adddf3>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	e8 29 b1 01 00       	call   c00275f7 <__adddf3>
c000c4ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d9:	e8 f9 bd 01 00       	call   c00282d7 <__floatsidf>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f3:	e8 49 c0 01 00       	call   c0028541 <__gedf2>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	0f 89 49 ff ff ff    	jns    c000c44c <sinc_hex_vari_process+0x310>
c000c503:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c507:	0f 8e ef 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c50d:	83 ec 10             	sub    esp,0x10
c000c510:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c513:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c516:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c519:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51c:	e8 27 b7 01 00       	call   c0027c48 <__subdf3>
c000c521:	83 c4 18             	add    esp,0x18
c000c524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c528:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	e8 ad c1 01 00       	call   c00286e0 <fabs>
c000c533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c537:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c543:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c550:	e8 d0 bf 01 00       	call   c0028525 <__gtdf2>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	85 c0                	test   eax,eax
c000c55a:	0f 8e 9c 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c573:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c576:	e8 cd b6 01 00       	call   c0027c48 <__subdf3>
c000c57b:	59                   	pop    ecx
c000c57c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c580:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c584:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c587:	e8 4b bd 01 00       	call   c00282d7 <__floatsidf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	e8 ce b6 01 00       	call   c0027c74 <__muldf3>
c000c5a6:	5f                   	pop    edi
c000c5a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5af:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b2:	e8 20 bd 01 00       	call   c00282d7 <__floatsidf>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c2:	52                   	push   edx
c000c5c3:	50                   	push   eax
c000c5c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cc:	e8 87 b9 01 00       	call   c0027f58 <__divdf3>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ec:	e8 06 b0 01 00       	call   c00275f7 <__adddf3>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c602:	e8 d0 bc 01 00       	call   c00282d7 <__floatsidf>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c60e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 1c bf 01 00       	call   c0028543 <__ltdf2>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	85 c0                	test   eax,eax
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c634:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c638:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63c:	78 10                	js     c000c64e <sinc_hex_vari_process+0x512>
c000c63e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	e8 11 b6 01 00       	call   c0027c74 <__muldf3>
c000c663:	59                   	pop    ecx
c000c664:	5f                   	pop    edi
c000c665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c675:	e8 5d f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c67a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67e:	89 c7                	mov    edi,eax
c000c680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68c:	e8 e3 b5 01 00       	call   c0027c74 <__muldf3>
c000c691:	83 c4 18             	add    esp,0x18
c000c694:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c698:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69c:	52                   	push   edx
c000c69d:	50                   	push   eax
c000c69e:	e8 34 f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c6a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6aa:	83 c4 0c             	add    esp,0xc
c000c6ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b0:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b3:	50                   	push   eax
c000c6b4:	50                   	push   eax
c000c6b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b8:	e8 1a bc 01 00       	call   c00282d7 <__floatsidf>
c000c6bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	e8 7e b8 01 00       	call   c0027f58 <__divdf3>
c000c6da:	83 c4 18             	add    esp,0x18
c000c6dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e5:	52                   	push   edx
c000c6e6:	89 fa                	mov    edx,edi
c000c6e8:	50                   	push   eax
c000c6e9:	89 d8                	mov    eax,ebx
c000c6eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ef:	e8 50 de ff ff       	call   c000a544 <calc_output_hex>
c000c6f4:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c708:	e8 4b b8 01 00       	call   c0027f58 <__divdf3>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c728:	e8 ca ae 01 00       	call   c00275f7 <__adddf3>
c000c72d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c735:	83 c4 18             	add    esp,0x18
c000c738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	e8 bb bf 01 00       	call   c0028700 <lrint>
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 89 bb 01 00       	call   c00282d7 <__floatsidf>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c755:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c759:	52                   	push   edx
c000c75a:	50                   	push   eax
c000c75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c763:	e8 e0 b4 01 00       	call   c0027c48 <__subdf3>
c000c768:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c770:	83 c4 20             	add    esp,0x20
c000c773:	6a 00                	push   0x0
c000c775:	6a 00                	push   0x0
c000c777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77f:	e8 bf bd 01 00       	call   c0028543 <__ltdf2>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	85 c0                	test   eax,eax
c000c789:	79 20                	jns    c000c7ab <sinc_hex_vari_process+0x66f>
c000c78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 57 ae 01 00       	call   c00275f7 <__adddf3>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ae:	83 ec 10             	sub    esp,0x10
c000c7b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c8:	e8 7b b4 01 00       	call   c0027c48 <__subdf3>
c000c7cd:	83 c4 18             	add    esp,0x18
c000c7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d8:	52                   	push   edx
c000c7d9:	50                   	push   eax
c000c7da:	e8 21 bf 01 00       	call   c0028700 <lrint>
c000c7df:	0f af f8             	imul   edi,eax
c000c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	01 f8                	add    eax,edi
c000c7eb:	99                   	cdq    
c000c7ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f2:	e9 fd fb ff ff       	jmp    c000c3f4 <sinc_hex_vari_process+0x2b8>
c000c7f7:	83 c4 4c             	add    esp,0x4c
c000c7fa:	89 d0                	mov    eax,edx
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	5d                   	pop    ebp
c000c800:	c3                   	ret    

c000c801 <sinc_quad_vari_process>:
c000c801:	55                   	push   ebp
c000c802:	ba 05 00 00 00       	mov    edx,0x5
c000c807:	57                   	push   edi
c000c808:	56                   	push   esi
c000c809:	53                   	push   ebx
c000c80a:	83 ec 4c             	sub    esp,0x4c
c000c80d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c811:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c815:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c818:	85 db                	test   ebx,ebx
c000c81a:	0f 84 9c 06 00 00    	je     c000cebc <sinc_quad_vari_process+0x6bb>
c000c820:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c823:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c826:	0f af c7             	imul   eax,edi
c000c829:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c82f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c836:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83d:	0f af c7             	imul   eax,edi
c000c840:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c843:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c846:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c849:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c851:	68 00 00 70 3f       	push   0x3f700000
c000c856:	6a 00                	push   0x0
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 de bc 01 00       	call   c0028543 <__ltdf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	ba 16 00 00 00       	mov    edx,0x16
c000c86d:	85 c0                	test   eax,eax
c000c86f:	0f 88 47 06 00 00    	js     c000cebc <sinc_quad_vari_process+0x6bb>
c000c875:	68 00 00 70 40       	push   0x40700000
c000c87a:	6a 00                	push   0x0
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c884:	e8 9c bc 01 00       	call   c0028525 <__gtdf2>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	ba 16 00 00 00       	mov    edx,0x16
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8f 23 06 00 00    	jg     c000cebc <sinc_quad_vari_process+0x6bb>
c000c899:	83 ec 0c             	sub    esp,0xc
c000c89c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c89f:	e8 33 ba 01 00       	call   c00282d7 <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8af:	68 00 00 00 40       	push   0x40000000
c000c8b4:	6a 00                	push   0x0
c000c8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	e8 34 ad 01 00       	call   c00275f7 <__adddf3>
c000c8c3:	59                   	pop    ecx
c000c8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8cf:	e8 03 ba 01 00       	call   c00282d7 <__floatsidf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	52                   	push   edx
c000c8e0:	50                   	push   eax
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	e8 6a b6 01 00       	call   c0027f58 <__divdf3>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fc:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	e8 09 bc 01 00       	call   c0028525 <__gtdf2>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	85 c0                	test   eax,eax
c000c921:	7e 2d                	jle    c000c950 <sinc_quad_vari_process+0x14f>
c000c923:	68 00 00 f0 3f       	push   0x3ff00000
c000c928:	6a 00                	push   0x0
c000c92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	e8 0c bc 01 00       	call   c0028543 <__ltdf2>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	85 c0                	test   eax,eax
c000c93c:	79 4d                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94e:	eb 1b                	jmp    c000c96b <sinc_quad_vari_process+0x16a>
c000c950:	68 00 00 f0 3f       	push   0x3ff00000
c000c955:	6a 00                	push   0x0
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95f:	e8 df bb 01 00       	call   c0028543 <__ltdf2>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	85 c0                	test   eax,eax
c000c969:	79 20                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 d8 b5 01 00       	call   c0027f58 <__divdf3>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c987:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98b:	50                   	push   eax
c000c98c:	50                   	push   eax
c000c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c995:	e8 66 bd 01 00       	call   c0028700 <lrint>
c000c99a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99d:	40                   	inc    eax
c000c99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a2:	0f af c7             	imul   eax,edi
c000c9a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b0:	58                   	pop    eax
c000c9b1:	5a                   	pop    edx
c000c9b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ba:	e8 41 bd 01 00       	call   c0028700 <lrint>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	e8 0f b9 01 00       	call   c00282d7 <__floatsidf>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d3:	52                   	push   edx
c000c9d4:	50                   	push   eax
c000c9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9dd:	e8 66 b2 01 00       	call   c0027c48 <__subdf3>
c000c9e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	6a 00                	push   0x0
c000c9ef:	6a 00                	push   0x0
c000c9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f9:	e8 45 bb 01 00       	call   c0028543 <__ltdf2>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	85 c0                	test   eax,eax
c000ca03:	79 1f                	jns    c000ca24 <sinc_quad_vari_process+0x223>
c000ca05:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0a:	6a 00                	push   0x0
c000ca0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca14:	e8 de ab 01 00       	call   c00275f7 <__adddf3>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca27:	83 ec 10             	sub    esp,0x10
c000ca2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca41:	e8 02 b2 01 00       	call   c0027c48 <__subdf3>
c000ca46:	83 c4 18             	add    esp,0x18
c000ca49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca51:	52                   	push   edx
c000ca52:	50                   	push   eax
c000ca53:	e8 a8 bc 01 00       	call   c0028700 <lrint>
c000ca58:	0f af f8             	imul   edi,eax
c000ca5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca5f:	01 f8                	add    eax,edi
c000ca61:	99                   	cdq    
c000ca62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca70:	68 00 00 f0 3f       	push   0x3ff00000
c000ca75:	6a 00                	push   0x0
c000ca77:	e8 dc b4 01 00       	call   c0027f58 <__divdf3>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca87:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8c:	68 23 42 92 0c       	push   0xc924223
c000ca91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca99:	e8 59 ab 01 00       	call   c00275f7 <__adddf3>
c000ca9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa6:	83 c4 20             	add    esp,0x20
c000caa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cabf:	7d 50                	jge    c000cb11 <sinc_quad_vari_process+0x310>
c000cac1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac7:	01 c8                	add    eax,ecx
c000cac9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cacc:	99                   	cdq    
c000cacd:	f7 f9                	idiv   ecx
c000cacf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad3:	7d 0c                	jge    c000cae1 <sinc_quad_vari_process+0x2e0>
c000cad5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad8:	85 ff                	test   edi,edi
c000cada:	79 6c                	jns    c000cb48 <sinc_quad_vari_process+0x347>
c000cadc:	e9 e7 00 00 00       	jmp    c000cbc8 <sinc_quad_vari_process+0x3c7>
c000cae1:	50                   	push   eax
c000cae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	e8 11 ee ff ff       	call   c000b8fe <prepare_data>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	89 c2                	mov    edx,eax
c000caf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf5:	85 c0                	test   eax,eax
c000caf7:	0f 85 bf 03 00 00    	jne    c000cebc <sinc_quad_vari_process+0x6bb>
c000cafd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb00:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb03:	01 c8                	add    eax,ecx
c000cb05:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb08:	99                   	cdq    
c000cb09:	f7 f9                	idiv   ecx
c000cb0b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb0f:	7c c4                	jl     c000cad5 <sinc_quad_vari_process+0x2d4>
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb30:	99                   	cdq    
c000cb31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3a:	99                   	cdq    
c000cb3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3e:	31 d2                	xor    edx,edx
c000cb40:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb43:	e9 74 03 00 00       	jmp    c000cebc <sinc_quad_vari_process+0x6bb>
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb4e:	e8 84 b7 01 00       	call   c00282d7 <__floatsidf>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6e:	e8 84 aa 01 00       	call   c00275f7 <__adddf3>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	e8 64 aa 01 00       	call   c00275f7 <__adddf3>
c000cb93:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb9e:	e8 34 b7 01 00       	call   c00282d7 <__floatsidf>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbae:	52                   	push   edx
c000cbaf:	50                   	push   eax
c000cbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb8:	e8 84 b9 01 00       	call   c0028541 <__gedf2>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	85 c0                	test   eax,eax
c000cbc2:	0f 89 49 ff ff ff    	jns    c000cb11 <sinc_quad_vari_process+0x310>
c000cbc8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbcc:	0f 8e ef 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cbd2:	83 ec 10             	sub    esp,0x10
c000cbd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe1:	e8 62 b0 01 00       	call   c0027c48 <__subdf3>
c000cbe6:	83 c4 18             	add    esp,0x18
c000cbe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	e8 e8 ba 01 00       	call   c00286e0 <fabs>
c000cbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc08:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	e8 0b b9 01 00       	call   c0028525 <__gtdf2>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	0f 8e 9c 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cc25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc28:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc33:	52                   	push   edx
c000cc34:	50                   	push   eax
c000cc35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc38:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3b:	e8 08 b0 01 00       	call   c0027c48 <__subdf3>
c000cc40:	59                   	pop    ecx
c000cc41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4c:	e8 86 b6 01 00       	call   c00282d7 <__floatsidf>
c000cc51:	83 c4 10             	add    esp,0x10
c000cc54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5c:	52                   	push   edx
c000cc5d:	50                   	push   eax
c000cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	e8 09 b0 01 00       	call   c0027c74 <__muldf3>
c000cc6b:	5f                   	pop    edi
c000cc6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc70:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc77:	e8 5b b6 01 00       	call   c00282d7 <__floatsidf>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc87:	52                   	push   edx
c000cc88:	50                   	push   eax
c000cc89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc91:	e8 c2 b2 01 00       	call   c0027f58 <__divdf3>
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb1:	e8 41 a9 01 00       	call   c00275f7 <__adddf3>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc1:	83 ec 0c             	sub    esp,0xc
c000ccc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc7:	e8 0b b6 01 00       	call   c00282d7 <__floatsidf>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 57 b8 01 00       	call   c0028543 <__ltdf2>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccfd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd01:	78 10                	js     c000cd13 <sinc_quad_vari_process+0x512>
c000cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	e8 4c af 01 00       	call   c0027c74 <__muldf3>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3a:	e8 98 eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd43:	89 c7                	mov    edi,eax
c000cd45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd51:	e8 1e af 01 00       	call   c0027c74 <__muldf3>
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd61:	52                   	push   edx
c000cd62:	50                   	push   eax
c000cd63:	e8 6f eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd75:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd78:	50                   	push   eax
c000cd79:	50                   	push   eax
c000cd7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7d:	e8 55 b5 01 00       	call   c00282d7 <__floatsidf>
c000cd82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	e8 b9 b1 01 00       	call   c0027f58 <__divdf3>
c000cd9f:	83 c4 18             	add    esp,0x18
c000cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdaa:	52                   	push   edx
c000cdab:	89 fa                	mov    edx,edi
c000cdad:	50                   	push   eax
c000cdae:	89 d8                	mov    eax,ebx
c000cdb0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb4:	e8 a5 d1 ff ff       	call   c0009f5e <calc_output_quad>
c000cdb9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcd:	e8 86 b1 01 00       	call   c0027f58 <__divdf3>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cded:	e8 05 a8 01 00       	call   c00275f7 <__adddf3>
c000cdf2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfa:	83 c4 18             	add    esp,0x18
c000cdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	e8 f6 b8 01 00       	call   c0028700 <lrint>
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	50                   	push   eax
c000ce0e:	e8 c4 b4 01 00       	call   c00282d7 <__floatsidf>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1e:	52                   	push   edx
c000ce1f:	50                   	push   eax
c000ce20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce28:	e8 1b ae 01 00       	call   c0027c48 <__subdf3>
c000ce2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce35:	83 c4 20             	add    esp,0x20
c000ce38:	6a 00                	push   0x0
c000ce3a:	6a 00                	push   0x0
c000ce3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce44:	e8 fa b6 01 00       	call   c0028543 <__ltdf2>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	85 c0                	test   eax,eax
c000ce4e:	79 20                	jns    c000ce70 <sinc_quad_vari_process+0x66f>
c000ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 92 a7 01 00       	call   c00275f7 <__adddf3>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce73:	83 ec 10             	sub    esp,0x10
c000ce76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8d:	e8 b6 ad 01 00       	call   c0027c48 <__subdf3>
c000ce92:	83 c4 18             	add    esp,0x18
c000ce95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9d:	52                   	push   edx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 5c b8 01 00       	call   c0028700 <lrint>
c000cea4:	0f af f8             	imul   edi,eax
c000cea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	01 f8                	add    eax,edi
c000ceb0:	99                   	cdq    
c000ceb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb7:	e9 fd fb ff ff       	jmp    c000cab9 <sinc_quad_vari_process+0x2b8>
c000cebc:	83 c4 4c             	add    esp,0x4c
c000cebf:	89 d0                	mov    eax,edx
c000cec1:	5b                   	pop    ebx
c000cec2:	5e                   	pop    esi
c000cec3:	5f                   	pop    edi
c000cec4:	5d                   	pop    ebp
c000cec5:	c3                   	ret    

c000cec6 <sinc_stereo_vari_process>:
c000cec6:	55                   	push   ebp
c000cec7:	ba 05 00 00 00       	mov    edx,0x5
c000cecc:	57                   	push   edi
c000cecd:	56                   	push   esi
c000cece:	53                   	push   ebx
c000cecf:	83 ec 4c             	sub    esp,0x4c
c000ced2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceda:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedd:	85 db                	test   ebx,ebx
c000cedf:	0f 84 9c 06 00 00    	je     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cee5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceeb:	0f af c7             	imul   eax,edi
c000ceee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf02:	0f af c7             	imul   eax,edi
c000cf05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf16:	68 00 00 70 3f       	push   0x3f700000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf25:	e8 19 b6 01 00       	call   c0028543 <__ltdf2>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ba 16 00 00 00       	mov    edx,0x16
c000cf32:	85 c0                	test   eax,eax
c000cf34:	0f 88 47 06 00 00    	js     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf3a:	68 00 00 70 40       	push   0x40700000
c000cf3f:	6a 00                	push   0x0
c000cf41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf49:	e8 d7 b5 01 00       	call   c0028525 <__gtdf2>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	ba 16 00 00 00       	mov    edx,0x16
c000cf56:	85 c0                	test   eax,eax
c000cf58:	0f 8f 23 06 00 00    	jg     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf64:	e8 6e b3 01 00       	call   c00282d7 <__floatsidf>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf74:	68 00 00 00 40       	push   0x40000000
c000cf79:	6a 00                	push   0x0
c000cf7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	e8 6f a6 01 00       	call   c00275f7 <__adddf3>
c000cf88:	59                   	pop    ecx
c000cf89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf94:	e8 3e b3 01 00       	call   c00282d7 <__floatsidf>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	e8 a5 af 01 00       	call   c0027f58 <__divdf3>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	e8 44 b5 01 00       	call   c0028525 <__gtdf2>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	85 c0                	test   eax,eax
c000cfe6:	7e 2d                	jle    c000d015 <sinc_stereo_vari_process+0x14f>
c000cfe8:	68 00 00 f0 3f       	push   0x3ff00000
c000cfed:	6a 00                	push   0x0
c000cfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff7:	e8 47 b5 01 00       	call   c0028543 <__ltdf2>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	85 c0                	test   eax,eax
c000d001:	79 4d                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d00f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d013:	eb 1b                	jmp    c000d030 <sinc_stereo_vari_process+0x16a>
c000d015:	68 00 00 f0 3f       	push   0x3ff00000
c000d01a:	6a 00                	push   0x0
c000d01c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d024:	e8 1a b5 01 00       	call   c0028543 <__ltdf2>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	85 c0                	test   eax,eax
c000d02e:	79 20                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d034:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 13 af 01 00       	call   c0027f58 <__divdf3>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d050:	50                   	push   eax
c000d051:	50                   	push   eax
c000d052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05a:	e8 a1 b6 01 00       	call   c0028700 <lrint>
c000d05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d062:	40                   	inc    eax
c000d063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d067:	0f af c7             	imul   eax,edi
c000d06a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d075:	58                   	pop    eax
c000d076:	5a                   	pop    edx
c000d077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07f:	e8 7c b6 01 00       	call   c0028700 <lrint>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	50                   	push   eax
c000d088:	e8 4a b2 01 00       	call   c00282d7 <__floatsidf>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d098:	52                   	push   edx
c000d099:	50                   	push   eax
c000d09a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a2:	e8 a1 ab 01 00       	call   c0027c48 <__subdf3>
c000d0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0af:	83 c4 20             	add    esp,0x20
c000d0b2:	6a 00                	push   0x0
c000d0b4:	6a 00                	push   0x0
c000d0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0be:	e8 80 b4 01 00       	call   c0028543 <__ltdf2>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	85 c0                	test   eax,eax
c000d0c8:	79 1f                	jns    c000d0e9 <sinc_stereo_vari_process+0x223>
c000d0ca:	68 00 00 f0 3f       	push   0x3ff00000
c000d0cf:	6a 00                	push   0x0
c000d0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d9:	e8 19 a5 01 00       	call   c00275f7 <__adddf3>
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ec:	83 ec 10             	sub    esp,0x10
c000d0ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d106:	e8 3d ab 01 00       	call   c0027c48 <__subdf3>
c000d10b:	83 c4 18             	add    esp,0x18
c000d10e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d116:	52                   	push   edx
c000d117:	50                   	push   eax
c000d118:	e8 e3 b5 01 00       	call   c0028700 <lrint>
c000d11d:	0f af f8             	imul   edi,eax
c000d120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d124:	01 f8                	add    eax,edi
c000d126:	99                   	cdq    
c000d127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d135:	68 00 00 f0 3f       	push   0x3ff00000
c000d13a:	6a 00                	push   0x0
c000d13c:	e8 17 ae 01 00       	call   c0027f58 <__divdf3>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d151:	68 23 42 92 0c       	push   0xc924223
c000d156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15e:	e8 94 a4 01 00       	call   c00275f7 <__adddf3>
c000d163:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d167:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16b:	83 c4 20             	add    esp,0x20
c000d16e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d176:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d17e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d181:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d184:	7d 50                	jge    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d186:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d189:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18c:	01 c8                	add    eax,ecx
c000d18e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d191:	99                   	cdq    
c000d192:	f7 f9                	idiv   ecx
c000d194:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d198:	7d 0c                	jge    c000d1a6 <sinc_stereo_vari_process+0x2e0>
c000d19a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19d:	85 ff                	test   edi,edi
c000d19f:	79 6c                	jns    c000d20d <sinc_stereo_vari_process+0x347>
c000d1a1:	e9 e7 00 00 00       	jmp    c000d28d <sinc_stereo_vari_process+0x3c7>
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ab:	56                   	push   esi
c000d1ac:	53                   	push   ebx
c000d1ad:	e8 4c e7 ff ff       	call   c000b8fe <prepare_data>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	89 c2                	mov    edx,eax
c000d1b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1ba:	85 c0                	test   eax,eax
c000d1bc:	0f 85 bf 03 00 00    	jne    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d1c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c8:	01 c8                	add    eax,ecx
c000d1ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 f9                	idiv   ecx
c000d1d0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d4:	7c c4                	jl     c000d19a <sinc_stereo_vari_process+0x2d4>
c000d1d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1de:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f5:	99                   	cdq    
c000d1f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1ff:	99                   	cdq    
c000d200:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d203:	31 d2                	xor    edx,edx
c000d205:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d208:	e9 74 03 00 00       	jmp    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d213:	e8 bf b0 01 00       	call   c00282d7 <__floatsidf>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d223:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d233:	e8 bf a3 01 00       	call   c00275f7 <__adddf3>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d243:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d247:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	e8 9f a3 01 00       	call   c00275f7 <__adddf3>
c000d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d263:	e8 6f b0 01 00       	call   c00282d7 <__floatsidf>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d273:	52                   	push   edx
c000d274:	50                   	push   eax
c000d275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27d:	e8 bf b2 01 00       	call   c0028541 <__gedf2>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	85 c0                	test   eax,eax
c000d287:	0f 89 49 ff ff ff    	jns    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d28d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d291:	0f 8e ef 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a6:	e8 9d a9 01 00       	call   c0027c48 <__subdf3>
c000d2ab:	83 c4 18             	add    esp,0x18
c000d2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 23 b4 01 00       	call   c00286e0 <fabs>
c000d2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2da:	e8 46 b2 01 00       	call   c0028525 <__gtdf2>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	0f 8e 9c 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d2ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ed:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d300:	e8 43 a9 01 00       	call   c0027c48 <__subdf3>
c000d305:	59                   	pop    ecx
c000d306:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d30e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d311:	e8 c1 af 01 00       	call   c00282d7 <__floatsidf>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d321:	52                   	push   edx
c000d322:	50                   	push   eax
c000d323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	e8 44 a9 01 00       	call   c0027c74 <__muldf3>
c000d330:	5f                   	pop    edi
c000d331:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d335:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d339:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33c:	e8 96 af 01 00       	call   c00282d7 <__floatsidf>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34c:	52                   	push   edx
c000d34d:	50                   	push   eax
c000d34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d356:	e8 fd ab 01 00       	call   c0027f58 <__divdf3>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d362:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d376:	e8 7c a2 01 00       	call   c00275f7 <__adddf3>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38c:	e8 46 af 01 00       	call   c00282d7 <__floatsidf>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 92 b1 01 00       	call   c0028543 <__ltdf2>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c6:	78 10                	js     c000d3d8 <sinc_stereo_vari_process+0x512>
c000d3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	e8 87 a8 01 00       	call   c0027c74 <__muldf3>
c000d3ed:	59                   	pop    ecx
c000d3ee:	5f                   	pop    edi
c000d3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3ff:	e8 d3 e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d404:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d408:	89 c7                	mov    edi,eax
c000d40a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d416:	e8 59 a8 01 00       	call   c0027c74 <__muldf3>
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d426:	52                   	push   edx
c000d427:	50                   	push   eax
c000d428:	e8 aa e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d42d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d430:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43a:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43d:	50                   	push   eax
c000d43e:	50                   	push   eax
c000d43f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d442:	e8 90 ae 01 00       	call   c00282d7 <__floatsidf>
c000d447:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	e8 f4 aa 01 00       	call   c0027f58 <__divdf3>
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46f:	52                   	push   edx
c000d470:	89 fa                	mov    edx,edi
c000d472:	50                   	push   eax
c000d473:	89 d8                	mov    eax,ebx
c000d475:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d479:	e8 02 c7 ff ff       	call   c0009b80 <calc_output_stereo>
c000d47e:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d492:	e8 c1 aa 01 00       	call   c0027f58 <__divdf3>
c000d497:	83 c4 10             	add    esp,0x10
c000d49a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d49e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b2:	e8 40 a1 01 00       	call   c00275f7 <__adddf3>
c000d4b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	e8 31 b2 01 00       	call   c0028700 <lrint>
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 ff ad 01 00       	call   c00282d7 <__floatsidf>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e3:	52                   	push   edx
c000d4e4:	50                   	push   eax
c000d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ed:	e8 56 a7 01 00       	call   c0027c48 <__subdf3>
c000d4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d509:	e8 35 b0 01 00       	call   c0028543 <__ltdf2>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	85 c0                	test   eax,eax
c000d513:	79 20                	jns    c000d535 <sinc_stereo_vari_process+0x66f>
c000d515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 cd a0 01 00       	call   c00275f7 <__adddf3>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d535:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d538:	83 ec 10             	sub    esp,0x10
c000d53b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d53f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d552:	e8 f1 a6 01 00       	call   c0027c48 <__subdf3>
c000d557:	83 c4 18             	add    esp,0x18
c000d55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	e8 97 b1 01 00       	call   c0028700 <lrint>
c000d569:	0f af f8             	imul   edi,eax
c000d56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	01 f8                	add    eax,edi
c000d575:	99                   	cdq    
c000d576:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d579:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57c:	e9 fd fb ff ff       	jmp    c000d17e <sinc_stereo_vari_process+0x2b8>
c000d581:	83 c4 4c             	add    esp,0x4c
c000d584:	89 d0                	mov    eax,edx
c000d586:	5b                   	pop    ebx
c000d587:	5e                   	pop    esi
c000d588:	5f                   	pop    edi
c000d589:	5d                   	pop    ebp
c000d58a:	c3                   	ret    

c000d58b <sinc_mono_vari_process>:
c000d58b:	55                   	push   ebp
c000d58c:	ba 05 00 00 00       	mov    edx,0x5
c000d591:	57                   	push   edi
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 4c             	sub    esp,0x4c
c000d597:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d59f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a2:	85 db                	test   ebx,ebx
c000d5a4:	0f 84 c1 06 00 00    	je     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d5aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b0:	0f af c7             	imul   eax,edi
c000d5b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c7:	0f af c7             	imul   eax,edi
c000d5ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5de:	68 00 00 70 3f       	push   0x3f700000
c000d5e3:	6a 00                	push   0x0
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ed:	e8 51 af 01 00       	call   c0028543 <__ltdf2>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 16 00 00 00       	mov    edx,0x16
c000d5fa:	85 c0                	test   eax,eax
c000d5fc:	0f 88 69 06 00 00    	js     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d602:	68 00 00 70 40       	push   0x40700000
c000d607:	6a 00                	push   0x0
c000d609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d611:	e8 0f af 01 00       	call   c0028525 <__gtdf2>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	ba 16 00 00 00       	mov    edx,0x16
c000d61e:	85 c0                	test   eax,eax
c000d620:	0f 8f 45 06 00 00    	jg     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62c:	e8 a6 ac 01 00       	call   c00282d7 <__floatsidf>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63c:	68 00 00 00 40       	push   0x40000000
c000d641:	6a 00                	push   0x0
c000d643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	e8 a7 9f 01 00       	call   c00275f7 <__adddf3>
c000d650:	59                   	pop    ecx
c000d651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d655:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65c:	e8 76 ac 01 00       	call   c00282d7 <__floatsidf>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	52                   	push   edx
c000d66d:	50                   	push   eax
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	e8 dd a8 01 00       	call   c0027f58 <__divdf3>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d686:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d689:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	e8 7c ae 01 00       	call   c0028525 <__gtdf2>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	85 c0                	test   eax,eax
c000d6ae:	7e 2d                	jle    c000d6dd <sinc_mono_vari_process+0x152>
c000d6b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b5:	6a 00                	push   0x0
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 7f ae 01 00       	call   c0028543 <__ltdf2>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	85 c0                	test   eax,eax
c000d6c9:	79 4d                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6db:	eb 1b                	jmp    c000d6f8 <sinc_mono_vari_process+0x16d>
c000d6dd:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e2:	6a 00                	push   0x0
c000d6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ec:	e8 52 ae 01 00       	call   c0028543 <__ltdf2>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	79 20                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 4b a8 01 00       	call   c0027f58 <__divdf3>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d714:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d718:	50                   	push   eax
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d722:	e8 d9 af 01 00       	call   c0028700 <lrint>
c000d727:	40                   	inc    eax
c000d728:	0f af c7             	imul   eax,edi
c000d72b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d72f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d733:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d736:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d741:	58                   	pop    eax
c000d742:	5a                   	pop    edx
c000d743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d747:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74b:	e8 b0 af 01 00       	call   c0028700 <lrint>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	50                   	push   eax
c000d754:	e8 7e ab 01 00       	call   c00282d7 <__floatsidf>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d764:	52                   	push   edx
c000d765:	50                   	push   eax
c000d766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76e:	e8 d5 a4 01 00       	call   c0027c48 <__subdf3>
c000d773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77b:	83 c4 20             	add    esp,0x20
c000d77e:	6a 00                	push   0x0
c000d780:	6a 00                	push   0x0
c000d782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78a:	e8 b4 ad 01 00       	call   c0028543 <__ltdf2>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	85 c0                	test   eax,eax
c000d794:	79 1f                	jns    c000d7b5 <sinc_mono_vari_process+0x22a>
c000d796:	68 00 00 f0 3f       	push   0x3ff00000
c000d79b:	6a 00                	push   0x0
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a5:	e8 4d 9e 01 00       	call   c00275f7 <__adddf3>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b5:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bb:	83 ec 10             	sub    esp,0x10
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ce:	e8 75 a4 01 00       	call   c0027c48 <__subdf3>
c000d7d3:	83 c4 18             	add    esp,0x18
c000d7d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7de:	52                   	push   edx
c000d7df:	50                   	push   eax
c000d7e0:	e8 1b af 01 00       	call   c0028700 <lrint>
c000d7e5:	0f af f8             	imul   edi,eax
c000d7e8:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f2:	99                   	cdq    
c000d7f3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d801:	55                   	push   ebp
c000d802:	57                   	push   edi
c000d803:	e8 50 a7 01 00       	call   c0027f58 <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d818:	68 23 42 92 0c       	push   0xc924223
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d825:	e8 cd 9d 01 00       	call   c00275f7 <__adddf3>
c000d82a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d82e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d832:	83 c4 20             	add    esp,0x20
c000d835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d840:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d843:	7d 54                	jge    c000d899 <sinc_mono_vari_process+0x30e>
c000d845:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d848:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84b:	01 c8                	add    eax,ecx
c000d84d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d850:	99                   	cdq    
c000d851:	f7 f9                	idiv   ecx
c000d853:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d857:	7d 0c                	jge    c000d865 <sinc_mono_vari_process+0x2da>
c000d859:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85c:	85 ff                	test   edi,edi
c000d85e:	79 73                	jns    c000d8d3 <sinc_mono_vari_process+0x348>
c000d860:	e9 ee 00 00 00       	jmp    c000d953 <sinc_mono_vari_process+0x3c8>
c000d865:	50                   	push   eax
c000d866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	e8 8d e0 ff ff       	call   c000b8fe <prepare_data>
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87d:	85 d2                	test   edx,edx
c000d87f:	0f 85 e6 03 00 00    	jne    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d885:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d888:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88b:	01 c8                	add    eax,ecx
c000d88d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d890:	99                   	cdq    
c000d891:	f7 f9                	idiv   ecx
c000d893:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d897:	7c c0                	jl     c000d859 <sinc_mono_vari_process+0x2ce>
c000d899:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b3:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bb:	99                   	cdq    
c000d8bc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c5:	99                   	cdq    
c000d8c6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ce:	e9 98 03 00 00       	jmp    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d9:	e8 f9 a9 01 00       	call   c00282d7 <__floatsidf>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f9:	e8 f9 9c 01 00       	call   c00275f7 <__adddf3>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	e8 d9 9c 01 00       	call   c00275f7 <__adddf3>
c000d91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d925:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d929:	e8 a9 a9 01 00       	call   c00282d7 <__floatsidf>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d935:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d939:	52                   	push   edx
c000d93a:	50                   	push   eax
c000d93b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d943:	e8 dd ab 01 00       	call   c0028525 <__gtdf2>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	85 c0                	test   eax,eax
c000d94d:	0f 8f 46 ff ff ff    	jg     c000d899 <sinc_mono_vari_process+0x30e>
c000d953:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d957:	0f 8e f5 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d95d:	83 ec 10             	sub    esp,0x10
c000d960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d963:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d966:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96d:	ff 30                	push   DWORD PTR [eax]
c000d96f:	e8 d4 a2 01 00       	call   c0027c48 <__subdf3>
c000d974:	83 c4 18             	add    esp,0x18
c000d977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d97f:	52                   	push   edx
c000d980:	50                   	push   eax
c000d981:	e8 5a ad 01 00       	call   c00286e0 <fabs>
c000d986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d996:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a3:	e8 7d ab 01 00       	call   c0028525 <__gtdf2>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	0f 8e 9f 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d9b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c4:	52                   	push   edx
c000d9c5:	50                   	push   eax
c000d9c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9cc:	e8 77 a2 01 00       	call   c0027c48 <__subdf3>
c000d9d1:	5f                   	pop    edi
c000d9d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9da:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9dd:	e8 f5 a8 01 00       	call   c00282d7 <__floatsidf>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ed:	52                   	push   edx
c000d9ee:	50                   	push   eax
c000d9ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	e8 78 a2 01 00       	call   c0027c74 <__muldf3>
c000d9fc:	5d                   	pop    ebp
c000d9fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da05:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da08:	e8 ca a8 01 00       	call   c00282d7 <__floatsidf>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da18:	52                   	push   edx
c000da19:	50                   	push   eax
c000da1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da22:	e8 31 a5 01 00       	call   c0027f58 <__divdf3>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da42:	e8 b0 9b 01 00       	call   c00275f7 <__adddf3>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da58:	e8 7a a8 01 00       	call   c00282d7 <__floatsidf>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 c6 aa 01 00       	call   c0028543 <__ltdf2>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	85 c0                	test   eax,eax
c000da82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da8e:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da92:	78 10                	js     c000daa4 <sinc_mono_vari_process+0x519>
c000da94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	e8 bb a1 01 00       	call   c0027c74 <__muldf3>
c000dab9:	59                   	pop    ecx
c000daba:	5f                   	pop    edi
c000dabb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dabf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacb:	e8 07 de ff ff       	call   c000b8d7 <double_to_fp>
c000dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae2:	e8 8d a1 01 00       	call   c0027c74 <__muldf3>
c000dae7:	83 c4 18             	add    esp,0x18
c000daea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf2:	52                   	push   edx
c000daf3:	50                   	push   eax
c000daf4:	e8 de dd ff ff       	call   c000b8d7 <double_to_fp>
c000daf9:	83 ec 0c             	sub    esp,0xc
c000dafc:	89 c5                	mov    ebp,eax
c000dafe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db01:	e8 d1 a7 01 00       	call   c00282d7 <__floatsidf>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db11:	52                   	push   edx
c000db12:	50                   	push   eax
c000db13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1b:	e8 38 a4 01 00       	call   c0027f58 <__divdf3>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	89 e9                	mov    ecx,ebp
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	89 fa                	mov    edx,edi
c000db31:	e8 ee bd ff ff       	call   c0009924 <calc_output_single>
c000db36:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db39:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db44:	52                   	push   edx
c000db45:	50                   	push   eax
c000db46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4e:	e8 21 a1 01 00       	call   c0027c74 <__muldf3>
c000db53:	59                   	pop    ecx
c000db54:	59                   	pop    ecx
c000db55:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db59:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db65:	e8 dd a9 01 00       	call   c0028547 <__truncdfsf2>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db70:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db83:	e8 d0 a3 01 00       	call   c0027f58 <__divdf3>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba3:	e8 4f 9a 01 00       	call   c00275f7 <__adddf3>
c000dba8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb0:	83 c4 18             	add    esp,0x18
c000dbb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbb:	e8 40 ab 01 00       	call   c0028700 <lrint>
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	50                   	push   eax
c000dbc4:	e8 0e a7 01 00       	call   c00282d7 <__floatsidf>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd4:	52                   	push   edx
c000dbd5:	50                   	push   eax
c000dbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbde:	e8 65 a0 01 00       	call   c0027c48 <__subdf3>
c000dbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbeb:	83 c4 20             	add    esp,0x20
c000dbee:	6a 00                	push   0x0
c000dbf0:	6a 00                	push   0x0
c000dbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfa:	e8 44 a9 01 00       	call   c0028543 <__ltdf2>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	85 c0                	test   eax,eax
c000dc04:	79 20                	jns    c000dc26 <sinc_mono_vari_process+0x69b>
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 dc 99 01 00       	call   c00275f7 <__adddf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc26:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc29:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2c:	83 ec 10             	sub    esp,0x10
c000dc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3f:	e8 04 a0 01 00       	call   c0027c48 <__subdf3>
c000dc44:	83 c4 18             	add    esp,0x18
c000dc47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc4f:	52                   	push   edx
c000dc50:	50                   	push   eax
c000dc51:	e8 aa aa 01 00       	call   c0028700 <lrint>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	0f af f8             	imul   edi,eax
c000dc5c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc5f:	99                   	cdq    
c000dc60:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc63:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc66:	e9 d2 fb ff ff       	jmp    c000d83d <sinc_mono_vari_process+0x2b2>
c000dc6b:	83 c4 4c             	add    esp,0x4c
c000dc6e:	89 d0                	mov    eax,edx
c000dc70:	5b                   	pop    ebx
c000dc71:	5e                   	pop    esi
c000dc72:	5f                   	pop    edi
c000dc73:	5d                   	pop    ebp
c000dc74:	c3                   	ret    

c000dc75 <sinc_get_name>:
c000dc75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	83 fa 02             	cmp    edx,0x2
c000dc7e:	77 07                	ja     c000dc87 <sinc_get_name+0x12>
c000dc80:	8b 04 95 04 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60fc]
c000dc87:	c3                   	ret    

c000dc88 <sinc_get_description>:
c000dc88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8c:	31 c0                	xor    eax,eax
c000dc8e:	83 fa 02             	cmp    edx,0x2
c000dc91:	77 07                	ja     c000dc9a <sinc_get_description+0x12>
c000dc93:	8b 04 95 f8 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6108]
c000dc9a:	c3                   	ret    

c000dc9b <sinc_set_converter>:
c000dc9b:	53                   	push   ebx
c000dc9c:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcac:	85 c0                	test   eax,eax
c000dcae:	74 13                	je     c000dcc3 <sinc_set_converter+0x28>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	50                   	push   eax
c000dcb4:	e8 a2 1b 00 00       	call   c000f85b <free>
c000dcb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	50                   	push   eax
c000dcc4:	68 44 08 00 00       	push   0x844
c000dcc9:	6a 00                	push   0x0
c000dccb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccf:	50                   	push   eax
c000dcd0:	e8 ab 2a ff ff       	call   c0000780 <memset>
c000dcd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd8:	83 c4 10             	add    esp,0x10
c000dcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000dce0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce6:	7f 6e                	jg     c000dd56 <sinc_set_converter+0xbb>
c000dce8:	83 fa 01             	cmp    edx,0x1
c000dceb:	75 10                	jne    c000dcfd <sinc_set_converter+0x62>
c000dced:	c7 43 24 8b d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58b
c000dcf4:	c7 43 20 8b d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58b
c000dcfb:	eb 4d                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dcfd:	83 fa 02             	cmp    edx,0x2
c000dd00:	75 10                	jne    c000dd12 <sinc_set_converter+0x77>
c000dd02:	c7 43 24 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec6
c000dd09:	c7 43 20 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec6
c000dd10:	eb 38                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd12:	83 fa 04             	cmp    edx,0x4
c000dd15:	75 10                	jne    c000dd27 <sinc_set_converter+0x8c>
c000dd17:	c7 43 24 01 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c801
c000dd1e:	c7 43 20 01 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c801
c000dd25:	eb 23                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd27:	83 fa 06             	cmp    edx,0x6
c000dd2a:	75 10                	jne    c000dd3c <sinc_set_converter+0xa1>
c000dd2c:	c7 43 24 3c c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13c
c000dd33:	c7 43 20 3c c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13c
c000dd3a:	eb 0e                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd3c:	c7 43 24 78 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba78
c000dd43:	c7 43 20 78 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba78
c000dd4a:	c7 43 28 2b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2b
c000dd51:	b8 0a 00 00 00       	mov    eax,0xa
c000dd56:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <zoh_vari_process>:
c000dd5e:	55                   	push   ebp
c000dd5f:	31 d2                	xor    edx,edx
c000dd61:	57                   	push   edi
c000dd62:	56                   	push   esi
c000dd63:	53                   	push   ebx
c000dd64:	83 ec 3c             	sub    esp,0x3c
c000dd67:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd6f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd73:	0f 8e 80 06 00 00    	jle    c000e3f9 <zoh_vari_process+0x69b>
c000dd79:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7c:	ba 05 00 00 00       	mov    edx,0x5
c000dd81:	85 db                	test   ebx,ebx
c000dd83:	0f 84 70 06 00 00    	je     c000e3f9 <zoh_vari_process+0x69b>
c000dd89:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd90:	74 19                	je     c000ddab <zoh_vari_process+0x4d>
c000dd92:	31 d2                	xor    edx,edx
c000dd94:	39 c2                	cmp    edx,eax
c000dd96:	7d 0c                	jge    c000dda4 <zoh_vari_process+0x46>
c000dd98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9a:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9d:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda1:	42                   	inc    edx
c000dda2:	eb f0                	jmp    c000dd94 <zoh_vari_process+0x36>
c000dda4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddab:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddae:	0f af d0             	imul   edx,eax
c000ddb1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddbf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd6:	68 00 00 70 3f       	push   0x3f700000
c000dddb:	6a 00                	push   0x0
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde5:	e8 59 a7 01 00       	call   c0028543 <__ltdf2>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	ba 16 00 00 00       	mov    edx,0x16
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	0f 88 ff 05 00 00    	js     c000e3f9 <zoh_vari_process+0x69b>
c000ddfa:	68 00 00 70 40       	push   0x40700000
c000ddff:	6a 00                	push   0x0
c000de01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de09:	e8 17 a7 01 00       	call   c0028525 <__gtdf2>
c000de0e:	83 c4 10             	add    esp,0x10
c000de11:	ba 16 00 00 00       	mov    edx,0x16
c000de16:	85 c0                	test   eax,eax
c000de18:	0f 8f db 05 00 00    	jg     c000e3f9 <zoh_vari_process+0x69b>
c000de1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de21:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2c:	68 00 00 f0 3f       	push   0x3ff00000
c000de31:	6a 00                	push   0x0
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 03 a7 01 00       	call   c0028543 <__ltdf2>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	85 c0                	test   eax,eax
c000de45:	0f 89 da 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000de4b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de4e:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de51:	0f 8d ce 01 00 00    	jge    c000e025 <zoh_vari_process+0x2c7>
c000de57:	83 ec 0c             	sub    esp,0xc
c000de5a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5d:	e8 75 a4 01 00       	call   c00282d7 <__floatsidf>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 f3 9d 01 00       	call   c0027c74 <__muldf3>
c000de81:	59                   	pop    ecx
c000de82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8d:	e8 45 a4 01 00       	call   c00282d7 <__floatsidf>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	e8 4b 97 01 00       	call   c00275f7 <__adddf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb8:	e8 1a a4 01 00       	call   c00282d7 <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dece:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded2:	e8 6a a6 01 00       	call   c0028541 <__gedf2>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	85 c0                	test   eax,eax
c000dedc:	0f 89 43 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000dee2:	85 ed                	test   ebp,ebp
c000dee4:	0f 8e ec 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def3:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def6:	ff 37                	push   DWORD PTR [edi]
c000def8:	e8 4b 9d 01 00       	call   c0027c48 <__subdf3>
c000defd:	83 c4 18             	add    esp,0x18
c000df00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df08:	52                   	push   edx
c000df09:	50                   	push   eax
c000df0a:	e8 d1 a7 01 00       	call   c00286e0 <fabs>
c000df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df1f:	68 23 42 92 0c       	push   0xc924223
c000df24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2c:	e8 f4 a5 01 00       	call   c0028525 <__gtdf2>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 8e 9a 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000df3c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df3e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df41:	89 04 24             	mov    DWORD PTR [esp],eax
c000df44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df48:	52                   	push   edx
c000df49:	50                   	push   eax
c000df4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df50:	e8 f3 9c 01 00       	call   c0027c48 <__subdf3>
c000df55:	59                   	pop    ecx
c000df56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df61:	e8 71 a3 01 00       	call   c00282d7 <__floatsidf>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df71:	52                   	push   edx
c000df72:	50                   	push   eax
c000df73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	e8 f4 9c 01 00       	call   c0027c74 <__muldf3>
c000df80:	5d                   	pop    ebp
c000df81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8c:	e8 46 a3 01 00       	call   c00282d7 <__floatsidf>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9c:	52                   	push   edx
c000df9d:	50                   	push   eax
c000df9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa6:	e8 ad 9f 01 00       	call   c0027f58 <__divdf3>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc6:	e8 2c 96 01 00       	call   c00275f7 <__adddf3>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd6:	31 c0                	xor    eax,eax
c000dfd8:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdb:	7e 13                	jle    c000dff0 <zoh_vari_process+0x292>
c000dfdd:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe7:	40                   	inc    eax
c000dfe8:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfeb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfee:	eb e8                	jmp    c000dfd8 <zoh_vari_process+0x27a>
c000dff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff8:	68 00 00 f0 3f       	push   0x3ff00000
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 54 9f 01 00       	call   c0027f58 <__divdf3>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e00e:	52                   	push   edx
c000e00f:	50                   	push   eax
c000e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	e8 da 95 01 00       	call   c00275f7 <__adddf3>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 ff fd ff ff       	jmp    c000de24 <zoh_vari_process+0xc6>
c000e025:	55                   	push   ebp
c000e026:	55                   	push   ebp
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 cc a6 01 00       	call   c0028700 <lrint>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 9a a2 01 00       	call   c00282d7 <__floatsidf>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e044:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e048:	52                   	push   edx
c000e049:	50                   	push   eax
c000e04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e052:	e8 f1 9b 01 00       	call   c0027c48 <__subdf3>
c000e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	6a 00                	push   0x0
c000e064:	6a 00                	push   0x0
c000e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06e:	e8 d0 a4 01 00       	call   c0028543 <__ltdf2>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	79 1e                	jns    c000e098 <zoh_vari_process+0x33a>
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e089:	e8 69 95 01 00       	call   c00275f7 <__adddf3>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 04 24             	mov    DWORD PTR [esp],eax
c000e094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e098:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09b:	83 ec 10             	sub    esp,0x10
c000e09e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ae:	e8 95 9b 01 00       	call   c0027c48 <__subdf3>
c000e0b3:	83 c4 18             	add    esp,0x18
c000e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0be:	52                   	push   edx
c000e0bf:	50                   	push   eax
c000e0c0:	e8 3b a6 01 00       	call   c0028700 <lrint>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	0f af e8             	imul   ebp,eax
c000e0cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ce:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e2:	0f 8d 7a 02 00 00    	jge    c000e362 <zoh_vari_process+0x604>
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 e4 a1 01 00       	call   c00282d7 <__floatsidf>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	e8 61 9b 01 00       	call   c0027c74 <__muldf3>
c000e113:	59                   	pop    ecx
c000e114:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e118:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e120:	e8 b2 a1 01 00       	call   c00282d7 <__floatsidf>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e130:	52                   	push   edx
c000e131:	50                   	push   eax
c000e132:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	e8 b8 94 01 00       	call   c00275f7 <__adddf3>
c000e13f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14a:	e8 88 a1 01 00       	call   c00282d7 <__floatsidf>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e156:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15a:	52                   	push   edx
c000e15b:	50                   	push   eax
c000e15c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e164:	e8 dc a3 01 00       	call   c0028545 <__ledf2>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	85 c0                	test   eax,eax
c000e16e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e172:	0f 8f ea 01 00 00    	jg     c000e362 <zoh_vari_process+0x604>
c000e178:	85 c9                	test   ecx,ecx
c000e17a:	0f 8e ed 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e180:	83 ec 10             	sub    esp,0x10
c000e183:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e186:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e189:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18c:	ff 37                	push   DWORD PTR [edi]
c000e18e:	e8 b5 9a 01 00       	call   c0027c48 <__subdf3>
c000e193:	83 c4 18             	add    esp,0x18
c000e196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e19e:	52                   	push   edx
c000e19f:	50                   	push   eax
c000e1a0:	e8 3b a5 01 00       	call   c00286e0 <fabs>
c000e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b5:	68 23 42 92 0c       	push   0xc924223
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	e8 5e a3 01 00       	call   c0028525 <__gtdf2>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	85 c0                	test   eax,eax
c000e1cc:	0f 8e 9b 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e7:	e8 5c 9a 01 00       	call   c0027c48 <__subdf3>
c000e1ec:	5d                   	pop    ebp
c000e1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f8:	e8 da a0 01 00       	call   c00282d7 <__floatsidf>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e208:	52                   	push   edx
c000e209:	50                   	push   eax
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	e8 5d 9a 01 00       	call   c0027c74 <__muldf3>
c000e217:	59                   	pop    ecx
c000e218:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e220:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e223:	e8 af a0 01 00       	call   c00282d7 <__floatsidf>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23d:	e8 16 9d 01 00       	call   c0027f58 <__divdf3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25d:	e8 95 93 01 00       	call   c00275f7 <__adddf3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26d:	31 d2                	xor    edx,edx
c000e26f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e272:	39 d0                	cmp    eax,edx
c000e274:	7e 1d                	jle    c000e293 <zoh_vari_process+0x535>
c000e276:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e279:	29 c1                	sub    ecx,eax
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e27f:	01 d0                	add    eax,edx
c000e281:	42                   	inc    edx
c000e282:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e285:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28b:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e28e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e291:	eb dc                	jmp    c000e26f <zoh_vari_process+0x511>
c000e293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e297:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29b:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a0:	6a 00                	push   0x0
c000e2a2:	e8 b1 9c 01 00       	call   c0027f58 <__divdf3>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 30 93 01 00       	call   c00275f7 <__adddf3>
c000e2c7:	5d                   	pop    ebp
c000e2c8:	59                   	pop    ecx
c000e2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d9:	e8 22 a4 01 00       	call   c0028700 <lrint>
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 f0 9f 01 00       	call   c00282d7 <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f2:	52                   	push   edx
c000e2f3:	50                   	push   eax
c000e2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fc:	e8 47 99 01 00       	call   c0027c48 <__subdf3>
c000e301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e305:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	6a 00                	push   0x0
c000e30e:	6a 00                	push   0x0
c000e310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e314:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e318:	e8 26 a2 01 00       	call   c0028543 <__ltdf2>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	79 1e                	jns    c000e342 <zoh_vari_process+0x5e4>
c000e324:	68 00 00 f0 3f       	push   0x3ff00000
c000e329:	6a 00                	push   0x0
c000e32b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e333:	e8 bf 92 01 00       	call   c00275f7 <__adddf3>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e33e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e342:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e345:	83 ec 10             	sub    esp,0x10
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	e8 eb 98 01 00       	call   c0027c48 <__subdf3>
c000e35d:	e9 51 fd ff ff       	jmp    c000e0b3 <zoh_vari_process+0x355>
c000e362:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e366:	7d 3a                	jge    c000e3a2 <zoh_vari_process+0x644>
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	29 e8                	sub    eax,ebp
c000e371:	99                   	cdq    
c000e372:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e375:	50                   	push   eax
c000e376:	e8 5c 9f 01 00       	call   c00282d7 <__floatsidf>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e386:	52                   	push   edx
c000e387:	50                   	push   eax
c000e388:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e390:	e8 62 92 01 00       	call   c00275f7 <__adddf3>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a9:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ac:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	7f 25                	jg     c000e3db <zoh_vari_process+0x67d>
c000e3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3be:	89 07                	mov    DWORD PTR [edi],eax
c000e3c0:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c6:	99                   	cdq    
c000e3c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d0:	99                   	cdq    
c000e3d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d4:	31 d2                	xor    edx,edx
c000e3d6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d9:	eb 1e                	jmp    c000e3f9 <zoh_vari_process+0x69b>
c000e3db:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3de:	31 d2                	xor    edx,edx
c000e3e0:	29 c8                	sub    eax,ecx
c000e3e2:	c1 e0 02             	shl    eax,0x2
c000e3e5:	39 d1                	cmp    ecx,edx
c000e3e7:	7e cd                	jle    c000e3b6 <zoh_vari_process+0x658>
c000e3e9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3eb:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ef:	83 c0 04             	add    eax,0x4
c000e3f2:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f6:	42                   	inc    edx
c000e3f7:	eb ec                	jmp    c000e3e5 <zoh_vari_process+0x687>
c000e3f9:	83 c4 3c             	add    esp,0x3c
c000e3fc:	89 d0                	mov    eax,edx
c000e3fe:	5b                   	pop    ebx
c000e3ff:	5e                   	pop    esi
c000e400:	5f                   	pop    edi
c000e401:	5d                   	pop    ebp
c000e402:	c3                   	ret    

c000e403 <zoh_reset>:
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40d:	85 c0                	test   eax,eax
c000e40f:	74 20                	je     c000e431 <zoh_reset+0x2e>
c000e411:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e414:	83 c0 1c             	add    eax,0x1c
c000e417:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e421:	c1 e2 02             	shl    edx,0x2
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	6a 00                	push   0x0
c000e428:	50                   	push   eax
c000e429:	e8 52 23 ff ff       	call   c0000780 <memset>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    

c000e435 <zoh_get_name>:
c000e435:	31 c0                	xor    eax,eax
c000e437:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43c:	75 05                	jne    c000e443 <zoh_get_name+0xe>
c000e43e:	b8 1e a0 02 c0       	mov    eax,0xc002a01e
c000e443:	c3                   	ret    

c000e444 <zoh_get_description>:
c000e444:	31 c0                	xor    eax,eax
c000e446:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44b:	75 05                	jne    c000e452 <zoh_get_description+0xe>
c000e44d:	b8 2f a0 02 c0       	mov    eax,0xc002a02f
c000e452:	c3                   	ret    

c000e453 <zoh_set_converter>:
c000e453:	53                   	push   ebx
c000e454:	b8 0a 00 00 00       	mov    eax,0xa
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e465:	75 6e                	jne    c000e4d5 <zoh_set_converter+0x82>
c000e467:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46a:	85 c0                	test   eax,eax
c000e46c:	74 13                	je     c000e481 <zoh_set_converter+0x2e>
c000e46e:	83 ec 0c             	sub    esp,0xc
c000e471:	50                   	push   eax
c000e472:	e8 e4 13 00 00       	call   c000f85b <free>
c000e477:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	50                   	push   eax
c000e482:	50                   	push   eax
c000e483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e486:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48d:	50                   	push   eax
c000e48e:	6a 01                	push   0x1
c000e490:	e8 e6 13 00 00       	call   c000f87b <calloc>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	89 c2                	mov    edx,eax
c000e49a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49d:	85 d2                	test   edx,edx
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	74 2f                	je     c000e4d5 <zoh_set_converter+0x82>
c000e4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4af:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b5:	c7 43 24 5e dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd5e
c000e4bc:	c7 43 20 5e dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd5e
c000e4c3:	c7 43 28 03 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e403
c000e4ca:	53                   	push   ebx
c000e4cb:	e8 33 ff ff ff       	call   c000e403 <zoh_reset>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	31 c0                	xor    eax,eax
c000e4d5:	83 c4 08             	add    esp,0x8
c000e4d8:	5b                   	pop    ebx
c000e4d9:	c3                   	ret    

c000e4da <CPU::current()>:
c000e4da:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000e4df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e5:	90                   	nop
c000e4e6:	c3                   	ret    

c000e4e7 <operator new(unsigned long)>:
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f1:	e8 55 13 00 00       	call   c000f84b <malloc>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	83 c4 0c             	add    esp,0xc
c000e4fc:	c3                   	ret    

c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	83 ec 08             	sub    esp,0x8
c000e503:	68 66 a0 02 c0       	push   0xc002a066
c000e508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50c:	e8 b7 23 ff ff       	call   c00008c8 <strcmp>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	0f 94 c0             	sete   al
c000e519:	84 c0                	test   al,al
c000e51b:	74 0a                	je     c000e527 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e51d:	b8 68 e5 02 c0       	mov    eax,0xc002e568
c000e522:	e9 e3 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e527:	83 ec 08             	sub    esp,0x8
c000e52a:	68 6f a0 02 c0       	push   0xc002a06f
c000e52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e533:	e8 90 23 ff ff       	call   c00008c8 <strcmp>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	85 c0                	test   eax,eax
c000e53d:	0f 94 c0             	sete   al
c000e540:	84 c0                	test   al,al
c000e542:	74 0a                	je     c000e54e <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e544:	b8 70 6a 02 c0       	mov    eax,0xc0026a70
c000e549:	e9 bc 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	68 79 a0 02 c0       	push   0xc002a079
c000e556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55a:	e8 69 23 ff ff       	call   c00008c8 <strcmp>
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	85 c0                	test   eax,eax
c000e564:	0f 94 c0             	sete   al
c000e567:	84 c0                	test   al,al
c000e569:	74 0a                	je     c000e575 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e56b:	b8 a4 67 02 c0       	mov    eax,0xc00267a4
c000e570:	e9 95 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e575:	83 ec 08             	sub    esp,0x8
c000e578:	68 82 a0 02 c0       	push   0xc002a082
c000e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e581:	e8 42 23 ff ff       	call   c00008c8 <strcmp>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	85 c0                	test   eax,eax
c000e58b:	0f 94 c0             	sete   al
c000e58e:	84 c0                	test   al,al
c000e590:	74 07                	je     c000e599 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e592:	b8 70 6b 02 c0       	mov    eax,0xc0026b70
c000e597:	eb 71                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e599:	83 ec 08             	sub    esp,0x8
c000e59c:	68 8c a0 02 c0       	push   0xc002a08c
c000e5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a5:	e8 1e 23 ff ff       	call   c00008c8 <strcmp>
c000e5aa:	83 c4 10             	add    esp,0x10
c000e5ad:	85 c0                	test   eax,eax
c000e5af:	0f 94 c0             	sete   al
c000e5b2:	84 c0                	test   al,al
c000e5b4:	74 07                	je     c000e5bd <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5b6:	b8 f0 68 02 c0       	mov    eax,0xc00268f0
c000e5bb:	eb 4d                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5bd:	83 ec 08             	sub    esp,0x8
c000e5c0:	68 95 a0 02 c0       	push   0xc002a095
c000e5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c9:	e8 fa 22 ff ff       	call   c00008c8 <strcmp>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	85 c0                	test   eax,eax
c000e5d3:	0f 94 c0             	sete   al
c000e5d6:	84 c0                	test   al,al
c000e5d8:	74 07                	je     c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5da:	b8 6c e5 02 c0       	mov    eax,0xc002e56c
c000e5df:	eb 29                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5e1:	83 ec 08             	sub    esp,0x8
c000e5e4:	68 a2 a0 02 c0       	push   0xc002a0a2
c000e5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ed:	e8 d6 22 ff ff       	call   c00008c8 <strcmp>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	85 c0                	test   eax,eax
c000e5f7:	0f 94 c0             	sete   al
c000e5fa:	84 c0                	test   al,al
c000e5fc:	74 07                	je     c000e605 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5fe:	b8 6d e5 02 c0       	mov    eax,0xc002e56d
c000e603:	eb 05                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e605:	b8 00 00 00 00       	mov    eax,0x0
c000e60a:	83 c4 0c             	add    esp,0xc
c000e60d:	c3                   	ret    

c000e60e <Computer::close(int, int, void*)>:
c000e60e:	57                   	push   edi
c000e60f:	56                   	push   esi
c000e610:	53                   	push   ebx
c000e611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e619:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e61d:	83 ec 0c             	sub    esp,0xc
c000e620:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e626:	e8 17 5e 00 00       	call   c0014442 <Device::closeAll()>
c000e62b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	8b 10                	mov    edx,DWORD PTR [eax]
c000e636:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e63a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e642:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e64a:	5b                   	pop    ebx
c000e64b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e64e:	5e                   	pop    esi
c000e64f:	5f                   	pop    edi
c000e650:	ff e0                	jmp    eax

c000e652 <Krnl::firstTask()>:
c000e652:	53                   	push   ebx
c000e653:	83 ec 14             	sub    esp,0x14
c000e656:	fb                   	sti    
c000e657:	68 3f 07 00 00       	push   0x73f
c000e65c:	e8 ea 11 00 00       	call   c000f84b <malloc>
c000e661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e668:	89 c3                	mov    ebx,eax
c000e66a:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c000e670:	68 af a0 02 c0       	push   0xc002a0af
c000e675:	6a 01                	push   0x1
c000e677:	50                   	push   eax
c000e678:	e8 11 f6 00 00       	call   c001dc8e <Process::Process(bool, char const*, Process*, char**)>
c000e67d:	83 c4 20             	add    esp,0x20
c000e680:	68 ff 00 00 00       	push   0xff
c000e685:	6a 00                	push   0x0
c000e687:	68 dd f1 00 c0       	push   0xc000f1dd
c000e68c:	53                   	push   ebx
c000e68d:	e8 fa f8 00 00       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c000e692:	6a 7a                	push   0x7a
c000e694:	6a 00                	push   0x0
c000e696:	68 24 e8 01 c0       	push   0xc001e824
c000e69b:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c000e6a1:	e8 e6 f8 00 00       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	a3 88 1a 03 c0       	mov    ds:0xc0031a88,eax
c000e6ae:	c6 05 6d e5 02 c0 01 	mov    BYTE PTR ds:0xc002e56d,0x1
c000e6b5:	e8 eb 04 01 00       	call   c001eba5 <Vm::initialise8086()>
c000e6ba:	e8 6b 4b 00 00       	call   c001322a <Fs::initVFS()>
c000e6bf:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000e6c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6cc:	6a 00                	push   0x0
c000e6ce:	6a 00                	push   0x0
c000e6d0:	6a 00                	push   0x0
c000e6d2:	50                   	push   eax
c000e6d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6d6:	e8 43 df 00 00       	call   c001c61e <Sys::loadSyscalls()>
c000e6db:	e8 66 be 00 00       	call   c001a546 <Krnl::loadSystemEnv()>
c000e6e0:	83 c4 0c             	add    esp,0xc
c000e6e3:	6a 3a                	push   0x3a
c000e6e5:	68 bc a0 02 c0       	push   0xc002a0bc
c000e6ea:	68 c5 a0 02 c0       	push   0xc002a0c5
c000e6ef:	e8 78 cb 00 00       	call   c001b26c <Reg::readIntWithDefault(char*, char*, int)>
c000e6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6f7:	e8 16 56 00 00       	call   c0013d12 <User::loadClockSettings(int)>
c000e6fc:	58                   	pop    eax
c000e6fd:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000e702:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e708:	e8 09 5d 00 00       	call   c0014416 <Device::loadDriversForAll()>
c000e70d:	e8 7a b9 00 00       	call   c001a08c <Krnl::startCPUs()>
c000e712:	5a                   	pop    edx
c000e713:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c000e719:	59                   	pop    ecx
c000e71a:	6a 01                	push   0x1
c000e71c:	68 cd a0 02 c0       	push   0xc002a0cd
c000e721:	e8 8c f0 00 00       	call   c001d7b2 <Thr::loadDLL(char const*, bool)>
c000e726:	5a                   	pop    edx
c000e727:	59                   	pop    ecx
c000e728:	53                   	push   ebx
c000e729:	50                   	push   eax
c000e72a:	e8 b7 f2 00 00       	call   c001d9e6 <Thr::executeDLL(unsigned long, void*)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	83 ec 0c             	sub    esp,0xc
c000e735:	6a 02                	push   0x2
c000e737:	e8 ee fb 00 00       	call   c001e32a <blockTask(TaskState)>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	eb f1                	jmp    c000e732 <Krnl::firstTask()+0xe0>
c000e741:	90                   	nop

c000e742 <Computer::Computer()>:
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	68 e9 a0 02 c0       	push   0xc002a0e9
c000e751:	50                   	push   eax
c000e752:	e8 65 5d 00 00       	call   c00144bc <Device::Device(char const*)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	ba 88 a2 02 c0       	mov    edx,0xc002a288
c000e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e763:	89 10                	mov    DWORD PTR [eax],edx
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e785:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e78b:	83 ca 04             	or     edx,0x4
c000e78e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79e:	0f b6 d0             	movzx  edx,al
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b6:	0f b6 d0             	movzx  edx,al
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7cc:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d9:	0f b6 d0             	movzx  edx,al
c000e7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e4:	83 e1 3f             	and    ecx,0x3f
c000e7e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f5:	0f b6 d0             	movzx  edx,al
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e807:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80d:	0f b6 d0             	movzx  edx,al
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e823:	8d 50 01             	lea    edx,[eax+0x1]
c000e826:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e82a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e830:	0f b6 d0             	movzx  edx,al
c000e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e837:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e83b:	83 e1 3f             	and    ecx,0x3f
c000e83e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e846:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84c:	0f b6 d0             	movzx  edx,al
c000e84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e853:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e864:	0f b6 d0             	movzx  edx,al
c000e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87a:	8d 50 01             	lea    edx,[eax+0x1]
c000e87d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e881:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e887:	0f b6 d0             	movzx  edx,al
c000e88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e892:	83 e1 3f             	and    ecx,0x3f
c000e895:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e899:	90                   	nop
c000e89a:	83 c4 0c             	add    esp,0xc
c000e89d:	c3                   	ret    

c000e89e <Computer::setBootMessage(char const*)>:
c000e89e:	c3                   	ret    
c000e89f:	90                   	nop

c000e8a0 <Computer::detectFeatures()>:
c000e8a0:	55                   	push   ebp
c000e8a1:	57                   	push   edi
c000e8a2:	56                   	push   esi
c000e8a3:	53                   	push   ebx
c000e8a4:	83 ec 1c             	sub    esp,0x1c
c000e8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ab:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b5:	e8 2a 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8ba:	85 c0                	test   eax,eax
c000e8bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c2:	0f 95 c2             	setne  dl
c000e8c5:	83 e0 fd             	and    eax,0xfffffffd
c000e8c8:	d1 e2                	shl    edx,1
c000e8ca:	09 d0                	or     eax,edx
c000e8cc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d2:	a8 02                	test   al,0x2
c000e8d4:	75 46                	jne    c000e91c <Computer::detectFeatures()+0x7c>
c000e8d6:	f6 05 81 e5 02 c0 04 	test   BYTE PTR ds:0xc002e581,0x4
c000e8dd:	74 07                	je     c000e8e6 <Computer::detectFeatures()+0x46>
c000e8df:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e6:	e8 4b 7e 01 00       	call   c0026736 <x87Detect>
c000e8eb:	83 e0 01             	and    eax,0x1
c000e8ee:	c1 e0 04             	shl    eax,0x4
c000e8f1:	88 c2                	mov    dl,al
c000e8f3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f9:	83 e0 ef             	and    eax,0xffffffef
c000e8fc:	09 d0                	or     eax,edx
c000e8fe:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e904:	a8 10                	test   al,0x10
c000e906:	0f 85 2a 01 00 00    	jne    c000ea36 <Computer::detectFeatures()+0x196>
c000e90c:	84 c0                	test   al,al
c000e90e:	0f 88 45 01 00 00    	js     c000ea59 <Computer::detectFeatures()+0x1b9>
c000e914:	83 c4 1c             	add    esp,0x1c
c000e917:	5b                   	pop    ebx
c000e918:	5e                   	pop    esi
c000e919:	5f                   	pop    edi
c000e91a:	5d                   	pop    ebp
c000e91b:	c3                   	ret    
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	6a 20                	push   0x20
c000e921:	e8 78 a4 00 00       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c000e926:	83 e0 01             	and    eax,0x1
c000e929:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e930:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e936:	83 e0 f7             	and    eax,0xfffffff7
c000e939:	09 d0                	or     eax,edx
c000e93b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e941:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e948:	e8 51 a4 00 00       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c000e94d:	83 e0 01             	and    eax,0x1
c000e950:	88 c2                	mov    dl,al
c000e952:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e958:	83 e0 fe             	and    eax,0xfffffffe
c000e95b:	09 d0                	or     eax,edx
c000e95d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e963:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e96a:	e8 2f a4 00 00       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c000e96f:	c1 e0 07             	shl    eax,0x7
c000e972:	88 c2                	mov    dl,al
c000e974:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e97a:	83 e0 7f             	and    eax,0x7f
c000e97d:	09 d0                	or     eax,edx
c000e97f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e985:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98c:	e8 0d a4 00 00       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	83 e0 01             	and    eax,0x1
c000e997:	c1 e0 05             	shl    eax,0x5
c000e99a:	88 c2                	mov    dl,al
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	83 e0 df             	and    eax,0xffffffdf
c000e9a5:	09 d0                	or     eax,edx
c000e9a7:	f7 05 80 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e580,0x401
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	0f 84 c2 00 00 00    	je     c000ea7f <Computer::detectFeatures()+0x1df>
c000e9bd:	83 e0 fe             	and    eax,0xfffffffe
c000e9c0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9cc:	88 c2                	mov    dl,al
c000e9ce:	83 e2 09             	and    edx,0x9
c000e9d1:	fe ca                	dec    dl
c000e9d3:	75 09                	jne    c000e9de <Computer::detectFeatures()+0x13e>
c000e9d5:	83 e0 fe             	and    eax,0xfffffffe
c000e9d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9de:	83 ec 0c             	sub    esp,0xc
c000e9e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e5:	50                   	push   eax
c000e9e6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9ea:	55                   	push   ebp
c000e9eb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ef:	57                   	push   edi
c000e9f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f4:	56                   	push   esi
c000e9f5:	68 00 00 00 80       	push   0x80000000
c000e9fa:	e8 1b a3 00 00       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9ff:	83 c4 20             	add    esp,0x20
c000ea02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0d:	0f 86 c3 fe ff ff    	jbe    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea13:	83 ec 0c             	sub    esp,0xc
c000ea16:	50                   	push   eax
c000ea17:	55                   	push   ebp
c000ea18:	57                   	push   edi
c000ea19:	56                   	push   esi
c000ea1a:	68 01 00 00 80       	push   0x80000001
c000ea1f:	e8 f6 a2 00 00       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea24:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2e:	83 c4 20             	add    esp,0x20
c000ea31:	e9 a0 fe ff ff       	jmp    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea36:	e8 b5 7c 01 00       	call   c00266f0 <absolutelyNoChanceInHell>
c000ea3b:	88 c2                	mov    dl,al
c000ea3d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea43:	c1 e2 07             	shl    edx,0x7
c000ea46:	83 e0 7f             	and    eax,0x7f
c000ea49:	09 d0                	or     eax,edx
c000ea4b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea51:	84 c0                	test   al,al
c000ea53:	0f 89 bb fe ff ff    	jns    c000e914 <Computer::detectFeatures()+0x74>
c000ea59:	e8 72 7c 01 00       	call   c00266d0 <avxDetect>
c000ea5e:	83 e0 01             	and    eax,0x1
c000ea61:	c1 e0 05             	shl    eax,0x5
c000ea64:	88 c2                	mov    dl,al
c000ea66:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6c:	83 e0 df             	and    eax,0xffffffdf
c000ea6f:	09 d0                	or     eax,edx
c000ea71:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea77:	83 c4 1c             	add    esp,0x1c
c000ea7a:	5b                   	pop    ebx
c000ea7b:	5e                   	pop    esi
c000ea7c:	5f                   	pop    edi
c000ea7d:	5d                   	pop    ebp
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	68 00 02 00 00       	push   0x200
c000ea87:	e8 12 a3 00 00       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	83 e0 01             	and    eax,0x1
c000ea92:	88 c2                	mov    dl,al
c000ea94:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9a:	83 e0 fe             	and    eax,0xfffffffe
c000ea9d:	09 d0                	or     eax,edx
c000ea9f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa5:	e9 1c ff ff ff       	jmp    c000e9c6 <Computer::detectFeatures()+0x126>

c000eaaa <Computer::displayFeatures()>:
c000eaaa:	53                   	push   ebx
c000eaab:	83 ec 14             	sub    esp,0x14
c000eaae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab2:	68 f9 a0 02 c0       	push   0xc002a0f9
c000eab7:	e8 e9 43 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac6:	0f 85 73 02 00 00    	jne    c000ed3f <Computer::displayFeatures()+0x295>
c000eacc:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	50                   	push   eax
c000ead5:	68 0c a1 02 c0       	push   0xc002a10c
c000eada:	e8 c6 43 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae9:	0f 85 8c 02 00 00    	jne    c000ed7b <Computer::displayFeatures()+0x2d1>
c000eaef:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	50                   	push   eax
c000eaf8:	68 1d a1 02 c0       	push   0xc002a11d
c000eafd:	e8 a3 43 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0c:	0f 85 5f 02 00 00    	jne    c000ed71 <Computer::displayFeatures()+0x2c7>
c000eb12:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb17:	83 ec 08             	sub    esp,0x8
c000eb1a:	50                   	push   eax
c000eb1b:	68 2e a1 02 c0       	push   0xc002a12e
c000eb20:	e8 80 43 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2f:	0f 85 32 02 00 00    	jne    c000ed67 <Computer::displayFeatures()+0x2bd>
c000eb35:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb3a:	83 ec 08             	sub    esp,0x8
c000eb3d:	50                   	push   eax
c000eb3e:	68 3f a1 02 c0       	push   0xc002a13f
c000eb43:	e8 5d 43 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb52:	0f 85 05 02 00 00    	jne    c000ed5d <Computer::displayFeatures()+0x2b3>
c000eb58:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb5d:	83 ec 08             	sub    esp,0x8
c000eb60:	50                   	push   eax
c000eb61:	68 50 a1 02 c0       	push   0xc002a150
c000eb66:	e8 3a 43 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb75:	0f 85 d8 01 00 00    	jne    c000ed53 <Computer::displayFeatures()+0x2a9>
c000eb7b:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb80:	83 ec 08             	sub    esp,0x8
c000eb83:	50                   	push   eax
c000eb84:	68 61 a1 02 c0       	push   0xc002a161
c000eb89:	e8 17 43 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb98:	0f 85 ab 01 00 00    	jne    c000ed49 <Computer::displayFeatures()+0x29f>
c000eb9e:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	50                   	push   eax
c000eba7:	68 72 a1 02 c0       	push   0xc002a172
c000ebac:	e8 f4 42 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebbb:	0f 88 1b 02 00 00    	js     c000eddc <Computer::displayFeatures()+0x332>
c000ebc1:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ebc6:	83 ec 08             	sub    esp,0x8
c000ebc9:	50                   	push   eax
c000ebca:	68 83 a1 02 c0       	push   0xc002a183
c000ebcf:	e8 d1 42 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebde:	0f 85 a1 01 00 00    	jne    c000ed85 <Computer::displayFeatures()+0x2db>
c000ebe4:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ebe9:	83 ec 08             	sub    esp,0x8
c000ebec:	50                   	push   eax
c000ebed:	68 94 a1 02 c0       	push   0xc002a194
c000ebf2:	e8 ae 42 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec01:	0f 85 cb 01 00 00    	jne    c000edd2 <Computer::displayFeatures()+0x328>
c000ec07:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec0c:	83 ec 08             	sub    esp,0x8
c000ec0f:	50                   	push   eax
c000ec10:	68 a5 a1 02 c0       	push   0xc002a1a5
c000ec15:	e8 8b 42 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec24:	0f 85 9e 01 00 00    	jne    c000edc8 <Computer::displayFeatures()+0x31e>
c000ec2a:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec2f:	83 ec 08             	sub    esp,0x8
c000ec32:	50                   	push   eax
c000ec33:	68 b6 a1 02 c0       	push   0xc002a1b6
c000ec38:	e8 68 42 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec47:	0f 85 71 01 00 00    	jne    c000edbe <Computer::displayFeatures()+0x314>
c000ec4d:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec52:	83 ec 08             	sub    esp,0x8
c000ec55:	50                   	push   eax
c000ec56:	68 c7 a1 02 c0       	push   0xc002a1c7
c000ec5b:	e8 45 42 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec6a:	0f 85 44 01 00 00    	jne    c000edb4 <Computer::displayFeatures()+0x30a>
c000ec70:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec75:	83 ec 08             	sub    esp,0x8
c000ec78:	50                   	push   eax
c000ec79:	68 d8 a1 02 c0       	push   0xc002a1d8
c000ec7e:	e8 22 42 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8d:	0f 85 17 01 00 00    	jne    c000edaa <Computer::displayFeatures()+0x300>
c000ec93:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec98:	83 ec 08             	sub    esp,0x8
c000ec9b:	50                   	push   eax
c000ec9c:	68 e9 a1 02 c0       	push   0xc002a1e9
c000eca1:	e8 ff 41 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecb0:	0f 85 ea 00 00 00    	jne    c000eda0 <Computer::displayFeatures()+0x2f6>
c000ecb6:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	50                   	push   eax
c000ecbf:	68 fa a1 02 c0       	push   0xc002a1fa
c000ecc4:	e8 dc 41 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd3:	0f 88 0d 01 00 00    	js     c000ede6 <Computer::displayFeatures()+0x33c>
c000ecd9:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ecde:	83 ec 08             	sub    esp,0x8
c000ece1:	50                   	push   eax
c000ece2:	68 0b a2 02 c0       	push   0xc002a20b
c000ece7:	e8 b9 41 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf6:	0f 85 9a 00 00 00    	jne    c000ed96 <Computer::displayFeatures()+0x2ec>
c000ecfc:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	68 1c a2 02 c0       	push   0xc002a21c
c000ed0a:	e8 96 41 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed19:	75 74                	jne    c000ed8f <Computer::displayFeatures()+0x2e5>
c000ed1b:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 2d a2 02 c0       	push   0xc002a22d
c000ed29:	e8 77 41 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ed2e:	c7 44 24 20 2c bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc2c
c000ed36:	83 c4 18             	add    esp,0x18
c000ed39:	5b                   	pop    ebx
c000ed3a:	e9 66 41 00 00       	jmp    c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ed3f:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed44:	e9 88 fd ff ff       	jmp    c000ead1 <Computer::displayFeatures()+0x27>
c000ed49:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed4e:	e9 50 fe ff ff       	jmp    c000eba3 <Computer::displayFeatures()+0xf9>
c000ed53:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed58:	e9 23 fe ff ff       	jmp    c000eb80 <Computer::displayFeatures()+0xd6>
c000ed5d:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed62:	e9 f6 fd ff ff       	jmp    c000eb5d <Computer::displayFeatures()+0xb3>
c000ed67:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed6c:	e9 c9 fd ff ff       	jmp    c000eb3a <Computer::displayFeatures()+0x90>
c000ed71:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed76:	e9 9c fd ff ff       	jmp    c000eb17 <Computer::displayFeatures()+0x6d>
c000ed7b:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed80:	e9 6f fd ff ff       	jmp    c000eaf4 <Computer::displayFeatures()+0x4a>
c000ed85:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed8a:	e9 5a fe ff ff       	jmp    c000ebe9 <Computer::displayFeatures()+0x13f>
c000ed8f:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed94:	eb 8a                	jmp    c000ed20 <Computer::displayFeatures()+0x276>
c000ed96:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed9b:	e9 61 ff ff ff       	jmp    c000ed01 <Computer::displayFeatures()+0x257>
c000eda0:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000eda5:	e9 11 ff ff ff       	jmp    c000ecbb <Computer::displayFeatures()+0x211>
c000edaa:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edaf:	e9 e4 fe ff ff       	jmp    c000ec98 <Computer::displayFeatures()+0x1ee>
c000edb4:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edb9:	e9 b7 fe ff ff       	jmp    c000ec75 <Computer::displayFeatures()+0x1cb>
c000edbe:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edc3:	e9 8a fe ff ff       	jmp    c000ec52 <Computer::displayFeatures()+0x1a8>
c000edc8:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edcd:	e9 5d fe ff ff       	jmp    c000ec2f <Computer::displayFeatures()+0x185>
c000edd2:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edd7:	e9 30 fe ff ff       	jmp    c000ec0c <Computer::displayFeatures()+0x162>
c000eddc:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ede1:	e9 e0 fd ff ff       	jmp    c000ebc6 <Computer::displayFeatures()+0x11c>
c000ede6:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edeb:	e9 ee fe ff ff       	jmp    c000ecde <Computer::displayFeatures()+0x234>

c000edf0 <Computer::rdmsr(unsigned int)>:
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfe:	74 0a                	je     c000ee0a <Computer::rdmsr(unsigned int)+0x1a>
c000ee00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee04:	0f 32                	rdmsr  
c000ee06:	83 c4 0c             	add    esp,0xc
c000ee09:	c3                   	ret    
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 3e a2 02 c0       	push   0xc002a23e
c000ee12:	e8 68 b8 00 00       	call   c001a67f <Krnl::panic(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	eb e4                	jmp    c000ee00 <Computer::rdmsr(unsigned int)+0x10>

c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1c:	57                   	push   edi
c000ee1d:	56                   	push   esi
c000ee1e:	52                   	push   edx
c000ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee32:	74 0e                	je     c000ee42 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee38:	89 f0                	mov    eax,esi
c000ee3a:	89 fa                	mov    edx,edi
c000ee3c:	0f 30                	wrmsr  
c000ee3e:	58                   	pop    eax
c000ee3f:	5e                   	pop    esi
c000ee40:	5f                   	pop    edi
c000ee41:	c3                   	ret    
c000ee42:	83 ec 0c             	sub    esp,0xc
c000ee45:	68 44 a2 02 c0       	push   0xc002a244
c000ee4a:	e8 30 b8 00 00       	call   c001a67f <Krnl::panic(char const*)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	eb e0                	jmp    c000ee34 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee54 <Computer::nmiEnabled()>:
c000ee54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5e:	c3                   	ret    
c000ee5f:	90                   	nop

c000ee60 <Computer::readCMOS(unsigned char)>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee6b:	19 c0                	sbb    eax,eax
c000ee6d:	83 e0 80             	and    eax,0xffffff80
c000ee70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee74:	e6 70                	out    0x70,al
c000ee76:	e4 71                	in     al,0x71
c000ee78:	c3                   	ret    
c000ee79:	90                   	nop

c000ee7a <Computer::enableNMI(bool)>:
c000ee7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee90:	eb ce                	jmp    c000ee60 <Computer::readCMOS(unsigned char)>

c000ee92 <Computer::open(int, int, void*)>:
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 10             	sub    esp,0x10
c000ee97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee9b:	f6 05 80 e5 02 c0 04 	test   BYTE PTR ds:0xc002e580,0x4
c000eea2:	68 68 12 00 00       	push   0x1268
c000eea7:	0f 94 05 a4 d4 02 c0 	sete   BYTE PTR ds:0xc002d4a4
c000eeae:	e8 98 09 00 00       	call   c000f84b <malloc>
c000eeb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb6:	89 c6                	mov    esi,eax
c000eeb8:	e8 b1 93 00 00       	call   c001826e <ACPI::ACPI()>
c000eebd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec3:	58                   	pop    eax
c000eec4:	5a                   	pop    edx
c000eec5:	56                   	push   esi
c000eec6:	53                   	push   ebx
c000eec7:	e8 00 54 00 00       	call   c00142cc <Device::addChild(Device*)>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 cc f9 ff ff       	call   c000e8a0 <Computer::detectFeatures()>
c000eed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed7:	e8 ce fb ff ff       	call   c000eaaa <Computer::displayFeatures()>
c000eedc:	59                   	pop    ecx
c000eedd:	5e                   	pop    esi
c000eede:	6a 01                	push   0x1
c000eee0:	53                   	push   ebx
c000eee1:	e8 94 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000eee6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeed:	e8 59 09 00 00       	call   c000f84b <malloc>
c000eef2:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef5:	89 c6                	mov    esi,eax
c000eef7:	e8 5a 9f 00 00       	call   c0018e56 <CPU::CPU()>
c000eefc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef02:	58                   	pop    eax
c000ef03:	5a                   	pop    edx
c000ef04:	56                   	push   esi
c000ef05:	53                   	push   ebx
c000ef06:	e8 c1 53 00 00       	call   c00142cc <Device::addChild(Device*)>
c000ef0b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef17:	6a 00                	push   0x0
c000ef19:	6a 00                	push   0x0
c000ef1b:	50                   	push   eax
c000ef1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1f:	83 c4 20             	add    esp,0x20
c000ef22:	e8 2b 59 00 00       	call   c0014852 <setupFPU()>
c000ef27:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2d:	85 c0                	test   eax,eax
c000ef2f:	74 1f                	je     c000ef50 <Computer::open(int, int, void*)+0xbe>
c000ef31:	83 ec 08             	sub    esp,0x8
c000ef34:	50                   	push   eax
c000ef35:	53                   	push   ebx
c000ef36:	e8 91 53 00 00       	call   c00142cc <Device::addChild(Device*)>
c000ef3b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef41:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	6a 00                	push   0x0
c000ef49:	50                   	push   eax
c000ef4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4d:	83 c4 20             	add    esp,0x20
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 52 e6 00 c0       	push   0xc000e652
c000ef58:	e8 51 f1 00 00       	call   c001e0ae <setupMultitasking(void (*)())>
c000ef5d:	83 c4 14             	add    esp,0x14
c000ef60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    

c000ef68 <Computer::disableNMI()>:
c000ef68:	6a 00                	push   0x0
c000ef6a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6e:	e8 07 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000ef73:	58                   	pop    eax
c000ef74:	5a                   	pop    edx
c000ef75:	c3                   	ret    

c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef7a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef81:	19 c0                	sbb    eax,eax
c000ef83:	83 e0 80             	and    eax,0xffffff80
c000ef86:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef8a:	e6 70                	out    0x70,al
c000ef8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef90:	e6 71                	out    0x71,al
c000ef92:	c3                   	ret    
c000ef93:	90                   	nop

c000ef94 <Computer::handleNMI()>:
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	83 ec 10             	sub    esp,0x10
c000ef99:	e4 92                	in     al,0x92
c000ef9b:	89 c6                	mov    esi,eax
c000ef9d:	e4 61                	in     al,0x61
c000ef9f:	68 4a a2 02 c0       	push   0xc002a24a
c000efa4:	88 c3                	mov    bl,al
c000efa6:	e8 fa 3e 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	83 e6 10             	and    esi,0x10
c000efb1:	75 0d                	jne    c000efc0 <Computer::handleNMI()+0x2c>
c000efb3:	f6 c3 40             	test   bl,0x40
c000efb6:	75 1d                	jne    c000efd5 <Computer::handleNMI()+0x41>
c000efb8:	84 db                	test   bl,bl
c000efba:	78 2d                	js     c000efe9 <Computer::handleNMI()+0x55>
c000efbc:	58                   	pop    eax
c000efbd:	5b                   	pop    ebx
c000efbe:	5e                   	pop    esi
c000efbf:	c3                   	ret    
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	68 5b a2 02 c0       	push   0xc002a25b
c000efc8:	e8 b2 b6 00 00       	call   c001a67f <Krnl::panic(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	f6 c3 40             	test   bl,0x40
c000efd3:	74 e3                	je     c000efb8 <Computer::handleNMI()+0x24>
c000efd5:	83 ec 0c             	sub    esp,0xc
c000efd8:	68 68 a2 02 c0       	push   0xc002a268
c000efdd:	e8 9d b6 00 00       	call   c001a67f <Krnl::panic(char const*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	84 db                	test   bl,bl
c000efe7:	79 d3                	jns    c000efbc <Computer::handleNMI()+0x28>
c000efe9:	c7 44 24 10 72 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a272
c000eff1:	5a                   	pop    edx
c000eff2:	5b                   	pop    ebx
c000eff3:	5e                   	pop    esi
c000eff4:	e9 86 b6 00 00       	jmp    c001a67f <Krnl::panic(char const*)>
c000eff9:	90                   	nop

c000effa <Computer::setDiskActivityLight(int, bool)>:
c000effa:	56                   	push   esi
c000effb:	53                   	push   ebx
c000effc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f000:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f005:	77 1b                	ja     c000f022 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f007:	e4 92                	in     al,0x92
c000f009:	bb 40 00 00 00       	mov    ebx,0x40
c000f00e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f012:	89 da                	mov    edx,ebx
c000f014:	d3 e2                	shl    edx,cl
c000f016:	89 f1                	mov    ecx,esi
c000f018:	f7 d2                	not    edx
c000f01a:	d3 e3                	shl    ebx,cl
c000f01c:	21 d0                	and    eax,edx
c000f01e:	09 d8                	or     eax,ebx
c000f020:	e6 92                	out    0x92,al
c000f022:	5b                   	pop    ebx
c000f023:	5e                   	pop    esi
c000f024:	c3                   	ret    
c000f025:	90                   	nop

c000f026 <GDTEntry::setBase(unsigned int)>:
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02e:	89 c1                	mov    ecx,eax
c000f030:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f034:	c1 e9 10             	shr    ecx,0x10
c000f037:	c1 e8 18             	shr    eax,0x18
c000f03a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <GDTEntry::setLimit(unsigned int)>:
c000f042:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f050:	83 e2 f0             	and    edx,0xfffffff0
c000f053:	c1 e8 10             	shr    eax,0x10
c000f056:	83 e0 0f             	and    eax,0xf
c000f059:	09 d0                	or     eax,edx
c000f05b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05e:	c3                   	ret    
c000f05f:	90                   	nop

c000f060 <GDT::GDT()>:
c000f060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f074:	90                   	nop
c000f075:	c3                   	ret    

c000f076 <GDT::addEntry(GDTEntry)>:
c000f076:	53                   	push   ebx
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f080:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f087:	52                   	push   edx
c000f088:	50                   	push   eax
c000f089:	68 ac a2 02 c0       	push   0xc002a2ac
c000f08e:	e8 12 3e 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000f093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f095:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f099:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0a1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a5:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a8:	c1 e0 03             	shl    eax,0x3
c000f0ab:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ad:	83 c4 18             	add    esp,0x18
c000f0b0:	5b                   	pop    ebx
c000f0b1:	c3                   	ret    

c000f0b2 <GDT::getNumberOfEntries()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b8:	c3                   	ret    
c000f0b9:	90                   	nop

c000f0ba <GDT::flush()>:
c000f0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0be:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0c0:	83 c0 04             	add    eax,0x4
c000f0c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0ca:	a3 72 e5 02 c0       	mov    ds:0xc002e572,eax
c000f0cf:	66 89 15 70 e5 02 c0 	mov    WORD PTR ds:0xc002e570,dx
c000f0d6:	e9 75 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0db:	90                   	nop

c000f0dc <GDT::setup()>:
c000f0dc:	55                   	push   ebp
c000f0dd:	57                   	push   edi
c000f0de:	56                   	push   esi
c000f0df:	53                   	push   ebx
c000f0e0:	83 ec 3c             	sub    esp,0x3c
c000f0e3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e7:	6a 00                	push   0x0
c000f0e9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 33 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f0f3:	6a 00                	push   0x0
c000f0f5:	53                   	push   ebx
c000f0f6:	e8 47 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f0fb:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f103:	6a 00                	push   0x0
c000f105:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f109:	53                   	push   ebx
c000f10a:	e8 17 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f10f:	68 ff ff ff 00       	push   0xffffff
c000f114:	53                   	push   ebx
c000f115:	e8 28 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f11a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f123:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f128:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12c:	83 c4 20             	add    esp,0x20
c000f12f:	6a 00                	push   0x0
c000f131:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f135:	53                   	push   ebx
c000f136:	e8 eb fe ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f13b:	68 ff ff ff 00       	push   0xffffff
c000f140:	53                   	push   ebx
c000f141:	e8 fc fe ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f146:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f14a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f156:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f15a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f164:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f168:	89 d8                	mov    eax,ebx
c000f16a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16e:	80 cc 60             	or     ah,0x60
c000f171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	89 f8                	mov    eax,edi
c000f17a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17e:	80 cc 60             	or     ah,0x60
c000f181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f185:	89 c7                	mov    edi,eax
c000f187:	55                   	push   ebp
c000f188:	e8 e9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f18d:	83 c4 0c             	add    esp,0xc
c000f190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f198:	55                   	push   ebp
c000f199:	e8 d8 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f19e:	83 c4 0c             	add    esp,0xc
c000f1a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a9:	55                   	push   ebp
c000f1aa:	e8 c7 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1af:	83 c4 0c             	add    esp,0xc
c000f1b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ba:	53                   	push   ebx
c000f1bb:	51                   	push   ecx
c000f1bc:	55                   	push   ebp
c000f1bd:	e8 b4 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	57                   	push   edi
c000f1c6:	56                   	push   esi
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 a9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1d0:	e8 e5 fe ff ff       	call   c000f0ba <GDT::flush()>
c000f1d5:	83 c4 4c             	add    esp,0x4c
c000f1d8:	5b                   	pop    ebx
c000f1d9:	5e                   	pop    esi
c000f1da:	5f                   	pop    edi
c000f1db:	5d                   	pop    ebp
c000f1dc:	c3                   	ret    

c000f1dd <idleFunction(void*)>:
c000f1dd:	53                   	push   ebx
c000f1de:	83 ec 08             	sub    esp,0x8
c000f1e1:	e8 76 ec 00 00       	call   c001de5c <unlockScheduler()>
c000f1e6:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000f1eb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1f1:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f8:	74 3c                	je     c000f236 <idleFunction(void*)+0x59>
c000f1fa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f201:	74 33                	je     c000f236 <idleFunction(void*)+0x59>
c000f203:	31 db                	xor    ebx,ebx
c000f205:	52                   	push   edx
c000f206:	52                   	push   edx
c000f207:	68 e1 00 00 00       	push   0xe1
c000f20c:	50                   	push   eax
c000f20d:	e8 de fb ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c000f212:	53                   	push   ebx
c000f213:	83 e0 02             	and    eax,0x2
c000f216:	50                   	push   eax
c000f217:	68 e1 00 00 00       	push   0xe1
c000f21c:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c000f222:	e8 f5 fb ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c000f227:	83 c4 20             	add    esp,0x20
c000f22a:	e8 50 10 ff ff       	call   c000027f <doTPAUSE>
c000f22f:	e8 4c 95 01 00       	call   c0028780 <idleCommon()>
c000f234:	eb f4                	jmp    c000f22a <idleFunction(void*)+0x4d>
c000f236:	fb                   	sti    
c000f237:	f4                   	hlt    
c000f238:	e8 43 95 01 00       	call   c0028780 <idleCommon()>
c000f23d:	eb f7                	jmp    c000f236 <idleFunction(void*)+0x59>
c000f23f:	90                   	nop

c000f240 <IDTEntry::IDTEntry(bool)>:
c000f240:	83 ec 04             	sub    esp,0x4
c000f243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f247:	88 04 24             	mov    BYTE PTR [esp],al
c000f24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f260:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f263:	83 e2 f0             	and    edx,0xfffffff0
c000f266:	83 ca 0e             	or     edx,0xe
c000f269:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f270:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f273:	83 e2 ef             	and    edx,0xffffffef
c000f276:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f279:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27d:	74 04                	je     c000f283 <IDTEntry::IDTEntry(bool)+0x43>
c000f27f:	b2 03                	mov    dl,0x3
c000f281:	eb 02                	jmp    c000f285 <IDTEntry::IDTEntry(bool)+0x45>
c000f283:	b2 00                	mov    dl,0x0
c000f285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f289:	83 e2 03             	and    edx,0x3
c000f28c:	88 d1                	mov    cl,dl
c000f28e:	c1 e1 05             	shl    ecx,0x5
c000f291:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f294:	83 e2 9f             	and    edx,0xffffff9f
c000f297:	09 ca                	or     edx,ecx
c000f299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a3:	83 ca 80             	or     edx,0xffffff80
c000f2a6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a9:	90                   	nop
c000f2aa:	83 c4 04             	add    esp,0x4
c000f2ad:	c3                   	ret    

c000f2ae <IDTEntry::setOffset(unsigned int)>:
c000f2ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b9:	c1 e8 10             	shr    eax,0x10
c000f2bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2c0:	c3                   	ret    
c000f2c1:	90                   	nop

c000f2c2 <IDT::IDT()>:
c000f2c2:	90                   	nop
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c8:	83 c0 30             	add    eax,0x30
c000f2cb:	c3                   	ret    

c000f2cc <IDT::addEntry(IDTEntry, int)>:
c000f2cc:	53                   	push   ebx
c000f2cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2dd:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2e0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e4:	5b                   	pop    ebx
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	83 ec 10             	sub    esp,0x10
c000f2ea:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ef:	50                   	push   eax
c000f2f0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f4:	53                   	push   ebx
c000f2f5:	e8 46 ff ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f2fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fe:	53                   	push   ebx
c000f2ff:	e8 aa ff ff ff       	call   c000f2ae <IDTEntry::setOffset(unsigned int)>
c000f304:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f314:	e8 b3 ff ff ff       	call   c000f2cc <IDT::addEntry(IDTEntry, int)>
c000f319:	83 c4 30             	add    esp,0x30
c000f31c:	5b                   	pop    ebx
c000f31d:	c3                   	ret    

c000f31e <IDT::flush()>:
c000f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f322:	66 c7 05 78 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e578,0x7ff
c000f32b:	a3 7a e5 02 c0       	mov    ds:0xc002e57a,eax
c000f330:	0f 01 1d 78 e5 02 c0 	lidtd  ds:0xc002e578
c000f337:	c3                   	ret    

c000f338 <IDT::setup()>:
c000f338:	57                   	push   edi
c000f339:	56                   	push   esi
c000f33a:	53                   	push   ebx
c000f33b:	83 ec 10             	sub    esp,0x10
c000f33e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f342:	6a 00                	push   0x0
c000f344:	68 70 04 00 c0       	push   0xc0000470
c000f349:	6a 00                	push   0x0
c000f34b:	53                   	push   ebx
c000f34c:	e8 95 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f351:	6a 00                	push   0x0
c000f353:	68 80 04 00 c0       	push   0xc0000480
c000f358:	6a 01                	push   0x1
c000f35a:	53                   	push   ebx
c000f35b:	e8 86 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	83 c4 20             	add    esp,0x20
c000f363:	6a 00                	push   0x0
c000f365:	68 8a 04 00 c0       	push   0xc000048a
c000f36a:	6a 02                	push   0x2
c000f36c:	53                   	push   ebx
c000f36d:	e8 74 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f372:	6a 00                	push   0x0
c000f374:	68 94 04 00 c0       	push   0xc0000494
c000f379:	6a 03                	push   0x3
c000f37b:	53                   	push   ebx
c000f37c:	e8 65 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f381:	83 c4 20             	add    esp,0x20
c000f384:	6a 00                	push   0x0
c000f386:	68 9e 04 00 c0       	push   0xc000049e
c000f38b:	6a 04                	push   0x4
c000f38d:	53                   	push   ebx
c000f38e:	e8 53 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f393:	6a 00                	push   0x0
c000f395:	68 a8 04 00 c0       	push   0xc00004a8
c000f39a:	6a 05                	push   0x5
c000f39c:	53                   	push   ebx
c000f39d:	e8 44 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3a2:	83 c4 20             	add    esp,0x20
c000f3a5:	6a 00                	push   0x0
c000f3a7:	68 b2 04 00 c0       	push   0xc00004b2
c000f3ac:	6a 06                	push   0x6
c000f3ae:	53                   	push   ebx
c000f3af:	e8 32 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 bc 04 00 c0       	push   0xc00004bc
c000f3bb:	6a 07                	push   0x7
c000f3bd:	53                   	push   ebx
c000f3be:	e8 23 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	83 c4 20             	add    esp,0x20
c000f3c6:	6a 00                	push   0x0
c000f3c8:	68 c6 04 00 c0       	push   0xc00004c6
c000f3cd:	6a 08                	push   0x8
c000f3cf:	53                   	push   ebx
c000f3d0:	e8 11 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 ce 04 00 c0       	push   0xc00004ce
c000f3dc:	6a 09                	push   0x9
c000f3de:	53                   	push   ebx
c000f3df:	e8 02 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	83 c4 20             	add    esp,0x20
c000f3e7:	6a 00                	push   0x0
c000f3e9:	68 d8 04 00 c0       	push   0xc00004d8
c000f3ee:	6a 0a                	push   0xa
c000f3f0:	53                   	push   ebx
c000f3f1:	e8 f0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 e0 04 00 c0       	push   0xc00004e0
c000f3fd:	6a 0b                	push   0xb
c000f3ff:	53                   	push   ebx
c000f400:	e8 e1 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	83 c4 20             	add    esp,0x20
c000f408:	6a 00                	push   0x0
c000f40a:	68 e8 04 00 c0       	push   0xc00004e8
c000f40f:	6a 0c                	push   0xc
c000f411:	53                   	push   ebx
c000f412:	e8 cf fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f417:	6a 00                	push   0x0
c000f419:	68 f0 04 00 c0       	push   0xc00004f0
c000f41e:	6a 0d                	push   0xd
c000f420:	53                   	push   ebx
c000f421:	e8 c0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	83 c4 20             	add    esp,0x20
c000f429:	6a 00                	push   0x0
c000f42b:	68 f8 04 00 c0       	push   0xc00004f8
c000f430:	6a 0e                	push   0xe
c000f432:	53                   	push   ebx
c000f433:	e8 ae fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f438:	6a 00                	push   0x0
c000f43a:	68 00 05 00 c0       	push   0xc0000500
c000f43f:	6a 0f                	push   0xf
c000f441:	53                   	push   ebx
c000f442:	e8 9f fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	83 c4 20             	add    esp,0x20
c000f44a:	6a 00                	push   0x0
c000f44c:	68 0a 05 00 c0       	push   0xc000050a
c000f451:	6a 10                	push   0x10
c000f453:	53                   	push   ebx
c000f454:	e8 8d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f459:	6a 00                	push   0x0
c000f45b:	68 14 05 00 c0       	push   0xc0000514
c000f460:	6a 11                	push   0x11
c000f462:	53                   	push   ebx
c000f463:	e8 7e fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	83 c4 20             	add    esp,0x20
c000f46b:	6a 00                	push   0x0
c000f46d:	68 1e 05 00 c0       	push   0xc000051e
c000f472:	6a 12                	push   0x12
c000f474:	53                   	push   ebx
c000f475:	e8 6c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f47a:	6a 01                	push   0x1
c000f47c:	68 b8 05 00 c0       	push   0xc00005b8
c000f481:	6a 60                	push   0x60
c000f483:	53                   	push   ebx
c000f484:	e8 5d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	83 c4 20             	add    esp,0x20
c000f48c:	6a 00                	push   0x0
c000f48e:	68 bf 05 00 c0       	push   0xc00005bf
c000f493:	6a 20                	push   0x20
c000f495:	53                   	push   ebx
c000f496:	e8 4b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f49b:	6a 00                	push   0x0
c000f49d:	68 aa 05 00 c0       	push   0xc00005aa
c000f4a2:	6a 21                	push   0x21
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 3c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	83 c4 20             	add    esp,0x20
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 b1 05 00 c0       	push   0xc00005b1
c000f4b4:	6a 22                	push   0x22
c000f4b6:	53                   	push   ebx
c000f4b7:	e8 2a fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 28 05 00 c0       	push   0xc0000528
c000f4c3:	6a 23                	push   0x23
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 1b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	83 c4 20             	add    esp,0x20
c000f4ce:	6a 00                	push   0x0
c000f4d0:	68 32 05 00 c0       	push   0xc0000532
c000f4d5:	6a 24                	push   0x24
c000f4d7:	53                   	push   ebx
c000f4d8:	e8 09 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 3c 05 00 c0       	push   0xc000053c
c000f4e4:	6a 25                	push   0x25
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 fa fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	83 c4 20             	add    esp,0x20
c000f4ef:	6a 00                	push   0x0
c000f4f1:	68 46 05 00 c0       	push   0xc0000546
c000f4f6:	6a 26                	push   0x26
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 e8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4fe:	6a 00                	push   0x0
c000f500:	68 50 05 00 c0       	push   0xc0000550
c000f505:	6a 27                	push   0x27
c000f507:	53                   	push   ebx
c000f508:	e8 d9 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	83 c4 20             	add    esp,0x20
c000f510:	6a 00                	push   0x0
c000f512:	68 5a 05 00 c0       	push   0xc000055a
c000f517:	6a 28                	push   0x28
c000f519:	53                   	push   ebx
c000f51a:	e8 c7 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f51f:	6a 00                	push   0x0
c000f521:	68 64 05 00 c0       	push   0xc0000564
c000f526:	6a 29                	push   0x29
c000f528:	53                   	push   ebx
c000f529:	e8 b8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	83 c4 20             	add    esp,0x20
c000f531:	6a 00                	push   0x0
c000f533:	68 6e 05 00 c0       	push   0xc000056e
c000f538:	6a 2a                	push   0x2a
c000f53a:	53                   	push   ebx
c000f53b:	e8 a6 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f540:	6a 00                	push   0x0
c000f542:	68 78 05 00 c0       	push   0xc0000578
c000f547:	6a 2b                	push   0x2b
c000f549:	53                   	push   ebx
c000f54a:	e8 97 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	83 c4 20             	add    esp,0x20
c000f552:	6a 00                	push   0x0
c000f554:	68 82 05 00 c0       	push   0xc0000582
c000f559:	6a 2c                	push   0x2c
c000f55b:	53                   	push   ebx
c000f55c:	e8 85 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f561:	6a 00                	push   0x0
c000f563:	68 8c 05 00 c0       	push   0xc000058c
c000f568:	6a 2d                	push   0x2d
c000f56a:	53                   	push   ebx
c000f56b:	e8 76 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	83 c4 20             	add    esp,0x20
c000f573:	6a 00                	push   0x0
c000f575:	68 96 05 00 c0       	push   0xc0000596
c000f57a:	6a 2e                	push   0x2e
c000f57c:	53                   	push   ebx
c000f57d:	e8 64 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f582:	6a 00                	push   0x0
c000f584:	68 a0 05 00 c0       	push   0xc00005a0
c000f589:	6a 2f                	push   0x2f
c000f58b:	53                   	push   ebx
c000f58c:	e8 55 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	83 c4 20             	add    esp,0x20
c000f594:	6a 00                	push   0x0
c000f596:	68 f5 05 00 c0       	push   0xc00005f5
c000f59b:	6a 30                	push   0x30
c000f59d:	53                   	push   ebx
c000f59e:	e8 43 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 ff 05 00 c0       	push   0xc00005ff
c000f5aa:	6a 31                	push   0x31
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 34 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	83 c4 20             	add    esp,0x20
c000f5b5:	6a 00                	push   0x0
c000f5b7:	68 09 06 00 c0       	push   0xc0000609
c000f5bc:	6a 32                	push   0x32
c000f5be:	53                   	push   ebx
c000f5bf:	e8 22 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 13 06 00 c0       	push   0xc0000613
c000f5cb:	6a 33                	push   0x33
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 13 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	83 c4 20             	add    esp,0x20
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 1d 06 00 c0       	push   0xc000061d
c000f5dd:	6a 34                	push   0x34
c000f5df:	53                   	push   ebx
c000f5e0:	e8 01 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 27 06 00 c0       	push   0xc0000627
c000f5ec:	6a 35                	push   0x35
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 f2 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	83 c4 20             	add    esp,0x20
c000f5f7:	6a 00                	push   0x0
c000f5f9:	68 31 06 00 c0       	push   0xc0000631
c000f5fe:	6a 36                	push   0x36
c000f600:	53                   	push   ebx
c000f601:	e8 e0 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f606:	6a 00                	push   0x0
c000f608:	68 3b 06 00 c0       	push   0xc000063b
c000f60d:	6a 37                	push   0x37
c000f60f:	53                   	push   ebx
c000f610:	e8 d1 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f615:	83 c4 20             	add    esp,0x20
c000f618:	e8 c9 27 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f61d:	52                   	push   edx
c000f61e:	6a 03                	push   0x3
c000f620:	6a 02                	push   0x2
c000f622:	50                   	push   eax
c000f623:	e8 10 2e 00 00       	call   c0012438 <VAS::allocatePages(int, int)>
c000f628:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62f:	89 c6                	mov    esi,eax
c000f631:	e8 15 02 00 00       	call   c000f84b <malloc>
c000f636:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63f:	89 c7                	mov    edi,eax
c000f641:	e8 36 1e 00 00       	call   c001147c <TSS::TSS()>
c000f646:	83 c4 0c             	add    esp,0xc
c000f649:	68 c6 04 00 c0       	push   0xc00004c6
c000f64e:	56                   	push   esi
c000f64f:	57                   	push   edi
c000f650:	e8 67 1e 00 00       	call   c00114bc <TSS::setup(unsigned long, unsigned long)>
c000f655:	59                   	pop    ecx
c000f656:	89 c6                	mov    esi,eax
c000f658:	5f                   	pop    edi
c000f659:	6a 00                	push   0x0
c000f65b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65f:	50                   	push   eax
c000f660:	e8 db fb ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f665:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f669:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f675:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f67b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67f:	80 ce 05             	or     dh,0x5
c000f682:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f685:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f693:	e8 86 fc ff ff       	call   c000f31e <IDT::flush()>
c000f698:	83 c4 20             	add    esp,0x20
c000f69b:	5b                   	pop    ebx
c000f69c:	5e                   	pop    esi
c000f69d:	5f                   	pop    edi
c000f69e:	c3                   	ret    

c000f69f <sbrk>:
c000f69f:	55                   	push   ebp
c000f6a0:	57                   	push   edi
c000f6a1:	56                   	push   esi
c000f6a2:	53                   	push   ebx
c000f6a3:	83 ec 1c             	sub    esp,0x1c
c000f6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	74 3e                	je     c000f6ec <sbrk+0x4d>
c000f6ae:	78 43                	js     c000f6f3 <sbrk+0x54>
c000f6b0:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c000f6b6:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6bc:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c2:	83 e2 01             	and    edx,0x1
c000f6c5:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c9:	8b 0d 80 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d480
c000f6cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d3:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d8:	89 c2                	mov    edx,eax
c000f6da:	78 2f                	js     c000f70b <sbrk+0x6c>
c000f6dc:	c1 fa 0c             	sar    edx,0xc
c000f6df:	89 d7                	mov    edi,edx
c000f6e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e5:	be 00 00 00 00       	mov    esi,0x0
c000f6ea:	eb 36                	jmp    c000f722 <sbrk+0x83>
c000f6ec:	a1 80 d4 02 c0       	mov    eax,ds:0xc002d480
c000f6f1:	eb 74                	jmp    c000f767 <sbrk+0xc8>
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	50                   	push   eax
c000f6f7:	68 c8 a2 02 c0       	push   0xc002a2c8
c000f6fc:	e8 a4 37 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f709:	eb 5c                	jmp    c000f767 <sbrk+0xc8>
c000f70b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f711:	eb c9                	jmp    c000f6dc <sbrk+0x3d>
c000f713:	81 05 80 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d480,0x1000
c000f71d:	46                   	inc    esi
c000f71e:	39 f7                	cmp    edi,esi
c000f720:	74 34                	je     c000f756 <sbrk+0xb7>
c000f722:	e8 bf 26 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f727:	89 c3                	mov    ebx,eax
c000f729:	8b 2d 80 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d480
c000f72f:	e8 b9 07 00 00       	call   c000feed <Phys::allocatePage()>
c000f734:	68 01 0c 00 00       	push   0xc01
c000f739:	55                   	push   ebp
c000f73a:	50                   	push   eax
c000f73b:	53                   	push   ebx
c000f73c:	e8 f7 2b 00 00       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f749:	74 c8                	je     c000f713 <sbrk+0x74>
c000f74b:	8b 1d 80 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d480
c000f751:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f754:	eb bd                	jmp    c000f713 <sbrk+0x74>
c000f756:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f75b:	75 12                	jne    c000f76f <sbrk+0xd0>
c000f75d:	0f 20 d8             	mov    eax,cr3
c000f760:	0f 22 d8             	mov    cr3,eax
c000f763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f767:	83 c4 1c             	add    esp,0x1c
c000f76a:	5b                   	pop    ebx
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	5d                   	pop    ebp
c000f76e:	c3                   	ret    
c000f76f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f773:	89 cb                	mov    ebx,ecx
c000f775:	c1 eb 0a             	shr    ebx,0xa
c000f778:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f788:	c1 e0 0c             	shl    eax,0xc
c000f78b:	01 c8                	add    eax,ecx
c000f78d:	c1 e8 0a             	shr    eax,0xa
c000f790:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f795:	2d 00 00 40 00       	sub    eax,0x400000
c000f79a:	39 c3                	cmp    ebx,eax
c000f79c:	77 c5                	ja     c000f763 <sbrk+0xc4>
c000f79e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a7:	39 d8                	cmp    eax,ebx
c000f7a9:	73 f3                	jae    c000f79e <sbrk+0xff>
c000f7ab:	eb b6                	jmp    c000f763 <sbrk+0xc4>

c000f7ad <mmap>:
c000f7ad:	83 ec 18             	sub    esp,0x18
c000f7b0:	68 f8 a2 02 c0       	push   0xc002a2f8
c000f7b5:	e8 c5 ae 00 00       	call   c001a67f <Krnl::panic(char const*)>
c000f7ba:	b8 00 00 00 00       	mov    eax,0x0
c000f7bf:	83 c4 1c             	add    esp,0x1c
c000f7c2:	c3                   	ret    

c000f7c3 <munmap>:
c000f7c3:	83 ec 18             	sub    esp,0x18
c000f7c6:	68 fd a2 02 c0       	push   0xc002a2fd
c000f7cb:	e8 af ae 00 00       	call   c001a67f <Krnl::panic(char const*)>
c000f7d0:	b8 00 00 00 00       	mov    eax,0x0
c000f7d5:	83 c4 1c             	add    esp,0x1c
c000f7d8:	c3                   	ret    

c000f7d9 <liballoc_lock()>:
c000f7d9:	83 ec 0c             	sub    esp,0xc
c000f7dc:	e8 79 e6 00 00       	call   c001de5a <lockScheduler()>
c000f7e1:	b8 00 00 00 00       	mov    eax,0x0
c000f7e6:	83 c4 0c             	add    esp,0xc
c000f7e9:	c3                   	ret    

c000f7ea <liballoc_unlock()>:
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	e8 6a e6 00 00       	call   c001de5c <unlockScheduler()>
c000f7f2:	b8 00 00 00 00       	mov    eax,0x0
c000f7f7:	83 c4 0c             	add    esp,0xc
c000f7fa:	c3                   	ret    

c000f7fb <liballoc_alloc(int)>:
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	e8 e3 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f803:	83 ec 04             	sub    esp,0x4
c000f806:	68 01 08 00 00       	push   0x801
c000f80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80f:	50                   	push   eax
c000f810:	e8 23 2c 00 00       	call   c0012438 <VAS::allocatePages(int, int)>
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    

c000f819 <liballoc_free(void*, int)>:
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	e8 c5 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f821:	83 ec 08             	sub    esp,0x8
c000f824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f828:	50                   	push   eax
c000f829:	e8 c6 28 00 00       	call   c00120f4 <VAS::freeAllocatedPages(unsigned long)>
c000f82e:	b8 00 00 00 00       	mov    eax,0x0
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    

c000f837 <realloc>:
c000f837:	83 ec 14             	sub    esp,0x14
c000f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 15 1e ff ff       	call   c000165c <dlrealloc>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <malloc>:
c000f84b:	83 ec 18             	sub    esp,0x18
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 c8 18 ff ff       	call   c000111f <dlmalloc>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    

c000f85b <free>:
c000f85b:	83 ec 18             	sub    esp,0x18
c000f85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f862:	e8 5d 15 ff ff       	call   c0000dc4 <dlfree>
c000f867:	83 c4 1c             	add    esp,0x1c
c000f86a:	c3                   	ret    

c000f86b <rfree>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f872:	e8 4d 15 ff ff       	call   c0000dc4 <dlfree>
c000f877:	83 c4 1c             	add    esp,0x1c
c000f87a:	c3                   	ret    

c000f87b <calloc>:
c000f87b:	56                   	push   esi
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f884:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f889:	53                   	push   ebx
c000f88a:	e8 bc ff ff ff       	call   c000f84b <malloc>
c000f88f:	89 c6                	mov    esi,eax
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	53                   	push   ebx
c000f895:	6a 00                	push   0x0
c000f897:	50                   	push   eax
c000f898:	e8 e3 0e ff ff       	call   c0000780 <memset>
c000f89d:	89 f0                	mov    eax,esi
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	5b                   	pop    ebx
c000f8a3:	5e                   	pop    esi
c000f8a4:	c3                   	ret    

c000f8a5 <hwTextMode_loadInData(VgaText*)>:
c000f8a5:	55                   	push   ebp
c000f8a6:	a1 a0 d4 02 c0       	mov    eax,ds:0xc002d4a0
c000f8ab:	57                   	push   edi
c000f8ac:	56                   	push   esi
c000f8ad:	53                   	push   ebx
c000f8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8b2:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b8:	85 d2                	test   edx,edx
c000f8ba:	7e 2f                	jle    c000f8eb <hwTextMode_loadInData(VgaText*)+0x46>
c000f8bc:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8c2:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8c5:	31 f6                	xor    esi,esi
c000f8c7:	29 fd                	sub    ebp,edi
c000f8c9:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8cc:	31 c0                	xor    eax,eax
c000f8ce:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8d2:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d6:	40                   	inc    eax
c000f8d7:	83 f8 50             	cmp    eax,0x50
c000f8da:	75 f2                	jne    c000f8ce <hwTextMode_loadInData(VgaText*)+0x29>
c000f8dc:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8e2:	46                   	inc    esi
c000f8e3:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e9:	7f de                	jg     c000f8c9 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8eb:	5b                   	pop    ebx
c000f8ec:	5e                   	pop    esi
c000f8ed:	5f                   	pop    edi
c000f8ee:	5d                   	pop    ebp
c000f8ef:	c3                   	ret    

c000f8f0 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8f0:	55                   	push   ebp
c000f8f1:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000f8f8:	57                   	push   edi
c000f8f9:	56                   	push   esi
c000f8fa:	53                   	push   ebx
c000f8fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8ff:	75 50                	jne    c000f951 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f901:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f907:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f90d:	8b 15 a0 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4a0
c000f913:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f917:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f91d:	eb 0e                	jmp    c000f92d <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f91f:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f925:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f92b:	89 da                	mov    edx,ebx
c000f92d:	83 e5 0f             	and    ebp,0xf
c000f930:	c1 e0 04             	shl    eax,0x4
c000f933:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f936:	0f b6 c0             	movzx  eax,al
c000f939:	41                   	inc    ecx
c000f93a:	09 e8                	or     eax,ebp
c000f93c:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f940:	c1 e0 08             	shl    eax,0x8
c000f943:	09 e8                	or     eax,ebp
c000f945:	39 fb                	cmp    ebx,edi
c000f947:	66 89 02             	mov    WORD PTR [edx],ax
c000f94a:	75 d3                	jne    c000f91f <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f94c:	5b                   	pop    ebx
c000f94d:	5e                   	pop    esi
c000f94e:	5f                   	pop    edi
c000f94f:	5d                   	pop    ebp
c000f950:	c3                   	ret    
c000f951:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f95b:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f965:	31 c0                	xor    eax,eax
c000f967:	bd 02 00 00 00       	mov    ebp,0x2
c000f96c:	eb 9f                	jmp    c000f90d <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f96e <hwTextMode_showCursor(VgaText*, bool)>:
c000f96e:	56                   	push   esi
c000f96f:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000f976:	53                   	push   ebx
c000f977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97b:	75 39                	jne    c000f9b6 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f97d:	84 c0                	test   al,al
c000f97f:	74 38                	je     c000f9b9 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f981:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f986:	b0 0a                	mov    al,0xa
c000f988:	89 da                	mov    edx,ebx
c000f98a:	ee                   	out    dx,al
c000f98b:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f990:	89 ca                	mov    edx,ecx
c000f992:	ec                   	in     al,dx
c000f993:	b2 0f                	mov    dl,0xf
c000f995:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f999:	83 e0 c0             	and    eax,0xffffffc0
c000f99c:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f9a2:	09 d0                	or     eax,edx
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ee                   	out    dx,al
c000f9a7:	b0 0b                	mov    al,0xb
c000f9a9:	89 da                	mov    edx,ebx
c000f9ab:	ee                   	out    dx,al
c000f9ac:	89 ca                	mov    edx,ecx
c000f9ae:	ec                   	in     al,dx
c000f9af:	83 e0 e0             	and    eax,0xffffffe0
c000f9b2:	83 c8 0f             	or     eax,0xf
c000f9b5:	ee                   	out    dx,al
c000f9b6:	5b                   	pop    ebx
c000f9b7:	5e                   	pop    esi
c000f9b8:	c3                   	ret    
c000f9b9:	b0 0a                	mov    al,0xa
c000f9bb:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9c0:	ee                   	out    dx,al
c000f9c1:	b0 20                	mov    al,0x20
c000f9c3:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c8:	ee                   	out    dx,al
c000f9c9:	5b                   	pop    ebx
c000f9ca:	5e                   	pop    esi
c000f9cb:	c3                   	ret    

c000f9cc <hwTextMode_update(VgaText*)>:
c000f9cc:	c3                   	ret    

c000f9cd <hwTextMode_updateCursor(VgaText*)>:
c000f9cd:	56                   	push   esi
c000f9ce:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000f9d5:	53                   	push   ebx
c000f9d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9da:	75 3f                	jne    c000fa1b <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9dc:	be d4 03 00 00       	mov    esi,0x3d4
c000f9e1:	b9 19 00 00 00       	mov    ecx,0x19
c000f9e6:	89 f2                	mov    edx,esi
c000f9e8:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9ee:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9f4:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9f7:	c1 e1 04             	shl    ecx,0x4
c000f9fa:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000fa00:	b0 0f                	mov    al,0xf
c000fa02:	ee                   	out    dx,al
c000fa03:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa08:	88 c8                	mov    al,cl
c000fa0a:	89 da                	mov    edx,ebx
c000fa0c:	ee                   	out    dx,al
c000fa0d:	b0 0e                	mov    al,0xe
c000fa0f:	89 f2                	mov    edx,esi
c000fa11:	ee                   	out    dx,al
c000fa12:	89 c8                	mov    eax,ecx
c000fa14:	89 da                	mov    edx,ebx
c000fa16:	66 c1 e8 08          	shr    ax,0x8
c000fa1a:	ee                   	out    dx,al
c000fa1b:	5b                   	pop    ebx
c000fa1c:	5e                   	pop    esi
c000fa1d:	c3                   	ret    

c000fa1e <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa22:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000fa29:	75 38                	jne    c000fa63 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa2b:	ba da 03 00 00       	mov    edx,0x3da
c000fa30:	84 c0                	test   al,al
c000fa32:	75 18                	jne    c000fa4c <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa34:	ec                   	in     al,dx
c000fa35:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa3a:	b0 30                	mov    al,0x30
c000fa3c:	89 ca                	mov    edx,ecx
c000fa3e:	ee                   	out    dx,al
c000fa3f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa44:	ec                   	in     al,dx
c000fa45:	83 c8 08             	or     eax,0x8
c000fa48:	89 ca                	mov    edx,ecx
c000fa4a:	ee                   	out    dx,al
c000fa4b:	c3                   	ret    
c000fa4c:	ec                   	in     al,dx
c000fa4d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa52:	b0 30                	mov    al,0x30
c000fa54:	89 ca                	mov    edx,ecx
c000fa56:	ee                   	out    dx,al
c000fa57:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa5c:	ec                   	in     al,dx
c000fa5d:	83 e0 f7             	and    eax,0xfffffff7
c000fa60:	89 ca                	mov    edx,ecx
c000fa62:	ee                   	out    dx,al
c000fa63:	c3                   	ret    

c000fa64 <hwTextMode_scrollScreen(VgaText*)>:
c000fa64:	55                   	push   ebp
c000fa65:	57                   	push   edi
c000fa66:	56                   	push   esi
c000fa67:	53                   	push   ebx
c000fa68:	83 ec 1c             	sub    esp,0x1c
c000fa6b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa6f:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000fa76:	74 14                	je     c000fa8c <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa78:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa82:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa8c:	a1 a0 d4 02 c0       	mov    eax,ds:0xc002d4a0
c000fa91:	bd 02 00 00 00       	mov    ebp,0x2
c000fa96:	05 a0 00 00 00       	add    eax,0xa0
c000fa9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000faa3:	31 c0                	xor    eax,eax
c000faa5:	eb 0b                	jmp    c000fab2 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000faa7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faad:	74 57                	je     c000fb06 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faaf:	43                   	inc    ebx
c000fab0:	89 f0                	mov    eax,esi
c000fab2:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab8:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fabe:	88 13                	mov    BYTE PTR [ebx],dl
c000fac0:	8d 70 01             	lea    esi,[eax+0x1]
c000fac3:	83 fd 18             	cmp    ebp,0x18
c000fac6:	75 df                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac8:	a8 01                	test   al,0x1
c000faca:	75 13                	jne    c000fadf <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000facc:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000facf:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fad5:	75 d8                	jne    c000faaf <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fad7:	83 c4 1c             	add    esp,0x1c
c000fada:	5b                   	pop    ebx
c000fadb:	5e                   	pop    esi
c000fadc:	5f                   	pop    edi
c000fadd:	5d                   	pop    ebp
c000fade:	c3                   	ret    
c000fadf:	83 ec 08             	sub    esp,0x8
c000fae2:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae9:	50                   	push   eax
c000faea:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000faee:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faf5:	50                   	push   eax
c000faf6:	e8 53 0c 00 00       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c000fafb:	83 c4 10             	add    esp,0x10
c000fafe:	88 07                	mov    BYTE PTR [edi],al
c000fb00:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb04:	eb c9                	jmp    c000facf <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fb06:	45                   	inc    ebp
c000fb07:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb0f:	eb 8e                	jmp    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb11 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb11:	57                   	push   edi
c000fb12:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000fb19:	56                   	push   esi
c000fb1a:	53                   	push   ebx
c000fb1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb1f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb23:	75 65                	jne    c000fb8a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb25:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb2a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb2f:	83 ec 08             	sub    esp,0x8
c000fb32:	52                   	push   edx
c000fb33:	50                   	push   eax
c000fb34:	e8 15 0c 00 00       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb39:	5a                   	pop    edx
c000fb3a:	0f b6 c0             	movzx  eax,al
c000fb3d:	59                   	pop    ecx
c000fb3e:	50                   	push   eax
c000fb3f:	0f be c3             	movsx  eax,bl
c000fb42:	50                   	push   eax
c000fb43:	e8 ac 0c 00 00       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	8b 35 a0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4a0
c000fb51:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000fb58:	74 07                	je     c000fb61 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb5a:	66 0f be c3          	movsx  ax,bl
c000fb5e:	80 cc 02             	or     ah,0x2
c000fb61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb65:	ba 19 00 00 00       	mov    edx,0x19
c000fb6a:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb70:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb73:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb76:	c1 e1 04             	shl    ecx,0x4
c000fb79:	c1 e2 04             	shl    edx,0x4
c000fb7c:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb80:	01 ca                	add    edx,ecx
c000fb82:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb86:	5b                   	pop    ebx
c000fb87:	5e                   	pop    esi
c000fb88:	5f                   	pop    edi
c000fb89:	c3                   	ret    
c000fb8a:	b8 02 00 00 00       	mov    eax,0x2
c000fb8f:	31 d2                	xor    edx,edx
c000fb91:	eb 9c                	jmp    c000fb2f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb93 <setupTextMode()>:
c000fb93:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb98:	83 e0 30             	and    eax,0x30
c000fb9b:	66 83 f8 30          	cmp    ax,0x30
c000fb9f:	75 11                	jne    c000fbb2 <setupTextMode()+0x1f>
c000fba1:	81 2d a0 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d4a0,0x8000
c000fbab:	c6 05 00 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e600,0x1
c000fbb2:	c7 05 38 e6 02 c0 1e fa 00 c0 	mov    DWORD PTR ds:0xc002e638,0xc000fa1e
c000fbbc:	c7 05 24 e6 02 c0 a5 f8 00 c0 	mov    DWORD PTR ds:0xc002e624,0xc000f8a5
c000fbc6:	c7 05 20 e6 02 c0 f0 f8 00 c0 	mov    DWORD PTR ds:0xc002e620,0xc000f8f0
c000fbd0:	c7 05 2c e6 02 c0 64 fa 00 c0 	mov    DWORD PTR ds:0xc002e62c,0xc000fa64
c000fbda:	c7 05 34 e6 02 c0 6e f9 00 c0 	mov    DWORD PTR ds:0xc002e634,0xc000f96e
c000fbe4:	c7 05 28 e6 02 c0 cc f9 00 c0 	mov    DWORD PTR ds:0xc002e628,0xc000f9cc
c000fbee:	c7 05 30 e6 02 c0 cd f9 00 c0 	mov    DWORD PTR ds:0xc002e630,0xc000f9cd
c000fbf8:	c7 05 3c e6 02 c0 11 fb 00 c0 	mov    DWORD PTR ds:0xc002e63c,0xc000fb11
c000fc02:	c3                   	ret    

c000fc03 <kernel_main>:
c000fc03:	57                   	push   edi
c000fc04:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc09:	56                   	push   esi
c000fc0a:	31 f6                	xor    esi,esi
c000fc0c:	53                   	push   ebx
c000fc0d:	83 ec 20             	sub    esp,0x20
c000fc10:	e8 93 09 00 00       	call   c00105a8 <installVgaTextImplementation()>
c000fc15:	e8 79 ff ff ff       	call   c000fb93 <setupTextMode()>
c000fc1a:	89 f0                	mov    eax,esi
c000fc1c:	89 fa                	mov    edx,edi
c000fc1e:	ee                   	out    dx,al
c000fc1f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc24:	b0 80                	mov    al,0x80
c000fc26:	89 da                	mov    edx,ebx
c000fc28:	ee                   	out    dx,al
c000fc29:	b1 03                	mov    cl,0x3
c000fc2b:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc30:	88 c8                	mov    al,cl
c000fc32:	ee                   	out    dx,al
c000fc33:	89 f0                	mov    eax,esi
c000fc35:	89 fa                	mov    edx,edi
c000fc37:	ee                   	out    dx,al
c000fc38:	88 c8                	mov    al,cl
c000fc3a:	89 da                	mov    edx,ebx
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 c7                	mov    al,0xc7
c000fc3f:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc44:	ee                   	out    dx,al
c000fc45:	b0 0b                	mov    al,0xb
c000fc47:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc4c:	ee                   	out    dx,al
c000fc4d:	83 ec 0c             	sub    esp,0xc
c000fc50:	68 04 a3 02 c0       	push   0xc002a304
c000fc55:	e8 4b 32 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000fc5a:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc5f:	05 ff 0f 00 00       	add    eax,0xfff
c000fc64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc69:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc6c:	e8 f3 03 00 00       	call   c0010064 <Phys::physicalMemorySetup(unsigned int)>
c000fc71:	e8 94 20 00 00       	call   c0011d0a <Virt::virtualMemorySetup()>
c000fc76:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc85:	75 0e                	jne    c000fc95 <kernel_main+0x92>
c000fc87:	89 d8                	mov    eax,ebx
c000fc89:	25 48 03 00 00       	and    eax,0x348
c000fc8e:	3d 00 03 00 00       	cmp    eax,0x300
c000fc93:	74 10                	je     c000fca5 <kernel_main+0xa2>
c000fc95:	83 ec 0c             	sub    esp,0xc
c000fc98:	68 2d bc 02 c0       	push   0xc002bc2d
c000fc9d:	e8 dd a9 00 00       	call   c001a67f <Krnl::panic(char const*)>
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	83 ec 0c             	sub    esp,0xc
c000fca8:	89 1d 80 e5 02 c0    	mov    DWORD PTR ds:0xc002e580,ebx
c000fcae:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcb2:	53                   	push   ebx
c000fcb3:	e8 64 22 00 00       	call   c0011f1c <VAS::VAS()>
c000fcb8:	89 1d ec e6 02 c0    	mov    DWORD PTR ds:0xc002e6ec,ebx
c000fcbe:	e8 5d 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcc3:	c7 04 24 1b a3 02 c0 	mov    DWORD PTR [esp],0xc002a31b
c000fcca:	e8 d6 31 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000fccf:	e8 b5 20 00 00       	call   c0011d89 <Virt::swappingSetup()>
c000fcd4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcdb:	e8 6b fb ff ff       	call   c000f84b <malloc>
c000fce0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fce3:	89 c6                	mov    esi,eax
c000fce5:	e8 58 ea ff ff       	call   c000e742 <Computer::Computer()>
c000fcea:	58                   	pop    eax
c000fceb:	89 35 68 e5 02 c0    	mov    DWORD PTR ds:0xc002e568,esi
c000fcf1:	5a                   	pop    edx
c000fcf2:	56                   	push   esi
c000fcf3:	68 38 a3 02 c0       	push   0xc002a338
c000fcf8:	e8 a8 31 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000fcfd:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000fd02:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd04:	6a 00                	push   0x0
c000fd06:	6a 00                	push   0x0
c000fd08:	6a 00                	push   0x0
c000fd0a:	50                   	push   eax
c000fd0b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd0e:	83 c4 14             	add    esp,0x14
c000fd11:	53                   	push   ebx
c000fd12:	e8 b5 24 00 00       	call   c00121cc <VAS::~VAS()>
c000fd17:	c7 04 24 4b a3 02 c0 	mov    DWORD PTR [esp],0xc002a34b
c000fd1e:	e8 5c a9 00 00       	call   c001a67f <Krnl::panic(char const*)>
c000fd23:	83 c4 30             	add    esp,0x30
c000fd26:	5b                   	pop    ebx
c000fd27:	5e                   	pop    esi
c000fd28:	5f                   	pop    edi
c000fd29:	c3                   	ret    

c000fd2a <Phys::allocateDMA(unsigned long)>:
c000fd2a:	55                   	push   ebp
c000fd2b:	31 d2                	xor    edx,edx
c000fd2d:	57                   	push   edi
c000fd2e:	31 ed                	xor    ebp,ebp
c000fd30:	56                   	push   esi
c000fd31:	31 c9                	xor    ecx,ecx
c000fd33:	53                   	push   ebx
c000fd34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd38:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd3e:	31 c0                	xor    eax,eax
c000fd40:	c1 ee 0c             	shr    esi,0xc
c000fd43:	eb 17                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x32>
c000fd45:	85 c9                	test   ecx,ecx
c000fd47:	75 04                	jne    c000fd4d <Phys::allocateDMA(unsigned long)+0x23>
c000fd49:	89 d5                	mov    ebp,edx
c000fd4b:	89 d0                	mov    eax,edx
c000fd4d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd50:	39 de                	cmp    esi,ebx
c000fd52:	74 20                	je     c000fd74 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd54:	42                   	inc    edx
c000fd55:	89 d9                	mov    ecx,ebx
c000fd57:	83 fa 2f             	cmp    edx,0x2f
c000fd5a:	7f 11                	jg     c000fd6d <Phys::allocateDMA(unsigned long)+0x43>
c000fd5c:	80 ba c0 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1a40],0x0
c000fd63:	74 e0                	je     c000fd45 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd65:	31 c9                	xor    ecx,ecx
c000fd67:	42                   	inc    edx
c000fd68:	83 fa 2f             	cmp    edx,0x2f
c000fd6b:	7e ef                	jle    c000fd5c <Phys::allocateDMA(unsigned long)+0x32>
c000fd6d:	5b                   	pop    ebx
c000fd6e:	31 c0                	xor    eax,eax
c000fd70:	5e                   	pop    esi
c000fd71:	5f                   	pop    edi
c000fd72:	5d                   	pop    ebp
c000fd73:	c3                   	ret    
c000fd74:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd77:	89 d7                	mov    edi,edx
c000fd79:	4f                   	dec    edi
c000fd7a:	79 03                	jns    c000fd7f <Phys::allocateDMA(unsigned long)+0x55>
c000fd7c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd7f:	c1 ff 04             	sar    edi,0x4
c000fd82:	89 c2                	mov    edx,eax
c000fd84:	c1 fa 04             	sar    edx,0x4
c000fd87:	39 fa                	cmp    edx,edi
c000fd89:	75 2f                	jne    c000fdba <Phys::allocateDMA(unsigned long)+0x90>
c000fd8b:	85 db                	test   ebx,ebx
c000fd8d:	74 1a                	je     c000fda9 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd8f:	be c0 e5 02 c0       	mov    esi,0xc002e5c0
c000fd94:	8d 90 c0 e5 02 c0    	lea    edx,[eax-0x3ffd1a40]
c000fd9a:	f7 d6                	not    esi
c000fd9c:	29 c6                	sub    esi,eax
c000fd9e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fda1:	42                   	inc    edx
c000fda2:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fda5:	39 d9                	cmp    ecx,ebx
c000fda7:	7f f5                	jg     c000fd9e <Phys::allocateDMA(unsigned long)+0x74>
c000fda9:	85 ff                	test   edi,edi
c000fdab:	74 13                	je     c000fdc0 <Phys::allocateDMA(unsigned long)+0x96>
c000fdad:	5b                   	pop    ebx
c000fdae:	05 50 20 0c 00       	add    eax,0xc2050
c000fdb3:	5e                   	pop    esi
c000fdb4:	c1 e0 0c             	shl    eax,0xc
c000fdb7:	5f                   	pop    edi
c000fdb8:	5d                   	pop    ebp
c000fdb9:	c3                   	ret    
c000fdba:	89 ea                	mov    edx,ebp
c000fdbc:	31 c9                	xor    ecx,ecx
c000fdbe:	eb a7                	jmp    c000fd67 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdc0:	5b                   	pop    ebx
c000fdc1:	c1 e0 0c             	shl    eax,0xc
c000fdc4:	5e                   	pop    esi
c000fdc5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdca:	5f                   	pop    edi
c000fdcb:	5d                   	pop    ebp
c000fdcc:	c3                   	ret    

c000fdcd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdd5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fddb:	c1 e9 0c             	shr    ecx,0xc
c000fdde:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fde3:	76 25                	jbe    c000fe0a <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fde5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdea:	c1 e8 0c             	shr    eax,0xc
c000fded:	8d 50 10             	lea    edx,[eax+0x10]
c000fdf0:	85 c9                	test   ecx,ecx
c000fdf2:	74 15                	je     c000fe09 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdf4:	8d 82 c0 e5 02 c0    	lea    eax,[edx-0x3ffd1a40]
c000fdfa:	8d 94 11 c0 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1a40]
c000fe01:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe04:	40                   	inc    eax
c000fe05:	39 d0                	cmp    eax,edx
c000fe07:	75 f8                	jne    c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe09:	c3                   	ret    
c000fe0a:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe10:	c1 ea 0c             	shr    edx,0xc
c000fe13:	eb db                	jmp    c000fdf0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe15 <Phys::setPageState(unsigned long, bool)>:
c000fe15:	56                   	push   esi
c000fe16:	ba 01 00 00 00       	mov    edx,0x1
c000fe1b:	53                   	push   ebx
c000fe1c:	8b 35 84 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d484
c000fe22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe2a:	89 c8                	mov    eax,ecx
c000fe2c:	83 e1 07             	and    ecx,0x7
c000fe2f:	c1 e8 03             	shr    eax,0x3
c000fe32:	d3 e3                	shl    ebx,cl
c000fe34:	01 c6                	add    esi,eax
c000fe36:	d3 e2                	shl    edx,cl
c000fe38:	f7 d2                	not    edx
c000fe3a:	20 16                	and    BYTE PTR [esi],dl
c000fe3c:	03 05 84 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d484
c000fe42:	08 18                	or     BYTE PTR [eax],bl
c000fe44:	5b                   	pop    ebx
c000fe45:	5e                   	pop    esi
c000fe46:	c3                   	ret    

c000fe47 <Phys::getPageState(unsigned long)>:
c000fe47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe4b:	8b 15 84 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d484
c000fe51:	89 c8                	mov    eax,ecx
c000fe53:	83 e1 07             	and    ecx,0x7
c000fe56:	c1 e8 03             	shr    eax,0x3
c000fe59:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe5d:	d3 f8                	sar    eax,cl
c000fe5f:	83 e0 01             	and    eax,0x1
c000fe62:	c3                   	ret    

c000fe63 <Phys::freePage(unsigned long)>:
c000fe63:	53                   	push   ebx
c000fe64:	83 ec 08             	sub    esp,0x8
c000fe67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe6b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe71:	76 57                	jbe    c000feca <Phys::freePage(unsigned long)+0x67>
c000fe73:	c1 eb 0c             	shr    ebx,0xc
c000fe76:	53                   	push   ebx
c000fe77:	e8 cb ff ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000fe7c:	5a                   	pop    edx
c000fe7d:	84 c0                	test   al,al
c000fe7f:	74 5b                	je     c000fedc <Phys::freePage(unsigned long)+0x79>
c000fe81:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c000fe86:	48                   	dec    eax
c000fe87:	a3 b0 e5 02 c0       	mov    ds:0xc002e5b0,eax
c000fe8c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe92:	c1 e0 02             	shl    eax,0x2
c000fe95:	99                   	cdq    
c000fe96:	f7 3d b4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5b4
c000fe9c:	39 05 ac e5 02 c0    	cmp    DWORD PTR ds:0xc002e5ac,eax
c000fea2:	75 13                	jne    c000feb7 <Phys::freePage(unsigned long)+0x54>
c000fea4:	83 ec 08             	sub    esp,0x8
c000fea7:	6a 00                	push   0x0
c000fea9:	53                   	push   ebx
c000feaa:	e8 66 ff ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	83 c4 08             	add    esp,0x8
c000feb5:	5b                   	pop    ebx
c000feb6:	c3                   	ret    
c000feb7:	83 ec 0c             	sub    esp,0xc
c000feba:	a3 ac e5 02 c0       	mov    ds:0xc002e5ac,eax
c000febf:	50                   	push   eax
c000fec0:	e8 77 0a 00 00       	call   c001093c <VgaText::updateRAMUsageDisplay(int)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	eb da                	jmp    c000fea4 <Phys::freePage(unsigned long)+0x41>
c000feca:	68 00 10 00 00       	push   0x1000
c000fecf:	53                   	push   ebx
c000fed0:	e8 f8 fe ff ff       	call   c000fdcd <Phys::freeDMA(unsigned long, unsigned long)>
c000fed5:	59                   	pop    ecx
c000fed6:	5b                   	pop    ebx
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	c3                   	ret    
c000fedc:	c7 44 24 10 66 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a366
c000fee4:	83 c4 08             	add    esp,0x8
c000fee7:	5b                   	pop    ebx
c000fee8:	e9 92 a7 00 00       	jmp    c001a67f <Krnl::panic(char const*)>

c000feed <Phys::allocatePage()>:
c000feed:	56                   	push   esi
c000feee:	53                   	push   ebx
c000feef:	51                   	push   ecx
c000fef0:	8b 35 a4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5a4
c000fef6:	89 f3                	mov    ebx,esi
c000fef8:	eb 0a                	jmp    c000ff04 <Phys::allocatePage()+0x17>
c000fefa:	89 1d a4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a4,ebx
c000ff00:	39 de                	cmp    esi,ebx
c000ff02:	74 24                	je     c000ff28 <Phys::allocatePage()+0x3b>
c000ff04:	53                   	push   ebx
c000ff05:	e8 3d ff ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000ff0a:	5a                   	pop    edx
c000ff0b:	84 c0                	test   al,al
c000ff0d:	74 77                	je     c000ff86 <Phys::allocatePage()+0x99>
c000ff0f:	43                   	inc    ebx
c000ff10:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff16:	75 e2                	jne    c000fefa <Phys::allocatePage()+0xd>
c000ff18:	31 db                	xor    ebx,ebx
c000ff1a:	c7 05 a4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5a4,0x0
c000ff24:	39 de                	cmp    esi,ebx
c000ff26:	75 dc                	jne    c000ff04 <Phys::allocatePage()+0x17>
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff33:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff39:	e8 a8 2c 00 00       	call   c0012be6 <VAS::scanForEviction()>
c000ff3e:	83 c4 10             	add    esp,0x10
c000ff41:	85 c0                	test   eax,eax
c000ff43:	75 76                	jne    c000ffbb <Phys::allocatePage()+0xce>
c000ff45:	83 ec 0c             	sub    esp,0xc
c000ff48:	68 7c a3 02 c0       	push   0xc002a37c
c000ff4d:	e8 53 2f 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c000ff52:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff59:	e8 cc fd ff ff       	call   c000fd2a <Phys::allocateDMA(unsigned long)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	85 c0                	test   eax,eax
c000ff63:	75 56                	jne    c000ffbb <Phys::allocatePage()+0xce>
c000ff65:	83 ec 0c             	sub    esp,0xc
c000ff68:	68 8d a3 02 c0       	push   0xc002a38d
c000ff6d:	e8 0d a7 00 00       	call   c001a67f <Krnl::panic(char const*)>
c000ff72:	83 c4 10             	add    esp,0x10
c000ff75:	8b 1d a4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a4
c000ff7b:	53                   	push   ebx
c000ff7c:	e8 c6 fe ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000ff81:	5a                   	pop    edx
c000ff82:	84 c0                	test   al,al
c000ff84:	75 89                	jne    c000ff0f <Phys::allocatePage()+0x22>
c000ff86:	6a 01                	push   0x1
c000ff88:	53                   	push   ebx
c000ff89:	e8 87 fe ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c000ff8e:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c000ff93:	59                   	pop    ecx
c000ff94:	40                   	inc    eax
c000ff95:	5b                   	pop    ebx
c000ff96:	a3 b0 e5 02 c0       	mov    ds:0xc002e5b0,eax
c000ff9b:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff9e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffa1:	c1 e0 02             	shl    eax,0x2
c000ffa4:	99                   	cdq    
c000ffa5:	f7 3d b4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5b4
c000ffab:	39 05 ac e5 02 c0    	cmp    DWORD PTR ds:0xc002e5ac,eax
c000ffb1:	75 0c                	jne    c000ffbf <Phys::allocatePage()+0xd2>
c000ffb3:	a1 a4 e5 02 c0       	mov    eax,ds:0xc002e5a4
c000ffb8:	c1 e0 0c             	shl    eax,0xc
c000ffbb:	5a                   	pop    edx
c000ffbc:	5b                   	pop    ebx
c000ffbd:	5e                   	pop    esi
c000ffbe:	c3                   	ret    
c000ffbf:	83 ec 0c             	sub    esp,0xc
c000ffc2:	a3 ac e5 02 c0       	mov    ds:0xc002e5ac,eax
c000ffc7:	50                   	push   eax
c000ffc8:	e8 6f 09 00 00       	call   c001093c <VgaText::updateRAMUsageDisplay(int)>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	eb e1                	jmp    c000ffb3 <Phys::allocatePage()+0xc6>

c000ffd2 <Phys::allocateContiguousPages(int)>:
c000ffd2:	57                   	push   edi
c000ffd3:	56                   	push   esi
c000ffd4:	53                   	push   ebx
c000ffd5:	31 db                	xor    ebx,ebx
c000ffd7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffdb:	e8 7a de 00 00       	call   c001de5a <lockScheduler()>
c000ffe0:	85 db                	test   ebx,ebx
c000ffe2:	75 11                	jne    c000fff5 <Phys::allocateContiguousPages(int)+0x23>
c000ffe4:	e8 04 ff ff ff       	call   c000feed <Phys::allocatePage()>
c000ffe9:	83 ff 01             	cmp    edi,0x1
c000ffec:	89 c6                	mov    esi,eax
c000ffee:	74 21                	je     c0010011 <Phys::allocateContiguousPages(int)+0x3f>
c000fff0:	bb 01 00 00 00       	mov    ebx,0x1
c000fff5:	e8 f3 fe ff ff       	call   c000feed <Phys::allocatePage()>
c000fffa:	89 da                	mov    edx,ebx
c000fffc:	c1 e2 0c             	shl    edx,0xc
c000ffff:	01 f2                	add    edx,esi
c0010001:	39 c2                	cmp    edx,eax
c0010003:	74 17                	je     c001001c <Phys::allocateContiguousPages(int)+0x4a>
c0010005:	bb 01 00 00 00       	mov    ebx,0x1
c001000a:	89 c6                	mov    esi,eax
c001000c:	83 ff 01             	cmp    edi,0x1
c001000f:	75 e4                	jne    c000fff5 <Phys::allocateContiguousPages(int)+0x23>
c0010011:	e8 46 de 00 00       	call   c001de5c <unlockScheduler()>
c0010016:	89 f0                	mov    eax,esi
c0010018:	5b                   	pop    ebx
c0010019:	5e                   	pop    esi
c001001a:	5f                   	pop    edi
c001001b:	c3                   	ret    
c001001c:	43                   	inc    ebx
c001001d:	39 fb                	cmp    ebx,edi
c001001f:	75 bf                	jne    c000ffe0 <Phys::allocateContiguousPages(int)+0xe>
c0010021:	e8 36 de 00 00       	call   c001de5c <unlockScheduler()>
c0010026:	89 f0                	mov    eax,esi
c0010028:	5b                   	pop    ebx
c0010029:	5e                   	pop    esi
c001002a:	5f                   	pop    edi
c001002b:	c3                   	ret    

c001002c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001002c:	56                   	push   esi
c001002d:	53                   	push   ebx
c001002e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010032:	39 1d a8 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5a8,ebx
c0010038:	73 06                	jae    c0010040 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001003a:	89 1d a8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a8,ebx
c0010040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010044:	c1 eb 0c             	shr    ebx,0xc
c0010047:	c1 e8 0c             	shr    eax,0xc
c001004a:	39 d8                	cmp    eax,ebx
c001004c:	73 13                	jae    c0010061 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001004e:	6a 00                	push   0x0
c0010050:	8d 70 01             	lea    esi,[eax+0x1]
c0010053:	50                   	push   eax
c0010054:	e8 bc fd ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c0010059:	5a                   	pop    edx
c001005a:	89 f0                	mov    eax,esi
c001005c:	59                   	pop    ecx
c001005d:	39 f3                	cmp    ebx,esi
c001005f:	75 ed                	jne    c001004e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010061:	5b                   	pop    ebx
c0010062:	5e                   	pop    esi
c0010063:	c3                   	ret    

c0010064 <Phys::physicalMemorySetup(unsigned int)>:
c0010064:	55                   	push   ebp
c0010065:	57                   	push   edi
c0010066:	56                   	push   esi
c0010067:	53                   	push   ebx
c0010068:	31 db                	xor    ebx,ebx
c001006a:	83 ec 40             	sub    esp,0x40
c001006d:	6a 30                	push   0x30
c001006f:	6a 00                	push   0x0
c0010071:	68 c0 e5 02 c0       	push   0xc002e5c0
c0010076:	e8 05 07 ff ff       	call   c0000780 <memset>
c001007b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001007f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010084:	05 00 10 00 00       	add    eax,0x1000
c0010089:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001008d:	83 c4 10             	add    esp,0x10
c0010090:	83 ec 08             	sub    esp,0x8
c0010093:	6a 01                	push   0x1
c0010095:	53                   	push   ebx
c0010096:	43                   	inc    ebx
c0010097:	e8 79 fd ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100a5:	75 e9                	jne    c0010090 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100a7:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ae:	66 85 c0             	test   ax,ax
c00100b1:	0f 84 8e 01 00 00    	je     c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100c7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100d8:	eb 15                	jmp    c00100ef <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100da:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100de:	83 c3 18             	add    ebx,0x18
c00100e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100e9:	0f 84 66 01 00 00    	je     c0010255 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100f5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010100:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010102:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010105:	01 f0                	add    eax,esi
c0010107:	55                   	push   ebp
c0010108:	11 fa                	adc    edx,edi
c001010a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001010e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010112:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010116:	56                   	push   esi
c0010117:	68 c8 a3 02 c0       	push   0xc002a3c8
c001011c:	e8 84 2d 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0010121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010125:	83 c4 10             	add    esp,0x10
c0010128:	09 f8                	or     eax,edi
c001012a:	0f 85 25 01 00 00    	jne    c0010255 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010130:	4d                   	dec    ebp
c0010131:	75 a7                	jne    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010133:	ba 00 00 08 00       	mov    edx,0x80000
c0010138:	89 c1                	mov    ecx,eax
c001013a:	39 f2                	cmp    edx,esi
c001013c:	19 f9                	sbb    ecx,edi
c001013e:	0f 82 a7 00 00 00    	jb     c00101eb <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010144:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010148:	89 c1                	mov    ecx,eax
c001014a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001014e:	0f 83 97 00 00 00    	jae    c00101eb <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010154:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010159:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001015d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010161:	39 fa                	cmp    edx,edi
c0010163:	19 e8                	sbb    eax,ebp
c0010165:	0f 82 14 01 00 00    	jb     c001027f <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001016b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001016f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010173:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010179:	ba ff 1f 00 00       	mov    edx,0x1fff
c001017e:	83 d5 ff             	adc    ebp,0xffffffff
c0010181:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010185:	31 c0                	xor    eax,eax
c0010187:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001018b:	39 fa                	cmp    edx,edi
c001018d:	89 c1                	mov    ecx,eax
c001018f:	19 e9                	sbb    ecx,ebp
c0010191:	0f 83 43 ff ff ff    	jae    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010197:	be 00 00 08 00       	mov    esi,0x80000
c001019c:	50                   	push   eax
c001019d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101a1:	57                   	push   edi
c00101a2:	56                   	push   esi
c00101a3:	68 ec a3 02 c0       	push   0xc002a3ec
c00101a8:	e8 f8 2c 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00101ad:	5a                   	pop    edx
c00101ae:	59                   	pop    ecx
c00101af:	57                   	push   edi
c00101b0:	56                   	push   esi
c00101b1:	e8 76 fe ff ff       	call   c001002c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101be:	83 c4 0c             	add    esp,0xc
c00101c1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101c5:	03 05 b4 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e5b4
c00101cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101d2:	a3 b4 e5 02 c0       	mov    ds:0xc002e5b4,eax
c00101d7:	52                   	push   edx
c00101d8:	50                   	push   eax
c00101d9:	68 a9 a3 02 c0       	push   0xc002a3a9
c00101de:	e8 c2 2c 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00101e3:	83 c4 10             	add    esp,0x10
c00101e6:	e9 ef fe ff ff       	jmp    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101eb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101f7:	39 ea                	cmp    edx,ebp
c00101f9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101fd:	0f 82 d7 fe ff ff    	jb     c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010203:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010208:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001020c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010210:	0f 83 c4 fe ff ff    	jae    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010216:	39 ee                	cmp    esi,ebp
c0010218:	89 f8                	mov    eax,edi
c001021a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001021e:	0f 83 78 ff ff ff    	jae    c001019c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010228:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001022c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010234:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010238:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001023c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010240:	e9 57 ff ff ff       	jmp    c001019c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010245:	83 ec 0c             	sub    esp,0xc
c0010248:	68 9b a3 02 c0       	push   0xc002a39b
c001024d:	e8 2d a4 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0010252:	83 c4 10             	add    esp,0x10
c0010255:	bb 40 01 00 00       	mov    ebx,0x140
c001025a:	83 ec 08             	sub    esp,0x8
c001025d:	6a 00                	push   0x0
c001025f:	53                   	push   ebx
c0010260:	43                   	inc    ebx
c0010261:	e8 af fb ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c0010266:	ff 05 b4 e5 02 c0    	inc    DWORD PTR ds:0xc002e5b4
c001026c:	83 c4 10             	add    esp,0x10
c001026f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010275:	75 e3                	jne    c001025a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010277:	83 c4 3c             	add    esp,0x3c
c001027a:	5b                   	pop    ebx
c001027b:	5e                   	pop    esi
c001027c:	5f                   	pop    edi
c001027d:	5d                   	pop    ebp
c001027e:	c3                   	ret    
c001027f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010287:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001028f:	e9 d7 fe ff ff       	jmp    c001016b <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010294 <Pipe::isAtty()>:
c0010294:	31 c0                	xor    eax,eax
c0010296:	c3                   	ret    
c0010297:	90                   	nop

c0010298 <Pipe::~Pipe()>:
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	ba 58 a4 02 c0       	mov    edx,0xc002a458
c00102a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a4:	89 10                	mov    DWORD PTR [eax],edx
c00102a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	50                   	push   eax
c00102ae:	e8 37 16 00 00       	call   c00118ea <UnixFile::~UnixFile()>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	90                   	nop
c00102b7:	83 c4 0c             	add    esp,0xc
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <Pipe::~Pipe()>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c6:	e8 cd ff ff ff       	call   c0010298 <Pipe::~Pipe()>
c00102cb:	83 c4 10             	add    esp,0x10
c00102ce:	83 ec 08             	sub    esp,0x8
c00102d1:	6a 20                	push   0x20
c00102d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d7:	e8 e9 2a 00 00       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00102dc:	83 c4 10             	add    esp,0x10
c00102df:	83 c4 0c             	add    esp,0xc
c00102e2:	c3                   	ret    
c00102e3:	90                   	nop

c00102e4 <Pipe::read(unsigned long long, void*, int*)>:
c00102e4:	55                   	push   ebp
c00102e5:	57                   	push   edi
c00102e6:	56                   	push   esi
c00102e7:	53                   	push   ebx
c00102e8:	83 ec 1c             	sub    esp,0x1c
c00102eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102f7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102fa:	89 c8                	mov    eax,ecx
c00102fc:	99                   	cdq    
c00102fd:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010301:	74 19                	je     c001031c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010303:	39 f9                	cmp    ecx,edi
c0010305:	89 d1                	mov    ecx,edx
c0010307:	19 f1                	sbb    ecx,esi
c0010309:	73 11                	jae    c001031c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001030b:	e8 4a db 00 00       	call   c001de5a <lockScheduler()>
c0010310:	e8 bb de 00 00       	call   c001e1d0 <schedule()>
c0010315:	e8 42 db 00 00       	call   c001de5c <unlockScheduler()>
c001031a:	eb db                	jmp    c00102f7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001031c:	39 f8                	cmp    eax,edi
c001031e:	89 d1                	mov    ecx,edx
c0010320:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010324:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010328:	19 f1                	sbb    ecx,esi
c001032a:	73 08                	jae    c0010334 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001032c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010330:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010334:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010337:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001033a:	29 c6                	sub    esi,eax
c001033c:	89 f1                	mov    ecx,esi
c001033e:	c1 f9 1f             	sar    ecx,0x1f
c0010341:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010345:	89 ca                	mov    edx,ecx
c0010347:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001034b:	19 d1                	sbb    ecx,edx
c001034d:	73 04                	jae    c0010353 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001034f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010353:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010357:	89 fd                	mov    ebp,edi
c0010359:	29 f5                	sub    ebp,esi
c001035b:	85 f6                	test   esi,esi
c001035d:	74 12                	je     c0010371 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001035f:	52                   	push   edx
c0010360:	56                   	push   esi
c0010361:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010364:	50                   	push   eax
c0010365:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010369:	e8 de 03 ff ff       	call   c000074c <memcpy>
c001036e:	83 c4 10             	add    esp,0x10
c0010371:	85 ed                	test   ebp,ebp
c0010373:	74 12                	je     c0010387 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010375:	50                   	push   eax
c0010376:	55                   	push   ebp
c0010377:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001037a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001037e:	56                   	push   esi
c001037f:	e8 c8 03 ff ff       	call   c000074c <memcpy>
c0010384:	83 c4 10             	add    esp,0x10
c0010387:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001038a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010390:	99                   	cdq    
c0010391:	89 f7                	mov    edi,esi
c0010393:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010397:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001039b:	c1 ff 1f             	sar    edi,0x1f
c001039e:	57                   	push   edi
c001039f:	56                   	push   esi
c00103a0:	52                   	push   edx
c00103a1:	50                   	push   eax
c00103a2:	e8 c9 67 01 00       	call   c0026b70 <__umoddi3>
c00103a7:	83 c4 10             	add    esp,0x10
c00103aa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ad:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103b2:	75 10                	jne    c00103c4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103b4:	83 ec 0c             	sub    esp,0xc
c00103b7:	68 15 a4 02 c0       	push   0xc002a415
c00103bc:	e8 be a2 00 00       	call   c001a67f <Krnl::panic(char const*)>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103cc:	89 10                	mov    DWORD PTR [eax],edx
c00103ce:	83 c4 1c             	add    esp,0x1c
c00103d1:	31 c0                	xor    eax,eax
c00103d3:	5b                   	pop    ebx
c00103d4:	5e                   	pop    esi
c00103d5:	5f                   	pop    edi
c00103d6:	5d                   	pop    ebp
c00103d7:	c3                   	ret    

c00103d8 <Pipe::write(unsigned long long, void*, int*)>:
c00103d8:	55                   	push   ebp
c00103d9:	57                   	push   edi
c00103da:	56                   	push   esi
c00103db:	53                   	push   ebx
c00103dc:	83 ec 1c             	sub    esp,0x1c
c00103df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00103ee:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103f1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f8:	89 de                	mov    esi,ebx
c00103fa:	89 df                	mov    edi,ebx
c00103fc:	c1 ff 1f             	sar    edi,0x1f
c00103ff:	01 c6                	add    esi,eax
c0010401:	89 c8                	mov    eax,ecx
c0010403:	11 d7                	adc    edi,edx
c0010405:	99                   	cdq    
c0010406:	39 f1                	cmp    ecx,esi
c0010408:	89 d0                	mov    eax,edx
c001040a:	19 f8                	sbb    eax,edi
c001040c:	b8 01 00 00 00       	mov    eax,0x1
c0010411:	0f 82 80 00 00 00    	jb     c0010497 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010417:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001041a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001041d:	01 d8                	add    eax,ebx
c001041f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010423:	99                   	cdq    
c0010424:	f7 f9                	idiv   ecx
c0010426:	29 d1                	sub    ecx,edx
c0010428:	89 d7                	mov    edi,edx
c001042a:	89 c8                	mov    eax,ecx
c001042c:	99                   	cdq    
c001042d:	39 ce                	cmp    esi,ecx
c001042f:	19 d3                	sbb    ebx,edx
c0010431:	bb 00 00 00 00       	mov    ebx,0x0
c0010436:	72 04                	jb     c001043c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010438:	89 f3                	mov    ebx,esi
c001043a:	29 cb                	sub    ebx,ecx
c001043c:	89 f1                	mov    ecx,esi
c001043e:	29 d9                	sub    ecx,ebx
c0010440:	74 1a                	je     c001045c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010442:	52                   	push   edx
c0010443:	51                   	push   ecx
c0010444:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010448:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001044c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001044f:	57                   	push   edi
c0010450:	e8 f7 02 ff ff       	call   c000074c <memcpy>
c0010455:	83 c4 10             	add    esp,0x10
c0010458:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001045c:	85 db                	test   ebx,ebx
c001045e:	74 12                	je     c0010472 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010460:	50                   	push   eax
c0010461:	53                   	push   ebx
c0010462:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010466:	51                   	push   ecx
c0010467:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001046a:	e8 dd 02 ff ff       	call   c000074c <memcpy>
c001046f:	83 c4 10             	add    esp,0x10
c0010472:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010475:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001047a:	75 10                	jne    c001048c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001047c:	83 ec 0c             	sub    esp,0xc
c001047f:	68 31 a4 02 c0       	push   0xc002a431
c0010484:	e8 f6 a1 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0010489:	83 c4 10             	add    esp,0x10
c001048c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010490:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010493:	89 38                	mov    DWORD PTR [eax],edi
c0010495:	31 c0                	xor    eax,eax
c0010497:	83 c4 1c             	add    esp,0x1c
c001049a:	5b                   	pop    ebx
c001049b:	5e                   	pop    esi
c001049c:	5f                   	pop    edi
c001049d:	5d                   	pop    ebp
c001049e:	c3                   	ret    
c001049f:	90                   	nop

c00104a0 <Pipe::Pipe(int)>:
c00104a0:	83 ec 0c             	sub    esp,0xc
c00104a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a7:	83 ec 08             	sub    esp,0x8
c00104aa:	6a 00                	push   0x0
c00104ac:	50                   	push   eax
c00104ad:	e8 56 12 00 00       	call   c0011708 <UnixFile::UnixFile(int)>
c00104b2:	83 c4 10             	add    esp,0x10
c00104b5:	ba 58 a4 02 c0       	mov    edx,0xc002a458
c00104ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104be:	89 10                	mov    DWORD PTR [eax],edx
c00104c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104da:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104e5:	83 ec 0c             	sub    esp,0xc
c00104e8:	50                   	push   eax
c00104e9:	e8 5d f3 ff ff       	call   c000f84b <malloc>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	89 c2                	mov    edx,eax
c00104f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010502:	90                   	nop
c0010503:	83 c4 0c             	add    esp,0xc
c0010506:	c3                   	ret    
c0010507:	90                   	nop

c0010508 <VgaText::isAtty()>:
c0010508:	b0 01                	mov    al,0x1
c001050a:	c3                   	ret    
c001050b:	90                   	nop

c001050c <VgaText::~VgaText()>:
c001050c:	83 ec 0c             	sub    esp,0xc
c001050f:	ba 14 a5 02 c0       	mov    edx,0xc002a514
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	89 10                	mov    DWORD PTR [eax],edx
c001051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051e:	83 ec 0c             	sub    esp,0xc
c0010521:	50                   	push   eax
c0010522:	e8 c3 13 00 00       	call   c00118ea <UnixFile::~UnixFile()>
c0010527:	83 c4 10             	add    esp,0x10
c001052a:	90                   	nop
c001052b:	83 c4 0c             	add    esp,0xc
c001052e:	c3                   	ret    
c001052f:	90                   	nop

c0010530 <VgaText::~VgaText()>:
c0010530:	83 ec 0c             	sub    esp,0xc
c0010533:	83 ec 0c             	sub    esp,0xc
c0010536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053a:	e8 cd ff ff ff       	call   c001050c <VgaText::~VgaText()>
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	83 ec 08             	sub    esp,0x8
c0010545:	68 60 12 00 00       	push   0x1260
c001054a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054e:	e8 72 28 00 00       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	83 c4 0c             	add    esp,0xc
c0010559:	c3                   	ret    

c001055a <VgaText::read(unsigned long long, void*, int*)>:
c001055a:	83 ec 10             	sub    esp,0x10
c001055d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010561:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010569:	e8 02 5e 00 00       	call   c0016370 <readKeyboard(VgaText*, char*, unsigned long)>
c001056e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010572:	89 02                	mov    DWORD PTR [edx],eax
c0010574:	31 c0                	xor    eax,eax
c0010576:	83 c4 1c             	add    esp,0x1c
c0010579:	c3                   	ret    

c001057a <setTerminalScrollLock(bool)>:
c001057a:	c3                   	ret    

c001057b <addToTerminalCycle(VgaText*)>:
c001057b:	8b 15 40 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e640
c0010581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010585:	85 d2                	test   edx,edx
c0010587:	75 0c                	jne    c0010595 <addToTerminalCycle(VgaText*)+0x1a>
c0010589:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001058f:	a3 40 e6 02 c0       	mov    ds:0xc002e640,eax
c0010594:	c3                   	ret    
c0010595:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001059b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105a1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105a7:	c3                   	ret    

c00105a8 <installVgaTextImplementation()>:
c00105a8:	83 ec 10             	sub    esp,0x10
c00105ab:	6a 20                	push   0x20
c00105ad:	6a 00                	push   0x0
c00105af:	68 20 e6 02 c0       	push   0xc002e620
c00105b4:	e8 c7 01 ff ff       	call   c0000780 <memset>
c00105b9:	83 c4 1c             	add    esp,0x1c
c00105bc:	c3                   	ret    

c00105bd <scrollTerminalScrollLock(int)>:
c00105bd:	c3                   	ret    

c00105be <VgaText::load()>:
c00105be:	53                   	push   ebx
c00105bf:	31 c0                	xor    eax,eax
c00105c1:	83 ec 58             	sub    esp,0x58
c00105c4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105c8:	89 e2                	mov    edx,esp
c00105ca:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105ce:	40                   	inc    eax
c00105cf:	83 f8 50             	cmp    eax,0x50
c00105d2:	75 f6                	jne    c00105ca <VgaText::load()+0xc>
c00105d4:	31 c0                	xor    eax,eax
c00105d6:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105dd:	84 c9                	test   cl,cl
c00105df:	74 06                	je     c00105e7 <VgaText::load()+0x29>
c00105e1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105e4:	40                   	inc    eax
c00105e5:	eb ef                	jmp    c00105d6 <VgaText::load()+0x18>
c00105e7:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105ed:	85 c0                	test   eax,eax
c00105ef:	74 09                	je     c00105fa <VgaText::load()+0x3c>
c00105f1:	51                   	push   ecx
c00105f2:	51                   	push   ecx
c00105f3:	52                   	push   edx
c00105f4:	53                   	push   ebx
c00105f5:	ff d0                	call   eax
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010600:	85 c0                	test   eax,eax
c0010602:	74 09                	je     c001060d <VgaText::load()+0x4f>
c0010604:	83 ec 0c             	sub    esp,0xc
c0010607:	53                   	push   ebx
c0010608:	ff d0                	call   eax
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	83 c4 58             	add    esp,0x58
c0010610:	5b                   	pop    ebx
c0010611:	c3                   	ret    

c0010612 <VgaText::updateCursor()>:
c0010612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010616:	39 05 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,eax
c001061c:	75 0c                	jne    c001062a <VgaText::updateCursor()+0x18>
c001061e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010624:	85 c0                	test   eax,eax
c0010626:	74 02                	je     c001062a <VgaText::updateCursor()+0x18>
c0010628:	ff e0                	jmp    eax
c001062a:	c3                   	ret    
c001062b:	90                   	nop

c001062c <VgaText::showCursor(bool)>:
c001062c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010630:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010634:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001063a:	c3                   	ret    
c001063b:	90                   	nop

c001063c <VgaText::disableBlink(bool)>:
c001063c:	56                   	push   esi
c001063d:	53                   	push   ebx
c001063e:	51                   	push   ecx
c001063f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010647:	39 1d 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,ebx
c001064d:	75 18                	jne    c0010667 <VgaText::disableBlink(bool)+0x2b>
c001064f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010655:	85 c0                	test   eax,eax
c0010657:	74 0e                	je     c0010667 <VgaText::disableBlink(bool)+0x2b>
c0010659:	89 f1                	mov    ecx,esi
c001065b:	52                   	push   edx
c001065c:	52                   	push   edx
c001065d:	0f b6 d1             	movzx  edx,cl
c0010660:	52                   	push   edx
c0010661:	53                   	push   ebx
c0010662:	ff d0                	call   eax
c0010664:	83 c4 10             	add    esp,0x10
c0010667:	89 f0                	mov    eax,esi
c0010669:	83 f0 01             	xor    eax,0x1
c001066c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010672:	58                   	pop    eax
c0010673:	5b                   	pop    ebx
c0010674:	5e                   	pop    esi
c0010675:	c3                   	ret    

c0010676 <VgaText::doANSI_SGR(int)>:
c0010676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001067a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067e:	85 d2                	test   edx,edx
c0010680:	75 14                	jne    c0010696 <VgaText::doANSI_SGR(int)+0x20>
c0010682:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010688:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001068e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010694:	eb 65                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c0010696:	83 fa 07             	cmp    edx,0x7
c0010699:	75 14                	jne    c00106af <VgaText::doANSI_SGR(int)+0x39>
c001069b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106a1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106a7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106ad:	eb 4c                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c00106af:	83 fa 1b             	cmp    edx,0x1b
c00106b2:	74 ce                	je     c0010682 <VgaText::doANSI_SGR(int)+0xc>
c00106b4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106b7:	83 f9 07             	cmp    ecx,0x7
c00106ba:	77 09                	ja     c00106c5 <VgaText::doANSI_SGR(int)+0x4f>
c00106bc:	8b 14 8d c0 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b40]
c00106c3:	eb 20                	jmp    c00106e5 <VgaText::doANSI_SGR(int)+0x6f>
c00106c5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106c8:	83 f9 07             	cmp    ecx,0x7
c00106cb:	77 09                	ja     c00106d6 <VgaText::doANSI_SGR(int)+0x60>
c00106cd:	8b 14 8d c0 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b40]
c00106d4:	eb 25                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c00106d6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106d9:	83 f9 07             	cmp    ecx,0x7
c00106dc:	77 0e                	ja     c00106ec <VgaText::doANSI_SGR(int)+0x76>
c00106de:	8b 14 95 78 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c88]
c00106e5:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106eb:	c3                   	ret    
c00106ec:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106ef:	83 f9 07             	cmp    ecx,0x7
c00106f2:	77 0d                	ja     c0010701 <VgaText::doANSI_SGR(int)+0x8b>
c00106f4:	8b 14 95 50 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2cb0]
c00106fb:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010701:	c3                   	ret    

c0010702 <VgaText::setDefaultBgColour(VgaColour)>:
c0010702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001070a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010710:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010716:	c3                   	ret    
c0010717:	90                   	nop

c0010718 <VgaText::setDefaultFgColour(VgaColour)>:
c0010718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001071c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010720:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010726:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001072c:	c3                   	ret    
c001072d:	90                   	nop

c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001072e:	53                   	push   ebx
c001072f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010733:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010737:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001073b:	51                   	push   ecx
c001073c:	e8 c1 ff ff ff       	call   c0010702 <VgaText::setDefaultBgColour(VgaColour)>
c0010741:	58                   	pop    eax
c0010742:	5a                   	pop    edx
c0010743:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010747:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001074b:	5b                   	pop    ebx
c001074c:	eb ca                	jmp    c0010718 <VgaText::setDefaultFgColour(VgaColour)>

c001074e <VgaText::combineColours(unsigned char, unsigned char)>:
c001074e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010752:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010757:	83 e0 0f             	and    eax,0xf
c001075a:	c1 e2 04             	shl    edx,0x4
c001075d:	09 d0                	or     eax,edx
c001075f:	c3                   	ret    

c0010760 <VgaText::scrollScreen()>:
c0010760:	57                   	push   edi
c0010761:	56                   	push   esi
c0010762:	be 01 00 00 00       	mov    esi,0x1
c0010767:	53                   	push   ebx
c0010768:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001076c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010772:	31 ff                	xor    edi,edi
c0010774:	01 d9                	add    ecx,ebx
c0010776:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010779:	83 fe 17             	cmp    esi,0x17
c001077c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010782:	75 28                	jne    c00107ac <VgaText::scrollScreen()+0x4c>
c0010784:	f7 c7 01 00 00 00    	test   edi,0x1
c001078a:	74 1c                	je     c00107a8 <VgaText::scrollScreen()+0x48>
c001078c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010793:	50                   	push   eax
c0010794:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001079b:	50                   	push   eax
c001079c:	e8 ad ff ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c00107a1:	5a                   	pop    edx
c00107a2:	5a                   	pop    edx
c00107a3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107a6:	eb 04                	jmp    c00107ac <VgaText::scrollScreen()+0x4c>
c00107a8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107ac:	47                   	inc    edi
c00107ad:	41                   	inc    ecx
c00107ae:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107b4:	75 c0                	jne    c0010776 <VgaText::scrollScreen()+0x16>
c00107b6:	46                   	inc    esi
c00107b7:	83 fe 18             	cmp    esi,0x18
c00107ba:	75 b0                	jne    c001076c <VgaText::scrollScreen()+0xc>
c00107bc:	39 1d 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,ebx
c00107c2:	75 24                	jne    c00107e8 <VgaText::scrollScreen()+0x88>
c00107c4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107cb:	74 08                	je     c00107d5 <VgaText::scrollScreen()+0x75>
c00107cd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107d3:	eb 13                	jmp    c00107e8 <VgaText::scrollScreen()+0x88>
c00107d5:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107db:	85 c0                	test   eax,eax
c00107dd:	74 09                	je     c00107e8 <VgaText::scrollScreen()+0x88>
c00107df:	83 ec 0c             	sub    esp,0xc
c00107e2:	53                   	push   ebx
c00107e3:	ff d0                	call   eax
c00107e5:	83 c4 10             	add    esp,0x10
c00107e8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107ec:	5b                   	pop    ebx
c00107ed:	5e                   	pop    esi
c00107ee:	5f                   	pop    edi
c00107ef:	e9 1e fe ff ff       	jmp    c0010612 <VgaText::updateCursor()>

c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107f9:	c1 e0 08             	shl    eax,0x8
c00107fc:	89 c2                	mov    edx,eax
c00107fe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010803:	09 d0                	or     eax,edx
c0010805:	c3                   	ret    

c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010806:	53                   	push   ebx
c0010807:	83 ec 08             	sub    esp,0x8
c001080a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001080e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010813:	50                   	push   eax
c0010814:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010819:	50                   	push   eax
c001081a:	e8 2f ff ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c001081f:	5a                   	pop    edx
c0010820:	0f b6 c0             	movzx  eax,al
c0010823:	5b                   	pop    ebx
c0010824:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010829:	50                   	push   eax
c001082a:	53                   	push   ebx
c001082b:	e8 c4 ff ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010830:	5a                   	pop    edx
c0010831:	5a                   	pop    edx
c0010832:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010838:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001083c:	0f b7 d2             	movzx  edx,dx
c001083f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010844:	39 0d 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,ecx
c001084a:	75 14                	jne    c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001084c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010852:	85 c0                	test   eax,eax
c0010854:	74 0a                	je     c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010856:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001085a:	83 c4 08             	add    esp,0x8
c001085d:	5b                   	pop    ebx
c001085e:	ff e0                	jmp    eax
c0010860:	83 c4 08             	add    esp,0x8
c0010863:	5b                   	pop    ebx
c0010864:	c3                   	ret    
c0010865:	90                   	nop

c0010866 <VgaText::getCursorX()>:
c0010866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010870:	c3                   	ret    
c0010871:	90                   	nop

c0010872 <VgaText::getCursorY()>:
c0010872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010876:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001087c:	c3                   	ret    
c001087d:	90                   	nop

c001087e <VgaText::setCursor(int, int)>:
c001087e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010882:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010886:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001088c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010890:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010896:	e9 77 fd ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c001089b:	90                   	nop

c001089c <VgaText::setCursorX(int)>:
c001089c:	83 ec 10             	sub    esp,0x10
c001089f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108a3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ad:	50                   	push   eax
c00108ae:	e8 cb ff ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00108b3:	83 c4 1c             	add    esp,0x1c
c00108b6:	c3                   	ret    
c00108b7:	90                   	nop

c00108b8 <VgaText::setCursorY(int)>:
c00108b8:	83 ec 10             	sub    esp,0x10
c00108bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108c3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108c9:	50                   	push   eax
c00108ca:	e8 af ff ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00108cf:	83 c4 1c             	add    esp,0x1c
c00108d2:	c3                   	ret    
c00108d3:	90                   	nop

c00108d4 <VgaText::incrementCursor(bool)>:
c00108d4:	56                   	push   esi
c00108d5:	53                   	push   ebx
c00108d6:	51                   	push   ecx
c00108d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108df:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108e5:	40                   	inc    eax
c00108e6:	83 f8 50             	cmp    eax,0x50
c00108e9:	74 08                	je     c00108f3 <VgaText::incrementCursor(bool)+0x1f>
c00108eb:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108f1:	eb 33                	jmp    c0010926 <VgaText::incrementCursor(bool)+0x52>
c00108f3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108f9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010903:	8d 50 01             	lea    edx,[eax+0x1]
c0010906:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001090c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010912:	75 12                	jne    c0010926 <VgaText::incrementCursor(bool)+0x52>
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001091d:	53                   	push   ebx
c001091e:	e8 3d fe ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010923:	83 c4 10             	add    esp,0x10
c0010926:	89 f0                	mov    eax,esi
c0010928:	84 c0                	test   al,al
c001092a:	74 0c                	je     c0010938 <VgaText::incrementCursor(bool)+0x64>
c001092c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010930:	5a                   	pop    edx
c0010931:	5b                   	pop    ebx
c0010932:	5e                   	pop    esi
c0010933:	e9 da fc ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010938:	58                   	pop    eax
c0010939:	5b                   	pop    ebx
c001093a:	5e                   	pop    esi
c001093b:	c3                   	ret    

c001093c <VgaText::updateRAMUsageDisplay(int)>:
c001093c:	56                   	push   esi
c001093d:	8b 35 a0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4a0
c0010943:	53                   	push   ebx
c0010944:	bb 0a 00 00 00       	mov    ebx,0xa
c0010949:	6a 0f                	push   0xf
c001094b:	6a 00                	push   0x0
c001094d:	e8 fc fd ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c0010952:	5a                   	pop    edx
c0010953:	59                   	pop    ecx
c0010954:	0f b6 c8             	movzx  ecx,al
c0010957:	51                   	push   ecx
c0010958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095c:	99                   	cdq    
c001095d:	f7 fb                	idiv   ebx
c001095f:	89 d3                	mov    ebx,edx
c0010961:	83 c0 30             	add    eax,0x30
c0010964:	83 c3 30             	add    ebx,0x30
c0010967:	0f be c0             	movsx  eax,al
c001096a:	0f b6 db             	movzx  ebx,bl
c001096d:	50                   	push   eax
c001096e:	e8 81 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010973:	5a                   	pop    edx
c0010974:	5a                   	pop    edx
c0010975:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001097c:	51                   	push   ecx
c001097d:	53                   	push   ebx
c001097e:	e8 71 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010983:	5b                   	pop    ebx
c0010984:	5a                   	pop    edx
c0010985:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001098c:	51                   	push   ecx
c001098d:	6a 25                	push   0x25
c001098f:	e8 60 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010994:	59                   	pop    ecx
c0010995:	5b                   	pop    ebx
c0010996:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001099d:	5b                   	pop    ebx
c001099e:	5e                   	pop    esi
c001099f:	c3                   	ret    

c00109a0 <VgaText::updateDiskUsage()>:
c00109a0:	55                   	push   ebp
c00109a1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109a6:	57                   	push   edi
c00109a7:	8b 3d a0 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4a0
c00109ad:	56                   	push   esi
c00109ae:	53                   	push   ebx
c00109af:	6a 0f                	push   0xf
c00109b1:	6a 00                	push   0x0
c00109b3:	e8 96 fd ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c00109b8:	5a                   	pop    edx
c00109b9:	0f b6 d8             	movzx  ebx,al
c00109bc:	59                   	pop    ecx
c00109bd:	8b 35 c8 28 03 c0    	mov    esi,DWORD PTR ds:0xc00328c8
c00109c3:	53                   	push   ebx
c00109c4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109c9:	89 f0                	mov    eax,esi
c00109cb:	99                   	cdq    
c00109cc:	f7 fd                	idiv   ebp
c00109ce:	99                   	cdq    
c00109cf:	f7 f9                	idiv   ecx
c00109d1:	8d 42 30             	lea    eax,[edx+0x30]
c00109d4:	0f b6 c0             	movzx  eax,al
c00109d7:	50                   	push   eax
c00109d8:	e8 17 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109dd:	5d                   	pop    ebp
c00109de:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109e3:	5a                   	pop    edx
c00109e4:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109e8:	53                   	push   ebx
c00109e9:	89 f0                	mov    eax,esi
c00109eb:	99                   	cdq    
c00109ec:	f7 fd                	idiv   ebp
c00109ee:	99                   	cdq    
c00109ef:	f7 f9                	idiv   ecx
c00109f1:	8d 42 30             	lea    eax,[edx+0x30]
c00109f4:	0f b6 c0             	movzx  eax,al
c00109f7:	50                   	push   eax
c00109f8:	e8 f7 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109fd:	5d                   	pop    ebp
c00109fe:	bd 64 00 00 00       	mov    ebp,0x64
c0010a03:	5a                   	pop    edx
c0010a04:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a0b:	53                   	push   ebx
c0010a0c:	89 f0                	mov    eax,esi
c0010a0e:	99                   	cdq    
c0010a0f:	f7 fd                	idiv   ebp
c0010a11:	99                   	cdq    
c0010a12:	f7 f9                	idiv   ecx
c0010a14:	8d 42 30             	lea    eax,[edx+0x30]
c0010a17:	0f b6 c0             	movzx  eax,al
c0010a1a:	50                   	push   eax
c0010a1b:	e8 d4 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a20:	5d                   	pop    ebp
c0010a21:	5a                   	pop    edx
c0010a22:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a29:	53                   	push   ebx
c0010a2a:	89 f0                	mov    eax,esi
c0010a2c:	99                   	cdq    
c0010a2d:	f7 f9                	idiv   ecx
c0010a2f:	89 d6                	mov    esi,edx
c0010a31:	99                   	cdq    
c0010a32:	f7 f9                	idiv   ecx
c0010a34:	8d 42 30             	lea    eax,[edx+0x30]
c0010a37:	0f b6 c0             	movzx  eax,al
c0010a3a:	50                   	push   eax
c0010a3b:	e8 b4 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a40:	5d                   	pop    ebp
c0010a41:	5a                   	pop    edx
c0010a42:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a49:	53                   	push   ebx
c0010a4a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a4d:	0f b6 f0             	movzx  esi,al
c0010a50:	56                   	push   esi
c0010a51:	e8 9e fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a56:	5e                   	pop    esi
c0010a57:	8b 35 c4 28 03 c0    	mov    esi,DWORD PTR ds:0xc00328c4
c0010a5d:	5d                   	pop    ebp
c0010a5e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a65:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a6a:	53                   	push   ebx
c0010a6b:	89 f0                	mov    eax,esi
c0010a6d:	99                   	cdq    
c0010a6e:	f7 fd                	idiv   ebp
c0010a70:	99                   	cdq    
c0010a71:	f7 f9                	idiv   ecx
c0010a73:	8d 42 30             	lea    eax,[edx+0x30]
c0010a76:	0f b6 c0             	movzx  eax,al
c0010a79:	50                   	push   eax
c0010a7a:	e8 75 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7f:	5a                   	pop    edx
c0010a80:	5d                   	pop    ebp
c0010a81:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a88:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a8d:	53                   	push   ebx
c0010a8e:	89 f0                	mov    eax,esi
c0010a90:	99                   	cdq    
c0010a91:	f7 fd                	idiv   ebp
c0010a93:	99                   	cdq    
c0010a94:	f7 f9                	idiv   ecx
c0010a96:	8d 42 30             	lea    eax,[edx+0x30]
c0010a99:	0f b6 c0             	movzx  eax,al
c0010a9c:	50                   	push   eax
c0010a9d:	e8 52 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa2:	5a                   	pop    edx
c0010aa3:	5d                   	pop    ebp
c0010aa4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aab:	bd 64 00 00 00       	mov    ebp,0x64
c0010ab0:	53                   	push   ebx
c0010ab1:	89 f0                	mov    eax,esi
c0010ab3:	99                   	cdq    
c0010ab4:	f7 fd                	idiv   ebp
c0010ab6:	99                   	cdq    
c0010ab7:	f7 f9                	idiv   ecx
c0010ab9:	83 c2 30             	add    edx,0x30
c0010abc:	0f b6 d2             	movzx  edx,dl
c0010abf:	52                   	push   edx
c0010ac0:	e8 2f fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ac5:	5a                   	pop    edx
c0010ac6:	5d                   	pop    ebp
c0010ac7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ace:	53                   	push   ebx
c0010acf:	89 f0                	mov    eax,esi
c0010ad1:	99                   	cdq    
c0010ad2:	f7 f9                	idiv   ecx
c0010ad4:	89 d6                	mov    esi,edx
c0010ad6:	99                   	cdq    
c0010ad7:	f7 f9                	idiv   ecx
c0010ad9:	8d 42 30             	lea    eax,[edx+0x30]
c0010adc:	0f b6 c0             	movzx  eax,al
c0010adf:	50                   	push   eax
c0010ae0:	e8 0f fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae5:	5a                   	pop    edx
c0010ae6:	59                   	pop    ecx
c0010ae7:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010aee:	53                   	push   ebx
c0010aef:	8d 46 30             	lea    eax,[esi+0x30]
c0010af2:	0f b6 f0             	movzx  esi,al
c0010af5:	56                   	push   esi
c0010af6:	e8 f9 fc ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010afb:	5b                   	pop    ebx
c0010afc:	5e                   	pop    esi
c0010afd:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b04:	5b                   	pop    ebx
c0010b05:	5e                   	pop    esi
c0010b06:	5f                   	pop    edi
c0010b07:	5d                   	pop    ebp
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <VgaText::updateTitle()>:
c0010b0a:	53                   	push   ebx
c0010b0b:	31 c0                	xor    eax,eax
c0010b0d:	83 ec 58             	sub    esp,0x58
c0010b10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b14:	89 e1                	mov    ecx,esp
c0010b16:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b1a:	40                   	inc    eax
c0010b1b:	83 f8 50             	cmp    eax,0x50
c0010b1e:	75 f6                	jne    c0010b16 <VgaText::updateTitle()+0xc>
c0010b20:	31 c0                	xor    eax,eax
c0010b22:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b29:	84 db                	test   bl,bl
c0010b2b:	74 06                	je     c0010b33 <VgaText::updateTitle()+0x29>
c0010b2d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b30:	40                   	inc    eax
c0010b31:	eb ef                	jmp    c0010b22 <VgaText::updateTitle()+0x18>
c0010b33:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b39:	85 c0                	test   eax,eax
c0010b3b:	74 09                	je     c0010b46 <VgaText::updateTitle()+0x3c>
c0010b3d:	53                   	push   ebx
c0010b3e:	53                   	push   ebx
c0010b3f:	51                   	push   ecx
c0010b40:	52                   	push   edx
c0010b41:	ff d0                	call   eax
c0010b43:	83 c4 10             	add    esp,0x10
c0010b46:	e8 55 fe ff ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0010b4b:	83 c4 58             	add    esp,0x58
c0010b4e:	5b                   	pop    ebx
c0010b4f:	c3                   	ret    

c0010b50 <VgaText::setTitleTextColour(VgaColour)>:
c0010b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b58:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b5e:	eb aa                	jmp    c0010b0a <VgaText::updateTitle()>

c0010b60 <VgaText::setTitleColour(VgaColour)>:
c0010b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b68:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b6e:	eb 9a                	jmp    c0010b0a <VgaText::updateTitle()>

c0010b70 <VgaText::setTitle(char*)>:
c0010b70:	53                   	push   ebx
c0010b71:	83 ec 10             	sub    esp,0x10
c0010b74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b82:	50                   	push   eax
c0010b83:	e8 b4 fc fe ff       	call   c000083c <strcpy>
c0010b88:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b8c:	83 c4 18             	add    esp,0x18
c0010b8f:	5b                   	pop    ebx
c0010b90:	e9 75 ff ff ff       	jmp    c0010b0a <VgaText::updateTitle()>
c0010b95:	90                   	nop

c0010b96 <VgaText::decrementCursor(bool)>:
c0010b96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b9e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010ba4:	85 c0                	test   eax,eax
c0010ba6:	74 07                	je     c0010baf <VgaText::decrementCursor(bool)+0x19>
c0010ba8:	48                   	dec    eax
c0010ba9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010baf:	84 c9                	test   cl,cl
c0010bb1:	74 09                	je     c0010bbc <VgaText::decrementCursor(bool)+0x26>
c0010bb3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bb7:	e9 56 fa ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010bbc:	c3                   	ret    
c0010bbd:	90                   	nop

c0010bbe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bbe:	53                   	push   ebx
c0010bbf:	83 ec 08             	sub    esp,0x8
c0010bc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bd2:	3c 07                	cmp    al,0x7
c0010bd4:	75 2a                	jne    c0010c00 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bd6:	a1 f4 e6 02 c0       	mov    eax,ds:0xc002e6f4
c0010bdb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010be3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010beb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bf7:	83 c4 08             	add    esp,0x8
c0010bfa:	5b                   	pop    ebx
c0010bfb:	e9 a4 30 00 00       	jmp    c0013ca4 <Buzzer::beep(int, int, bool)>
c0010c00:	3c 0d                	cmp    al,0xd
c0010c02:	75 0c                	jne    c0010c10 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c04:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c0e:	eb 3b                	jmp    c0010c4b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c10:	3c 0a                	cmp    al,0xa
c0010c12:	75 40                	jne    c0010c54 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c14:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c1a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c24:	8d 50 01             	lea    edx,[eax+0x1]
c0010c27:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c2d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c33:	75 12                	jne    c0010c47 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c35:	83 ec 0c             	sub    esp,0xc
c0010c38:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c3e:	53                   	push   ebx
c0010c3f:	e8 1c fb ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c4b:	83 c4 08             	add    esp,0x8
c0010c4e:	5b                   	pop    ebx
c0010c4f:	e9 be f9 ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010c54:	3c 08                	cmp    al,0x8
c0010c56:	75 31                	jne    c0010c89 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c58:	50                   	push   eax
c0010c59:	50                   	push   eax
c0010c5a:	6a 01                	push   0x1
c0010c5c:	53                   	push   ebx
c0010c5d:	e8 34 ff ff ff       	call   c0010b96 <VgaText::decrementCursor(bool)>
c0010c62:	5a                   	pop    edx
c0010c63:	59                   	pop    ecx
c0010c64:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c6a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c70:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c76:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c7c:	6a 20                	push   0x20
c0010c7e:	53                   	push   ebx
c0010c7f:	e8 82 fb ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c84:	83 c4 28             	add    esp,0x28
c0010c87:	5b                   	pop    ebx
c0010c88:	c3                   	ret    
c0010c89:	83 ec 08             	sub    esp,0x8
c0010c8c:	0f be c0             	movsx  eax,al
c0010c8f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c95:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c9b:	51                   	push   ecx
c0010c9c:	52                   	push   edx
c0010c9d:	50                   	push   eax
c0010c9e:	53                   	push   ebx
c0010c9f:	e8 62 fb ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ca4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ca8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cb0:	83 c4 28             	add    esp,0x28
c0010cb3:	5b                   	pop    ebx
c0010cb4:	e9 1b fc ff ff       	jmp    c00108d4 <VgaText::incrementCursor(bool)>
c0010cb9:	90                   	nop

c0010cba <VgaText::isShowingCursor()>:
c0010cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cbe:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cc4:	c3                   	ret    
c0010cc5:	90                   	nop

c0010cc6 <VgaText::isBlinkDisabled()>:
c0010cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cca:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cd0:	83 f0 01             	xor    eax,0x1
c0010cd3:	c3                   	ret    

c0010cd4 <VgaText::setCursorHeight(int)>:
c0010cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cdc:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010ce2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010ce9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ced:	e9 3a f9 ff ff       	jmp    c001062c <VgaText::showCursor(bool)>

c0010cf2 <VgaText::getCursorHeight()>:
c0010cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cfc:	c3                   	ret    

c0010cfd <setActiveTerminal(VgaText*)>:
c0010cfd:	53                   	push   ebx
c0010cfe:	83 ec 08             	sub    esp,0x8
c0010d01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d05:	85 db                	test   ebx,ebx
c0010d07:	75 11                	jne    c0010d1a <setActiveTerminal(VgaText*)+0x1d>
c0010d09:	c7 44 24 10 6c a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a46c
c0010d11:	83 c4 08             	add    esp,0x8
c0010d14:	5b                   	pop    ebx
c0010d15:	e9 65 99 00 00       	jmp    c001a67f <Krnl::panic(char const*)>
c0010d1a:	50                   	push   eax
c0010d1b:	50                   	push   eax
c0010d1c:	53                   	push   ebx
c0010d1d:	68 7a a4 02 c0       	push   0xc002a47a
c0010d22:	e8 7e 21 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0010d27:	a1 44 e6 02 c0       	mov    eax,ds:0xc002e644
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	85 c0                	test   eax,eax
c0010d31:	74 0c                	je     c0010d3f <setActiveTerminal(VgaText*)+0x42>
c0010d33:	83 ec 0c             	sub    esp,0xc
c0010d36:	50                   	push   eax
c0010d37:	e8 d6 f8 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010d3c:	83 c4 10             	add    esp,0x10
c0010d3f:	89 1d 44 e6 02 c0    	mov    DWORD PTR ds:0xc002e644,ebx
c0010d45:	51                   	push   ecx
c0010d46:	51                   	push   ecx
c0010d47:	53                   	push   ebx
c0010d48:	68 92 a4 02 c0       	push   0xc002a492
c0010d4d:	e8 53 21 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0010d52:	83 c4 0c             	add    esp,0xc
c0010d55:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d5b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d61:	53                   	push   ebx
c0010d62:	e8 17 fb ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c0010d67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6a:	e8 57 ff ff ff       	call   c0010cc6 <VgaText::isBlinkDisabled()>
c0010d6f:	5a                   	pop    edx
c0010d70:	0f b6 c0             	movzx  eax,al
c0010d73:	59                   	pop    ecx
c0010d74:	50                   	push   eax
c0010d75:	53                   	push   ebx
c0010d76:	e8 c1 f8 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c0010d7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7e:	e8 6f ff ff ff       	call   c0010cf2 <VgaText::getCursorHeight()>
c0010d83:	5a                   	pop    edx
c0010d84:	59                   	pop    ecx
c0010d85:	50                   	push   eax
c0010d86:	53                   	push   ebx
c0010d87:	e8 48 ff ff ff       	call   c0010cd4 <VgaText::setCursorHeight(int)>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d96:	75 0a                	jne    c0010da2 <setActiveTerminal(VgaText*)+0xa5>
c0010d98:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010da2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010da6:	83 c4 08             	add    esp,0x8
c0010da9:	5b                   	pop    ebx
c0010daa:	e9 0f f8 ff ff       	jmp    c00105be <VgaText::load()>

c0010daf <doTerminalCycle()>:
c0010daf:	83 ec 18             	sub    esp,0x18
c0010db2:	a1 40 e6 02 c0       	mov    eax,ds:0xc002e640
c0010db7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dbd:	50                   	push   eax
c0010dbe:	a3 40 e6 02 c0       	mov    ds:0xc002e640,eax
c0010dc3:	e8 35 ff ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c0010dc8:	83 c4 1c             	add    esp,0x1c
c0010dcb:	c3                   	ret    

c0010dcc <VgaText::doUpdate()>:
c0010dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dd6:	85 c0                	test   eax,eax
c0010dd8:	74 02                	je     c0010ddc <VgaText::doUpdate()+0x10>
c0010dda:	ff e0                	jmp    eax
c0010ddc:	c3                   	ret    
c0010ddd:	90                   	nop

c0010dde <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dde:	55                   	push   ebp
c0010ddf:	57                   	push   edi
c0010de0:	56                   	push   esi
c0010de1:	53                   	push   ebx
c0010de2:	83 ec 1c             	sub    esp,0x1c
c0010de5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010de9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dee:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010df5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010df8:	50                   	push   eax
c0010df9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dfe:	50                   	push   eax
c0010dff:	e8 4a f9 ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e04:	59                   	pop    ecx
c0010e05:	0f b6 c0             	movzx  eax,al
c0010e08:	5b                   	pop    ebx
c0010e09:	31 c9                	xor    ecx,ecx
c0010e0b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e13:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e17:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e21:	0f b7 db             	movzx  ebx,bx
c0010e24:	01 db                	add    ebx,ebx
c0010e26:	01 fb                	add    ebx,edi
c0010e28:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e2b:	84 c0                	test   al,al
c0010e2d:	0f 84 38 01 00 00    	je     c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e33:	3c 0d                	cmp    al,0xd
c0010e35:	75 0f                	jne    c0010e46 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e37:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e41:	e9 1f 01 00 00       	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e46:	3c 0a                	cmp    al,0xa
c0010e48:	75 5b                	jne    c0010ea5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e4a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e50:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e5d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e63:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e69:	75 12                	jne    c0010e7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e6b:	83 ec 0c             	sub    esp,0xc
c0010e6e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e74:	55                   	push   ebp
c0010e75:	e8 e6 f8 ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010e7a:	83 c4 10             	add    esp,0x10
c0010e7d:	83 ec 0c             	sub    esp,0xc
c0010e80:	55                   	push   ebp
c0010e81:	e8 8c f7 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010e86:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e97:	31 c9                	xor    ecx,ecx
c0010e99:	0f b7 db             	movzx  ebx,bx
c0010e9c:	01 db                	add    ebx,ebx
c0010e9e:	01 fb                	add    ebx,edi
c0010ea0:	e9 c0 00 00 00       	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ea5:	3c 08                	cmp    al,0x8
c0010ea7:	75 4e                	jne    c0010ef7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ea9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ead:	53                   	push   ebx
c0010eae:	53                   	push   ebx
c0010eaf:	6a 01                	push   0x1
c0010eb1:	55                   	push   ebp
c0010eb2:	e8 df fc ff ff       	call   c0010b96 <VgaText::decrementCursor(bool)>
c0010eb7:	58                   	pop    eax
c0010eb8:	5a                   	pop    edx
c0010eb9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ebf:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ec5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ecb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ed1:	6a 20                	push   0x20
c0010ed3:	55                   	push   ebp
c0010ed4:	e8 2d f9 ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee1:	83 c4 20             	add    esp,0x20
c0010ee4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010eee:	0f b7 db             	movzx  ebx,bx
c0010ef1:	01 db                	add    ebx,ebx
c0010ef3:	01 fb                	add    ebx,edi
c0010ef5:	eb 6e                	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef7:	51                   	push   ecx
c0010ef8:	51                   	push   ecx
c0010ef9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010efd:	50                   	push   eax
c0010efe:	e8 f1 f8 ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f09:	39 2d 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,ebp
c0010f0f:	75 2a                	jne    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f11:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f17:	85 c0                	test   eax,eax
c0010f19:	74 20                	je     c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f1b:	52                   	push   edx
c0010f1c:	52                   	push   edx
c0010f1d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f23:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f31:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f34:	51                   	push   ecx
c0010f35:	55                   	push   ebp
c0010f36:	ff d0                	call   eax
c0010f38:	83 c4 20             	add    esp,0x20
c0010f3b:	83 c3 02             	add    ebx,0x2
c0010f3e:	50                   	push   eax
c0010f3f:	50                   	push   eax
c0010f40:	6a 00                	push   0x0
c0010f42:	55                   	push   ebp
c0010f43:	e8 8c f9 ff ff       	call   c00108d4 <VgaText::incrementCursor(bool)>
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f52:	75 0f                	jne    c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f54:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f5c:	0f b7 db             	movzx  ebx,bx
c0010f5f:	01 db                	add    ebx,ebx
c0010f61:	01 fb                	add    ebx,edi
c0010f63:	b1 01                	mov    cl,0x1
c0010f65:	46                   	inc    esi
c0010f66:	e9 bd fe ff ff       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f6b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f6f:	83 ec 0c             	sub    esp,0xc
c0010f72:	55                   	push   ebp
c0010f73:	e8 9a f6 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f7f:	84 c9                	test   cl,cl
c0010f81:	74 0c                	je     c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f83:	83 ec 0c             	sub    esp,0xc
c0010f86:	55                   	push   ebp
c0010f87:	e8 40 fe ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010f8c:	83 c4 10             	add    esp,0x10
c0010f8f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f96:	83 c4 1c             	add    esp,0x1c
c0010f99:	5b                   	pop    ebx
c0010f9a:	5e                   	pop    esi
c0010f9b:	5f                   	pop    edi
c0010f9c:	5d                   	pop    ebp
c0010f9d:	c3                   	ret    

c0010f9e <VgaText::clearScreen()>:
c0010f9e:	57                   	push   edi
c0010f9f:	56                   	push   esi
c0010fa0:	31 f6                	xor    esi,esi
c0010fa2:	53                   	push   ebx
c0010fa3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fa7:	52                   	push   edx
c0010fa8:	6a 00                	push   0x0
c0010faa:	6a 00                	push   0x0
c0010fac:	53                   	push   ebx
c0010fad:	e8 cc f8 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c0010fb2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fc2:	7e 26                	jle    c0010fea <VgaText::clearScreen()+0x4c>
c0010fc4:	31 ff                	xor    edi,edi
c0010fc6:	50                   	push   eax
c0010fc7:	50                   	push   eax
c0010fc8:	56                   	push   esi
c0010fc9:	57                   	push   edi
c0010fca:	47                   	inc    edi
c0010fcb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fd1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fd7:	6a 20                	push   0x20
c0010fd9:	53                   	push   ebx
c0010fda:	e8 27 f8 ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fdf:	83 c4 20             	add    esp,0x20
c0010fe2:	83 ff 50             	cmp    edi,0x50
c0010fe5:	75 df                	jne    c0010fc6 <VgaText::clearScreen()+0x28>
c0010fe7:	46                   	inc    esi
c0010fe8:	eb d2                	jmp    c0010fbc <VgaText::clearScreen()+0x1e>
c0010fea:	83 ec 0c             	sub    esp,0xc
c0010fed:	53                   	push   ebx
c0010fee:	e8 d9 fd ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010ff3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010ffa:	83 c4 10             	add    esp,0x10
c0010ffd:	5b                   	pop    ebx
c0010ffe:	5e                   	pop    esi
c0010fff:	5f                   	pop    edi
c0011000:	c3                   	ret    
c0011001:	90                   	nop

c0011002 <VgaText::putchar(char)>:
c0011002:	56                   	push   esi
c0011003:	53                   	push   ebx
c0011004:	83 ec 14             	sub    esp,0x14
c0011007:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001100b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001100f:	3c 5b                	cmp    al,0x5b
c0011011:	75 21                	jne    c0011034 <VgaText::putchar(char)+0x32>
c0011013:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001101a:	74 28                	je     c0011044 <VgaText::putchar(char)+0x42>
c001101c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011025:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001102f:	e9 e2 00 00 00       	jmp    c0011116 <VgaText::putchar(char)+0x114>
c0011034:	3c 1b                	cmp    al,0x1b
c0011036:	75 0c                	jne    c0011044 <VgaText::putchar(char)+0x42>
c0011038:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001103f:	e9 d2 00 00 00       	jmp    c0011116 <VgaText::putchar(char)+0x114>
c0011044:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001104a:	84 c9                	test   cl,cl
c001104c:	0f 84 ab 00 00 00    	je     c00110fd <VgaText::putchar(char)+0xfb>
c0011052:	8d 50 c0             	lea    edx,[eax-0x40]
c0011055:	80 fa 3e             	cmp    dl,0x3e
c0011058:	0f 87 82 00 00 00    	ja     c00110e0 <VgaText::putchar(char)+0xde>
c001105e:	3c 6d                	cmp    al,0x6d
c0011060:	75 4d                	jne    c00110af <VgaText::putchar(char)+0xad>
c0011062:	31 f6                	xor    esi,esi
c0011064:	31 d2                	xor    edx,edx
c0011066:	31 c0                	xor    eax,eax
c0011068:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001106e:	7e 30                	jle    c00110a0 <VgaText::putchar(char)+0x9e>
c0011070:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011078:	80 fa 3b             	cmp    dl,0x3b
c001107b:	75 17                	jne    c0011094 <VgaText::putchar(char)+0x92>
c001107d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011081:	50                   	push   eax
c0011082:	53                   	push   ebx
c0011083:	e8 ee f5 ff ff       	call   c0010676 <VgaText::doANSI_SGR(int)>
c0011088:	59                   	pop    ecx
c0011089:	31 d2                	xor    edx,edx
c001108b:	58                   	pop    eax
c001108c:	31 c0                	xor    eax,eax
c001108e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011092:	eb 09                	jmp    c001109d <VgaText::putchar(char)+0x9b>
c0011094:	6b c0 0a             	imul   eax,eax,0xa
c0011097:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001109b:	88 ca                	mov    dl,cl
c001109d:	46                   	inc    esi
c001109e:	eb c8                	jmp    c0011068 <VgaText::putchar(char)+0x66>
c00110a0:	84 d2                	test   dl,dl
c00110a2:	74 31                	je     c00110d5 <VgaText::putchar(char)+0xd3>
c00110a4:	50                   	push   eax
c00110a5:	53                   	push   ebx
c00110a6:	e8 cb f5 ff ff       	call   c0010676 <VgaText::doANSI_SGR(int)>
c00110ab:	58                   	pop    eax
c00110ac:	5a                   	pop    edx
c00110ad:	eb 26                	jmp    c00110d5 <VgaText::putchar(char)+0xd3>
c00110af:	3c 4a                	cmp    al,0x4a
c00110b1:	75 22                	jne    c00110d5 <VgaText::putchar(char)+0xd3>
c00110b3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ba:	75 19                	jne    c00110d5 <VgaText::putchar(char)+0xd3>
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	53                   	push   ebx
c00110c0:	e8 d9 fe ff ff       	call   c0010f9e <VgaText::clearScreen()>
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	6a 00                	push   0x0
c00110ca:	6a 00                	push   0x0
c00110cc:	53                   	push   ebx
c00110cd:	e8 ac f7 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110de:	eb 36                	jmp    c0011116 <VgaText::putchar(char)+0x114>
c00110e0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110e6:	83 fa 0e             	cmp    edx,0xe
c00110e9:	7f 2b                	jg     c0011116 <VgaText::putchar(char)+0x114>
c00110eb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110ee:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110f4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110fb:	eb 19                	jmp    c0011116 <VgaText::putchar(char)+0x114>
c00110fd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011103:	0f be c0             	movsx  eax,al
c0011106:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001110c:	50                   	push   eax
c001110d:	53                   	push   ebx
c001110e:	e8 ab fa ff ff       	call   c0010bbe <VgaText::putchar(char, VgaColour, VgaColour)>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	83 c4 14             	add    esp,0x14
c0011119:	5b                   	pop    ebx
c001111a:	5e                   	pop    esi
c001111b:	c3                   	ret    

c001111c <VgaText::puts(char const*)>:
c001111c:	53                   	push   ebx
c001111d:	83 ec 08             	sub    esp,0x8
c0011120:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011124:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011127:	84 c0                	test   al,al
c0011129:	74 12                	je     c001113d <VgaText::puts(char const*)+0x21>
c001112b:	43                   	inc    ebx
c001112c:	51                   	push   ecx
c001112d:	51                   	push   ecx
c001112e:	50                   	push   eax
c001112f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011133:	e8 ca fe ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	eb e7                	jmp    c0011124 <VgaText::puts(char const*)+0x8>
c001113d:	83 c4 08             	add    esp,0x8
c0011140:	5b                   	pop    ebx
c0011141:	c3                   	ret    

c0011142 <VgaText::putx(unsigned int)>:
c0011142:	57                   	push   edi
c0011143:	b9 11 00 00 00       	mov    ecx,0x11
c0011148:	56                   	push   esi
c0011149:	be ae a4 02 c0       	mov    esi,0xc002a4ae
c001114e:	53                   	push   ebx
c001114f:	83 ec 20             	sub    esp,0x20
c0011152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011156:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001115a:	fc                   	cld    
c001115b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001115d:	be 08 00 00 00       	mov    esi,0x8
c0011162:	50                   	push   eax
c0011163:	50                   	push   eax
c0011164:	89 d8                	mov    eax,ebx
c0011166:	c1 e3 04             	shl    ebx,0x4
c0011169:	c1 e8 1c             	shr    eax,0x1c
c001116c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011171:	50                   	push   eax
c0011172:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011176:	e8 87 fe ff ff       	call   c0011002 <VgaText::putchar(char)>
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	4e                   	dec    esi
c001117f:	75 e1                	jne    c0011162 <VgaText::putx(unsigned int)+0x20>
c0011181:	83 c4 20             	add    esp,0x20
c0011184:	5b                   	pop    ebx
c0011185:	5e                   	pop    esi
c0011186:	5f                   	pop    edi
c0011187:	c3                   	ret    

c0011188 <VgaText::VgaText(char const*)>:
c0011188:	57                   	push   edi
c0011189:	56                   	push   esi
c001118a:	53                   	push   ebx
c001118b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118f:	83 ec 08             	sub    esp,0x8
c0011192:	6a 00                	push   0x0
c0011194:	50                   	push   eax
c0011195:	e8 6e 05 00 00       	call   c0011708 <UnixFile::UnixFile(int)>
c001119a:	83 c4 10             	add    esp,0x10
c001119d:	ba 14 a5 02 c0       	mov    edx,0xc002a514
c00111a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a6:	89 10                	mov    DWORD PTR [eax],edx
c00111a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ac:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ba:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111de:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ec:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011205:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001120c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011210:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011216:	bb 20 e6 02 c0       	mov    ebx,0xc002e620
c001121b:	b8 08 00 00 00       	mov    eax,0x8
c0011220:	fc                   	cld    
c0011221:	89 d7                	mov    edi,edx
c0011223:	89 de                	mov    esi,ebx
c0011225:	89 c1                	mov    ecx,eax
c0011227:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122d:	05 1e 10 00 00       	add    eax,0x101e
c0011232:	83 ec 08             	sub    esp,0x8
c0011235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011239:	50                   	push   eax
c001123a:	e8 fd f5 fe ff       	call   c000083c <strcpy>
c001123f:	83 c4 10             	add    esp,0x10
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011254:	83 c0 0c             	add    eax,0xc
c0011257:	83 ec 04             	sub    esp,0x4
c001125a:	68 00 0f 00 00       	push   0xf00
c001125f:	6a 00                	push   0x0
c0011261:	50                   	push   eax
c0011262:	e8 19 f5 fe ff       	call   c0000780 <memset>
c0011267:	83 c4 10             	add    esp,0x10
c001126a:	83 ec 04             	sub    esp,0x4
c001126d:	6a 00                	push   0x0
c001126f:	6a 07                	push   0x7
c0011271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011275:	e8 b4 f4 ff ff       	call   c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	83 ec 08             	sub    esp,0x8
c0011280:	6a 02                	push   0x2
c0011282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011286:	e8 49 fa ff ff       	call   c0010cd4 <VgaText::setCursorHeight(int)>
c001128b:	83 c4 10             	add    esp,0x10
c001128e:	83 ec 04             	sub    esp,0x4
c0011291:	6a 00                	push   0x0
c0011293:	6a 00                	push   0x0
c0011295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011299:	e8 e0 f5 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c001129e:	83 c4 10             	add    esp,0x10
c00112a1:	83 ec 08             	sub    esp,0x8
c00112a4:	6a 01                	push   0x1
c00112a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112aa:	e8 7d f3 ff ff       	call   c001062c <VgaText::showCursor(bool)>
c00112af:	83 c4 10             	add    esp,0x10
c00112b2:	83 ec 08             	sub    esp,0x8
c00112b5:	6a 01                	push   0x1
c00112b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112bb:	e8 7c f3 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c00112c0:	83 c4 10             	add    esp,0x10
c00112c3:	83 ec 0c             	sub    esp,0xc
c00112c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ca:	e8 cf fc ff ff       	call   c0010f9e <VgaText::clearScreen()>
c00112cf:	83 c4 10             	add    esp,0x10
c00112d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e1:	05 9e 10 00 00       	add    eax,0x109e
c00112e6:	83 ec 04             	sub    esp,0x4
c00112e9:	68 96 00 00 00       	push   0x96
c00112ee:	6a 00                	push   0x0
c00112f0:	50                   	push   eax
c00112f1:	e8 8a f4 fe ff       	call   c0000780 <memset>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112fd:	05 34 11 00 00       	add    eax,0x1134
c0011302:	83 ec 04             	sub    esp,0x4
c0011305:	68 2c 01 00 00       	push   0x12c
c001130a:	6a 00                	push   0x0
c001130c:	50                   	push   eax
c001130d:	e8 6e f4 fe ff       	call   c0000780 <memset>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	90                   	nop
c0011316:	5b                   	pop    ebx
c0011317:	5e                   	pop    esi
c0011318:	5f                   	pop    edi
c0011319:	c3                   	ret    

c001131a <VgaText::receiveKey(unsigned char)>:
c001131a:	55                   	push   ebp
c001131b:	57                   	push   edi
c001131c:	56                   	push   esi
c001131d:	53                   	push   ebx
c001131e:	83 ec 1c             	sub    esp,0x1c
c0011321:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011325:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011329:	84 db                	test   bl,bl
c001132b:	0f 84 c9 00 00 00    	je     c00113fa <VgaText::receiveKey(unsigned char)+0xe0>
c0011331:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011337:	80 fb 08             	cmp    bl,0x8
c001133a:	75 2c                	jne    c0011368 <VgaText::receiveKey(unsigned char)+0x4e>
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	57                   	push   edi
c0011340:	e8 57 f4 fe ff       	call   c000079c <strlen>
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	85 c0                	test   eax,eax
c001134a:	74 41                	je     c001138d <VgaText::receiveKey(unsigned char)+0x73>
c001134c:	50                   	push   eax
c001134d:	50                   	push   eax
c001134e:	6a 08                	push   0x8
c0011350:	56                   	push   esi
c0011351:	e8 ac fc ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011356:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011359:	e8 3e f4 fe ff       	call   c000079c <strlen>
c001135e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011366:	eb 22                	jmp    c001138a <VgaText::receiveKey(unsigned char)+0x70>
c0011368:	0f be c3             	movsx  eax,bl
c001136b:	52                   	push   edx
c001136c:	52                   	push   edx
c001136d:	50                   	push   eax
c001136e:	56                   	push   esi
c001136f:	e8 8e fc ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011374:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011378:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001137d:	59                   	pop    ecx
c001137e:	5d                   	pop    ebp
c001137f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011383:	50                   	push   eax
c0011384:	57                   	push   edi
c0011385:	e8 f2 f5 fe ff       	call   c000097c <strcat>
c001138a:	83 c4 10             	add    esp,0x10
c001138d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011394:	75 05                	jne    c001139b <VgaText::receiveKey(unsigned char)+0x81>
c0011396:	80 fb 0a             	cmp    bl,0xa
c0011399:	75 53                	jne    c00113ee <VgaText::receiveKey(unsigned char)+0xd4>
c001139b:	83 ec 0c             	sub    esp,0xc
c001139e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113a4:	53                   	push   ebx
c00113a5:	e8 f2 f3 fe ff       	call   c000079c <strlen>
c00113aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ad:	89 c5                	mov    ebp,eax
c00113af:	e8 e8 f3 fe ff       	call   c000079c <strlen>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113bb:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113c0:	76 10                	jbe    c00113d2 <VgaText::receiveKey(unsigned char)+0xb8>
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	68 bf a4 02 c0       	push   0xc002a4bf
c00113ca:	e8 b0 92 00 00       	call   c001a67f <Krnl::panic(char const*)>
c00113cf:	83 c4 10             	add    esp,0x10
c00113d2:	50                   	push   eax
c00113d3:	50                   	push   eax
c00113d4:	57                   	push   edi
c00113d5:	53                   	push   ebx
c00113d6:	e8 a1 f5 fe ff       	call   c000097c <strcat>
c00113db:	83 c4 0c             	add    esp,0xc
c00113de:	68 96 00 00 00       	push   0x96
c00113e3:	6a 00                	push   0x0
c00113e5:	57                   	push   edi
c00113e6:	e8 95 f3 fe ff       	call   c0000780 <memset>
c00113eb:	83 c4 10             	add    esp,0x10
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	56                   	push   esi
c00113f2:	e8 d5 f9 ff ff       	call   c0010dcc <VgaText::doUpdate()>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	83 c4 1c             	add    esp,0x1c
c00113fd:	5b                   	pop    ebx
c00113fe:	5e                   	pop    esi
c00113ff:	5f                   	pop    edi
c0011400:	5d                   	pop    ebp
c0011401:	c3                   	ret    

c0011402 <VgaText::write(unsigned long long, void*, int*)>:
c0011402:	55                   	push   ebp
c0011403:	57                   	push   edi
c0011404:	56                   	push   esi
c0011405:	53                   	push   ebx
c0011406:	83 ec 0c             	sub    esp,0xc
c0011409:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001140d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011411:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011415:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001141c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001141f:	39 eb                	cmp    ebx,ebp
c0011421:	74 13                	je     c0011436 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011423:	43                   	inc    ebx
c0011424:	50                   	push   eax
c0011425:	50                   	push   eax
c0011426:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001142a:	50                   	push   eax
c001142b:	56                   	push   esi
c001142c:	e8 d1 fb ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	eb e9                	jmp    c001141f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011436:	83 ec 0c             	sub    esp,0xc
c0011439:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011440:	56                   	push   esi
c0011441:	e8 86 f9 ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0011446:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001144a:	89 38                	mov    DWORD PTR [eax],edi
c001144c:	83 c4 1c             	add    esp,0x1c
c001144f:	31 c0                	xor    eax,eax
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	5f                   	pop    edi
c0011454:	5d                   	pop    ebp
c0011455:	c3                   	ret    

c0011456 <newTerminal(char*)>:
c0011456:	83 ec 28             	sub    esp,0x28
c0011459:	68 60 12 00 00       	push   0x1260
c001145e:	e8 e8 e3 ff ff       	call   c000f84b <malloc>
c0011463:	5a                   	pop    edx
c0011464:	59                   	pop    ecx
c0011465:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011469:	50                   	push   eax
c001146a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001146e:	e8 15 fd ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c0011473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011477:	83 c4 2c             	add    esp,0x2c
c001147a:	c3                   	ret    
c001147b:	90                   	nop

c001147c <TSS::TSS()>:
c001147c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011487:	90                   	nop
c0011488:	c3                   	ret    
c0011489:	90                   	nop

c001148a <TSS::setESP(unsigned long)>:
c001148a:	55                   	push   ebp
c001148b:	89 e5                	mov    ebp,esp
c001148d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011496:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011499:	90                   	nop
c001149a:	5d                   	pop    ebp
c001149b:	c3                   	ret    

c001149c <TSS::flush()>:
c001149c:	55                   	push   ebp
c001149d:	89 e5                	mov    ebp,esp
c001149f:	83 ec 10             	sub    esp,0x10
c00114a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114a7:	83 c8 03             	or     eax,0x3
c00114aa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114ae:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114b2:	66 89 d0             	mov    ax,dx
c00114b5:	0f 00 d8             	ltr    ax
c00114b8:	90                   	nop
c00114b9:	c9                   	leave  
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <TSS::setup(unsigned long, unsigned long)>:
c00114bc:	55                   	push   ebp
c00114bd:	89 e5                	mov    ebp,esp
c00114bf:	83 ec 18             	sub    esp,0x18
c00114c2:	83 ec 0c             	sub    esp,0xc
c00114c5:	6a 68                	push   0x68
c00114c7:	e8 7f e3 ff ff       	call   c000f84b <malloc>
c00114cc:	83 c4 10             	add    esp,0x10
c00114cf:	89 c2                	mov    edx,eax
c00114d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114dd:	83 ec 04             	sub    esp,0x4
c00114e0:	6a 68                	push   0x68
c00114e2:	6a 00                	push   0x0
c00114e4:	50                   	push   eax
c00114e5:	e8 96 f2 fe ff       	call   c0000780 <memset>
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ff:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001150e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011517:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011523:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011562:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001156e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001157e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011581:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011584:	0f 20 da             	mov    edx,cr3
c0011587:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001158a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001158d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011593:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	50                   	push   eax
c001159a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001159d:	50                   	push   eax
c001159e:	e8 83 da ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c00115a3:	83 c4 10             	add    esp,0x10
c00115a6:	83 ec 08             	sub    esp,0x8
c00115a9:	6a 68                	push   0x68
c00115ab:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115ae:	50                   	push   eax
c00115af:	e8 8e da ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115bb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115be:	83 e0 0f             	and    eax,0xf
c00115c1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115c4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115c7:	83 c8 40             	or     eax,0x40
c00115ca:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115cd:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00115d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d8:	05 78 01 00 00       	add    eax,0x178
c00115dd:	83 ec 04             	sub    esp,0x4
c00115e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115e3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115e6:	50                   	push   eax
c00115e7:	e8 8a da ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	89 c2                	mov    edx,eax
c00115f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f4:	89 10                	mov    DWORD PTR [eax],edx
c00115f6:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00115fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011601:	05 78 01 00 00       	add    eax,0x178
c0011606:	83 ec 0c             	sub    esp,0xc
c0011609:	50                   	push   eax
c001160a:	e8 ab da ff ff       	call   c000f0ba <GDT::flush()>
c001160f:	83 c4 10             	add    esp,0x10
c0011612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011615:	8b 00                	mov    eax,DWORD PTR [eax]
c0011617:	83 ec 08             	sub    esp,0x8
c001161a:	50                   	push   eax
c001161b:	68 28 a5 02 c0       	push   0xc002a528
c0011620:	e8 80 18 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162b:	8b 00                	mov    eax,DWORD PTR [eax]
c001162d:	c9                   	leave  
c001162e:	c3                   	ret    
c001162f:	90                   	nop

c0011630 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011634:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001163b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011640:	75 08                	jne    c001164a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011642:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011648:	eb 38                	jmp    c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001164a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001164f:	75 17                	jne    c0011668 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011656:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011659:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001165f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011661:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011665:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011668:	89 c1                	mov    ecx,eax
c001166a:	83 e1 fd             	and    ecx,0xfffffffd
c001166d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011673:	74 cd                	je     c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011675:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001167a:	83 e0 ef             	and    eax,0xffffffef
c001167d:	83 f8 08             	cmp    eax,0x8
c0011680:	76 c0                	jbe    c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011682:	31 c0                	xor    eax,eax
c0011684:	c3                   	ret    
c0011685:	90                   	nop

c0011686 <ReservedFilename::isAtty()>:
c0011686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001168d:	31 c0                	xor    eax,eax
c001168f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011695:	74 09                	je     c00116a0 <ReservedFilename::isAtty()+0x1a>
c0011697:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001169d:	0f 94 c0             	sete   al
c00116a0:	c3                   	ret    
c00116a1:	90                   	nop

c00116a2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116b1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116b6:	75 08                	jne    c00116c0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116b8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116be:	eb 3d                	jmp    c00116fd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116c0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116c5:	75 17                	jne    c00116de <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116cf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00116d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116db:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116de:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116e3:	75 04                	jne    c00116e9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116e5:	89 0a                	mov    DWORD PTR [edx],ecx
c00116e7:	eb 14                	jmp    c00116fd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116e9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116ee:	74 c8                	je     c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116f0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116f5:	83 e0 ef             	and    eax,0xffffffef
c00116f8:	83 f8 08             	cmp    eax,0x8
c00116fb:	76 bb                	jbe    c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116fd:	31 c0                	xor    eax,eax
c00116ff:	c3                   	ret    

c0011700 <UnixFile::getFileDescriptor()>:
c0011700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011707:	c3                   	ret    

c0011708 <UnixFile::UnixFile(int)>:
c0011708:	53                   	push   ebx
c0011709:	83 ec 28             	sub    esp,0x28
c001170c:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c0011711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011715:	89 10                	mov    DWORD PTR [eax],edx
c0011717:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001171f:	0f 8f 8c 01 00 00    	jg     c00118b1 <UnixFile::UnixFile(int)+0x1a9>
c0011725:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c001172a:	8d 50 01             	lea    edx,[eax+0x1]
c001172d:	89 15 00 d5 02 c0    	mov    DWORD PTR ds:0xc002d500,edx
c0011733:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011737:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001173a:	83 ec 08             	sub    esp,0x8
c001173d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011741:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011746:	e8 a5 70 01 00       	call   c00287f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	a0 d4 e6 02 c0       	mov    al,ds:0xc002e6d4
c0011753:	83 f0 01             	xor    eax,0x1
c0011756:	84 c0                	test   al,al
c0011758:	0f 84 54 01 00 00    	je     c00118b2 <UnixFile::UnixFile(int)+0x1aa>
c001175e:	c6 05 d4 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6d4,0x1
c0011765:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001176d:	83 ec 0c             	sub    esp,0xc
c0011770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011774:	e8 d2 e0 ff ff       	call   c000f84b <malloc>
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	89 c3                	mov    ebx,eax
c001177e:	83 ec 08             	sub    esp,0x8
c0011781:	68 03 ff ff 0f       	push   0xfffff03
c0011786:	53                   	push   ebx
c0011787:	e8 2c 01 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001178c:	83 c4 10             	add    esp,0x10
c001178f:	89 1d cc e6 02 c0    	mov    DWORD PTR ds:0xc002e6cc,ebx
c0011795:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001179d:	83 ec 0c             	sub    esp,0xc
c00117a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117a4:	e8 a2 e0 ff ff       	call   c000f84b <malloc>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	89 c3                	mov    ebx,eax
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	68 01 ff ff 0f       	push   0xfffff01
c00117b6:	53                   	push   ebx
c00117b7:	e8 fc 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	89 1d d0 e6 02 c0    	mov    DWORD PTR ds:0xc002e6d0,ebx
c00117c5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117cd:	83 ec 0c             	sub    esp,0xc
c00117d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117d4:	e8 72 e0 ff ff       	call   c000f84b <malloc>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	89 c3                	mov    ebx,eax
c00117de:	83 ec 08             	sub    esp,0x8
c00117e1:	68 00 ff ff 0f       	push   0xfffff00
c00117e6:	53                   	push   ebx
c00117e7:	e8 cc 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c00117ec:	83 c4 10             	add    esp,0x10
c00117ef:	89 1d c4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c4,ebx
c00117f5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117fd:	83 ec 0c             	sub    esp,0xc
c0011800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011804:	e8 42 e0 ff ff       	call   c000f84b <malloc>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	89 c3                	mov    ebx,eax
c001180e:	83 ec 08             	sub    esp,0x8
c0011811:	68 02 ff ff 0f       	push   0xfffff02
c0011816:	53                   	push   ebx
c0011817:	e8 9c 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 1d c8 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c8,ebx
c0011825:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001182d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011832:	7f 7e                	jg     c00118b2 <UnixFile::UnixFile(int)+0x1aa>
c0011834:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001183c:	83 ec 0c             	sub    esp,0xc
c001183f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011843:	e8 03 e0 ff ff       	call   c000f84b <malloc>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	89 c3                	mov    ebx,eax
c001184d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011851:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011856:	83 ec 08             	sub    esp,0x8
c0011859:	50                   	push   eax
c001185a:	53                   	push   ebx
c001185b:	e8 58 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c0011860:	83 c4 10             	add    esp,0x10
c0011863:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011867:	89 1c 85 a0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1960],ebx
c001186e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011876:	83 ec 0c             	sub    esp,0xc
c0011879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001187d:	e8 c9 df ff ff       	call   c000f84b <malloc>
c0011882:	83 c4 10             	add    esp,0x10
c0011885:	89 c3                	mov    ebx,eax
c0011887:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001188b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011890:	83 ec 08             	sub    esp,0x8
c0011893:	50                   	push   eax
c0011894:	53                   	push   ebx
c0011895:	e8 1e 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001189a:	83 c4 10             	add    esp,0x10
c001189d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a1:	89 1c 85 60 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19a0],ebx
c00118a8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ac:	e9 7c ff ff ff       	jmp    c001182d <UnixFile::UnixFile(int)+0x125>
c00118b1:	90                   	nop
c00118b2:	83 c4 28             	add    esp,0x28
c00118b5:	5b                   	pop    ebx
c00118b6:	c3                   	ret    
c00118b7:	90                   	nop

c00118b8 <ReservedFilename::ReservedFilename(int)>:
c00118b8:	83 ec 0c             	sub    esp,0xc
c00118bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118bf:	83 ec 08             	sub    esp,0x8
c00118c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c6:	50                   	push   eax
c00118c7:	e8 3c fe ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c00118cc:	83 c4 10             	add    esp,0x10
c00118cf:	ba 30 a6 02 c0       	mov    edx,0xc002a630
c00118d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d8:	89 10                	mov    DWORD PTR [eax],edx
c00118da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118e5:	90                   	nop
c00118e6:	83 c4 0c             	add    esp,0xc
c00118e9:	c3                   	ret    

c00118ea <UnixFile::~UnixFile()>:
c00118ea:	83 ec 1c             	sub    esp,0x1c
c00118ed:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c00118f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118f6:	89 10                	mov    DWORD PTR [eax],edx
c00118f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ff:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011904:	7f 73                	jg     c0011979 <UnixFile::~UnixFile()+0x8f>
c0011906:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011916:	e8 a9 6f 01 00       	call   c00288c4 <LinkedList<UnixFile>::getFirstElement()>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011922:	83 ec 0c             	sub    esp,0xc
c0011925:	68 d8 e6 02 c0       	push   0xc002e6d8
c001192a:	e8 9d 6f 01 00       	call   c00288cc <LinkedList<UnixFile>::removeFirst()>
c001192f:	83 c4 10             	add    esp,0x10
c0011932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011936:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001193a:	74 40                	je     c001197c <UnixFile::~UnixFile()+0x92>
c001193c:	83 ec 08             	sub    esp,0x8
c001193f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011943:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011948:	e8 a3 6e 01 00       	call   c00287f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001194d:	83 c4 10             	add    esp,0x10
c0011950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011954:	8d 50 01             	lea    edx,[eax+0x1]
c0011957:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001195b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011960:	0f 94 c0             	sete   al
c0011963:	84 c0                	test   al,al
c0011965:	74 a7                	je     c001190e <UnixFile::~UnixFile()+0x24>
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	68 ec a5 02 c0       	push   0xc002a5ec
c001196f:	e8 0b 8d 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0011974:	83 c4 10             	add    esp,0x10
c0011977:	eb 95                	jmp    c001190e <UnixFile::~UnixFile()+0x24>
c0011979:	90                   	nop
c001197a:	eb 01                	jmp    c001197d <UnixFile::~UnixFile()+0x93>
c001197c:	90                   	nop
c001197d:	90                   	nop
c001197e:	83 c4 1c             	add    esp,0x1c
c0011981:	c3                   	ret    

c0011982 <UnixFile::~UnixFile()>:
c0011982:	83 ec 0c             	sub    esp,0xc
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198c:	e8 59 ff ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	83 ec 08             	sub    esp,0x8
c0011997:	6a 0c                	push   0xc
c0011999:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001199d:	e8 23 14 00 00       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00119a2:	83 c4 10             	add    esp,0x10
c00119a5:	83 c4 0c             	add    esp,0xc
c00119a8:	c3                   	ret    
c00119a9:	90                   	nop

c00119aa <ReservedFilename::~ReservedFilename()>:
c00119aa:	83 ec 0c             	sub    esp,0xc
c00119ad:	ba 30 a6 02 c0       	mov    edx,0xc002a630
c00119b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b6:	89 10                	mov    DWORD PTR [eax],edx
c00119b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119bc:	83 ec 0c             	sub    esp,0xc
c00119bf:	50                   	push   eax
c00119c0:	e8 25 ff ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	90                   	nop
c00119c9:	83 c4 0c             	add    esp,0xc
c00119cc:	c3                   	ret    
c00119cd:	90                   	nop

c00119ce <ReservedFilename::~ReservedFilename()>:
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	83 ec 0c             	sub    esp,0xc
c00119d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d8:	e8 cd ff ff ff       	call   c00119aa <ReservedFilename::~ReservedFilename()>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	83 ec 08             	sub    esp,0x8
c00119e3:	6a 0c                	push   0xc
c00119e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e9:	e8 d7 13 00 00       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	83 c4 0c             	add    esp,0xc
c00119f4:	c3                   	ret    

c00119f5 <getFromFileDescriptor(int)>:
c00119f5:	53                   	push   ebx
c00119f6:	83 ec 08             	sub    esp,0x8
c00119f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119fd:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a03:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a09:	7f 2c                	jg     c0011a37 <getFromFileDescriptor(int)+0x42>
c0011a0b:	83 ec 0c             	sub    esp,0xc
c0011a0e:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011a13:	e8 ac 6e 01 00       	call   c00288c4 <LinkedList<UnixFile>::getFirstElement()>
c0011a18:	83 c4 10             	add    esp,0x10
c0011a1b:	85 c0                	test   eax,eax
c0011a1d:	75 04                	jne    c0011a23 <getFromFileDescriptor(int)+0x2e>
c0011a1f:	31 c0                	xor    eax,eax
c0011a21:	eb 6e                	jmp    c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a23:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a26:	74 69                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a28:	52                   	push   edx
c0011a29:	52                   	push   edx
c0011a2a:	50                   	push   eax
c0011a2b:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011a30:	e8 39 6f 01 00       	call   c002896e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a35:	eb e1                	jmp    c0011a18 <getFromFileDescriptor(int)+0x23>
c0011a37:	a1 cc e6 02 c0       	mov    eax,ds:0xc002e6cc
c0011a3c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a42:	74 4d                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a44:	a1 d0 e6 02 c0       	mov    eax,ds:0xc002e6d0
c0011a49:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a4f:	74 40                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a51:	a1 c8 e6 02 c0       	mov    eax,ds:0xc002e6c8
c0011a56:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a5c:	74 33                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a5e:	a1 c4 e6 02 c0       	mov    eax,ds:0xc002e6c4
c0011a63:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a69:	74 26                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a6b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a71:	83 f8 08             	cmp    eax,0x8
c0011a74:	77 09                	ja     c0011a7f <getFromFileDescriptor(int)+0x8a>
c0011a76:	8b 04 85 a0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1960]
c0011a7d:	eb 12                	jmp    c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a7f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a85:	83 fb 08             	cmp    ebx,0x8
c0011a88:	77 95                	ja     c0011a1f <getFromFileDescriptor(int)+0x2a>
c0011a8a:	8b 04 9d 60 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd19a0]
c0011a91:	83 c4 08             	add    esp,0x8
c0011a94:	5b                   	pop    ebx
c0011a95:	c3                   	ret    

c0011a96 <__static_initialization_and_destruction_0(int, int)>:
c0011a96:	83 ec 0c             	sub    esp,0xc
c0011a99:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a9e:	75 34                	jne    c0011ad4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aa0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011aa8:	75 2a                	jne    c0011ad4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aaa:	83 ec 0c             	sub    esp,0xc
c0011aad:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011ab2:	e8 e1 6c 01 00       	call   c0028798 <LinkedList<UnixFile>::LinkedList()>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	83 ec 04             	sub    esp,0x4
c0011abd:	68 7c d4 02 c0       	push   0xc002d47c
c0011ac2:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011ac7:	68 96 87 02 c0       	push   0xc0028796
c0011acc:	e8 6e 12 00 00       	call   c0012d3f <__cxa_atexit>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	90                   	nop
c0011ad5:	83 c4 0c             	add    esp,0xc
c0011ad8:	c3                   	ret    

c0011ad9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ad9:	83 ec 0c             	sub    esp,0xc
c0011adc:	83 ec 08             	sub    esp,0x8
c0011adf:	68 ff ff 00 00       	push   0xffff
c0011ae4:	6a 01                	push   0x1
c0011ae6:	e8 ab ff ff ff       	call   c0011a96 <__static_initialization_and_destruction_0(int, int)>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	83 c4 0c             	add    esp,0xc
c0011af1:	c3                   	ret    

c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011af2:	53                   	push   ebx
c0011af3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011af7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011afb:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b01:	89 c8                	mov    eax,ecx
c0011b03:	d1 e8                	shr    eax,1
c0011b05:	03 05 08 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d508
c0011b0b:	83 e1 01             	and    ecx,0x1
c0011b0e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b10:	75 09                	jne    c0011b1b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b12:	83 e2 f0             	and    edx,0xfffffff0
c0011b15:	09 da                	or     edx,ebx
c0011b17:	88 10                	mov    BYTE PTR [eax],dl
c0011b19:	5b                   	pop    ebx
c0011b1a:	c3                   	ret    
c0011b1b:	c1 e3 04             	shl    ebx,0x4
c0011b1e:	83 e2 0f             	and    edx,0xf
c0011b21:	09 da                	or     edx,ebx
c0011b23:	88 10                	mov    BYTE PTR [eax],dl
c0011b25:	5b                   	pop    ebx
c0011b26:	c3                   	ret    

c0011b27 <Virt::getPageState(unsigned long)>:
c0011b27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b2b:	8b 0d 08 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d508
c0011b31:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b37:	89 d0                	mov    eax,edx
c0011b39:	d1 e8                	shr    eax,1
c0011b3b:	83 e2 01             	and    edx,0x1
c0011b3e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b41:	75 04                	jne    c0011b47 <Virt::getPageState(unsigned long)+0x20>
c0011b43:	83 e0 0f             	and    eax,0xf
c0011b46:	c3                   	ret    
c0011b47:	c0 e8 04             	shr    al,0x4
c0011b4a:	c3                   	ret    

c0011b4b <Virt::allocateKernelVirtualPages(int)>:
c0011b4b:	55                   	push   ebp
c0011b4c:	31 ed                	xor    ebp,ebp
c0011b4e:	57                   	push   edi
c0011b4f:	56                   	push   esi
c0011b50:	53                   	push   ebx
c0011b51:	31 db                	xor    ebx,ebx
c0011b53:	83 ec 1c             	sub    esp,0x1c
c0011b56:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b5a:	8b 3d 04 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d504
c0011b60:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b65:	57                   	push   edi
c0011b66:	e8 bc ff ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0011b6b:	5a                   	pop    edx
c0011b6c:	84 c0                	test   al,al
c0011b6e:	75 3a                	jne    c0011baa <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b70:	85 db                	test   ebx,ebx
c0011b72:	75 02                	jne    c0011b76 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b74:	89 fd                	mov    ebp,edi
c0011b76:	43                   	inc    ebx
c0011b77:	39 f3                	cmp    ebx,esi
c0011b79:	74 5a                	je     c0011bd5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b7b:	47                   	inc    edi
c0011b7c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b82:	76 31                	jbe    c0011bb5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b84:	c7 05 04 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d504,0xc8000
c0011b8e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b93:	75 28                	jne    c0011bbd <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b95:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b9a:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b9f:	57                   	push   edi
c0011ba0:	e8 82 ff ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0011ba5:	5a                   	pop    edx
c0011ba6:	84 c0                	test   al,al
c0011ba8:	74 c6                	je     c0011b70 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011baa:	31 db                	xor    ebx,ebx
c0011bac:	47                   	inc    edi
c0011bad:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bb3:	77 cf                	ja     c0011b84 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bb5:	89 3d 04 d5 02 c0    	mov    DWORD PTR ds:0xc002d504,edi
c0011bbb:	eb a8                	jmp    c0011b65 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	68 44 a6 02 c0       	push   0xc002a644
c0011bc5:	e8 b5 8a 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0011bca:	8b 3d 04 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d504
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	eb 90                	jmp    c0011b65 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bd5:	89 2d 04 d5 02 c0    	mov    DWORD PTR ds:0xc002d504,ebp
c0011bdb:	4b                   	dec    ebx
c0011bdc:	74 5f                	je     c0011c3d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bde:	85 f6                	test   esi,esi
c0011be0:	74 3d                	je     c0011c1f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011be2:	89 e8                	mov    eax,ebp
c0011be4:	31 db                	xor    ebx,ebx
c0011be6:	8d 7e ff             	lea    edi,[esi-0x1]
c0011be9:	eb 14                	jmp    c0011bff <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011beb:	6a 01                	push   0x1
c0011bed:	43                   	inc    ebx
c0011bee:	50                   	push   eax
c0011bef:	e8 fe fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf4:	58                   	pop    eax
c0011bf5:	39 f3                	cmp    ebx,esi
c0011bf7:	5a                   	pop    edx
c0011bf8:	74 25                	je     c0011c1f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bfa:	a1 04 d5 02 c0       	mov    eax,ds:0xc002d504
c0011bff:	8d 50 01             	lea    edx,[eax+0x1]
c0011c02:	85 db                	test   ebx,ebx
c0011c04:	89 15 04 d5 02 c0    	mov    DWORD PTR ds:0xc002d504,edx
c0011c0a:	74 20                	je     c0011c2c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c0c:	39 df                	cmp    edi,ebx
c0011c0e:	75 db                	jne    c0011beb <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c10:	6a 03                	push   0x3
c0011c12:	43                   	inc    ebx
c0011c13:	50                   	push   eax
c0011c14:	e8 d9 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c19:	59                   	pop    ecx
c0011c1a:	39 f3                	cmp    ebx,esi
c0011c1c:	58                   	pop    eax
c0011c1d:	75 db                	jne    c0011bfa <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c1f:	83 c4 1c             	add    esp,0x1c
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	5b                   	pop    ebx
c0011c25:	c1 e0 0c             	shl    eax,0xc
c0011c28:	5e                   	pop    esi
c0011c29:	5f                   	pop    edi
c0011c2a:	5d                   	pop    ebp
c0011c2b:	c3                   	ret    
c0011c2c:	6a 02                	push   0x2
c0011c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c33:	50                   	push   eax
c0011c34:	e8 b9 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c39:	58                   	pop    eax
c0011c3a:	5a                   	pop    edx
c0011c3b:	eb bd                	jmp    c0011bfa <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c3d:	6a 04                	push   0x4
c0011c3f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c42:	55                   	push   ebp
c0011c43:	a3 04 d5 02 c0       	mov    ds:0xc002d504,eax
c0011c48:	e8 a5 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4d:	59                   	pop    ecx
c0011c4e:	89 e8                	mov    eax,ebp
c0011c50:	5b                   	pop    ebx
c0011c51:	c1 e0 0c             	shl    eax,0xc
c0011c54:	83 c4 1c             	add    esp,0x1c
c0011c57:	5b                   	pop    ebx
c0011c58:	5e                   	pop    esi
c0011c59:	5f                   	pop    edi
c0011c5a:	5d                   	pop    ebp
c0011c5b:	c3                   	ret    

c0011c5c <Virt::freeSwapfilePage(unsigned long)>:
c0011c5c:	53                   	push   ebx
c0011c5d:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c0011c63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c67:	b8 01 00 00 00       	mov    eax,0x1
c0011c6c:	89 cb                	mov    ebx,ecx
c0011c6e:	d3 e0                	shl    eax,cl
c0011c70:	c1 eb 05             	shr    ebx,0x5
c0011c73:	f7 d0                	not    eax
c0011c75:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c78:	5b                   	pop    ebx
c0011c79:	c3                   	ret    

c0011c7a <Virt::swapIDToSector(unsigned long)>:
c0011c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7e:	0f af 05 0c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d50c
c0011c85:	03 05 14 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d514
c0011c8b:	c3                   	ret    

c0011c8c <Virt::allocateSwapfilePage()>:
c0011c8c:	55                   	push   ebp
c0011c8d:	31 d2                	xor    edx,edx
c0011c8f:	57                   	push   edi
c0011c90:	56                   	push   esi
c0011c91:	53                   	push   ebx
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	8b 0d 0c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d50c
c0011c9b:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c0011ca0:	f7 f1                	div    ecx
c0011ca2:	39 0d 10 d5 02 c0    	cmp    DWORD PTR ds:0xc002d510,ecx
c0011ca8:	72 2d                	jb     c0011cd7 <Virt::allocateSwapfilePage()+0x4b>
c0011caa:	8b 35 e8 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6e8
c0011cb0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cb2:	f6 c2 01             	test   dl,0x1
c0011cb5:	74 3c                	je     c0011cf3 <Virt::allocateSwapfilePage()+0x67>
c0011cb7:	31 c9                	xor    ecx,ecx
c0011cb9:	bf 01 00 00 00       	mov    edi,0x1
c0011cbe:	eb 12                	jmp    c0011cd2 <Virt::allocateSwapfilePage()+0x46>
c0011cc0:	89 fd                	mov    ebp,edi
c0011cc2:	89 ca                	mov    edx,ecx
c0011cc4:	d3 e5                	shl    ebp,cl
c0011cc6:	c1 ea 05             	shr    edx,0x5
c0011cc9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011ccc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cce:	85 ea                	test   edx,ebp
c0011cd0:	74 2a                	je     c0011cfc <Virt::allocateSwapfilePage()+0x70>
c0011cd2:	41                   	inc    ecx
c0011cd3:	39 c8                	cmp    eax,ecx
c0011cd5:	77 e9                	ja     c0011cc0 <Virt::allocateSwapfilePage()+0x34>
c0011cd7:	83 ec 0c             	sub    esp,0xc
c0011cda:	68 cb a7 02 c0       	push   0xc002a7cb
c0011cdf:	e8 9b 89 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0011ce4:	83 c4 10             	add    esp,0x10
c0011ce7:	31 c9                	xor    ecx,ecx
c0011ce9:	83 c4 0c             	add    esp,0xc
c0011cec:	89 c8                	mov    eax,ecx
c0011cee:	5b                   	pop    ebx
c0011cef:	5e                   	pop    esi
c0011cf0:	5f                   	pop    edi
c0011cf1:	5d                   	pop    ebp
c0011cf2:	c3                   	ret    
c0011cf3:	89 f3                	mov    ebx,esi
c0011cf5:	bd 01 00 00 00       	mov    ebp,0x1
c0011cfa:	31 c9                	xor    ecx,ecx
c0011cfc:	09 ea                	or     edx,ebp
c0011cfe:	89 c8                	mov    eax,ecx
c0011d00:	89 13                	mov    DWORD PTR [ebx],edx
c0011d02:	83 c4 0c             	add    esp,0xc
c0011d05:	5b                   	pop    ebx
c0011d06:	5e                   	pop    esi
c0011d07:	5f                   	pop    edi
c0011d08:	5d                   	pop    ebp
c0011d09:	c3                   	ret    

c0011d0a <Virt::virtualMemorySetup()>:
c0011d0a:	53                   	push   ebx
c0011d0b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d10:	83 ec 08             	sub    esp,0x8
c0011d13:	6a 0f                	push   0xf
c0011d15:	53                   	push   ebx
c0011d16:	43                   	inc    ebx
c0011d17:	e8 d6 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d1c:	59                   	pop    ecx
c0011d1d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d23:	58                   	pop    eax
c0011d24:	75 ed                	jne    c0011d13 <Virt::virtualMemorySetup()+0x9>
c0011d26:	83 ec 08             	sub    esp,0x8
c0011d29:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d2e:	68 00 00 00 c8       	push   0xc8000000
c0011d33:	68 e2 a7 02 c0       	push   0xc002a7e2
c0011d38:	e8 68 11 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0011d3d:	58                   	pop    eax
c0011d3e:	5a                   	pop    edx
c0011d3f:	68 00 f0 ff ef       	push   0xeffff000
c0011d44:	68 f6 a7 02 c0       	push   0xc002a7f6
c0011d49:	e8 57 11 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0011d4e:	83 c4 10             	add    esp,0x10
c0011d51:	83 ec 08             	sub    esp,0x8
c0011d54:	6a 00                	push   0x0
c0011d56:	53                   	push   ebx
c0011d57:	43                   	inc    ebx
c0011d58:	e8 95 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d66:	75 e9                	jne    c0011d51 <Virt::virtualMemorySetup()+0x47>
c0011d68:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d6d:	83 ec 08             	sub    esp,0x8
c0011d70:	6a 0f                	push   0xf
c0011d72:	53                   	push   ebx
c0011d73:	43                   	inc    ebx
c0011d74:	e8 79 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d79:	83 c4 10             	add    esp,0x10
c0011d7c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d82:	75 e9                	jne    c0011d6d <Virt::virtualMemorySetup()+0x63>
c0011d84:	83 c4 08             	add    esp,0x8
c0011d87:	5b                   	pop    ebx
c0011d88:	c3                   	ret    

c0011d89 <Virt::swappingSetup()>:
c0011d89:	83 ec 14             	sub    esp,0x14
c0011d8c:	31 d2                	xor    edx,edx
c0011d8e:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c0011d93:	f7 35 0c d5 02 c0    	div    DWORD PTR ds:0xc002d50c
c0011d99:	c1 e8 05             	shr    eax,0x5
c0011d9c:	50                   	push   eax
c0011d9d:	68 0a a8 02 c0       	push   0xc002a80a
c0011da2:	e8 fe 10 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0011da7:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	f7 35 0c d5 02 c0    	div    DWORD PTR ds:0xc002d50c
c0011db4:	c1 e8 05             	shr    eax,0x5
c0011db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dba:	e8 8c da ff ff       	call   c000f84b <malloc>
c0011dbf:	83 c4 0c             	add    esp,0xc
c0011dc2:	89 c1                	mov    ecx,eax
c0011dc4:	a3 e8 e6 02 c0       	mov    ds:0xc002e6e8,eax
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c0011dd0:	f7 35 0c d5 02 c0    	div    DWORD PTR ds:0xc002d50c
c0011dd6:	c1 e8 05             	shr    eax,0x5
c0011dd9:	50                   	push   eax
c0011dda:	6a 00                	push   0x0
c0011ddc:	51                   	push   ecx
c0011ddd:	e8 9e e9 fe ff       	call   c0000780 <memset>
c0011de2:	83 c4 1c             	add    esp,0x1c
c0011de5:	c3                   	ret    

c0011de6 <Virt::getAKernelVAS()>:
c0011de6:	a1 ec e6 02 c0       	mov    eax,ds:0xc002e6ec
c0011deb:	c3                   	ret    

c0011dec <Virt::setupPageSwapping(int)>:
c0011dec:	57                   	push   edi
c0011ded:	56                   	push   esi
c0011dee:	53                   	push   ebx
c0011def:	83 ec 1c             	sub    esp,0x1c
c0011df2:	68 14 01 00 00       	push   0x114
c0011df7:	e8 4f da ff ff       	call   c000f84b <malloc>
c0011dfc:	83 c4 0c             	add    esp,0xc
c0011dff:	89 c6                	mov    esi,eax
c0011e01:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c0011e07:	68 25 a8 02 c0       	push   0xc002a825
c0011e0c:	50                   	push   eax
c0011e0d:	e8 ec 15 00 00       	call   c00133fe <File::File(char const*, Process*)>
c0011e12:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e15:	e8 c0 17 00 00       	call   c00135da <File::unlink()>
c0011e1a:	58                   	pop    eax
c0011e1b:	5a                   	pop    edx
c0011e1c:	6a 12                	push   0x12
c0011e1e:	56                   	push   esi
c0011e1f:	e8 3e 16 00 00       	call   c0013462 <File::open(FileOpenMode)>
c0011e24:	83 c4 10             	add    esp,0x10
c0011e27:	85 c0                	test   eax,eax
c0011e29:	0f 85 ca 00 00 00    	jne    c0011ef9 <Virt::setupPageSwapping(int)+0x10d>
c0011e2f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e3b:	c1 e3 08             	shl    ebx,0x8
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	68 00 00 01 00       	push   0x10000
c0011e46:	e8 00 da ff ff       	call   c000f84b <malloc>
c0011e4b:	83 c4 0c             	add    esp,0xc
c0011e4e:	89 c7                	mov    edi,eax
c0011e50:	68 00 00 01 00       	push   0x10000
c0011e55:	6a 00                	push   0x0
c0011e57:	50                   	push   eax
c0011e58:	e8 23 e9 fe ff       	call   c0000780 <memset>
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	85 db                	test   ebx,ebx
c0011e62:	79 03                	jns    c0011e67 <Virt::setupPageSwapping(int)+0x7b>
c0011e64:	83 c3 0f             	add    ebx,0xf
c0011e67:	c1 fb 04             	sar    ebx,0x4
c0011e6a:	4b                   	dec    ebx
c0011e6b:	83 fb ff             	cmp    ebx,0xffffffff
c0011e6e:	74 4b                	je     c0011ebb <Virt::setupPageSwapping(int)+0xcf>
c0011e70:	83 ec 0c             	sub    esp,0xc
c0011e73:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e75:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e79:	52                   	push   edx
c0011e7a:	57                   	push   edi
c0011e7b:	6a 00                	push   0x0
c0011e7d:	68 00 00 01 00       	push   0x10000
c0011e82:	56                   	push   esi
c0011e83:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e86:	83 c4 20             	add    esp,0x20
c0011e89:	85 c0                	test   eax,eax
c0011e8b:	75 59                	jne    c0011ee6 <Virt::setupPageSwapping(int)+0xfa>
c0011e8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e91:	3d 00 00 01 00       	cmp    eax,0x10000
c0011e96:	74 d2                	je     c0011e6a <Virt::setupPageSwapping(int)+0x7e>
c0011e98:	83 ec 08             	sub    esp,0x8
c0011e9b:	4b                   	dec    ebx
c0011e9c:	50                   	push   eax
c0011e9d:	68 78 a8 02 c0       	push   0xc002a878
c0011ea2:	e8 fe 0f 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0011ea7:	c7 04 24 81 a8 02 c0 	mov    DWORD PTR [esp],0xc002a881
c0011eae:	e8 cc 87 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	83 fb ff             	cmp    ebx,0xffffffff
c0011eb9:	75 b5                	jne    c0011e70 <Virt::setupPageSwapping(int)+0x84>
c0011ebb:	83 ec 0c             	sub    esp,0xc
c0011ebe:	56                   	push   esi
c0011ebf:	e8 fc 15 00 00       	call   c00134c0 <File::close()>
c0011ec4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ec7:	e8 9f d9 ff ff       	call   c000f86b <rfree>
c0011ecc:	83 c4 10             	add    esp,0x10
c0011ecf:	85 f6                	test   esi,esi
c0011ed1:	74 0c                	je     c0011edf <Virt::setupPageSwapping(int)+0xf3>
c0011ed3:	83 ec 0c             	sub    esp,0xc
c0011ed6:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ed8:	56                   	push   esi
c0011ed9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011edc:	83 c4 10             	add    esp,0x10
c0011edf:	83 c4 10             	add    esp,0x10
c0011ee2:	5b                   	pop    ebx
c0011ee3:	5e                   	pop    esi
c0011ee4:	5f                   	pop    edi
c0011ee5:	c3                   	ret    
c0011ee6:	83 ec 08             	sub    esp,0x8
c0011ee9:	50                   	push   eax
c0011eea:	68 60 a8 02 c0       	push   0xc002a860
c0011eef:	e8 b1 0f 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0011ef4:	83 c4 10             	add    esp,0x10
c0011ef7:	eb 94                	jmp    c0011e8d <Virt::setupPageSwapping(int)+0xa1>
c0011ef9:	83 ec 08             	sub    esp,0x8
c0011efc:	50                   	push   eax
c0011efd:	68 3c a8 02 c0       	push   0xc002a83c
c0011f02:	e8 9e 0f 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0011f07:	c7 04 24 45 a8 02 c0 	mov    DWORD PTR [esp],0xc002a845
c0011f0e:	e8 6c 87 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	e9 14 ff ff ff       	jmp    c0011e2f <Virt::setupPageSwapping(int)+0x43>
c0011f1b:	90                   	nop

c0011f1c <VAS::VAS()>:
c0011f1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f36:	a3 ec e6 02 c0       	mov    ds:0xc002e6ec,eax
c0011f3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f3f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f47:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f4e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f55:	90                   	nop
c0011f56:	c3                   	ret    
c0011f57:	90                   	nop

c0011f58 <VAS::VAS(VAS*)>:
c0011f58:	83 ec 0c             	sub    esp,0xc
c0011f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f6a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f71:	83 ec 0c             	sub    esp,0xc
c0011f74:	68 64 a6 02 c0       	push   0xc002a664
c0011f79:	e8 01 87 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	90                   	nop
c0011f82:	83 c4 0c             	add    esp,0xc
c0011f85:	c3                   	ret    

c0011f86 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f8a:	89 c2                	mov    edx,eax
c0011f8c:	c1 e8 0a             	shr    eax,0xa
c0011f8f:	c1 ea 16             	shr    edx,0x16
c0011f92:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f97:	19 c9                	sbb    ecx,ecx
c0011f99:	c1 e2 0c             	shl    edx,0xc
c0011f9c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fa2:	25 fc 0f 00 00       	and    eax,0xffc
c0011fa7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fae:	01 d0                	add    eax,edx
c0011fb0:	c3                   	ret    
c0011fb1:	90                   	nop

c0011fb2 <VAS::getPageTableEntry(unsigned long)>:
c0011fb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fb6:	89 ca                	mov    edx,ecx
c0011fb8:	c1 e9 0a             	shr    ecx,0xa
c0011fbb:	c1 ea 16             	shr    edx,0x16
c0011fbe:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fc4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011fca:	c1 e0 0c             	shl    eax,0xc
c0011fcd:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011fd0:	c3                   	ret    

c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011fd1:	57                   	push   edi
c0011fd2:	56                   	push   esi
c0011fd3:	be 01 00 00 00       	mov    esi,0x1
c0011fd8:	53                   	push   ebx
c0011fd9:	83 ec 10             	sub    esp,0x10
c0011fdc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fe0:	c1 eb 0c             	shr    ebx,0xc
c0011fe3:	eb 3f                	jmp    c0012024 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011fe5:	e8 fc fd ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0011fea:	83 ec 08             	sub    esp,0x8
c0011fed:	57                   	push   edi
c0011fee:	50                   	push   eax
c0011fef:	e8 be ff ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0011ff4:	83 c4 10             	add    esp,0x10
c0011ff7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ffd:	f6 c4 04             	test   ah,0x4
c0012000:	75 5f                	jne    c0012061 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012002:	80 fa 04             	cmp    dl,0x4
c0012005:	74 78                	je     c001207f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012007:	80 fa 02             	cmp    dl,0x2
c001200a:	0f 84 88 00 00 00    	je     c0012098 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012010:	80 fa 03             	cmp    dl,0x3
c0012013:	0f 84 ad 00 00 00    	je     c00120c6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012019:	fe ca                	dec    dl
c001201b:	0f 84 92 00 00 00    	je     c00120b3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012021:	43                   	inc    ebx
c0012022:	31 f6                	xor    esi,esi
c0012024:	53                   	push   ebx
c0012025:	e8 fd fa ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c001202a:	5f                   	pop    edi
c001202b:	89 df                	mov    edi,ebx
c001202d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012031:	c1 e7 0c             	shl    edi,0xc
c0012034:	84 c0                	test   al,al
c0012036:	75 ad                	jne    c0011fe5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012038:	83 ec 0c             	sub    esp,0xc
c001203b:	68 87 a8 02 c0       	push   0xc002a887
c0012040:	e8 3a 86 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0012045:	e8 9c fd ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001204a:	5a                   	pop    edx
c001204b:	59                   	pop    ecx
c001204c:	57                   	push   edi
c001204d:	50                   	push   eax
c001204e:	e8 5f ff ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	8b 00                	mov    eax,DWORD PTR [eax]
c0012058:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001205c:	f6 c4 04             	test   ah,0x4
c001205f:	74 c0                	je     c0012021 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012061:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012065:	25 00 f0 ff ff       	and    eax,0xfffff000
c001206a:	83 ec 0c             	sub    esp,0xc
c001206d:	50                   	push   eax
c001206e:	e8 f0 dd ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c0012073:	83 c4 10             	add    esp,0x10
c0012076:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001207a:	80 fa 04             	cmp    dl,0x4
c001207d:	75 88                	jne    c0012007 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001207f:	89 f0                	mov    eax,esi
c0012081:	84 c0                	test   al,al
c0012083:	75 47                	jne    c00120cc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012085:	c7 44 24 20 88 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a688
c001208d:	83 c4 10             	add    esp,0x10
c0012090:	5b                   	pop    ebx
c0012091:	5e                   	pop    esi
c0012092:	5f                   	pop    edi
c0012093:	e9 e7 85 00 00       	jmp    c001a67f <Krnl::panic(char const*)>
c0012098:	89 f0                	mov    eax,esi
c001209a:	84 c0                	test   al,al
c001209c:	75 15                	jne    c00120b3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	68 a3 a8 02 c0       	push   0xc002a8a3
c00120a6:	e8 d4 85 00 00       	call   c001a67f <Krnl::panic(char const*)>
c00120ab:	83 c4 10             	add    esp,0x10
c00120ae:	e9 6e ff ff ff       	jmp    c0012021 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120b3:	83 ec 08             	sub    esp,0x8
c00120b6:	6a 00                	push   0x0
c00120b8:	53                   	push   ebx
c00120b9:	e8 34 fa ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120be:	83 c4 10             	add    esp,0x10
c00120c1:	e9 5b ff ff ff       	jmp    c0012021 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120c6:	89 f0                	mov    eax,esi
c00120c8:	84 c0                	test   al,al
c00120ca:	75 15                	jne    c00120e1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120cc:	83 ec 08             	sub    esp,0x8
c00120cf:	6a 00                	push   0x0
c00120d1:	53                   	push   ebx
c00120d2:	e8 1b fa ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120d7:	83 c4 10             	add    esp,0x10
c00120da:	83 c4 10             	add    esp,0x10
c00120dd:	5b                   	pop    ebx
c00120de:	5e                   	pop    esi
c00120df:	5f                   	pop    edi
c00120e0:	c3                   	ret    
c00120e1:	c7 44 24 20 bf a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a8bf
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	5b                   	pop    ebx
c00120ed:	5e                   	pop    esi
c00120ee:	5f                   	pop    edi
c00120ef:	e9 8b 85 00 00       	jmp    c001a67f <Krnl::panic(char const*)>

c00120f4 <VAS::freeAllocatedPages(unsigned long)>:
c00120f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120fc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012100:	74 09                	je     c001210b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012102:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012106:	e9 c6 fe ff ff       	jmp    c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c001210b:	c7 44 24 04 ac a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6ac
c0012113:	e9 8d 0d 00 00       	jmp    c0012ea5 <Dbg::kprintf(char const*, ...)>

c0012118 <VAS::virtualToPhysical(unsigned long)>:
c0012118:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001211c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012120:	e8 8d fe ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012125:	5a                   	pop    edx
c0012126:	8b 00                	mov    eax,DWORD PTR [eax]
c0012128:	59                   	pop    ecx
c0012129:	25 00 f0 ff ff       	and    eax,0xfffff000
c001212e:	c3                   	ret    
c001212f:	90                   	nop

c0012130 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012130:	55                   	push   ebp
c0012131:	57                   	push   edi
c0012132:	56                   	push   esi
c0012133:	53                   	push   ebx
c0012134:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012138:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001213c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012140:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012144:	85 db                	test   ebx,ebx
c0012146:	7e 22                	jle    c001216a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012148:	c1 e3 0c             	shl    ebx,0xc
c001214b:	01 f3                	add    ebx,esi
c001214d:	56                   	push   esi
c001214e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012154:	55                   	push   ebp
c0012155:	e8 58 fe ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c001215a:	5a                   	pop    edx
c001215b:	59                   	pop    ecx
c001215c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001215e:	21 f9                	and    ecx,edi
c0012160:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012164:	39 f3                	cmp    ebx,esi
c0012166:	89 08                	mov    DWORD PTR [eax],ecx
c0012168:	75 e3                	jne    c001214d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001216a:	5b                   	pop    ebx
c001216b:	5e                   	pop    esi
c001216c:	5f                   	pop    edi
c001216d:	5d                   	pop    ebp
c001216e:	c3                   	ret    
c001216f:	90                   	nop

c0012170 <VAS::setToWriteCombining(unsigned long, int)>:
c0012170:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0012175:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001217b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012182:	75 01                	jne    c0012185 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012184:	c3                   	ret    
c0012185:	68 80 00 00 00       	push   0x80
c001218a:	6a ff                	push   0xffffffff
c001218c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012190:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012194:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012198:	e8 93 ff ff ff       	call   c0012130 <VAS::reflagRange(unsigned long, int, int, int)>
c001219d:	83 c4 14             	add    esp,0x14
c00121a0:	c3                   	ret    
c00121a1:	90                   	nop

c00121a2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121a2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ab:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00121ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121b2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00121b5:	19 c0                	sbb    eax,eax
c00121b7:	83 ca 03             	or     edx,0x3
c00121ba:	83 e0 fc             	and    eax,0xfffffffc
c00121bd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121c4:	0f 20 d8             	mov    eax,cr3
c00121c7:	0f 22 d8             	mov    cr3,eax
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VAS::~VAS()>:
c00121cc:	83 ec 2c             	sub    esp,0x2c
c00121cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121d7:	e8 7e bc 00 00       	call   c001de5a <lockScheduler()>
c00121dc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00121e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121e6:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121ec:	83 ec 04             	sub    esp,0x4
c00121ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00121f3:	6a 01                	push   0x1
c00121f5:	50                   	push   eax
c00121f6:	e8 a7 ff ff ff       	call   c00121a2 <VAS::mapOtherVASIn(bool, VAS*)>
c00121fb:	83 c4 10             	add    esp,0x10
c00121fe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012206:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001220e:	0f 8f d7 00 00 00    	jg     c00122eb <VAS::~VAS()+0x11f>
c0012214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012218:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001221b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001221f:	c1 e2 02             	shl    edx,0x2
c0012222:	01 d0                	add    eax,edx
c0012224:	8b 00                	mov    eax,DWORD PTR [eax]
c0012226:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001222a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001222e:	83 e0 01             	and    eax,0x1
c0012231:	0f 84 ab 00 00 00    	je     c00122e2 <VAS::~VAS()+0x116>
c0012237:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001223f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012247:	7f 75                	jg     c00122be <VAS::~VAS()+0xf2>
c0012249:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001224d:	c1 e0 0a             	shl    eax,0xa
c0012250:	89 c2                	mov    edx,eax
c0012252:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012256:	01 d0                	add    eax,edx
c0012258:	c1 e0 0c             	shl    eax,0xc
c001225b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001225f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012264:	8b 00                	mov    eax,DWORD PTR [eax]
c0012266:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012269:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001226f:	83 ec 04             	sub    esp,0x4
c0012272:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012276:	6a 01                	push   0x1
c0012278:	50                   	push   eax
c0012279:	e8 08 fd ff ff       	call   c0011f86 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001227e:	83 c4 10             	add    esp,0x10
c0012281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012289:	8b 00                	mov    eax,DWORD PTR [eax]
c001228b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001228f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012293:	25 01 04 00 00       	and    eax,0x401
c0012298:	3d 01 04 00 00       	cmp    eax,0x401
c001229d:	75 19                	jne    c00122b8 <VAS::~VAS()+0xec>
c001229f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122a8:	83 ec 0c             	sub    esp,0xc
c00122ab:	50                   	push   eax
c00122ac:	e8 b2 db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c00122b1:	83 c4 10             	add    esp,0x10
c00122b4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122b8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122bc:	eb 81                	jmp    c001223f <VAS::~VAS()+0x73>
c00122be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c2:	25 00 04 00 00       	and    eax,0x400
c00122c7:	74 19                	je     c00122e2 <VAS::~VAS()+0x116>
c00122c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 88 db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122e6:	e9 1b ff ff ff       	jmp    c0012206 <VAS::~VAS()+0x3a>
c00122eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122f2:	83 ec 0c             	sub    esp,0xc
c00122f5:	50                   	push   eax
c00122f6:	e8 d6 fc ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c00122fb:	83 c4 10             	add    esp,0x10
c00122fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012302:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012305:	83 ec 0c             	sub    esp,0xc
c0012308:	50                   	push   eax
c0012309:	e8 55 db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c001230e:	83 c4 10             	add    esp,0x10
c0012311:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012315:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012319:	c1 e0 02             	shl    eax,0x2
c001231c:	83 ec 08             	sub    esp,0x8
c001231f:	50                   	push   eax
c0012320:	68 d0 a6 02 c0       	push   0xc002a6d0
c0012325:	e8 7b 0b 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001232a:	83 c4 10             	add    esp,0x10
c001232d:	e8 2a bb 00 00       	call   c001de5c <unlockScheduler()>
c0012332:	90                   	nop
c0012333:	83 c4 2c             	add    esp,0x2c
c0012336:	c3                   	ret    
c0012337:	90                   	nop

c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012338:	55                   	push   ebp
c0012339:	57                   	push   edi
c001233a:	56                   	push   esi
c001233b:	53                   	push   ebx
c001233c:	83 ec 1c             	sub    esp,0x1c
c001233f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012343:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012347:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001234d:	77 08                	ja     c0012357 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001234f:	0f 20 d8             	mov    eax,cr3
c0012352:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012355:	75 47                	jne    c001239e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012357:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001235b:	09 d8                	or     eax,ebx
c001235d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012362:	75 57                	jne    c00123bb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012364:	89 de                	mov    esi,ebx
c0012366:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012369:	c1 ee 16             	shr    esi,0x16
c001236c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012373:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012377:	74 54                	je     c00123cd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012379:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001237d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012383:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012387:	c1 e6 0c             	shl    esi,0xc
c001238a:	c1 eb 0a             	shr    ebx,0xa
c001238d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012393:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012396:	83 c4 1c             	add    esp,0x1c
c0012399:	5b                   	pop    ebx
c001239a:	5e                   	pop    esi
c001239b:	5f                   	pop    edi
c001239c:	5d                   	pop    ebp
c001239d:	c3                   	ret    
c001239e:	83 ec 0c             	sub    esp,0xc
c00123a1:	68 f0 a6 02 c0       	push   0xc002a6f0
c00123a6:	e8 fa 0a 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00123ab:	83 c4 10             	add    esp,0x10
c00123ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123b2:	09 d8                	or     eax,ebx
c00123b4:	a9 ff 0f 00 00       	test   eax,0xfff
c00123b9:	74 a9                	je     c0012364 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123bb:	83 ec 0c             	sub    esp,0xc
c00123be:	68 58 a7 02 c0       	push   0xc002a758
c00123c3:	e8 b7 82 00 00       	call   c001a67f <Krnl::panic(char const*)>
c00123c8:	83 c4 10             	add    esp,0x10
c00123cb:	eb 97                	jmp    c0012364 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123d1:	e8 17 db ff ff       	call   c000feed <Phys::allocatePage()>
c00123d6:	89 c5                	mov    ebp,eax
c00123d8:	e8 09 fa ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00123dd:	83 ec 0c             	sub    esp,0xc
c00123e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123e4:	6a 01                	push   0x1
c00123e6:	e8 60 f7 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c00123eb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123f2:	6a 01                	push   0x1
c00123f4:	50                   	push   eax
c00123f5:	55                   	push   ebp
c00123f6:	81 cd 07 04 00 00    	or     ebp,0x407
c00123fc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012400:	51                   	push   ecx
c0012401:	e8 26 02 00 00       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012406:	83 c4 1c             	add    esp,0x1c
c0012409:	68 00 10 00 00       	push   0x1000
c001240e:	6a 00                	push   0x0
c0012410:	50                   	push   eax
c0012411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012415:	e8 66 e3 fe ff       	call   c0000780 <memset>
c001241a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001241e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012421:	e8 ab fb ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012426:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001242a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001242d:	83 c4 10             	add    esp,0x10
c0012430:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012433:	e9 41 ff ff ff       	jmp    c0012379 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012438 <VAS::allocatePages(int, int)>:
c0012438:	55                   	push   ebp
c0012439:	57                   	push   edi
c001243a:	56                   	push   esi
c001243b:	53                   	push   ebx
c001243c:	83 ec 1c             	sub    esp,0x1c
c001243f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012443:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0012448:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001244e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012454:	83 e0 01             	and    eax,0x1
c0012457:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001245b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001245f:	0f 85 cc 00 00 00    	jne    c0012531 <VAS::allocatePages(int, int)+0xf9>
c0012465:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001246c:	85 c0                	test   eax,eax
c001246e:	0f 84 a1 00 00 00    	je     c0012515 <VAS::allocatePages(int, int)+0xdd>
c0012474:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012478:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001247c:	c1 e6 0c             	shl    esi,0xc
c001247f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012483:	85 c0                	test   eax,eax
c0012485:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012488:	7e 33                	jle    c00124bd <VAS::allocatePages(int, int)+0x85>
c001248a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001248e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012492:	81 cd 00 04 00 00    	or     ebp,0x400
c0012498:	e8 50 da ff ff       	call   c000feed <Phys::allocatePage()>
c001249d:	55                   	push   ebp
c001249e:	53                   	push   ebx
c001249f:	50                   	push   eax
c00124a0:	57                   	push   edi
c00124a1:	e8 92 fe ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124a6:	83 c4 10             	add    esp,0x10
c00124a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ae:	74 03                	je     c00124b3 <VAS::allocatePages(int, int)+0x7b>
c00124b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124b9:	39 de                	cmp    esi,ebx
c00124bb:	75 db                	jne    c0012498 <VAS::allocatePages(int, int)+0x60>
c00124bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124c2:	75 12                	jne    c00124d6 <VAS::allocatePages(int, int)+0x9e>
c00124c4:	0f 20 d8             	mov    eax,cr3
c00124c7:	0f 22 d8             	mov    cr3,eax
c00124ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124ce:	83 c4 1c             	add    esp,0x1c
c00124d1:	5b                   	pop    ebx
c00124d2:	5e                   	pop    esi
c00124d3:	5f                   	pop    edi
c00124d4:	5d                   	pop    ebp
c00124d5:	c3                   	ret    
c00124d6:	c1 ee 0a             	shr    esi,0xa
c00124d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124dd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124e3:	c1 eb 0a             	shr    ebx,0xa
c00124e6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124ec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124f2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124f8:	39 c3                	cmp    ebx,eax
c00124fa:	77 ce                	ja     c00124ca <VAS::allocatePages(int, int)+0x92>
c00124fc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012505:	39 d8                	cmp    eax,ebx
c0012507:	73 f3                	jae    c00124fc <VAS::allocatePages(int, int)+0xc4>
c0012509:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001250d:	83 c4 1c             	add    esp,0x1c
c0012510:	5b                   	pop    ebx
c0012511:	5e                   	pop    esi
c0012512:	5f                   	pop    edi
c0012513:	5d                   	pop    ebp
c0012514:	c3                   	ret    
c0012515:	83 ec 0c             	sub    esp,0xc
c0012518:	68 7c a7 02 c0       	push   0xc002a77c
c001251d:	e8 5d 81 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0012522:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012525:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012529:	83 c4 10             	add    esp,0x10
c001252c:	e9 43 ff ff ff       	jmp    c0012474 <VAS::allocatePages(int, int)+0x3c>
c0012531:	83 ec 0c             	sub    esp,0xc
c0012534:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012538:	e8 0e f6 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c001253d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012549:	0f 87 9b 00 00 00    	ja     c00125ea <VAS::allocatePages(int, int)+0x1b2>
c001254f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012553:	85 d2                	test   edx,edx
c0012555:	7e 3c                	jle    c0012593 <VAS::allocatePages(int, int)+0x15b>
c0012557:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001255b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001255f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012563:	c1 e5 0c             	shl    ebp,0xc
c0012566:	81 ce 00 04 00 00    	or     esi,0x400
c001256c:	01 dd                	add    ebp,ebx
c001256e:	e8 7a d9 ff ff       	call   c000feed <Phys::allocatePage()>
c0012573:	56                   	push   esi
c0012574:	53                   	push   ebx
c0012575:	50                   	push   eax
c0012576:	57                   	push   edi
c0012577:	e8 bc fd ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c001257c:	83 c4 10             	add    esp,0x10
c001257f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012584:	74 03                	je     c0012589 <VAS::allocatePages(int, int)+0x151>
c0012586:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012589:	81 c3 00 10 00 00    	add    ebx,0x1000
c001258f:	39 dd                	cmp    ebp,ebx
c0012591:	75 db                	jne    c001256e <VAS::allocatePages(int, int)+0x136>
c0012593:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012598:	0f 84 26 ff ff ff    	je     c00124c4 <VAS::allocatePages(int, int)+0x8c>
c001259e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125a6:	89 d3                	mov    ebx,edx
c00125a8:	c1 e0 0c             	shl    eax,0xc
c00125ab:	c1 eb 0a             	shr    ebx,0xa
c00125ae:	01 d0                	add    eax,edx
c00125b0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125b6:	c1 e8 0a             	shr    eax,0xa
c00125b9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125c4:	2d 00 00 40 00       	sub    eax,0x400000
c00125c9:	39 c3                	cmp    ebx,eax
c00125cb:	0f 87 f9 fe ff ff    	ja     c00124ca <VAS::allocatePages(int, int)+0x92>
c00125d1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125d4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125da:	39 d8                	cmp    eax,ebx
c00125dc:	73 f3                	jae    c00125d1 <VAS::allocatePages(int, int)+0x199>
c00125de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125e2:	83 c4 1c             	add    esp,0x1c
c00125e5:	5b                   	pop    ebx
c00125e6:	5e                   	pop    esi
c00125e7:	5f                   	pop    edi
c00125e8:	5d                   	pop    ebp
c00125e9:	c3                   	ret    
c00125ea:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00125ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125f5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125fc:	0f 84 4d ff ff ff    	je     c001254f <VAS::allocatePages(int, int)+0x117>
c0012602:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001260a:	e9 40 ff ff ff       	jmp    c001254f <VAS::allocatePages(int, int)+0x117>
c001260f:	90                   	nop

c0012610 <VAS::setCPUSpecific(unsigned long)>:
c0012610:	83 ec 0c             	sub    esp,0xc
c0012613:	6a 05                	push   0x5
c0012615:	68 00 00 40 c2       	push   0xc2400000
c001261a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001261e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012622:	e8 11 fd ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012627:	83 c4 1c             	add    esp,0x1c
c001262a:	c3                   	ret    
c001262b:	90                   	nop

c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001262c:	55                   	push   ebp
c001262d:	57                   	push   edi
c001262e:	56                   	push   esi
c001262f:	53                   	push   ebx
c0012630:	83 ec 1c             	sub    esp,0x1c
c0012633:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0012638:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001263c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012642:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012646:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001264c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012650:	83 e0 01             	and    eax,0x1
c0012653:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001265b:	85 c0                	test   eax,eax
c001265d:	7e 39                	jle    c0012698 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001265f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012663:	89 f3                	mov    ebx,esi
c0012665:	c1 e0 0c             	shl    eax,0xc
c0012668:	01 f0                	add    eax,esi
c001266a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001266e:	55                   	push   ebp
c001266f:	53                   	push   ebx
c0012670:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012674:	29 f0                	sub    eax,esi
c0012676:	01 d8                	add    eax,ebx
c0012678:	50                   	push   eax
c0012679:	57                   	push   edi
c001267a:	e8 b9 fc ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c001267f:	83 c4 10             	add    esp,0x10
c0012682:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012687:	74 03                	je     c001268c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012689:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001268c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012692:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012696:	75 d6                	jne    c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012698:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001269d:	75 10                	jne    c00126af <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001269f:	0f 20 d8             	mov    eax,cr3
c00126a2:	0f 22 d8             	mov    cr3,eax
c00126a5:	83 c4 1c             	add    esp,0x1c
c00126a8:	89 f0                	mov    eax,esi
c00126aa:	5b                   	pop    ebx
c00126ab:	5e                   	pop    esi
c00126ac:	5f                   	pop    edi
c00126ad:	5d                   	pop    ebp
c00126ae:	c3                   	ret    
c00126af:	89 f3                	mov    ebx,esi
c00126b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b5:	c1 eb 0a             	shr    ebx,0xa
c00126b8:	c1 e0 0c             	shl    eax,0xc
c00126bb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126c1:	01 f0                	add    eax,esi
c00126c3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126c9:	c1 e8 0a             	shr    eax,0xa
c00126cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126d1:	2d 00 00 40 00       	sub    eax,0x400000
c00126d6:	39 c3                	cmp    ebx,eax
c00126d8:	77 cb                	ja     c00126a5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126e3:	39 d8                	cmp    eax,ebx
c00126e5:	73 f3                	jae    c00126da <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126e7:	83 c4 1c             	add    esp,0x1c
c00126ea:	89 f0                	mov    eax,esi
c00126ec:	5b                   	pop    ebx
c00126ed:	5e                   	pop    esi
c00126ee:	5f                   	pop    edi
c00126ef:	5d                   	pop    ebp
c00126f0:	c3                   	ret    
c00126f1:	90                   	nop

c00126f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126f2:	55                   	push   ebp
c00126f3:	57                   	push   edi
c00126f4:	56                   	push   esi
c00126f5:	53                   	push   ebx
c00126f6:	83 ec 1c             	sub    esp,0x1c
c00126f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012701:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012705:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012709:	a9 ff 0f 00 00       	test   eax,0xfff
c001270e:	75 4a                	jne    c001275a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012710:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012714:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012717:	c1 eb 16             	shr    ebx,0x16
c001271a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012721:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012725:	74 4d                	je     c0012774 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012727:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001272b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001272f:	c1 e8 0a             	shr    eax,0xa
c0012732:	80 fa 01             	cmp    dl,0x1
c0012735:	19 d2                	sbb    edx,edx
c0012737:	c1 e3 0c             	shl    ebx,0xc
c001273a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001273e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012744:	25 fc 0f 00 00       	and    eax,0xffc
c0012749:	01 d8                	add    eax,ebx
c001274b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012752:	83 c4 1c             	add    esp,0x1c
c0012755:	5b                   	pop    ebx
c0012756:	5e                   	pop    esi
c0012757:	5f                   	pop    edi
c0012758:	5d                   	pop    ebp
c0012759:	c3                   	ret    
c001275a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001275e:	83 ec 0c             	sub    esp,0xc
c0012761:	68 a8 a7 02 c0       	push   0xc002a7a8
c0012766:	e8 14 7f 00 00       	call   c001a67f <Krnl::panic(char const*)>
c001276b:	83 c4 10             	add    esp,0x10
c001276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012772:	eb 9c                	jmp    c0012710 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012774:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012778:	e8 70 d7 ff ff       	call   c000feed <Phys::allocatePage()>
c001277d:	89 c5                	mov    ebp,eax
c001277f:	e8 62 f6 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012784:	83 ec 0c             	sub    esp,0xc
c0012787:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001278b:	6a 01                	push   0x1
c001278d:	e8 b9 f3 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0012792:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012799:	6a 01                	push   0x1
c001279b:	50                   	push   eax
c001279c:	55                   	push   ebp
c001279d:	81 cd 07 04 00 00    	or     ebp,0x407
c00127a3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127a7:	51                   	push   ecx
c00127a8:	e8 7f fe ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127ad:	83 c4 1c             	add    esp,0x1c
c00127b0:	68 00 10 00 00       	push   0x1000
c00127b5:	6a 00                	push   0x0
c00127b7:	50                   	push   eax
c00127b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127bc:	e8 bf df fe ff       	call   c0000780 <memset>
c00127c1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127c5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127c8:	e8 04 f8 ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c00127cd:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00127d0:	83 c4 10             	add    esp,0x10
c00127d3:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127da:	e9 48 ff ff ff       	jmp    c0012727 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00127df:	90                   	nop

c00127e0 <VAS::VAS(bool)>:
c00127e0:	53                   	push   ebx
c00127e1:	83 ec 28             	sub    esp,0x28
c00127e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012806:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001280a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001280d:	e8 db d6 ff ff       	call   c000feed <Phys::allocatePage()>
c0012812:	89 c2                	mov    edx,eax
c0012814:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012818:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001281b:	e8 c6 f5 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012820:	89 c3                	mov    ebx,eax
c0012822:	83 ec 0c             	sub    esp,0xc
c0012825:	6a 01                	push   0x1
c0012827:	e8 1f f3 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c001282c:	83 c4 10             	add    esp,0x10
c001282f:	89 c2                	mov    edx,eax
c0012831:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012835:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012838:	83 ec 0c             	sub    esp,0xc
c001283b:	6a 03                	push   0x3
c001283d:	6a 01                	push   0x1
c001283f:	52                   	push   edx
c0012840:	50                   	push   eax
c0012841:	53                   	push   ebx
c0012842:	e8 e5 fd ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012847:	83 c4 20             	add    esp,0x20
c001284a:	89 c2                	mov    edx,eax
c001284c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012850:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012853:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001285b:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012863:	7f 1c                	jg     c0012881 <VAS::VAS(bool)+0xa1>
c0012865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012869:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012870:	c1 e2 02             	shl    edx,0x2
c0012873:	01 d0                	add    eax,edx
c0012875:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001287b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001287f:	eb da                	jmp    c001285b <VAS::VAS(bool)+0x7b>
c0012881:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012889:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012891:	7f 7a                	jg     c001290d <VAS::VAS(bool)+0x12d>
c0012893:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012897:	2d 00 02 00 00       	sub    eax,0x200
c001289c:	c1 e0 0c             	shl    eax,0xc
c001289f:	83 c8 03             	or     eax,0x3
c00128a2:	89 c2                	mov    edx,eax
c00128a4:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00128a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128af:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128b5:	83 e0 10             	and    eax,0x10
c00128b8:	84 c0                	test   al,al
c00128ba:	74 07                	je     c00128c3 <VAS::VAS(bool)+0xe3>
c00128bc:	b8 00 01 00 00       	mov    eax,0x100
c00128c1:	eb 05                	jmp    c00128c8 <VAS::VAS(bool)+0xe8>
c00128c3:	b8 00 00 00 00       	mov    eax,0x0
c00128c8:	09 d0                	or     eax,edx
c00128ca:	89 c1                	mov    ecx,eax
c00128cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128d7:	c1 e2 02             	shl    edx,0x2
c00128da:	01 d0                	add    eax,edx
c00128dc:	89 ca                	mov    edx,ecx
c00128de:	89 10                	mov    DWORD PTR [eax],edx
c00128e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128e4:	2d 40 03 00 00       	sub    eax,0x340
c00128e9:	83 f8 7f             	cmp    eax,0x7f
c00128ec:	77 16                	ja     c0012904 <VAS::VAS(bool)+0x124>
c00128ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f9:	c1 e2 02             	shl    edx,0x2
c00128fc:	01 d0                	add    eax,edx
c00128fe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012904:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012908:	e9 7c ff ff ff       	jmp    c0012889 <VAS::VAS(bool)+0xa9>
c001290d:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0012912:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012918:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001291e:	83 e0 10             	and    eax,0x10
c0012921:	84 c0                	test   al,al
c0012923:	74 07                	je     c001292c <VAS::VAS(bool)+0x14c>
c0012925:	b8 03 41 00 00       	mov    eax,0x4103
c001292a:	eb 05                	jmp    c0012931 <VAS::VAS(bool)+0x151>
c001292c:	b8 03 40 00 00       	mov    eax,0x4003
c0012931:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012935:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012938:	81 c2 20 0c 00 00    	add    edx,0xc20
c001293e:	89 02                	mov    DWORD PTR [edx],eax
c0012940:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0012945:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012951:	83 ec 08             	sub    esp,0x8
c0012954:	50                   	push   eax
c0012955:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012959:	e8 b2 fc ff ff       	call   c0012610 <VAS::setCPUSpecific(unsigned long)>
c001295e:	83 c4 10             	add    esp,0x10
c0012961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012965:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012968:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001296d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012973:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012979:	83 e0 10             	and    eax,0x10
c001297c:	84 c0                	test   al,al
c001297e:	74 07                	je     c0012987 <VAS::VAS(bool)+0x1a7>
c0012980:	b8 00 01 00 00       	mov    eax,0x100
c0012985:	eb 05                	jmp    c001298c <VAS::VAS(bool)+0x1ac>
c0012987:	b8 00 00 00 00       	mov    eax,0x0
c001298c:	09 c2                	or     edx,eax
c001298e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012992:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012995:	05 fc 0f 00 00       	add    eax,0xffc
c001299a:	83 ca 03             	or     edx,0x3
c001299d:	89 10                	mov    DWORD PTR [eax],edx
c001299f:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00129a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	50                   	push   eax
c00129ae:	e8 05 1c 00 00       	call   c00145b8 <Device::getName()>
c00129b3:	83 c4 10             	add    esp,0x10
c00129b6:	83 ec 08             	sub    esp,0x8
c00129b9:	68 d9 a8 02 c0       	push   0xc002a8d9
c00129be:	50                   	push   eax
c00129bf:	e8 04 df fe ff       	call   c00008c8 <strcmp>
c00129c4:	83 c4 10             	add    esp,0x10
c00129c7:	85 c0                	test   eax,eax
c00129c9:	0f 94 c0             	sete   al
c00129cc:	84 c0                	test   al,al
c00129ce:	74 70                	je     c0012a40 <VAS::VAS(bool)+0x260>
c00129d0:	e8 68 b4 00 00       	call   c001de3d <disableIRQs()>
c00129d5:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00129da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e0:	05 7c 09 00 00       	add    eax,0x97c
c00129e5:	83 ec 0c             	sub    esp,0xc
c00129e8:	50                   	push   eax
c00129e9:	e8 d6 c8 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129ee:	83 c4 10             	add    esp,0x10
c00129f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129f6:	89 c3                	mov    ebx,eax
c00129f8:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00129fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a03:	05 7c 09 00 00       	add    eax,0x97c
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	50                   	push   eax
c0012a0c:	e8 b3 c8 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a11:	83 c4 10             	add    esp,0x10
c0012a14:	83 ec 08             	sub    esp,0x8
c0012a17:	50                   	push   eax
c0012a18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a1c:	e8 91 f5 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a26:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2b:	6a 11                	push   0x11
c0012a2d:	53                   	push   ebx
c0012a2e:	50                   	push   eax
c0012a2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a33:	e8 00 f9 ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a38:	83 c4 10             	add    esp,0x10
c0012a3b:	e8 0b b4 00 00       	call   c001de4b <enableIRQs()>
c0012a40:	90                   	nop
c0012a41:	83 c4 28             	add    esp,0x28
c0012a44:	5b                   	pop    ebx
c0012a45:	c3                   	ret    

c0012a46 <VAS::evict(unsigned long)>:
c0012a46:	55                   	push   ebp
c0012a47:	57                   	push   edi
c0012a48:	56                   	push   esi
c0012a49:	53                   	push   ebx
c0012a4a:	83 ec 0c             	sub    esp,0xc
c0012a4d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a51:	e8 36 f2 ff ff       	call   c0011c8c <Virt::allocateSwapfilePage()>
c0012a56:	89 c7                	mov    edi,eax
c0012a58:	a1 0c d5 02 c0       	mov    eax,ds:0xc002d50c
c0012a5d:	85 c0                	test   eax,eax
c0012a5f:	7e 3d                	jle    c0012a9e <VAS::evict(unsigned long)+0x58>
c0012a61:	89 ee                	mov    esi,ebp
c0012a63:	31 db                	xor    ebx,ebx
c0012a65:	83 ec 0c             	sub    esp,0xc
c0012a68:	57                   	push   edi
c0012a69:	e8 0c f2 ff ff       	call   c0011c7a <Virt::swapIDToSector(unsigned long)>
c0012a6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a71:	01 d8                	add    eax,ebx
c0012a73:	6a 01                	push   0x1
c0012a75:	31 d2                	xor    edx,edx
c0012a77:	43                   	inc    ebx
c0012a78:	52                   	push   edx
c0012a79:	81 c6 00 02 00 00    	add    esi,0x200
c0012a7f:	50                   	push   eax
c0012a80:	0f be 05 18 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d518
c0012a87:	ff 34 85 7c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1584]
c0012a8e:	e8 b7 3d 00 00       	call   c001684a <LogicalDisk::write(unsigned long long, int, void*)>
c0012a93:	83 c4 20             	add    esp,0x20
c0012a96:	39 1d 0c d5 02 c0    	cmp    DWORD PTR ds:0xc002d50c,ebx
c0012a9c:	7f c7                	jg     c0012a65 <VAS::evict(unsigned long)+0x1f>
c0012a9e:	83 ec 08             	sub    esp,0x8
c0012aa1:	c1 e7 0b             	shl    edi,0xb
c0012aa4:	55                   	push   ebp
c0012aa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa9:	e8 04 f5 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012aae:	83 c4 0c             	add    esp,0xc
c0012ab1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ab3:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ab9:	09 d7                	or     edi,edx
c0012abb:	89 38                	mov    DWORD PTR [eax],edi
c0012abd:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0012ac2:	40                   	inc    eax
c0012ac3:	a3 e4 e6 02 c0       	mov    ds:0xc002e6e4,eax
c0012ac8:	0f 20 da             	mov    edx,cr3
c0012acb:	0f 22 da             	mov    cr3,edx
c0012ace:	50                   	push   eax
c0012acf:	55                   	push   ebp
c0012ad0:	68 e7 a8 02 c0       	push   0xc002a8e7
c0012ad5:	e8 cb 03 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0012ada:	83 c4 1c             	add    esp,0x1c
c0012add:	5b                   	pop    ebx
c0012ade:	5e                   	pop    esi
c0012adf:	5f                   	pop    edi
c0012ae0:	5d                   	pop    ebp
c0012ae1:	c3                   	ret    

c0012ae2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012ae2:	55                   	push   ebp
c0012ae3:	57                   	push   edi
c0012ae4:	56                   	push   esi
c0012ae5:	53                   	push   ebx
c0012ae6:	83 ec 0c             	sub    esp,0xc
c0012ae9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012aed:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012af3:	0f 84 d1 00 00 00    	je     c0012bca <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012af9:	56                   	push   esi
c0012afa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012afe:	e8 af f4 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012b03:	5b                   	pop    ebx
c0012b04:	85 c0                	test   eax,eax
c0012b06:	5f                   	pop    edi
c0012b07:	89 c3                	mov    ebx,eax
c0012b09:	0f 84 bb 00 00 00    	je     c0012bca <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012b0f:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b11:	31 c0                	xor    eax,eax
c0012b13:	89 fa                	mov    edx,edi
c0012b15:	81 e2 01 04 00 00    	and    edx,0x401
c0012b1b:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b21:	0f 85 a5 00 00 00    	jne    c0012bcc <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012b27:	e8 c1 d3 ff ff       	call   c000feed <Phys::allocatePage()>
c0012b2c:	c1 ef 0b             	shr    edi,0xb
c0012b2f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b31:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b37:	09 c2                	or     edx,eax
c0012b39:	81 ca 01 08 00 00    	or     edx,0x801
c0012b3f:	89 13                	mov    DWORD PTR [ebx],edx
c0012b41:	8b 0d 0c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d50c
c0012b47:	85 c9                	test   ecx,ecx
c0012b49:	7e 3d                	jle    c0012b88 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b4b:	89 f5                	mov    ebp,esi
c0012b4d:	31 db                	xor    ebx,ebx
c0012b4f:	83 ec 0c             	sub    esp,0xc
c0012b52:	57                   	push   edi
c0012b53:	e8 22 f1 ff ff       	call   c0011c7a <Virt::swapIDToSector(unsigned long)>
c0012b58:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b5b:	01 d8                	add    eax,ebx
c0012b5d:	6a 01                	push   0x1
c0012b5f:	31 d2                	xor    edx,edx
c0012b61:	43                   	inc    ebx
c0012b62:	52                   	push   edx
c0012b63:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b69:	50                   	push   eax
c0012b6a:	0f be 05 18 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d518
c0012b71:	ff 34 85 7c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1584]
c0012b78:	e8 61 3c 00 00       	call   c00167de <LogicalDisk::read(unsigned long long, int, void*)>
c0012b7d:	83 c4 20             	add    esp,0x20
c0012b80:	39 1d 0c d5 02 c0    	cmp    DWORD PTR ds:0xc002d50c,ebx
c0012b86:	7f c7                	jg     c0012b4f <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b88:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0012b8d:	48                   	dec    eax
c0012b8e:	52                   	push   edx
c0012b8f:	a3 e4 e6 02 c0       	mov    ds:0xc002e6e4,eax
c0012b94:	50                   	push   eax
c0012b95:	56                   	push   esi
c0012b96:	68 fc a8 02 c0       	push   0xc002a8fc
c0012b9b:	e8 05 03 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0012ba0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ba3:	e8 b4 f0 ff ff       	call   c0011c5c <Virt::freeSwapfilePage(unsigned long)>
c0012ba8:	e8 af b2 00 00       	call   c001de5c <unlockScheduler()>
c0012bad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	25 ff 0f 00 00       	and    eax,0xfff
c0012bb9:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012bbe:	77 14                	ja     c0012bd4 <VAS::tryLoadBackOffDisk(unsigned long)+0xf2>
c0012bc0:	0f 20 d8             	mov    eax,cr3
c0012bc3:	0f 22 d8             	mov    cr3,eax
c0012bc6:	b0 01                	mov    al,0x1
c0012bc8:	eb 02                	jmp    c0012bcc <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012bca:	31 c0                	xor    eax,eax
c0012bcc:	83 c4 0c             	add    esp,0xc
c0012bcf:	5b                   	pop    ebx
c0012bd0:	5e                   	pop    esi
c0012bd1:	5f                   	pop    edi
c0012bd2:	5d                   	pop    ebp
c0012bd3:	c3                   	ret    
c0012bd4:	83 ec 0c             	sub    esp,0xc
c0012bd7:	68 11 a9 02 c0       	push   0xc002a911
c0012bdc:	e8 c4 02 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0012be1:	83 c4 10             	add    esp,0x10
c0012be4:	eb da                	jmp    c0012bc0 <VAS::tryLoadBackOffDisk(unsigned long)+0xde>

c0012be6 <VAS::scanForEviction()>:
c0012be6:	57                   	push   edi
c0012be7:	56                   	push   esi
c0012be8:	53                   	push   ebx
c0012be9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bed:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012bf0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bf6:	75 0e                	jne    c0012c06 <VAS::scanForEviction()+0x20>
c0012bf8:	89 da                	mov    edx,ebx
c0012bfa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bfd:	c1 ea 16             	shr    edx,0x16
c0012c00:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c04:	74 46                	je     c0012c4c <VAS::scanForEviction()+0x66>
c0012c06:	53                   	push   ebx
c0012c07:	56                   	push   esi
c0012c08:	e8 a5 f3 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012c0d:	5a                   	pop    edx
c0012c0e:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c10:	59                   	pop    ecx
c0012c11:	89 f8                	mov    eax,edi
c0012c13:	25 00 0c 00 00       	and    eax,0xc00
c0012c18:	3d 00 0c 00 00       	cmp    eax,0xc00
c0012c1d:	74 3d                	je     c0012c5c <VAS::scanForEviction()+0x76>
c0012c1f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c25:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c2b:	76 2a                	jbe    c0012c57 <VAS::scanForEviction()+0x71>
c0012c2d:	31 db                	xor    ebx,ebx
c0012c2f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c36:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c3c:	75 c8                	jne    c0012c06 <VAS::scanForEviction()+0x20>
c0012c3e:	89 da                	mov    edx,ebx
c0012c40:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c43:	c1 ea 16             	shr    edx,0x16
c0012c46:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c4a:	75 ba                	jne    c0012c06 <VAS::scanForEviction()+0x20>
c0012c4c:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c52:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c55:	eb 99                	jmp    c0012bf0 <VAS::scanForEviction()+0xa>
c0012c57:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c5a:	eb 94                	jmp    c0012bf0 <VAS::scanForEviction()+0xa>
c0012c5c:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c62:	74 bb                	je     c0012c1f <VAS::scanForEviction()+0x39>
c0012c64:	83 ec 08             	sub    esp,0x8
c0012c67:	53                   	push   ebx
c0012c68:	56                   	push   esi
c0012c69:	e8 d8 fd ff ff       	call   c0012a46 <VAS::evict(unsigned long)>
c0012c6e:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	89 f8                	mov    eax,edi
c0012c7a:	5b                   	pop    ebx
c0012c7b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c80:	5e                   	pop    esi
c0012c81:	5f                   	pop    edi
c0012c82:	c3                   	ret    

c0012c83 <mapVASFirstTime>:
c0012c83:	55                   	push   ebp
c0012c84:	57                   	push   edi
c0012c85:	56                   	push   esi
c0012c86:	53                   	push   ebx
c0012c87:	83 ec 0c             	sub    esp,0xc
c0012c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c8f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c92:	4a                   	dec    edx
c0012c93:	0f 84 8e 00 00 00    	je     c0012d27 <mapVASFirstTime+0xa4>
c0012c99:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c9c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c9f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012ca4:	c1 e5 15             	shl    ebp,0x15
c0012ca7:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012cac:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012cb2:	29 eb                	sub    ebx,ebp
c0012cb4:	29 ee                	sub    esi,ebp
c0012cb6:	e8 32 d2 ff ff       	call   c000feed <Phys::allocatePage()>
c0012cbb:	83 ec 0c             	sub    esp,0xc
c0012cbe:	68 03 04 00 00       	push   0x403
c0012cc3:	6a 01                	push   0x1
c0012cc5:	53                   	push   ebx
c0012cc6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012ccc:	50                   	push   eax
c0012ccd:	57                   	push   edi
c0012cce:	e8 59 f9 ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cd3:	83 c4 20             	add    esp,0x20
c0012cd6:	39 f3                	cmp    ebx,esi
c0012cd8:	75 dc                	jne    c0012cb6 <mapVASFirstTime+0x33>
c0012cda:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012cdf:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012ce4:	29 ee                	sub    esi,ebp
c0012ce6:	29 e8                	sub    eax,ebp
c0012ce8:	89 c5                	mov    ebp,eax
c0012cea:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012cee:	19 db                	sbb    ebx,ebx
c0012cf0:	e8 f8 d1 ff ff       	call   c000feed <Phys::allocatePage()>
c0012cf5:	83 e3 04             	and    ebx,0x4
c0012cf8:	83 ec 0c             	sub    esp,0xc
c0012cfb:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d01:	53                   	push   ebx
c0012d02:	6a 01                	push   0x1
c0012d04:	56                   	push   esi
c0012d05:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d0b:	50                   	push   eax
c0012d0c:	57                   	push   edi
c0012d0d:	e8 1a f9 ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d12:	83 c4 20             	add    esp,0x20
c0012d15:	39 f5                	cmp    ebp,esi
c0012d17:	75 d1                	jne    c0012cea <mapVASFirstTime+0x67>
c0012d19:	0f 20 d8             	mov    eax,cr3
c0012d1c:	0f 22 d8             	mov    cr3,eax
c0012d1f:	83 c4 0c             	add    esp,0xc
c0012d22:	5b                   	pop    ebx
c0012d23:	5e                   	pop    esi
c0012d24:	5f                   	pop    edi
c0012d25:	5d                   	pop    ebp
c0012d26:	c3                   	ret    
c0012d27:	83 ec 0c             	sub    esp,0xc
c0012d2a:	68 21 a9 02 c0       	push   0xc002a921
c0012d2f:	e8 71 01 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	83 c4 0c             	add    esp,0xc
c0012d3a:	5b                   	pop    ebx
c0012d3b:	5e                   	pop    esi
c0012d3c:	5f                   	pop    edi
c0012d3d:	5d                   	pop    ebp
c0012d3e:	c3                   	ret    

c0012d3f <__cxa_atexit>:
c0012d3f:	31 c0                	xor    eax,eax
c0012d41:	c3                   	ret    

c0012d42 <__cxa_finalize>:
c0012d42:	c3                   	ret    

c0012d43 <__stack_chk_fail>:
c0012d43:	55                   	push   ebp
c0012d44:	89 e5                	mov    ebp,esp
c0012d46:	83 ec 14             	sub    esp,0x14
c0012d49:	68 3a a9 02 c0       	push   0xc002a93a
c0012d4e:	e8 52 01 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0012d53:	58                   	pop    eax
c0012d54:	5a                   	pop    edx
c0012d55:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d58:	68 8a a9 02 c0       	push   0xc002a98a
c0012d5d:	e8 43 01 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0012d62:	59                   	pop    ecx
c0012d63:	58                   	pop    eax
c0012d64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d67:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d6a:	68 8a a9 02 c0       	push   0xc002a98a
c0012d6f:	e8 31 01 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0012d74:	5a                   	pop    edx
c0012d75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d78:	59                   	pop    ecx
c0012d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d7b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d7e:	68 8a a9 02 c0       	push   0xc002a98a
c0012d83:	e8 1d 01 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0012d88:	5a                   	pop    edx
c0012d89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d8c:	59                   	pop    ecx
c0012d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d91:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d94:	68 8a a9 02 c0       	push   0xc002a98a
c0012d99:	e8 07 01 00 00       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0012d9e:	c7 04 24 92 a9 02 c0 	mov    DWORD PTR [esp],0xc002a992
c0012da5:	e8 d5 78 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0012daa:	83 c4 10             	add    esp,0x10
c0012dad:	c9                   	leave  
c0012dae:	c3                   	ret    

c0012daf <__cxa_pure_virtual>:
c0012daf:	83 ec 18             	sub    esp,0x18
c0012db2:	68 aa a9 02 c0       	push   0xc002a9aa
c0012db7:	e8 c3 78 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0012dbc:	83 c4 1c             	add    esp,0x1c
c0012dbf:	c3                   	ret    

c0012dc0 <operator new[](unsigned long)>:
c0012dc0:	e9 86 ca ff ff       	jmp    c000f84b <malloc>

c0012dc5 <operator delete(void*, unsigned long)>:
c0012dc5:	e9 a1 ca ff ff       	jmp    c000f86b <rfree>

c0012dca <operator delete[](void*)>:
c0012dca:	e9 9c ca ff ff       	jmp    c000f86b <rfree>

c0012dcf <operator delete[](void*, unsigned long)>:
c0012dcf:	e9 97 ca ff ff       	jmp    c000f86b <rfree>

c0012dd4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012dd4:	57                   	push   edi
c0012dd5:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012dda:	56                   	push   esi
c0012ddb:	be c0 a9 02 c0       	mov    esi,0xc002a9c0
c0012de0:	53                   	push   ebx
c0012de1:	83 ec 40             	sub    esp,0x40
c0012de4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012de8:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012dec:	fc                   	cld    
c0012ded:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012def:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012df3:	83 f9 3e             	cmp    ecx,0x3e
c0012df6:	7e 05                	jle    c0012dfd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012df8:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012dfd:	89 df                	mov    edi,ebx
c0012dff:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e03:	eb 02                	jmp    c0012e07 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e05:	89 c7                	mov    edi,eax
c0012e07:	31 d2                	xor    edx,edx
c0012e09:	46                   	inc    esi
c0012e0a:	89 f8                	mov    eax,edi
c0012e0c:	f7 f1                	div    ecx
c0012e0e:	39 cf                	cmp    edi,ecx
c0012e10:	73 f3                	jae    c0012e05 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e12:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e15:	eb 02                	jmp    c0012e19 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e17:	89 c3                	mov    ebx,eax
c0012e19:	31 d2                	xor    edx,edx
c0012e1b:	4e                   	dec    esi
c0012e1c:	89 d8                	mov    eax,ebx
c0012e1e:	f7 f1                	div    ecx
c0012e20:	39 cb                	cmp    ebx,ecx
c0012e22:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e26:	88 16                	mov    BYTE PTR [esi],dl
c0012e28:	73 ed                	jae    c0012e17 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e2a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e2e:	83 c4 40             	add    esp,0x40
c0012e31:	5b                   	pop    ebx
c0012e32:	5e                   	pop    esi
c0012e33:	5f                   	pop    edi
c0012e34:	c3                   	ret    

c0012e35 <Dbg::logc(char)>:
c0012e35:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e39:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e3e:	ec                   	in     al,dx
c0012e3f:	a8 20                	test   al,0x20
c0012e41:	74 fb                	je     c0012e3e <Dbg::logc(char)+0x9>
c0012e43:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e48:	88 c8                	mov    al,cl
c0012e4a:	ee                   	out    dx,al
c0012e4b:	c3                   	ret    

c0012e4c <Dbg::logs(char*)>:
c0012e4c:	53                   	push   ebx
c0012e4d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e51:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e54:	84 c0                	test   al,al
c0012e56:	74 0f                	je     c0012e67 <Dbg::logs(char*)+0x1b>
c0012e58:	50                   	push   eax
c0012e59:	43                   	inc    ebx
c0012e5a:	e8 d6 ff ff ff       	call   c0012e35 <Dbg::logc(char)>
c0012e5f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e62:	5a                   	pop    edx
c0012e63:	84 c0                	test   al,al
c0012e65:	75 f1                	jne    c0012e58 <Dbg::logs(char*)+0xc>
c0012e67:	5b                   	pop    ebx
c0012e68:	c3                   	ret    

c0012e69 <Dbg::logWriteInt(unsigned int)>:
c0012e69:	83 ec 10             	sub    esp,0x10
c0012e6c:	6a 0a                	push   0xa
c0012e6e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e72:	50                   	push   eax
c0012e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e77:	e8 58 ff ff ff       	call   c0012dd4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e7c:	50                   	push   eax
c0012e7d:	e8 ca ff ff ff       	call   c0012e4c <Dbg::logs(char*)>
c0012e82:	83 c4 20             	add    esp,0x20
c0012e85:	c3                   	ret    

c0012e86 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e86:	83 ec 10             	sub    esp,0x10
c0012e89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e8d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e91:	50                   	push   eax
c0012e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e96:	e8 39 ff ff ff       	call   c0012dd4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e9b:	50                   	push   eax
c0012e9c:	e8 ab ff ff ff       	call   c0012e4c <Dbg::logs(char*)>
c0012ea1:	83 c4 20             	add    esp,0x20
c0012ea4:	c3                   	ret    

c0012ea5 <Dbg::kprintf(char const*, ...)>:
c0012ea5:	55                   	push   ebp
c0012ea6:	57                   	push   edi
c0012ea7:	56                   	push   esi
c0012ea8:	53                   	push   ebx
c0012ea9:	83 ec 0c             	sub    esp,0xc
c0012eac:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012eb0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012eb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012eb8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ebb:	84 c0                	test   al,al
c0012ebd:	74 4a                	je     c0012f09 <Dbg::kprintf(char const*, ...)+0x64>
c0012ebf:	31 db                	xor    ebx,ebx
c0012ec1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ec4:	3c 25                	cmp    al,0x25
c0012ec6:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012ec9:	0f 85 e4 00 00 00    	jne    c0012fb3 <Dbg::kprintf(char const*, ...)+0x10e>
c0012ecf:	83 c3 02             	add    ebx,0x2
c0012ed2:	8a 07                	mov    al,BYTE PTR [edi]
c0012ed4:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012ed7:	83 e8 25             	sub    eax,0x25
c0012eda:	3c 53                	cmp    al,0x53
c0012edc:	0f 87 ba 00 00 00    	ja     c0012f9c <Dbg::kprintf(char const*, ...)+0xf7>
c0012ee2:	0f b6 c0             	movzx  eax,al
c0012ee5:	ff 24 85 00 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5600]
c0012eec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ef0:	89 c8                	mov    eax,ecx
c0012ef2:	83 c1 04             	add    ecx,0x4
c0012ef5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ef9:	ff 30                	push   DWORD PTR [eax]
c0012efb:	e8 4c ff ff ff       	call   c0012e4c <Dbg::logs(char*)>
c0012f00:	58                   	pop    eax
c0012f01:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f05:	84 c0                	test   al,al
c0012f07:	75 b8                	jne    c0012ec1 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f09:	83 c4 0c             	add    esp,0xc
c0012f0c:	5b                   	pop    ebx
c0012f0d:	5e                   	pop    esi
c0012f0e:	5f                   	pop    edi
c0012f0f:	5d                   	pop    ebp
c0012f10:	c3                   	ret    
c0012f11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f15:	89 d0                	mov    eax,edx
c0012f17:	83 c2 04             	add    edx,0x4
c0012f1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f1e:	ff 30                	push   DWORD PTR [eax]
c0012f20:	e8 44 ff ff ff       	call   c0012e69 <Dbg::logWriteInt(unsigned int)>
c0012f25:	58                   	pop    eax
c0012f26:	eb d9                	jmp    c0012f01 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f2c:	89 d0                	mov    eax,edx
c0012f2e:	83 c2 04             	add    edx,0x4
c0012f31:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f38:	50                   	push   eax
c0012f39:	e8 f7 fe ff ff       	call   c0012e35 <Dbg::logc(char)>
c0012f3e:	58                   	pop    eax
c0012f3f:	eb c0                	jmp    c0012f01 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f41:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f45:	89 c8                	mov    eax,ecx
c0012f47:	83 c1 04             	add    ecx,0x4
c0012f4a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f4e:	ff 30                	push   DWORD PTR [eax]
c0012f50:	e8 14 ff ff ff       	call   c0012e69 <Dbg::logWriteInt(unsigned int)>
c0012f55:	5f                   	pop    edi
c0012f56:	eb a9                	jmp    c0012f01 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f58:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f5c:	89 c8                	mov    eax,ecx
c0012f5e:	83 c1 04             	add    ecx,0x4
c0012f61:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f65:	6a 10                	push   0x10
c0012f67:	ff 30                	push   DWORD PTR [eax]
c0012f69:	e8 18 ff ff ff       	call   c0012e86 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f6e:	59                   	pop    ecx
c0012f6f:	5f                   	pop    edi
c0012f70:	eb 8f                	jmp    c0012f01 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f76:	89 d0                	mov    eax,edx
c0012f78:	83 c2 08             	add    edx,0x8
c0012f7b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f7f:	6a 10                	push   0x10
c0012f81:	ff 30                	push   DWORD PTR [eax]
c0012f83:	e8 fe fe ff ff       	call   c0012e86 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f88:	58                   	pop    eax
c0012f89:	5a                   	pop    edx
c0012f8a:	e9 72 ff ff ff       	jmp    c0012f01 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f8f:	6a 25                	push   0x25
c0012f91:	e8 9f fe ff ff       	call   c0012e35 <Dbg::logc(char)>
c0012f96:	58                   	pop    eax
c0012f97:	e9 65 ff ff ff       	jmp    c0012f01 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f9c:	6a 25                	push   0x25
c0012f9e:	e8 92 fe ff ff       	call   c0012e35 <Dbg::logc(char)>
c0012fa3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fa6:	50                   	push   eax
c0012fa7:	e8 89 fe ff ff       	call   c0012e35 <Dbg::logc(char)>
c0012fac:	5a                   	pop    edx
c0012fad:	59                   	pop    ecx
c0012fae:	e9 4e ff ff ff       	jmp    c0012f01 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fb3:	50                   	push   eax
c0012fb4:	89 eb                	mov    ebx,ebp
c0012fb6:	e8 7a fe ff ff       	call   c0012e35 <Dbg::logc(char)>
c0012fbb:	89 fd                	mov    ebp,edi
c0012fbd:	58                   	pop    eax
c0012fbe:	e9 3e ff ff ff       	jmp    c0012f01 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fc3:	90                   	nop

c0012fc4 <File::read(unsigned long long, void*, int*)>:
c0012fc4:	53                   	push   ebx
c0012fc5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fc9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fcd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fd4:	3c 19                	cmp    al,0x19
c0012fd6:	77 35                	ja     c001300d <File::read(unsigned long long, void*, int*)+0x49>
c0012fd8:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c0012fdf:	85 c0                	test   eax,eax
c0012fe1:	74 2a                	je     c001300d <File::read(unsigned long long, void*, int*)+0x49>
c0012fe3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fe9:	85 c0                	test   eax,eax
c0012feb:	74 20                	je     c001300d <File::read(unsigned long long, void*, int*)+0x49>
c0012fed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ff1:	74 21                	je     c0013014 <File::read(unsigned long long, void*, int*)+0x50>
c0012ff3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ff5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ff9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013003:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013007:	5b                   	pop    ebx
c0013008:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001300b:	ff e0                	jmp    eax
c001300d:	b8 0b 00 00 00       	mov    eax,0xb
c0013012:	eb 05                	jmp    c0013019 <File::read(unsigned long long, void*, int*)+0x55>
c0013014:	b8 05 00 00 00       	mov    eax,0x5
c0013019:	5b                   	pop    ebx
c001301a:	c3                   	ret    
c001301b:	90                   	nop

c001301c <File::write(unsigned long long, void*, int*)>:
c001301c:	53                   	push   ebx
c001301d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013021:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013025:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001302c:	3c 19                	cmp    al,0x19
c001302e:	77 35                	ja     c0013065 <File::write(unsigned long long, void*, int*)+0x49>
c0013030:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c0013037:	85 c0                	test   eax,eax
c0013039:	74 2a                	je     c0013065 <File::write(unsigned long long, void*, int*)+0x49>
c001303b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013041:	85 c0                	test   eax,eax
c0013043:	74 20                	je     c0013065 <File::write(unsigned long long, void*, int*)+0x49>
c0013045:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013049:	74 21                	je     c001306c <File::write(unsigned long long, void*, int*)+0x50>
c001304b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001304d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013051:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013057:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001305b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001305f:	5b                   	pop    ebx
c0013060:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013063:	ff e0                	jmp    eax
c0013065:	b8 0b 00 00 00       	mov    eax,0xb
c001306a:	eb 05                	jmp    c0013071 <File::write(unsigned long long, void*, int*)+0x55>
c001306c:	b8 05 00 00 00       	mov    eax,0x5
c0013071:	5b                   	pop    ebx
c0013072:	c3                   	ret    
c0013073:	90                   	nop

c0013074 <Directory::read(unsigned long long, void*, int*)>:
c0013074:	53                   	push   ebx
c0013075:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013079:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001307d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013084:	3c 19                	cmp    al,0x19
c0013086:	77 35                	ja     c00130bd <Directory::read(unsigned long long, void*, int*)+0x49>
c0013088:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c001308f:	85 c0                	test   eax,eax
c0013091:	74 2a                	je     c00130bd <Directory::read(unsigned long long, void*, int*)+0x49>
c0013093:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013099:	85 c0                	test   eax,eax
c001309b:	74 20                	je     c00130bd <Directory::read(unsigned long long, void*, int*)+0x49>
c001309d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130a1:	74 21                	je     c00130c4 <Directory::read(unsigned long long, void*, int*)+0x50>
c00130a3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130a5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130a9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130b7:	5b                   	pop    ebx
c00130b8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130bb:	ff e0                	jmp    eax
c00130bd:	b8 0b 00 00 00       	mov    eax,0xb
c00130c2:	eb 05                	jmp    c00130c9 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130c4:	b8 05 00 00 00       	mov    eax,0x5
c00130c9:	5b                   	pop    ebx
c00130ca:	c3                   	ret    
c00130cb:	90                   	nop

c00130cc <Directory::write(unsigned long long, void*, int*)>:
c00130cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130d0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130d7:	b8 0b 00 00 00       	mov    eax,0xb
c00130dc:	80 fa 19             	cmp    dl,0x19
c00130df:	77 18                	ja     c00130f9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130e1:	8b 14 95 80 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1480]
c00130e8:	85 d2                	test   edx,edx
c00130ea:	74 0d                	je     c00130f9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130ec:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130f3:	19 c0                	sbb    eax,eax
c00130f5:	83 e0 0a             	and    eax,0xa
c00130f8:	40                   	inc    eax
c00130f9:	c3                   	ret    

c00130fa <File::isAtty()>:
c00130fa:	31 c0                	xor    eax,eax
c00130fc:	c3                   	ret    
c00130fd:	90                   	nop

c00130fe <Directory::isAtty()>:
c00130fe:	31 c0                	xor    eax,eax
c0013100:	c3                   	ret    
c0013101:	90                   	nop

c0013102 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013102:	b8 0a 00 00 00       	mov    eax,0xa
c0013107:	c3                   	ret    

c0013108 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013108:	b8 0a 00 00 00       	mov    eax,0xa
c001310d:	c3                   	ret    

c001310e <File::~File()>:
c001310e:	83 ec 0c             	sub    esp,0xc
c0013111:	ba bc ab 02 c0       	mov    edx,0xc002abbc
c0013116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311a:	89 10                	mov    DWORD PTR [eax],edx
c001311c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	50                   	push   eax
c0013124:	e8 c1 e7 ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c0013129:	83 c4 10             	add    esp,0x10
c001312c:	90                   	nop
c001312d:	83 c4 0c             	add    esp,0xc
c0013130:	c3                   	ret    
c0013131:	90                   	nop

c0013132 <File::~File()>:
c0013132:	83 ec 0c             	sub    esp,0xc
c0013135:	83 ec 0c             	sub    esp,0xc
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 cd ff ff ff       	call   c001310e <File::~File()>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	83 ec 08             	sub    esp,0x8
c0013147:	68 14 01 00 00       	push   0x114
c001314c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013150:	e8 70 fc ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	83 c4 0c             	add    esp,0xc
c001315b:	c3                   	ret    

c001315c <Directory::~Directory()>:
c001315c:	83 ec 0c             	sub    esp,0xc
c001315f:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0013164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013168:	89 10                	mov    DWORD PTR [eax],edx
c001316a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001316e:	83 ec 0c             	sub    esp,0xc
c0013171:	50                   	push   eax
c0013172:	e8 73 e7 ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	90                   	nop
c001317b:	83 c4 0c             	add    esp,0xc
c001317e:	c3                   	ret    
c001317f:	90                   	nop

c0013180 <Directory::~Directory()>:
c0013180:	83 ec 0c             	sub    esp,0xc
c0013183:	83 ec 0c             	sub    esp,0xc
c0013186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001318a:	e8 cd ff ff ff       	call   c001315c <Directory::~Directory()>
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	83 ec 08             	sub    esp,0x8
c0013195:	68 14 01 00 00       	push   0x114
c001319a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001319e:	e8 22 fc ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00131a3:	83 c4 10             	add    esp,0x10
c00131a6:	83 c4 0c             	add    esp,0xc
c00131a9:	c3                   	ret    

c00131aa <Filesystem::Filesystem()>:
c00131aa:	ba 58 ab 02 c0       	mov    edx,0xc002ab58
c00131af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131b3:	89 10                	mov    DWORD PTR [eax],edx
c00131b5:	8b 15 f0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6f0
c00131bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131c6:	a3 f0 e6 02 c0       	mov    ds:0xc002e6f0,eax
c00131cb:	90                   	nop
c00131cc:	c3                   	ret    
c00131cd:	90                   	nop

c00131ce <Filesystem::~Filesystem()>:
c00131ce:	ba 58 ab 02 c0       	mov    edx,0xc002ab58
c00131d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131d7:	89 10                	mov    DWORD PTR [eax],edx
c00131d9:	90                   	nop
c00131da:	c3                   	ret    
c00131db:	90                   	nop

c00131dc <Filesystem::~Filesystem()>:
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131e3:	e8 e6 ff ff ff       	call   c00131ce <Filesystem::~Filesystem()>
c00131e8:	83 c4 04             	add    esp,0x4
c00131eb:	83 ec 08             	sub    esp,0x8
c00131ee:	6a 08                	push   0x8
c00131f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f4:	e8 cc fb ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00131f9:	83 c4 10             	add    esp,0x10
c00131fc:	83 c4 0c             	add    esp,0xc
c00131ff:	c3                   	ret    

c0013200 <Fs::getcwd(Process*, char*, int)>:
c0013200:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013204:	31 c0                	xor    eax,eax
c0013206:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013209:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001320d:	7d 15                	jge    c0013224 <Fs::getcwd(Process*, char*, int)+0x24>
c001320f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013213:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001321a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001321d:	84 c9                	test   cl,cl
c001321f:	74 06                	je     c0013227 <Fs::getcwd(Process*, char*, int)+0x27>
c0013221:	40                   	inc    eax
c0013222:	eb e2                	jmp    c0013206 <Fs::getcwd(Process*, char*, int)+0x6>
c0013224:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013227:	31 c0                	xor    eax,eax
c0013229:	c3                   	ret    

c001322a <Fs::initVFS()>:
c001322a:	83 ec 18             	sub    esp,0x18
c001322d:	6a 08                	push   0x8
c001322f:	e8 17 c6 ff ff       	call   c000f84b <malloc>
c0013234:	89 04 24             	mov    DWORD PTR [esp],eax
c0013237:	e8 cc dd 00 00       	call   c0021008 <FAT::FAT()>
c001323c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013243:	e8 03 c6 ff ff       	call   c000f84b <malloc>
c0013248:	89 04 24             	mov    DWORD PTR [esp],eax
c001324b:	e8 10 f0 00 00       	call   c0022260 <ISO9660::ISO9660()>
c0013250:	83 c4 1c             	add    esp,0x1c
c0013253:	c3                   	ret    

c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013254:	55                   	push   ebp
c0013255:	57                   	push   edi
c0013256:	56                   	push   esi
c0013257:	53                   	push   ebx
c0013258:	81 ec 10 04 00 00    	sub    esp,0x410
c001325e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013265:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001326c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013273:	68 00 04 00 00       	push   0x400
c0013278:	6a 00                	push   0x0
c001327a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001327e:	56                   	push   esi
c001327f:	e8 fc d4 fe ff       	call   c0000780 <memset>
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001328b:	75 0b                	jne    c0013298 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001328d:	50                   	push   eax
c001328e:	50                   	push   eax
c001328f:	57                   	push   edi
c0013290:	56                   	push   esi
c0013291:	e8 a6 d5 fe ff       	call   c000083c <strcpy>
c0013296:	eb 41                	jmp    c00132d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013298:	8a 07                	mov    al,BYTE PTR [edi]
c001329a:	3c 5c                	cmp    al,0x5c
c001329c:	74 04                	je     c00132a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001329e:	3c 2f                	cmp    al,0x2f
c00132a0:	75 18                	jne    c00132ba <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132a2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132a5:	3c 60                	cmp    al,0x60
c00132a7:	7e 03                	jle    c00132ac <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132a9:	83 e8 20             	sub    eax,0x20
c00132ac:	88 04 24             	mov    BYTE PTR [esp],al
c00132af:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132b6:	50                   	push   eax
c00132b7:	50                   	push   eax
c00132b8:	eb 18                	jmp    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132ba:	50                   	push   eax
c00132bb:	50                   	push   eax
c00132bc:	55                   	push   ebp
c00132bd:	56                   	push   esi
c00132be:	e8 79 d5 fe ff       	call   c000083c <strcpy>
c00132c3:	5a                   	pop    edx
c00132c4:	59                   	pop    ecx
c00132c5:	68 1d c3 02 c0       	push   0xc002c31d
c00132ca:	56                   	push   esi
c00132cb:	e8 ac d6 fe ff       	call   c000097c <strcat>
c00132d0:	5d                   	pop    ebp
c00132d1:	58                   	pop    eax
c00132d2:	57                   	push   edi
c00132d3:	56                   	push   esi
c00132d4:	e8 a3 d6 fe ff       	call   c000097c <strcat>
c00132d9:	83 c4 10             	add    esp,0x10
c00132dc:	8a 04 24             	mov    al,BYTE PTR [esp]
c00132df:	3c 60                	cmp    al,0x60
c00132e1:	7e 03                	jle    c00132e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00132e3:	83 e8 20             	sub    eax,0x20
c00132e6:	88 04 24             	mov    BYTE PTR [esp],al
c00132e9:	88 03                	mov    BYTE PTR [ebx],al
c00132eb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132f2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132f8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132fc:	bf 03 00 00 00       	mov    edi,0x3
c0013301:	b8 03 00 00 00       	mov    eax,0x3
c0013306:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013309:	84 d2                	test   dl,dl
c001330b:	0f 84 91 00 00 00    	je     c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013311:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013314:	80 fa 5c             	cmp    dl,0x5c
c0013317:	74 05                	je     c001331e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013319:	80 fa 2f             	cmp    dl,0x2f
c001331c:	75 12                	jne    c0013330 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001331e:	89 c5                	mov    ebp,eax
c0013320:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013325:	74 09                	je     c0013330 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013327:	40                   	inc    eax
c0013328:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001332c:	89 cf                	mov    edi,ecx
c001332e:	eb d6                	jmp    c0013306 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013330:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013335:	75 5b                	jne    c0013392 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013337:	80 fa 2e             	cmp    dl,0x2e
c001333a:	75 56                	jne    c0013392 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001333c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013340:	74 19                	je     c001335b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013342:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013347:	74 53                	je     c001339c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013349:	89 f9                	mov    ecx,edi
c001334b:	41                   	inc    ecx
c001334c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001334f:	80 fa 2f             	cmp    dl,0x2f
c0013352:	74 f7                	je     c001334b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013354:	80 fa 5c             	cmp    dl,0x5c
c0013357:	74 f2                	je     c001334b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013359:	eb d1                	jmp    c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001335b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013360:	74 3a                	je     c001339c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013362:	83 f8 03             	cmp    eax,0x3
c0013365:	74 c5                	je     c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013367:	41                   	inc    ecx
c0013368:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001336b:	80 fa 2f             	cmp    dl,0x2f
c001336e:	74 f7                	je     c0013367 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013370:	80 fa 5c             	cmp    dl,0x5c
c0013373:	74 f2                	je     c0013367 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013375:	48                   	dec    eax
c0013376:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001337a:	75 06                	jne    c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001337c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013380:	eb f3                	jmp    c0013375 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013382:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013386:	74 07                	je     c001338f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013388:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001338c:	48                   	dec    eax
c001338d:	eb f3                	jmp    c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001338f:	40                   	inc    eax
c0013390:	eb 9a                	jmp    c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013392:	80 fa 2f             	cmp    dl,0x2f
c0013395:	74 95                	je     c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013397:	80 fa 5c             	cmp    dl,0x5c
c001339a:	74 90                	je     c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001339c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001339f:	40                   	inc    eax
c00133a0:	eb 8a                	jmp    c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133a2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	53                   	push   ebx
c00133aa:	e8 ed d3 fe ff       	call   c000079c <strlen>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133b7:	75 26                	jne    c00133df <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133b9:	83 ec 0c             	sub    esp,0xc
c00133bc:	53                   	push   ebx
c00133bd:	e8 da d3 fe ff       	call   c000079c <strlen>
c00133c2:	83 c4 10             	add    esp,0x10
c00133c5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133ca:	74 26                	je     c00133f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	53                   	push   ebx
c00133d0:	e8 c7 d3 fe ff       	call   c000079c <strlen>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00133dd:	eb c7                	jmp    c00133a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00133df:	83 ec 0c             	sub    esp,0xc
c00133e2:	53                   	push   ebx
c00133e3:	e8 b4 d3 fe ff       	call   c000079c <strlen>
c00133e8:	83 c4 10             	add    esp,0x10
c00133eb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133f0:	74 c7                	je     c00133b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133f2:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133f8:	5b                   	pop    ebx
c00133f9:	5e                   	pop    esi
c00133fa:	5f                   	pop    edi
c00133fb:	5d                   	pop    ebp
c00133fc:	c3                   	ret    
c00133fd:	90                   	nop

c00133fe <File::File(char const*, Process*)>:
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013405:	83 ec 08             	sub    esp,0x8
c0013408:	6a 00                	push   0x0
c001340a:	50                   	push   eax
c001340b:	e8 f8 e2 ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c0013410:	83 c4 10             	add    esp,0x10
c0013413:	ba bc ab 02 c0       	mov    edx,0xc002abbc
c0013418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341c:	89 10                	mov    DWORD PTR [eax],edx
c001341e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013422:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342c:	83 c0 0d             	add    eax,0xd
c001342f:	83 ec 04             	sub    esp,0x4
c0013432:	52                   	push   edx
c0013433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013437:	50                   	push   eax
c0013438:	e8 17 fe ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013444:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013447:	8d 50 bf             	lea    edx,[eax-0x41]
c001344a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013458:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001345c:	90                   	nop
c001345d:	83 c4 0c             	add    esp,0xc
c0013460:	c3                   	ret    
c0013461:	90                   	nop

c0013462 <File::open(FileOpenMode)>:
c0013462:	53                   	push   ebx
c0013463:	b8 0b 00 00 00       	mov    eax,0xb
c0013468:	83 ec 08             	sub    esp,0x8
c001346b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001346f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013476:	80 fa 19             	cmp    dl,0x19
c0013479:	77 40                	ja     c00134bb <File::open(FileOpenMode)+0x59>
c001347b:	8b 14 95 80 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1480]
c0013482:	85 d2                	test   edx,edx
c0013484:	74 35                	je     c00134bb <File::open(FileOpenMode)+0x59>
c0013486:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001348c:	85 d2                	test   edx,edx
c001348e:	74 2b                	je     c00134bb <File::open(FileOpenMode)+0x59>
c0013490:	b8 06 00 00 00       	mov    eax,0x6
c0013495:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013499:	75 20                	jne    c00134bb <File::open(FileOpenMode)+0x59>
c001349b:	8b 02                	mov    eax,DWORD PTR [edx]
c001349d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134a7:	51                   	push   ecx
c00134a8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134ab:	51                   	push   ecx
c00134ac:	52                   	push   edx
c00134ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134b0:	83 c4 10             	add    esp,0x10
c00134b3:	85 c0                	test   eax,eax
c00134b5:	75 04                	jne    c00134bb <File::open(FileOpenMode)+0x59>
c00134b7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134bb:	83 c4 08             	add    esp,0x8
c00134be:	5b                   	pop    ebx
c00134bf:	c3                   	ret    

c00134c0 <File::close()>:
c00134c0:	53                   	push   ebx
c00134c1:	b8 0b 00 00 00       	mov    eax,0xb
c00134c6:	83 ec 08             	sub    esp,0x8
c00134c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134cd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134d4:	80 fa 19             	cmp    dl,0x19
c00134d7:	77 41                	ja     c001351a <File::close()+0x5a>
c00134d9:	8b 1c 95 80 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1480]
c00134e0:	85 db                	test   ebx,ebx
c00134e2:	74 36                	je     c001351a <File::close()+0x5a>
c00134e4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134eb:	74 2d                	je     c001351a <File::close()+0x5a>
c00134ed:	b8 05 00 00 00       	mov    eax,0x5
c00134f2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134f6:	74 22                	je     c001351a <File::close()+0x5a>
c00134f8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134fc:	8b 04 95 80 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1480]
c0013503:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013509:	53                   	push   ebx
c001350a:	53                   	push   ebx
c001350b:	8b 10                	mov    edx,DWORD PTR [eax]
c001350d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013513:	50                   	push   eax
c0013514:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	83 c4 08             	add    esp,0x8
c001351d:	5b                   	pop    ebx
c001351e:	c3                   	ret    
c001351f:	90                   	nop

c0013520 <File::seek(unsigned long long)>:
c0013520:	56                   	push   esi
c0013521:	53                   	push   ebx
c0013522:	b8 0b 00 00 00       	mov    eax,0xb
c0013527:	51                   	push   ecx
c0013528:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001352c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013530:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013537:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001353b:	80 fa 19             	cmp    dl,0x19
c001353e:	77 31                	ja     c0013571 <File::seek(unsigned long long)+0x51>
c0013540:	8b 14 95 80 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1480]
c0013547:	85 d2                	test   edx,edx
c0013549:	74 26                	je     c0013571 <File::seek(unsigned long long)+0x51>
c001354b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013551:	85 d2                	test   edx,edx
c0013553:	74 1c                	je     c0013571 <File::seek(unsigned long long)+0x51>
c0013555:	b8 05 00 00 00       	mov    eax,0x5
c001355a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001355e:	74 11                	je     c0013571 <File::seek(unsigned long long)+0x51>
c0013560:	8b 02                	mov    eax,DWORD PTR [edx]
c0013562:	53                   	push   ebx
c0013563:	51                   	push   ecx
c0013564:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001356a:	52                   	push   edx
c001356b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001356e:	83 c4 10             	add    esp,0x10
c0013571:	5a                   	pop    edx
c0013572:	5b                   	pop    ebx
c0013573:	5e                   	pop    esi
c0013574:	c3                   	ret    
c0013575:	90                   	nop

c0013576 <File::tell(unsigned long long*)>:
c0013576:	83 ec 0c             	sub    esp,0xc
c0013579:	b8 0b 00 00 00       	mov    eax,0xb
c001357e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013582:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013589:	80 fa 19             	cmp    dl,0x19
c001358c:	77 34                	ja     c00135c2 <File::tell(unsigned long long*)+0x4c>
c001358e:	8b 14 95 80 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1480]
c0013595:	85 d2                	test   edx,edx
c0013597:	74 29                	je     c00135c2 <File::tell(unsigned long long*)+0x4c>
c0013599:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001359f:	85 d2                	test   edx,edx
c00135a1:	74 1f                	je     c00135c2 <File::tell(unsigned long long*)+0x4c>
c00135a3:	b8 05 00 00 00       	mov    eax,0x5
c00135a8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135ac:	74 14                	je     c00135c2 <File::tell(unsigned long long*)+0x4c>
c00135ae:	50                   	push   eax
c00135af:	8b 02                	mov    eax,DWORD PTR [edx]
c00135b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135bb:	52                   	push   edx
c00135bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	83 c4 0c             	add    esp,0xc
c00135c5:	c3                   	ret    

c00135c6 <File::rewind()>:
c00135c6:	83 ec 10             	sub    esp,0x10
c00135c9:	6a 00                	push   0x0
c00135cb:	6a 00                	push   0x0
c00135cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d1:	e8 4a ff ff ff       	call   c0013520 <File::seek(unsigned long long)>
c00135d6:	83 c4 1c             	add    esp,0x1c
c00135d9:	c3                   	ret    

c00135da <File::unlink()>:
c00135da:	83 ec 0c             	sub    esp,0xc
c00135dd:	b8 0b 00 00 00       	mov    eax,0xb
c00135e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135ed:	80 f9 19             	cmp    cl,0x19
c00135f0:	77 2f                	ja     c0013621 <File::unlink()+0x47>
c00135f2:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c00135f9:	85 c9                	test   ecx,ecx
c00135fb:	74 24                	je     c0013621 <File::unlink()+0x47>
c00135fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013603:	85 c9                	test   ecx,ecx
c0013605:	74 1a                	je     c0013621 <File::unlink()+0x47>
c0013607:	b8 06 00 00 00       	mov    eax,0x6
c001360c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013610:	75 0f                	jne    c0013621 <File::unlink()+0x47>
c0013612:	83 c2 0d             	add    edx,0xd
c0013615:	50                   	push   eax
c0013616:	50                   	push   eax
c0013617:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013619:	52                   	push   edx
c001361a:	51                   	push   ecx
c001361b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001361e:	83 c4 10             	add    esp,0x10
c0013621:	83 c4 0c             	add    esp,0xc
c0013624:	c3                   	ret    
c0013625:	90                   	nop

c0013626 <File::rename(char const*)>:
c0013626:	83 ec 0c             	sub    esp,0xc
c0013629:	b8 0b 00 00 00       	mov    eax,0xb
c001362e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013632:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013639:	80 f9 19             	cmp    cl,0x19
c001363c:	77 32                	ja     c0013670 <File::rename(char const*)+0x4a>
c001363e:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c0013645:	85 c9                	test   ecx,ecx
c0013647:	74 27                	je     c0013670 <File::rename(char const*)+0x4a>
c0013649:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001364f:	85 c9                	test   ecx,ecx
c0013651:	74 1d                	je     c0013670 <File::rename(char const*)+0x4a>
c0013653:	b8 06 00 00 00       	mov    eax,0x6
c0013658:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001365c:	75 12                	jne    c0013670 <File::rename(char const*)+0x4a>
c001365e:	83 c2 0d             	add    edx,0xd
c0013661:	50                   	push   eax
c0013662:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013664:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013668:	52                   	push   edx
c0013669:	51                   	push   ecx
c001366a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001366d:	83 c4 10             	add    esp,0x10
c0013670:	83 c4 0c             	add    esp,0xc
c0013673:	c3                   	ret    

c0013674 <File::chfatattr(unsigned char, unsigned char)>:
c0013674:	57                   	push   edi
c0013675:	b8 0b 00 00 00       	mov    eax,0xb
c001367a:	56                   	push   esi
c001367b:	53                   	push   ebx
c001367c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013680:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013684:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001368b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001368f:	80 f9 19             	cmp    cl,0x19
c0013692:	77 37                	ja     c00136cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013694:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c001369b:	85 c9                	test   ecx,ecx
c001369d:	74 2c                	je     c00136cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c001369f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a5:	85 c9                	test   ecx,ecx
c00136a7:	74 22                	je     c00136cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136a9:	b8 06 00 00 00       	mov    eax,0x6
c00136ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136b2:	75 17                	jne    c00136cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136b4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136b6:	89 f0                	mov    eax,esi
c00136b8:	83 c2 0d             	add    edx,0xd
c00136bb:	0f b6 f0             	movzx  esi,al
c00136be:	0f b6 db             	movzx  ebx,bl
c00136c1:	56                   	push   esi
c00136c2:	53                   	push   ebx
c00136c3:	52                   	push   edx
c00136c4:	51                   	push   ecx
c00136c5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	5b                   	pop    ebx
c00136cc:	5e                   	pop    esi
c00136cd:	5f                   	pop    edi
c00136ce:	c3                   	ret    
c00136cf:	90                   	nop

c00136d0 <File::exists()>:
c00136d0:	83 ec 0c             	sub    esp,0xc
c00136d3:	31 c0                	xor    eax,eax
c00136d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136e0:	80 f9 19             	cmp    cl,0x19
c00136e3:	77 24                	ja     c0013709 <File::exists()+0x39>
c00136e5:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c00136ec:	85 c9                	test   ecx,ecx
c00136ee:	74 19                	je     c0013709 <File::exists()+0x39>
c00136f0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f6:	85 c9                	test   ecx,ecx
c00136f8:	74 0f                	je     c0013709 <File::exists()+0x39>
c00136fa:	83 c2 0d             	add    edx,0xd
c00136fd:	50                   	push   eax
c00136fe:	50                   	push   eax
c00136ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013701:	52                   	push   edx
c0013702:	51                   	push   ecx
c0013703:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013706:	83 c4 10             	add    esp,0x10
c0013709:	83 c4 0c             	add    esp,0xc
c001370c:	c3                   	ret    
c001370d:	90                   	nop

c001370e <File::stat(unsigned long long*, bool*)>:
c001370e:	56                   	push   esi
c001370f:	53                   	push   ebx
c0013710:	50                   	push   eax
c0013711:	b8 0b 00 00 00       	mov    eax,0xb
c0013716:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001371a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001371e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013725:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013729:	80 f9 19             	cmp    cl,0x19
c001372c:	77 3d                	ja     c001376b <File::stat(unsigned long long*, bool*)+0x5d>
c001372e:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c0013735:	85 c9                	test   ecx,ecx
c0013737:	74 32                	je     c001376b <File::stat(unsigned long long*, bool*)+0x5d>
c0013739:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001373f:	85 c9                	test   ecx,ecx
c0013741:	74 28                	je     c001376b <File::stat(unsigned long long*, bool*)+0x5d>
c0013743:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013745:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013749:	74 13                	je     c001375e <File::stat(unsigned long long*, bool*)+0x50>
c001374b:	83 ec 04             	sub    esp,0x4
c001374e:	56                   	push   esi
c001374f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013755:	51                   	push   ecx
c0013756:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013759:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001375c:	eb 0a                	jmp    c0013768 <File::stat(unsigned long long*, bool*)+0x5a>
c001375e:	53                   	push   ebx
c001375f:	83 c2 0d             	add    edx,0xd
c0013762:	56                   	push   esi
c0013763:	52                   	push   edx
c0013764:	51                   	push   ecx
c0013765:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013768:	83 c4 10             	add    esp,0x10
c001376b:	5a                   	pop    edx
c001376c:	5b                   	pop    ebx
c001376d:	5e                   	pop    esi
c001376e:	c3                   	ret    

c001376f <Fs::setcwd(Process*, char*)>:
c001376f:	55                   	push   ebp
c0013770:	57                   	push   edi
c0013771:	56                   	push   esi
c0013772:	53                   	push   ebx
c0013773:	81 ec 20 02 00 00    	sub    esp,0x220
c0013779:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013780:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013786:	57                   	push   edi
c0013787:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001378e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013792:	56                   	push   esi
c0013793:	e8 bc fa ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013798:	89 34 24             	mov    DWORD PTR [esp],esi
c001379b:	e8 fc cf fe ff       	call   c000079c <strlen>
c00137a0:	83 c4 10             	add    esp,0x10
c00137a3:	83 f8 02             	cmp    eax,0x2
c00137a6:	77 17                	ja     c00137bf <Fs::setcwd(Process*, char*)+0x50>
c00137a8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137ad:	83 e8 41             	sub    eax,0x41
c00137b0:	83 f8 19             	cmp    eax,0x19
c00137b3:	76 24                	jbe    c00137d9 <Fs::setcwd(Process*, char*)+0x6a>
c00137b5:	b8 03 00 00 00       	mov    eax,0x3
c00137ba:	e9 e0 00 00 00       	jmp    c001389f <Fs::setcwd(Process*, char*)+0x130>
c00137bf:	83 ec 0c             	sub    esp,0xc
c00137c2:	56                   	push   esi
c00137c3:	e8 d4 cf fe ff       	call   c000079c <strlen>
c00137c8:	83 c4 10             	add    esp,0x10
c00137cb:	83 f8 03             	cmp    eax,0x3
c00137ce:	75 34                	jne    c0013804 <Fs::setcwd(Process*, char*)+0x95>
c00137d0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00137d5:	75 2d                	jne    c0013804 <Fs::setcwd(Process*, char*)+0x95>
c00137d7:	eb cf                	jmp    c00137a8 <Fs::setcwd(Process*, char*)+0x39>
c00137d9:	8b 14 85 80 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1480]
c00137e0:	b8 05 00 00 00       	mov    eax,0x5
c00137e5:	85 d2                	test   edx,edx
c00137e7:	0f 84 b2 00 00 00    	je     c001389f <Fs::setcwd(Process*, char*)+0x130>
c00137ed:	b8 06 00 00 00       	mov    eax,0x6
c00137f2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137f9:	0f 85 92 00 00 00    	jne    c0013891 <Fs::setcwd(Process*, char*)+0x122>
c00137ff:	e9 9b 00 00 00       	jmp    c001389f <Fs::setcwd(Process*, char*)+0x130>
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	68 14 01 00 00       	push   0x114
c001380c:	e8 3a c0 ff ff       	call   c000f84b <malloc>
c0013811:	83 c4 0c             	add    esp,0xc
c0013814:	89 c3                	mov    ebx,eax
c0013816:	55                   	push   ebp
c0013817:	56                   	push   esi
c0013818:	50                   	push   eax
c0013819:	e8 e0 fb ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001381e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013823:	83 c4 0c             	add    esp,0xc
c0013826:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001382a:	50                   	push   eax
c001382b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001382f:	50                   	push   eax
c0013830:	53                   	push   ebx
c0013831:	e8 d8 fe ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c0013836:	83 c4 10             	add    esp,0x10
c0013839:	83 f8 02             	cmp    eax,0x2
c001383c:	74 04                	je     c0013842 <Fs::setcwd(Process*, char*)+0xd3>
c001383e:	85 c0                	test   eax,eax
c0013840:	74 1c                	je     c001385e <Fs::setcwd(Process*, char*)+0xef>
c0013842:	b8 01 00 00 00       	mov    eax,0x1
c0013847:	85 db                	test   ebx,ebx
c0013849:	74 54                	je     c001389f <Fs::setcwd(Process*, char*)+0x130>
c001384b:	83 ec 0c             	sub    esp,0xc
c001384e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013850:	53                   	push   ebx
c0013851:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	b8 01 00 00 00       	mov    eax,0x1
c001385c:	eb 41                	jmp    c001389f <Fs::setcwd(Process*, char*)+0x130>
c001385e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013863:	75 1c                	jne    c0013881 <Fs::setcwd(Process*, char*)+0x112>
c0013865:	b8 02 00 00 00       	mov    eax,0x2
c001386a:	85 db                	test   ebx,ebx
c001386c:	74 31                	je     c001389f <Fs::setcwd(Process*, char*)+0x130>
c001386e:	83 ec 0c             	sub    esp,0xc
c0013871:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013873:	53                   	push   ebx
c0013874:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013877:	83 c4 10             	add    esp,0x10
c001387a:	b8 02 00 00 00       	mov    eax,0x2
c001387f:	eb 1e                	jmp    c001389f <Fs::setcwd(Process*, char*)+0x130>
c0013881:	85 db                	test   ebx,ebx
c0013883:	74 0c                	je     c0013891 <Fs::setcwd(Process*, char*)+0x122>
c0013885:	83 ec 0c             	sub    esp,0xc
c0013888:	8b 03                	mov    eax,DWORD PTR [ebx]
c001388a:	53                   	push   ebx
c001388b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001388e:	83 c4 10             	add    esp,0x10
c0013891:	50                   	push   eax
c0013892:	50                   	push   eax
c0013893:	56                   	push   esi
c0013894:	57                   	push   edi
c0013895:	e8 a2 cf fe ff       	call   c000083c <strcpy>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	31 c0                	xor    eax,eax
c001389f:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138a5:	5b                   	pop    ebx
c00138a6:	5e                   	pop    esi
c00138a7:	5f                   	pop    edi
c00138a8:	5d                   	pop    ebp
c00138a9:	c3                   	ret    

c00138aa <Directory::Directory(char const*, Process*)>:
c00138aa:	83 ec 0c             	sub    esp,0xc
c00138ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b1:	83 ec 08             	sub    esp,0x8
c00138b4:	6a 00                	push   0x0
c00138b6:	50                   	push   eax
c00138b7:	e8 4c de ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00138c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c8:	89 10                	mov    DWORD PTR [eax],edx
c00138ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00138d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d8:	83 c0 0d             	add    eax,0xd
c00138db:	83 ec 04             	sub    esp,0x4
c00138de:	52                   	push   edx
c00138df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e3:	50                   	push   eax
c00138e4:	e8 6b f9 ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138e9:	83 c4 10             	add    esp,0x10
c00138ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138f3:	8d 50 bf             	lea    edx,[eax-0x41]
c00138f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013904:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013908:	90                   	nop
c0013909:	83 c4 0c             	add    esp,0xc
c001390c:	c3                   	ret    
c001390d:	90                   	nop

c001390e <Directory::open()>:
c001390e:	53                   	push   ebx
c001390f:	b8 0b 00 00 00       	mov    eax,0xb
c0013914:	83 ec 08             	sub    esp,0x8
c0013917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001391b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013922:	80 fa 19             	cmp    dl,0x19
c0013925:	77 3d                	ja     c0013964 <Directory::open()+0x56>
c0013927:	8b 14 95 80 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1480]
c001392e:	85 d2                	test   edx,edx
c0013930:	74 32                	je     c0013964 <Directory::open()+0x56>
c0013932:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013938:	85 d2                	test   edx,edx
c001393a:	74 28                	je     c0013964 <Directory::open()+0x56>
c001393c:	b8 06 00 00 00       	mov    eax,0x6
c0013941:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013945:	75 1d                	jne    c0013964 <Directory::open()+0x56>
c0013947:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001394d:	50                   	push   eax
c001394e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013950:	51                   	push   ecx
c0013951:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013954:	51                   	push   ecx
c0013955:	52                   	push   edx
c0013956:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013959:	83 c4 10             	add    esp,0x10
c001395c:	85 c0                	test   eax,eax
c001395e:	75 04                	jne    c0013964 <Directory::open()+0x56>
c0013960:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013964:	83 c4 08             	add    esp,0x8
c0013967:	5b                   	pop    ebx
c0013968:	c3                   	ret    
c0013969:	90                   	nop

c001396a <Directory::close()>:
c001396a:	53                   	push   ebx
c001396b:	b8 0b 00 00 00       	mov    eax,0xb
c0013970:	83 ec 08             	sub    esp,0x8
c0013973:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013977:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001397e:	80 fa 19             	cmp    dl,0x19
c0013981:	77 41                	ja     c00139c4 <Directory::close()+0x5a>
c0013983:	8b 1c 95 80 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1480]
c001398a:	85 db                	test   ebx,ebx
c001398c:	74 36                	je     c00139c4 <Directory::close()+0x5a>
c001398e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013995:	74 2d                	je     c00139c4 <Directory::close()+0x5a>
c0013997:	b8 05 00 00 00       	mov    eax,0x5
c001399c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139a0:	74 22                	je     c00139c4 <Directory::close()+0x5a>
c00139a2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139a6:	8b 04 95 80 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1480]
c00139ad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139b3:	53                   	push   ebx
c00139b4:	53                   	push   ebx
c00139b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00139b7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139bd:	50                   	push   eax
c00139be:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	83 c4 08             	add    esp,0x8
c00139c7:	5b                   	pop    ebx
c00139c8:	c3                   	ret    
c00139c9:	90                   	nop

c00139ca <Directory::unlink()>:
c00139ca:	83 ec 0c             	sub    esp,0xc
c00139cd:	b8 0b 00 00 00       	mov    eax,0xb
c00139d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139dd:	80 f9 19             	cmp    cl,0x19
c00139e0:	77 2f                	ja     c0013a11 <Directory::unlink()+0x47>
c00139e2:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c00139e9:	85 c9                	test   ecx,ecx
c00139eb:	74 24                	je     c0013a11 <Directory::unlink()+0x47>
c00139ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139f3:	85 c9                	test   ecx,ecx
c00139f5:	74 1a                	je     c0013a11 <Directory::unlink()+0x47>
c00139f7:	b8 06 00 00 00       	mov    eax,0x6
c00139fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a00:	75 0f                	jne    c0013a11 <Directory::unlink()+0x47>
c0013a02:	83 c2 0d             	add    edx,0xd
c0013a05:	50                   	push   eax
c0013a06:	50                   	push   eax
c0013a07:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a09:	52                   	push   edx
c0013a0a:	51                   	push   ecx
c0013a0b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a0e:	83 c4 10             	add    esp,0x10
c0013a11:	83 c4 0c             	add    esp,0xc
c0013a14:	c3                   	ret    
c0013a15:	90                   	nop

c0013a16 <Directory::rename(char const*)>:
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	b8 0b 00 00 00       	mov    eax,0xb
c0013a1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a22:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a29:	80 f9 19             	cmp    cl,0x19
c0013a2c:	77 32                	ja     c0013a60 <Directory::rename(char const*)+0x4a>
c0013a2e:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c0013a35:	85 c9                	test   ecx,ecx
c0013a37:	74 27                	je     c0013a60 <Directory::rename(char const*)+0x4a>
c0013a39:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a3f:	85 c9                	test   ecx,ecx
c0013a41:	74 1d                	je     c0013a60 <Directory::rename(char const*)+0x4a>
c0013a43:	b8 06 00 00 00       	mov    eax,0x6
c0013a48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a4c:	75 12                	jne    c0013a60 <Directory::rename(char const*)+0x4a>
c0013a4e:	83 c2 0d             	add    edx,0xd
c0013a51:	50                   	push   eax
c0013a52:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a58:	52                   	push   edx
c0013a59:	51                   	push   ecx
c0013a5a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a5d:	83 c4 10             	add    esp,0x10
c0013a60:	83 c4 0c             	add    esp,0xc
c0013a63:	c3                   	ret    

c0013a64 <Directory::exists()>:
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	31 c0                	xor    eax,eax
c0013a69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a6d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a74:	80 f9 19             	cmp    cl,0x19
c0013a77:	77 24                	ja     c0013a9d <Directory::exists()+0x39>
c0013a79:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c0013a80:	85 c9                	test   ecx,ecx
c0013a82:	74 19                	je     c0013a9d <Directory::exists()+0x39>
c0013a84:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a8a:	85 c9                	test   ecx,ecx
c0013a8c:	74 0f                	je     c0013a9d <Directory::exists()+0x39>
c0013a8e:	83 c2 0d             	add    edx,0xd
c0013a91:	50                   	push   eax
c0013a92:	50                   	push   eax
c0013a93:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a95:	52                   	push   edx
c0013a96:	51                   	push   ecx
c0013a97:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a9a:	83 c4 10             	add    esp,0x10
c0013a9d:	83 c4 0c             	add    esp,0xc
c0013aa0:	c3                   	ret    
c0013aa1:	90                   	nop

c0013aa2 <Directory::read(dirent*)>:
c0013aa2:	83 ec 1c             	sub    esp,0x1c
c0013aa5:	b8 0b 00 00 00       	mov    eax,0xb
c0013aaa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013aae:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ab5:	80 fa 19             	cmp    dl,0x19
c0013ab8:	77 30                	ja     c0013aea <Directory::read(dirent*)+0x48>
c0013aba:	8b 14 95 80 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1480]
c0013ac1:	85 d2                	test   edx,edx
c0013ac3:	74 25                	je     c0013aea <Directory::read(dirent*)+0x48>
c0013ac5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013acc:	74 1c                	je     c0013aea <Directory::read(dirent*)+0x48>
c0013ace:	83 ec 0c             	sub    esp,0xc
c0013ad1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ad7:	52                   	push   edx
c0013ad8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013adc:	6a 00                	push   0x0
c0013ade:	68 10 01 00 00       	push   0x110
c0013ae3:	51                   	push   ecx
c0013ae4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ae7:	83 c4 20             	add    esp,0x20
c0013aea:	83 c4 1c             	add    esp,0x1c
c0013aed:	c3                   	ret    

c0013aee <Directory::create()>:
c0013aee:	83 ec 0c             	sub    esp,0xc
c0013af1:	b8 0b 00 00 00       	mov    eax,0xb
c0013af6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013afa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b01:	80 f9 19             	cmp    cl,0x19
c0013b04:	77 2f                	ja     c0013b35 <Directory::create()+0x47>
c0013b06:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c0013b0d:	85 c9                	test   ecx,ecx
c0013b0f:	74 24                	je     c0013b35 <Directory::create()+0x47>
c0013b11:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b17:	85 c9                	test   ecx,ecx
c0013b19:	74 1a                	je     c0013b35 <Directory::create()+0x47>
c0013b1b:	b8 06 00 00 00       	mov    eax,0x6
c0013b20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b24:	75 0f                	jne    c0013b35 <Directory::create()+0x47>
c0013b26:	83 c2 0d             	add    edx,0xd
c0013b29:	50                   	push   eax
c0013b2a:	50                   	push   eax
c0013b2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b2d:	52                   	push   edx
c0013b2e:	51                   	push   ecx
c0013b2f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b32:	83 c4 10             	add    esp,0x10
c0013b35:	83 c4 0c             	add    esp,0xc
c0013b38:	c3                   	ret    
c0013b39:	90                   	nop

c0013b3a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b3a:	b8 0a 00 00 00       	mov    eax,0xa
c0013b3f:	c3                   	ret    

c0013b40 <Bus::Bus(char const*)>:
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b47:	83 ec 08             	sub    esp,0x8
c0013b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4e:	50                   	push   eax
c0013b4f:	e8 68 09 00 00       	call   c00144bc <Device::Device(char const*)>
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	ba f4 ab 02 c0       	mov    edx,0xc002abf4
c0013b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b60:	89 10                	mov    DWORD PTR [eax],edx
c0013b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b66:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b70:	90                   	nop
c0013b71:	83 c4 0c             	add    esp,0xc
c0013b74:	c3                   	ret    
c0013b75:	90                   	nop

c0013b76 <Bus::~Bus()>:
c0013b76:	83 ec 0c             	sub    esp,0xc
c0013b79:	ba f4 ab 02 c0       	mov    edx,0xc002abf4
c0013b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b82:	89 10                	mov    DWORD PTR [eax],edx
c0013b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b88:	83 ec 0c             	sub    esp,0xc
c0013b8b:	50                   	push   eax
c0013b8c:	e8 0d 06 00 00       	call   c001419e <Device::~Device()>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	90                   	nop
c0013b95:	83 c4 0c             	add    esp,0xc
c0013b98:	c3                   	ret    
c0013b99:	90                   	nop

c0013b9a <Bus::~Bus()>:
c0013b9a:	83 ec 0c             	sub    esp,0xc
c0013b9d:	83 ec 0c             	sub    esp,0xc
c0013ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba4:	e8 cd ff ff ff       	call   c0013b76 <Bus::~Bus()>
c0013ba9:	83 c4 10             	add    esp,0x10
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	68 58 01 00 00       	push   0x158
c0013bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb8:	e8 08 f2 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0013bbd:	83 c4 10             	add    esp,0x10
c0013bc0:	83 c4 0c             	add    esp,0xc
c0013bc3:	c3                   	ret    

c0013bc4 <Buzzer::Buzzer(char const*)>:
c0013bc4:	83 ec 0c             	sub    esp,0xc
c0013bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bcb:	83 ec 08             	sub    esp,0x8
c0013bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd2:	50                   	push   eax
c0013bd3:	e8 e4 08 00 00       	call   c00144bc <Device::Device(char const*)>
c0013bd8:	83 c4 10             	add    esp,0x10
c0013bdb:	ba 20 ac 02 c0       	mov    edx,0xc002ac20
c0013be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be4:	89 10                	mov    DWORD PTR [eax],edx
c0013be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c02:	90                   	nop
c0013c03:	83 c4 0c             	add    esp,0xc
c0013c06:	c3                   	ret    
c0013c07:	90                   	nop

c0013c08 <Buzzer::~Buzzer()>:
c0013c08:	83 ec 0c             	sub    esp,0xc
c0013c0b:	ba 20 ac 02 c0       	mov    edx,0xc002ac20
c0013c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c14:	89 10                	mov    DWORD PTR [eax],edx
c0013c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1a:	83 ec 0c             	sub    esp,0xc
c0013c1d:	50                   	push   eax
c0013c1e:	e8 7b 05 00 00       	call   c001419e <Device::~Device()>
c0013c23:	83 c4 10             	add    esp,0x10
c0013c26:	90                   	nop
c0013c27:	83 c4 0c             	add    esp,0xc
c0013c2a:	c3                   	ret    
c0013c2b:	90                   	nop

c0013c2c <Buzzer::~Buzzer()>:
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	83 ec 0c             	sub    esp,0xc
c0013c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c36:	e8 cd ff ff ff       	call   c0013c08 <Buzzer::~Buzzer()>
c0013c3b:	83 c4 10             	add    esp,0x10
c0013c3e:	83 ec 08             	sub    esp,0x8
c0013c41:	68 5c 01 00 00       	push   0x15c
c0013c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c4a:	e8 76 f1 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0013c4f:	83 c4 10             	add    esp,0x10
c0013c52:	83 c4 0c             	add    esp,0xc
c0013c55:	c3                   	ret    

c0013c56 <Buzzer::stop()>:
c0013c56:	83 ec 14             	sub    esp,0x14
c0013c59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c5f:	6a 00                	push   0x0
c0013c61:	50                   	push   eax
c0013c62:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c65:	83 c4 1c             	add    esp,0x1c
c0013c68:	c3                   	ret    

c0013c69 <beepThread(void*)>:
c0013c69:	53                   	push   ebx
c0013c6a:	83 ec 08             	sub    esp,0x8
c0013c6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c71:	e8 e6 a1 00 00       	call   c001de5c <unlockScheduler()>
c0013c76:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c7b:	52                   	push   edx
c0013c7c:	52                   	push   edx
c0013c7d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c83:	52                   	push   edx
c0013c84:	50                   	push   eax
c0013c85:	e8 5a a7 00 00       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0013c8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c8d:	e8 c4 ff ff ff       	call   c0013c56 <Buzzer::stop()>
c0013c92:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c9a:	83 c4 18             	add    esp,0x18
c0013c9d:	5b                   	pop    ebx
c0013c9e:	e9 87 a6 00 00       	jmp    c001e32a <blockTask(TaskState)>
c0013ca3:	90                   	nop

c0013ca4 <Buzzer::beep(int, int, bool)>:
c0013ca4:	57                   	push   edi
c0013ca5:	56                   	push   esi
c0013ca6:	53                   	push   ebx
c0013ca7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cab:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013caf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cb3:	52                   	push   edx
c0013cb4:	52                   	push   edx
c0013cb5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013cb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cbb:	56                   	push   esi
c0013cbc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	89 f8                	mov    eax,edi
c0013cc4:	84 c0                	test   al,al
c0013cc6:	74 1f                	je     c0013ce7 <Buzzer::beep(int, int, bool)+0x43>
c0013cc8:	50                   	push   eax
c0013cc9:	50                   	push   eax
c0013cca:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cd0:	99                   	cdq    
c0013cd1:	52                   	push   edx
c0013cd2:	50                   	push   eax
c0013cd3:	e8 0c a7 00 00       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0013cd8:	83 c4 10             	add    esp,0x10
c0013cdb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013cdf:	5b                   	pop    ebx
c0013ce0:	5e                   	pop    esi
c0013ce1:	5f                   	pop    edi
c0013ce2:	e9 6f ff ff ff       	jmp    c0013c56 <Buzzer::stop()>
c0013ce7:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013ced:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0013cf2:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013cfa:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cfe:	c7 44 24 14 69 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c69
c0013d06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d0a:	5b                   	pop    ebx
c0013d0b:	5e                   	pop    esi
c0013d0c:	5f                   	pop    edi
c0013d0d:	e9 7a a2 00 00       	jmp    c001df8c <Process::createThread(void (*)(void*), void*, int)>

c0013d12 <User::loadClockSettings(int)>:
c0013d12:	53                   	push   ebx
c0013d13:	83 ec 14             	sub    esp,0x14
c0013d16:	68 14 01 00 00       	push   0x114
c0013d1b:	e8 2b bb ff ff       	call   c000f84b <malloc>
c0013d20:	83 c4 0c             	add    esp,0xc
c0013d23:	89 c3                	mov    ebx,eax
c0013d25:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c0013d2b:	68 48 ac 02 c0       	push   0xc002ac48
c0013d30:	50                   	push   eax
c0013d31:	e8 c8 f6 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c0013d36:	58                   	pop    eax
c0013d37:	5a                   	pop    edx
c0013d38:	6a 01                	push   0x1
c0013d3a:	53                   	push   ebx
c0013d3b:	e8 22 f7 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c0013d40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d43:	e8 78 f7 ff ff       	call   c00134c0 <File::close()>
c0013d48:	83 c4 10             	add    esp,0x10
c0013d4b:	85 db                	test   ebx,ebx
c0013d4d:	74 0f                	je     c0013d5e <User::loadClockSettings(int)+0x4c>
c0013d4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d51:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d55:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d58:	83 c4 08             	add    esp,0x8
c0013d5b:	5b                   	pop    ebx
c0013d5c:	ff e0                	jmp    eax
c0013d5e:	83 c4 08             	add    esp,0x8
c0013d61:	5b                   	pop    ebx
c0013d62:	c3                   	ret    
c0013d63:	90                   	nop

c0013d64 <Clock::Clock(char const*)>:
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d6b:	83 ec 08             	sub    esp,0x8
c0013d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d72:	50                   	push   eax
c0013d73:	e8 44 07 00 00       	call   c00144bc <Device::Device(char const*)>
c0013d78:	83 c4 10             	add    esp,0x10
c0013d7b:	ba 70 ac 02 c0       	mov    edx,0xc002ac70
c0013d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d84:	89 10                	mov    DWORD PTR [eax],edx
c0013d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d94:	90                   	nop
c0013d95:	83 c4 0c             	add    esp,0xc
c0013d98:	c3                   	ret    
c0013d99:	90                   	nop

c0013d9a <Clock::~Clock()>:
c0013d9a:	83 ec 0c             	sub    esp,0xc
c0013d9d:	ba 70 ac 02 c0       	mov    edx,0xc002ac70
c0013da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da6:	89 10                	mov    DWORD PTR [eax],edx
c0013da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dac:	83 ec 0c             	sub    esp,0xc
c0013daf:	50                   	push   eax
c0013db0:	e8 e9 03 00 00       	call   c001419e <Device::~Device()>
c0013db5:	83 c4 10             	add    esp,0x10
c0013db8:	90                   	nop
c0013db9:	83 c4 0c             	add    esp,0xc
c0013dbc:	c3                   	ret    
c0013dbd:	90                   	nop

c0013dbe <Clock::~Clock()>:
c0013dbe:	83 ec 0c             	sub    esp,0xc
c0013dc1:	83 ec 0c             	sub    esp,0xc
c0013dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc8:	e8 cd ff ff ff       	call   c0013d9a <Clock::~Clock()>
c0013dcd:	83 c4 10             	add    esp,0x10
c0013dd0:	83 ec 08             	sub    esp,0x8
c0013dd3:	68 58 01 00 00       	push   0x158
c0013dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ddc:	e8 e4 ef ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0013de1:	83 c4 10             	add    esp,0x10
c0013de4:	83 c4 0c             	add    esp,0xc
c0013de7:	c3                   	ret    

c0013de8 <Clock::timeInSecondsLocal()>:
c0013de8:	53                   	push   ebx
c0013de9:	83 ec 14             	sub    esp,0x14
c0013dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013df0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013df2:	50                   	push   eax
c0013df3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013df6:	0f b6 0d f8 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e6f8
c0013dfd:	03 0d fc e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e6fc
c0013e03:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e09:	89 cb                	mov    ebx,ecx
c0013e0b:	c1 fb 1f             	sar    ebx,0x1f
c0013e0e:	01 c8                	add    eax,ecx
c0013e10:	11 da                	adc    edx,ebx
c0013e12:	83 c4 10             	add    esp,0x10
c0013e15:	31 c9                	xor    ecx,ecx
c0013e17:	80 3d f9 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6f9,0x0
c0013e1e:	74 05                	je     c0013e25 <Clock::timeInSecondsLocal()+0x3d>
c0013e20:	b9 08 07 00 00       	mov    ecx,0x708
c0013e25:	31 db                	xor    ebx,ebx
c0013e27:	01 c8                	add    eax,ecx
c0013e29:	11 da                	adc    edx,ebx
c0013e2b:	83 c4 08             	add    esp,0x8
c0013e2e:	5b                   	pop    ebx
c0013e2f:	c3                   	ret    

c0013e30 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e30:	57                   	push   edi
c0013e31:	56                   	push   esi
c0013e32:	53                   	push   ebx
c0013e33:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e3d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e41:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e44:	0f b6 05 f8 e6 02 c0 	movzx  eax,BYTE PTR ds:0xc002e6f8
c0013e4b:	03 05 fc e6 02 c0    	add    eax,DWORD PTR ds:0xc002e6fc
c0013e51:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e57:	99                   	cdq    
c0013e58:	29 c6                	sub    esi,eax
c0013e5a:	19 d7                	sbb    edi,edx
c0013e5c:	89 f0                	mov    eax,esi
c0013e5e:	89 fa                	mov    edx,edi
c0013e60:	31 f6                	xor    esi,esi
c0013e62:	80 3d f9 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6f9,0x0
c0013e69:	74 05                	je     c0013e70 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e6b:	be 08 07 00 00       	mov    esi,0x708
c0013e70:	31 ff                	xor    edi,edi
c0013e72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e76:	29 f0                	sub    eax,esi
c0013e78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e7c:	19 fa                	sbb    edx,edi
c0013e7e:	89 d8                	mov    eax,ebx
c0013e80:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e84:	5b                   	pop    ebx
c0013e85:	5e                   	pop    esi
c0013e86:	5f                   	pop    edi
c0013e87:	ff e0                	jmp    eax

c0013e89 <datetimeToSeconds(datetime_t)>:
c0013e89:	55                   	push   ebp
c0013e8a:	57                   	push   edi
c0013e8b:	56                   	push   esi
c0013e8c:	53                   	push   ebx
c0013e8d:	83 ec 14             	sub    esp,0x14
c0013e90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e94:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e98:	89 d3                	mov    ebx,edx
c0013e9a:	0f b6 c6             	movzx  eax,dh
c0013e9d:	c1 eb 10             	shr    ebx,0x10
c0013ea0:	48                   	dec    eax
c0013ea1:	66 81 eb 6c 07       	sub    bx,0x76c
c0013ea6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013eaa:	0f b6 f5             	movzx  esi,ch
c0013ead:	89 cf                	mov    edi,ecx
c0013eaf:	6b f6 3c             	imul   esi,esi,0x3c
c0013eb2:	c1 ef 10             	shr    edi,0x10
c0013eb5:	0f b6 c9             	movzx  ecx,cl
c0013eb8:	89 f8                	mov    eax,edi
c0013eba:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ec0:	0f b6 f8             	movzx  edi,al
c0013ec3:	0f b6 d2             	movzx  edx,dl
c0013ec6:	01 fe                	add    esi,edi
c0013ec8:	01 f1                	add    ecx,esi
c0013eca:	0f b7 f3             	movzx  esi,bx
c0013ecd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ed1:	c1 f9 1f             	sar    ecx,0x1f
c0013ed4:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ed9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013edd:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013ee2:	8b 0c 8d c0 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5340]
c0013ee9:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013eed:	76 29                	jbe    c0013f18 <datetimeToSeconds(datetime_t)+0x8f>
c0013eef:	f6 c3 03             	test   bl,0x3
c0013ef2:	75 24                	jne    c0013f18 <datetimeToSeconds(datetime_t)+0x8f>
c0013ef4:	31 d2                	xor    edx,edx
c0013ef6:	bf 64 00 00 00       	mov    edi,0x64
c0013efb:	89 d8                	mov    eax,ebx
c0013efd:	66 f7 f7             	div    di
c0013f00:	66 85 d2             	test   dx,dx
c0013f03:	75 12                	jne    c0013f17 <datetimeToSeconds(datetime_t)+0x8e>
c0013f05:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f0b:	bf 90 01 00 00       	mov    edi,0x190
c0013f10:	99                   	cdq    
c0013f11:	f7 ff                	idiv   edi
c0013f13:	85 d2                	test   edx,edx
c0013f15:	75 01                	jne    c0013f18 <datetimeToSeconds(datetime_t)+0x8f>
c0013f17:	41                   	inc    ecx
c0013f18:	66 83 fb 46          	cmp    bx,0x46
c0013f1c:	76 45                	jbe    c0013f63 <datetimeToSeconds(datetime_t)+0xda>
c0013f1e:	bb 46 00 00 00       	mov    ebx,0x46
c0013f23:	bf 64 00 00 00       	mov    edi,0x64
c0013f28:	bd 90 01 00 00       	mov    ebp,0x190
c0013f2d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f32:	f6 c3 03             	test   bl,0x3
c0013f35:	75 23                	jne    c0013f5a <datetimeToSeconds(datetime_t)+0xd1>
c0013f37:	89 d8                	mov    eax,ebx
c0013f39:	99                   	cdq    
c0013f3a:	f7 ff                	idiv   edi
c0013f3c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f41:	85 d2                	test   edx,edx
c0013f43:	75 15                	jne    c0013f5a <datetimeToSeconds(datetime_t)+0xd1>
c0013f45:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f4b:	99                   	cdq    
c0013f4c:	f7 fd                	idiv   ebp
c0013f4e:	83 fa 01             	cmp    edx,0x1
c0013f51:	19 c0                	sbb    eax,eax
c0013f53:	f7 d0                	not    eax
c0013f55:	05 6e 01 00 00       	add    eax,0x16e
c0013f5a:	01 c1                	add    ecx,eax
c0013f5c:	43                   	inc    ebx
c0013f5d:	39 f3                	cmp    ebx,esi
c0013f5f:	7c cc                	jl     c0013f2d <datetimeToSeconds(datetime_t)+0xa4>
c0013f61:	eb 35                	jmp    c0013f98 <datetimeToSeconds(datetime_t)+0x10f>
c0013f63:	74 33                	je     c0013f98 <datetimeToSeconds(datetime_t)+0x10f>
c0013f65:	b8 45 00 00 00       	mov    eax,0x45
c0013f6a:	89 c2                	mov    edx,eax
c0013f6c:	83 e2 03             	and    edx,0x3
c0013f6f:	39 f0                	cmp    eax,esi
c0013f71:	7e 0f                	jle    c0013f82 <datetimeToSeconds(datetime_t)+0xf9>
c0013f73:	83 fa 01             	cmp    edx,0x1
c0013f76:	19 d2                	sbb    edx,edx
c0013f78:	48                   	dec    eax
c0013f79:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f80:	eb e8                	jmp    c0013f6a <datetimeToSeconds(datetime_t)+0xe1>
c0013f82:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f87:	85 d2                	test   edx,edx
c0013f89:	75 0b                	jne    c0013f96 <datetimeToSeconds(datetime_t)+0x10d>
c0013f8b:	66 83 fb 01          	cmp    bx,0x1
c0013f8f:	19 c0                	sbb    eax,eax
c0013f91:	05 6e 01 00 00       	add    eax,0x16e
c0013f96:	29 c1                	sub    ecx,eax
c0013f98:	b8 80 51 01 00       	mov    eax,0x15180
c0013f9d:	f7 e9                	imul   ecx
c0013f9f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fa3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013fa7:	83 c4 14             	add    esp,0x14
c0013faa:	5b                   	pop    ebx
c0013fab:	5e                   	pop    esi
c0013fac:	5f                   	pop    edi
c0013fad:	5d                   	pop    ebp
c0013fae:	c3                   	ret    
c0013faf:	90                   	nop

c0013fb0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fb0:	57                   	push   edi
c0013fb1:	56                   	push   esi
c0013fb2:	53                   	push   ebx
c0013fb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fb7:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fb9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013fbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fc4:	e8 c0 fe ff ff       	call   c0013e89 <datetimeToSeconds(datetime_t)>
c0013fc9:	59                   	pop    ecx
c0013fca:	0f b6 0d f8 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e6f8
c0013fd1:	5b                   	pop    ebx
c0013fd2:	03 0d fc e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e6fc
c0013fd8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fde:	89 cb                	mov    ebx,ecx
c0013fe0:	c1 fb 1f             	sar    ebx,0x1f
c0013fe3:	29 c8                	sub    eax,ecx
c0013fe5:	19 da                	sbb    edx,ebx
c0013fe7:	31 c9                	xor    ecx,ecx
c0013fe9:	80 3d f9 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6f9,0x0
c0013ff0:	74 05                	je     c0013ff7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013ff2:	b9 08 07 00 00       	mov    ecx,0x708
c0013ff7:	31 db                	xor    ebx,ebx
c0013ff9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ffd:	29 c8                	sub    eax,ecx
c0013fff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014003:	19 da                	sbb    edx,ebx
c0014005:	89 f8                	mov    eax,edi
c0014007:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001400b:	5b                   	pop    ebx
c001400c:	5e                   	pop    esi
c001400d:	5f                   	pop    edi
c001400e:	ff e0                	jmp    eax

c0014010 <secondsToDatetime(unsigned long long)>:
c0014010:	55                   	push   ebp
c0014011:	57                   	push   edi
c0014012:	56                   	push   esi
c0014013:	53                   	push   ebx
c0014014:	83 ec 1c             	sub    esp,0x1c
c0014017:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001401b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001401f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014023:	6a 00                	push   0x0
c0014025:	68 80 51 01 00       	push   0x15180
c001402a:	55                   	push   ebp
c001402b:	57                   	push   edi
c001402c:	e8 3f 2a 01 00       	call   c0026a70 <__udivdi3>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001403a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001403e:	6a 00                	push   0x0
c0014040:	68 80 51 01 00       	push   0x15180
c0014045:	55                   	push   ebp
c0014046:	57                   	push   edi
c0014047:	bf 10 0e 00 00       	mov    edi,0xe10
c001404c:	e8 1f 2b 01 00       	call   c0026b70 <__umoddi3>
c0014051:	83 c4 10             	add    esp,0x10
c0014054:	99                   	cdq    
c0014055:	f7 ff                	idiv   edi
c0014057:	bf 3c 00 00 00       	mov    edi,0x3c
c001405c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001405f:	89 d0                	mov    eax,edx
c0014061:	99                   	cdq    
c0014062:	f7 ff                	idiv   edi
c0014064:	85 db                	test   ebx,ebx
c0014066:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014069:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001406c:	79 11                	jns    c001407f <secondsToDatetime(unsigned long long)+0x6f>
c001406e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014072:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014078:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001407d:	eb 07                	jmp    c0014086 <secondsToDatetime(unsigned long long)+0x76>
c001407f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014084:	89 d8                	mov    eax,ebx
c0014086:	bf b4 05 00 00       	mov    edi,0x5b4
c001408b:	99                   	cdq    
c001408c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014091:	f7 f9                	idiv   ecx
c0014093:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001409c:	31 d2                	xor    edx,edx
c001409e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140a6:	01 c3                	add    ebx,eax
c00140a8:	89 d8                	mov    eax,ebx
c00140aa:	f7 f1                	div    ecx
c00140ac:	31 d2                	xor    edx,edx
c00140ae:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140b1:	89 d8                	mov    eax,ebx
c00140b3:	f7 f7                	div    edi
c00140b5:	31 d2                	xor    edx,edx
c00140b7:	29 c1                	sub    ecx,eax
c00140b9:	89 d8                	mov    eax,ebx
c00140bb:	f7 f5                	div    ebp
c00140bd:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140c2:	29 c1                	sub    ecx,eax
c00140c4:	31 d2                	xor    edx,edx
c00140c6:	89 c8                	mov    eax,ecx
c00140c8:	f7 f5                	div    ebp
c00140ca:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140d3:	31 d2                	xor    edx,edx
c00140d5:	89 c8                	mov    eax,ecx
c00140d7:	f7 f5                	div    ebp
c00140d9:	31 d2                	xor    edx,edx
c00140db:	01 c3                	add    ebx,eax
c00140dd:	89 c8                	mov    eax,ecx
c00140df:	f7 f7                	div    edi
c00140e1:	bf 99 00 00 00       	mov    edi,0x99
c00140e6:	29 c3                	sub    ebx,eax
c00140e8:	31 d2                	xor    edx,edx
c00140ea:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140f2:	29 c3                	sub    ebx,eax
c00140f4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140f7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140fa:	bb 05 00 00 00       	mov    ebx,0x5
c00140ff:	83 c1 02             	add    ecx,0x2
c0014102:	89 c8                	mov    eax,ecx
c0014104:	f7 f7                	div    edi
c0014106:	31 d2                	xor    edx,edx
c0014108:	89 c7                	mov    edi,eax
c001410a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014110:	83 c0 02             	add    eax,0x2
c0014113:	f7 f3                	div    ebx
c0014115:	89 eb                	mov    ebx,ebp
c0014117:	29 c3                	sub    ebx,eax
c0014119:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001411f:	88 1e                	mov    BYTE PTR [esi],bl
c0014121:	19 c0                	sbb    eax,eax
c0014123:	31 d2                	xor    edx,edx
c0014125:	83 e0 0c             	and    eax,0xc
c0014128:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001412c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014134:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014138:	83 f9 01             	cmp    ecx,0x1
c001413b:	0f 96 c2             	setbe  dl
c001413e:	41                   	inc    ecx
c001413f:	01 d0                	add    eax,edx
c0014141:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014144:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014148:	83 c4 1c             	add    esp,0x1c
c001414b:	89 f0                	mov    eax,esi
c001414d:	5b                   	pop    ebx
c001414e:	5e                   	pop    esi
c001414f:	5f                   	pop    edi
c0014150:	5d                   	pop    ebp
c0014151:	c2 04 00             	ret    0x4

c0014154 <Clock::timeInDatetimeLocal()>:
c0014154:	53                   	push   ebx
c0014155:	83 ec 14             	sub    esp,0x14
c0014158:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001415c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014160:	e8 83 fc ff ff       	call   c0013de8 <Clock::timeInSecondsLocal()>
c0014165:	83 c4 0c             	add    esp,0xc
c0014168:	52                   	push   edx
c0014169:	50                   	push   eax
c001416a:	53                   	push   ebx
c001416b:	e8 a0 fe ff ff       	call   c0014010 <secondsToDatetime(unsigned long long)>
c0014170:	89 d8                	mov    eax,ebx
c0014172:	83 c4 14             	add    esp,0x14
c0014175:	5b                   	pop    ebx
c0014176:	c2 04 00             	ret    0x4
c0014179:	90                   	nop

c001417a <Device::hibernate()>:
c001417a:	c3                   	ret    
c001417b:	90                   	nop

c001417c <Device::wake()>:
c001417c:	c3                   	ret    
c001417d:	90                   	nop

c001417e <Device::detect()>:
c001417e:	c3                   	ret    
c001417f:	90                   	nop

c0014180 <Device::disableLegacy()>:
c0014180:	c3                   	ret    
c0014181:	90                   	nop

c0014182 <Device::powerSaving(PowerSavingLevel)>:
c0014182:	c3                   	ret    
c0014183:	90                   	nop

c0014184 <DriverlessDevice::close(int, int, void*)>:
c0014184:	31 c0                	xor    eax,eax
c0014186:	c3                   	ret    
c0014187:	90                   	nop

c0014188 <DriverlessDevice::detect()>:
c0014188:	c3                   	ret    
c0014189:	90                   	nop

c001418a <DriverlessDevice::open(int, int, void*)>:
c001418a:	83 ec 18             	sub    esp,0x18
c001418d:	68 f0 ac 02 c0       	push   0xc002acf0
c0014192:	e8 e8 64 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0014197:	83 c8 ff             	or     eax,0xffffffff
c001419a:	83 c4 1c             	add    esp,0x1c
c001419d:	c3                   	ret    

c001419e <Device::~Device()>:
c001419e:	ba 18 ad 02 c0       	mov    edx,0xc002ad18
c00141a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141a7:	89 10                	mov    DWORD PTR [eax],edx
c00141a9:	90                   	nop
c00141aa:	c3                   	ret    
c00141ab:	90                   	nop

c00141ac <Device::~Device()>:
c00141ac:	83 ec 0c             	sub    esp,0xc
c00141af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141b3:	e8 e6 ff ff ff       	call   c001419e <Device::~Device()>
c00141b8:	83 c4 04             	add    esp,0x4
c00141bb:	83 ec 08             	sub    esp,0x8
c00141be:	68 58 01 00 00       	push   0x158
c00141c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141c7:	e8 f9 eb ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00141cc:	83 c4 10             	add    esp,0x10
c00141cf:	83 c4 0c             	add    esp,0xc
c00141d2:	c3                   	ret    
c00141d3:	90                   	nop

c00141d4 <Device::findAndLoadDriver()>:
c00141d4:	c3                   	ret    
c00141d5:	90                   	nop

c00141d6 <Device::preOpenPCI(PCIDeviceInfo)>:
c00141d6:	57                   	push   edi
c00141d7:	b9 09 00 00 00       	mov    ecx,0x9
c00141dc:	56                   	push   esi
c00141dd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141e1:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141e5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141ef:	81 c7 18 01 00 00    	add    edi,0x118
c00141f5:	fc                   	cld    
c00141f6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141f8:	5e                   	pop    esi
c00141f9:	5f                   	pop    edi
c00141fa:	c3                   	ret    
c00141fb:	90                   	nop

c00141fc <Device::preOpenACPI(void*, char*, char*)>:
c00141fc:	56                   	push   esi
c00141fd:	53                   	push   ebx
c00141fe:	83 ec 08             	sub    esp,0x8
c0014201:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014205:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014209:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014213:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014217:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001421d:	6a 1e                	push   0x1e
c001421f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014225:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014229:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001422f:	50                   	push   eax
c0014230:	e8 17 c5 fe ff       	call   c000074c <memcpy>
c0014235:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014239:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001423d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014245:	83 c4 14             	add    esp,0x14
c0014248:	5b                   	pop    ebx
c0014249:	5e                   	pop    esi
c001424a:	e9 fd c4 fe ff       	jmp    c000074c <memcpy>
c001424f:	90                   	nop

c0014250 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014254:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014259:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014260:	75 0b                	jne    c001426d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014262:	8b 00                	mov    eax,DWORD PTR [eax]
c0014264:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014268:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001426b:	eb 1e                	jmp    c001428b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001426d:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0014272:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014278:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001427e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014280:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014284:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014288:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001428b:	ff e0                	jmp    eax
c001428d:	90                   	nop

c001428e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001428e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014292:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014297:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001429e:	75 0b                	jne    c00142ab <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00142a2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142a6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142a9:	eb 1e                	jmp    c00142c9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142ab:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00142b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142b6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142bc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142be:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142c6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142c9:	ff e0                	jmp    eax
c00142cb:	90                   	nop

c00142cc <Device::addChild(Device*)>:
c00142cc:	53                   	push   ebx
c00142cd:	83 ec 08             	sub    esp,0x8
c00142d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142d8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00142de:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00142e4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00142e6:	85 d2                	test   edx,edx
c00142e8:	74 04                	je     c00142ee <Device::addChild(Device*)+0x22>
c00142ea:	89 d3                	mov    ebx,edx
c00142ec:	eb f6                	jmp    c00142e4 <Device::addChild(Device*)+0x18>
c00142ee:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142f1:	83 ec 0c             	sub    esp,0xc
c00142f4:	6a 08                	push   0x8
c00142f6:	e8 50 b5 ff ff       	call   c000f84b <malloc>
c00142fb:	89 03                	mov    DWORD PTR [ebx],eax
c00142fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014303:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001430a:	83 c4 18             	add    esp,0x18
c001430d:	5b                   	pop    ebx
c001430e:	c3                   	ret    
c001430f:	90                   	nop

c0014310 <Device::removeAllChildren()>:
c0014310:	56                   	push   esi
c0014311:	53                   	push   ebx
c0014312:	52                   	push   edx
c0014313:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014317:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001431d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014320:	74 17                	je     c0014339 <Device::removeAllChildren()+0x29>
c0014322:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014325:	85 c0                	test   eax,eax
c0014327:	74 0c                	je     c0014335 <Device::removeAllChildren()+0x25>
c0014329:	83 ec 0c             	sub    esp,0xc
c001432c:	8b 10                	mov    edx,DWORD PTR [eax]
c001432e:	50                   	push   eax
c001432f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014332:	83 c4 10             	add    esp,0x10
c0014335:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014337:	eb e4                	jmp    c001431d <Device::removeAllChildren()+0xd>
c0014339:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001433f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014345:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001434b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014352:	58                   	pop    eax
c0014353:	5b                   	pop    ebx
c0014354:	5e                   	pop    esi
c0014355:	c3                   	ret    

c0014356 <Device::hibernateAll()>:
c0014356:	53                   	push   ebx
c0014357:	83 ec 14             	sub    esp,0x14
c001435a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001435e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014360:	53                   	push   ebx
c0014361:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014364:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001436a:	83 c4 10             	add    esp,0x10
c001436d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014370:	74 0f                	je     c0014381 <Device::hibernateAll()+0x2b>
c0014372:	83 ec 0c             	sub    esp,0xc
c0014375:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014378:	e8 d9 ff ff ff       	call   c0014356 <Device::hibernateAll()>
c001437d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001437f:	eb e9                	jmp    c001436a <Device::hibernateAll()+0x14>
c0014381:	83 c4 08             	add    esp,0x8
c0014384:	5b                   	pop    ebx
c0014385:	c3                   	ret    

c0014386 <Device::wakeAll()>:
c0014386:	53                   	push   ebx
c0014387:	83 ec 14             	sub    esp,0x14
c001438a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001438e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014390:	53                   	push   ebx
c0014391:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014394:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001439a:	83 c4 10             	add    esp,0x10
c001439d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143a0:	74 0f                	je     c00143b1 <Device::wakeAll()+0x2b>
c00143a2:	83 ec 0c             	sub    esp,0xc
c00143a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143a8:	e8 d9 ff ff ff       	call   c0014386 <Device::wakeAll()>
c00143ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143af:	eb e9                	jmp    c001439a <Device::wakeAll()+0x14>
c00143b1:	83 c4 08             	add    esp,0x8
c00143b4:	5b                   	pop    ebx
c00143b5:	c3                   	ret    

c00143b6 <Device::detectAll()>:
c00143b6:	53                   	push   ebx
c00143b7:	83 ec 14             	sub    esp,0x14
c00143ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143c0:	53                   	push   ebx
c00143c1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143ca:	83 c4 10             	add    esp,0x10
c00143cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143d0:	74 0f                	je     c00143e1 <Device::detectAll()+0x2b>
c00143d2:	83 ec 0c             	sub    esp,0xc
c00143d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143d8:	e8 d9 ff ff ff       	call   c00143b6 <Device::detectAll()>
c00143dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143df:	eb e9                	jmp    c00143ca <Device::detectAll()+0x14>
c00143e1:	83 c4 08             	add    esp,0x8
c00143e4:	5b                   	pop    ebx
c00143e5:	c3                   	ret    

c00143e6 <Device::disableLegacyAll()>:
c00143e6:	53                   	push   ebx
c00143e7:	83 ec 14             	sub    esp,0x14
c00143ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143f0:	53                   	push   ebx
c00143f1:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143fa:	83 c4 10             	add    esp,0x10
c00143fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014400:	74 0f                	je     c0014411 <Device::disableLegacyAll()+0x2b>
c0014402:	83 ec 0c             	sub    esp,0xc
c0014405:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014408:	e8 d9 ff ff ff       	call   c00143e6 <Device::disableLegacyAll()>
c001440d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001440f:	eb e9                	jmp    c00143fa <Device::disableLegacyAll()+0x14>
c0014411:	83 c4 08             	add    esp,0x8
c0014414:	5b                   	pop    ebx
c0014415:	c3                   	ret    

c0014416 <Device::loadDriversForAll()>:
c0014416:	53                   	push   ebx
c0014417:	83 ec 08             	sub    esp,0x8
c001441a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001441e:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014424:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014426:	85 db                	test   ebx,ebx
c0014428:	74 12                	je     c001443c <Device::loadDriversForAll()+0x26>
c001442a:	83 ec 0c             	sub    esp,0xc
c001442d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014430:	e8 e1 ff ff ff       	call   c0014416 <Device::loadDriversForAll()>
c0014435:	83 c4 10             	add    esp,0x10
c0014438:	89 d8                	mov    eax,ebx
c001443a:	eb e8                	jmp    c0014424 <Device::loadDriversForAll()+0xe>
c001443c:	83 c4 08             	add    esp,0x8
c001443f:	5b                   	pop    ebx
c0014440:	c3                   	ret    
c0014441:	90                   	nop

c0014442 <Device::closeAll()>:
c0014442:	53                   	push   ebx
c0014443:	83 ec 08             	sub    esp,0x8
c0014446:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001444a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001444c:	6a 00                	push   0x0
c001444e:	6a 00                	push   0x0
c0014450:	6a 00                	push   0x0
c0014452:	53                   	push   ebx
c0014453:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014456:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001445c:	83 c4 10             	add    esp,0x10
c001445f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014462:	74 0f                	je     c0014473 <Device::closeAll()+0x31>
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001446a:	e8 d3 ff ff ff       	call   c0014442 <Device::closeAll()>
c001446f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014471:	eb e9                	jmp    c001445c <Device::closeAll()+0x1a>
c0014473:	83 c4 08             	add    esp,0x8
c0014476:	5b                   	pop    ebx
c0014477:	c3                   	ret    

c0014478 <Device::powerSavingAll(PowerSavingLevel)>:
c0014478:	56                   	push   esi
c0014479:	53                   	push   ebx
c001447a:	83 ec 0c             	sub    esp,0xc
c001447d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014481:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014485:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014487:	56                   	push   esi
c0014488:	53                   	push   ebx
c0014489:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001448c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014492:	83 c4 10             	add    esp,0x10
c0014495:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014498:	74 0f                	je     c00144a9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001449a:	52                   	push   edx
c001449b:	52                   	push   edx
c001449c:	56                   	push   esi
c001449d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144a0:	e8 d3 ff ff ff       	call   c0014478 <Device::powerSavingAll(PowerSavingLevel)>
c00144a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144a7:	eb e9                	jmp    c0014492 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144a9:	58                   	pop    eax
c00144aa:	5b                   	pop    ebx
c00144ab:	5e                   	pop    esi
c00144ac:	c3                   	ret    
c00144ad:	90                   	nop

c00144ae <Device::setName(char const*)>:
c00144ae:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144b6:	e9 81 c3 fe ff       	jmp    c000083c <strcpy>
c00144bb:	90                   	nop

c00144bc <Device::Device(char const*)>:
c00144bc:	83 ec 1c             	sub    esp,0x1c
c00144bf:	ba 18 ad 02 c0       	mov    edx,0xc002ad18
c00144c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c8:	89 10                	mov    DWORD PTR [eax],edx
c00144ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ce:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144dc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ea:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014502:	83 ec 08             	sub    esp,0x8
c0014505:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014509:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001450d:	e8 9c ff ff ff       	call   c00144ae <Device::setName(char const*)>
c0014512:	83 c4 10             	add    esp,0x10
c0014515:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001451d:	83 ec 0c             	sub    esp,0xc
c0014520:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014524:	e8 22 b3 ff ff       	call   c000f84b <malloc>
c0014529:	83 c4 10             	add    esp,0x10
c001452c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014532:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014539:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001453d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014547:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001454d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014557:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001455d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014568:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001456f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014573:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001457a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145b2:	90                   	nop
c00145b3:	83 c4 1c             	add    esp,0x1c
c00145b6:	c3                   	ret    
c00145b7:	90                   	nop

c00145b8 <Device::getName()>:
c00145b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145bc:	05 d0 00 00 00       	add    eax,0xd0
c00145c1:	c3                   	ret    

c00145c2 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145c2:	83 ec 0c             	sub    esp,0xc
c00145c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c9:	83 ec 08             	sub    esp,0x8
c00145cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145d0:	50                   	push   eax
c00145d1:	e8 e6 fe ff ff       	call   c00144bc <Device::Device(char const*)>
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c00145de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e2:	89 10                	mov    DWORD PTR [eax],edx
c00145e4:	90                   	nop
c00145e5:	83 c4 0c             	add    esp,0xc
c00145e8:	c3                   	ret    
c00145e9:	90                   	nop

c00145ea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145ea:	57                   	push   edi
c00145eb:	56                   	push   esi
c00145ec:	53                   	push   ebx
c00145ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145f9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145ff:	75 0c                	jne    c001460d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014601:	52                   	push   edx
c0014602:	52                   	push   edx
c0014603:	53                   	push   ebx
c0014604:	56                   	push   esi
c0014605:	e8 b0 43 01 00       	call   c00289ba <LinkedList<Device>::addElement(Device*)>
c001460a:	83 c4 10             	add    esp,0x10
c001460d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014613:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014616:	74 12                	je     c001462a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014618:	50                   	push   eax
c0014619:	57                   	push   edi
c001461a:	56                   	push   esi
c001461b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001461e:	e8 c7 ff ff ff       	call   c00145ea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014623:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	eb e9                	jmp    c0014613 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001462a:	5b                   	pop    ebx
c001462b:	5e                   	pop    esi
c001462c:	5f                   	pop    edi
c001462d:	c3                   	ret    

c001462e <getDevicesOfType(DeviceType)>:
c001462e:	53                   	push   ebx
c001462f:	83 ec 14             	sub    esp,0x14
c0014632:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014636:	53                   	push   ebx
c0014637:	e8 5a 44 01 00       	call   c0028a96 <LinkedList<Device>::LinkedList()>
c001463c:	83 c4 0c             	add    esp,0xc
c001463f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014643:	53                   	push   ebx
c0014644:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c001464a:	e8 9b ff ff ff       	call   c00145ea <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001464f:	89 d8                	mov    eax,ebx
c0014651:	83 c4 18             	add    esp,0x18
c0014654:	5b                   	pop    ebx
c0014655:	c2 04 00             	ret    0x4

c0014658 <HardDiskController::HardDiskController(char const*)>:
c0014658:	83 ec 0c             	sub    esp,0xc
c001465b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465f:	83 ec 08             	sub    esp,0x8
c0014662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014666:	50                   	push   eax
c0014667:	e8 50 fe ff ff       	call   c00144bc <Device::Device(char const*)>
c001466c:	83 c4 10             	add    esp,0x10
c001466f:	ba 70 ad 02 c0       	mov    edx,0xc002ad70
c0014674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014678:	89 10                	mov    DWORD PTR [eax],edx
c001467a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014688:	90                   	nop
c0014689:	83 c4 0c             	add    esp,0xc
c001468c:	c3                   	ret    
c001468d:	90                   	nop

c001468e <HardDiskController::~HardDiskController()>:
c001468e:	83 ec 0c             	sub    esp,0xc
c0014691:	ba 70 ad 02 c0       	mov    edx,0xc002ad70
c0014696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001469a:	89 10                	mov    DWORD PTR [eax],edx
c001469c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a0:	83 ec 0c             	sub    esp,0xc
c00146a3:	50                   	push   eax
c00146a4:	e8 f5 fa ff ff       	call   c001419e <Device::~Device()>
c00146a9:	83 c4 10             	add    esp,0x10
c00146ac:	90                   	nop
c00146ad:	83 c4 0c             	add    esp,0xc
c00146b0:	c3                   	ret    
c00146b1:	90                   	nop

c00146b2 <HardDiskController::~HardDiskController()>:
c00146b2:	83 ec 0c             	sub    esp,0xc
c00146b5:	83 ec 0c             	sub    esp,0xc
c00146b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146bc:	e8 cd ff ff ff       	call   c001468e <HardDiskController::~HardDiskController()>
c00146c1:	83 c4 10             	add    esp,0x10
c00146c4:	83 ec 08             	sub    esp,0x8
c00146c7:	68 58 01 00 00       	push   0x158
c00146cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146d0:	e8 f0 e6 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00146d5:	83 c4 10             	add    esp,0x10
c00146d8:	83 c4 0c             	add    esp,0xc
c00146db:	c3                   	ret    

c00146dc <PhysicalDisk::eject()>:
c00146dc:	83 ec 18             	sub    esp,0x18
c00146df:	68 94 ad 02 c0       	push   0xc002ad94
c00146e4:	e8 bc e7 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00146e9:	83 c8 ff             	or     eax,0xffffffff
c00146ec:	83 c4 1c             	add    esp,0x1c
c00146ef:	c3                   	ret    

c00146f0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146f0:	83 ec 0c             	sub    esp,0xc
c00146f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f7:	83 ec 08             	sub    esp,0x8
c00146fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146fe:	50                   	push   eax
c00146ff:	e8 b8 fd ff ff       	call   c00144bc <Device::Device(char const*)>
c0014704:	83 c4 10             	add    esp,0x10
c0014707:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c001470c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014710:	89 10                	mov    DWORD PTR [eax],edx
c0014712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014716:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001471d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014721:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001473e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014748:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014752:	90                   	nop
c0014753:	83 c4 0c             	add    esp,0xc
c0014756:	c3                   	ret    
c0014757:	90                   	nop

c0014758 <PhysicalDisk::startCache()>:
c0014758:	56                   	push   esi
c0014759:	53                   	push   ebx
c001475a:	83 ec 10             	sub    esp,0x10
c001475d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014761:	6a 44                	push   0x44
c0014763:	e8 e3 b0 ff ff       	call   c000f84b <malloc>
c0014768:	89 c6                	mov    esi,eax
c001476a:	58                   	pop    eax
c001476b:	5a                   	pop    edx
c001476c:	53                   	push   ebx
c001476d:	56                   	push   esi
c001476e:	e8 51 28 00 00       	call   c0016fc4 <VCache::VCache(PhysicalDisk*)>
c0014773:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014779:	83 c4 14             	add    esp,0x14
c001477c:	5b                   	pop    ebx
c001477d:	5e                   	pop    esi
c001477e:	c3                   	ret    
c001477f:	90                   	nop

c0014780 <PhysicalDisk::~PhysicalDisk()>:
c0014780:	83 ec 0c             	sub    esp,0xc
c0014783:	ba c4 ad 02 c0       	mov    edx,0xc002adc4
c0014788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478c:	89 10                	mov    DWORD PTR [eax],edx
c001478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014792:	83 ec 0c             	sub    esp,0xc
c0014795:	50                   	push   eax
c0014796:	e8 03 fa ff ff       	call   c001419e <Device::~Device()>
c001479b:	83 c4 10             	add    esp,0x10
c001479e:	90                   	nop
c001479f:	83 c4 0c             	add    esp,0xc
c00147a2:	c3                   	ret    
c00147a3:	90                   	nop

c00147a4 <PhysicalDisk::~PhysicalDisk()>:
c00147a4:	83 ec 0c             	sub    esp,0xc
c00147a7:	83 ec 0c             	sub    esp,0xc
c00147aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ae:	e8 cd ff ff ff       	call   c0014780 <PhysicalDisk::~PhysicalDisk()>
c00147b3:	83 c4 10             	add    esp,0x10
c00147b6:	83 ec 08             	sub    esp,0x8
c00147b9:	68 6c 01 00 00       	push   0x16c
c00147be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c2:	e8 fe e5 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00147c7:	83 c4 10             	add    esp,0x10
c00147ca:	83 c4 0c             	add    esp,0xc
c00147cd:	c3                   	ret    

c00147ce <FPU::FPU(char const*)>:
c00147ce:	83 ec 0c             	sub    esp,0xc
c00147d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d5:	83 ec 08             	sub    esp,0x8
c00147d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147dc:	50                   	push   eax
c00147dd:	e8 da fc ff ff       	call   c00144bc <Device::Device(char const*)>
c00147e2:	83 c4 10             	add    esp,0x10
c00147e5:	ba 08 ae 02 c0       	mov    edx,0xc002ae08
c00147ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ee:	89 10                	mov    DWORD PTR [eax],edx
c00147f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147fe:	90                   	nop
c00147ff:	83 c4 0c             	add    esp,0xc
c0014802:	c3                   	ret    
c0014803:	90                   	nop

c0014804 <FPU::~FPU()>:
c0014804:	83 ec 0c             	sub    esp,0xc
c0014807:	ba 08 ae 02 c0       	mov    edx,0xc002ae08
c001480c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014810:	89 10                	mov    DWORD PTR [eax],edx
c0014812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014816:	83 ec 0c             	sub    esp,0xc
c0014819:	50                   	push   eax
c001481a:	e8 7f f9 ff ff       	call   c001419e <Device::~Device()>
c001481f:	83 c4 10             	add    esp,0x10
c0014822:	90                   	nop
c0014823:	83 c4 0c             	add    esp,0xc
c0014826:	c3                   	ret    
c0014827:	90                   	nop

c0014828 <FPU::~FPU()>:
c0014828:	83 ec 0c             	sub    esp,0xc
c001482b:	83 ec 0c             	sub    esp,0xc
c001482e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014832:	e8 cd ff ff ff       	call   c0014804 <FPU::~FPU()>
c0014837:	83 c4 10             	add    esp,0x10
c001483a:	83 ec 08             	sub    esp,0x8
c001483d:	68 58 01 00 00       	push   0x158
c0014842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014846:	e8 7a e5 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c001484b:	83 c4 10             	add    esp,0x10
c001484e:	83 c4 0c             	add    esp,0xc
c0014851:	c3                   	ret    

c0014852 <setupFPU()>:
c0014852:	53                   	push   ebx
c0014853:	83 ec 08             	sub    esp,0x8
c0014856:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c001485c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014863:	74 19                	je     c001487e <setupFPU()+0x2c>
c0014865:	83 ec 0c             	sub    esp,0xc
c0014868:	68 58 01 00 00       	push   0x158
c001486d:	e8 d9 af ff ff       	call   c000f84b <malloc>
c0014872:	89 c3                	mov    ebx,eax
c0014874:	89 04 24             	mov    DWORD PTR [esp],eax
c0014877:	e8 7e 0d 01 00       	call   c00255fa <AVX::AVX()>
c001487c:	eb 5b                	jmp    c00148d9 <setupFPU()+0x87>
c001487e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014884:	84 c0                	test   al,al
c0014886:	79 19                	jns    c00148a1 <setupFPU()+0x4f>
c0014888:	83 ec 0c             	sub    esp,0xc
c001488b:	68 58 01 00 00       	push   0x158
c0014890:	e8 b6 af ff ff       	call   c000f84b <malloc>
c0014895:	89 c3                	mov    ebx,eax
c0014897:	89 04 24             	mov    DWORD PTR [esp],eax
c001489a:	e8 81 0e 01 00       	call   c0025720 <SSE::SSE()>
c001489f:	eb 38                	jmp    c00148d9 <setupFPU()+0x87>
c00148a1:	a8 20                	test   al,0x20
c00148a3:	74 19                	je     c00148be <setupFPU()+0x6c>
c00148a5:	83 ec 0c             	sub    esp,0xc
c00148a8:	68 58 01 00 00       	push   0x158
c00148ad:	e8 99 af ff ff       	call   c000f84b <malloc>
c00148b2:	89 c3                	mov    ebx,eax
c00148b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b7:	e8 ce 0d 01 00       	call   c002568a <MMX::MMX()>
c00148bc:	eb 1b                	jmp    c00148d9 <setupFPU()+0x87>
c00148be:	a8 10                	test   al,0x10
c00148c0:	74 1c                	je     c00148de <setupFPU()+0x8c>
c00148c2:	83 ec 0c             	sub    esp,0xc
c00148c5:	68 58 01 00 00       	push   0x158
c00148ca:	e8 7c af ff ff       	call   c000f84b <malloc>
c00148cf:	89 c3                	mov    ebx,eax
c00148d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148d4:	e8 d5 0e 01 00       	call   c00257ae <x87::x87()>
c00148d9:	83 c4 10             	add    esp,0x10
c00148dc:	eb 24                	jmp    c0014902 <setupFPU()+0xb0>
c00148de:	83 e0 ef             	and    eax,0xffffffef
c00148e1:	83 ec 0c             	sub    esp,0xc
c00148e4:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148ea:	68 f4 ad 02 c0       	push   0xc002adf4
c00148ef:	e8 b1 e5 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00148f4:	0f 20 c0             	mov    eax,cr0
c00148f7:	83 c8 04             	or     eax,0x4
c00148fa:	0f 22 c0             	mov    cr0,eax
c00148fd:	31 db                	xor    ebx,ebx
c00148ff:	83 c4 10             	add    esp,0x10
c0014902:	89 d8                	mov    eax,ebx
c0014904:	83 c4 08             	add    esp,0x8
c0014907:	5b                   	pop    ebx
c0014908:	c3                   	ret    
c0014909:	90                   	nop

c001490a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001490a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001490e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014912:	c1 e0 04             	shl    eax,0x4
c0014915:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014919:	8d 50 10             	lea    edx,[eax+0x10]
c001491c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014922:	74 08                	je     c001492c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014924:	83 c0 04             	add    eax,0x4
c0014927:	39 d0                	cmp    eax,edx
c0014929:	75 f1                	jne    c001491c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001492b:	c3                   	ret    
c001492c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014936:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014940:	eb e2                	jmp    c0014924 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014942 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014942:	57                   	push   edi
c0014943:	31 c0                	xor    eax,eax
c0014945:	56                   	push   esi
c0014946:	53                   	push   ebx
c0014947:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001494b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001494f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014953:	89 da                	mov    edx,ebx
c0014955:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014959:	c1 e2 04             	shl    edx,0x4
c001495c:	01 ca                	add    edx,ecx
c001495e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014966:	74 16                	je     c001497e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014968:	40                   	inc    eax
c0014969:	83 f8 04             	cmp    eax,0x4
c001496c:	75 f0                	jne    c001495e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001496e:	c7 44 24 10 38 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae38
c0014976:	5b                   	pop    ebx
c0014977:	5e                   	pop    esi
c0014978:	5f                   	pop    edi
c0014979:	e9 01 5d 00 00       	jmp    c001a67f <Krnl::panic(char const*)>
c001497e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014981:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014984:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001498a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014990:	5b                   	pop    ebx
c0014991:	5e                   	pop    esi
c0014992:	5f                   	pop    edi
c0014993:	c3                   	ret    

c0014994 <doubleFault(regs*, void*)>:
c0014994:	55                   	push   ebp
c0014995:	89 e5                	mov    ebp,esp
c0014997:	83 ec 08             	sub    esp,0x8
c001499a:	83 ec 0c             	sub    esp,0xc
c001499d:	68 73 ae 02 c0       	push   0xc002ae73
c00149a2:	e8 d8 5c 00 00       	call   c001a67f <Krnl::panic(char const*)>
c00149a7:	83 c4 10             	add    esp,0x10
c00149aa:	90                   	nop
c00149ab:	c9                   	leave  
c00149ac:	c3                   	ret    
c00149ad:	90                   	nop

c00149ae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149ae:	56                   	push   esi
c00149af:	53                   	push   ebx
c00149b0:	50                   	push   eax
c00149b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149b9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149be:	75 35                	jne    c00149f5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149c0:	8d 43 20             	lea    eax,[ebx+0x20]
c00149c3:	31 d2                	xor    edx,edx
c00149c5:	89 c1                	mov    ecx,eax
c00149c7:	c1 e1 04             	shl    ecx,0x4
c00149ca:	01 f1                	add    ecx,esi
c00149cc:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149d4:	74 3e                	je     c0014a14 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149d6:	42                   	inc    edx
c00149d7:	83 fa 04             	cmp    edx,0x4
c00149da:	75 f0                	jne    c00149cc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149dc:	83 ec 0c             	sub    esp,0xc
c00149df:	68 b8 ae 02 c0       	push   0xc002aeb8
c00149e4:	e8 96 5c 00 00       	call   c001a67f <Krnl::panic(char const*)>
c00149e9:	83 c4 10             	add    esp,0x10
c00149ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149f1:	5a                   	pop    edx
c00149f2:	5b                   	pop    ebx
c00149f3:	5e                   	pop    esi
c00149f4:	c3                   	ret    
c00149f5:	83 ec 0c             	sub    esp,0xc
c00149f8:	56                   	push   esi
c00149f9:	e8 ba fb ff ff       	call   c00145b8 <Device::getName()>
c00149fe:	83 c4 10             	add    esp,0x10
c0014a01:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a04:	75 ba                	jne    c00149c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a06:	83 fb 0f             	cmp    ebx,0xf
c0014a09:	7f 29                	jg     c0014a34 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a0b:	0f b6 9b c0 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2840]
c0014a12:	eb ac                	jmp    c00149c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a14:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a1b:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a1e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a24:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a28:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a2e:	89 d8                	mov    eax,ebx
c0014a30:	5a                   	pop    edx
c0014a31:	5b                   	pop    ebx
c0014a32:	5e                   	pop    esi
c0014a33:	c3                   	ret    
c0014a34:	83 ec 0c             	sub    esp,0xc
c0014a37:	68 80 ae 02 c0       	push   0xc002ae80
c0014a3c:	e8 3e 5c 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0014a41:	83 c4 10             	add    esp,0x10
c0014a44:	e9 77 ff ff ff       	jmp    c00149c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a49:	90                   	nop

c0014a4a <InterruptController::clearAllHandlers(int, bool)>:
c0014a4a:	56                   	push   esi
c0014a4b:	53                   	push   ebx
c0014a4c:	52                   	push   edx
c0014a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a55:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a5a:	75 61                	jne    c0014abd <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a5c:	8d 46 20             	lea    eax,[esi+0x20]
c0014a5f:	c1 e6 04             	shl    esi,0x4
c0014a62:	c1 e0 04             	shl    eax,0x4
c0014a65:	01 de                	add    esi,ebx
c0014a67:	01 d8                	add    eax,ebx
c0014a69:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a73:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a7d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a87:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a91:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a9b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014aa5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014aaf:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014ab9:	58                   	pop    eax
c0014aba:	5b                   	pop    ebx
c0014abb:	5e                   	pop    esi
c0014abc:	c3                   	ret    
c0014abd:	83 ec 0c             	sub    esp,0xc
c0014ac0:	53                   	push   ebx
c0014ac1:	e8 f2 fa ff ff       	call   c00145b8 <Device::getName()>
c0014ac6:	83 c4 10             	add    esp,0x10
c0014ac9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014acc:	75 8e                	jne    c0014a5c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ace:	83 fe 0f             	cmp    esi,0xf
c0014ad1:	7f 09                	jg     c0014adc <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014ad3:	0f b6 b6 c0 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2840]
c0014ada:	eb 80                	jmp    c0014a5c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014adc:	83 ec 0c             	sub    esp,0xc
c0014adf:	68 f4 ae 02 c0       	push   0xc002aef4
c0014ae4:	e8 96 5b 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0014ae9:	83 c4 10             	add    esp,0x10
c0014aec:	e9 6b ff ff ff       	jmp    c0014a5c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014af1:	90                   	nop

c0014af2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014af2:	56                   	push   esi
c0014af3:	53                   	push   ebx
c0014af4:	52                   	push   edx
c0014af5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014af9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014afd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b02:	75 3a                	jne    c0014b3e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b08:	8d 50 20             	lea    edx,[eax+0x20]
c0014b0b:	c1 e2 04             	shl    edx,0x4
c0014b0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b11:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b15:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b1b:	74 0b                	je     c0014b28 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b1d:	83 c0 04             	add    eax,0x4
c0014b20:	39 d0                	cmp    eax,edx
c0014b22:	75 f1                	jne    c0014b15 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b24:	58                   	pop    eax
c0014b25:	5b                   	pop    ebx
c0014b26:	5e                   	pop    esi
c0014b27:	c3                   	ret    
c0014b28:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b32:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b3c:	eb df                	jmp    c0014b1d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b3e:	83 ec 0c             	sub    esp,0xc
c0014b41:	56                   	push   esi
c0014b42:	e8 71 fa ff ff       	call   c00145b8 <Device::getName()>
c0014b47:	83 c4 10             	add    esp,0x10
c0014b4a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b4d:	75 b5                	jne    c0014b04 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b4f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b54:	7f 11                	jg     c0014b67 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b5a:	0f b6 80 c0 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2840]
c0014b61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b65:	eb 9d                	jmp    c0014b04 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b67:	83 ec 0c             	sub    esp,0xc
c0014b6a:	68 f4 ae 02 c0       	push   0xc002aef4
c0014b6f:	e8 0b 5b 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0014b74:	83 c4 10             	add    esp,0x10
c0014b77:	eb 8b                	jmp    c0014b04 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b79 <nmiHandler(regs*, void*)>:
c0014b79:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0014b7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b82:	e9 0d a4 ff ff       	jmp    c000ef94 <Computer::handleNMI()>

c0014b87 <int_handler>:
c0014b87:	55                   	push   ebp
c0014b88:	57                   	push   edi
c0014b89:	56                   	push   esi
c0014b8a:	53                   	push   ebx
c0014b8b:	83 ec 0c             	sub    esp,0xc
c0014b8e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b92:	80 3d c4 10 03 c0 00 	cmp    BYTE PTR ds:0xc00310c4,0x0
c0014b99:	74 0b                	je     c0014ba6 <int_handler+0x1f>
c0014b9b:	fa                   	cli    
c0014b9c:	f4                   	hlt    
c0014b9d:	80 3d c4 10 03 c0 00 	cmp    BYTE PTR ds:0xc00310c4,0x0
c0014ba4:	75 f5                	jne    c0014b9b <int_handler+0x14>
c0014ba6:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0014bab:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014bae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bb4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014bba:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bbd:	83 f8 17             	cmp    eax,0x17
c0014bc0:	77 13                	ja     c0014bd5 <int_handler+0x4e>
c0014bc2:	83 ec 08             	sub    esp,0x8
c0014bc5:	8b 17                	mov    edx,DWORD PTR [edi]
c0014bc7:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bca:	0f b6 c0             	movzx  eax,al
c0014bcd:	50                   	push   eax
c0014bce:	57                   	push   edi
c0014bcf:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bd2:	83 c4 10             	add    esp,0x10
c0014bd5:	83 c3 15             	add    ebx,0x15
c0014bd8:	c1 e3 04             	shl    ebx,0x4
c0014bdb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014bdf:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014be6:	31 db                	xor    ebx,ebx
c0014be8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014bec:	85 c0                	test   eax,eax
c0014bee:	74 13                	je     c0014c03 <int_handler+0x7c>
c0014bf0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014bf3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bf7:	74 1c                	je     c0014c15 <int_handler+0x8e>
c0014bf9:	83 ec 08             	sub    esp,0x8
c0014bfc:	52                   	push   edx
c0014bfd:	56                   	push   esi
c0014bfe:	ff d0                	call   eax
c0014c00:	83 c4 10             	add    esp,0x10
c0014c03:	43                   	inc    ebx
c0014c04:	83 fb 04             	cmp    ebx,0x4
c0014c07:	75 df                	jne    c0014be8 <int_handler+0x61>
c0014c09:	83 c4 0c             	add    esp,0xc
c0014c0c:	31 c0                	xor    eax,eax
c0014c0e:	5b                   	pop    ebx
c0014c0f:	31 d2                	xor    edx,edx
c0014c11:	5e                   	pop    esi
c0014c12:	5f                   	pop    edi
c0014c13:	5d                   	pop    ebp
c0014c14:	c3                   	ret    
c0014c15:	83 ec 08             	sub    esp,0x8
c0014c18:	52                   	push   edx
c0014c19:	56                   	push   esi
c0014c1a:	ff d0                	call   eax
c0014c1c:	83 c4 10             	add    esp,0x10
c0014c1f:	83 c4 0c             	add    esp,0xc
c0014c22:	5b                   	pop    ebx
c0014c23:	5e                   	pop    esi
c0014c24:	5f                   	pop    edi
c0014c25:	5d                   	pop    ebp
c0014c26:	c3                   	ret    
c0014c27:	90                   	nop

c0014c28 <InterruptController::InterruptController(char const*)>:
c0014c28:	83 ec 1c             	sub    esp,0x1c
c0014c2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c2f:	83 ec 08             	sub    esp,0x8
c0014c32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c36:	50                   	push   eax
c0014c37:	e8 80 f8 ff ff       	call   c00144bc <Device::Device(char const*)>
c0014c3c:	83 c4 10             	add    esp,0x10
c0014c3f:	ba 20 b2 02 c0       	mov    edx,0xc002b220
c0014c44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c48:	89 10                	mov    DWORD PTR [eax],edx
c0014c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c4e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c60:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c68:	7f 5e                	jg     c0014cc8 <InterruptController::InterruptController(char const*)+0xa0>
c0014c6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c72:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c77:	7f 49                	jg     c0014cc2 <InterruptController::InterruptController(char const*)+0x9a>
c0014c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c81:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c8c:	01 ca                	add    edx,ecx
c0014c8e:	83 c2 54             	add    edx,0x54
c0014c91:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ca1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014ca8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cac:	01 ca                	add    edx,ecx
c0014cae:	81 c2 54 04 00 00    	add    edx,0x454
c0014cb4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cbc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cc0:	eb b0                	jmp    c0014c72 <InterruptController::InterruptController(char const*)+0x4a>
c0014cc2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cc6:	eb 98                	jmp    c0014c60 <InterruptController::InterruptController(char const*)+0x38>
c0014cc8:	90                   	nop
c0014cc9:	83 c4 1c             	add    esp,0x1c
c0014ccc:	c3                   	ret    
c0014ccd:	90                   	nop

c0014cce <InterruptController::~InterruptController()>:
c0014cce:	83 ec 0c             	sub    esp,0xc
c0014cd1:	ba 20 b2 02 c0       	mov    edx,0xc002b220
c0014cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cda:	89 10                	mov    DWORD PTR [eax],edx
c0014cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ce0:	83 ec 0c             	sub    esp,0xc
c0014ce3:	50                   	push   eax
c0014ce4:	e8 b5 f4 ff ff       	call   c001419e <Device::~Device()>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	90                   	nop
c0014ced:	83 c4 0c             	add    esp,0xc
c0014cf0:	c3                   	ret    
c0014cf1:	90                   	nop

c0014cf2 <InterruptController::~InterruptController()>:
c0014cf2:	83 ec 0c             	sub    esp,0xc
c0014cf5:	83 ec 0c             	sub    esp,0xc
c0014cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cfc:	e8 cd ff ff ff       	call   c0014cce <InterruptController::~InterruptController()>
c0014d01:	83 c4 10             	add    esp,0x10
c0014d04:	83 ec 08             	sub    esp,0x8
c0014d07:	68 58 21 00 00       	push   0x2158
c0014d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d10:	e8 b0 e0 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0014d15:	83 c4 10             	add    esp,0x10
c0014d18:	83 c4 0c             	add    esp,0xc
c0014d1b:	c3                   	ret    

c0014d1c <displayDebugInfo(regs*)>:
c0014d1c:	55                   	push   ebp
c0014d1d:	57                   	push   edi
c0014d1e:	56                   	push   esi
c0014d1f:	53                   	push   ebx
c0014d20:	83 ec 24             	sub    esp,0x24
c0014d23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d27:	0f 20 c2             	mov    edx,cr0
c0014d2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d2e:	0f 20 d7             	mov    edi,cr2
c0014d31:	0f 20 de             	mov    esi,cr3
c0014d34:	0f 20 e5             	mov    ebp,cr4
c0014d37:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d3a:	68 2e af 02 c0       	push   0xc002af2e
c0014d3f:	e8 61 e1 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014d44:	59                   	pop    ecx
c0014d45:	58                   	pop    eax
c0014d46:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d49:	68 39 af 02 c0       	push   0xc002af39
c0014d4e:	e8 52 e1 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014d53:	58                   	pop    eax
c0014d54:	5a                   	pop    edx
c0014d55:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d58:	68 44 af 02 c0       	push   0xc002af44
c0014d5d:	e8 43 e1 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014d62:	59                   	pop    ecx
c0014d63:	58                   	pop    eax
c0014d64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d67:	68 4f af 02 c0       	push   0xc002af4f
c0014d6c:	e8 34 e1 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014d71:	58                   	pop    eax
c0014d72:	5a                   	pop    edx
c0014d73:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d76:	68 5a af 02 c0       	push   0xc002af5a
c0014d7b:	e8 25 e1 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014d80:	59                   	pop    ecx
c0014d81:	58                   	pop    eax
c0014d82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d85:	68 65 af 02 c0       	push   0xc002af65
c0014d8a:	e8 16 e1 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014d8f:	58                   	pop    eax
c0014d90:	5a                   	pop    edx
c0014d91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d94:	68 70 af 02 c0       	push   0xc002af70
c0014d99:	e8 07 e1 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014d9e:	59                   	pop    ecx
c0014d9f:	58                   	pop    eax
c0014da0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014da3:	68 7b af 02 c0       	push   0xc002af7b
c0014da8:	e8 f8 e0 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014dad:	58                   	pop    eax
c0014dae:	5a                   	pop    edx
c0014daf:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014db2:	68 86 af 02 c0       	push   0xc002af86
c0014db7:	e8 e9 e0 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014dbc:	59                   	pop    ecx
c0014dbd:	58                   	pop    eax
c0014dbe:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dc1:	68 95 af 02 c0       	push   0xc002af95
c0014dc6:	e8 da e0 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014dcb:	58                   	pop    eax
c0014dcc:	5a                   	pop    edx
c0014dcd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014dd0:	68 a0 af 02 c0       	push   0xc002afa0
c0014dd5:	e8 cb e0 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014dda:	59                   	pop    ecx
c0014ddb:	58                   	pop    eax
c0014ddc:	57                   	push   edi
c0014ddd:	68 ab af 02 c0       	push   0xc002afab
c0014de2:	e8 be e0 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014de7:	58                   	pop    eax
c0014de8:	5a                   	pop    edx
c0014de9:	56                   	push   esi
c0014dea:	68 b6 af 02 c0       	push   0xc002afb6
c0014def:	e8 b1 e0 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0014df4:	59                   	pop    ecx
c0014df5:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014dfa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e00:	e8 f8 be ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c0014e05:	58                   	pop    eax
c0014e06:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e09:	5a                   	pop    edx
c0014e0a:	c1 e0 05             	shl    eax,0x5
c0014e0d:	05 20 d5 02 c0       	add    eax,0xc002d520
c0014e12:	50                   	push   eax
c0014e13:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014e18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e1e:	e8 f9 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e23:	59                   	pop    ecx
c0014e24:	58                   	pop    eax
c0014e25:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014e2a:	68 c1 af 02 c0       	push   0xc002afc1
c0014e2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e35:	e8 e2 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e3a:	58                   	pop    eax
c0014e3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e40:	5a                   	pop    edx
c0014e41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e44:	83 c0 0c             	add    eax,0xc
c0014e47:	50                   	push   eax
c0014e48:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014e4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e53:	e8 c4 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e58:	59                   	pop    ecx
c0014e59:	58                   	pop    eax
c0014e5a:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014e5f:	68 ca af 02 c0       	push   0xc002afca
c0014e64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6a:	e8 ad c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e6f:	58                   	pop    eax
c0014e70:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014e75:	5a                   	pop    edx
c0014e76:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7f:	e8 be c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014e84:	59                   	pop    ecx
c0014e85:	58                   	pop    eax
c0014e86:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014e8b:	68 d2 af 02 c0       	push   0xc002afd2
c0014e90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e96:	e8 81 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e9b:	58                   	pop    eax
c0014e9c:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014ea1:	5a                   	pop    edx
c0014ea2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ea5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eab:	e8 92 c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014eb0:	59                   	pop    ecx
c0014eb1:	58                   	pop    eax
c0014eb2:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014eb7:	68 da af 02 c0       	push   0xc002afda
c0014ebc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec2:	e8 55 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ec7:	58                   	pop    eax
c0014ec8:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014ecd:	5a                   	pop    edx
c0014ece:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ed1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed7:	e8 66 c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014edc:	59                   	pop    ecx
c0014edd:	58                   	pop    eax
c0014ede:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014ee3:	68 e2 af 02 c0       	push   0xc002afe2
c0014ee8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eee:	e8 29 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ef3:	58                   	pop    eax
c0014ef4:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014ef9:	5a                   	pop    edx
c0014efa:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014efd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f03:	e8 3a c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f08:	59                   	pop    ecx
c0014f09:	58                   	pop    eax
c0014f0a:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014f0f:	68 ea af 02 c0       	push   0xc002afea
c0014f14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1a:	e8 fd c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f1f:	58                   	pop    eax
c0014f20:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014f25:	5a                   	pop    edx
c0014f26:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2f:	e8 0e c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f34:	59                   	pop    ecx
c0014f35:	58                   	pop    eax
c0014f36:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014f3b:	68 f2 af 02 c0       	push   0xc002aff2
c0014f40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f46:	e8 d1 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f4b:	58                   	pop    eax
c0014f4c:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014f51:	5a                   	pop    edx
c0014f52:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5b:	e8 e2 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f60:	59                   	pop    ecx
c0014f61:	58                   	pop    eax
c0014f62:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014f67:	68 fa af 02 c0       	push   0xc002affa
c0014f6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f72:	e8 a5 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f77:	58                   	pop    eax
c0014f78:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014f7d:	5a                   	pop    edx
c0014f7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f82:	52                   	push   edx
c0014f83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f89:	e8 b4 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f8e:	59                   	pop    ecx
c0014f8f:	58                   	pop    eax
c0014f90:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014f95:	68 03 b0 02 c0       	push   0xc002b003
c0014f9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa0:	e8 77 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014fa5:	58                   	pop    eax
c0014fa6:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014fab:	5a                   	pop    edx
c0014fac:	57                   	push   edi
c0014fad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb3:	e8 8a c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014fb8:	59                   	pop    ecx
c0014fb9:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014fbe:	5f                   	pop    edi
c0014fbf:	68 0b b0 02 c0       	push   0xc002b00b
c0014fc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fca:	e8 4d c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014fcf:	58                   	pop    eax
c0014fd0:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014fd5:	5a                   	pop    edx
c0014fd6:	56                   	push   esi
c0014fd7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fdd:	e8 60 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014fe2:	59                   	pop    ecx
c0014fe3:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0014fe8:	5e                   	pop    esi
c0014fe9:	68 13 b0 02 c0       	push   0xc002b013
c0014fee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff4:	e8 23 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ff9:	5f                   	pop    edi
c0014ffa:	58                   	pop    eax
c0014ffb:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0015000:	55                   	push   ebp
c0015001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015007:	e8 36 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001500c:	58                   	pop    eax
c001500d:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0015012:	5a                   	pop    edx
c0015013:	68 1b b0 02 c0       	push   0xc002b01b
c0015018:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501e:	e8 f9 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015023:	0f 21 c0             	mov    eax,db0
c0015026:	59                   	pop    ecx
c0015027:	5e                   	pop    esi
c0015028:	50                   	push   eax
c0015029:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001502e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015034:	e8 09 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015039:	5f                   	pop    edi
c001503a:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001503f:	5d                   	pop    ebp
c0015040:	68 24 b0 02 c0       	push   0xc002b024
c0015045:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504b:	e8 cc c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015050:	0f 21 c8             	mov    eax,db1
c0015053:	5a                   	pop    edx
c0015054:	59                   	pop    ecx
c0015055:	50                   	push   eax
c0015056:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001505b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015061:	e8 dc c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015066:	5e                   	pop    esi
c0015067:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001506c:	5f                   	pop    edi
c001506d:	68 2c b0 02 c0       	push   0xc002b02c
c0015072:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015078:	e8 9f c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001507d:	0f 21 d0             	mov    eax,db2
c0015080:	5d                   	pop    ebp
c0015081:	5a                   	pop    edx
c0015082:	50                   	push   eax
c0015083:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0015088:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508e:	e8 af c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015093:	59                   	pop    ecx
c0015094:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0015099:	5e                   	pop    esi
c001509a:	68 34 b0 02 c0       	push   0xc002b034
c001509f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a5:	e8 72 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c00150aa:	0f 21 d8             	mov    eax,db3
c00150ad:	5f                   	pop    edi
c00150ae:	5d                   	pop    ebp
c00150af:	50                   	push   eax
c00150b0:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c00150b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bb:	e8 82 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150c0:	58                   	pop    eax
c00150c1:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c00150c6:	5a                   	pop    edx
c00150c7:	68 3c b0 02 c0       	push   0xc002b03c
c00150cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d2:	e8 45 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c00150d7:	0f 21 f0             	mov    eax,db6
c00150da:	59                   	pop    ecx
c00150db:	5e                   	pop    esi
c00150dc:	50                   	push   eax
c00150dd:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c00150e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e8:	e8 55 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150ed:	5f                   	pop    edi
c00150ee:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c00150f3:	5d                   	pop    ebp
c00150f4:	68 44 b0 02 c0       	push   0xc002b044
c00150f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ff:	e8 18 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015104:	0f 21 f8             	mov    eax,db7
c0015107:	5a                   	pop    edx
c0015108:	59                   	pop    ecx
c0015109:	50                   	push   eax
c001510a:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001510f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015115:	e8 28 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001511a:	5e                   	pop    esi
c001511b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001511e:	e8 3e 86 00 00       	call   c001d761 <Thr::getDriverNameFromAddress(unsigned long)>
c0015123:	83 c4 10             	add    esp,0x10
c0015126:	85 c0                	test   eax,eax
c0015128:	74 7d                	je     c00151a7 <displayDebugInfo(regs*)+0x48b>
c001512a:	89 c6                	mov    esi,eax
c001512c:	50                   	push   eax
c001512d:	50                   	push   eax
c001512e:	56                   	push   esi
c001512f:	68 4c b0 02 c0       	push   0xc002b04c
c0015134:	e8 6c dd ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015139:	5a                   	pop    edx
c001513a:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001513f:	59                   	pop    ecx
c0015140:	68 5a b0 02 c0       	push   0xc002b05a
c0015145:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001514b:	e8 cc bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015150:	5f                   	pop    edi
c0015151:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0015156:	5d                   	pop    ebp
c0015157:	56                   	push   esi
c0015158:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515e:	e8 b9 bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015163:	58                   	pop    eax
c0015164:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0015169:	5a                   	pop    edx
c001516a:	68 66 b0 02 c0       	push   0xc002b066
c001516f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015175:	e8 a2 bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c001517a:	59                   	pop    ecx
c001517b:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0015180:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015186:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015189:	e8 0a 86 00 00       	call   c001d798 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001518e:	5b                   	pop    ebx
c001518f:	5d                   	pop    ebp
c0015190:	50                   	push   eax
c0015191:	57                   	push   edi
c0015192:	e8 ab bf ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015197:	58                   	pop    eax
c0015198:	5a                   	pop    edx
c0015199:	56                   	push   esi
c001519a:	68 72 b0 02 c0       	push   0xc002b072
c001519f:	e8 01 dd ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00151a4:	83 c4 10             	add    esp,0x10
c00151a7:	fa                   	cli    
c00151a8:	f4                   	hlt    
c00151a9:	eb fe                	jmp    c00151a9 <displayDebugInfo(regs*)+0x48d>

c00151ab <x87EmulHandler(regs*, void*)>:
c00151ab:	53                   	push   ebx
c00151ac:	83 ec 08             	sub    esp,0x8
c00151af:	0f 20 c0             	mov    eax,cr0
c00151b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00151b8:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c00151bc:	0f 85 f2 00 00 00    	jne    c00152b4 <x87EmulHandler(regs*, void*)+0x109>
c00151c2:	83 e0 0c             	and    eax,0xc
c00151c5:	83 f8 08             	cmp    eax,0x8
c00151c8:	74 1c                	je     c00151e6 <x87EmulHandler(regs*, void*)+0x3b>
c00151ca:	83 ec 0c             	sub    esp,0xc
c00151cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151d1:	e8 52 a9 00 00       	call   c001fb28 <Vm::x87Handler(regs*)>
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	84 c0                	test   al,al
c00151db:	0f 84 d3 00 00 00    	je     c00152b4 <x87EmulHandler(regs*, void*)+0x109>
c00151e1:	83 c4 08             	add    esp,0x8
c00151e4:	5b                   	pop    ebx
c00151e5:	c3                   	ret    
c00151e6:	83 ec 0c             	sub    esp,0xc
c00151e9:	68 98 b0 02 c0       	push   0xc002b098
c00151ee:	e8 b2 dc ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00151f3:	0f 06                	clts   
c00151f5:	8b 1d 04 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e704
c00151fb:	83 c4 10             	add    esp,0x10
c00151fe:	85 db                	test   ebx,ebx
c0015200:	74 38                	je     c001523a <x87EmulHandler(regs*, void*)+0x8f>
c0015202:	83 ec 0c             	sub    esp,0xc
c0015205:	68 a5 b0 02 c0       	push   0xc002b0a5
c001520a:	e8 96 dc ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001520f:	5a                   	pop    edx
c0015210:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015215:	59                   	pop    ecx
c0015216:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001521c:	8b 0d 04 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e704
c0015222:	8b 10                	mov    edx,DWORD PTR [eax]
c0015224:	ff 71 59             	push   DWORD PTR [ecx+0x59]
c0015227:	50                   	push   eax
c0015228:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001522b:	c7 04 24 ba b0 02 c0 	mov    DWORD PTR [esp],0xc002b0ba
c0015232:	e8 6e dc ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015237:	83 c4 10             	add    esp,0x10
c001523a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001523f:	8b 58 59             	mov    ebx,DWORD PTR [eax+0x59]
c0015242:	85 db                	test   ebx,ebx
c0015244:	74 47                	je     c001528d <x87EmulHandler(regs*, void*)+0xe2>
c0015246:	83 ec 0c             	sub    esp,0xc
c0015249:	68 e7 b0 02 c0       	push   0xc002b0e7
c001524e:	e8 52 dc ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015253:	5a                   	pop    edx
c0015254:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015259:	59                   	pop    ecx
c001525a:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0015260:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015266:	8b 10                	mov    edx,DWORD PTR [eax]
c0015268:	ff 71 59             	push   DWORD PTR [ecx+0x59]
c001526b:	50                   	push   eax
c001526c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001526f:	c7 04 24 fd b0 02 c0 	mov    DWORD PTR [esp],0xc002b0fd
c0015276:	e8 2a dc ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001527b:	83 c4 10             	add    esp,0x10
c001527e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015283:	a3 04 e7 02 c0       	mov    ds:0xc002e704,eax
c0015288:	83 c4 08             	add    esp,0x8
c001528b:	5b                   	pop    ebx
c001528c:	c3                   	ret    
c001528d:	83 ec 0c             	sub    esp,0xc
c0015290:	68 ce b0 02 c0       	push   0xc002b0ce
c0015295:	e8 0b dc ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001529a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00152a0:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
c00152a7:	e8 9f a5 ff ff       	call   c000f84b <malloc>
c00152ac:	83 c4 10             	add    esp,0x10
c00152af:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c00152b2:	eb ca                	jmp    c001527e <x87EmulHandler(regs*, void*)+0xd3>
c00152b4:	83 ec 0c             	sub    esp,0xc
c00152b7:	68 82 b0 02 c0       	push   0xc002b082
c00152bc:	e8 e4 db ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00152c1:	58                   	pop    eax
c00152c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152c6:	e8 51 fa ff ff       	call   c0014d1c <displayDebugInfo(regs*)>

c00152cb <gpFault(regs*, void*)>:
c00152cb:	53                   	push   ebx
c00152cc:	83 ec 14             	sub    esp,0x14
c00152cf:	c7 05 00 e7 02 c0 a5 ee 01 c0 	mov    DWORD PTR ds:0xc002e700,0xc001eea5
c00152d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152dd:	53                   	push   ebx
c00152de:	e8 c2 9b 00 00       	call   c001eea5 <Vm::faultHandler(regs*)>
c00152e3:	83 c4 10             	add    esp,0x10
c00152e6:	84 c0                	test   al,al
c00152e8:	74 05                	je     c00152ef <gpFault(regs*, void*)+0x24>
c00152ea:	83 c4 08             	add    esp,0x8
c00152ed:	5b                   	pop    ebx
c00152ee:	c3                   	ret    
c00152ef:	83 ec 0c             	sub    esp,0xc
c00152f2:	68 12 b1 02 c0       	push   0xc002b112
c00152f7:	e8 a9 db ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00152fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152ff:	e8 18 fa ff ff       	call   c0014d1c <displayDebugInfo(regs*)>

c0015304 <pgFault(regs*, void*)>:
c0015304:	83 ec 14             	sub    esp,0x14
c0015307:	0f 20 d0             	mov    eax,cr2
c001530a:	50                   	push   eax
c001530b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015310:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015313:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015319:	e8 c4 d7 ff ff       	call   c0012ae2 <VAS::tryLoadBackOffDisk(unsigned long)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	84 c0                	test   al,al
c0015323:	74 04                	je     c0015329 <pgFault(regs*, void*)+0x25>
c0015325:	83 c4 0c             	add    esp,0xc
c0015328:	c3                   	ret    
c0015329:	83 ec 0c             	sub    esp,0xc
c001532c:	68 2d b1 02 c0       	push   0xc002b12d
c0015331:	e8 6f db ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015336:	58                   	pop    eax
c0015337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001533b:	e8 dc f9 ff ff       	call   c0014d1c <displayDebugInfo(regs*)>

c0015340 <otherISRHandler(regs*, void*)>:
c0015340:	53                   	push   ebx
c0015341:	83 ec 0c             	sub    esp,0xc
c0015344:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015348:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001534b:	50                   	push   eax
c001534c:	50                   	push   eax
c001534d:	68 3a b1 02 c0       	push   0xc002b13a
c0015352:	e8 4e db ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015357:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001535a:	e8 bd f9 ff ff       	call   c0014d1c <displayDebugInfo(regs*)>

c001535f <opcodeFault(regs*, void*)>:
c001535f:	55                   	push   ebp
c0015360:	89 e5                	mov    ebp,esp
c0015362:	56                   	push   esi
c0015363:	53                   	push   ebx
c0015364:	83 ec 40             	sub    esp,0x40
c0015367:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001536c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015372:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015378:	84 c0                	test   al,al
c001537a:	74 24                	je     c00153a0 <opcodeFault(regs*, void*)+0x41>
c001537c:	83 ec 0c             	sub    esp,0xc
c001537f:	68 58 b1 02 c0       	push   0xc002b158
c0015384:	e8 1c db ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015389:	83 c4 10             	add    esp,0x10
c001538c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015392:	8d 50 19             	lea    edx,[eax+0x19]
c0015395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015398:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001539b:	e9 be 05 00 00       	jmp    c001595e <opcodeFault(regs*, void*)+0x5ff>
c00153a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153a9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00153ad:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00153b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00153ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bd:	8a 00                	mov    al,BYTE PTR [eax]
c00153bf:	3c f0                	cmp    al,0xf0
c00153c1:	75 17                	jne    c00153da <opcodeFault(regs*, void*)+0x7b>
c00153c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153cc:	8d 50 01             	lea    edx,[eax+0x1]
c00153cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153d5:	e9 da 00 00 00       	jmp    c00154b4 <opcodeFault(regs*, void*)+0x155>
c00153da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dd:	8a 00                	mov    al,BYTE PTR [eax]
c00153df:	3c f2                	cmp    al,0xf2
c00153e1:	74 09                	je     c00153ec <opcodeFault(regs*, void*)+0x8d>
c00153e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e6:	8a 00                	mov    al,BYTE PTR [eax]
c00153e8:	3c f3                	cmp    al,0xf3
c00153ea:	75 1b                	jne    c0015407 <opcodeFault(regs*, void*)+0xa8>
c00153ec:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153f0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f9:	8d 50 01             	lea    edx,[eax+0x1]
c00153fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015402:	e9 ad 00 00 00       	jmp    c00154b4 <opcodeFault(regs*, void*)+0x155>
c0015407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540a:	8a 00                	mov    al,BYTE PTR [eax]
c001540c:	3c 66                	cmp    al,0x66
c001540e:	75 1f                	jne    c001542f <opcodeFault(regs*, void*)+0xd0>
c0015410:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015414:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015418:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001541b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015421:	8d 50 01             	lea    edx,[eax+0x1]
c0015424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015427:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001542a:	e9 85 00 00 00       	jmp    c00154b4 <opcodeFault(regs*, void*)+0x155>
c001542f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015432:	8a 00                	mov    al,BYTE PTR [eax]
c0015434:	3c 67                	cmp    al,0x67
c0015436:	75 18                	jne    c0015450 <opcodeFault(regs*, void*)+0xf1>
c0015438:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001543c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015445:	8d 50 01             	lea    edx,[eax+0x1]
c0015448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001544e:	eb 64                	jmp    c00154b4 <opcodeFault(regs*, void*)+0x155>
c0015450:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015453:	8a 00                	mov    al,BYTE PTR [eax]
c0015455:	3c 2e                	cmp    al,0x2e
c0015457:	74 09                	je     c0015462 <opcodeFault(regs*, void*)+0x103>
c0015459:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545c:	8a 00                	mov    al,BYTE PTR [eax]
c001545e:	3c 3e                	cmp    al,0x3e
c0015460:	75 18                	jne    c001547a <opcodeFault(regs*, void*)+0x11b>
c0015462:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015466:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001546f:	8d 50 01             	lea    edx,[eax+0x1]
c0015472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015475:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015478:	eb 3a                	jmp    c00154b4 <opcodeFault(regs*, void*)+0x155>
c001547a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547d:	8a 00                	mov    al,BYTE PTR [eax]
c001547f:	3c 36                	cmp    al,0x36
c0015481:	74 1b                	je     c001549e <opcodeFault(regs*, void*)+0x13f>
c0015483:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015486:	8a 00                	mov    al,BYTE PTR [eax]
c0015488:	3c 26                	cmp    al,0x26
c001548a:	74 12                	je     c001549e <opcodeFault(regs*, void*)+0x13f>
c001548c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548f:	8a 00                	mov    al,BYTE PTR [eax]
c0015491:	3c 64                	cmp    al,0x64
c0015493:	74 09                	je     c001549e <opcodeFault(regs*, void*)+0x13f>
c0015495:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015498:	8a 00                	mov    al,BYTE PTR [eax]
c001549a:	3c 65                	cmp    al,0x65
c001549c:	75 16                	jne    c00154b4 <opcodeFault(regs*, void*)+0x155>
c001549e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154a2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ab:	8d 50 01             	lea    edx,[eax+0x1]
c00154ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b7:	8a 00                	mov    al,BYTE PTR [eax]
c00154b9:	3c 0f                	cmp    al,0xf
c00154bb:	0f 85 ad 00 00 00    	jne    c001556e <opcodeFault(regs*, void*)+0x20f>
c00154c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c4:	40                   	inc    eax
c00154c5:	8a 00                	mov    al,BYTE PTR [eax]
c00154c7:	3c c2                	cmp    al,0xc2
c00154c9:	74 0e                	je     c00154d9 <opcodeFault(regs*, void*)+0x17a>
c00154cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ce:	40                   	inc    eax
c00154cf:	8a 00                	mov    al,BYTE PTR [eax]
c00154d1:	3c c3                	cmp    al,0xc3
c00154d3:	0f 85 95 00 00 00    	jne    c001556e <opcodeFault(regs*, void*)+0x20f>
c00154d9:	83 ec 0c             	sub    esp,0xc
c00154dc:	68 7b b1 02 c0       	push   0xc002b17b
c00154e1:	e8 bf d9 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ef:	8d 50 01             	lea    edx,[eax+0x1]
c00154f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154f8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015500:	8d 50 fe             	lea    edx,[eax-0x2]
c0015503:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015506:	88 10                	mov    BYTE PTR [eax],dl
c0015508:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001550b:	50                   	push   eax
c001550c:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001550f:	50                   	push   eax
c0015510:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015513:	50                   	push   eax
c0015514:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015517:	e8 2a 48 00 00       	call   c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015522:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015525:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015528:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001552b:	01 d0                	add    eax,edx
c001552d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015533:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015536:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015539:	48                   	dec    eax
c001553a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001553d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015540:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015543:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015549:	83 ec 04             	sub    esp,0x4
c001554c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001554f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015552:	50                   	push   eax
c0015553:	e8 5c ac fe ff       	call   c00001b4 <voodooXADD>
c0015558:	83 c4 10             	add    esp,0x10
c001555b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001555e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015561:	01 c2                	add    edx,eax
c0015563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015566:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015569:	e9 f0 03 00 00       	jmp    c001595e <opcodeFault(regs*, void*)+0x5ff>
c001556e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015571:	8a 00                	mov    al,BYTE PTR [eax]
c0015573:	3c 0f                	cmp    al,0xf
c0015575:	0f 85 8b 01 00 00    	jne    c0015706 <opcodeFault(regs*, void*)+0x3a7>
c001557b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001557e:	40                   	inc    eax
c001557f:	8a 00                	mov    al,BYTE PTR [eax]
c0015581:	3c c7                	cmp    al,0xc7
c0015583:	0f 86 7d 01 00 00    	jbe    c0015706 <opcodeFault(regs*, void*)+0x3a7>
c0015589:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558c:	40                   	inc    eax
c001558d:	8a 00                	mov    al,BYTE PTR [eax]
c001558f:	3c cf                	cmp    al,0xcf
c0015591:	0f 87 6f 01 00 00    	ja     c0015706 <opcodeFault(regs*, void*)+0x3a7>
c0015597:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001559a:	40                   	inc    eax
c001559b:	8a 00                	mov    al,BYTE PTR [eax]
c001559d:	83 c0 38             	add    eax,0x38
c00155a0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00155a3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155a7:	75 0b                	jne    c00155b4 <opcodeFault(regs*, void*)+0x255>
c00155a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ac:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b2:	eb 75                	jmp    c0015629 <opcodeFault(regs*, void*)+0x2ca>
c00155b4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155b8:	75 0b                	jne    c00155c5 <opcodeFault(regs*, void*)+0x266>
c00155ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c3:	eb 64                	jmp    c0015629 <opcodeFault(regs*, void*)+0x2ca>
c00155c5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155c9:	75 0b                	jne    c00155d6 <opcodeFault(regs*, void*)+0x277>
c00155cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ce:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d4:	eb 53                	jmp    c0015629 <opcodeFault(regs*, void*)+0x2ca>
c00155d6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155da:	75 0b                	jne    c00155e7 <opcodeFault(regs*, void*)+0x288>
c00155dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155e2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155e5:	eb 42                	jmp    c0015629 <opcodeFault(regs*, void*)+0x2ca>
c00155e7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155eb:	75 0b                	jne    c00155f8 <opcodeFault(regs*, void*)+0x299>
c00155ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f6:	eb 31                	jmp    c0015629 <opcodeFault(regs*, void*)+0x2ca>
c00155f8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155fc:	75 0b                	jne    c0015609 <opcodeFault(regs*, void*)+0x2aa>
c00155fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015601:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015604:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015607:	eb 20                	jmp    c0015629 <opcodeFault(regs*, void*)+0x2ca>
c0015609:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001560d:	75 0b                	jne    c001561a <opcodeFault(regs*, void*)+0x2bb>
c001560f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015612:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015615:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015618:	eb 0f                	jmp    c0015629 <opcodeFault(regs*, void*)+0x2ca>
c001561a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001561e:	75 09                	jne    c0015629 <opcodeFault(regs*, void*)+0x2ca>
c0015620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015623:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015626:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015629:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001562d:	74 10                	je     c001563f <opcodeFault(regs*, void*)+0x2e0>
c001562f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015636:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001563d:	eb 2d                	jmp    c001566c <opcodeFault(regs*, void*)+0x30d>
c001563f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015642:	c1 e0 18             	shl    eax,0x18
c0015645:	89 c2                	mov    edx,eax
c0015647:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001564a:	c1 e0 08             	shl    eax,0x8
c001564d:	25 00 00 ff 00       	and    eax,0xff0000
c0015652:	09 c2                	or     edx,eax
c0015654:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015657:	c1 e8 08             	shr    eax,0x8
c001565a:	25 00 ff 00 00       	and    eax,0xff00
c001565f:	09 c2                	or     edx,eax
c0015661:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015664:	c1 e8 18             	shr    eax,0x18
c0015667:	09 d0                	or     eax,edx
c0015669:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001566c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015670:	75 0b                	jne    c001567d <opcodeFault(regs*, void*)+0x31e>
c0015672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015675:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015678:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001567b:	eb 75                	jmp    c00156f2 <opcodeFault(regs*, void*)+0x393>
c001567d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015681:	75 0b                	jne    c001568e <opcodeFault(regs*, void*)+0x32f>
c0015683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015686:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015689:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001568c:	eb 64                	jmp    c00156f2 <opcodeFault(regs*, void*)+0x393>
c001568e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015692:	75 0b                	jne    c001569f <opcodeFault(regs*, void*)+0x340>
c0015694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015697:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001569a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001569d:	eb 53                	jmp    c00156f2 <opcodeFault(regs*, void*)+0x393>
c001569f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00156a3:	75 0b                	jne    c00156b0 <opcodeFault(regs*, void*)+0x351>
c00156a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ab:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00156ae:	eb 42                	jmp    c00156f2 <opcodeFault(regs*, void*)+0x393>
c00156b0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00156b4:	75 0b                	jne    c00156c1 <opcodeFault(regs*, void*)+0x362>
c00156b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156bc:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00156bf:	eb 31                	jmp    c00156f2 <opcodeFault(regs*, void*)+0x393>
c00156c1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00156c5:	75 0b                	jne    c00156d2 <opcodeFault(regs*, void*)+0x373>
c00156c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00156d0:	eb 20                	jmp    c00156f2 <opcodeFault(regs*, void*)+0x393>
c00156d2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156d6:	75 0b                	jne    c00156e3 <opcodeFault(regs*, void*)+0x384>
c00156d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156de:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156e1:	eb 0f                	jmp    c00156f2 <opcodeFault(regs*, void*)+0x393>
c00156e3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156e7:	75 09                	jne    c00156f2 <opcodeFault(regs*, void*)+0x393>
c00156e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ef:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156f8:	8d 50 02             	lea    edx,[eax+0x2]
c00156fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015701:	e9 58 02 00 00       	jmp    c001595e <opcodeFault(regs*, void*)+0x5ff>
c0015706:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015709:	8a 00                	mov    al,BYTE PTR [eax]
c001570b:	3c 0f                	cmp    al,0xf
c001570d:	0f 85 76 01 00 00    	jne    c0015889 <opcodeFault(regs*, void*)+0x52a>
c0015713:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015716:	40                   	inc    eax
c0015717:	8a 00                	mov    al,BYTE PTR [eax]
c0015719:	3c c7                	cmp    al,0xc7
c001571b:	0f 85 68 01 00 00    	jne    c0015889 <opcodeFault(regs*, void*)+0x52a>
c0015721:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015727:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001572a:	8d 50 01             	lea    edx,[eax+0x1]
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015733:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015736:	50                   	push   eax
c0015737:	8d 45 bb             	lea    eax,[ebp-0x45]
c001573a:	50                   	push   eax
c001573b:	8d 45 bc             	lea    eax,[ebp-0x44]
c001573e:	50                   	push   eax
c001573f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015742:	e8 ff 45 00 00       	call   c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015747:	83 c4 10             	add    esp,0x10
c001574a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001574d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015750:	83 f0 01             	xor    eax,0x1
c0015753:	84 c0                	test   al,al
c0015755:	0f 84 2e 01 00 00    	je     c0015889 <opcodeFault(regs*, void*)+0x52a>
c001575b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001575e:	3c 01                	cmp    al,0x1
c0015760:	0f 85 23 01 00 00    	jne    c0015889 <opcodeFault(regs*, void*)+0x52a>
c0015766:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015769:	83 f0 01             	xor    eax,0x1
c001576c:	84 c0                	test   al,al
c001576e:	0f 84 15 01 00 00    	je     c0015889 <opcodeFault(regs*, void*)+0x52a>
c0015774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015777:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001577a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001577d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015784:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015787:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001578a:	89 c2                	mov    edx,eax
c001578c:	b8 00 00 00 00       	mov    eax,0x0
c0015791:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015794:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001579d:	ba 00 00 00 00       	mov    edx,0x0
c00157a2:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00157a5:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00157a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157ae:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157b1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00157b8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157bb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157be:	89 c2                	mov    edx,eax
c00157c0:	b8 00 00 00 00       	mov    eax,0x0
c00157c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00157cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157d1:	ba 00 00 00 00       	mov    edx,0x0
c00157d6:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00157d9:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00157dc:	e8 79 86 00 00       	call   c001de5a <lockScheduler()>
c00157e1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e9:	89 c1                	mov    ecx,eax
c00157eb:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157ee:	89 cb                	mov    ebx,ecx
c00157f0:	89 d0                	mov    eax,edx
c00157f2:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157f5:	89 c6                	mov    esi,eax
c00157f7:	89 f0                	mov    eax,esi
c00157f9:	09 d8                	or     eax,ebx
c00157fb:	85 c0                	test   eax,eax
c00157fd:	75 21                	jne    c0015820 <opcodeFault(regs*, void*)+0x4c1>
c00157ff:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015802:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015805:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015808:	89 01                	mov    DWORD PTR [ecx],eax
c001580a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001580d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015810:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015813:	83 c8 40             	or     eax,0x40
c0015816:	89 c2                	mov    edx,eax
c0015818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001581e:	eb 3e                	jmp    c001585e <opcodeFault(regs*, void*)+0x4ff>
c0015820:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015823:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015826:	8b 00                	mov    eax,DWORD PTR [eax]
c0015828:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001582b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001582e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015834:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015837:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001583a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001583d:	89 d0                	mov    eax,edx
c001583f:	31 d2                	xor    edx,edx
c0015841:	89 c3                	mov    ebx,eax
c0015843:	89 d6                	mov    esi,edx
c0015845:	89 da                	mov    edx,ebx
c0015847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001584d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015850:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015853:	83 e0 bf             	and    eax,0xffffffbf
c0015856:	89 c2                	mov    edx,eax
c0015858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001585e:	e8 f9 85 00 00       	call   c001de5c <unlockScheduler()>
c0015863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015866:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015869:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001586c:	01 c2                	add    edx,eax
c001586e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015871:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	68 8a b1 02 c0       	push   0xc002b18a
c001587c:	e8 24 d6 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015881:	83 c4 10             	add    esp,0x10
c0015884:	e9 d5 00 00 00       	jmp    c001595e <opcodeFault(regs*, void*)+0x5ff>
c0015889:	83 ec 0c             	sub    esp,0xc
c001588c:	68 9d b1 02 c0       	push   0xc002b19d
c0015891:	e8 0f d6 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015896:	83 c4 10             	add    esp,0x10
c0015899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001589f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a5:	c1 e0 04             	shl    eax,0x4
c00158a8:	01 d0                	add    eax,edx
c00158aa:	83 c0 03             	add    eax,0x3
c00158ad:	8a 00                	mov    al,BYTE PTR [eax]
c00158af:	0f b6 d8             	movzx  ebx,al
c00158b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158be:	c1 e0 04             	shl    eax,0x4
c00158c1:	01 d0                	add    eax,edx
c00158c3:	83 c0 02             	add    eax,0x2
c00158c6:	8a 00                	mov    al,BYTE PTR [eax]
c00158c8:	0f b6 c8             	movzx  ecx,al
c00158cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ce:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158d7:	c1 e0 04             	shl    eax,0x4
c00158da:	01 d0                	add    eax,edx
c00158dc:	40                   	inc    eax
c00158dd:	8a 00                	mov    al,BYTE PTR [eax]
c00158df:	0f b6 d0             	movzx  edx,al
c00158e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e5:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158ee:	c1 e0 04             	shl    eax,0x4
c00158f1:	01 f0                	add    eax,esi
c00158f3:	8a 00                	mov    al,BYTE PTR [eax]
c00158f5:	0f b6 c0             	movzx  eax,al
c00158f8:	83 ec 0c             	sub    esp,0xc
c00158fb:	53                   	push   ebx
c00158fc:	51                   	push   ecx
c00158fd:	52                   	push   edx
c00158fe:	50                   	push   eax
c00158ff:	68 b0 b1 02 c0       	push   0xc002b1b0
c0015904:	e8 9c d5 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015909:	83 c4 20             	add    esp,0x20
c001590c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015912:	83 c0 03             	add    eax,0x3
c0015915:	8a 00                	mov    al,BYTE PTR [eax]
c0015917:	0f b6 d8             	movzx  ebx,al
c001591a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015920:	83 c0 02             	add    eax,0x2
c0015923:	8a 00                	mov    al,BYTE PTR [eax]
c0015925:	0f b6 c8             	movzx  ecx,al
c0015928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001592e:	40                   	inc    eax
c001592f:	8a 00                	mov    al,BYTE PTR [eax]
c0015931:	0f b6 d0             	movzx  edx,al
c0015934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015937:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001593a:	8a 00                	mov    al,BYTE PTR [eax]
c001593c:	0f b6 c0             	movzx  eax,al
c001593f:	83 ec 0c             	sub    esp,0xc
c0015942:	53                   	push   ebx
c0015943:	51                   	push   ecx
c0015944:	52                   	push   edx
c0015945:	50                   	push   eax
c0015946:	68 d8 b1 02 c0       	push   0xc002b1d8
c001594b:	e8 55 d5 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015950:	83 c4 20             	add    esp,0x20
c0015953:	83 ec 0c             	sub    esp,0xc
c0015956:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015959:	e8 be f3 ff ff       	call   c0014d1c <displayDebugInfo(regs*)>
c001595e:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015961:	5b                   	pop    ebx
c0015962:	5e                   	pop    esi
c0015963:	5d                   	pop    ebp
c0015964:	c3                   	ret    

c0015965 <displayProgramFault(char const*)>:
c0015965:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001596a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001596d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015973:	85 c0                	test   eax,eax
c0015975:	74 15                	je     c001598c <displayProgramFault(char const*)+0x27>
c0015977:	83 ec 0c             	sub    esp,0xc
c001597a:	6a 04                	push   0x4
c001597c:	6a 0f                	push   0xf
c001597e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015982:	50                   	push   eax
c0015983:	e8 56 b4 ff ff       	call   c0010dde <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015988:	83 c4 1c             	add    esp,0x1c
c001598b:	c3                   	ret    
c001598c:	c3                   	ret    

c001598d <setupInterruptController()>:
c001598d:	55                   	push   ebp
c001598e:	89 e5                	mov    ebp,esp
c0015990:	53                   	push   ebx
c0015991:	83 ec 24             	sub    esp,0x24
c0015994:	b8 00 00 00 00       	mov    eax,0x0
c0015999:	85 c0                	test   eax,eax
c001599b:	0f 95 c0             	setne  al
c001599e:	84 c0                	test   al,al
c00159a0:	74 5b                	je     c00159fd <setupInterruptController()+0x70>
c00159a2:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00159a9:	83 ec 0c             	sub    esp,0xc
c00159ac:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00159af:	e8 97 9e ff ff       	call   c000f84b <malloc>
c00159b4:	83 c4 10             	add    esp,0x10
c00159b7:	89 c3                	mov    ebx,eax
c00159b9:	83 ec 0c             	sub    esp,0xc
c00159bc:	53                   	push   ebx
c00159bd:	e8 2a 00 01 00       	call   c00259ec <APIC::APIC()>
c00159c2:	83 c4 10             	add    esp,0x10
c00159c5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00159c8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00159cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d0:	83 c0 08             	add    eax,0x8
c00159d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d5:	6a 00                	push   0x0
c00159d7:	6a 00                	push   0x0
c00159d9:	6a 00                	push   0x0
c00159db:	52                   	push   edx
c00159dc:	ff d0                	call   eax
c00159de:	83 c4 10             	add    esp,0x10
c00159e1:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00159e6:	83 ec 08             	sub    esp,0x8
c00159e9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159ec:	50                   	push   eax
c00159ed:	e8 da e8 ff ff       	call   c00142cc <Device::addChild(Device*)>
c00159f2:	83 c4 10             	add    esp,0x10
c00159f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159f8:	e9 89 03 00 00       	jmp    c0015d86 <setupInterruptController()+0x3f9>
c00159fd:	a0 00 0f 03 c0       	mov    al,ds:0xc0030f00
c0015a02:	84 c0                	test   al,al
c0015a04:	75 24                	jne    c0015a2a <setupInterruptController()+0x9d>
c0015a06:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015a0b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015a11:	83 e2 fe             	and    edx,0xfffffffe
c0015a14:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015a1a:	83 ec 0c             	sub    esp,0xc
c0015a1d:	68 fd b1 02 c0       	push   0xc002b1fd
c0015a22:	e8 7e d4 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015a2f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a35:	83 e0 01             	and    eax,0x1
c0015a38:	84 c0                	test   al,al
c0015a3a:	0f 95 c0             	setne  al
c0015a3d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a40:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a47:	83 ec 0c             	sub    esp,0xc
c0015a4a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a4d:	e8 f9 9d ff ff       	call   c000f84b <malloc>
c0015a52:	83 c4 10             	add    esp,0x10
c0015a55:	89 c3                	mov    ebx,eax
c0015a57:	83 ec 0c             	sub    esp,0xc
c0015a5a:	53                   	push   ebx
c0015a5b:	e8 e4 04 01 00       	call   c0025f44 <PIC::PIC()>
c0015a60:	83 c4 10             	add    esp,0x10
c0015a63:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a66:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6e:	83 c0 08             	add    eax,0x8
c0015a71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a73:	6a 00                	push   0x0
c0015a75:	6a 00                	push   0x0
c0015a77:	6a 00                	push   0x0
c0015a79:	52                   	push   edx
c0015a7a:	ff d0                	call   eax
c0015a7c:	83 c4 10             	add    esp,0x10
c0015a7f:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a83:	74 73                	je     c0015af8 <setupInterruptController()+0x16b>
c0015a85:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8d:	83 c0 0c             	add    eax,0xc
c0015a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a92:	6a 00                	push   0x0
c0015a94:	6a 00                	push   0x0
c0015a96:	6a 00                	push   0x0
c0015a98:	52                   	push   edx
c0015a99:	ff d0                	call   eax
c0015a9b:	83 c4 10             	add    esp,0x10
c0015a9e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015aa2:	74 15                	je     c0015ab9 <setupInterruptController()+0x12c>
c0015aa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa9:	83 c0 04             	add    eax,0x4
c0015aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aae:	83 ec 0c             	sub    esp,0xc
c0015ab1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab4:	ff d0                	call   eax
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015ac0:	83 ec 0c             	sub    esp,0xc
c0015ac3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015ac6:	e8 80 9d ff ff       	call   c000f84b <malloc>
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	89 c3                	mov    ebx,eax
c0015ad0:	83 ec 0c             	sub    esp,0xc
c0015ad3:	53                   	push   ebx
c0015ad4:	e8 13 ff 00 00       	call   c00259ec <APIC::APIC()>
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015adf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015ae2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae7:	83 c0 08             	add    eax,0x8
c0015aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aec:	6a 00                	push   0x0
c0015aee:	6a 00                	push   0x0
c0015af0:	6a 00                	push   0x0
c0015af2:	52                   	push   edx
c0015af3:	ff d0                	call   eax
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015afd:	83 ec 08             	sub    esp,0x8
c0015b00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b03:	50                   	push   eax
c0015b04:	e8 c3 e7 ff ff       	call   c00142cc <Device::addChild(Device*)>
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	c7 05 04 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e704,0x0
c0015b16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b19:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1b:	83 c0 24             	add    eax,0x24
c0015b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b20:	6a 00                	push   0x0
c0015b22:	68 40 53 01 c0       	push   0xc0015340
c0015b27:	6a 00                	push   0x0
c0015b29:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2c:	ff d0                	call   eax
c0015b2e:	83 c4 10             	add    esp,0x10
c0015b31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b36:	83 c0 24             	add    eax,0x24
c0015b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3b:	6a 00                	push   0x0
c0015b3d:	68 40 53 01 c0       	push   0xc0015340
c0015b42:	6a 01                	push   0x1
c0015b44:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b47:	ff d0                	call   eax
c0015b49:	83 c4 10             	add    esp,0x10
c0015b4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b51:	83 c0 24             	add    eax,0x24
c0015b54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b56:	6a 00                	push   0x0
c0015b58:	68 79 4b 01 c0       	push   0xc0014b79
c0015b5d:	6a 02                	push   0x2
c0015b5f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b62:	ff d0                	call   eax
c0015b64:	83 c4 10             	add    esp,0x10
c0015b67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6c:	83 c0 24             	add    eax,0x24
c0015b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b71:	6a 00                	push   0x0
c0015b73:	68 40 53 01 c0       	push   0xc0015340
c0015b78:	6a 03                	push   0x3
c0015b7a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7d:	ff d0                	call   eax
c0015b7f:	83 c4 10             	add    esp,0x10
c0015b82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b87:	83 c0 24             	add    eax,0x24
c0015b8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8c:	6a 00                	push   0x0
c0015b8e:	68 40 53 01 c0       	push   0xc0015340
c0015b93:	6a 04                	push   0x4
c0015b95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b98:	ff d0                	call   eax
c0015b9a:	83 c4 10             	add    esp,0x10
c0015b9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba2:	83 c0 24             	add    eax,0x24
c0015ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba7:	6a 00                	push   0x0
c0015ba9:	68 40 53 01 c0       	push   0xc0015340
c0015bae:	6a 05                	push   0x5
c0015bb0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb3:	ff d0                	call   eax
c0015bb5:	83 c4 10             	add    esp,0x10
c0015bb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbd:	83 c0 24             	add    eax,0x24
c0015bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc2:	6a 00                	push   0x0
c0015bc4:	68 5f 53 01 c0       	push   0xc001535f
c0015bc9:	6a 06                	push   0x6
c0015bcb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bce:	ff d0                	call   eax
c0015bd0:	83 c4 10             	add    esp,0x10
c0015bd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd8:	83 c0 24             	add    eax,0x24
c0015bdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdd:	6a 00                	push   0x0
c0015bdf:	68 ab 51 01 c0       	push   0xc00151ab
c0015be4:	6a 07                	push   0x7
c0015be6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be9:	ff d0                	call   eax
c0015beb:	83 c4 10             	add    esp,0x10
c0015bee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf3:	83 c0 24             	add    eax,0x24
c0015bf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf8:	6a 00                	push   0x0
c0015bfa:	68 94 49 01 c0       	push   0xc0014994
c0015bff:	6a 08                	push   0x8
c0015c01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c04:	ff d0                	call   eax
c0015c06:	83 c4 10             	add    esp,0x10
c0015c09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0e:	83 c0 24             	add    eax,0x24
c0015c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c13:	6a 00                	push   0x0
c0015c15:	68 40 53 01 c0       	push   0xc0015340
c0015c1a:	6a 09                	push   0x9
c0015c1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1f:	ff d0                	call   eax
c0015c21:	83 c4 10             	add    esp,0x10
c0015c24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c29:	83 c0 24             	add    eax,0x24
c0015c2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2e:	6a 00                	push   0x0
c0015c30:	68 40 53 01 c0       	push   0xc0015340
c0015c35:	6a 0a                	push   0xa
c0015c37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3a:	ff d0                	call   eax
c0015c3c:	83 c4 10             	add    esp,0x10
c0015c3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c44:	83 c0 24             	add    eax,0x24
c0015c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c49:	6a 00                	push   0x0
c0015c4b:	68 40 53 01 c0       	push   0xc0015340
c0015c50:	6a 0b                	push   0xb
c0015c52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c55:	ff d0                	call   eax
c0015c57:	83 c4 10             	add    esp,0x10
c0015c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5f:	83 c0 24             	add    eax,0x24
c0015c62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c64:	6a 00                	push   0x0
c0015c66:	68 40 53 01 c0       	push   0xc0015340
c0015c6b:	6a 0c                	push   0xc
c0015c6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c70:	ff d0                	call   eax
c0015c72:	83 c4 10             	add    esp,0x10
c0015c75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7a:	83 c0 24             	add    eax,0x24
c0015c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7f:	6a 00                	push   0x0
c0015c81:	68 cb 52 01 c0       	push   0xc00152cb
c0015c86:	6a 0d                	push   0xd
c0015c88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8b:	ff d0                	call   eax
c0015c8d:	83 c4 10             	add    esp,0x10
c0015c90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c95:	83 c0 24             	add    eax,0x24
c0015c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9a:	6a 00                	push   0x0
c0015c9c:	68 04 53 01 c0       	push   0xc0015304
c0015ca1:	6a 0e                	push   0xe
c0015ca3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca6:	ff d0                	call   eax
c0015ca8:	83 c4 10             	add    esp,0x10
c0015cab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb0:	83 c0 24             	add    eax,0x24
c0015cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb5:	6a 00                	push   0x0
c0015cb7:	68 40 53 01 c0       	push   0xc0015340
c0015cbc:	6a 0f                	push   0xf
c0015cbe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc1:	ff d0                	call   eax
c0015cc3:	83 c4 10             	add    esp,0x10
c0015cc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccb:	83 c0 24             	add    eax,0x24
c0015cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd0:	6a 00                	push   0x0
c0015cd2:	68 40 53 01 c0       	push   0xc0015340
c0015cd7:	6a 10                	push   0x10
c0015cd9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cdc:	ff d0                	call   eax
c0015cde:	83 c4 10             	add    esp,0x10
c0015ce1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce6:	83 c0 24             	add    eax,0x24
c0015ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ceb:	6a 00                	push   0x0
c0015ced:	68 40 53 01 c0       	push   0xc0015340
c0015cf2:	6a 11                	push   0x11
c0015cf4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf7:	ff d0                	call   eax
c0015cf9:	83 c4 10             	add    esp,0x10
c0015cfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d01:	83 c0 24             	add    eax,0x24
c0015d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d06:	6a 00                	push   0x0
c0015d08:	68 40 53 01 c0       	push   0xc0015340
c0015d0d:	6a 12                	push   0x12
c0015d0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d12:	ff d0                	call   eax
c0015d14:	83 c4 10             	add    esp,0x10
c0015d17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d1c:	83 c0 24             	add    eax,0x24
c0015d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d21:	6a 00                	push   0x0
c0015d23:	68 40 53 01 c0       	push   0xc0015340
c0015d28:	6a 13                	push   0x13
c0015d2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d2d:	ff d0                	call   eax
c0015d2f:	83 c4 10             	add    esp,0x10
c0015d32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d37:	83 c0 24             	add    eax,0x24
c0015d3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d3c:	6a 00                	push   0x0
c0015d3e:	68 40 53 01 c0       	push   0xc0015340
c0015d43:	6a 14                	push   0x14
c0015d45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d48:	ff d0                	call   eax
c0015d4a:	83 c4 10             	add    esp,0x10
c0015d4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d52:	83 c0 24             	add    eax,0x24
c0015d55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d57:	6a 00                	push   0x0
c0015d59:	68 40 53 01 c0       	push   0xc0015340
c0015d5e:	6a 1e                	push   0x1e
c0015d60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d63:	ff d0                	call   eax
c0015d65:	83 c4 10             	add    esp,0x10
c0015d68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d6d:	83 c0 24             	add    eax,0x24
c0015d70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d72:	6a 00                	push   0x0
c0015d74:	68 09 c8 01 c0       	push   0xc001c809
c0015d79:	6a 60                	push   0x60
c0015d7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d7e:	ff d0                	call   eax
c0015d80:	83 c4 10             	add    esp,0x10
c0015d83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d86:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d89:	c9                   	leave  
c0015d8a:	c3                   	ret    
c0015d8b:	90                   	nop

c0015d8c <InterruptController::convertLegacyIRQNumber(int)>:
c0015d8c:	55                   	push   ebp
c0015d8d:	89 e5                	mov    ebp,esp
c0015d8f:	83 ec 08             	sub    esp,0x8
c0015d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d95:	83 ec 0c             	sub    esp,0xc
c0015d98:	50                   	push   eax
c0015d99:	e8 1a e8 ff ff       	call   c00145b8 <Device::getName()>
c0015d9e:	83 c4 10             	add    esp,0x10
c0015da1:	8a 00                	mov    al,BYTE PTR [eax]
c0015da3:	3c 41                	cmp    al,0x41
c0015da5:	0f 94 c0             	sete   al
c0015da8:	84 c0                	test   al,al
c0015daa:	74 28                	je     c0015dd4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dac:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015db0:	7f 12                	jg     c0015dc4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015db2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015db5:	05 c0 d7 02 c0       	add    eax,0xc002d7c0
c0015dba:	8a 00                	mov    al,BYTE PTR [eax]
c0015dbc:	0f b6 c0             	movzx  eax,al
c0015dbf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015dc2:	eb 10                	jmp    c0015dd4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	68 80 ae 02 c0       	push   0xc002ae80
c0015dcc:	e8 ae 48 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0015dd1:	83 c4 10             	add    esp,0x10
c0015dd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dd7:	c9                   	leave  
c0015dd8:	c3                   	ret    
c0015dd9:	90                   	nop

c0015dda <startGUI(void*)>:
c0015dda:	55                   	push   ebp
c0015ddb:	89 e5                	mov    ebp,esp
c0015ddd:	53                   	push   ebx
c0015dde:	83 ec 04             	sub    esp,0x4
c0015de1:	e8 76 80 00 00       	call   c001de5c <unlockScheduler()>
c0015de6:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0015dec:	83 ec 08             	sub    esp,0x8
c0015def:	6a 01                	push   0x1
c0015df1:	68 60 b2 02 c0       	push   0xc002b260
c0015df6:	e8 b7 79 00 00       	call   c001d7b2 <Thr::loadDLL(char const*, bool)>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	83 ec 08             	sub    esp,0x8
c0015e01:	53                   	push   ebx
c0015e02:	50                   	push   eax
c0015e03:	e8 de 7b 00 00       	call   c001d9e6 <Thr::executeDLL(unsigned long, void*)>
c0015e08:	83 c4 10             	add    esp,0x10
c0015e0b:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0015e11:	83 ec 08             	sub    esp,0x8
c0015e14:	6a 01                	push   0x1
c0015e16:	68 7a b2 02 c0       	push   0xc002b27a
c0015e1b:	e8 92 79 00 00       	call   c001d7b2 <Thr::loadDLL(char const*, bool)>
c0015e20:	83 c4 10             	add    esp,0x10
c0015e23:	83 ec 08             	sub    esp,0x8
c0015e26:	53                   	push   ebx
c0015e27:	50                   	push   eax
c0015e28:	e8 b9 7b 00 00       	call   c001d9e6 <Thr::executeDLL(unsigned long, void*)>
c0015e2d:	83 c4 10             	add    esp,0x10
c0015e30:	90                   	nop
c0015e31:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e34:	c9                   	leave  
c0015e35:	c3                   	ret    

c0015e36 <startGUIVESA(void*)>:
c0015e36:	55                   	push   ebp
c0015e37:	89 e5                	mov    ebp,esp
c0015e39:	53                   	push   ebx
c0015e3a:	83 ec 04             	sub    esp,0x4
c0015e3d:	e8 1a 80 00 00       	call   c001de5c <unlockScheduler()>
c0015e42:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0015e48:	83 ec 08             	sub    esp,0x8
c0015e4b:	6a 01                	push   0x1
c0015e4d:	68 94 b2 02 c0       	push   0xc002b294
c0015e52:	e8 5b 79 00 00       	call   c001d7b2 <Thr::loadDLL(char const*, bool)>
c0015e57:	83 c4 10             	add    esp,0x10
c0015e5a:	83 ec 08             	sub    esp,0x8
c0015e5d:	53                   	push   ebx
c0015e5e:	50                   	push   eax
c0015e5f:	e8 82 7b 00 00       	call   c001d9e6 <Thr::executeDLL(unsigned long, void*)>
c0015e64:	83 c4 10             	add    esp,0x10
c0015e67:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0015e6d:	83 ec 08             	sub    esp,0x8
c0015e70:	6a 01                	push   0x1
c0015e72:	68 7a b2 02 c0       	push   0xc002b27a
c0015e77:	e8 36 79 00 00       	call   c001d7b2 <Thr::loadDLL(char const*, bool)>
c0015e7c:	83 c4 10             	add    esp,0x10
c0015e7f:	83 ec 08             	sub    esp,0x8
c0015e82:	53                   	push   ebx
c0015e83:	50                   	push   eax
c0015e84:	e8 5d 7b 00 00       	call   c001d9e6 <Thr::executeDLL(unsigned long, void*)>
c0015e89:	83 c4 10             	add    esp,0x10
c0015e8c:	90                   	nop
c0015e8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e90:	c9                   	leave  
c0015e91:	c3                   	ret    

c0015e92 <sendKeyToTerminal(unsigned char)>:
c0015e92:	55                   	push   ebp
c0015e93:	89 e5                	mov    ebp,esp
c0015e95:	83 ec 28             	sub    esp,0x28
c0015e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e9e:	a1 44 e6 02 c0       	mov    eax,ds:0xc002e644
c0015ea3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ea7:	83 ec 08             	sub    esp,0x8
c0015eaa:	52                   	push   edx
c0015eab:	50                   	push   eax
c0015eac:	e8 69 b4 ff ff       	call   c001131a <VgaText::receiveKey(unsigned char)>
c0015eb1:	83 c4 10             	add    esp,0x10
c0015eb4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015eb8:	75 41                	jne    c0015efb <sendKeyToTerminal(unsigned char)+0x69>
c0015eba:	e8 c2 7f 00 00       	call   c001de81 <lockStuff()>
c0015ebf:	a1 20 e7 02 c0       	mov    eax,ds:0xc002e720
c0015ec4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ec7:	c7 05 20 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e720,0x0
c0015ed1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ed5:	74 1f                	je     c0015ef6 <sendKeyToTerminal(unsigned char)+0x64>
c0015ed7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015eda:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015edd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ee0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ee3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ee6:	83 ec 0c             	sub    esp,0xc
c0015ee9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015eec:	e8 bb 85 00 00       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c0015ef1:	83 c4 10             	add    esp,0x10
c0015ef4:	eb db                	jmp    c0015ed1 <sendKeyToTerminal(unsigned char)+0x3f>
c0015ef6:	e8 5a 83 00 00       	call   c001e255 <unlockStuff()>
c0015efb:	90                   	nop
c0015efc:	c9                   	leave  
c0015efd:	c3                   	ret    

c0015efe <sendKeyboardToken(KeyboardToken)>:
c0015efe:	55                   	push   ebp
c0015eff:	89 e5                	mov    ebp,esp
c0015f01:	83 ec 18             	sub    esp,0x18
c0015f04:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0a:	0f b7 c0             	movzx  eax,ax
c0015f0d:	83 f2 01             	xor    edx,0x1
c0015f10:	88 90 40 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd18c0],dl
c0015f16:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0015f1b:	85 c0                	test   eax,eax
c0015f1d:	74 24                	je     c0015f43 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f1f:	8b 0d 28 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e728
c0015f25:	83 ec 04             	sub    esp,0x4
c0015f28:	68 40 e7 02 c0       	push   0xc002e740
c0015f2d:	83 ec 08             	sub    esp,0x8
c0015f30:	89 e2                	mov    edx,esp
c0015f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f35:	89 02                	mov    DWORD PTR [edx],eax
c0015f37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f3a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f3e:	ff d1                	call   ecx
c0015f40:	83 c4 10             	add    esp,0x10
c0015f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f46:	66 3d 03 02          	cmp    ax,0x203
c0015f4a:	75 07                	jne    c0015f53 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f4c:	a0 40 e8 02 c0       	mov    al,ds:0xc002e840
c0015f51:	84 c0                	test   al,al
c0015f53:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f57:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f5a:	a0 48 eb 02 c0       	mov    al,ds:0xc002eb48
c0015f5f:	38 c2                	cmp    dl,al
c0015f61:	74 1c                	je     c0015f7f <sendKeyboardToken(KeyboardToken)+0x81>
c0015f63:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f66:	a2 48 eb 02 c0       	mov    ds:0xc002eb48,al
c0015f6b:	a0 48 eb 02 c0       	mov    al,ds:0xc002eb48
c0015f70:	0f b6 c0             	movzx  eax,al
c0015f73:	83 ec 0c             	sub    esp,0xc
c0015f76:	50                   	push   eax
c0015f77:	e8 fe a5 ff ff       	call   c001057a <setTerminalScrollLock(bool)>
c0015f7c:	83 c4 10             	add    esp,0x10
c0015f7f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f82:	84 c0                	test   al,al
c0015f84:	0f 84 ae 00 00 00    	je     c0016038 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8d:	66 3d 10 03          	cmp    ax,0x310
c0015f91:	75 06                	jne    c0015f99 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f93:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9c:	66 3d 11 03          	cmp    ax,0x311
c0015fa0:	75 06                	jne    c0015fa8 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fa2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fab:	66 3d 12 03          	cmp    ax,0x312
c0015faf:	75 06                	jne    c0015fb7 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fb1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fba:	66 3d 13 03          	cmp    ax,0x313
c0015fbe:	75 06                	jne    c0015fc6 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fc0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc9:	66 3d 14 03          	cmp    ax,0x314
c0015fcd:	75 06                	jne    c0015fd5 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015fcf:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd8:	66 3d 15 03          	cmp    ax,0x315
c0015fdc:	75 06                	jne    c0015fe4 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fde:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe7:	66 3d 16 03          	cmp    ax,0x316
c0015feb:	75 06                	jne    c0015ff3 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fed:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff6:	66 3d 17 03          	cmp    ax,0x317
c0015ffa:	75 06                	jne    c0016002 <sendKeyboardToken(KeyboardToken)+0x104>
c0015ffc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016005:	66 3d 18 03          	cmp    ax,0x318
c0016009:	75 06                	jne    c0016011 <sendKeyboardToken(KeyboardToken)+0x113>
c001600b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016014:	66 3d 19 03          	cmp    ax,0x319
c0016018:	75 06                	jne    c0016020 <sendKeyboardToken(KeyboardToken)+0x122>
c001601a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016023:	66 3d 1a 03          	cmp    ax,0x31a
c0016027:	0f 85 c9 00 00 00    	jne    c00160f6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001602d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016033:	e9 be 00 00 00       	jmp    c00160f6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603b:	66 3d 10 03          	cmp    ax,0x310
c001603f:	75 0a                	jne    c001604b <sendKeyboardToken(KeyboardToken)+0x14d>
c0016041:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016047:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604e:	66 3d 11 03          	cmp    ax,0x311
c0016052:	75 0a                	jne    c001605e <sendKeyboardToken(KeyboardToken)+0x160>
c0016054:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001605a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016061:	66 3d 12 03          	cmp    ax,0x312
c0016065:	75 0a                	jne    c0016071 <sendKeyboardToken(KeyboardToken)+0x173>
c0016067:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001606d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016074:	66 3d 13 03          	cmp    ax,0x313
c0016078:	75 0a                	jne    c0016084 <sendKeyboardToken(KeyboardToken)+0x186>
c001607a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016080:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016087:	66 3d 14 03          	cmp    ax,0x314
c001608b:	75 0a                	jne    c0016097 <sendKeyboardToken(KeyboardToken)+0x199>
c001608d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016093:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609a:	66 3d 15 03          	cmp    ax,0x315
c001609e:	75 0a                	jne    c00160aa <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160a0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ad:	66 3d 16 03          	cmp    ax,0x316
c00160b1:	75 0a                	jne    c00160bd <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160b3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c0:	66 3d 17 03          	cmp    ax,0x317
c00160c4:	75 0a                	jne    c00160d0 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160c6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d3:	66 3d 18 03          	cmp    ax,0x318
c00160d7:	75 0a                	jne    c00160e3 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160d9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e6:	66 3d 19 03          	cmp    ax,0x319
c00160ea:	75 0a                	jne    c00160f6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160ec:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f9:	66 3d 00 02          	cmp    ax,0x200
c00160fd:	75 2c                	jne    c001612b <sendKeyboardToken(KeyboardToken)+0x22d>
c00160ff:	a0 40 eb 02 c0       	mov    al,ds:0xc002eb40
c0016104:	83 f0 01             	xor    eax,0x1
c0016107:	84 c0                	test   al,al
c0016109:	74 20                	je     c001612b <sendKeyboardToken(KeyboardToken)+0x22d>
c001610b:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0016110:	6a 01                	push   0x1
c0016112:	6a 00                	push   0x0
c0016114:	68 da 5d 01 c0       	push   0xc0015dda
c0016119:	50                   	push   eax
c001611a:	e8 6d 7e 00 00       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c001611f:	83 c4 10             	add    esp,0x10
c0016122:	c6 05 40 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb40,0x1
c0016129:	eb 33                	jmp    c001615e <sendKeyboardToken(KeyboardToken)+0x260>
c001612b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612e:	66 3d 01 02          	cmp    ax,0x201
c0016132:	75 2a                	jne    c001615e <sendKeyboardToken(KeyboardToken)+0x260>
c0016134:	a0 40 eb 02 c0       	mov    al,ds:0xc002eb40
c0016139:	83 f0 01             	xor    eax,0x1
c001613c:	84 c0                	test   al,al
c001613e:	74 1e                	je     c001615e <sendKeyboardToken(KeyboardToken)+0x260>
c0016140:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0016145:	6a 01                	push   0x1
c0016147:	6a 00                	push   0x0
c0016149:	68 36 5e 01 c0       	push   0xc0015e36
c001614e:	50                   	push   eax
c001614f:	e8 38 7e 00 00       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c0016154:	83 c4 10             	add    esp,0x10
c0016157:	c6 05 40 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb40,0x1
c001615e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016161:	66 3d 1d 03          	cmp    ax,0x31d
c0016165:	75 06                	jne    c001616d <sendKeyboardToken(KeyboardToken)+0x26f>
c0016167:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001616d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016170:	66 3d 1c 03          	cmp    ax,0x31c
c0016174:	75 06                	jne    c001617c <sendKeyboardToken(KeyboardToken)+0x27e>
c0016176:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001617c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617f:	66 3d 1b 03          	cmp    ax,0x31b
c0016183:	75 06                	jne    c001618b <sendKeyboardToken(KeyboardToken)+0x28d>
c0016185:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001618b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618e:	66 3d 1e 03          	cmp    ax,0x31e
c0016192:	75 06                	jne    c001619a <sendKeyboardToken(KeyboardToken)+0x29c>
c0016194:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001619a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619d:	66 3d 1f 03          	cmp    ax,0x31f
c00161a1:	75 06                	jne    c00161a9 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161a3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ac:	66 3d 1a 03          	cmp    ax,0x31a
c00161b0:	75 06                	jne    c00161b8 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161b2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161b8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161bf:	83 f0 01             	xor    eax,0x1
c00161c2:	84 c0                	test   al,al
c00161c4:	74 77                	je     c001623d <sendKeyboardToken(KeyboardToken)+0x33f>
c00161c6:	a0 41 e8 02 c0       	mov    al,ds:0xc002e841
c00161cb:	84 c0                	test   al,al
c00161cd:	74 41                	je     c0016210 <sendKeyboardToken(KeyboardToken)+0x312>
c00161cf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161d3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161d7:	74 2b                	je     c0016204 <sendKeyboardToken(KeyboardToken)+0x306>
c00161d9:	8b 15 44 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb44
c00161df:	89 d0                	mov    eax,edx
c00161e1:	c1 e0 02             	shl    eax,0x2
c00161e4:	01 d0                	add    eax,edx
c00161e6:	01 c0                	add    eax,eax
c00161e8:	a3 44 eb 02 c0       	mov    ds:0xc002eb44,eax
c00161ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f0:	0f b7 c0             	movzx  eax,ax
c00161f3:	8d 50 d0             	lea    edx,[eax-0x30]
c00161f6:	a1 44 eb 02 c0       	mov    eax,ds:0xc002eb44
c00161fb:	01 d0                	add    eax,edx
c00161fd:	a3 44 eb 02 c0       	mov    ds:0xc002eb44,eax
c0016202:	eb 6d                	jmp    c0016271 <sendKeyboardToken(KeyboardToken)+0x373>
c0016204:	c7 05 44 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x0
c001620e:	eb 61                	jmp    c0016271 <sendKeyboardToken(KeyboardToken)+0x373>
c0016210:	a1 44 eb 02 c0       	mov    eax,ds:0xc002eb44
c0016215:	85 c0                	test   eax,eax
c0016217:	74 18                	je     c0016231 <sendKeyboardToken(KeyboardToken)+0x333>
c0016219:	a1 44 eb 02 c0       	mov    eax,ds:0xc002eb44
c001621e:	0f b6 c0             	movzx  eax,al
c0016221:	83 ec 0c             	sub    esp,0xc
c0016224:	50                   	push   eax
c0016225:	e8 68 fc ff ff       	call   c0015e92 <sendKeyToTerminal(unsigned char)>
c001622a:	83 c4 10             	add    esp,0x10
c001622d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016231:	c7 05 44 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x0
c001623b:	eb 34                	jmp    c0016271 <sendKeyboardToken(KeyboardToken)+0x373>
c001623d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016240:	66 3d 01 01          	cmp    ax,0x101
c0016244:	75 2b                	jne    c0016271 <sendKeyboardToken(KeyboardToken)+0x373>
c0016246:	a1 44 eb 02 c0       	mov    eax,ds:0xc002eb44
c001624b:	85 c0                	test   eax,eax
c001624d:	74 18                	je     c0016267 <sendKeyboardToken(KeyboardToken)+0x369>
c001624f:	a1 44 eb 02 c0       	mov    eax,ds:0xc002eb44
c0016254:	0f b6 c0             	movzx  eax,al
c0016257:	83 ec 0c             	sub    esp,0xc
c001625a:	50                   	push   eax
c001625b:	e8 32 fc ff ff       	call   c0015e92 <sendKeyToTerminal(unsigned char)>
c0016260:	83 c4 10             	add    esp,0x10
c0016263:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016267:	c7 05 44 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb44,0x0
c0016271:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016274:	83 f0 01             	xor    eax,0x1
c0016277:	84 c0                	test   al,al
c0016279:	74 4c                	je     c00162c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001627b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001627e:	83 f0 01             	xor    eax,0x1
c0016281:	84 c0                	test   al,al
c0016283:	74 42                	je     c00162c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016285:	a0 40 e8 02 c0       	mov    al,ds:0xc002e840
c001628a:	83 f0 01             	xor    eax,0x1
c001628d:	84 c0                	test   al,al
c001628f:	74 36                	je     c00162c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016294:	66 83 f8 1f          	cmp    ax,0x1f
c0016298:	76 09                	jbe    c00162a3 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001629a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629d:	66 83 f8 7e          	cmp    ax,0x7e
c00162a1:	76 12                	jbe    c00162b5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a6:	66 83 f8 0a          	cmp    ax,0xa
c00162aa:	74 09                	je     c00162b5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162af:	66 83 f8 08          	cmp    ax,0x8
c00162b3:	75 12                	jne    c00162c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b8:	0f b6 c0             	movzx  eax,al
c00162bb:	83 ec 0c             	sub    esp,0xc
c00162be:	50                   	push   eax
c00162bf:	e8 ce fb ff ff       	call   c0015e92 <sendKeyToTerminal(unsigned char)>
c00162c4:	83 c4 10             	add    esp,0x10
c00162c7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162ca:	83 f0 01             	xor    eax,0x1
c00162cd:	84 c0                	test   al,al
c00162cf:	74 4f                	je     c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162d4:	83 f0 01             	xor    eax,0x1
c00162d7:	84 c0                	test   al,al
c00162d9:	74 45                	je     c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162db:	a0 40 e8 02 c0       	mov    al,ds:0xc002e840
c00162e0:	84 c0                	test   al,al
c00162e2:	74 3c                	je     c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e7:	66 83 f8 3f          	cmp    ax,0x3f
c00162eb:	76 33                	jbe    c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f0:	66 83 f8 7f          	cmp    ax,0x7f
c00162f4:	77 2a                	ja     c0016320 <sendKeyboardToken(KeyboardToken)+0x422>
c00162f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f9:	88 c2                	mov    dl,al
c00162fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fe:	66 83 f8 5f          	cmp    ax,0x5f
c0016302:	76 04                	jbe    c0016308 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016304:	b0 20                	mov    al,0x20
c0016306:	eb 02                	jmp    c001630a <sendKeyboardToken(KeyboardToken)+0x40c>
c0016308:	b0 00                	mov    al,0x0
c001630a:	29 c2                	sub    edx,eax
c001630c:	88 d0                	mov    al,dl
c001630e:	83 e8 40             	sub    eax,0x40
c0016311:	0f b6 c0             	movzx  eax,al
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	50                   	push   eax
c0016318:	e8 75 fb ff ff       	call   c0015e92 <sendKeyToTerminal(unsigned char)>
c001631d:	83 c4 10             	add    esp,0x10
c0016320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016323:	66 3d 00 03          	cmp    ax,0x300
c0016327:	75 0f                	jne    c0016338 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016329:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001632c:	83 f0 01             	xor    eax,0x1
c001632f:	84 c0                	test   al,al
c0016331:	74 05                	je     c0016338 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016333:	e8 77 aa ff ff       	call   c0010daf <doTerminalCycle()>
c0016338:	90                   	nop
c0016339:	c9                   	leave  
c001633a:	c3                   	ret    

c001633b <clearInternalKeybuffer(VgaText*)>:
c001633b:	55                   	push   ebp
c001633c:	89 e5                	mov    ebp,esp
c001633e:	83 ec 08             	sub    esp,0x8
c0016341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016344:	05 34 11 00 00       	add    eax,0x1134
c0016349:	83 ec 0c             	sub    esp,0xc
c001634c:	50                   	push   eax
c001634d:	e8 4a a4 fe ff       	call   c000079c <strlen>
c0016352:	83 c4 10             	add    esp,0x10
c0016355:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016358:	81 c2 34 11 00 00    	add    edx,0x1134
c001635e:	83 ec 04             	sub    esp,0x4
c0016361:	50                   	push   eax
c0016362:	6a 00                	push   0x0
c0016364:	52                   	push   edx
c0016365:	e8 16 a4 fe ff       	call   c0000780 <memset>
c001636a:	83 c4 10             	add    esp,0x10
c001636d:	90                   	nop
c001636e:	c9                   	leave  
c001636f:	c3                   	ret    

c0016370 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016370:	55                   	push   ebp
c0016371:	89 e5                	mov    ebp,esp
c0016373:	83 ec 18             	sub    esp,0x18
c0016376:	fb                   	sti    
c0016377:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001637e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016382:	0f 84 8a 00 00 00    	je     c0016412 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001638b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016391:	84 c0                	test   al,al
c0016393:	75 11                	jne    c00163a6 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016395:	e8 c0 7a 00 00       	call   c001de5a <lockScheduler()>
c001639a:	e8 31 7e 00 00       	call   c001e1d0 <schedule()>
c001639f:	e8 b8 7a 00 00       	call   c001de5c <unlockScheduler()>
c00163a4:	eb e2                	jmp    c0016388 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00163a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163a9:	8d 50 01             	lea    edx,[eax+0x1]
c00163ac:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163b2:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00163b8:	88 10                	mov    BYTE PTR [eax],dl
c00163ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163bd:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163c3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163c9:	05 34 11 00 00       	add    eax,0x1134
c00163ce:	83 ec 0c             	sub    esp,0xc
c00163d1:	50                   	push   eax
c00163d2:	e8 c5 a3 fe ff       	call   c000079c <strlen>
c00163d7:	83 c4 10             	add    esp,0x10
c00163da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163dd:	81 c2 34 11 00 00    	add    edx,0x1134
c00163e3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163e6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163e9:	81 c2 34 11 00 00    	add    edx,0x1134
c00163ef:	83 ec 04             	sub    esp,0x4
c00163f2:	50                   	push   eax
c00163f3:	51                   	push   ecx
c00163f4:	52                   	push   edx
c00163f5:	e8 8a a2 fe ff       	call   c0000684 <memmove>
c00163fa:	83 c4 10             	add    esp,0x10
c00163fd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016400:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016403:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016407:	0f 85 71 ff ff ff    	jne    c001637e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001640d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016410:	eb 03                	jmp    c0016415 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016415:	c9                   	leave  
c0016416:	c3                   	ret    
c0016417:	90                   	nop

c0016418 <Keyboard::Keyboard(char const*)>:
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641f:	83 ec 08             	sub    esp,0x8
c0016422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016426:	50                   	push   eax
c0016427:	e8 90 e0 ff ff       	call   c00144bc <Device::Device(char const*)>
c001642c:	83 c4 10             	add    esp,0x10
c001642f:	ba b8 b2 02 c0       	mov    edx,0xc002b2b8
c0016434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016438:	89 10                	mov    DWORD PTR [eax],edx
c001643a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016448:	c6 05 24 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e724,0x1
c001644f:	90                   	nop
c0016450:	83 c4 0c             	add    esp,0xc
c0016453:	c3                   	ret    

c0016454 <Keyboard::~Keyboard()>:
c0016454:	83 ec 0c             	sub    esp,0xc
c0016457:	ba b8 b2 02 c0       	mov    edx,0xc002b2b8
c001645c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016460:	89 10                	mov    DWORD PTR [eax],edx
c0016462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016466:	83 ec 0c             	sub    esp,0xc
c0016469:	50                   	push   eax
c001646a:	e8 2f dd ff ff       	call   c001419e <Device::~Device()>
c001646f:	83 c4 10             	add    esp,0x10
c0016472:	90                   	nop
c0016473:	83 c4 0c             	add    esp,0xc
c0016476:	c3                   	ret    
c0016477:	90                   	nop

c0016478 <Keyboard::~Keyboard()>:
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	83 ec 0c             	sub    esp,0xc
c001647e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016482:	e8 cd ff ff ff       	call   c0016454 <Keyboard::~Keyboard()>
c0016487:	83 c4 10             	add    esp,0x10
c001648a:	83 ec 08             	sub    esp,0x8
c001648d:	68 5c 01 00 00       	push   0x15c
c0016492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016496:	e8 2a c9 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	83 c4 0c             	add    esp,0xc
c00164a1:	c3                   	ret    

c00164a2 <LogicalDisk::close(int, int, void*)>:
c00164a2:	83 c8 ff             	or     eax,0xffffffff
c00164a5:	c3                   	ret    

c00164a6 <LogicalDisk::~LogicalDisk()>:
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c00164ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b2:	89 10                	mov    DWORD PTR [eax],edx
c00164b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	50                   	push   eax
c00164bc:	e8 dd dc ff ff       	call   c001419e <Device::~Device()>
c00164c1:	83 c4 10             	add    esp,0x10
c00164c4:	90                   	nop
c00164c5:	83 c4 0c             	add    esp,0xc
c00164c8:	c3                   	ret    
c00164c9:	90                   	nop

c00164ca <LogicalDisk::~LogicalDisk()>:
c00164ca:	83 ec 0c             	sub    esp,0xc
c00164cd:	83 ec 0c             	sub    esp,0xc
c00164d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d4:	e8 cd ff ff ff       	call   c00164a6 <LogicalDisk::~LogicalDisk()>
c00164d9:	83 c4 10             	add    esp,0x10
c00164dc:	83 ec 08             	sub    esp,0x8
c00164df:	68 74 01 00 00       	push   0x174
c00164e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e8:	e8 d8 c8 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00164ed:	83 c4 10             	add    esp,0x10
c00164f0:	83 c4 0c             	add    esp,0xc
c00164f3:	c3                   	ret    

c00164f4 <LogicalDisk::open(int, int, void*)>:
c00164f4:	83 ec 18             	sub    esp,0x18
c00164f7:	68 e4 b2 02 c0       	push   0xc002b2e4
c00164fc:	e8 7e 41 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0016501:	83 c8 ff             	or     eax,0xffffffff
c0016504:	83 c4 1c             	add    esp,0x1c
c0016507:	c3                   	ret    

c0016508 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016508:	53                   	push   ebx
c0016509:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001650d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016511:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016515:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001651b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016521:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016527:	77 10                	ja     c0016539 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016529:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001652f:	89 d3                	mov    ebx,edx
c0016531:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016537:	72 05                	jb     c001653e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016539:	83 c8 ff             	or     eax,0xffffffff
c001653c:	89 c2                	mov    edx,eax
c001653e:	5b                   	pop    ebx
c001653f:	c3                   	ret    

c0016540 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016540:	56                   	push   esi
c0016541:	83 c8 ff             	or     eax,0xffffffff
c0016544:	53                   	push   ebx
c0016545:	89 c2                	mov    edx,eax
c0016547:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001654b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001654f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016553:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016559:	77 27                	ja     c0016582 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001655b:	89 d8                	mov    eax,ebx
c001655d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016563:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016569:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001656e:	89 c2                	mov    edx,eax
c0016570:	73 10                	jae    c0016582 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016572:	89 c8                	mov    eax,ecx
c0016574:	89 da                	mov    edx,ebx
c0016576:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001657c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016582:	5b                   	pop    ebx
c0016583:	5e                   	pop    esi
c0016584:	c3                   	ret    
c0016585:	90                   	nop

c0016586 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016586:	83 ec 1c             	sub    esp,0x1c
c0016589:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001658d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016595:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016599:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001659d:	89 04 24             	mov    DWORD PTR [esp],eax
c00165a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ac:	83 ec 08             	sub    esp,0x8
c00165af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165b3:	50                   	push   eax
c00165b4:	e8 03 df ff ff       	call   c00144bc <Device::Device(char const*)>
c00165b9:	83 c4 10             	add    esp,0x10
c00165bc:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c00165c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c5:	89 10                	mov    DWORD PTR [eax],edx
c00165c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165cb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165eb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165f7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165fd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016603:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016607:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001660a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001660e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016614:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001661a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016622:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001662c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016636:	90                   	nop
c0016637:	83 c4 1c             	add    esp,0x1c
c001663a:	c3                   	ret    
c001663b:	90                   	nop

c001663c <LogicalDisk::assignDriveLetter()>:
c001663c:	55                   	push   ebp
c001663d:	57                   	push   edi
c001663e:	56                   	push   esi
c001663f:	53                   	push   ebx
c0016640:	83 ec 14             	sub    esp,0x14
c0016643:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016647:	8b 3d 60 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb60
c001664d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016653:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016657:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001665d:	8b 3d 64 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb64
c0016663:	3c 01                	cmp    al,0x1
c0016665:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016669:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001666d:	19 c0                	sbb    eax,eax
c001666f:	83 e0 02             	and    eax,0x2
c0016672:	83 c0 41             	add    eax,0x41
c0016675:	0f be e8             	movsx  ebp,al
c0016678:	3c 43                	cmp    al,0x43
c001667a:	75 10                	jne    c001668c <LogicalDisk::assignDriveLetter()+0x50>
c001667c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016683:	75 5d                	jne    c00166e2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016685:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001668a:	75 56                	jne    c00166e2 <LogicalDisk::assignDriveLetter()+0xa6>
c001668c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001668f:	ba 01 00 00 00       	mov    edx,0x1
c0016694:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016698:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001669c:	d3 e2                	shl    edx,cl
c001669e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166a2:	89 d7                	mov    edi,edx
c00166a4:	89 d6                	mov    esi,edx
c00166a6:	c1 ff 1f             	sar    edi,0x1f
c00166a9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166ad:	21 f9                	and    ecx,edi
c00166af:	09 d1                	or     ecx,edx
c00166b1:	75 2f                	jne    c00166e2 <LogicalDisk::assignDriveLetter()+0xa6>
c00166b3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166bb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166c1:	09 f2                	or     edx,esi
c00166c3:	89 15 60 eb 02 c0    	mov    DWORD PTR ds:0xc002eb60,edx
c00166c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166cd:	09 fa                	or     edx,edi
c00166cf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166d3:	89 15 64 eb 02 c0    	mov    DWORD PTR ds:0xc002eb64,edx
c00166d9:	89 1c bd 80 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1480],ebx
c00166e0:	eb 08                	jmp    c00166ea <LogicalDisk::assignDriveLetter()+0xae>
c00166e2:	45                   	inc    ebp
c00166e3:	40                   	inc    eax
c00166e4:	3c 5b                	cmp    al,0x5b
c00166e6:	75 90                	jne    c0016678 <LogicalDisk::assignDriveLetter()+0x3c>
c00166e8:	31 c0                	xor    eax,eax
c00166ea:	83 c4 14             	add    esp,0x14
c00166ed:	5b                   	pop    ebx
c00166ee:	5e                   	pop    esi
c00166ef:	5f                   	pop    edi
c00166f0:	5d                   	pop    ebp
c00166f1:	c3                   	ret    

c00166f2 <LogicalDisk::mount()>:
c00166f2:	56                   	push   esi
c00166f3:	53                   	push   ebx
c00166f4:	51                   	push   ecx
c00166f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166f9:	8b 1d f0 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6f0
c00166ff:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016709:	85 db                	test   ebx,ebx
c001670b:	74 50                	je     c001675d <LogicalDisk::mount()+0x6b>
c001670d:	e8 33 77 00 00       	call   c001de45 <getIRQNestingLevel()>
c0016712:	52                   	push   edx
c0016713:	52                   	push   edx
c0016714:	50                   	push   eax
c0016715:	68 08 b3 02 c0       	push   0xc002b308
c001671a:	e8 86 c7 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001671f:	83 c4 0c             	add    esp,0xc
c0016722:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016729:	8b 13                	mov    edx,DWORD PTR [ebx]
c001672b:	83 e8 41             	sub    eax,0x41
c001672e:	50                   	push   eax
c001672f:	56                   	push   esi
c0016730:	53                   	push   ebx
c0016731:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016734:	83 c4 10             	add    esp,0x10
c0016737:	84 c0                	test   al,al
c0016739:	74 08                	je     c0016743 <LogicalDisk::mount()+0x51>
c001673b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016741:	eb 1c                	jmp    c001675f <LogicalDisk::mount()+0x6d>
c0016743:	e8 fd 76 00 00       	call   c001de45 <getIRQNestingLevel()>
c0016748:	51                   	push   ecx
c0016749:	51                   	push   ecx
c001674a:	50                   	push   eax
c001674b:	68 23 b3 02 c0       	push   0xc002b323
c0016750:	e8 50 c7 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0016755:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016758:	83 c4 10             	add    esp,0x10
c001675b:	eb ac                	jmp    c0016709 <LogicalDisk::mount()+0x17>
c001675d:	31 c0                	xor    eax,eax
c001675f:	5a                   	pop    edx
c0016760:	5b                   	pop    ebx
c0016761:	5e                   	pop    esi
c0016762:	c3                   	ret    
c0016763:	90                   	nop

c0016764 <LogicalDisk::unmount()>:
c0016764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016768:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016772:	c3                   	ret    
c0016773:	90                   	nop

c0016774 <LogicalDisk::eject()>:
c0016774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016778:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001677e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016780:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016784:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016787:	90                   	nop

c0016788 <LogicalDisk::unassignDriveLetter()>:
c0016788:	57                   	push   edi
c0016789:	56                   	push   esi
c001678a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001678e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016795:	84 c9                	test   cl,cl
c0016797:	75 0f                	jne    c00167a8 <LogicalDisk::unassignDriveLetter()+0x20>
c0016799:	c7 44 24 0c 3e b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b33e
c00167a1:	5e                   	pop    esi
c00167a2:	5f                   	pop    edi
c00167a3:	e9 d7 3e 00 00       	jmp    c001a67f <Krnl::panic(char const*)>
c00167a8:	83 e9 41             	sub    ecx,0x41
c00167ab:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167b2:	b8 01 00 00 00       	mov    eax,0x1
c00167b7:	c7 04 8d 80 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1480],0x0
c00167c2:	d3 e0                	shl    eax,cl
c00167c4:	89 c7                	mov    edi,eax
c00167c6:	f7 d0                	not    eax
c00167c8:	c1 ff 1f             	sar    edi,0x1f
c00167cb:	21 05 60 eb 02 c0    	and    DWORD PTR ds:0xc002eb60,eax
c00167d1:	89 fe                	mov    esi,edi
c00167d3:	f7 d6                	not    esi
c00167d5:	21 35 64 eb 02 c0    	and    DWORD PTR ds:0xc002eb64,esi
c00167db:	5e                   	pop    esi
c00167dc:	5f                   	pop    edi
c00167dd:	c3                   	ret    

c00167de <LogicalDisk::read(unsigned long long, int, void*)>:
c00167de:	57                   	push   edi
c00167df:	56                   	push   esi
c00167e0:	53                   	push   ebx
c00167e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167f1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167f7:	77 41                	ja     c001683a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167f9:	99                   	cdq    
c00167fa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016800:	01 c8                	add    eax,ecx
c0016802:	11 da                	adc    edx,ebx
c0016804:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001680a:	19 d7                	sbb    edi,edx
c001680c:	72 33                	jb     c0016841 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001680e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016814:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001681a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001681e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016822:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016828:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001682e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016832:	5b                   	pop    ebx
c0016833:	5e                   	pop    esi
c0016834:	5f                   	pop    edi
c0016835:	e9 b0 0a 00 00       	jmp    c00172ea <VCache::read(unsigned long long, int, void*)>
c001683a:	b8 05 00 00 00       	mov    eax,0x5
c001683f:	eb 05                	jmp    c0016846 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016841:	b8 07 00 00 00       	mov    eax,0x7
c0016846:	5b                   	pop    ebx
c0016847:	5e                   	pop    esi
c0016848:	5f                   	pop    edi
c0016849:	c3                   	ret    

c001684a <LogicalDisk::write(unsigned long long, int, void*)>:
c001684a:	57                   	push   edi
c001684b:	56                   	push   esi
c001684c:	53                   	push   ebx
c001684d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016851:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016855:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016859:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001685d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016863:	77 41                	ja     c00168a6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016865:	99                   	cdq    
c0016866:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001686c:	01 c8                	add    eax,ecx
c001686e:	11 da                	adc    edx,ebx
c0016870:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016876:	19 d7                	sbb    edi,edx
c0016878:	72 33                	jb     c00168ad <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001687a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016880:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016886:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001688a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001688e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016894:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001689a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001689e:	5b                   	pop    ebx
c001689f:	5e                   	pop    esi
c00168a0:	5f                   	pop    edi
c00168a1:	e9 4e 09 00 00       	jmp    c00171f4 <VCache::write(unsigned long long, int, void*)>
c00168a6:	b8 05 00 00 00       	mov    eax,0x5
c00168ab:	eb 05                	jmp    c00168b2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168ad:	b8 07 00 00 00       	mov    eax,0x7
c00168b2:	5b                   	pop    ebx
c00168b3:	5e                   	pop    esi
c00168b4:	5f                   	pop    edi
c00168b5:	c3                   	ret    

c00168b6 <Mouse::Mouse(char const*)>:
c00168b6:	83 ec 0c             	sub    esp,0xc
c00168b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168bd:	83 ec 08             	sub    esp,0x8
c00168c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c4:	50                   	push   eax
c00168c5:	e8 f2 db ff ff       	call   c00144bc <Device::Device(char const*)>
c00168ca:	83 c4 10             	add    esp,0x10
c00168cd:	ba 94 b3 02 c0       	mov    edx,0xc002b394
c00168d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d6:	89 10                	mov    DWORD PTR [eax],edx
c00168d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168dc:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168e6:	90                   	nop
c00168e7:	83 c4 0c             	add    esp,0xc
c00168ea:	c3                   	ret    
c00168eb:	90                   	nop

c00168ec <Mouse::~Mouse()>:
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	ba 94 b3 02 c0       	mov    edx,0xc002b394
c00168f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f8:	89 10                	mov    DWORD PTR [eax],edx
c00168fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	50                   	push   eax
c0016902:	e8 97 d8 ff ff       	call   c001419e <Device::~Device()>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	90                   	nop
c001690b:	83 c4 0c             	add    esp,0xc
c001690e:	c3                   	ret    
c001690f:	90                   	nop

c0016910 <Mouse::~Mouse()>:
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	83 ec 0c             	sub    esp,0xc
c0016916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001691a:	e8 cd ff ff ff       	call   c00168ec <Mouse::~Mouse()>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	83 ec 08             	sub    esp,0x8
c0016925:	68 58 01 00 00       	push   0x158
c001692a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001692e:	e8 92 c4 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0016933:	83 c4 10             	add    esp,0x10
c0016936:	83 c4 0c             	add    esp,0xc
c0016939:	c3                   	ret    

c001693a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001693a:	55                   	push   ebp
c001693b:	57                   	push   edi
c001693c:	56                   	push   esi
c001693d:	53                   	push   ebx
c001693e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016944:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001694b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016952:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016959:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016960:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016964:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016968:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001696f:	e8 44 dc ff ff       	call   c00145b8 <Device::getName()>
c0016974:	5a                   	pop    edx
c0016975:	59                   	pop    ecx
c0016976:	50                   	push   eax
c0016977:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001697b:	55                   	push   ebp
c001697c:	e8 bb 9e fe ff       	call   c000083c <strcpy>
c0016981:	5b                   	pop    ebx
c0016982:	58                   	pop    eax
c0016983:	68 b8 b3 02 c0       	push   0xc002b3b8
c0016988:	55                   	push   ebp
c0016989:	e8 ee 9f fe ff       	call   c000097c <strcat>
c001698e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016995:	e8 b1 8e ff ff       	call   c000f84b <malloc>
c001699a:	83 c4 0c             	add    esp,0xc
c001699d:	89 c3                	mov    ebx,eax
c001699f:	57                   	push   edi
c00169a0:	56                   	push   esi
c00169a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169a9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169b0:	55                   	push   ebp
c00169b1:	50                   	push   eax
c00169b2:	e8 cf fb ff ff       	call   c0016586 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169b7:	83 c4 14             	add    esp,0x14
c00169ba:	53                   	push   ebx
c00169bb:	e8 7c fc ff ff       	call   c001663c <LogicalDisk::assignDriveLetter()>
c00169c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169c3:	89 c6                	mov    esi,eax
c00169c5:	e8 28 fd ff ff       	call   c00166f2 <LogicalDisk::mount()>
c00169ca:	58                   	pop    eax
c00169cb:	5a                   	pop    edx
c00169cc:	53                   	push   ebx
c00169cd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169d4:	e8 f3 d8 ff ff       	call   c00142cc <Device::addChild(Device*)>
c00169d9:	59                   	pop    ecx
c00169da:	89 f0                	mov    eax,esi
c00169dc:	5b                   	pop    ebx
c00169dd:	0f be f0             	movsx  esi,al
c00169e0:	56                   	push   esi
c00169e1:	68 c3 b3 02 c0       	push   0xc002b3c3
c00169e6:	e8 ba c4 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00169eb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169f1:	5b                   	pop    ebx
c00169f2:	5e                   	pop    esi
c00169f3:	5f                   	pop    edi
c00169f4:	5d                   	pop    ebp
c00169f5:	c3                   	ret    

c00169f6 <createPartitionsForDisk(PhysicalDisk*)>:
c00169f6:	55                   	push   ebp
c00169f7:	57                   	push   edi
c00169f8:	56                   	push   esi
c00169f9:	53                   	push   ebx
c00169fa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a00:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a07:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a0d:	3d 00 02 00 00       	cmp    eax,0x200
c0016a12:	74 27                	je     c0016a3b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a14:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a1a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a20:	83 ec 10             	sub    esp,0x10
c0016a23:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a27:	99                   	cdq    
c0016a28:	c1 e6 0a             	shl    esi,0xa
c0016a2b:	52                   	push   edx
c0016a2c:	89 fd                	mov    ebp,edi
c0016a2e:	50                   	push   eax
c0016a2f:	55                   	push   ebp
c0016a30:	56                   	push   esi
c0016a31:	e8 3a 00 01 00       	call   c0026a70 <__udivdi3>
c0016a36:	e9 b1 00 00 00       	jmp    c0016aec <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a3b:	83 ec 0c             	sub    esp,0xc
c0016a3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a40:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a44:	56                   	push   esi
c0016a45:	6a 01                	push   0x1
c0016a47:	6a 00                	push   0x0
c0016a49:	6a 00                	push   0x0
c0016a4b:	53                   	push   ebx
c0016a4c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a4f:	83 c4 20             	add    esp,0x20
c0016a52:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a5a:	75 0a                	jne    c0016a66 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a5c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a64:	74 2c                	je     c0016a92 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a66:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a6c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a72:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a78:	83 ec 10             	sub    esp,0x10
c0016a7b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a7f:	89 f7                	mov    edi,esi
c0016a81:	c1 e0 0a             	shl    eax,0xa
c0016a84:	c1 ff 1f             	sar    edi,0x1f
c0016a87:	57                   	push   edi
c0016a88:	56                   	push   esi
c0016a89:	52                   	push   edx
c0016a8a:	50                   	push   eax
c0016a8b:	e8 e0 ff 00 00       	call   c0026a70 <__udivdi3>
c0016a90:	eb 5a                	jmp    c0016aec <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a92:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a99:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016aa0:	83 e1 7f             	and    ecx,0x7f
c0016aa3:	83 e0 7f             	and    eax,0x7f
c0016aa6:	01 c1                	add    ecx,eax
c0016aa8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016aaf:	83 e0 7f             	and    eax,0x7f
c0016ab2:	01 c1                	add    ecx,eax
c0016ab4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016abb:	83 e0 7f             	and    eax,0x7f
c0016abe:	00 c1                	add    cl,al
c0016ac0:	74 41                	je     c0016b03 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ac2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ac8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ace:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad4:	83 ec 10             	sub    esp,0x10
c0016ad7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016adb:	89 f7                	mov    edi,esi
c0016add:	c1 e0 0a             	shl    eax,0xa
c0016ae0:	c1 ff 1f             	sar    edi,0x1f
c0016ae3:	57                   	push   edi
c0016ae4:	56                   	push   esi
c0016ae5:	52                   	push   edx
c0016ae6:	50                   	push   eax
c0016ae7:	e8 84 ff 00 00       	call   c0026a70 <__udivdi3>
c0016aec:	83 c4 14             	add    esp,0x14
c0016aef:	52                   	push   edx
c0016af0:	50                   	push   eax
c0016af1:	6a 00                	push   0x0
c0016af3:	6a 00                	push   0x0
c0016af5:	53                   	push   ebx
c0016af6:	e8 3f fe ff ff       	call   c001693a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016afb:	83 c4 20             	add    esp,0x20
c0016afe:	e9 79 01 00 00       	jmp    c0016c7c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b03:	89 f0                	mov    eax,esi
c0016b05:	31 f6                	xor    esi,esi
c0016b07:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b0e:	75 02                	jne    c0016b12 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b10:	89 f1                	mov    ecx,esi
c0016b12:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b19:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b20:	c1 e2 08             	shl    edx,0x8
c0016b23:	c1 e7 10             	shl    edi,0x10
c0016b26:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b2e:	09 fa                	or     edx,edi
c0016b30:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b38:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b3f:	83 c0 10             	add    eax,0x10
c0016b42:	09 fa                	or     edx,edi
c0016b44:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b4b:	c1 e7 18             	shl    edi,0x18
c0016b4e:	09 fa                	or     edx,edi
c0016b50:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b57:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b5b:	c1 e7 10             	shl    edi,0x10
c0016b5e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b65:	c1 e2 08             	shl    edx,0x8
c0016b68:	09 fa                	or     edx,edi
c0016b6a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b71:	09 fa                	or     edx,edi
c0016b73:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b7a:	c1 e7 18             	shl    edi,0x18
c0016b7d:	09 fa                	or     edx,edi
c0016b7f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b83:	46                   	inc    esi
c0016b84:	83 fe 04             	cmp    esi,0x4
c0016b87:	0f 85 7a ff ff ff    	jne    c0016b07 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b91:	83 f0 01             	xor    eax,0x1
c0016b94:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b98:	75 57                	jne    c0016bf1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b9e:	83 f0 01             	xor    eax,0x1
c0016ba1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016ba5:	75 4a                	jne    c0016bf1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ba7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bab:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bb3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bbb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bc1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bc7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bcd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bd1:	89 f7                	mov    edi,esi
c0016bd3:	c1 e0 0a             	shl    eax,0xa
c0016bd6:	c1 ff 1f             	sar    edi,0x1f
c0016bd9:	57                   	push   edi
c0016bda:	56                   	push   esi
c0016bdb:	52                   	push   edx
c0016bdc:	50                   	push   eax
c0016bdd:	e8 8e fe 00 00       	call   c0026a70 <__udivdi3>
c0016be2:	83 c4 10             	add    esp,0x10
c0016be5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016be9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bed:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bf1:	84 c9                	test   cl,cl
c0016bf3:	74 53                	je     c0016c48 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bf5:	0f b6 c9             	movzx  ecx,cl
c0016bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c00:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c04:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c10:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c14:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c28:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c2c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c30:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c34:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c40:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c44:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c48:	31 ed                	xor    ebp,ebp
c0016c4a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c4e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c52:	89 f8                	mov    eax,edi
c0016c54:	09 f0                	or     eax,esi
c0016c56:	74 1e                	je     c0016c76 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c58:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c5c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c60:	89 d1                	mov    ecx,edx
c0016c62:	09 c1                	or     ecx,eax
c0016c64:	74 10                	je     c0016c76 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c66:	83 ec 0c             	sub    esp,0xc
c0016c69:	57                   	push   edi
c0016c6a:	56                   	push   esi
c0016c6b:	52                   	push   edx
c0016c6c:	50                   	push   eax
c0016c6d:	53                   	push   ebx
c0016c6e:	e8 c7 fc ff ff       	call   c001693a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c73:	83 c4 20             	add    esp,0x20
c0016c76:	45                   	inc    ebp
c0016c77:	83 fd 04             	cmp    ebp,0x4
c0016c7a:	75 ce                	jne    c0016c4a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c7c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c82:	5b                   	pop    ebx
c0016c83:	5e                   	pop    esi
c0016c84:	5f                   	pop    edi
c0016c85:	5d                   	pop    ebp
c0016c86:	c3                   	ret    
c0016c87:	90                   	nop

c0016c88 <Serial::Serial(char const*)>:
c0016c88:	83 ec 0c             	sub    esp,0xc
c0016c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8f:	83 ec 08             	sub    esp,0x8
c0016c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c96:	50                   	push   eax
c0016c97:	e8 20 d8 ff ff       	call   c00144bc <Device::Device(char const*)>
c0016c9c:	83 c4 10             	add    esp,0x10
c0016c9f:	ba f0 b3 02 c0       	mov    edx,0xc002b3f0
c0016ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca8:	89 10                	mov    DWORD PTR [eax],edx
c0016caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cae:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cb8:	90                   	nop
c0016cb9:	83 c4 0c             	add    esp,0xc
c0016cbc:	c3                   	ret    
c0016cbd:	90                   	nop

c0016cbe <Serial::~Serial()>:
c0016cbe:	83 ec 0c             	sub    esp,0xc
c0016cc1:	ba f0 b3 02 c0       	mov    edx,0xc002b3f0
c0016cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cca:	89 10                	mov    DWORD PTR [eax],edx
c0016ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd0:	83 ec 0c             	sub    esp,0xc
c0016cd3:	50                   	push   eax
c0016cd4:	e8 c5 d4 ff ff       	call   c001419e <Device::~Device()>
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	90                   	nop
c0016cdd:	83 c4 0c             	add    esp,0xc
c0016ce0:	c3                   	ret    
c0016ce1:	90                   	nop

c0016ce2 <Serial::~Serial()>:
c0016ce2:	83 ec 0c             	sub    esp,0xc
c0016ce5:	83 ec 0c             	sub    esp,0xc
c0016ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cec:	e8 cd ff ff ff       	call   c0016cbe <Serial::~Serial()>
c0016cf1:	83 c4 10             	add    esp,0x10
c0016cf4:	83 ec 08             	sub    esp,0x8
c0016cf7:	68 58 01 00 00       	push   0x158
c0016cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d00:	e8 c0 c0 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	83 c4 0c             	add    esp,0xc
c0016d0b:	c3                   	ret    

c0016d0c <Timer::Timer(char const*)>:
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d13:	83 ec 08             	sub    esp,0x8
c0016d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1a:	50                   	push   eax
c0016d1b:	e8 9c d7 ff ff       	call   c00144bc <Device::Device(char const*)>
c0016d20:	83 c4 10             	add    esp,0x10
c0016d23:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c0016d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2c:	89 10                	mov    DWORD PTR [eax],edx
c0016d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d32:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d3c:	90                   	nop
c0016d3d:	83 c4 0c             	add    esp,0xc
c0016d40:	c3                   	ret    
c0016d41:	90                   	nop

c0016d42 <Timer::~Timer()>:
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c0016d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4e:	89 10                	mov    DWORD PTR [eax],edx
c0016d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	50                   	push   eax
c0016d58:	e8 41 d4 ff ff       	call   c001419e <Device::~Device()>
c0016d5d:	83 c4 10             	add    esp,0x10
c0016d60:	90                   	nop
c0016d61:	83 c4 0c             	add    esp,0xc
c0016d64:	c3                   	ret    
c0016d65:	90                   	nop

c0016d66 <Timer::~Timer()>:
c0016d66:	83 ec 0c             	sub    esp,0xc
c0016d69:	83 ec 0c             	sub    esp,0xc
c0016d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d70:	e8 cd ff ff ff       	call   c0016d42 <Timer::~Timer()>
c0016d75:	83 c4 10             	add    esp,0x10
c0016d78:	83 ec 08             	sub    esp,0x8
c0016d7b:	68 5c 01 00 00       	push   0x15c
c0016d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d84:	e8 3c c0 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	83 c4 0c             	add    esp,0xc
c0016d8f:	c3                   	ret    

c0016d90 <Timer::read()>:
c0016d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d9a:	c3                   	ret    

c0016d9b <timerHandler(unsigned long long)>:
c0016d9b:	55                   	push   ebp
c0016d9c:	57                   	push   edi
c0016d9d:	56                   	push   esi
c0016d9e:	53                   	push   ebx
c0016d9f:	83 ec 0c             	sub    esp,0xc
c0016da2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016da6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016daa:	01 35 f0 eb 02 c0    	add    DWORD PTR ds:0xc002ebf0,esi
c0016db0:	11 3d f4 eb 02 c0    	adc    DWORD PTR ds:0xc002ebf4,edi
c0016db6:	80 3d 6d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e56d,0x0
c0016dbd:	0f 84 07 01 00 00    	je     c0016eca <timerHandler(unsigned long long)+0x12f>
c0016dc3:	e8 b9 70 00 00       	call   c001de81 <lockStuff()>
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	68 bc 1a 03 c0       	push   0xc0031abc
c0016dd0:	e8 19 1d 01 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd5:	c7 04 24 bc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031abc
c0016ddc:	89 c3                	mov    ebx,eax
c0016dde:	e8 13 1d 01 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	84 c0                	test   al,al
c0016de8:	74 60                	je     c0016e4a <timerHandler(unsigned long long)+0xaf>
c0016dea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016df0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016df3:	85 c0                	test   eax,eax
c0016df5:	0f 85 91 00 00 00    	jne    c0016e8c <timerHandler(unsigned long long)+0xf1>
c0016dfb:	e9 be 00 00 00       	jmp    c0016ebe <timerHandler(unsigned long long)+0x123>
c0016e00:	83 ec 0c             	sub    esp,0xc
c0016e03:	55                   	push   ebp
c0016e04:	e8 a3 76 00 00       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	39 eb                	cmp    ebx,ebp
c0016e0e:	75 12                	jne    c0016e22 <timerHandler(unsigned long long)+0x87>
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	68 bc 1a 03 c0       	push   0xc0031abc
c0016e18:	e8 d1 1c 01 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e1d:	89 c3                	mov    ebx,eax
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	83 ec 0c             	sub    esp,0xc
c0016e25:	68 bc 1a 03 c0       	push   0xc0031abc
c0016e2a:	e8 c7 1c 01 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	84 c0                	test   al,al
c0016e34:	75 b4                	jne    c0016dea <timerHandler(unsigned long long)+0x4f>
c0016e36:	83 ec 0c             	sub    esp,0xc
c0016e39:	68 bc 1a 03 c0       	push   0xc0031abc
c0016e3e:	e8 ab 1c 01 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e43:	83 c4 10             	add    esp,0x10
c0016e46:	39 d8                	cmp    eax,ebx
c0016e48:	74 a0                	je     c0016dea <timerHandler(unsigned long long)+0x4f>
c0016e4a:	83 ec 0c             	sub    esp,0xc
c0016e4d:	68 bc 1a 03 c0       	push   0xc0031abc
c0016e52:	e8 97 1c 01 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e57:	c7 04 24 bc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031abc
c0016e5e:	89 c5                	mov    ebp,eax
c0016e60:	e8 ad 1c 01 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e65:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e68:	83 c4 10             	add    esp,0x10
c0016e6b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e6e:	39 15 f0 eb 02 c0    	cmp    DWORD PTR ds:0xc002ebf0,edx
c0016e74:	a1 f4 eb 02 c0       	mov    eax,ds:0xc002ebf4
c0016e79:	19 c8                	sbb    eax,ecx
c0016e7b:	73 83                	jae    c0016e00 <timerHandler(unsigned long long)+0x65>
c0016e7d:	50                   	push   eax
c0016e7e:	50                   	push   eax
c0016e7f:	55                   	push   ebp
c0016e80:	68 bc 1a 03 c0       	push   0xc0031abc
c0016e85:	e8 36 1d 01 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e8a:	eb 93                	jmp    c0016e1f <timerHandler(unsigned long long)+0x84>
c0016e8c:	80 3d 6c e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e56c,0x0
c0016e93:	74 29                	je     c0016ebe <timerHandler(unsigned long long)+0x123>
c0016e95:	39 c6                	cmp    esi,eax
c0016e97:	bb 00 00 00 00       	mov    ebx,0x0
c0016e9c:	19 df                	sbb    edi,ebx
c0016e9e:	72 19                	jb     c0016eb9 <timerHandler(unsigned long long)+0x11e>
c0016ea0:	e8 b5 6f 00 00       	call   c001de5a <lockScheduler()>
c0016ea5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eaa:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ead:	e8 1e 73 00 00       	call   c001e1d0 <schedule()>
c0016eb2:	e8 a5 6f 00 00       	call   c001de5c <unlockScheduler()>
c0016eb7:	eb 05                	jmp    c0016ebe <timerHandler(unsigned long long)+0x123>
c0016eb9:	29 f0                	sub    eax,esi
c0016ebb:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016ebe:	83 c4 0c             	add    esp,0xc
c0016ec1:	5b                   	pop    ebx
c0016ec2:	5e                   	pop    esi
c0016ec3:	5f                   	pop    edi
c0016ec4:	5d                   	pop    ebp
c0016ec5:	e9 8b 73 00 00       	jmp    c001e255 <unlockStuff()>
c0016eca:	83 c4 0c             	add    esp,0xc
c0016ecd:	5b                   	pop    ebx
c0016ece:	5e                   	pop    esi
c0016ecf:	5f                   	pop    edi
c0016ed0:	5d                   	pop    ebp
c0016ed1:	c3                   	ret    

c0016ed2 <setupTimer(int)>:
c0016ed2:	57                   	push   edi
c0016ed3:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0016ed8:	56                   	push   esi
c0016ed9:	53                   	push   ebx
c0016eda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ede:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ee4:	83 ec 0c             	sub    esp,0xc
c0016ee7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016eed:	e8 c6 d6 ff ff       	call   c00145b8 <Device::getName()>
c0016ef2:	83 c4 10             	add    esp,0x10
c0016ef5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016ef8:	0f 85 8d 00 00 00    	jne    c0016f8b <setupTimer(int)+0xb9>
c0016efe:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0016f03:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f0a:	74 7f                	je     c0016f8b <setupTimer(int)+0xb9>
c0016f0c:	83 ec 0c             	sub    esp,0xc
c0016f0f:	68 5c 01 00 00       	push   0x15c
c0016f14:	e8 32 89 ff ff       	call   c000f84b <malloc>
c0016f19:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f1c:	89 c3                	mov    ebx,eax
c0016f1e:	e8 2b f7 00 00       	call   c002664e <PIT::PIT()>
c0016f23:	59                   	pop    ecx
c0016f24:	5f                   	pop    edi
c0016f25:	53                   	push   ebx
c0016f26:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c0016f2c:	e8 9b d3 ff ff       	call   c00142cc <Device::addChild(Device*)>
c0016f31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f33:	6a 00                	push   0x0
c0016f35:	6a 00                	push   0x0
c0016f37:	56                   	push   esi
c0016f38:	53                   	push   ebx
c0016f39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f3c:	83 c4 14             	add    esp,0x14
c0016f3f:	68 60 01 00 00       	push   0x160
c0016f44:	e8 02 89 ff ff       	call   c000f84b <malloc>
c0016f49:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f4c:	89 c7                	mov    edi,eax
c0016f4e:	e8 ab f5 00 00       	call   c00264fe <APICTimer::APICTimer()>
c0016f53:	6a 00                	push   0x0
c0016f55:	6a 00                	push   0x0
c0016f57:	56                   	push   esi
c0016f58:	57                   	push   edi
c0016f59:	e8 a2 f4 00 00       	call   c0026400 <APICTimer::open(int, int, void*)>
c0016f5e:	83 c4 20             	add    esp,0x20
c0016f61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f63:	6a 00                	push   0x0
c0016f65:	6a 00                	push   0x0
c0016f67:	6a 00                	push   0x0
c0016f69:	53                   	push   ebx
c0016f6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f6d:	58                   	pop    eax
c0016f6e:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0016f73:	5a                   	pop    edx
c0016f74:	57                   	push   edi
c0016f75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f7b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f81:	e8 46 d3 ff ff       	call   c00142cc <Device::addChild(Device*)>
c0016f86:	83 c4 10             	add    esp,0x10
c0016f89:	eb 33                	jmp    c0016fbe <setupTimer(int)+0xec>
c0016f8b:	83 ec 0c             	sub    esp,0xc
c0016f8e:	68 5c 01 00 00       	push   0x15c
c0016f93:	e8 b3 88 ff ff       	call   c000f84b <malloc>
c0016f98:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f9b:	89 c3                	mov    ebx,eax
c0016f9d:	e8 ac f6 00 00       	call   c002664e <PIT::PIT()>
c0016fa2:	58                   	pop    eax
c0016fa3:	5a                   	pop    edx
c0016fa4:	53                   	push   ebx
c0016fa5:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c0016fab:	e8 1c d3 ff ff       	call   c00142cc <Device::addChild(Device*)>
c0016fb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fb2:	6a 00                	push   0x0
c0016fb4:	6a 00                	push   0x0
c0016fb6:	56                   	push   esi
c0016fb7:	53                   	push   ebx
c0016fb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fbb:	83 c4 20             	add    esp,0x20
c0016fbe:	89 d8                	mov    eax,ebx
c0016fc0:	5b                   	pop    ebx
c0016fc1:	5e                   	pop    esi
c0016fc2:	5f                   	pop    edi
c0016fc3:	c3                   	ret    

c0016fc4 <VCache::VCache(PhysicalDisk*)>:
c0016fc4:	53                   	push   ebx
c0016fc5:	83 ec 18             	sub    esp,0x18
c0016fc8:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c0016fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd1:	89 10                	mov    DWORD PTR [eax],edx
c0016fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016fde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fed:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ff4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017006:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001700d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017011:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017024:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001702b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017036:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001703a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017046:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001704a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017055:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001705d:	83 ec 0c             	sub    esp,0xc
c0017060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017064:	e8 e2 87 ff ff       	call   c000f84b <malloc>
c0017069:	83 c4 10             	add    esp,0x10
c001706c:	89 c3                	mov    ebx,eax
c001706e:	83 ec 0c             	sub    esp,0xc
c0017071:	53                   	push   ebx
c0017072:	e8 03 6f 00 00       	call   c001df7a <Mutex::Mutex()>
c0017077:	83 c4 10             	add    esp,0x10
c001707a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017085:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017089:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001708c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017090:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017097:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001709b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ac:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170b8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170bc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170bf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170d4:	05 00 01 00 00       	add    eax,0x100
c00170d9:	c1 e0 04             	shl    eax,0x4
c00170dc:	83 ec 0c             	sub    esp,0xc
c00170df:	50                   	push   eax
c00170e0:	e8 66 87 ff ff       	call   c000f84b <malloc>
c00170e5:	83 c4 10             	add    esp,0x10
c00170e8:	89 c2                	mov    edx,eax
c00170ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017100:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017104:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017108:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001710e:	c1 e0 07             	shl    eax,0x7
c0017111:	83 ec 0c             	sub    esp,0xc
c0017114:	50                   	push   eax
c0017115:	e8 31 87 ff ff       	call   c000f84b <malloc>
c001711a:	83 c4 10             	add    esp,0x10
c001711d:	89 c2                	mov    edx,eax
c001711f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017123:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017126:	90                   	nop
c0017127:	83 c4 18             	add    esp,0x18
c001712a:	5b                   	pop    ebx
c001712b:	c3                   	ret    

c001712c <VCache::invalidateReadBuffer()>:
c001712c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017130:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017136:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001713a:	c3                   	ret    
c001713b:	90                   	nop

c001713c <VCache::writeWriteBuffer()>:
c001713c:	53                   	push   ebx
c001713d:	83 ec 14             	sub    esp,0x14
c0017140:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017144:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017147:	8b 10                	mov    edx,DWORD PTR [eax]
c0017149:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001714c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001714f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017152:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017155:	50                   	push   eax
c0017156:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017159:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017160:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017167:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001716b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017172:	83 c4 28             	add    esp,0x28
c0017175:	5b                   	pop    ebx
c0017176:	c3                   	ret    
c0017177:	90                   	nop

c0017178 <VCache::~VCache()>:
c0017178:	83 ec 0c             	sub    esp,0xc
c001717b:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c0017180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017184:	89 10                	mov    DWORD PTR [eax],edx
c0017186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001718a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001718d:	84 c0                	test   al,al
c001718f:	74 0f                	je     c00171a0 <VCache::~VCache()+0x28>
c0017191:	83 ec 0c             	sub    esp,0xc
c0017194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017198:	e8 9f ff ff ff       	call   c001713c <VCache::writeWriteBuffer()>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171a7:	83 ec 0c             	sub    esp,0xc
c00171aa:	50                   	push   eax
c00171ab:	e8 ab 86 ff ff       	call   c000f85b <free>
c00171b0:	83 c4 10             	add    esp,0x10
c00171b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171ba:	83 ec 0c             	sub    esp,0xc
c00171bd:	50                   	push   eax
c00171be:	e8 98 86 ff ff       	call   c000f85b <free>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	90                   	nop
c00171c7:	83 c4 0c             	add    esp,0xc
c00171ca:	c3                   	ret    
c00171cb:	90                   	nop

c00171cc <VCache::~VCache()>:
c00171cc:	83 ec 0c             	sub    esp,0xc
c00171cf:	83 ec 0c             	sub    esp,0xc
c00171d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171d6:	e8 9d ff ff ff       	call   c0017178 <VCache::~VCache()>
c00171db:	83 c4 10             	add    esp,0x10
c00171de:	83 ec 08             	sub    esp,0x8
c00171e1:	6a 44                	push   0x44
c00171e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171e7:	e8 d9 bb ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00171ec:	83 c4 10             	add    esp,0x10
c00171ef:	83 c4 0c             	add    esp,0xc
c00171f2:	c3                   	ret    
c00171f3:	90                   	nop

c00171f4 <VCache::write(unsigned long long, int, void*)>:
c00171f4:	55                   	push   ebp
c00171f5:	57                   	push   edi
c00171f6:	56                   	push   esi
c00171f7:	53                   	push   ebx
c00171f8:	83 ec 28             	sub    esp,0x28
c00171fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171ff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017203:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017207:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001720b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001720e:	e8 03 72 00 00       	call   c001e416 <Semaphore::acquire()>
c0017213:	83 c4 10             	add    esp,0x10
c0017216:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001721a:	74 0c                	je     c0017228 <VCache::write(unsigned long long, int, void*)+0x34>
c001721c:	83 ec 0c             	sub    esp,0xc
c001721f:	53                   	push   ebx
c0017220:	e8 07 ff ff ff       	call   c001712c <VCache::invalidateReadBuffer()>
c0017225:	83 c4 10             	add    esp,0x10
c0017228:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001722c:	74 66                	je     c0017294 <VCache::write(unsigned long long, int, void*)+0xa0>
c001722e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017231:	99                   	cdq    
c0017232:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017236:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017239:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001723c:	89 c1                	mov    ecx,eax
c001723e:	89 d0                	mov    eax,edx
c0017240:	31 f1                	xor    ecx,esi
c0017242:	31 f8                	xor    eax,edi
c0017244:	89 ca                	mov    edx,ecx
c0017246:	09 c2                	or     edx,eax
c0017248:	75 3e                	jne    c0017288 <VCache::write(unsigned long long, int, void*)+0x94>
c001724a:	83 fd 01             	cmp    ebp,0x1
c001724d:	75 39                	jne    c0017288 <VCache::write(unsigned long long, int, void*)+0x94>
c001724f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017252:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017258:	51                   	push   ecx
c0017259:	50                   	push   eax
c001725a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001725e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017262:	0f af c8             	imul   ecx,eax
c0017265:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017268:	51                   	push   ecx
c0017269:	e8 de 94 fe ff       	call   c000074c <memcpy>
c001726e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017271:	83 c4 10             	add    esp,0x10
c0017274:	40                   	inc    eax
c0017275:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017278:	83 c0 80             	add    eax,0xffffff80
c001727b:	75 57                	jne    c00172d4 <VCache::write(unsigned long long, int, void*)+0xe0>
c001727d:	83 ec 0c             	sub    esp,0xc
c0017280:	53                   	push   ebx
c0017281:	e8 b6 fe ff ff       	call   c001713c <VCache::writeWriteBuffer()>
c0017286:	eb 34                	jmp    c00172bc <VCache::write(unsigned long long, int, void*)+0xc8>
c0017288:	83 ec 0c             	sub    esp,0xc
c001728b:	53                   	push   ebx
c001728c:	e8 ab fe ff ff       	call   c001713c <VCache::writeWriteBuffer()>
c0017291:	83 c4 10             	add    esp,0x10
c0017294:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017297:	83 fd 7f             	cmp    ebp,0x7f
c001729a:	7f 25                	jg     c00172c1 <VCache::write(unsigned long long, int, void*)+0xcd>
c001729c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001729f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172a2:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00172a5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172a9:	52                   	push   edx
c00172aa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172b4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00172b7:	e8 90 94 fe ff       	call   c000074c <memcpy>
c00172bc:	83 c4 10             	add    esp,0x10
c00172bf:	eb 13                	jmp    c00172d4 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172c1:	83 ec 0c             	sub    esp,0xc
c00172c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00172c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172ca:	55                   	push   ebp
c00172cb:	57                   	push   edi
c00172cc:	56                   	push   esi
c00172cd:	50                   	push   eax
c00172ce:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172d1:	83 c4 20             	add    esp,0x20
c00172d4:	83 ec 0c             	sub    esp,0xc
c00172d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172da:	e8 e5 76 00 00       	call   c001e9c4 <Semaphore::release()>
c00172df:	83 c4 2c             	add    esp,0x2c
c00172e2:	31 c0                	xor    eax,eax
c00172e4:	5b                   	pop    ebx
c00172e5:	5e                   	pop    esi
c00172e6:	5f                   	pop    edi
c00172e7:	5d                   	pop    ebp
c00172e8:	c3                   	ret    
c00172e9:	90                   	nop

c00172ea <VCache::read(unsigned long long, int, void*)>:
c00172ea:	55                   	push   ebp
c00172eb:	57                   	push   edi
c00172ec:	56                   	push   esi
c00172ed:	53                   	push   ebx
c00172ee:	83 ec 28             	sub    esp,0x28
c00172f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172f9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00172fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017301:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017305:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017309:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001730d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017310:	e8 01 71 00 00       	call   c001e416 <Semaphore::acquire()>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001731c:	74 0c                	je     c001732a <VCache::read(unsigned long long, int, void*)+0x40>
c001731e:	83 ec 0c             	sub    esp,0xc
c0017321:	53                   	push   ebx
c0017322:	e8 15 fe ff ff       	call   c001713c <VCache::writeWriteBuffer()>
c0017327:	83 c4 10             	add    esp,0x10
c001732a:	83 fe 01             	cmp    esi,0x1
c001732d:	0f 85 80 00 00 00    	jne    c00173b3 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017333:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017336:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001733d:	75 74                	jne    c00173b3 <VCache::read(unsigned long long, int, void*)+0xc9>
c001733f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017342:	89 d1                	mov    ecx,edx
c0017344:	f7 d9                	neg    ecx
c0017346:	89 cf                	mov    edi,ecx
c0017348:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001734c:	c1 ff 1f             	sar    edi,0x1f
c001734f:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017352:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017356:	89 ce                	mov    esi,ecx
c0017358:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001735c:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017360:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017364:	89 cf                	mov    edi,ecx
c0017366:	74 0a                	je     c0017372 <VCache::read(unsigned long long, int, void*)+0x88>
c0017368:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001736b:	75 05                	jne    c0017372 <VCache::read(unsigned long long, int, void*)+0x88>
c001736d:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017370:	74 1c                	je     c001738e <VCache::read(unsigned long long, int, void*)+0xa4>
c0017372:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017376:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017379:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001737c:	83 ec 0c             	sub    esp,0xc
c001737f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017381:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017384:	52                   	push   edx
c0017385:	57                   	push   edi
c0017386:	56                   	push   esi
c0017387:	50                   	push   eax
c0017388:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001738b:	83 c4 20             	add    esp,0x20
c001738e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017391:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017397:	50                   	push   eax
c0017398:	52                   	push   edx
c0017399:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001739c:	48                   	dec    eax
c001739d:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173a1:	0f af c2             	imul   eax,edx
c00173a4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00173a7:	50                   	push   eax
c00173a8:	55                   	push   ebp
c00173a9:	e8 9e 93 fe ff       	call   c000074c <memcpy>
c00173ae:	83 c4 10             	add    esp,0x10
c00173b1:	eb 21                	jmp    c00173d4 <VCache::read(unsigned long long, int, void*)+0xea>
c00173b3:	83 ec 0c             	sub    esp,0xc
c00173b6:	53                   	push   ebx
c00173b7:	e8 70 fd ff ff       	call   c001712c <VCache::invalidateReadBuffer()>
c00173bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00173c1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173c4:	56                   	push   esi
c00173c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173cd:	50                   	push   eax
c00173ce:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173d1:	83 c4 20             	add    esp,0x20
c00173d4:	83 ec 0c             	sub    esp,0xc
c00173d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173da:	e8 e5 75 00 00       	call   c001e9c4 <Semaphore::release()>
c00173df:	83 c4 2c             	add    esp,0x2c
c00173e2:	31 c0                	xor    eax,eax
c00173e4:	5b                   	pop    ebx
c00173e5:	5e                   	pop    esi
c00173e6:	5f                   	pop    edi
c00173e7:	5d                   	pop    ebp
c00173e8:	c3                   	ret    
c00173e9:	90                   	nop

c00173ea <Video::putrect(int, int, int, int, unsigned int)>:
c00173ea:	55                   	push   ebp
c00173eb:	57                   	push   edi
c00173ec:	56                   	push   esi
c00173ed:	53                   	push   ebx
c00173ee:	83 ec 1c             	sub    esp,0x1c
c00173f1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173f9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173fd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017401:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017405:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017409:	01 df                	add    edi,ebx
c001740b:	39 fb                	cmp    ebx,edi
c001740d:	7d 1f                	jge    c001742e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001740f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017413:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017417:	7d 12                	jge    c001742b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017419:	8b 16                	mov    edx,DWORD PTR [esi]
c001741b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001741f:	53                   	push   ebx
c0017420:	55                   	push   ebp
c0017421:	45                   	inc    ebp
c0017422:	56                   	push   esi
c0017423:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017426:	83 c4 10             	add    esp,0x10
c0017429:	eb e8                	jmp    c0017413 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001742b:	43                   	inc    ebx
c001742c:	eb dd                	jmp    c001740b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001742e:	83 c4 1c             	add    esp,0x1c
c0017431:	5b                   	pop    ebx
c0017432:	5e                   	pop    esi
c0017433:	5f                   	pop    edi
c0017434:	5d                   	pop    ebp
c0017435:	c3                   	ret    

c0017436 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017436:	55                   	push   ebp
c0017437:	57                   	push   edi
c0017438:	31 ff                	xor    edi,edi
c001743a:	56                   	push   esi
c001743b:	53                   	push   ebx
c001743c:	83 ec 1c             	sub    esp,0x1c
c001743f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017443:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017447:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001744e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017453:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017457:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001745b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001745f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017462:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017466:	01 f9                	add    ecx,edi
c0017468:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001746c:	7d 2f                	jge    c001749d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001746e:	31 f6                	xor    esi,esi
c0017470:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017474:	01 f2                	add    edx,esi
c0017476:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001747a:	7d 1a                	jge    c0017496 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001747c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001747f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017482:	46                   	inc    esi
c0017483:	51                   	push   ecx
c0017484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017488:	52                   	push   edx
c0017489:	55                   	push   ebp
c001748a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001748d:	83 c4 10             	add    esp,0x10
c0017490:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017494:	eb da                	jmp    c0017470 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017496:	47                   	inc    edi
c0017497:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001749b:	eb c5                	jmp    c0017462 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001749d:	83 c4 1c             	add    esp,0x1c
c00174a0:	5b                   	pop    ebx
c00174a1:	5e                   	pop    esi
c00174a2:	5f                   	pop    edi
c00174a3:	5d                   	pop    ebp
c00174a4:	c3                   	ret    
c00174a5:	90                   	nop

c00174a6 <Video::blit(unsigned int*, int, int, int, int)>:
c00174a6:	55                   	push   ebp
c00174a7:	57                   	push   edi
c00174a8:	56                   	push   esi
c00174a9:	53                   	push   ebx
c00174aa:	83 ec 1c             	sub    esp,0x1c
c00174ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174b5:	85 c0                	test   eax,eax
c00174b7:	79 02                	jns    c00174bb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174b9:	31 c0                	xor    eax,eax
c00174bb:	c1 e0 02             	shl    eax,0x2
c00174be:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174ca:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174ce:	39 d8                	cmp    eax,ebx
c00174d0:	7e 49                	jle    c001751b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174d2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174d8:	7c 41                	jl     c001751b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174da:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174e2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174e6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174ea:	39 f9                	cmp    ecx,edi
c00174ec:	7e 22                	jle    c0017510 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174ee:	83 c5 04             	add    ebp,0x4
c00174f1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174f7:	7c 14                	jl     c001750d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174f9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174fb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017502:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017506:	56                   	push   esi
c0017507:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001750a:	83 c4 10             	add    esp,0x10
c001750d:	47                   	inc    edi
c001750e:	eb d2                	jmp    c00174e2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017514:	43                   	inc    ebx
c0017515:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017519:	eb ab                	jmp    c00174c6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001751b:	83 c4 1c             	add    esp,0x1c
c001751e:	5b                   	pop    ebx
c001751f:	5e                   	pop    esi
c0017520:	5f                   	pop    edi
c0017521:	5d                   	pop    ebp
c0017522:	c3                   	ret    
c0017523:	90                   	nop

c0017524 <Video::clearScreen(unsigned int)>:
c0017524:	57                   	push   edi
c0017525:	56                   	push   esi
c0017526:	53                   	push   ebx
c0017527:	31 db                	xor    ebx,ebx
c0017529:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001752d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017533:	7e 1f                	jle    c0017554 <Video::clearScreen(unsigned int)+0x30>
c0017535:	31 ff                	xor    edi,edi
c0017537:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001753d:	7e 12                	jle    c0017551 <Video::clearScreen(unsigned int)+0x2d>
c001753f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017545:	53                   	push   ebx
c0017546:	57                   	push   edi
c0017547:	47                   	inc    edi
c0017548:	56                   	push   esi
c0017549:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001754c:	83 c4 10             	add    esp,0x10
c001754f:	eb e6                	jmp    c0017537 <Video::clearScreen(unsigned int)+0x13>
c0017551:	43                   	inc    ebx
c0017552:	eb d9                	jmp    c001752d <Video::clearScreen(unsigned int)+0x9>
c0017554:	5b                   	pop    ebx
c0017555:	5e                   	pop    esi
c0017556:	5f                   	pop    edi
c0017557:	c3                   	ret    

c0017558 <Video::putpixel(int, int, unsigned int)>:
c0017558:	c7 44 24 04 6c b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b46c
c0017560:	e9 1a 31 00 00       	jmp    c001a67f <Krnl::panic(char const*)>
c0017565:	90                   	nop

c0017566 <Video::Video(char const*)>:
c0017566:	83 ec 0c             	sub    esp,0xc
c0017569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001756d:	83 ec 08             	sub    esp,0x8
c0017570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017574:	50                   	push   eax
c0017575:	e8 42 cf ff ff       	call   c00144bc <Device::Device(char const*)>
c001757a:	83 c4 10             	add    esp,0x10
c001757d:	ba f0 b4 02 c0       	mov    edx,0xc002b4f0
c0017582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017586:	89 10                	mov    DWORD PTR [eax],edx
c0017588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017596:	90                   	nop
c0017597:	83 c4 0c             	add    esp,0xc
c001759a:	c3                   	ret    
c001759b:	90                   	nop

c001759c <Video::~Video()>:
c001759c:	83 ec 0c             	sub    esp,0xc
c001759f:	ba f0 b4 02 c0       	mov    edx,0xc002b4f0
c00175a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a8:	89 10                	mov    DWORD PTR [eax],edx
c00175aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ae:	83 ec 0c             	sub    esp,0xc
c00175b1:	50                   	push   eax
c00175b2:	e8 e7 cb ff ff       	call   c001419e <Device::~Device()>
c00175b7:	83 c4 10             	add    esp,0x10
c00175ba:	90                   	nop
c00175bb:	83 c4 0c             	add    esp,0xc
c00175be:	c3                   	ret    
c00175bf:	90                   	nop

c00175c0 <Video::~Video()>:
c00175c0:	83 ec 0c             	sub    esp,0xc
c00175c3:	83 ec 0c             	sub    esp,0xc
c00175c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ca:	e8 cd ff ff ff       	call   c001759c <Video::~Video()>
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	83 ec 08             	sub    esp,0x8
c00175d5:	68 64 01 00 00       	push   0x164
c00175da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175de:	e8 e2 b7 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00175e3:	83 c4 10             	add    esp,0x10
c00175e6:	83 c4 0c             	add    esp,0xc
c00175e9:	c3                   	ret    

c00175ea <Video::isMonochrome()>:
c00175ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175ee:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175f4:	c3                   	ret    
c00175f5:	90                   	nop

c00175f6 <Video::getWidth()>:
c00175f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017600:	c3                   	ret    
c0017601:	90                   	nop

c0017602 <Video::getHeight()>:
c0017602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017606:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001760c:	c3                   	ret    
c001760d:	90                   	nop

c001760e <Video::drawCursor(int, int, unsigned char*, int)>:
c001760e:	55                   	push   ebp
c001760f:	57                   	push   edi
c0017610:	56                   	push   esi
c0017611:	53                   	push   ebx
c0017612:	83 ec 2c             	sub    esp,0x2c
c0017615:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017619:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001761d:	83 f8 01             	cmp    eax,0x1
c0017620:	19 c9                	sbb    ecx,ecx
c0017622:	31 db                	xor    ebx,ebx
c0017624:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017628:	89 cd                	mov    ebp,ecx
c001762a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017632:	f7 d5                	not    ebp
c0017634:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001763a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001763e:	01 d8                	add    eax,ebx
c0017640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017644:	56                   	push   esi
c0017645:	e8 b8 ff ff ff       	call   c0017602 <Video::getHeight()>
c001764a:	59                   	pop    ecx
c001764b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001764f:	7e 70                	jle    c00176c1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017651:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017655:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017659:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001765c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017660:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017664:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001766b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001766f:	89 f8                	mov    eax,edi
c0017671:	83 c0 20             	add    eax,0x20
c0017674:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017678:	56                   	push   esi
c0017679:	e8 78 ff ff ff       	call   c00175f6 <Video::getWidth()>
c001767e:	5a                   	pop    edx
c001767f:	39 c7                	cmp    edi,eax
c0017681:	7d 34                	jge    c00176b7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017683:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017688:	74 05                	je     c001768f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001768a:	8b 06                	mov    eax,DWORD PTR [esi]
c001768c:	55                   	push   ebp
c001768d:	eb 0d                	jmp    c001769c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001768f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017694:	74 12                	je     c00176a8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017696:	8b 06                	mov    eax,DWORD PTR [esi]
c0017698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001769c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176a0:	57                   	push   edi
c00176a1:	56                   	push   esi
c00176a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176ac:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176b0:	47                   	inc    edi
c00176b1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176b5:	75 c1                	jne    c0017678 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176b7:	43                   	inc    ebx
c00176b8:	83 fb 20             	cmp    ebx,0x20
c00176bb:	0f 85 79 ff ff ff    	jne    c001763a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176c1:	83 c4 2c             	add    esp,0x2c
c00176c4:	5b                   	pop    ebx
c00176c5:	5e                   	pop    esi
c00176c6:	5f                   	pop    edi
c00176c7:	5d                   	pop    ebp
c00176c8:	c3                   	ret    
c00176c9:	90                   	nop

c00176ca <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176ca:	55                   	push   ebp
c00176cb:	57                   	push   edi
c00176cc:	56                   	push   esi
c00176cd:	53                   	push   ebx
c00176ce:	83 ec 28             	sub    esp,0x28
c00176d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176d5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176d9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176dd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176e1:	c1 e7 08             	shl    edi,0x8
c00176e4:	01 c7                	add    edi,eax
c00176e6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176ea:	c1 e0 08             	shl    eax,0x8
c00176ed:	01 d0                	add    eax,edx
c00176ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176f7:	0f af c7             	imul   eax,edi
c00176fa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017701:	50                   	push   eax
c0017702:	e8 44 81 ff ff       	call   c000f84b <malloc>
c0017707:	83 c4 10             	add    esp,0x10
c001770a:	89 c5                	mov    ebp,eax
c001770c:	85 c0                	test   eax,eax
c001770e:	75 15                	jne    c0017725 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017710:	83 ec 0c             	sub    esp,0xc
c0017713:	68 8d b4 02 c0       	push   0xc002b48d
c0017718:	e8 88 b7 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001771d:	83 c4 10             	add    esp,0x10
c0017720:	e9 1c 01 00 00       	jmp    c0017841 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017725:	be 12 00 00 00       	mov    esi,0x12
c001772a:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001772e:	74 11                	je     c0017741 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017730:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017734:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017738:	c1 fe 03             	sar    esi,0x3
c001773b:	0f af f0             	imul   esi,eax
c001773e:	83 c6 12             	add    esi,0x12
c0017741:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017745:	74 04                	je     c001774b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017747:	85 ff                	test   edi,edi
c0017749:	75 12                	jne    c001775d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001774b:	83 ec 0c             	sub    esp,0xc
c001774e:	68 a4 b4 02 c0       	push   0xc002b4a4
c0017753:	e8 4d b7 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0017758:	e9 ce 00 00 00       	jmp    c001782b <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001775d:	52                   	push   edx
c001775e:	52                   	push   edx
c001775f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017763:	50                   	push   eax
c0017764:	68 b9 b4 02 c0       	push   0xc002b4b9
c0017769:	e8 37 b7 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001776e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017772:	83 c4 10             	add    esp,0x10
c0017775:	80 fa 02             	cmp    dl,0x2
c0017778:	0f 85 98 00 00 00    	jne    c0017816 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001777e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017783:	75 10                	jne    c0017795 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017785:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017789:	75 0a                	jne    c0017795 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001778b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001778e:	83 e8 18             	sub    eax,0x18
c0017791:	a8 f7                	test   al,0xf7
c0017793:	74 0a                	je     c001779f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017795:	83 ec 0c             	sub    esp,0xc
c0017798:	68 c6 b4 02 c0       	push   0xc002b4c6
c001779d:	eb 7f                	jmp    c001781e <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001779f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177bb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177bf:	75 0c                	jne    c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177c1:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177c6:	c1 e0 18             	shl    eax,0x18
c00177c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177cd:	41                   	inc    ecx
c00177ce:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177d3:	c1 e2 10             	shl    edx,0x10
c00177d6:	89 d0                	mov    eax,edx
c00177d8:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177dd:	c1 e2 08             	shl    edx,0x8
c00177e0:	09 c2                	or     edx,eax
c00177e2:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177e6:	09 c2                	or     edx,eax
c00177e8:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177ec:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177f0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177f4:	c1 f8 03             	sar    eax,0x3
c00177f7:	01 c6                	add    esi,eax
c00177f9:	89 c8                	mov    eax,ecx
c00177fb:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177ff:	39 c7                	cmp    edi,eax
c0017801:	7f b0                	jg     c00177b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017803:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017807:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001780b:	39 14 24             	cmp    DWORD PTR [esp],edx
c001780e:	7e 22                	jle    c0017832 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017810:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017814:	eb 99                	jmp    c00177af <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017816:	50                   	push   eax
c0017817:	50                   	push   eax
c0017818:	52                   	push   edx
c0017819:	68 d4 b4 02 c0       	push   0xc002b4d4
c001781e:	e8 82 b6 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0017823:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017826:	e8 30 80 ff ff       	call   c000f85b <free>
c001782b:	83 c4 10             	add    esp,0x10
c001782e:	31 ed                	xor    ebp,ebp
c0017830:	eb 0f                	jmp    c0017841 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017832:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017836:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017839:	89 38                	mov    DWORD PTR [eax],edi
c001783b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001783f:	89 08                	mov    DWORD PTR [eax],ecx
c0017841:	83 c4 1c             	add    esp,0x1c
c0017844:	89 e8                	mov    eax,ebp
c0017846:	5b                   	pop    ebx
c0017847:	5e                   	pop    esi
c0017848:	5f                   	pop    edi
c0017849:	5d                   	pop    ebp
c001784a:	c3                   	ret    
c001784b:	90                   	nop

c001784c <Video::putTGA(int, int, unsigned char*, int)>:
c001784c:	55                   	push   ebp
c001784d:	57                   	push   edi
c001784e:	56                   	push   esi
c001784f:	53                   	push   ebx
c0017850:	83 ec 28             	sub    esp,0x28
c0017853:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017857:	8d 44 24 18          	lea    eax,[esp+0x18]
c001785b:	50                   	push   eax
c001785c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017860:	50                   	push   eax
c0017861:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017865:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017869:	56                   	push   esi
c001786a:	e8 5b fe ff ff       	call   c00176ca <Video::tgaParse(unsigned char*, int, int*, int*)>
c001786f:	83 c4 20             	add    esp,0x20
c0017872:	85 c0                	test   eax,eax
c0017874:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017878:	74 35                	je     c00178af <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001787a:	89 c7                	mov    edi,eax
c001787c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017880:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017884:	39 d8                	cmp    eax,ebx
c0017886:	7e 27                	jle    c00178af <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017888:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001788c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017890:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017894:	39 e8                	cmp    eax,ebp
c0017896:	7e 14                	jle    c00178ac <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017898:	8b 06                	mov    eax,DWORD PTR [esi]
c001789a:	83 c7 04             	add    edi,0x4
c001789d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178a0:	53                   	push   ebx
c00178a1:	55                   	push   ebp
c00178a2:	45                   	inc    ebp
c00178a3:	56                   	push   esi
c00178a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178a7:	83 c4 10             	add    esp,0x10
c00178aa:	eb e0                	jmp    c001788c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178ac:	43                   	inc    ebx
c00178ad:	eb cd                	jmp    c001787c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178af:	83 c4 1c             	add    esp,0x1c
c00178b2:	5b                   	pop    ebx
c00178b3:	5e                   	pop    esi
c00178b4:	5f                   	pop    edi
c00178b5:	5d                   	pop    ebp
c00178b6:	c3                   	ret    
c00178b7:	90                   	nop

c00178b8 <ACPI::close(int, int, void*)>:
c00178b8:	83 ec 1c             	sub    esp,0x1c
c00178bb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178c3:	74 0a                	je     c00178cf <ACPI::close(int, int, void*)+0x17>
c00178c5:	b8 00 00 00 00       	mov    eax,0x0
c00178ca:	e9 9a 00 00 00       	jmp    c0017969 <ACPI::close(int, int, void*)+0xb1>
c00178cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178d4:	75 37                	jne    c001790d <ACPI::close(int, int, void*)+0x55>
c00178d6:	83 ec 0c             	sub    esp,0xc
c00178d9:	68 30 b5 02 c0       	push   0xc002b530
c00178de:	e8 c2 b5 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00178e3:	83 c4 10             	add    esp,0x10
c00178e6:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c00178eb:	85 c0                	test   eax,eax
c00178ed:	74 07                	je     c00178f6 <ACPI::close(int, int, void*)+0x3e>
c00178ef:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c00178f4:	ff d0                	call   eax
c00178f6:	83 ec 0c             	sub    esp,0xc
c00178f9:	68 60 b6 02 c0       	push   0xc002b660
c00178fe:	e8 7c 2d 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0017903:	83 c4 10             	add    esp,0x10
c0017906:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001790b:	eb 5c                	jmp    c0017969 <ACPI::close(int, int, void*)+0xb1>
c001790d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017912:	75 50                	jne    c0017964 <ACPI::close(int, int, void*)+0xac>
c0017914:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c0017919:	85 c0                	test   eax,eax
c001791b:	74 07                	je     c0017924 <ACPI::close(int, int, void*)+0x6c>
c001791d:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c0017922:	ff d0                	call   eax
c0017924:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017929:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001792e:	83 e0 02             	and    eax,0x2
c0017931:	74 1c                	je     c001794f <ACPI::close(int, int, void*)+0x97>
c0017933:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001793a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001793e:	89 c2                	mov    edx,eax
c0017940:	ec                   	in     al,dx
c0017941:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017945:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017949:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001794d:	eb da                	jmp    c0017929 <ACPI::close(int, int, void*)+0x71>
c001794f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017956:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001795b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001795f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017963:	ee                   	out    dx,al
c0017964:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017969:	83 c4 1c             	add    esp,0x1c
c001796c:	c3                   	ret    

c001796d <findRSDP()>:
c001796d:	83 ec 1c             	sub    esp,0x1c
c0017970:	83 ec 0c             	sub    esp,0xc
c0017973:	68 3d b5 02 c0       	push   0xc002b53d
c0017978:	e8 28 b5 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017985:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001798b:	83 e0 04             	and    eax,0x4
c001798e:	84 c0                	test   al,al
c0017990:	75 07                	jne    c0017999 <findRSDP()+0x2c>
c0017992:	b8 00 00 00 00       	mov    eax,0x0
c0017997:	eb 6a                	jmp    c0017a03 <findRSDP()+0x96>
c0017999:	a1 b4 e5 02 c0       	mov    eax,ds:0xc002e5b4
c001799e:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179a3:	7f 1b                	jg     c00179c0 <findRSDP()+0x53>
c00179a5:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00179aa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179b0:	83 e2 fb             	and    edx,0xfffffffb
c00179b3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179b9:	b8 00 00 00 00       	mov    eax,0x0
c00179be:	eb 43                	jmp    c0017a03 <findRSDP()+0x96>
c00179c0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179c8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179d0:	77 2c                	ja     c00179fe <findRSDP()+0x91>
c00179d2:	83 ec 04             	sub    esp,0x4
c00179d5:	6a 08                	push   0x8
c00179d7:	68 4b b5 02 c0       	push   0xc002b54b
c00179dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179e0:	e8 63 8c fe ff       	call   c0000648 <memcmp>
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	85 c0                	test   eax,eax
c00179ea:	0f 94 c0             	sete   al
c00179ed:	84 c0                	test   al,al
c00179ef:	74 06                	je     c00179f7 <findRSDP()+0x8a>
c00179f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179f5:	eb 0c                	jmp    c0017a03 <findRSDP()+0x96>
c00179f7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179fc:	eb ca                	jmp    c00179c8 <findRSDP()+0x5b>
c00179fe:	b8 00 00 00 00       	mov    eax,0x0
c0017a03:	83 c4 1c             	add    esp,0x1c
c0017a06:	c3                   	ret    

c0017a07 <loadACPITables(unsigned char*)>:
c0017a07:	56                   	push   esi
c0017a08:	53                   	push   ebx
c0017a09:	83 ec 44             	sub    esp,0x44
c0017a0c:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017a11:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a17:	83 e0 04             	and    eax,0x4
c0017a1a:	84 c0                	test   al,al
c0017a1c:	0f 84 05 02 00 00    	je     c0017c27 <loadACPITables(unsigned char*)+0x220>
c0017a22:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c0017a27:	84 c0                	test   al,al
c0017a29:	74 75                	je     c0017aa0 <loadACPITables(unsigned char*)+0x99>
c0017a2b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a2f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a3a:	83 e8 24             	sub    eax,0x24
c0017a3d:	c1 e8 03             	shr    eax,0x3
c0017a40:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a44:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a50:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a54:	0f 8d b2 00 00 00    	jge    c0017b0c <loadACPITables(unsigned char*)+0x105>
c0017a5a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a5e:	83 c0 24             	add    eax,0x24
c0017a61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a69:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a71:	c1 e0 03             	shl    eax,0x3
c0017a74:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a81:	89 c1                	mov    ecx,eax
c0017a83:	a1 2c 0c 03 c0       	mov    eax,ds:0xc0030c2c
c0017a88:	8d 50 01             	lea    edx,[eax+0x1]
c0017a8b:	89 15 2c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c2c,edx
c0017a91:	89 ca                	mov    edx,ecx
c0017a93:	89 14 c5 44 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3bc],edx
c0017a9a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a9e:	eb ac                	jmp    c0017a4c <loadACPITables(unsigned char*)+0x45>
c0017aa0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017aa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aaf:	83 e8 24             	sub    eax,0x24
c0017ab2:	c1 e8 02             	shr    eax,0x2
c0017ab5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ab9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017ac1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ac5:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017ac9:	7d 41                	jge    c0017b0c <loadACPITables(unsigned char*)+0x105>
c0017acb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017acf:	83 c0 24             	add    eax,0x24
c0017ad2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ad6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ada:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ade:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ae2:	c1 e0 02             	shl    eax,0x2
c0017ae5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017ae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aed:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017aef:	a1 2c 0c 03 c0       	mov    eax,ds:0xc0030c2c
c0017af4:	8d 50 01             	lea    edx,[eax+0x1]
c0017af7:	89 15 2c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c2c,edx
c0017afd:	89 ca                	mov    edx,ecx
c0017aff:	89 14 c5 44 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3bc],edx
c0017b06:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b0a:	eb b5                	jmp    c0017ac1 <loadACPITables(unsigned char*)+0xba>
c0017b0c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b14:	a1 2c 0c 03 c0       	mov    eax,ds:0xc0030c2c
c0017b19:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b1d:	0f 8d 05 01 00 00    	jge    c0017c28 <loadACPITables(unsigned char*)+0x221>
c0017b23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b27:	8b 04 c5 44 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf3bc]
c0017b2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b3e:	25 ff 0f 00 00       	and    eax,0xfff
c0017b43:	89 c6                	mov    esi,eax
c0017b45:	e8 9c a2 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017b4a:	89 c3                	mov    ebx,eax
c0017b4c:	83 ec 0c             	sub    esp,0xc
c0017b4f:	6a 01                	push   0x1
c0017b51:	e8 f5 9f ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017b56:	83 c4 10             	add    esp,0x10
c0017b59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b5d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b63:	83 ec 0c             	sub    esp,0xc
c0017b66:	6a 01                	push   0x1
c0017b68:	6a 01                	push   0x1
c0017b6a:	50                   	push   eax
c0017b6b:	52                   	push   edx
c0017b6c:	53                   	push   ebx
c0017b6d:	e8 ba aa ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b72:	83 c4 20             	add    esp,0x20
c0017b75:	09 f0                	or     eax,esi
c0017b77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b7f:	c1 e0 03             	shl    eax,0x3
c0017b82:	05 40 0c 03 c0       	add    eax,0xc0030c40
c0017b87:	83 ec 04             	sub    esp,0x4
c0017b8a:	6a 04                	push   0x4
c0017b8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b90:	50                   	push   eax
c0017b91:	e8 b6 8b fe ff       	call   c000074c <memcpy>
c0017b96:	83 c4 10             	add    esp,0x10
c0017b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ba0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ba8:	05 00 10 00 00       	add    eax,0x1000
c0017bad:	c1 e8 0c             	shr    eax,0xc
c0017bb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bbf:	25 ff 0f 00 00       	and    eax,0xfff
c0017bc4:	89 c6                	mov    esi,eax
c0017bc6:	e8 1b a2 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017bcb:	89 c3                	mov    ebx,eax
c0017bcd:	83 ec 0c             	sub    esp,0xc
c0017bd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bd4:	e8 72 9f ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017be0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	6a 01                	push   0x1
c0017beb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bef:	50                   	push   eax
c0017bf0:	52                   	push   edx
c0017bf1:	53                   	push   ebx
c0017bf2:	e8 35 aa ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bf7:	83 c4 20             	add    esp,0x20
c0017bfa:	09 f0                	or     eax,esi
c0017bfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c00:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c03:	83 ec 0c             	sub    esp,0xc
c0017c06:	50                   	push   eax
c0017c07:	e8 c5 a3 ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c0c:	83 c4 10             	add    esp,0x10
c0017c0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c17:	89 14 c5 44 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3bc],edx
c0017c1e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c22:	e9 ed fe ff ff       	jmp    c0017b14 <loadACPITables(unsigned char*)+0x10d>
c0017c27:	90                   	nop
c0017c28:	83 c4 44             	add    esp,0x44
c0017c2b:	5b                   	pop    ebx
c0017c2c:	5e                   	pop    esi
c0017c2d:	c3                   	ret    

c0017c2e <findRSDT(unsigned char*)>:
c0017c2e:	56                   	push   esi
c0017c2f:	53                   	push   ebx
c0017c30:	83 ec 44             	sub    esp,0x44
c0017c33:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017c38:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c3e:	83 e0 04             	and    eax,0x4
c0017c41:	84 c0                	test   al,al
c0017c43:	75 0a                	jne    c0017c4f <findRSDT(unsigned char*)+0x21>
c0017c45:	b8 00 00 00 00       	mov    eax,0x0
c0017c4a:	e9 f7 00 00 00       	jmp    c0017d46 <findRSDT(unsigned char*)+0x118>
c0017c4f:	83 ec 04             	sub    esp,0x4
c0017c52:	6a 24                	push   0x24
c0017c54:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c58:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c5c:	50                   	push   eax
c0017c5d:	e8 ea 8a fe ff       	call   c000074c <memcpy>
c0017c62:	83 c4 10             	add    esp,0x10
c0017c65:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c69:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c6d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c7d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c85:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c8d:	25 ff 0f 00 00       	and    eax,0xfff
c0017c92:	89 c6                	mov    esi,eax
c0017c94:	e8 4d a1 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017c99:	89 c3                	mov    ebx,eax
c0017c9b:	83 ec 0c             	sub    esp,0xc
c0017c9e:	6a 02                	push   0x2
c0017ca0:	e8 a6 9e ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017ca5:	83 c4 10             	add    esp,0x10
c0017ca8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017cac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cb2:	83 ec 0c             	sub    esp,0xc
c0017cb5:	6a 01                	push   0x1
c0017cb7:	6a 02                	push   0x2
c0017cb9:	50                   	push   eax
c0017cba:	52                   	push   edx
c0017cbb:	53                   	push   ebx
c0017cbc:	e8 6b a9 ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cc1:	83 c4 20             	add    esp,0x20
c0017cc4:	09 f0                	or     eax,esi
c0017cc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017cca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cce:	25 ff 0f 00 00       	and    eax,0xfff
c0017cd3:	89 c6                	mov    esi,eax
c0017cd5:	e8 0c a1 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017cda:	89 c3                	mov    ebx,eax
c0017cdc:	83 ec 0c             	sub    esp,0xc
c0017cdf:	6a 02                	push   0x2
c0017ce1:	e8 65 9e ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017ce6:	83 c4 10             	add    esp,0x10
c0017ce9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ced:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cf3:	83 ec 0c             	sub    esp,0xc
c0017cf6:	6a 01                	push   0x1
c0017cf8:	6a 02                	push   0x2
c0017cfa:	50                   	push   eax
c0017cfb:	52                   	push   edx
c0017cfc:	53                   	push   ebx
c0017cfd:	e8 2a a9 ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d02:	83 c4 20             	add    esp,0x20
c0017d05:	09 f0                	or     eax,esi
c0017d07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d0b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d10:	75 11                	jne    c0017d23 <findRSDT(unsigned char*)+0xf5>
c0017d12:	c6 05 40 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e40,0x0
c0017d19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d1d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d21:	eb 1f                	jmp    c0017d42 <findRSDT(unsigned char*)+0x114>
c0017d23:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d28:	75 11                	jne    c0017d3b <findRSDT(unsigned char*)+0x10d>
c0017d2a:	c6 05 40 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e40,0x1
c0017d31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d35:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d39:	eb 07                	jmp    c0017d42 <findRSDT(unsigned char*)+0x114>
c0017d3b:	b8 00 00 00 00       	mov    eax,0x0
c0017d40:	eb 04                	jmp    c0017d46 <findRSDT(unsigned char*)+0x118>
c0017d42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d46:	83 c4 44             	add    esp,0x44
c0017d49:	5b                   	pop    ebx
c0017d4a:	5e                   	pop    esi
c0017d4b:	c3                   	ret    

c0017d4c <findDataTable(unsigned char*, char*)>:
c0017d4c:	83 ec 1c             	sub    esp,0x1c
c0017d4f:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017d54:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d5a:	83 e0 04             	and    eax,0x4
c0017d5d:	84 c0                	test   al,al
c0017d5f:	75 07                	jne    c0017d68 <findDataTable(unsigned char*, char*)+0x1c>
c0017d61:	b8 00 00 00 00       	mov    eax,0x0
c0017d66:	eb 7c                	jmp    c0017de4 <findDataTable(unsigned char*, char*)+0x98>
c0017d68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d70:	a1 2c 0c 03 c0       	mov    eax,ds:0xc0030c2c
c0017d75:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d79:	7d 3a                	jge    c0017db5 <findDataTable(unsigned char*, char*)+0x69>
c0017d7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d7f:	c1 e0 03             	shl    eax,0x3
c0017d82:	05 40 0c 03 c0       	add    eax,0xc0030c40
c0017d87:	83 ec 04             	sub    esp,0x4
c0017d8a:	6a 04                	push   0x4
c0017d8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d90:	50                   	push   eax
c0017d91:	e8 b2 88 fe ff       	call   c0000648 <memcmp>
c0017d96:	83 c4 10             	add    esp,0x10
c0017d99:	85 c0                	test   eax,eax
c0017d9b:	0f 94 c0             	sete   al
c0017d9e:	84 c0                	test   al,al
c0017da0:	74 0d                	je     c0017daf <findDataTable(unsigned char*, char*)+0x63>
c0017da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017da6:	8b 04 c5 44 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf3bc]
c0017dad:	eb 35                	jmp    c0017de4 <findDataTable(unsigned char*, char*)+0x98>
c0017daf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017db3:	eb bb                	jmp    c0017d70 <findDataTable(unsigned char*, char*)+0x24>
c0017db5:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c0017dba:	84 c0                	test   al,al
c0017dbc:	74 07                	je     c0017dc5 <findDataTable(unsigned char*, char*)+0x79>
c0017dbe:	b8 58 00 00 00       	mov    eax,0x58
c0017dc3:	eb 05                	jmp    c0017dca <findDataTable(unsigned char*, char*)+0x7e>
c0017dc5:	b8 52 00 00 00       	mov    eax,0x52
c0017dca:	83 ec 04             	sub    esp,0x4
c0017dcd:	50                   	push   eax
c0017dce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dd2:	68 84 b6 02 c0       	push   0xc002b684
c0017dd7:	e8 c9 b0 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0017ddc:	83 c4 10             	add    esp,0x10
c0017ddf:	b8 00 00 00 00       	mov    eax,0x0
c0017de4:	83 c4 1c             	add    esp,0x1c
c0017de7:	c3                   	ret    

c0017de8 <scanMADT()>:
c0017de8:	53                   	push   ebx
c0017de9:	83 ec 38             	sub    esp,0x38
c0017dec:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017df1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017df7:	83 e0 04             	and    eax,0x4
c0017dfa:	84 c0                	test   al,al
c0017dfc:	0f 84 63 04 00 00    	je     c0018265 <scanMADT()+0x47d>
c0017e02:	e8 66 fb ff ff       	call   c001796d <findRSDP()>
c0017e07:	a3 4c 0e 03 c0       	mov    ds:0xc0030e4c,eax
c0017e0c:	a1 4c 0e 03 c0       	mov    eax,ds:0xc0030e4c
c0017e11:	85 c0                	test   eax,eax
c0017e13:	75 19                	jne    c0017e2e <scanMADT()+0x46>
c0017e15:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017e1a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e20:	83 e2 fb             	and    edx,0xfffffffb
c0017e23:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e29:	e9 3b 04 00 00       	jmp    c0018269 <scanMADT()+0x481>
c0017e2e:	a1 4c 0e 03 c0       	mov    eax,ds:0xc0030e4c
c0017e33:	83 ec 0c             	sub    esp,0xc
c0017e36:	50                   	push   eax
c0017e37:	e8 f2 fd ff ff       	call   c0017c2e <findRSDT(unsigned char*)>
c0017e3c:	83 c4 10             	add    esp,0x10
c0017e3f:	a3 48 0e 03 c0       	mov    ds:0xc0030e48,eax
c0017e44:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0017e49:	85 c0                	test   eax,eax
c0017e4b:	75 19                	jne    c0017e66 <scanMADT()+0x7e>
c0017e4d:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017e52:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e58:	83 e2 fb             	and    edx,0xfffffffb
c0017e5b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e61:	e9 03 04 00 00       	jmp    c0018269 <scanMADT()+0x481>
c0017e66:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0017e6b:	83 ec 0c             	sub    esp,0xc
c0017e6e:	50                   	push   eax
c0017e6f:	e8 93 fb ff ff       	call   c0017a07 <loadACPITables(unsigned char*)>
c0017e74:	83 c4 10             	add    esp,0x10
c0017e77:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c0017e7c:	83 ec 08             	sub    esp,0x8
c0017e7f:	68 54 b5 02 c0       	push   0xc002b554
c0017e84:	50                   	push   eax
c0017e85:	e8 c2 fe ff ff       	call   c0017d4c <findDataTable(unsigned char*, char*)>
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e91:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e96:	75 19                	jne    c0017eb1 <scanMADT()+0xc9>
c0017e98:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017e9d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ea3:	83 e2 fe             	and    edx,0xfffffffe
c0017ea6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017eac:	e9 b8 03 00 00       	jmp    c0018269 <scanMADT()+0x481>
c0017eb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017eb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ebd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ec0:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017ec4:	0f 87 9f 03 00 00    	ja     c0018269 <scanMADT()+0x481>
c0017eca:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ed2:	0f 87 91 03 00 00    	ja     c0018269 <scanMADT()+0x481>
c0017ed8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017edc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ee0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ee7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eef:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ef3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017ef7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017efb:	8d 50 01             	lea    edx,[eax+0x1]
c0017efe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f06:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f0a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f0e:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f13:	0f 86 4f 03 00 00    	jbe    c0018268 <scanMADT()+0x480>
c0017f19:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f1e:	75 57                	jne    c0017f77 <scanMADT()+0x18f>
c0017f20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f24:	8d 50 01             	lea    edx,[eax+0x1]
c0017f27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f2b:	8a 15 40 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031040
c0017f31:	0f b6 d2             	movzx  edx,dl
c0017f34:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f38:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f3c:	88 82 80 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef80],al
c0017f42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f46:	8d 50 01             	lea    edx,[eax+0x1]
c0017f49:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f4d:	8a 15 40 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031040
c0017f53:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f56:	88 0d 40 10 03 c0    	mov    BYTE PTR ds:0xc0031040,cl
c0017f5c:	0f b6 d2             	movzx  edx,dl
c0017f5f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f63:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f67:	88 82 60 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefa0],al
c0017f6d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f72:	e9 da 02 00 00       	jmp    c0018251 <scanMADT()+0x469>
c0017f77:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f7c:	0f 85 14 01 00 00    	jne    c0018096 <scanMADT()+0x2ae>
c0017f82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f86:	8d 50 01             	lea    edx,[eax+0x1]
c0017f89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f8d:	8a 15 00 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f00
c0017f93:	0f b6 d2             	movzx  edx,dl
c0017f96:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f9a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f9e:	88 82 20 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0e0],al
c0017fa4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017fa8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb0:	01 d0                	add    eax,edx
c0017fb2:	83 c0 2c             	add    eax,0x2c
c0017fb5:	8a 00                	mov    al,BYTE PTR [eax]
c0017fb7:	0f b6 d0             	movzx  edx,al
c0017fba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbe:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fc9:	0f b6 c0             	movzx  eax,al
c0017fcc:	c1 e0 08             	shl    eax,0x8
c0017fcf:	89 d1                	mov    ecx,edx
c0017fd1:	09 c1                	or     ecx,eax
c0017fd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd7:	8d 50 02             	lea    edx,[eax+0x2]
c0017fda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fde:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fe2:	0f b6 c0             	movzx  eax,al
c0017fe5:	c1 e0 10             	shl    eax,0x10
c0017fe8:	09 c1                	or     ecx,eax
c0017fea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fee:	8d 50 03             	lea    edx,[eax+0x3]
c0017ff1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ff5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff9:	0f b6 c0             	movzx  eax,al
c0017ffc:	c1 e0 18             	shl    eax,0x18
c0017fff:	09 c1                	or     ecx,eax
c0018001:	89 ca                	mov    edx,ecx
c0018003:	a0 00 0f 03 c0       	mov    al,ds:0xc0030f00
c0018008:	0f b6 c0             	movzx  eax,al
c001800b:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c0018012:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018017:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001801b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001801f:	01 d0                	add    eax,edx
c0018021:	83 c0 2c             	add    eax,0x2c
c0018024:	8a 00                	mov    al,BYTE PTR [eax]
c0018026:	0f b6 d0             	movzx  edx,al
c0018029:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018030:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018034:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018038:	0f b6 c0             	movzx  eax,al
c001803b:	c1 e0 08             	shl    eax,0x8
c001803e:	89 d1                	mov    ecx,edx
c0018040:	09 c1                	or     ecx,eax
c0018042:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018046:	8d 50 02             	lea    edx,[eax+0x2]
c0018049:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001804d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018051:	0f b6 c0             	movzx  eax,al
c0018054:	c1 e0 10             	shl    eax,0x10
c0018057:	09 c1                	or     ecx,eax
c0018059:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001805d:	8d 50 03             	lea    edx,[eax+0x3]
c0018060:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018064:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018068:	0f b6 c0             	movzx  eax,al
c001806b:	c1 e0 18             	shl    eax,0x18
c001806e:	09 c1                	or     ecx,eax
c0018070:	89 ca                	mov    edx,ecx
c0018072:	a0 00 0f 03 c0       	mov    al,ds:0xc0030f00
c0018077:	0f b6 c0             	movzx  eax,al
c001807a:	89 14 85 c0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf040],edx
c0018081:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018086:	a0 00 0f 03 c0       	mov    al,ds:0xc0030f00
c001808b:	40                   	inc    eax
c001808c:	a2 00 0f 03 c0       	mov    ds:0xc0030f00,al
c0018091:	e9 bb 01 00 00       	jmp    c0018251 <scanMADT()+0x469>
c0018096:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001809b:	0f 85 e9 00 00 00    	jne    c001818a <scanMADT()+0x3a2>
c00180a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a5:	8d 50 01             	lea    edx,[eax+0x1]
c00180a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180b0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180b4:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180bc:	8d 50 01             	lea    edx,[eax+0x1]
c00180bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180cb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00180cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d7:	01 d0                	add    eax,edx
c00180d9:	83 c0 2c             	add    eax,0x2c
c00180dc:	8a 00                	mov    al,BYTE PTR [eax]
c00180de:	0f b6 d0             	movzx  edx,al
c00180e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e5:	8d 48 01             	lea    ecx,[eax+0x1]
c00180e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ec:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180f0:	0f b6 c0             	movzx  eax,al
c00180f3:	c1 e0 08             	shl    eax,0x8
c00180f6:	89 d1                	mov    ecx,edx
c00180f8:	09 c1                	or     ecx,eax
c00180fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180fe:	8d 50 02             	lea    edx,[eax+0x2]
c0018101:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018105:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018109:	0f b6 c0             	movzx  eax,al
c001810c:	c1 e0 10             	shl    eax,0x10
c001810f:	09 c1                	or     ecx,eax
c0018111:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018115:	8d 50 03             	lea    edx,[eax+0x3]
c0018118:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001811c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018120:	0f b6 c0             	movzx  eax,al
c0018123:	c1 e0 18             	shl    eax,0x18
c0018126:	09 c8                	or     eax,ecx
c0018128:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001812c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018131:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018135:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018139:	01 d0                	add    eax,edx
c001813b:	83 c0 2c             	add    eax,0x2c
c001813e:	8a 00                	mov    al,BYTE PTR [eax]
c0018140:	0f b6 c0             	movzx  eax,al
c0018143:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018147:	8d 4a 01             	lea    ecx,[edx+0x1]
c001814a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001814e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018152:	0f b6 d2             	movzx  edx,dl
c0018155:	c1 e2 08             	shl    edx,0x8
c0018158:	09 d0                	or     eax,edx
c001815a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001815f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018164:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018169:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001816d:	88 90 c0 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd2840],dl
c0018173:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018178:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001817d:	66 89 84 12 e0 0e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf120],ax
c0018185:	e9 c7 00 00 00       	jmp    c0018251 <scanMADT()+0x469>
c001818a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001818f:	0f 85 b0 00 00 00    	jne    c0018245 <scanMADT()+0x45d>
c0018195:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018199:	8d 50 01             	lea    edx,[eax+0x1]
c001819c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181a4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181a8:	0f b6 c0             	movzx  eax,al
c00181ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b7:	01 d0                	add    eax,edx
c00181b9:	83 c0 2c             	add    eax,0x2c
c00181bc:	8a 00                	mov    al,BYTE PTR [eax]
c00181be:	0f b6 d0             	movzx  edx,al
c00181c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181c5:	8d 48 01             	lea    ecx,[eax+0x1]
c00181c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181cc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181d0:	0f b6 c0             	movzx  eax,al
c00181d3:	c1 e0 08             	shl    eax,0x8
c00181d6:	09 d0                	or     eax,edx
c00181d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181dc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e5:	8d 50 01             	lea    edx,[eax+0x1]
c00181e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181f0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181f4:	0f b6 c0             	movzx  eax,al
c00181f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ff:	c1 e0 08             	shl    eax,0x8
c0018202:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018206:	89 c1                	mov    ecx,eax
c0018208:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001820c:	c1 e0 18             	shl    eax,0x18
c001820f:	89 c3                	mov    ebx,eax
c0018211:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0018216:	8d 50 01             	lea    edx,[eax+0x1]
c0018219:	89 15 50 0e 03 c0    	mov    DWORD PTR ds:0xc0030e50,edx
c001821f:	09 d9                	or     ecx,ebx
c0018221:	89 ca                	mov    edx,ecx
c0018223:	89 14 85 60 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1a0],edx
c001822a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001822e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018236:	68 b4 b6 02 c0       	push   0xc002b6b4
c001823b:	e8 65 ac ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018240:	83 c4 10             	add    esp,0x10
c0018243:	eb 0c                	jmp    c0018251 <scanMADT()+0x469>
c0018245:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001824a:	75 05                	jne    c0018251 <scanMADT()+0x469>
c001824c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018251:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018256:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001825a:	01 d0                	add    eax,edx
c001825c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018260:	e9 54 fc ff ff       	jmp    c0017eb9 <scanMADT()+0xd1>
c0018265:	90                   	nop
c0018266:	eb 01                	jmp    c0018269 <scanMADT()+0x481>
c0018268:	90                   	nop
c0018269:	83 c4 38             	add    esp,0x38
c001826c:	5b                   	pop    ebx
c001826d:	c3                   	ret    

c001826e <ACPI::ACPI()>:
c001826e:	83 ec 0c             	sub    esp,0xc
c0018271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018275:	83 ec 08             	sub    esp,0x8
c0018278:	68 59 b5 02 c0       	push   0xc002b559
c001827d:	50                   	push   eax
c001827e:	e8 39 c2 ff ff       	call   c00144bc <Device::Device(char const*)>
c0018283:	83 c4 10             	add    esp,0x10
c0018286:	ba 28 b7 02 c0       	mov    edx,0xc002b728
c001828b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001828f:	89 10                	mov    DWORD PTR [eax],edx
c0018291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018295:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001829c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a0:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ae:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bc:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c7:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182ce:	e8 15 fb ff ff       	call   c0017de8 <scanMADT()>
c00182d3:	90                   	nop
c00182d4:	83 c4 0c             	add    esp,0xc
c00182d7:	c3                   	ret    

c00182d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182d8:	83 ec 2c             	sub    esp,0x2c
c00182db:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00182e3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182e7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00182eb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182f0:	88 d0                	mov    al,dl
c00182f2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182f6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00182fb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018303:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018307:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001830d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018311:	0f 8d 97 00 00 00    	jge    c00183ae <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018317:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001831b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001831f:	83 c2 2a             	add    edx,0x2a
c0018322:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018326:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001832b:	75 78                	jne    c00183a5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001832d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018331:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018335:	83 c2 2a             	add    edx,0x2a
c0018338:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001833c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018340:	75 63                	jne    c00183a5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018342:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018347:	74 3a                	je     c0018383 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018349:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001834d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018351:	83 c2 2a             	add    edx,0x2a
c0018354:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001835c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001835f:	39 c2                	cmp    edx,eax
c0018361:	74 10                	je     c0018373 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018363:	83 ec 0c             	sub    esp,0xc
c0018366:	68 f0 b6 02 c0       	push   0xc002b6f0
c001836b:	e8 0f 23 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0018370:	83 c4 10             	add    esp,0x10
c0018373:	83 ec 0c             	sub    esp,0xc
c0018376:	68 5e b5 02 c0       	push   0xc002b55e
c001837b:	e8 ff 22 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0018380:	83 c4 10             	add    esp,0x10
c0018383:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018387:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001838b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001838f:	83 c2 2a             	add    edx,0x2a
c0018392:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018396:	8b 02                	mov    eax,DWORD PTR [edx]
c0018398:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001839b:	89 01                	mov    DWORD PTR [ecx],eax
c001839d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183a0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183a5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183a9:	e9 55 ff ff ff       	jmp    c0018303 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183ae:	90                   	nop
c00183af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b3:	83 c4 2c             	add    esp,0x2c
c00183b6:	c2 04 00             	ret    0x4
c00183b9:	90                   	nop

c00183ba <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183ba:	83 ec 1c             	sub    esp,0x1c
c00183bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183c9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00183ce:	88 c8                	mov    al,cl
c00183d0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183d4:	88 d0                	mov    al,dl
c00183d6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183de:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183eb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00183ef:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00183f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018401:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018408:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001840d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018411:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018417:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001841b:	8d 48 01             	lea    ecx,[eax+0x1]
c001841e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018422:	83 c2 2a             	add    edx,0x2a
c0018425:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001842d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018437:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001843a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001843e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018446:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001844c:	8d 50 01             	lea    edx,[eax+0x1]
c001844f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018453:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018463:	3d 00 02 00 00       	cmp    eax,0x200
c0018468:	75 10                	jne    c001847a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001846a:	83 ec 0c             	sub    esp,0xc
c001846d:	68 6d b5 02 c0       	push   0xc002b56d
c0018472:	e8 08 22 00 00       	call   c001a67f <Krnl::panic(char const*)>
c0018477:	83 c4 10             	add    esp,0x10
c001847a:	90                   	nop
c001847b:	83 c4 1c             	add    esp,0x1c
c001847e:	c3                   	ret    
c001847f:	90                   	nop

c0018480 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018480:	b8 00 00 00 00       	mov    eax,0x0
c0018485:	c3                   	ret    

c0018486 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018486:	83 ec 1c             	sub    esp,0x1c
c0018489:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001848d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018490:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018494:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0018499:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001849e:	83 ec 08             	sub    esp,0x8
c00184a1:	52                   	push   edx
c00184a2:	50                   	push   eax
c00184a3:	e8 b8 69 ff ff       	call   c000ee60 <Computer::readCMOS(unsigned char)>
c00184a8:	83 c4 10             	add    esp,0x10
c00184ab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184af:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00184b4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184b9:	83 ec 04             	sub    esp,0x4
c00184bc:	6a 01                	push   0x1
c00184be:	52                   	push   edx
c00184bf:	50                   	push   eax
c00184c0:	e8 b1 6a ff ff       	call   c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184c5:	83 c4 10             	add    esp,0x10
c00184c8:	90                   	nop
c00184c9:	83 c4 1c             	add    esp,0x1c
c00184cc:	c3                   	ret    
c00184cd:	90                   	nop

c00184ce <ACPI::open(int, int, void*)>:
c00184ce:	53                   	push   ebx
c00184cf:	83 ec 28             	sub    esp,0x28
c00184d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184e8:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00184ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184f3:	83 e0 04             	and    eax,0x4
c00184f6:	84 c0                	test   al,al
c00184f8:	74 47                	je     c0018541 <ACPI::open(int, int, void*)+0x73>
c00184fa:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00184ff:	83 ec 08             	sub    esp,0x8
c0018502:	68 8a b5 02 c0       	push   0xc002b58a
c0018507:	50                   	push   eax
c0018508:	e8 3f f8 ff ff       	call   c0017d4c <findDataTable(unsigned char*, char*)>
c001850d:	83 c4 10             	add    esp,0x10
c0018510:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018514:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018519:	74 26                	je     c0018541 <ACPI::open(int, int, void*)+0x73>
c001851b:	83 ec 0c             	sub    esp,0xc
c001851e:	68 8f b5 02 c0       	push   0xc002b58f
c0018523:	e8 7d a9 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018528:	83 c4 10             	add    esp,0x10
c001852b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001853a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018541:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018549:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001854d:	8a 00                	mov    al,BYTE PTR [eax]
c001854f:	3c 01                	cmp    al,0x1
c0018551:	75 28                	jne    c001857b <ACPI::open(int, int, void*)+0xad>
c0018553:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018557:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001855e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018562:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018569:	83 ec 0c             	sub    esp,0xc
c001856c:	68 a0 b5 02 c0       	push   0xc002b5a0
c0018571:	e8 2f a9 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018576:	83 c4 10             	add    esp,0x10
c0018579:	eb 25                	jmp    c00185a0 <ACPI::open(int, int, void*)+0xd2>
c001857b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001857f:	8a 00                	mov    al,BYTE PTR [eax]
c0018581:	3c 02                	cmp    al,0x2
c0018583:	75 1b                	jne    c00185a0 <ACPI::open(int, int, void*)+0xd2>
c0018585:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018589:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018590:	83 ec 0c             	sub    esp,0xc
c0018593:	68 a8 b5 02 c0       	push   0xc002b5a8
c0018598:	e8 08 a9 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001859d:	83 c4 10             	add    esp,0x10
c00185a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a4:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185aa:	83 f0 01             	xor    eax,0x1
c00185ad:	84 c0                	test   al,al
c00185af:	74 6a                	je     c001861b <ACPI::open(int, int, void*)+0x14d>
c00185b1:	83 ec 0c             	sub    esp,0xc
c00185b4:	68 b0 b5 02 c0       	push   0xc002b5b0
c00185b9:	e8 e7 a8 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00185be:	83 c4 10             	add    esp,0x10
c00185c1:	e8 8a 7b fe ff       	call   c0000150 <manualPCIProbe>
c00185c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185ca:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00185cf:	75 28                	jne    c00185f9 <ACPI::open(int, int, void*)+0x12b>
c00185d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185e7:	83 ec 0c             	sub    esp,0xc
c00185ea:	68 be b5 02 c0       	push   0xc002b5be
c00185ef:	e8 b1 a8 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00185f4:	83 c4 10             	add    esp,0x10
c00185f7:	eb 22                	jmp    c001861b <ACPI::open(int, int, void*)+0x14d>
c00185f9:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185fe:	75 1b                	jne    c001861b <ACPI::open(int, int, void*)+0x14d>
c0018600:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018604:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001860b:	83 ec 0c             	sub    esp,0xc
c001860e:	68 c8 b5 02 c0       	push   0xc002b5c8
c0018613:	e8 8d a8 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018618:	83 c4 10             	add    esp,0x10
c001861b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001861f:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018625:	84 c0                	test   al,al
c0018627:	74 13                	je     c001863c <ACPI::open(int, int, void*)+0x16e>
c0018629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001862d:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018633:	83 f0 01             	xor    eax,0x1
c0018636:	0f b6 c0             	movzx  eax,al
c0018639:	40                   	inc    eax
c001863a:	eb 05                	jmp    c0018641 <ACPI::open(int, int, void*)+0x173>
c001863c:	b8 00 00 00 00       	mov    eax,0x0
c0018641:	83 ec 08             	sub    esp,0x8
c0018644:	50                   	push   eax
c0018645:	68 d2 b5 02 c0       	push   0xc002b5d2
c001864a:	e8 56 a8 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001864f:	83 c4 10             	add    esp,0x10
c0018652:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018656:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001865c:	84 c0                	test   al,al
c001865e:	74 67                	je     c00186c7 <ACPI::open(int, int, void*)+0x1f9>
c0018660:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018668:	83 ec 0c             	sub    esp,0xc
c001866b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001866f:	e8 d7 71 ff ff       	call   c000f84b <malloc>
c0018674:	83 c4 10             	add    esp,0x10
c0018677:	89 c3                	mov    ebx,eax
c0018679:	83 ec 0c             	sub    esp,0xc
c001867c:	53                   	push   ebx
c001867d:	e8 16 a3 00 00       	call   c0022998 <PCI::PCI()>
c0018682:	83 c4 10             	add    esp,0x10
c0018685:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018689:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001868d:	83 ec 08             	sub    esp,0x8
c0018690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018694:	50                   	push   eax
c0018695:	e8 32 bc ff ff       	call   c00142cc <Device::addChild(Device*)>
c001869a:	83 c4 10             	add    esp,0x10
c001869d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00186a3:	83 c0 08             	add    eax,0x8
c00186a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00186a8:	6a 00                	push   0x0
c00186aa:	6a 00                	push   0x0
c00186ac:	6a 00                	push   0x0
c00186ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186b2:	ff d0                	call   eax
c00186b4:	83 c4 10             	add    esp,0x10
c00186b7:	83 ec 0c             	sub    esp,0xc
c00186ba:	68 db b5 02 c0       	push   0xc002b5db
c00186bf:	e8 e1 a7 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00186c4:	83 c4 10             	add    esp,0x10
c00186c7:	83 ec 0c             	sub    esp,0xc
c00186ca:	68 e6 b5 02 c0       	push   0xc002b5e6
c00186cf:	e8 81 46 00 00       	call   c001cd55 <Thr::loadKernelSymbolTable(char const*)>
c00186d4:	83 c4 10             	add    esp,0x10
c00186d7:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c00186dd:	83 ec 08             	sub    esp,0x8
c00186e0:	6a 01                	push   0x1
c00186e2:	68 04 b6 02 c0       	push   0xc002b604
c00186e7:	e8 c6 50 00 00       	call   c001d7b2 <Thr::loadDLL(char const*, bool)>
c00186ec:	83 c4 10             	add    esp,0x10
c00186ef:	83 ec 08             	sub    esp,0x8
c00186f2:	53                   	push   ebx
c00186f3:	50                   	push   eax
c00186f4:	e8 ed 52 00 00       	call   c001d9e6 <Thr::executeDLL(unsigned long, void*)>
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0018702:	83 ec 08             	sub    esp,0x8
c0018705:	6a 01                	push   0x1
c0018707:	68 21 b6 02 c0       	push   0xc002b621
c001870c:	e8 a1 50 00 00       	call   c001d7b2 <Thr::loadDLL(char const*, bool)>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	83 ec 08             	sub    esp,0x8
c0018717:	53                   	push   ebx
c0018718:	50                   	push   eax
c0018719:	e8 c8 52 00 00       	call   c001d9e6 <Thr::executeDLL(unsigned long, void*)>
c001871e:	83 c4 10             	add    esp,0x10
c0018721:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0018726:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001872c:	83 e0 04             	and    eax,0x4
c001872f:	84 c0                	test   al,al
c0018731:	0f 84 d2 00 00 00    	je     c0018809 <ACPI::open(int, int, void*)+0x33b>
c0018737:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001873e:	83 ec 0c             	sub    esp,0xc
c0018741:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018745:	e8 01 71 ff ff       	call   c000f84b <malloc>
c001874a:	83 c4 10             	add    esp,0x10
c001874d:	89 c3                	mov    ebx,eax
c001874f:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c0018754:	83 ec 04             	sub    esp,0x4
c0018757:	50                   	push   eax
c0018758:	68 3e b6 02 c0       	push   0xc002b63e
c001875d:	53                   	push   ebx
c001875e:	e8 9b ac ff ff       	call   c00133fe <File::File(char const*, Process*)>
c0018763:	83 c4 10             	add    esp,0x10
c0018766:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001876a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001876f:	74 17                	je     c0018788 <ACPI::open(int, int, void*)+0x2ba>
c0018771:	83 ec 0c             	sub    esp,0xc
c0018774:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018778:	e8 53 af ff ff       	call   c00136d0 <File::exists()>
c001877d:	83 c4 10             	add    esp,0x10
c0018780:	84 c0                	test   al,al
c0018782:	74 04                	je     c0018788 <ACPI::open(int, int, void*)+0x2ba>
c0018784:	b0 01                	mov    al,0x1
c0018786:	eb 02                	jmp    c001878a <ACPI::open(int, int, void*)+0x2bc>
c0018788:	b0 00                	mov    al,0x0
c001878a:	84 c0                	test   al,al
c001878c:	74 22                	je     c00187b0 <ACPI::open(int, int, void*)+0x2e2>
c001878e:	83 ec 08             	sub    esp,0x8
c0018791:	6a 01                	push   0x1
c0018793:	68 3e b6 02 c0       	push   0xc002b63e
c0018798:	e8 15 50 00 00       	call   c001d7b2 <Thr::loadDLL(char const*, bool)>
c001879d:	83 c4 10             	add    esp,0x10
c00187a0:	83 ec 08             	sub    esp,0x8
c00187a3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00187a7:	50                   	push   eax
c00187a8:	e8 39 52 00 00       	call   c001d9e6 <Thr::executeDLL(unsigned long, void*)>
c00187ad:	83 c4 10             	add    esp,0x10
c00187b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187b5:	74 1e                	je     c00187d5 <ACPI::open(int, int, void*)+0x307>
c00187b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187bc:	74 17                	je     c00187d5 <ACPI::open(int, int, void*)+0x307>
c00187be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00187c4:	83 c0 08             	add    eax,0x8
c00187c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00187c9:	83 ec 0c             	sub    esp,0xc
c00187cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187d0:	ff d0                	call   eax
c00187d2:	83 c4 10             	add    esp,0x10
c00187d5:	a1 48 0e 03 c0       	mov    eax,ds:0xc0030e48
c00187da:	83 ec 08             	sub    esp,0x8
c00187dd:	68 5b b6 02 c0       	push   0xc002b65b
c00187e2:	50                   	push   eax
c00187e3:	e8 64 f5 ff ff       	call   c0017d4c <findDataTable(unsigned char*, char*)>
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187ef:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00187f4:	74 13                	je     c0018809 <ACPI::open(int, int, void*)+0x33b>
c00187f6:	83 ec 08             	sub    esp,0x8
c00187f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018801:	e8 80 fc ff ff       	call   c0018486 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018806:	83 c4 10             	add    esp,0x10
c0018809:	b8 00 00 00 00       	mov    eax,0x0
c001880e:	83 c4 28             	add    esp,0x28
c0018811:	5b                   	pop    ebx
c0018812:	c3                   	ret    
c0018813:	90                   	nop

c0018814 <ACPI::sleep()>:
c0018814:	83 ec 0c             	sub    esp,0xc
c0018817:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001881c:	85 c0                	test   eax,eax
c001881e:	74 07                	je     c0018827 <ACPI::sleep()+0x13>
c0018820:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c0018825:	ff d0                	call   eax
c0018827:	90                   	nop
c0018828:	83 c4 0c             	add    esp,0xc
c001882b:	c3                   	ret    

c001882c <CPU::close(int, int, void*)>:
c001882c:	31 c0                	xor    eax,eax
c001882e:	c3                   	ret    
c001882f:	90                   	nop

c0018830 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018830:	55                   	push   ebp
c0018831:	57                   	push   edi
c0018832:	56                   	push   esi
c0018833:	53                   	push   ebx
c0018834:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018838:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001883c:	89 ce                	mov    esi,ecx
c001883e:	89 d5                	mov    ebp,edx
c0018840:	80 f9 04             	cmp    cl,0x4
c0018843:	75 28                	jne    c001886d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018845:	8d 42 f9             	lea    eax,[edx-0x7]
c0018848:	3c 03                	cmp    al,0x3
c001884a:	0f 86 63 01 00 00    	jbe    c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018850:	80 fa 03             	cmp    dl,0x3
c0018853:	0f 84 5a 01 00 00    	je     c00189b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018859:	8d 7a f2             	lea    edi,[edx-0xe]
c001885c:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018861:	89 fb                	mov    ebx,edi
c0018863:	80 fb 01             	cmp    bl,0x1
c0018866:	77 4e                	ja     c00188b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018868:	e9 52 01 00 00       	jmp    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886d:	80 f9 05             	cmp    cl,0x5
c0018870:	75 4d                	jne    c00188bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018872:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018877:	80 fa 03             	cmp    dl,0x3
c001887a:	0f 86 3f 01 00 00    	jbe    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018880:	8d 7a fa             	lea    edi,[edx-0x6]
c0018883:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018888:	89 fb                	mov    ebx,edi
c001888a:	80 fb 01             	cmp    bl,0x1
c001888d:	0f 86 2c 01 00 00    	jbe    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018893:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018898:	80 fa 08             	cmp    dl,0x8
c001889b:	0f 84 1e 01 00 00    	je     c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a1:	89 d7                	mov    edi,edx
c00188a3:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c00188a8:	83 e7 fb             	and    edi,0xfffffffb
c00188ab:	89 fb                	mov    ebx,edi
c00188ad:	80 fb 09             	cmp    bl,0x9
c00188b0:	0f 84 09 01 00 00    	je     c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b6:	31 c0                	xor    eax,eax
c00188b8:	89 eb                	mov    ebx,ebp
c00188ba:	0f b6 fb             	movzx  edi,bl
c00188bd:	eb 30                	jmp    c00188ef <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188bf:	31 c0                	xor    eax,eax
c00188c1:	80 f9 06             	cmp    cl,0x6
c00188c4:	75 f2                	jne    c00188b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188c6:	80 fa 0a             	cmp    dl,0xa
c00188c9:	77 ed                	ja     c00188b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188cb:	bf de 05 00 00       	mov    edi,0x5de
c00188d0:	0f a3 d7             	bt     edi,edx
c00188d3:	73 e3                	jae    c00188b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188d5:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c00188da:	e9 e0 00 00 00       	jmp    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188df:	39 c7                	cmp    edi,eax
c00188e1:	0f 84 d3 00 00 00    	je     c00189ba <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188e7:	40                   	inc    eax
c00188e8:	3d d0 00 00 00       	cmp    eax,0xd0
c00188ed:	74 09                	je     c00188f8 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00188ef:	89 f3                	mov    ebx,esi
c00188f1:	80 fb 0f             	cmp    bl,0xf
c00188f4:	75 f1                	jne    c00188e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00188f6:	eb e7                	jmp    c00188df <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00188f8:	80 f9 10             	cmp    cl,0x10
c00188fb:	75 14                	jne    c0018911 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188fd:	8d 42 fc             	lea    eax,[edx-0x4]
c0018900:	83 e0 fb             	and    eax,0xfffffffb
c0018903:	3c 02                	cmp    al,0x2
c0018905:	76 34                	jbe    c001893b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018907:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c001890c:	80 fa 02             	cmp    dl,0x2
c001890f:	eb 24                	jmp    c0018935 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018911:	80 f9 11             	cmp    cl,0x11
c0018914:	75 13                	jne    c0018929 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018916:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c001891b:	80 fa 03             	cmp    dl,0x3
c001891e:	0f 85 9b 00 00 00    	jne    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018924:	e9 91 00 00 00       	jmp    c00189ba <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018929:	80 f9 12             	cmp    cl,0x12
c001892c:	75 14                	jne    c0018942 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001892e:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c0018933:	fe ca                	dec    dl
c0018935:	0f 85 84 00 00 00    	jne    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893b:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018940:	eb 7d                	jmp    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018942:	80 f9 14             	cmp    cl,0x14
c0018945:	75 12                	jne    c0018959 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018947:	4a                   	dec    edx
c0018948:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c001894d:	80 fa 01             	cmp    dl,0x1
c0018950:	77 6d                	ja     c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018952:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018957:	eb 66                	jmp    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018959:	80 f9 15             	cmp    cl,0x15
c001895c:	75 31                	jne    c001898f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001895e:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018963:	80 fa 01             	cmp    dl,0x1
c0018966:	74 57                	je     c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018968:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c001896d:	80 fa 13             	cmp    dl,0x13
c0018970:	76 0c                	jbe    c001897e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018972:	80 fa 30             	cmp    dl,0x30
c0018975:	75 48                	jne    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018977:	b8 40 da 02 c0       	mov    eax,0xc002da40
c001897c:	eb 41                	jmp    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001897e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018983:	0f a3 d1             	bt     ecx,edx
c0018986:	73 37                	jae    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018988:	b8 30 da 02 c0       	mov    eax,0xc002da30
c001898d:	eb 30                	jmp    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001898f:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c0018994:	80 f9 16             	cmp    cl,0x16
c0018997:	75 26                	jne    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018999:	b8 50 da 02 c0       	mov    eax,0xc002da50
c001899e:	84 d2                	test   dl,dl
c00189a0:	74 1d                	je     c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a2:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c00189a7:	80 fa 30             	cmp    dl,0x30
c00189aa:	75 13                	jne    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ac:	b8 60 da 02 c0       	mov    eax,0xc002da60
c00189b1:	eb 0c                	jmp    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b3:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c00189b8:	eb 05                	jmp    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ba:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c00189bf:	5b                   	pop    ebx
c00189c0:	5e                   	pop    esi
c00189c1:	5f                   	pop    edi
c00189c2:	5d                   	pop    ebp
c00189c3:	c3                   	ret    

c00189c4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189cc:	80 f9 04             	cmp    cl,0x4
c00189cf:	75 6b                	jne    c0018a3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189d1:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c00189d6:	80 fa 01             	cmp    dl,0x1
c00189d9:	0f 86 92 02 00 00    	jbe    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189df:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c00189e4:	80 fa 02             	cmp    dl,0x2
c00189e7:	0f 84 84 02 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ed:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00189f2:	80 fa 03             	cmp    dl,0x3
c00189f5:	0f 84 76 02 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fb:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a00:	80 fa 04             	cmp    dl,0x4
c0018a03:	0f 84 68 02 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a09:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018a0e:	80 fa 05             	cmp    dl,0x5
c0018a11:	0f 84 5a 02 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a17:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a1c:	80 fa 07             	cmp    dl,0x7
c0018a1f:	0f 84 4c 02 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a25:	83 ea 08             	sub    edx,0x8
c0018a28:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c0018a2d:	80 fa 01             	cmp    dl,0x1
c0018a30:	0f 87 3b 02 00 00    	ja     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a36:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018a3b:	c3                   	ret    
c0018a3c:	80 f9 05             	cmp    cl,0x5
c0018a3f:	75 45                	jne    c0018a86 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a41:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a44:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018a49:	80 f9 02             	cmp    cl,0x2
c0018a4c:	0f 86 1f 02 00 00    	jbe    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a52:	80 fa 04             	cmp    dl,0x4
c0018a55:	0f 84 f3 01 00 00    	je     c0018c4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a5b:	80 fa 07             	cmp    dl,0x7
c0018a5e:	0f 84 0d 02 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a64:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018a69:	80 fa 08             	cmp    dl,0x8
c0018a6c:	0f 84 ff 01 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a72:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c0018a77:	80 fa 09             	cmp    dl,0x9
c0018a7a:	0f 85 f1 01 00 00    	jne    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a80:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018a85:	c3                   	ret    
c0018a86:	80 f9 06             	cmp    cl,0x6
c0018a89:	0f 85 85 01 00 00    	jne    c0018c14 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a8f:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018a94:	80 fa 01             	cmp    dl,0x1
c0018a97:	0f 84 d4 01 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9d:	8d 42 fb             	lea    eax,[edx-0x5]
c0018aa0:	3c 01                	cmp    al,0x1
c0018aa2:	0f 86 ac 01 00 00    	jbe    c0018c54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018aa8:	80 fa 03             	cmp    dl,0x3
c0018aab:	0f 84 a3 01 00 00    	je     c0018c54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ab1:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018ab4:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018ab9:	80 f9 01             	cmp    cl,0x1
c0018abc:	0f 86 af 01 00 00    	jbe    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac2:	80 fa 09             	cmp    dl,0x9
c0018ac5:	0f 84 8f 01 00 00    	je     c0018c5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018acb:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018ace:	80 f9 01             	cmp    cl,0x1
c0018ad1:	0f 86 9a 01 00 00    	jbe    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad7:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018adc:	80 fa 0d             	cmp    dl,0xd
c0018adf:	0f 84 8c 01 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae5:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018aea:	80 fa 0e             	cmp    dl,0xe
c0018aed:	0f 84 7e 01 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af3:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018af8:	80 fa 0f             	cmp    dl,0xf
c0018afb:	0f 84 70 01 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b01:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018b06:	80 fa 15             	cmp    dl,0x15
c0018b09:	0f 84 62 01 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b12:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b17:	80 f9 01             	cmp    cl,0x1
c0018b1a:	0f 86 51 01 00 00    	jbe    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b20:	80 fa 1a             	cmp    dl,0x1a
c0018b23:	0f 84 37 01 00 00    	je     c0018c60 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b29:	80 fa 1c             	cmp    dl,0x1c
c0018b2c:	0f 84 34 01 00 00    	je     c0018c66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b32:	80 fa 1d             	cmp    dl,0x1d
c0018b35:	0f 84 36 01 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3b:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018b40:	80 fa 25             	cmp    dl,0x25
c0018b43:	0f 84 28 01 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b49:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b4c:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018b51:	80 f9 01             	cmp    cl,0x1
c0018b54:	0f 86 17 01 00 00    	jbe    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5a:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018b5f:	80 fa 2a             	cmp    dl,0x2a
c0018b62:	0f 84 09 01 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b68:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018b6d:	80 fa 2c             	cmp    dl,0x2c
c0018b70:	0f 84 fb 00 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b76:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018b7b:	80 fa 2d             	cmp    dl,0x2d
c0018b7e:	0f 84 ed 00 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b84:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018b89:	80 fa 2e             	cmp    dl,0x2e
c0018b8c:	0f 84 df 00 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b92:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018b97:	80 fa 2f             	cmp    dl,0x2f
c0018b9a:	0f 84 d1 00 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba0:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018ba3:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018ba8:	80 f9 01             	cmp    cl,0x1
c0018bab:	0f 86 c0 00 00 00    	jbe    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb1:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018bb6:	80 fa 37             	cmp    dl,0x37
c0018bb9:	0f 84 b2 00 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbf:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018bc4:	80 fa 3a             	cmp    dl,0x3a
c0018bc7:	0f 84 a4 00 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcd:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018bd2:	80 fa 3c             	cmp    dl,0x3c
c0018bd5:	0f 84 96 00 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdb:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018be0:	80 fa 3d             	cmp    dl,0x3d
c0018be3:	0f 84 88 00 00 00    	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be9:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018bee:	80 fa 3e             	cmp    dl,0x3e
c0018bf1:	74 7e                	je     c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf3:	8d 42 bb             	lea    eax,[edx-0x45]
c0018bf6:	3c 01                	cmp    al,0x1
c0018bf8:	76 72                	jbe    c0018c6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bfa:	80 fa 3f             	cmp    dl,0x3f
c0018bfd:	74 6d                	je     c0018c6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bff:	80 fa 4a             	cmp    dl,0x4a
c0018c02:	74 0a                	je     c0018c0e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c04:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c0018c09:	80 fa 4d             	cmp    dl,0x4d
c0018c0c:	75 63                	jne    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0e:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018c13:	c3                   	ret    
c0018c14:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c0018c19:	80 f9 0b             	cmp    cl,0xb
c0018c1c:	75 0a                	jne    c0018c28 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c1e:	fe ca                	dec    dl
c0018c20:	75 4f                	jne    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c22:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018c27:	c3                   	ret    
c0018c28:	80 f9 0f             	cmp    cl,0xf
c0018c2b:	75 44                	jne    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2d:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018c32:	80 fa 02             	cmp    dl,0x2
c0018c35:	76 3a                	jbe    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c37:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c3a:	3c 01                	cmp    al,0x1
c0018c3c:	76 0a                	jbe    c0018c48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c3e:	b8 3e ba 02 c0       	mov    eax,0xc002ba3e
c0018c43:	80 fa 06             	cmp    dl,0x6
c0018c46:	75 29                	jne    c0018c71 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c48:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018c4d:	c3                   	ret    
c0018c4e:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018c53:	c3                   	ret    
c0018c54:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018c59:	c3                   	ret    
c0018c5a:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018c5f:	c3                   	ret    
c0018c60:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018c65:	c3                   	ret    
c0018c66:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018c6b:	c3                   	ret    
c0018c6c:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018c71:	c3                   	ret    

c0018c72 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c72:	60                   	pusha  
c0018c73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c7f:	9c                   	pushf  
c0018c80:	fa                   	cli    
c0018c81:	0f 09                	wbinvd 
c0018c83:	0f 30                	wrmsr  
c0018c85:	9d                   	popf   
c0018c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c8a:	89 02                	mov    DWORD PTR [edx],eax
c0018c8c:	61                   	popa   
c0018c8d:	c3                   	ret    

c0018c8e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c8e:	60                   	pusha  
c0018c8f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c93:	9c                   	pushf  
c0018c94:	fa                   	cli    
c0018c95:	0f 09                	wbinvd 
c0018c97:	31 c0                	xor    eax,eax
c0018c99:	31 d2                	xor    edx,edx
c0018c9b:	0f 32                	rdmsr  
c0018c9d:	9d                   	popf   
c0018c9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ca2:	89 02                	mov    DWORD PTR [edx],eax
c0018ca4:	61                   	popa   
c0018ca5:	c3                   	ret    

c0018ca6 <CPU::AMD_K6_writeback(int, int, int)>:
c0018ca6:	56                   	push   esi
c0018ca7:	53                   	push   ebx
c0018ca8:	83 ec 10             	sub    esp,0x10
c0018cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018caf:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018cb4:	75 5d                	jne    c0018d13 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cb6:	83 f8 08             	cmp    eax,0x8
c0018cb9:	75 09                	jne    c0018cc4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018cbb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cc0:	7e 13                	jle    c0018cd5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cc2:	eb 30                	jmp    c0018cf4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cc4:	83 f8 06             	cmp    eax,0x6
c0018cc7:	7c 4a                	jl     c0018d13 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cc9:	83 f8 07             	cmp    eax,0x7
c0018ccc:	7e 07                	jle    c0018cd5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cce:	83 f8 09             	cmp    eax,0x9
c0018cd1:	74 21                	je     c0018cf4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cd3:	eb 3e                	jmp    c0018d13 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cd5:	89 e6                	mov    esi,esp
c0018cd7:	8b 1d a8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a8
c0018cdd:	56                   	push   esi
c0018cde:	c1 eb 15             	shr    ebx,0x15
c0018ce1:	68 82 00 00 c0       	push   0xc0000082
c0018ce6:	83 e3 7e             	and    ebx,0x7e
c0018ce9:	e8 a0 ff ff ff       	call   c0018c8e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cee:	56                   	push   esi
c0018cef:	6a 00                	push   0x0
c0018cf1:	53                   	push   ebx
c0018cf2:	eb 12                	jmp    c0018d06 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018cf4:	89 e3                	mov    ebx,esp
c0018cf6:	53                   	push   ebx
c0018cf7:	68 82 00 00 c0       	push   0xc0000082
c0018cfc:	e8 8d ff ff ff       	call   c0018c8e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d01:	53                   	push   ebx
c0018d02:	6a 00                	push   0x0
c0018d04:	6a 00                	push   0x0
c0018d06:	68 82 00 00 c0       	push   0xc0000082
c0018d0b:	e8 62 ff ff ff       	call   c0018c72 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d10:	83 c4 18             	add    esp,0x18
c0018d13:	83 c4 10             	add    esp,0x10
c0018d16:	5b                   	pop    ebx
c0018d17:	5e                   	pop    esi
c0018d18:	c3                   	ret    
c0018d19:	90                   	nop

c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d1a:	55                   	push   ebp
c0018d1b:	57                   	push   edi
c0018d1c:	56                   	push   esi
c0018d1d:	53                   	push   ebx
c0018d1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d22:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d26:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d2a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d2e:	39 05 80 da 02 c0    	cmp    DWORD PTR ds:0xc002da80,eax
c0018d34:	75 23                	jne    c0018d59 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d36:	a1 ac 10 03 c0       	mov    eax,ds:0xc00310ac
c0018d3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d3f:	89 06                	mov    DWORD PTR [esi],eax
c0018d41:	a1 a8 10 03 c0       	mov    eax,ds:0xc00310a8
c0018d46:	89 07                	mov    DWORD PTR [edi],eax
c0018d48:	a1 a4 10 03 c0       	mov    eax,ds:0xc00310a4
c0018d4d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d50:	a1 a0 10 03 c0       	mov    eax,ds:0xc00310a0
c0018d55:	89 02                	mov    DWORD PTR [edx],eax
c0018d57:	eb 3f                	jmp    c0018d98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d59:	31 c9                	xor    ecx,ecx
c0018d5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d5f:	0f a2                	cpuid  
c0018d61:	89 06                	mov    DWORD PTR [esi],eax
c0018d63:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d69:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d6c:	89 10                	mov    DWORD PTR [eax],edx
c0018d6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d72:	a3 80 da 02 c0       	mov    ds:0xc002da80,eax
c0018d77:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d79:	a3 ac 10 03 c0       	mov    ds:0xc00310ac,eax
c0018d7e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d80:	a3 a8 10 03 c0       	mov    ds:0xc00310a8,eax
c0018d85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d88:	a3 a4 10 03 c0       	mov    ds:0xc00310a4,eax
c0018d8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d91:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d93:	a3 a0 10 03 c0       	mov    ds:0xc00310a0,eax
c0018d98:	5b                   	pop    ebx
c0018d99:	5e                   	pop    esi
c0018d9a:	5f                   	pop    edi
c0018d9b:	5d                   	pop    ebp
c0018d9c:	c3                   	ret    
c0018d9d:	90                   	nop

c0018d9e <CPU::cpuidCheckEDX(unsigned int)>:
c0018d9e:	83 ec 10             	sub    esp,0x10
c0018da1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da5:	50                   	push   eax
c0018da6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018daa:	50                   	push   eax
c0018dab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018daf:	50                   	push   eax
c0018db0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db4:	50                   	push   eax
c0018db5:	6a 01                	push   0x1
c0018db7:	e8 5e ff ff ff       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dc0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018dc4:	0f 95 c0             	setne  al
c0018dc7:	83 c4 24             	add    esp,0x24
c0018dca:	c3                   	ret    
c0018dcb:	90                   	nop

c0018dcc <CPU::cpuidCheckECX(unsigned int)>:
c0018dcc:	83 ec 10             	sub    esp,0x10
c0018dcf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd3:	50                   	push   eax
c0018dd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd8:	50                   	push   eax
c0018dd9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ddd:	50                   	push   eax
c0018dde:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de2:	50                   	push   eax
c0018de3:	6a 01                	push   0x1
c0018de5:	e8 30 ff ff ff       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dee:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018df2:	0f 95 c0             	setne  al
c0018df5:	83 c4 24             	add    esp,0x24
c0018df8:	c3                   	ret    
c0018df9:	90                   	nop

c0018dfa <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018dfa:	83 ec 10             	sub    esp,0x10
c0018dfd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e01:	50                   	push   eax
c0018e02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e06:	50                   	push   eax
c0018e07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e0b:	50                   	push   eax
c0018e0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e10:	50                   	push   eax
c0018e11:	6a 07                	push   0x7
c0018e13:	e8 02 ff ff ff       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e1c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e20:	0f 95 c0             	setne  al
c0018e23:	83 c4 24             	add    esp,0x24
c0018e26:	c3                   	ret    
c0018e27:	90                   	nop

c0018e28 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e28:	83 ec 10             	sub    esp,0x10
c0018e2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e2f:	50                   	push   eax
c0018e30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e34:	50                   	push   eax
c0018e35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e39:	50                   	push   eax
c0018e3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e3e:	50                   	push   eax
c0018e3f:	6a 07                	push   0x7
c0018e41:	e8 d4 fe ff ff       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e4a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e4e:	0f 95 c0             	setne  al
c0018e51:	83 c4 24             	add    esp,0x24
c0018e54:	c3                   	ret    
c0018e55:	90                   	nop

c0018e56 <CPU::CPU()>:
c0018e56:	83 ec 0c             	sub    esp,0xc
c0018e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e5d:	83 ec 08             	sub    esp,0x8
c0018e60:	68 3e ba 02 c0       	push   0xc002ba3e
c0018e65:	50                   	push   eax
c0018e66:	e8 51 b6 ff ff       	call   c00144bc <Device::Device(char const*)>
c0018e6b:	83 c4 10             	add    esp,0x10
c0018e6e:	ba 18 bb 02 c0       	mov    edx,0xc002bb18
c0018e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e77:	89 10                	mov    DWORD PTR [eax],edx
c0018e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e8b:	05 78 01 00 00       	add    eax,0x178
c0018e90:	83 ec 0c             	sub    esp,0xc
c0018e93:	50                   	push   eax
c0018e94:	e8 c7 61 ff ff       	call   c000f060 <GDT::GDT()>
c0018e99:	83 c4 10             	add    esp,0x10
c0018e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea0:	05 7c 09 00 00       	add    eax,0x97c
c0018ea5:	83 ec 0c             	sub    esp,0xc
c0018ea8:	50                   	push   eax
c0018ea9:	e8 14 64 ff ff       	call   c000f2c2 <IDT::IDT()>
c0018eae:	83 c4 10             	add    esp,0x10
c0018eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eb5:	05 7c 11 00 00       	add    eax,0x117c
c0018eba:	83 ec 0c             	sub    esp,0xc
c0018ebd:	50                   	push   eax
c0018ebe:	e8 b9 85 ff ff       	call   c001147c <TSS::TSS()>
c0018ec3:	83 c4 10             	add    esp,0x10
c0018ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eca:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ed5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018edf:	90                   	nop
c0018ee0:	83 c4 0c             	add    esp,0xc
c0018ee3:	c3                   	ret    

c0018ee4 <CPU::displayFeatures()>:
c0018ee4:	53                   	push   ebx
c0018ee5:	83 ec 10             	sub    esp,0x10
c0018ee8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018eec:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018ef2:	68 4c b7 02 c0       	push   0xc002b74c
c0018ef7:	e8 a9 9f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018efc:	59                   	pop    ecx
c0018efd:	58                   	pop    eax
c0018efe:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f04:	50                   	push   eax
c0018f05:	68 5d b7 02 c0       	push   0xc002b75d
c0018f0a:	e8 96 9f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018f0f:	58                   	pop    eax
c0018f10:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f16:	5a                   	pop    edx
c0018f17:	c1 e8 0e             	shr    eax,0xe
c0018f1a:	0f b6 c0             	movzx  eax,al
c0018f1d:	50                   	push   eax
c0018f1e:	68 6e b7 02 c0       	push   0xc002b76e
c0018f23:	e8 7d 9f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018f28:	59                   	pop    ecx
c0018f29:	58                   	pop    eax
c0018f2a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f30:	66 c1 e8 06          	shr    ax,0x6
c0018f34:	0f b6 c0             	movzx  eax,al
c0018f37:	50                   	push   eax
c0018f38:	68 7f b7 02 c0       	push   0xc002b77f
c0018f3d:	e8 63 9f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018f42:	c7 04 24 2c bc 02 c0 	mov    DWORD PTR [esp],0xc002bc2c
c0018f49:	e8 57 9f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018f4e:	83 c4 10             	add    esp,0x10
c0018f51:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018f56:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f5d:	74 05                	je     c0018f64 <CPU::displayFeatures()+0x80>
c0018f5f:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018f64:	52                   	push   edx
c0018f65:	52                   	push   edx
c0018f66:	50                   	push   eax
c0018f67:	68 90 b7 02 c0       	push   0xc002b790
c0018f6c:	e8 34 9f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018f71:	83 c4 10             	add    esp,0x10
c0018f74:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018f79:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f80:	78 05                	js     c0018f87 <CPU::displayFeatures()+0xa3>
c0018f82:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018f87:	51                   	push   ecx
c0018f88:	51                   	push   ecx
c0018f89:	50                   	push   eax
c0018f8a:	68 a7 b7 02 c0       	push   0xc002b7a7
c0018f8f:	e8 11 9f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018f94:	83 c4 10             	add    esp,0x10
c0018f97:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018f9c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018fa3:	75 05                	jne    c0018faa <CPU::displayFeatures()+0xc6>
c0018fa5:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018faa:	52                   	push   edx
c0018fab:	52                   	push   edx
c0018fac:	50                   	push   eax
c0018fad:	68 be b7 02 c0       	push   0xc002b7be
c0018fb2:	e8 ee 9e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018fb7:	83 c4 10             	add    esp,0x10
c0018fba:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018fbf:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fc6:	75 05                	jne    c0018fcd <CPU::displayFeatures()+0xe9>
c0018fc8:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018fcd:	51                   	push   ecx
c0018fce:	51                   	push   ecx
c0018fcf:	50                   	push   eax
c0018fd0:	68 d5 b7 02 c0       	push   0xc002b7d5
c0018fd5:	e8 cb 9e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018fda:	83 c4 10             	add    esp,0x10
c0018fdd:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018fe2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018fe9:	75 05                	jne    c0018ff0 <CPU::displayFeatures()+0x10c>
c0018feb:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018ff0:	52                   	push   edx
c0018ff1:	52                   	push   edx
c0018ff2:	50                   	push   eax
c0018ff3:	68 ec b7 02 c0       	push   0xc002b7ec
c0018ff8:	e8 a8 9e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0018ffd:	83 c4 10             	add    esp,0x10
c0019000:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019005:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001900c:	75 05                	jne    c0019013 <CPU::displayFeatures()+0x12f>
c001900e:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019013:	51                   	push   ecx
c0019014:	51                   	push   ecx
c0019015:	50                   	push   eax
c0019016:	68 03 b8 02 c0       	push   0xc002b803
c001901b:	e8 85 9e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0019020:	83 c4 10             	add    esp,0x10
c0019023:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019028:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001902f:	75 05                	jne    c0019036 <CPU::displayFeatures()+0x152>
c0019031:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019036:	52                   	push   edx
c0019037:	52                   	push   edx
c0019038:	50                   	push   eax
c0019039:	68 1a b8 02 c0       	push   0xc002b81a
c001903e:	e8 62 9e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0019043:	83 c4 10             	add    esp,0x10
c0019046:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001904b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019052:	75 05                	jne    c0019059 <CPU::displayFeatures()+0x175>
c0019054:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019059:	51                   	push   ecx
c001905a:	51                   	push   ecx
c001905b:	50                   	push   eax
c001905c:	68 31 b8 02 c0       	push   0xc002b831
c0019061:	e8 3f 9e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0019066:	83 c4 10             	add    esp,0x10
c0019069:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001906e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019075:	75 05                	jne    c001907c <CPU::displayFeatures()+0x198>
c0019077:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001907c:	52                   	push   edx
c001907d:	52                   	push   edx
c001907e:	50                   	push   eax
c001907f:	68 48 b8 02 c0       	push   0xc002b848
c0019084:	e8 1c 9e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0019089:	83 c4 10             	add    esp,0x10
c001908c:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019091:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019098:	75 05                	jne    c001909f <CPU::displayFeatures()+0x1bb>
c001909a:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001909f:	51                   	push   ecx
c00190a0:	51                   	push   ecx
c00190a1:	50                   	push   eax
c00190a2:	68 5f b8 02 c0       	push   0xc002b85f
c00190a7:	e8 f9 9d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00190ac:	83 c4 10             	add    esp,0x10
c00190af:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c00190b4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190bb:	75 05                	jne    c00190c2 <CPU::displayFeatures()+0x1de>
c00190bd:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c00190c2:	52                   	push   edx
c00190c3:	52                   	push   edx
c00190c4:	50                   	push   eax
c00190c5:	68 76 b8 02 c0       	push   0xc002b876
c00190ca:	e8 d6 9d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00190cf:	83 c4 10             	add    esp,0x10
c00190d2:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c00190d7:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190de:	75 05                	jne    c00190e5 <CPU::displayFeatures()+0x201>
c00190e0:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c00190e5:	51                   	push   ecx
c00190e6:	51                   	push   ecx
c00190e7:	50                   	push   eax
c00190e8:	68 8d b8 02 c0       	push   0xc002b88d
c00190ed:	e8 b3 9d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00190f2:	83 c4 10             	add    esp,0x10
c00190f5:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c00190fa:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019101:	75 05                	jne    c0019108 <CPU::displayFeatures()+0x224>
c0019103:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019108:	52                   	push   edx
c0019109:	52                   	push   edx
c001910a:	50                   	push   eax
c001910b:	68 a4 b8 02 c0       	push   0xc002b8a4
c0019110:	e8 90 9d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0019115:	83 c4 10             	add    esp,0x10
c0019118:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001911d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019124:	78 05                	js     c001912b <CPU::displayFeatures()+0x247>
c0019126:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001912b:	51                   	push   ecx
c001912c:	51                   	push   ecx
c001912d:	50                   	push   eax
c001912e:	68 bb b8 02 c0       	push   0xc002b8bb
c0019133:	e8 6d 9d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0019138:	83 c4 10             	add    esp,0x10
c001913b:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019140:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019147:	75 05                	jne    c001914e <CPU::displayFeatures()+0x26a>
c0019149:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001914e:	52                   	push   edx
c001914f:	52                   	push   edx
c0019150:	50                   	push   eax
c0019151:	68 d2 b8 02 c0       	push   0xc002b8d2
c0019156:	e8 4a 9d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001915b:	83 c4 18             	add    esp,0x18
c001915e:	5b                   	pop    ebx
c001915f:	c3                   	ret    

c0019160 <CPU::detectFeatures()>:
c0019160:	55                   	push   ebp
c0019161:	57                   	push   edi
c0019162:	56                   	push   esi
c0019163:	53                   	push   ebx
c0019164:	83 ec 50             	sub    esp,0x50
c0019167:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001916b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019175:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001917c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019182:	6a 0d                	push   0xd
c0019184:	6a 00                	push   0x0
c0019186:	57                   	push   edi
c0019187:	e8 f4 75 fe ff       	call   c0000780 <memset>
c001918c:	83 c4 10             	add    esp,0x10
c001918f:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0019194:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001919b:	0f 84 20 09 00 00    	je     c0019ac1 <CPU::detectFeatures()+0x961>
c00191a1:	83 ec 0c             	sub    esp,0xc
c00191a4:	6a 10                	push   0x10
c00191a6:	e8 f3 fb ff ff       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c00191ab:	83 e0 01             	and    eax,0x1
c00191ae:	8d 14 00             	lea    edx,[eax+eax*1]
c00191b1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191b7:	83 e0 fd             	and    eax,0xfffffffd
c00191ba:	09 d0                	or     eax,edx
c00191bc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191c2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191c9:	e8 d0 fb ff ff       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c00191ce:	83 e0 01             	and    eax,0x1
c00191d1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191d8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191de:	83 e0 fb             	and    eax,0xfffffffb
c00191e1:	09 d0                	or     eax,edx
c00191e3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00191f0:	e8 a9 fb ff ff       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c00191f5:	83 e0 01             	and    eax,0x1
c00191f8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191ff:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019205:	83 e0 f7             	and    eax,0xfffffff7
c0019208:	09 d0                	or     eax,edx
c001920a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019210:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019217:	e8 82 fb ff ff       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c001921c:	83 e0 01             	and    eax,0x1
c001921f:	c1 e0 04             	shl    eax,0x4
c0019222:	88 c2                	mov    dl,al
c0019224:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001922a:	83 e0 ef             	and    eax,0xffffffef
c001922d:	09 d0                	or     eax,edx
c001922f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019235:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001923c:	e8 5d fb ff ff       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c0019241:	83 e0 01             	and    eax,0x1
c0019244:	c1 e0 05             	shl    eax,0x5
c0019247:	88 c2                	mov    dl,al
c0019249:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001924f:	83 e0 df             	and    eax,0xffffffdf
c0019252:	09 d0                	or     eax,edx
c0019254:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001925a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019261:	e8 38 fb ff ff       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c0019266:	83 e0 01             	and    eax,0x1
c0019269:	8d 14 00             	lea    edx,[eax+eax*1]
c001926c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019272:	83 e0 fd             	and    eax,0xfffffffd
c0019275:	09 d0                	or     eax,edx
c0019277:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001927d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019284:	e8 15 fb ff ff       	call   c0018d9e <CPU::cpuidCheckEDX(unsigned int)>
c0019289:	83 e0 01             	and    eax,0x1
c001928c:	c1 e0 06             	shl    eax,0x6
c001928f:	88 c2                	mov    dl,al
c0019291:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019297:	83 e0 bf             	and    eax,0xffffffbf
c001929a:	09 d0                	or     eax,edx
c001929c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192a2:	58                   	pop    eax
c00192a3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192a7:	56                   	push   esi
c00192a8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192ac:	55                   	push   ebp
c00192ad:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192b1:	50                   	push   eax
c00192b2:	8d 54 24 28          	lea    edx,[esp+0x28]
c00192b6:	52                   	push   edx
c00192b7:	6a 00                	push   0x0
c00192b9:	e8 5c fa ff ff       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192be:	83 c4 1c             	add    esp,0x1c
c00192c1:	6a 04                	push   0x4
c00192c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192c7:	50                   	push   eax
c00192c8:	57                   	push   edi
c00192c9:	e8 7e 74 fe ff       	call   c000074c <memcpy>
c00192ce:	83 c4 0c             	add    esp,0xc
c00192d1:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192d7:	6a 04                	push   0x4
c00192d9:	56                   	push   esi
c00192da:	50                   	push   eax
c00192db:	e8 6c 74 fe ff       	call   c000074c <memcpy>
c00192e0:	83 c4 0c             	add    esp,0xc
c00192e3:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192e9:	6a 04                	push   0x4
c00192eb:	55                   	push   ebp
c00192ec:	50                   	push   eax
c00192ed:	e8 5a 74 fe ff       	call   c000074c <memcpy>
c00192f2:	58                   	pop    eax
c00192f3:	5a                   	pop    edx
c00192f4:	68 e9 b8 02 c0       	push   0xc002b8e9
c00192f9:	57                   	push   edi
c00192fa:	e8 c9 75 fe ff       	call   c00008c8 <strcmp>
c00192ff:	83 c4 10             	add    esp,0x10
c0019302:	85 c0                	test   eax,eax
c0019304:	75 0f                	jne    c0019315 <CPU::detectFeatures()+0x1b5>
c0019306:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019310:	e9 22 02 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c0019315:	50                   	push   eax
c0019316:	50                   	push   eax
c0019317:	68 f6 b8 02 c0       	push   0xc002b8f6
c001931c:	57                   	push   edi
c001931d:	e8 a6 75 fe ff       	call   c00008c8 <strcmp>
c0019322:	83 c4 10             	add    esp,0x10
c0019325:	85 c0                	test   eax,eax
c0019327:	74 dd                	je     c0019306 <CPU::detectFeatures()+0x1a6>
c0019329:	51                   	push   ecx
c001932a:	51                   	push   ecx
c001932b:	68 03 b9 02 c0       	push   0xc002b903
c0019330:	57                   	push   edi
c0019331:	e8 92 75 fe ff       	call   c00008c8 <strcmp>
c0019336:	83 c4 10             	add    esp,0x10
c0019339:	85 c0                	test   eax,eax
c001933b:	74 2a                	je     c0019367 <CPU::detectFeatures()+0x207>
c001933d:	52                   	push   edx
c001933e:	52                   	push   edx
c001933f:	68 10 b9 02 c0       	push   0xc002b910
c0019344:	57                   	push   edi
c0019345:	e8 7e 75 fe ff       	call   c00008c8 <strcmp>
c001934a:	83 c4 10             	add    esp,0x10
c001934d:	85 c0                	test   eax,eax
c001934f:	74 16                	je     c0019367 <CPU::detectFeatures()+0x207>
c0019351:	50                   	push   eax
c0019352:	50                   	push   eax
c0019353:	68 1d b9 02 c0       	push   0xc002b91d
c0019358:	57                   	push   edi
c0019359:	e8 6a 75 fe ff       	call   c00008c8 <strcmp>
c001935e:	83 c4 10             	add    esp,0x10
c0019361:	85 c0                	test   eax,eax
c0019363:	74 48                	je     c00193ad <CPU::detectFeatures()+0x24d>
c0019365:	eb 0f                	jmp    c0019376 <CPU::detectFeatures()+0x216>
c0019367:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019371:	e9 c1 01 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c0019376:	50                   	push   eax
c0019377:	50                   	push   eax
c0019378:	68 2a b9 02 c0       	push   0xc002b92a
c001937d:	57                   	push   edi
c001937e:	e8 45 75 fe ff       	call   c00008c8 <strcmp>
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	85 c0                	test   eax,eax
c0019388:	74 23                	je     c00193ad <CPU::detectFeatures()+0x24d>
c001938a:	50                   	push   eax
c001938b:	50                   	push   eax
c001938c:	68 37 b9 02 c0       	push   0xc002b937
c0019391:	57                   	push   edi
c0019392:	e8 31 75 fe ff       	call   c00008c8 <strcmp>
c0019397:	83 c4 10             	add    esp,0x10
c001939a:	85 c0                	test   eax,eax
c001939c:	75 1e                	jne    c00193bc <CPU::detectFeatures()+0x25c>
c001939e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193a8:	e9 8a 01 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c00193ad:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193b7:	e9 7b 01 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c00193bc:	50                   	push   eax
c00193bd:	50                   	push   eax
c00193be:	68 44 b9 02 c0       	push   0xc002b944
c00193c3:	57                   	push   edi
c00193c4:	e8 ff 74 fe ff       	call   c00008c8 <strcmp>
c00193c9:	83 c4 10             	add    esp,0x10
c00193cc:	85 c0                	test   eax,eax
c00193ce:	75 0f                	jne    c00193df <CPU::detectFeatures()+0x27f>
c00193d0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193da:	e9 58 01 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c00193df:	50                   	push   eax
c00193e0:	50                   	push   eax
c00193e1:	68 03 b9 02 c0       	push   0xc002b903
c00193e6:	57                   	push   edi
c00193e7:	e8 dc 74 fe ff       	call   c00008c8 <strcmp>
c00193ec:	83 c4 10             	add    esp,0x10
c00193ef:	85 c0                	test   eax,eax
c00193f1:	75 0f                	jne    c0019402 <CPU::detectFeatures()+0x2a2>
c00193f3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193fd:	e9 35 01 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c0019402:	50                   	push   eax
c0019403:	50                   	push   eax
c0019404:	68 51 b9 02 c0       	push   0xc002b951
c0019409:	57                   	push   edi
c001940a:	e8 b9 74 fe ff       	call   c00008c8 <strcmp>
c001940f:	83 c4 10             	add    esp,0x10
c0019412:	85 c0                	test   eax,eax
c0019414:	75 0f                	jne    c0019425 <CPU::detectFeatures()+0x2c5>
c0019416:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019420:	e9 12 01 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c0019425:	51                   	push   ecx
c0019426:	51                   	push   ecx
c0019427:	68 5e b9 02 c0       	push   0xc002b95e
c001942c:	57                   	push   edi
c001942d:	e8 96 74 fe ff       	call   c00008c8 <strcmp>
c0019432:	83 c4 10             	add    esp,0x10
c0019435:	85 c0                	test   eax,eax
c0019437:	75 0f                	jne    c0019448 <CPU::detectFeatures()+0x2e8>
c0019439:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019443:	e9 ef 00 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c0019448:	52                   	push   edx
c0019449:	52                   	push   edx
c001944a:	68 6b b9 02 c0       	push   0xc002b96b
c001944f:	57                   	push   edi
c0019450:	e8 73 74 fe ff       	call   c00008c8 <strcmp>
c0019455:	83 c4 10             	add    esp,0x10
c0019458:	85 c0                	test   eax,eax
c001945a:	75 0f                	jne    c001946b <CPU::detectFeatures()+0x30b>
c001945c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019466:	e9 cc 00 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c001946b:	50                   	push   eax
c001946c:	50                   	push   eax
c001946d:	68 78 b9 02 c0       	push   0xc002b978
c0019472:	57                   	push   edi
c0019473:	e8 50 74 fe ff       	call   c00008c8 <strcmp>
c0019478:	83 c4 10             	add    esp,0x10
c001947b:	85 c0                	test   eax,eax
c001947d:	75 0f                	jne    c001948e <CPU::detectFeatures()+0x32e>
c001947f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019489:	e9 a9 00 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c001948e:	50                   	push   eax
c001948f:	50                   	push   eax
c0019490:	68 85 b9 02 c0       	push   0xc002b985
c0019495:	57                   	push   edi
c0019496:	e8 2d 74 fe ff       	call   c00008c8 <strcmp>
c001949b:	83 c4 10             	add    esp,0x10
c001949e:	85 c0                	test   eax,eax
c00194a0:	75 0f                	jne    c00194b1 <CPU::detectFeatures()+0x351>
c00194a2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194ac:	e9 86 00 00 00       	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c00194b1:	50                   	push   eax
c00194b2:	50                   	push   eax
c00194b3:	68 92 b9 02 c0       	push   0xc002b992
c00194b8:	57                   	push   edi
c00194b9:	e8 0a 74 fe ff       	call   c00008c8 <strcmp>
c00194be:	83 c4 10             	add    esp,0x10
c00194c1:	85 c0                	test   eax,eax
c00194c3:	75 0c                	jne    c00194d1 <CPU::detectFeatures()+0x371>
c00194c5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194cf:	eb 66                	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c00194d1:	50                   	push   eax
c00194d2:	50                   	push   eax
c00194d3:	68 9f b9 02 c0       	push   0xc002b99f
c00194d8:	57                   	push   edi
c00194d9:	e8 ea 73 fe ff       	call   c00008c8 <strcmp>
c00194de:	83 c4 10             	add    esp,0x10
c00194e1:	85 c0                	test   eax,eax
c00194e3:	75 0c                	jne    c00194f1 <CPU::detectFeatures()+0x391>
c00194e5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194ef:	eb 46                	jmp    c0019537 <CPU::detectFeatures()+0x3d7>
c00194f1:	50                   	push   eax
c00194f2:	50                   	push   eax
c00194f3:	68 ac b9 02 c0       	push   0xc002b9ac
c00194f8:	57                   	push   edi
c00194f9:	e8 ca 73 fe ff       	call   c00008c8 <strcmp>
c00194fe:	83 c4 10             	add    esp,0x10
c0019501:	85 c0                	test   eax,eax
c0019503:	74 e0                	je     c00194e5 <CPU::detectFeatures()+0x385>
c0019505:	50                   	push   eax
c0019506:	50                   	push   eax
c0019507:	68 b9 b9 02 c0       	push   0xc002b9b9
c001950c:	57                   	push   edi
c001950d:	e8 b6 73 fe ff       	call   c00008c8 <strcmp>
c0019512:	83 c4 10             	add    esp,0x10
c0019515:	85 c0                	test   eax,eax
c0019517:	74 cc                	je     c00194e5 <CPU::detectFeatures()+0x385>
c0019519:	51                   	push   ecx
c001951a:	51                   	push   ecx
c001951b:	68 c6 b9 02 c0       	push   0xc002b9c6
c0019520:	57                   	push   edi
c0019521:	e8 a2 73 fe ff       	call   c00008c8 <strcmp>
c0019526:	83 c4 10             	add    esp,0x10
c0019529:	85 c0                	test   eax,eax
c001952b:	74 b8                	je     c00194e5 <CPU::detectFeatures()+0x385>
c001952d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019537:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001953c:	0f 86 be 00 00 00    	jbe    c0019600 <CPU::detectFeatures()+0x4a0>
c0019542:	83 ec 0c             	sub    esp,0xc
c0019545:	68 80 00 00 00       	push   0x80
c001954a:	e8 ab f8 ff ff       	call   c0018dfa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001954f:	83 e0 01             	and    eax,0x1
c0019552:	c1 e0 06             	shl    eax,0x6
c0019555:	88 c2                	mov    dl,al
c0019557:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001955d:	83 e0 bf             	and    eax,0xffffffbf
c0019560:	09 d0                	or     eax,edx
c0019562:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019568:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001956f:	e8 86 f8 ff ff       	call   c0018dfa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019574:	83 e0 01             	and    eax,0x1
c0019577:	c1 e0 04             	shl    eax,0x4
c001957a:	88 c2                	mov    dl,al
c001957c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019582:	83 e0 ef             	and    eax,0xffffffef
c0019585:	09 d0                	or     eax,edx
c0019587:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001958d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019594:	e8 61 f8 ff ff       	call   c0018dfa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019599:	c1 e0 07             	shl    eax,0x7
c001959c:	88 c2                	mov    dl,al
c001959e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195a4:	83 e0 7f             	and    eax,0x7f
c00195a7:	09 d0                	or     eax,edx
c00195a9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195b6:	e8 6d f8 ff ff       	call   c0018e28 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195bb:	83 e0 01             	and    eax,0x1
c00195be:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195c5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195cb:	83 e0 f7             	and    eax,0xfffffff7
c00195ce:	09 d0                	or     eax,edx
c00195d0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195d6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195dd:	e8 46 f8 ff ff       	call   c0018e28 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195e2:	83 c4 10             	add    esp,0x10
c00195e5:	83 e0 01             	and    eax,0x1
c00195e8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195ef:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195f5:	83 e0 fb             	and    eax,0xfffffffb
c00195f8:	09 d0                	or     eax,edx
c00195fa:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019600:	83 ec 0c             	sub    esp,0xc
c0019603:	56                   	push   esi
c0019604:	55                   	push   ebp
c0019605:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019609:	57                   	push   edi
c001960a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001960e:	50                   	push   eax
c001960f:	6a 01                	push   0x1
c0019611:	e8 04 f7 ff ff       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019616:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001961a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019620:	88 ca                	mov    dl,cl
c0019622:	83 e0 f0             	and    eax,0xfffffff0
c0019625:	83 e2 0f             	and    edx,0xf
c0019628:	09 d0                	or     eax,edx
c001962a:	88 ca                	mov    dl,cl
c001962c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019632:	c0 ea 04             	shr    dl,0x4
c0019635:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019639:	0f b6 c2             	movzx  eax,dl
c001963c:	83 c4 20             	add    esp,0x20
c001963f:	c1 e0 06             	shl    eax,0x6
c0019642:	89 c5                	mov    ebp,eax
c0019644:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001964a:	66 25 3f c0          	and    ax,0xc03f
c001964e:	09 e8                	or     eax,ebp
c0019650:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019657:	89 c8                	mov    eax,ecx
c0019659:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001965f:	c1 e8 08             	shr    eax,0x8
c0019662:	83 e2 3f             	and    edx,0x3f
c0019665:	83 e0 0f             	and    eax,0xf
c0019668:	89 c5                	mov    ebp,eax
c001966a:	c1 e5 06             	shl    ebp,0x6
c001966d:	09 d5                	or     ebp,edx
c001966f:	89 ea                	mov    edx,ebp
c0019671:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019677:	88 c2                	mov    dl,al
c0019679:	c0 ea 02             	shr    dl,0x2
c001967c:	89 d5                	mov    ebp,edx
c001967e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019684:	83 e2 c0             	and    edx,0xffffffc0
c0019687:	09 d5                	or     ebp,edx
c0019689:	89 ea                	mov    edx,ebp
c001968b:	89 cd                	mov    ebp,ecx
c001968d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019693:	c1 ed 0c             	shr    ebp,0xc
c0019696:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001969c:	83 e5 03             	and    ebp,0x3
c001969f:	83 e2 cf             	and    edx,0xffffffcf
c00196a2:	c1 e5 04             	shl    ebp,0x4
c00196a5:	09 d5                	or     ebp,edx
c00196a7:	3c 06                	cmp    al,0x6
c00196a9:	89 ea                	mov    edx,ebp
c00196ab:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196b1:	74 04                	je     c00196b7 <CPU::detectFeatures()+0x557>
c00196b3:	3c 0f                	cmp    al,0xf
c00196b5:	75 5c                	jne    c0019713 <CPU::detectFeatures()+0x5b3>
c00196b7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196bb:	89 cd                	mov    ebp,ecx
c00196bd:	c1 ed 10             	shr    ebp,0x10
c00196c0:	c1 e5 04             	shl    ebp,0x4
c00196c3:	09 ea                	or     edx,ebp
c00196c5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196cb:	0f b6 d2             	movzx  edx,dl
c00196ce:	66 81 e5 3f c0       	and    bp,0xc03f
c00196d3:	c1 e2 06             	shl    edx,0x6
c00196d6:	09 ea                	or     edx,ebp
c00196d8:	3c 0f                	cmp    al,0xf
c00196da:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196e1:	75 30                	jne    c0019713 <CPU::detectFeatures()+0x5b3>
c00196e3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196e9:	c1 e9 14             	shr    ecx,0x14
c00196ec:	83 e0 3f             	and    eax,0x3f
c00196ef:	83 c1 0f             	add    ecx,0xf
c00196f2:	88 ca                	mov    dl,cl
c00196f4:	c0 e9 02             	shr    cl,0x2
c00196f7:	c1 e2 06             	shl    edx,0x6
c00196fa:	09 d0                	or     eax,edx
c00196fc:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019702:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019708:	83 e0 c0             	and    eax,0xffffffc0
c001970b:	09 c1                	or     ecx,eax
c001970d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019713:	83 ec 0c             	sub    esp,0xc
c0019716:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001971d:	56                   	push   esi
c001971e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019722:	50                   	push   eax
c0019723:	57                   	push   edi
c0019724:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019728:	55                   	push   ebp
c0019729:	68 00 00 00 80       	push   0x80000000
c001972e:	e8 e7 f5 ff ff       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019733:	83 c4 20             	add    esp,0x20
c0019736:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001973e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019742:	76 1e                	jbe    c0019762 <CPU::detectFeatures()+0x602>
c0019744:	83 ec 0c             	sub    esp,0xc
c0019747:	56                   	push   esi
c0019748:	50                   	push   eax
c0019749:	57                   	push   edi
c001974a:	55                   	push   ebp
c001974b:	68 01 00 00 80       	push   0x80000001
c0019750:	e8 c5 f5 ff ff       	call   c0018d1a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019755:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001975f:	83 c4 20             	add    esp,0x20
c0019762:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019768:	83 f8 01             	cmp    eax,0x1
c001976b:	75 6f                	jne    c00197dc <CPU::detectFeatures()+0x67c>
c001976d:	51                   	push   ecx
c001976e:	51                   	push   ecx
c001976f:	68 d2 b9 02 c0       	push   0xc002b9d2
c0019774:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019778:	56                   	push   esi
c0019779:	e8 be 70 fe ff       	call   c000083c <strcpy>
c001977e:	5f                   	pop    edi
c001977f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019785:	5d                   	pop    ebp
c0019786:	66 c1 e8 06          	shr    ax,0x6
c001978a:	0f b6 c0             	movzx  eax,al
c001978d:	50                   	push   eax
c001978e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019794:	c1 e8 0e             	shr    eax,0xe
c0019797:	0f b6 c0             	movzx  eax,al
c001979a:	50                   	push   eax
c001979b:	e8 24 f2 ff ff       	call   c00189c4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00197a0:	5a                   	pop    edx
c00197a1:	59                   	pop    ecx
c00197a2:	50                   	push   eax
c00197a3:	56                   	push   esi
c00197a4:	e8 d3 71 fe ff       	call   c000097c <strcat>
c00197a9:	5f                   	pop    edi
c00197aa:	5d                   	pop    ebp
c00197ab:	56                   	push   esi
c00197ac:	53                   	push   ebx
c00197ad:	e8 fc ac ff ff       	call   c00144ae <Device::setName(char const*)>
c00197b2:	58                   	pop    eax
c00197b3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197b9:	5a                   	pop    edx
c00197ba:	68 d9 b9 02 c0       	push   0xc002b9d9
c00197bf:	50                   	push   eax
c00197c0:	e8 03 71 fe ff       	call   c00008c8 <strcmp>
c00197c5:	83 c4 10             	add    esp,0x10
c00197c8:	85 c0                	test   eax,eax
c00197ca:	0f 85 71 03 00 00    	jne    c0019b41 <CPU::detectFeatures()+0x9e1>
c00197d0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197d7:	e9 65 03 00 00       	jmp    c0019b41 <CPU::detectFeatures()+0x9e1>
c00197dc:	83 f8 02             	cmp    eax,0x2
c00197df:	0f 85 b5 00 00 00    	jne    c001989a <CPU::detectFeatures()+0x73a>
c00197e5:	57                   	push   edi
c00197e6:	57                   	push   edi
c00197e7:	68 eb b9 02 c0       	push   0xc002b9eb
c00197ec:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197f0:	56                   	push   esi
c00197f1:	e8 46 70 fe ff       	call   c000083c <strcpy>
c00197f6:	5d                   	pop    ebp
c00197f7:	58                   	pop    eax
c00197f8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197fe:	66 c1 e8 06          	shr    ax,0x6
c0019802:	0f b6 c0             	movzx  eax,al
c0019805:	50                   	push   eax
c0019806:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001980c:	c1 e8 0e             	shr    eax,0xe
c001980f:	0f b6 c0             	movzx  eax,al
c0019812:	50                   	push   eax
c0019813:	e8 18 f0 ff ff       	call   c0018830 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019818:	5a                   	pop    edx
c0019819:	59                   	pop    ecx
c001981a:	50                   	push   eax
c001981b:	56                   	push   esi
c001981c:	e8 5b 71 fe ff       	call   c000097c <strcat>
c0019821:	5f                   	pop    edi
c0019822:	5d                   	pop    ebp
c0019823:	56                   	push   esi
c0019824:	53                   	push   ebx
c0019825:	e8 84 ac ff ff       	call   c00144ae <Device::setName(char const*)>
c001982a:	58                   	pop    eax
c001982b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019831:	5a                   	pop    edx
c0019832:	68 f0 b9 02 c0       	push   0xc002b9f0
c0019837:	50                   	push   eax
c0019838:	e8 8b 70 fe ff       	call   c00008c8 <strcmp>
c001983d:	83 c4 10             	add    esp,0x10
c0019840:	85 c0                	test   eax,eax
c0019842:	75 20                	jne    c0019864 <CPU::detectFeatures()+0x704>
c0019844:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c001984a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019850:	a8 01                	test   al,0x1
c0019852:	74 10                	je     c0019864 <CPU::detectFeatures()+0x704>
c0019854:	83 e0 fe             	and    eax,0xfffffffe
c0019857:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001985d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019864:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001986a:	c1 e8 0e             	shr    eax,0xe
c001986d:	3c 05                	cmp    al,0x5
c001986f:	0f 85 cc 02 00 00    	jne    c0019b41 <CPU::detectFeatures()+0x9e1>
c0019875:	56                   	push   esi
c0019876:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001987c:	83 e0 0f             	and    eax,0xf
c001987f:	50                   	push   eax
c0019880:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019886:	66 c1 e8 06          	shr    ax,0x6
c001988a:	0f b6 c0             	movzx  eax,al
c001988d:	50                   	push   eax
c001988e:	6a 05                	push   0x5
c0019890:	e8 11 f4 ff ff       	call   c0018ca6 <CPU::AMD_K6_writeback(int, int, int)>
c0019895:	e9 1f 02 00 00       	jmp    c0019ab9 <CPU::detectFeatures()+0x959>
c001989a:	8d 50 fd             	lea    edx,[eax-0x3]
c001989d:	83 fa 01             	cmp    edx,0x1
c00198a0:	76 09                	jbe    c00198ab <CPU::detectFeatures()+0x74b>
c00198a2:	83 f8 06             	cmp    eax,0x6
c00198a5:	0f 85 91 01 00 00    	jne    c0019a3c <CPU::detectFeatures()+0x8dc>
c00198ab:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198b1:	c1 ea 0e             	shr    edx,0xe
c00198b4:	80 fa 05             	cmp    dl,0x5
c00198b7:	75 7b                	jne    c0019934 <CPU::detectFeatures()+0x7d4>
c00198b9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198bf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198c4:	66 81 fa 00 01       	cmp    dx,0x100
c00198c9:	75 0c                	jne    c00198d7 <CPU::detectFeatures()+0x777>
c00198cb:	51                   	push   ecx
c00198cc:	51                   	push   ecx
c00198cd:	68 f7 b9 02 c0       	push   0xc002b9f7
c00198d2:	e9 dc 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c00198d7:	66 81 fa 00 02       	cmp    dx,0x200
c00198dc:	75 0c                	jne    c00198ea <CPU::detectFeatures()+0x78a>
c00198de:	52                   	push   edx
c00198df:	52                   	push   edx
c00198e0:	68 0a ba 02 c0       	push   0xc002ba0a
c00198e5:	e9 c9 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c00198ea:	66 81 fa 40 02       	cmp    dx,0x240
c00198ef:	75 0c                	jne    c00198fd <CPU::detectFeatures()+0x79d>
c00198f1:	50                   	push   eax
c00198f2:	50                   	push   eax
c00198f3:	68 1c ba 02 c0       	push   0xc002ba1c
c00198f8:	e9 b6 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c00198fd:	83 f8 06             	cmp    eax,0x6
c0019900:	75 0c                	jne    c001990e <CPU::detectFeatures()+0x7ae>
c0019902:	50                   	push   eax
c0019903:	50                   	push   eax
c0019904:	68 2e ba 02 c0       	push   0xc002ba2e
c0019909:	e9 a5 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c001990e:	83 f8 04             	cmp    eax,0x4
c0019911:	75 0c                	jne    c001991f <CPU::detectFeatures()+0x7bf>
c0019913:	50                   	push   eax
c0019914:	50                   	push   eax
c0019915:	68 3a ba 02 c0       	push   0xc002ba3a
c001991a:	e9 94 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c001991f:	83 f8 03             	cmp    eax,0x3
c0019922:	0f 85 19 02 00 00    	jne    c0019b41 <CPU::detectFeatures()+0x9e1>
c0019928:	50                   	push   eax
c0019929:	50                   	push   eax
c001992a:	68 42 ba 02 c0       	push   0xc002ba42
c001992f:	e9 7f 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019934:	80 fa 06             	cmp    dl,0x6
c0019937:	0f 85 db 00 00 00    	jne    c0019a18 <CPU::detectFeatures()+0x8b8>
c001993d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019943:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019948:	66 81 fa 80 01       	cmp    dx,0x180
c001994d:	75 0c                	jne    c001995b <CPU::detectFeatures()+0x7fb>
c001994f:	50                   	push   eax
c0019950:	50                   	push   eax
c0019951:	68 4d ba 02 c0       	push   0xc002ba4d
c0019956:	e9 58 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c001995b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019961:	66 f7 c1 80 ff       	test   cx,0xff80
c0019966:	75 0c                	jne    c0019974 <CPU::detectFeatures()+0x814>
c0019968:	50                   	push   eax
c0019969:	50                   	push   eax
c001996a:	68 5d ba 02 c0       	push   0xc002ba5d
c001996f:	e9 3f 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019974:	66 81 fa 40 02       	cmp    dx,0x240
c0019979:	75 0c                	jne    c0019987 <CPU::detectFeatures()+0x827>
c001997b:	55                   	push   ebp
c001997c:	55                   	push   ebp
c001997d:	68 64 ba 02 c0       	push   0xc002ba64
c0019982:	e9 2c 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019987:	66 81 fa 80 02       	cmp    dx,0x280
c001998c:	75 0c                	jne    c001999a <CPU::detectFeatures()+0x83a>
c001998e:	57                   	push   edi
c001998f:	57                   	push   edi
c0019990:	68 6d ba 02 c0       	push   0xc002ba6d
c0019995:	e9 19 01 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c001999a:	66 81 fa 40 03       	cmp    dx,0x340
c001999f:	74 ed                	je     c001998e <CPU::detectFeatures()+0x82e>
c00199a1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00199a6:	75 0c                	jne    c00199b4 <CPU::detectFeatures()+0x854>
c00199a8:	56                   	push   esi
c00199a9:	56                   	push   esi
c00199aa:	68 74 ba 02 c0       	push   0xc002ba74
c00199af:	e9 ff 00 00 00       	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c00199b4:	83 f8 06             	cmp    eax,0x6
c00199b7:	0f 84 45 ff ff ff    	je     c0019902 <CPU::detectFeatures()+0x7a2>
c00199bd:	83 f8 04             	cmp    eax,0x4
c00199c0:	0f 84 4d ff ff ff    	je     c0019913 <CPU::detectFeatures()+0x7b3>
c00199c6:	83 f8 03             	cmp    eax,0x3
c00199c9:	0f 85 72 01 00 00    	jne    c0019b41 <CPU::detectFeatures()+0x9e1>
c00199cf:	51                   	push   ecx
c00199d0:	51                   	push   ecx
c00199d1:	68 7d ba 02 c0       	push   0xc002ba7d
c00199d6:	53                   	push   ebx
c00199d7:	e8 d2 aa ff ff       	call   c00144ae <Device::setName(char const*)>
c00199dc:	b1 c1                	mov    cl,0xc1
c00199de:	88 c8                	mov    al,cl
c00199e0:	e6 22                	out    0x22,al
c00199e2:	e4 23                	in     al,0x23
c00199e4:	88 c2                	mov    dl,al
c00199e6:	88 c8                	mov    al,cl
c00199e8:	e6 22                	out    0x22,al
c00199ea:	88 d0                	mov    al,dl
c00199ec:	83 c8 10             	or     eax,0x10
c00199ef:	e6 23                	out    0x23,al
c00199f1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00199f8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199fb:	89 d0                	mov    eax,edx
c00199fd:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a03:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a07:	40                   	inc    eax
c0019a08:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a0e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a13:	e9 a1 00 00 00       	jmp    c0019ab9 <CPU::detectFeatures()+0x959>
c0019a18:	83 f8 06             	cmp    eax,0x6
c0019a1b:	0f 84 e1 fe ff ff    	je     c0019902 <CPU::detectFeatures()+0x7a2>
c0019a21:	83 f8 04             	cmp    eax,0x4
c0019a24:	0f 84 e9 fe ff ff    	je     c0019913 <CPU::detectFeatures()+0x7b3>
c0019a2a:	83 f8 03             	cmp    eax,0x3
c0019a2d:	0f 85 0e 01 00 00    	jne    c0019b41 <CPU::detectFeatures()+0x9e1>
c0019a33:	52                   	push   edx
c0019a34:	52                   	push   edx
c0019a35:	68 88 ba 02 c0       	push   0xc002ba88
c0019a3a:	eb 77                	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019a3c:	83 f8 07             	cmp    eax,0x7
c0019a3f:	75 09                	jne    c0019a4a <CPU::detectFeatures()+0x8ea>
c0019a41:	50                   	push   eax
c0019a42:	50                   	push   eax
c0019a43:	68 92 ba 02 c0       	push   0xc002ba92
c0019a48:	eb 69                	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019a4a:	83 f8 0a             	cmp    eax,0xa
c0019a4d:	75 09                	jne    c0019a58 <CPU::detectFeatures()+0x8f8>
c0019a4f:	50                   	push   eax
c0019a50:	50                   	push   eax
c0019a51:	68 9d ba 02 c0       	push   0xc002ba9d
c0019a56:	eb 5b                	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019a58:	83 f8 0b             	cmp    eax,0xb
c0019a5b:	75 09                	jne    c0019a66 <CPU::detectFeatures()+0x906>
c0019a5d:	50                   	push   eax
c0019a5e:	50                   	push   eax
c0019a5f:	68 a5 ba 02 c0       	push   0xc002baa5
c0019a64:	eb 4d                	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019a66:	83 f8 08             	cmp    eax,0x8
c0019a69:	75 09                	jne    c0019a74 <CPU::detectFeatures()+0x914>
c0019a6b:	50                   	push   eax
c0019a6c:	50                   	push   eax
c0019a6d:	68 ae ba 02 c0       	push   0xc002baae
c0019a72:	eb 3f                	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019a74:	83 f8 09             	cmp    eax,0x9
c0019a77:	75 09                	jne    c0019a82 <CPU::detectFeatures()+0x922>
c0019a79:	50                   	push   eax
c0019a7a:	50                   	push   eax
c0019a7b:	68 b6 ba 02 c0       	push   0xc002bab6
c0019a80:	eb 31                	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019a82:	83 f8 05             	cmp    eax,0x5
c0019a85:	75 09                	jne    c0019a90 <CPU::detectFeatures()+0x930>
c0019a87:	50                   	push   eax
c0019a88:	50                   	push   eax
c0019a89:	68 be ba 02 c0       	push   0xc002babe
c0019a8e:	eb 23                	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019a90:	83 f8 0c             	cmp    eax,0xc
c0019a93:	75 09                	jne    c0019a9e <CPU::detectFeatures()+0x93e>
c0019a95:	55                   	push   ebp
c0019a96:	55                   	push   ebp
c0019a97:	68 cc ba 02 c0       	push   0xc002bacc
c0019a9c:	eb 15                	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019a9e:	83 f8 0d             	cmp    eax,0xd
c0019aa1:	75 09                	jne    c0019aac <CPU::detectFeatures()+0x94c>
c0019aa3:	57                   	push   edi
c0019aa4:	57                   	push   edi
c0019aa5:	68 d7 ba 02 c0       	push   0xc002bad7
c0019aaa:	eb 07                	jmp    c0019ab3 <CPU::detectFeatures()+0x953>
c0019aac:	56                   	push   esi
c0019aad:	56                   	push   esi
c0019aae:	68 eb ba 02 c0       	push   0xc002baeb
c0019ab3:	53                   	push   ebx
c0019ab4:	e8 f5 a9 ff ff       	call   c00144ae <Device::setName(char const*)>
c0019ab9:	83 c4 10             	add    esp,0x10
c0019abc:	e9 80 00 00 00       	jmp    c0019b41 <CPU::detectFeatures()+0x9e1>
c0019ac1:	51                   	push   ecx
c0019ac2:	51                   	push   ecx
c0019ac3:	68 37 b9 02 c0       	push   0xc002b937
c0019ac8:	57                   	push   edi
c0019ac9:	e8 6e 6d fe ff       	call   c000083c <strcpy>
c0019ace:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019ad8:	e8 d1 67 fe ff       	call   c00002ae <is486>
c0019add:	83 c4 10             	add    esp,0x10
c0019ae0:	85 c0                	test   eax,eax
c0019ae2:	74 2b                	je     c0019b0f <CPU::detectFeatures()+0x9af>
c0019ae4:	52                   	push   edx
c0019ae5:	52                   	push   edx
c0019ae6:	68 f7 ba 02 c0       	push   0xc002baf7
c0019aeb:	53                   	push   ebx
c0019aec:	e8 bd a9 ff ff       	call   c00144ae <Device::setName(char const*)>
c0019af1:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019af8:	0f 20 c0             	mov    eax,cr0
c0019afb:	83 e0 14             	and    eax,0x14
c0019afe:	83 c4 10             	add    esp,0x10
c0019b01:	83 f8 04             	cmp    eax,0x4
c0019b04:	75 1f                	jne    c0019b25 <CPU::detectFeatures()+0x9c5>
c0019b06:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b0d:	eb 32                	jmp    c0019b41 <CPU::detectFeatures()+0x9e1>
c0019b0f:	50                   	push   eax
c0019b10:	50                   	push   eax
c0019b11:	68 02 bb 02 c0       	push   0xc002bb02
c0019b16:	53                   	push   ebx
c0019b17:	e8 92 a9 ff ff       	call   c00144ae <Device::setName(char const*)>
c0019b1c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b23:	eb d3                	jmp    c0019af8 <CPU::detectFeatures()+0x998>
c0019b25:	e8 5f 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b2a:	83 e0 01             	and    eax,0x1
c0019b2d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b30:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b36:	83 e0 fd             	and    eax,0xfffffffd
c0019b39:	09 d0                	or     eax,edx
c0019b3b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b41:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b48:	83 c4 4c             	add    esp,0x4c
c0019b4b:	5b                   	pop    ebx
c0019b4c:	5e                   	pop    esi
c0019b4d:	5f                   	pop    edi
c0019b4e:	5d                   	pop    ebp
c0019b4f:	c3                   	ret    

c0019b50 <CPU::setupSMEP()>:
c0019b50:	0f 20 e0             	mov    eax,cr4
c0019b53:	0d 00 00 10 00       	or     eax,0x100000
c0019b58:	0f 22 e0             	mov    cr4,eax
c0019b5b:	c3                   	ret    

c0019b5c <CPU::setupUMIP()>:
c0019b5c:	0f 20 e0             	mov    eax,cr4
c0019b5f:	80 cc 08             	or     ah,0x8
c0019b62:	0f 22 e0             	mov    cr4,eax
c0019b65:	c3                   	ret    

c0019b66 <CPU::setupTSC()>:
c0019b66:	0f 20 e0             	mov    eax,cr4
c0019b69:	83 c8 04             	or     eax,0x4
c0019b6c:	0f 22 e0             	mov    cr4,eax
c0019b6f:	c3                   	ret    

c0019b70 <CPU::setupLargePages()>:
c0019b70:	0f 20 e0             	mov    eax,cr4
c0019b73:	83 c8 10             	or     eax,0x10
c0019b76:	0f 22 e0             	mov    cr4,eax
c0019b79:	c3                   	ret    

c0019b7a <CPU::setupPAT()>:
c0019b7a:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0019b7f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b86:	74 2c                	je     c0019bb4 <CPU::setupPAT()+0x3a>
c0019b88:	53                   	push   ebx
c0019b89:	83 ec 10             	sub    esp,0x10
c0019b8c:	68 77 02 00 00       	push   0x277
c0019b91:	50                   	push   eax
c0019b92:	e8 59 52 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019b97:	83 e2 f8             	and    edx,0xfffffff8
c0019b9a:	83 ca 01             	or     edx,0x1
c0019b9d:	52                   	push   edx
c0019b9e:	50                   	push   eax
c0019b9f:	68 77 02 00 00       	push   0x277
c0019ba4:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c0019baa:	e8 6d 52 ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019baf:	83 c4 28             	add    esp,0x28
c0019bb2:	5b                   	pop    ebx
c0019bb3:	c3                   	ret    
c0019bb4:	c3                   	ret    
c0019bb5:	90                   	nop

c0019bb6 <CPU::setupMTRR()>:
c0019bb6:	c3                   	ret    
c0019bb7:	90                   	nop

c0019bb8 <CPU::setupGlobalPages()>:
c0019bb8:	0f 20 e0             	mov    eax,cr4
c0019bbb:	0c 80                	or     al,0x80
c0019bbd:	0f 22 e0             	mov    cr4,eax
c0019bc0:	c3                   	ret    
c0019bc1:	90                   	nop

c0019bc2 <CPU::allowUsermodeDataAccess()>:
c0019bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bcd:	74 03                	je     c0019bd2 <CPU::allowUsermodeDataAccess()+0x10>
c0019bcf:	0f 01 cb             	stac   
c0019bd2:	c3                   	ret    
c0019bd3:	90                   	nop

c0019bd4 <CPU::prohibitUsermodeDataAccess()>:
c0019bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bdf:	74 03                	je     c0019be4 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019be1:	0f 01 ca             	clac   
c0019be4:	c3                   	ret    
c0019be5:	90                   	nop

c0019be6 <CPU::setupSMAP()>:
c0019be6:	0f 20 e0             	mov    eax,cr4
c0019be9:	0d 00 00 20 00       	or     eax,0x200000
c0019bee:	0f 22 e0             	mov    cr4,eax
c0019bf1:	eb e1                	jmp    c0019bd4 <CPU::prohibitUsermodeDataAccess()>
c0019bf3:	90                   	nop

c0019bf4 <CPU::setupFeatures()>:
c0019bf4:	83 ec 0c             	sub    esp,0xc
c0019bf7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bfb:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c02:	74 07                	je     c0019c0b <CPU::setupFeatures()+0x17>
c0019c04:	52                   	push   edx
c0019c05:	e8 46 ff ff ff       	call   c0019b50 <CPU::setupSMEP()>
c0019c0a:	58                   	pop    eax
c0019c0b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c12:	74 07                	je     c0019c1b <CPU::setupFeatures()+0x27>
c0019c14:	52                   	push   edx
c0019c15:	e8 cc ff ff ff       	call   c0019be6 <CPU::setupSMAP()>
c0019c1a:	58                   	pop    eax
c0019c1b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c22:	74 07                	je     c0019c2b <CPU::setupFeatures()+0x37>
c0019c24:	52                   	push   edx
c0019c25:	e8 32 ff ff ff       	call   c0019b5c <CPU::setupUMIP()>
c0019c2a:	58                   	pop    eax
c0019c2b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c32:	74 07                	je     c0019c3b <CPU::setupFeatures()+0x47>
c0019c34:	52                   	push   edx
c0019c35:	e8 2c ff ff ff       	call   c0019b66 <CPU::setupTSC()>
c0019c3a:	58                   	pop    eax
c0019c3b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c42:	74 07                	je     c0019c4b <CPU::setupFeatures()+0x57>
c0019c44:	52                   	push   edx
c0019c45:	e8 26 ff ff ff       	call   c0019b70 <CPU::setupLargePages()>
c0019c4a:	59                   	pop    ecx
c0019c4b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c52:	74 07                	je     c0019c5b <CPU::setupFeatures()+0x67>
c0019c54:	52                   	push   edx
c0019c55:	e8 5e ff ff ff       	call   c0019bb8 <CPU::setupGlobalPages()>
c0019c5a:	58                   	pop    eax
c0019c5b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c62:	74 0c                	je     c0019c70 <CPU::setupFeatures()+0x7c>
c0019c64:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c68:	83 c4 0c             	add    esp,0xc
c0019c6b:	e9 0a ff ff ff       	jmp    c0019b7a <CPU::setupPAT()>
c0019c70:	83 c4 0c             	add    esp,0xc
c0019c73:	c3                   	ret    

c0019c74 <CPU::open(int, int, void*)>:
c0019c74:	57                   	push   edi
c0019c75:	56                   	push   esi
c0019c76:	53                   	push   ebx
c0019c77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c7f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c85:	83 ec 0c             	sub    esp,0xc
c0019c88:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c8e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c94:	50                   	push   eax
c0019c95:	e8 42 54 ff ff       	call   c000f0dc <GDT::setup()>
c0019c9a:	83 c4 0c             	add    esp,0xc
c0019c9d:	6a 00                	push   0x0
c0019c9f:	68 ef be ad de       	push   0xdeadbeef
c0019ca4:	57                   	push   edi
c0019ca5:	e8 12 78 ff ff       	call   c00114bc <TSS::setup(unsigned long, unsigned long)>
c0019caa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019cad:	e8 ea 77 ff ff       	call   c001149c <TSS::flush()>
c0019cb2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019cb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cbb:	e8 78 56 ff ff       	call   c000f338 <IDT::setup()>
c0019cc0:	b8 00 04 00 00       	mov    eax,0x400
c0019cc5:	0f 23 f8             	mov    db7,eax
c0019cc8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019cd2:	e8 16 62 ff ff       	call   c000feed <Phys::allocatePage()>
c0019cd7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019cdd:	89 30                	mov    DWORD PTR [eax],esi
c0019cdf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ce5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019ce8:	58                   	pop    eax
c0019ce9:	5a                   	pop    edx
c0019cea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cf0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cf4:	e8 17 89 ff ff       	call   c0012610 <VAS::setCPUSpecific(unsigned long)>
c0019cf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cfc:	e8 5f f4 ff ff       	call   c0019160 <CPU::detectFeatures()>
c0019d01:	e8 87 bc ff ff       	call   c001598d <setupInterruptController()>
c0019d06:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d0c:	a1 80 e5 02 c0       	mov    eax,ds:0xc002e580
c0019d11:	83 e0 10             	and    eax,0x10
c0019d14:	83 f8 01             	cmp    eax,0x1
c0019d17:	19 c0                	sbb    eax,eax
c0019d19:	83 e0 46             	and    eax,0x46
c0019d1c:	83 c0 1e             	add    eax,0x1e
c0019d1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d22:	e8 ab d1 ff ff       	call   c0016ed2 <setupTimer(int)>
c0019d27:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d30:	e8 bf fe ff ff       	call   c0019bf4 <CPU::setupFeatures()>
c0019d35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d38:	e8 a7 f1 ff ff       	call   c0018ee4 <CPU::displayFeatures()>
c0019d3d:	83 c4 10             	add    esp,0x10
c0019d40:	31 c0                	xor    eax,eax
c0019d42:	5b                   	pop    ebx
c0019d43:	5e                   	pop    esi
c0019d44:	5f                   	pop    edi
c0019d45:	c3                   	ret    

c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d46:	57                   	push   edi
c0019d47:	56                   	push   esi
c0019d48:	53                   	push   ebx
c0019d49:	51                   	push   ecx
c0019d4a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d4e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d51:	0f 02 c0             	lar    eax,ax
c0019d54:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d57:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d5b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d5e:	88 ca                	mov    dl,cl
c0019d60:	c0 ea 06             	shr    dl,0x6
c0019d63:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d67:	89 ca                	mov    edx,ecx
c0019d69:	66 c1 ea 03          	shr    dx,0x3
c0019d6d:	83 e2 07             	and    edx,0x7
c0019d70:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d75:	88 17                	mov    BYTE PTR [edi],dl
c0019d77:	0f 84 a6 01 00 00    	je     c0019f23 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d7d:	83 e1 07             	and    ecx,0x7
c0019d80:	80 f9 04             	cmp    cl,0x4
c0019d83:	0f 84 98 00 00 00    	je     c0019e21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d89:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d8e:	0f 95 c0             	setne  al
c0019d91:	80 f9 05             	cmp    cl,0x5
c0019d94:	0f 95 c2             	setne  dl
c0019d97:	08 c2                	or     dl,al
c0019d99:	74 79                	je     c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d9b:	84 c9                	test   cl,cl
c0019d9d:	75 05                	jne    c0019da4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d9f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019da2:	eb 3c                	jmp    c0019de0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019da4:	80 f9 01             	cmp    cl,0x1
c0019da7:	75 05                	jne    c0019dae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019da9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dac:	eb 32                	jmp    c0019de0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dae:	80 f9 02             	cmp    cl,0x2
c0019db1:	75 05                	jne    c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019db3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019db6:	eb 28                	jmp    c0019de0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019db8:	31 c0                	xor    eax,eax
c0019dba:	80 f9 03             	cmp    cl,0x3
c0019dbd:	75 05                	jne    c0019dc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019dbf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019dc2:	eb 1c                	jmp    c0019de0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc4:	80 f9 05             	cmp    cl,0x5
c0019dc7:	75 05                	jne    c0019dce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019dc9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dcc:	eb 12                	jmp    c0019de0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dce:	80 f9 06             	cmp    cl,0x6
c0019dd1:	75 05                	jne    c0019dd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019dd3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dd6:	eb 08                	jmp    c0019de0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dd8:	80 f9 07             	cmp    cl,0x7
c0019ddb:	75 03                	jne    c0019de0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ddd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019de0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019de5:	75 10                	jne    c0019df7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019de7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019deb:	b9 03 00 00 00       	mov    ecx,0x3
c0019df0:	01 d0                	add    eax,edx
c0019df2:	e9 37 01 00 00       	jmp    c0019f2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019df7:	b9 02 00 00 00       	mov    ecx,0x2
c0019dfc:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e01:	0f 85 27 01 00 00    	jne    c0019f2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e07:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e0a:	b9 06 00 00 00       	mov    ecx,0x6
c0019e0f:	e9 1a 01 00 00       	jmp    c0019f2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e14:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e17:	b9 06 00 00 00       	mov    ecx,0x6
c0019e1c:	e9 0f 01 00 00       	jmp    c0019f30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e21:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e24:	88 ca                	mov    dl,cl
c0019e26:	c0 ea 06             	shr    dl,0x6
c0019e29:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e2d:	89 ca                	mov    edx,ecx
c0019e2f:	66 c1 ea 03          	shr    dx,0x3
c0019e33:	83 e2 07             	and    edx,0x7
c0019e36:	80 e1 07             	and    cl,0x7
c0019e39:	75 05                	jne    c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e3b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e3e:	eb 4c                	jmp    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e40:	80 f9 01             	cmp    cl,0x1
c0019e43:	75 05                	jne    c0019e4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e45:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e48:	eb 42                	jmp    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e4a:	80 f9 02             	cmp    cl,0x2
c0019e4d:	75 05                	jne    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e4f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e52:	eb 38                	jmp    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e54:	80 f9 03             	cmp    cl,0x3
c0019e57:	75 05                	jne    c0019e5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e59:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e5c:	eb 2e                	jmp    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e5e:	80 f9 04             	cmp    cl,0x4
c0019e61:	75 12                	jne    c0019e75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e63:	f6 c4 60             	test   ah,0x60
c0019e66:	75 08                	jne    c0019e70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e68:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e6b:	8d 78 14             	lea    edi,[eax+0x14]
c0019e6e:	eb 1c                	jmp    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e70:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e73:	eb 17                	jmp    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e75:	80 f9 05             	cmp    cl,0x5
c0019e78:	75 05                	jne    c0019e7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e7a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e7d:	eb 0d                	jmp    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e7f:	80 f9 06             	cmp    cl,0x6
c0019e82:	75 05                	jne    c0019e89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e84:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e87:	eb 03                	jmp    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e89:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e8c:	84 d2                	test   dl,dl
c0019e8e:	75 05                	jne    c0019e95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e90:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e93:	eb 3c                	jmp    c0019ed1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e95:	80 fa 01             	cmp    dl,0x1
c0019e98:	75 05                	jne    c0019e9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e9a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e9d:	eb 32                	jmp    c0019ed1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e9f:	80 fa 02             	cmp    dl,0x2
c0019ea2:	75 05                	jne    c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019ea4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ea7:	eb 28                	jmp    c0019ed1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ea9:	80 fa 03             	cmp    dl,0x3
c0019eac:	75 05                	jne    c0019eb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019eae:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019eb1:	eb 1e                	jmp    c0019ed1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb3:	31 c0                	xor    eax,eax
c0019eb5:	80 fa 04             	cmp    dl,0x4
c0019eb8:	74 17                	je     c0019ed1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eba:	80 fa 05             	cmp    dl,0x5
c0019ebd:	75 05                	jne    c0019ec4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019ebf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ec2:	eb 0d                	jmp    c0019ed1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ec4:	80 fa 06             	cmp    dl,0x6
c0019ec7:	75 05                	jne    c0019ece <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ec9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ecc:	eb 03                	jmp    c0019ed1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ece:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ed1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ed6:	0f 94 c2             	sete   dl
c0019ed9:	80 f9 05             	cmp    cl,0x5
c0019edc:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ee0:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ee5:	d3 e0                	shl    eax,cl
c0019ee7:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019eeb:	74 0a                	je     c0019ef7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019eed:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ef0:	b9 07 00 00 00       	mov    ecx,0x7
c0019ef5:	eb 37                	jmp    c0019f2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ef7:	01 f8                	add    eax,edi
c0019ef9:	b9 03 00 00 00       	mov    ecx,0x3
c0019efe:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f03:	74 2b                	je     c0019f30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f05:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f0a:	75 0d                	jne    c0019f19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f0c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f10:	01 c8                	add    eax,ecx
c0019f12:	b9 04 00 00 00       	mov    ecx,0x4
c0019f17:	eb 17                	jmp    c0019f30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f19:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f1c:	b9 07 00 00 00       	mov    ecx,0x7
c0019f21:	eb 0d                	jmp    c0019f30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f23:	b9 02 00 00 00       	mov    ecx,0x2
c0019f28:	b2 01                	mov    dl,0x1
c0019f2a:	31 c0                	xor    eax,eax
c0019f2c:	eb 02                	jmp    c0019f30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f2e:	31 d2                	xor    edx,edx
c0019f30:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f34:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f3a:	88 11                	mov    BYTE PTR [ecx],dl
c0019f3c:	5a                   	pop    edx
c0019f3d:	5b                   	pop    ebx
c0019f3e:	5e                   	pop    esi
c0019f3f:	5f                   	pop    edi
c0019f40:	c3                   	ret    

c0019f41 <Krnl::smpEntry()>:
c0019f41:	eb fe                	jmp    c0019f41 <Krnl::smpEntry()>

c0019f43 <Krnl::startCPU(int)>:
c0019f43:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0019f48:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f4f:	0f 84 36 01 00 00    	je     c001a08b <Krnl::startCPU(int)+0x148>
c0019f55:	53                   	push   ebx
c0019f56:	83 ec 08             	sub    esp,0x8
c0019f59:	e8 fc 3e 00 00       	call   c001de5a <lockScheduler()>
c0019f5e:	52                   	push   edx
c0019f5f:	52                   	push   edx
c0019f60:	6a 1b                	push   0x1b
c0019f62:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c0019f68:	e8 83 4e ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019f6d:	59                   	pop    ecx
c0019f6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f73:	89 c3                	mov    ebx,eax
c0019f75:	58                   	pop    eax
c0019f76:	53                   	push   ebx
c0019f77:	68 3c bb 02 c0       	push   0xc002bb3c
c0019f7c:	e8 24 8f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0019f81:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f8f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f99:	c1 e0 18             	shl    eax,0x18
c0019f9c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019fa2:	83 c4 10             	add    esp,0x10
c0019fa5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019fab:	09 c2                	or     edx,eax
c0019fad:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fb3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019fb9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fbf:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fc5:	80 cd c5             	or     ch,0xc5
c0019fc8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fce:	f3 90                	pause  
c0019fd0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fd2:	0f ba e1 0c          	bt     ecx,0xc
c0019fd6:	72 f6                	jb     c0019fce <Krnl::startCPU(int)+0x8b>
c0019fd8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fde:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fe4:	09 c1                	or     ecx,eax
c0019fe6:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fec:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ff2:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ff8:	80 cd 85             	or     ch,0x85
c0019ffb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a001:	f3 90                	pause  
c001a003:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a005:	0f ba e1 0c          	bt     ecx,0xc
c001a009:	72 f6                	jb     c001a001 <Krnl::startCPU(int)+0xbe>
c001a00b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a015:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a01b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a021:	09 c1                	or     ecx,eax
c001a023:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a029:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a02f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a035:	81 c9 02 06 00 00    	or     ecx,0x602
c001a03b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a041:	f3 90                	pause  
c001a043:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a045:	0f ba e1 0c          	bt     ecx,0xc
c001a049:	72 f6                	jb     c001a041 <Krnl::startCPU(int)+0xfe>
c001a04b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a055:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a05b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a061:	09 c8                	or     eax,ecx
c001a063:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a069:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a06f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a074:	0d 02 06 00 00       	or     eax,0x602
c001a079:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a07f:	f3 90                	pause  
c001a081:	8b 02                	mov    eax,DWORD PTR [edx]
c001a083:	0f ba e0 0c          	bt     eax,0xc
c001a087:	72 f6                	jb     c001a07f <Krnl::startCPU(int)+0x13c>
c001a089:	eb fe                	jmp    c001a089 <Krnl::startCPU(int)+0x146>
c001a08b:	c3                   	ret    

c001a08c <Krnl::startCPUs()>:
c001a08c:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001a091:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a097:	88 c2                	mov    dl,al
c001a099:	83 e2 0a             	and    edx,0xa
c001a09c:	80 fa 0a             	cmp    dl,0xa
c001a09f:	75 09                	jne    c001a0aa <Krnl::startCPUs()+0x1e>
c001a0a1:	a8 01                	test   al,0x1
c001a0a3:	74 05                	je     c001a0aa <Krnl::startCPUs()+0x1e>
c001a0a5:	e9 f1 60 fe ff       	jmp    c000019b <prepareTramp>
c001a0aa:	c3                   	ret    
c001a0ab:	90                   	nop

c001a0ac <EnvVarContainer::getEnv(char const*)>:
c001a0ac:	57                   	push   edi
c001a0ad:	56                   	push   esi
c001a0ae:	53                   	push   ebx
c001a0af:	31 db                	xor    ebx,ebx
c001a0b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0b5:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0b7:	7e 2b                	jle    c001a0e4 <EnvVarContainer::getEnv(char const*)+0x38>
c001a0b9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0c0:	50                   	push   eax
c001a0c1:	50                   	push   eax
c001a0c2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0c5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0cc:	e8 f7 67 fe ff       	call   c00008c8 <strcmp>
c001a0d1:	83 c4 10             	add    esp,0x10
c001a0d4:	85 c0                	test   eax,eax
c001a0d6:	75 09                	jne    c001a0e1 <EnvVarContainer::getEnv(char const*)+0x35>
c001a0d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0db:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0df:	eb 05                	jmp    c001a0e6 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0e1:	43                   	inc    ebx
c001a0e2:	eb d1                	jmp    c001a0b5 <EnvVarContainer::getEnv(char const*)+0x9>
c001a0e4:	31 c0                	xor    eax,eax
c001a0e6:	5b                   	pop    ebx
c001a0e7:	5e                   	pop    esi
c001a0e8:	5f                   	pop    edi
c001a0e9:	c3                   	ret    

c001a0ea <EnvVarContainer::setEnv(char const*, char const*)>:
c001a0ea:	57                   	push   edi
c001a0eb:	56                   	push   esi
c001a0ec:	53                   	push   ebx
c001a0ed:	83 ec 1c             	sub    esp,0x1c
c001a0f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0f4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a0f8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0fc:	57                   	push   edi
c001a0fd:	e8 9a 66 fe ff       	call   c000079c <strlen>
c001a102:	40                   	inc    eax
c001a103:	89 04 24             	mov    DWORD PTR [esp],eax
c001a106:	e8 40 57 ff ff       	call   c000f84b <malloc>
c001a10b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a10e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a112:	e8 85 66 fe ff       	call   c000079c <strlen>
c001a117:	40                   	inc    eax
c001a118:	89 04 24             	mov    DWORD PTR [esp],eax
c001a11b:	e8 2b 57 ff ff       	call   c000f84b <malloc>
c001a120:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a123:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a127:	e8 70 66 fe ff       	call   c000079c <strlen>
c001a12c:	83 c4 0c             	add    esp,0xc
c001a12f:	40                   	inc    eax
c001a130:	50                   	push   eax
c001a131:	6a 00                	push   0x0
c001a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a137:	e8 44 66 fe ff       	call   c0000780 <memset>
c001a13c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a13f:	e8 58 66 fe ff       	call   c000079c <strlen>
c001a144:	83 c4 0c             	add    esp,0xc
c001a147:	40                   	inc    eax
c001a148:	50                   	push   eax
c001a149:	57                   	push   edi
c001a14a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a14e:	e8 f9 65 fe ff       	call   c000074c <memcpy>
c001a153:	89 34 24             	mov    DWORD PTR [esp],esi
c001a156:	e8 41 66 fe ff       	call   c000079c <strlen>
c001a15b:	83 c4 0c             	add    esp,0xc
c001a15e:	40                   	inc    eax
c001a15f:	50                   	push   eax
c001a160:	6a 00                	push   0x0
c001a162:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a166:	e8 15 66 fe ff       	call   c0000780 <memset>
c001a16b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a16e:	e8 29 66 fe ff       	call   c000079c <strlen>
c001a173:	83 c4 0c             	add    esp,0xc
c001a176:	40                   	inc    eax
c001a177:	50                   	push   eax
c001a178:	56                   	push   esi
c001a179:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a17d:	e8 ca 65 fe ff       	call   c000074c <memcpy>
c001a182:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a184:	40                   	inc    eax
c001a185:	89 03                	mov    DWORD PTR [ebx],eax
c001a187:	c1 e0 03             	shl    eax,0x3
c001a18a:	5a                   	pop    edx
c001a18b:	59                   	pop    ecx
c001a18c:	50                   	push   eax
c001a18d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a190:	e8 a2 56 ff ff       	call   c000f837 <realloc>
c001a195:	83 c4 0c             	add    esp,0xc
c001a198:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a19b:	6a 08                	push   0x8
c001a19d:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a1a1:	52                   	push   edx
c001a1a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a1a4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a1a8:	50                   	push   eax
c001a1a9:	e8 9e 65 fe ff       	call   c000074c <memcpy>
c001a1ae:	83 c4 20             	add    esp,0x20
c001a1b1:	5b                   	pop    ebx
c001a1b2:	5e                   	pop    esi
c001a1b3:	5f                   	pop    edi
c001a1b4:	c3                   	ret    
c001a1b5:	90                   	nop

c001a1b6 <EnvVarContainer::deleteEnv(char const*)>:
c001a1b6:	c3                   	ret    
c001a1b7:	90                   	nop

c001a1b8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1b8:	55                   	push   ebp
c001a1b9:	57                   	push   edi
c001a1ba:	56                   	push   esi
c001a1bb:	53                   	push   ebx
c001a1bc:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1c2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a1c9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a1d0:	68 14 01 00 00       	push   0x114
c001a1d5:	e8 71 56 ff ff       	call   c000f84b <malloc>
c001a1da:	83 c4 0c             	add    esp,0xc
c001a1dd:	89 c7                	mov    edi,eax
c001a1df:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1e2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1e9:	50                   	push   eax
c001a1ea:	e8 0f 92 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001a1ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1f2:	e8 d9 94 ff ff       	call   c00136d0 <File::exists()>
c001a1f7:	83 c4 10             	add    esp,0x10
c001a1fa:	84 c0                	test   al,al
c001a1fc:	75 31                	jne    c001a22f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1fe:	51                   	push   ecx
c001a1ff:	51                   	push   ecx
c001a200:	6a 12                	push   0x12
c001a202:	57                   	push   edi
c001a203:	e8 5a 92 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001a208:	8b 07                	mov    eax,DWORD PTR [edi]
c001a20a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a20d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a210:	e8 87 65 fe ff       	call   c000079c <strlen>
c001a215:	5a                   	pop    edx
c001a216:	31 d2                	xor    edx,edx
c001a218:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a21c:	51                   	push   ecx
c001a21d:	55                   	push   ebp
c001a21e:	52                   	push   edx
c001a21f:	50                   	push   eax
c001a220:	57                   	push   edi
c001a221:	ff d3                	call   ebx
c001a223:	83 c4 14             	add    esp,0x14
c001a226:	57                   	push   edi
c001a227:	e8 94 92 ff ff       	call   c00134c0 <File::close()>
c001a22c:	83 c4 10             	add    esp,0x10
c001a22f:	31 db                	xor    ebx,ebx
c001a231:	50                   	push   eax
c001a232:	31 ed                	xor    ebp,ebp
c001a234:	68 00 01 00 00       	push   0x100
c001a239:	6a 00                	push   0x0
c001a23b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a23f:	50                   	push   eax
c001a240:	e8 3b 65 fe ff       	call   c0000780 <memset>
c001a245:	58                   	pop    eax
c001a246:	5a                   	pop    edx
c001a247:	6a 01                	push   0x1
c001a249:	57                   	push   edi
c001a24a:	e8 13 92 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001a24f:	83 c4 10             	add    esp,0x10
c001a252:	83 ec 0c             	sub    esp,0xc
c001a255:	8b 07                	mov    eax,DWORD PTR [edi]
c001a257:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a25b:	51                   	push   ecx
c001a25c:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a260:	52                   	push   edx
c001a261:	6a 00                	push   0x0
c001a263:	6a 01                	push   0x1
c001a265:	57                   	push   edi
c001a266:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a269:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a26d:	83 c4 20             	add    esp,0x20
c001a270:	3c 0d                	cmp    al,0xd
c001a272:	0f 84 12 01 00 00    	je     c001a38a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a278:	85 db                	test   ebx,ebx
c001a27a:	0f 84 fd 00 00 00    	je     c001a37d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a280:	3c 0a                	cmp    al,0xa
c001a282:	74 13                	je     c001a297 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a284:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a289:	74 0c                	je     c001a297 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a28b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a291:	0f 8e e6 00 00 00    	jle    c001a37d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a297:	83 ec 0c             	sub    esp,0xc
c001a29a:	8d 53 01             	lea    edx,[ebx+0x1]
c001a29d:	29 dd                	sub    ebp,ebx
c001a29f:	52                   	push   edx
c001a2a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a2a4:	e8 a2 55 ff ff       	call   c000f84b <malloc>
c001a2a9:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a2b3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a2b7:	e8 8f 55 ff ff       	call   c000f84b <malloc>
c001a2bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2c0:	83 c4 0c             	add    esp,0xc
c001a2c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a2c7:	52                   	push   edx
c001a2c8:	6a 00                	push   0x0
c001a2ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2ce:	e8 ad 64 fe ff       	call   c0000780 <memset>
c001a2d3:	83 c4 0c             	add    esp,0xc
c001a2d6:	53                   	push   ebx
c001a2d7:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2db:	55                   	push   ebp
c001a2dc:	01 eb                	add    ebx,ebp
c001a2de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2e2:	e8 65 64 fe ff       	call   c000074c <memcpy>
c001a2e7:	83 c4 0c             	add    esp,0xc
c001a2ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2ee:	51                   	push   ecx
c001a2ef:	6a 00                	push   0x0
c001a2f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2f5:	e8 86 64 fe ff       	call   c0000780 <memset>
c001a2fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2fd:	e8 9a 64 fe ff       	call   c000079c <strlen>
c001a302:	83 c4 0c             	add    esp,0xc
c001a305:	50                   	push   eax
c001a306:	53                   	push   ebx
c001a307:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a30b:	e8 3c 64 fe ff       	call   c000074c <memcpy>
c001a310:	5b                   	pop    ebx
c001a311:	58                   	pop    eax
c001a312:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a316:	68 4d bb 02 c0       	push   0xc002bb4d
c001a31b:	e8 85 8b ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001a320:	8b 06                	mov    eax,DWORD PTR [esi]
c001a322:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a325:	40                   	inc    eax
c001a326:	83 c4 10             	add    esp,0x10
c001a329:	89 06                	mov    DWORD PTR [esi],eax
c001a32b:	85 d2                	test   edx,edx
c001a32d:	75 0c                	jne    c001a33b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a32f:	83 ec 0c             	sub    esp,0xc
c001a332:	6a 08                	push   0x8
c001a334:	e8 12 55 ff ff       	call   c000f84b <malloc>
c001a339:	eb 0c                	jmp    c001a347 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a33b:	c1 e0 03             	shl    eax,0x3
c001a33e:	51                   	push   ecx
c001a33f:	51                   	push   ecx
c001a340:	50                   	push   eax
c001a341:	52                   	push   edx
c001a342:	e8 f0 54 ff ff       	call   c000f837 <realloc>
c001a347:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a34a:	83 c4 10             	add    esp,0x10
c001a34d:	31 db                	xor    ebx,ebx
c001a34f:	52                   	push   edx
c001a350:	6a 08                	push   0x8
c001a352:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a356:	50                   	push   eax
c001a357:	8b 16                	mov    edx,DWORD PTR [esi]
c001a359:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a35c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a360:	50                   	push   eax
c001a361:	e8 e6 63 fe ff       	call   c000074c <memcpy>
c001a366:	83 c4 0c             	add    esp,0xc
c001a369:	68 00 01 00 00       	push   0x100
c001a36e:	6a 00                	push   0x0
c001a370:	55                   	push   ebp
c001a371:	31 ed                	xor    ebp,ebp
c001a373:	e8 08 64 fe ff       	call   c0000780 <memset>
c001a378:	83 c4 10             	add    esp,0x10
c001a37b:	eb 0d                	jmp    c001a38a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a37d:	3c 3d                	cmp    al,0x3d
c001a37f:	74 07                	je     c001a388 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a381:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a385:	45                   	inc    ebp
c001a386:	eb 02                	jmp    c001a38a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a388:	89 eb                	mov    ebx,ebp
c001a38a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a38f:	0f 85 bd fe ff ff    	jne    c001a252 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a395:	50                   	push   eax
c001a396:	50                   	push   eax
c001a397:	ff 36                	push   DWORD PTR [esi]
c001a399:	68 5b bb 02 c0       	push   0xc002bb5b
c001a39e:	e8 02 8b ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001a3a3:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a3a9:	5b                   	pop    ebx
c001a3aa:	5e                   	pop    esi
c001a3ab:	5f                   	pop    edi
c001a3ac:	5d                   	pop    ebp
c001a3ad:	c3                   	ret    

c001a3ae <EnvVarContainer::__loadSystem()>:
c001a3ae:	83 ec 10             	sub    esp,0x10
c001a3b1:	68 a0 da 02 c0       	push   0xc002daa0
c001a3b6:	68 86 bb 02 c0       	push   0xc002bb86
c001a3bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3bf:	e8 f4 fd ff ff       	call   c001a1b8 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3c4:	83 c4 1c             	add    esp,0x1c
c001a3c7:	c3                   	ret    

c001a3c8 <EnvVarContainer::__loadUser()>:
c001a3c8:	c3                   	ret    
c001a3c9:	90                   	nop

c001a3ca <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3dc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a3ea:	90                   	nop
c001a3eb:	c3                   	ret    

c001a3ec <EnvVarContainer::~EnvVarContainer()>:
c001a3ec:	83 ec 0c             	sub    esp,0xc
c001a3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3f6:	85 c0                	test   eax,eax
c001a3f8:	74 1d                	je     c001a417 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3fe:	8b 00                	mov    eax,DWORD PTR [eax]
c001a400:	85 c0                	test   eax,eax
c001a402:	74 13                	je     c001a417 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a408:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a40b:	83 ec 0c             	sub    esp,0xc
c001a40e:	50                   	push   eax
c001a40f:	e8 47 54 ff ff       	call   c000f85b <free>
c001a414:	83 c4 10             	add    esp,0x10
c001a417:	90                   	nop
c001a418:	83 c4 0c             	add    esp,0xc
c001a41b:	c3                   	ret    

c001a41c <Krnl::getEnv(Process*, char const*)>:
c001a41c:	53                   	push   ebx
c001a41d:	83 ec 08             	sub    esp,0x8
c001a420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a424:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a428:	39 05 d4 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ad4,eax
c001a42e:	74 04                	je     c001a434 <Krnl::getEnv(Process*, char const*)+0x18>
c001a430:	85 c0                	test   eax,eax
c001a432:	75 0b                	jne    c001a43f <Krnl::getEnv(Process*, char const*)+0x23>
c001a434:	a1 b4 10 03 c0       	mov    eax,ds:0xc00310b4
c001a439:	85 c0                	test   eax,eax
c001a43b:	75 19                	jne    c001a456 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a43d:	eb 27                	jmp    c001a466 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a43f:	52                   	push   edx
c001a440:	52                   	push   edx
c001a441:	53                   	push   ebx
c001a442:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a448:	e8 5f fc ff ff       	call   c001a0ac <EnvVarContainer::getEnv(char const*)>
c001a44d:	83 c4 10             	add    esp,0x10
c001a450:	85 c0                	test   eax,eax
c001a452:	75 28                	jne    c001a47c <Krnl::getEnv(Process*, char const*)+0x60>
c001a454:	eb de                	jmp    c001a434 <Krnl::getEnv(Process*, char const*)+0x18>
c001a456:	52                   	push   edx
c001a457:	52                   	push   edx
c001a458:	53                   	push   ebx
c001a459:	50                   	push   eax
c001a45a:	e8 4d fc ff ff       	call   c001a0ac <EnvVarContainer::getEnv(char const*)>
c001a45f:	83 c4 10             	add    esp,0x10
c001a462:	85 c0                	test   eax,eax
c001a464:	75 16                	jne    c001a47c <Krnl::getEnv(Process*, char const*)+0x60>
c001a466:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a46a:	a1 b8 10 03 c0       	mov    eax,ds:0xc00310b8
c001a46f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a473:	83 c4 08             	add    esp,0x8
c001a476:	5b                   	pop    ebx
c001a477:	e9 30 fc ff ff       	jmp    c001a0ac <EnvVarContainer::getEnv(char const*)>
c001a47c:	83 c4 08             	add    esp,0x8
c001a47f:	5b                   	pop    ebx
c001a480:	c3                   	ret    

c001a481 <Krnl::setEnvSystem(char const*, char const*)>:
c001a481:	83 ec 10             	sub    esp,0x10
c001a484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a488:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a48c:	ff 35 b8 10 03 c0    	push   DWORD PTR ds:0xc00310b8
c001a492:	e8 53 fc ff ff       	call   c001a0ea <EnvVarContainer::setEnv(char const*, char const*)>
c001a497:	83 c4 1c             	add    esp,0x1c
c001a49a:	c3                   	ret    

c001a49b <Krnl::setEnvUser(char const*, char const*)>:
c001a49b:	a1 b4 10 03 c0       	mov    eax,ds:0xc00310b4
c001a4a0:	85 c0                	test   eax,eax
c001a4a2:	74 15                	je     c001a4b9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a4a4:	83 ec 10             	sub    esp,0x10
c001a4a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4af:	50                   	push   eax
c001a4b0:	e8 35 fc ff ff       	call   c001a0ea <EnvVarContainer::setEnv(char const*, char const*)>
c001a4b5:	83 c4 1c             	add    esp,0x1c
c001a4b8:	c3                   	ret    
c001a4b9:	c3                   	ret    

c001a4ba <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4be:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4c8:	e9 1d fc ff ff       	jmp    c001a0ea <EnvVarContainer::setEnv(char const*, char const*)>

c001a4cd <Krnl::deleteEnvSystem(char const*)>:
c001a4cd:	c3                   	ret    

c001a4ce <Krnl::deleteEnvUser(char const*)>:
c001a4ce:	c3                   	ret    

c001a4cf <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4cf:	c3                   	ret    

c001a4d0 <Krnl::newProcessEnv(Process*)>:
c001a4d0:	83 ec 28             	sub    esp,0x28
c001a4d3:	6a 0c                	push   0xc
c001a4d5:	e8 71 53 ff ff       	call   c000f84b <malloc>
c001a4da:	5a                   	pop    edx
c001a4db:	59                   	pop    ecx
c001a4dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4e0:	50                   	push   eax
c001a4e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4e5:	e8 e0 fe ff ff       	call   c001a3ca <EnvVarContainer::EnvVarContainer(Process*)>
c001a4ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4ee:	83 c4 2c             	add    esp,0x2c
c001a4f1:	c3                   	ret    

c001a4f2 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a4f2:	56                   	push   esi
c001a4f3:	53                   	push   ebx
c001a4f4:	83 ec 10             	sub    esp,0x10
c001a4f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4fb:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a501:	6a 0c                	push   0xc
c001a503:	e8 43 53 ff ff       	call   c000f84b <malloc>
c001a508:	89 c3                	mov    ebx,eax
c001a50a:	58                   	pop    eax
c001a50b:	5a                   	pop    edx
c001a50c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a510:	53                   	push   ebx
c001a511:	e8 b4 fe ff ff       	call   c001a3ca <EnvVarContainer::EnvVarContainer(Process*)>
c001a516:	8b 06                	mov    eax,DWORD PTR [esi]
c001a518:	89 03                	mov    DWORD PTR [ebx],eax
c001a51a:	c1 e0 03             	shl    eax,0x3
c001a51d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a520:	e8 26 53 ff ff       	call   c000f84b <malloc>
c001a525:	83 c4 0c             	add    esp,0xc
c001a528:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a52b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a52d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a534:	52                   	push   edx
c001a535:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a538:	50                   	push   eax
c001a539:	e8 0e 62 fe ff       	call   c000074c <memcpy>
c001a53e:	89 d8                	mov    eax,ebx
c001a540:	83 c4 14             	add    esp,0x14
c001a543:	5b                   	pop    ebx
c001a544:	5e                   	pop    esi
c001a545:	c3                   	ret    

c001a546 <Krnl::loadSystemEnv()>:
c001a546:	53                   	push   ebx
c001a547:	83 ec 14             	sub    esp,0x14
c001a54a:	6a 0c                	push   0xc
c001a54c:	e8 fa 52 ff ff       	call   c000f84b <malloc>
c001a551:	89 c3                	mov    ebx,eax
c001a553:	58                   	pop    eax
c001a554:	5a                   	pop    edx
c001a555:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c001a55b:	53                   	push   ebx
c001a55c:	e8 69 fe ff ff       	call   c001a3ca <EnvVarContainer::EnvVarContainer(Process*)>
c001a561:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a564:	89 1d b8 10 03 c0    	mov    DWORD PTR ds:0xc00310b8,ebx
c001a56a:	e8 3f fe ff ff       	call   c001a3ae <EnvVarContainer::__loadSystem()>
c001a56f:	83 c4 18             	add    esp,0x18
c001a572:	5b                   	pop    ebx
c001a573:	c3                   	ret    

c001a574 <Krnl::loadUserEnv()>:
c001a574:	53                   	push   ebx
c001a575:	83 ec 14             	sub    esp,0x14
c001a578:	6a 0c                	push   0xc
c001a57a:	e8 cc 52 ff ff       	call   c000f84b <malloc>
c001a57f:	89 c3                	mov    ebx,eax
c001a581:	58                   	pop    eax
c001a582:	5a                   	pop    edx
c001a583:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c001a589:	53                   	push   ebx
c001a58a:	e8 3b fe ff ff       	call   c001a3ca <EnvVarContainer::EnvVarContainer(Process*)>
c001a58f:	89 1d b4 10 03 c0    	mov    DWORD PTR ds:0xc00310b4,ebx
c001a595:	83 c4 18             	add    esp,0x18
c001a598:	5b                   	pop    ebx
c001a599:	c3                   	ret    

c001a59a <Krnl::flushEnv()>:
c001a59a:	c3                   	ret    

c001a59b <Krnl::getProcessTotalEnvCount(Process*)>:
c001a59b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a59f:	8b 15 b4 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310b4
c001a5a5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a5ab:	a1 b8 10 03 c0       	mov    eax,ds:0xc00310b8
c001a5b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5b2:	03 01                	add    eax,DWORD PTR [ecx]
c001a5b4:	85 d2                	test   edx,edx
c001a5b6:	74 02                	je     c001a5ba <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5b8:	03 02                	add    eax,DWORD PTR [edx]
c001a5ba:	c3                   	ret    

c001a5bb <Krnl::getProcessEnvPair(Process*, int)>:
c001a5bb:	57                   	push   edi
c001a5bc:	8b 0d b4 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310b4
c001a5c2:	56                   	push   esi
c001a5c3:	85 c9                	test   ecx,ecx
c001a5c5:	53                   	push   ebx
c001a5c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5ce:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5d8:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5da:	75 47                	jne    c001a623 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5dc:	39 c3                	cmp    ebx,eax
c001a5de:	7c 47                	jl     c001a627 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5e0:	8b 15 b8 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310b8
c001a5e6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5e8:	01 c1                	add    ecx,eax
c001a5ea:	39 d9                	cmp    ecx,ebx
c001a5ec:	7e 6c                	jle    c001a65a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5ee:	51                   	push   ecx
c001a5ef:	89 d9                	mov    ecx,ebx
c001a5f1:	29 c1                	sub    ecx,eax
c001a5f3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5f6:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a5fa:	53                   	push   ebx
c001a5fb:	68 a8 bb 02 c0       	push   0xc002bba8
c001a600:	e8 a0 88 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001a605:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a60b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a60d:	a1 b8 10 03 c0       	mov    eax,ds:0xc00310b8
c001a612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a615:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a619:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a61c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a61f:	89 06                	mov    DWORD PTR [esi],eax
c001a621:	eb 51                	jmp    c001a674 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a623:	39 c3                	cmp    ebx,eax
c001a625:	7d 05                	jge    c001a62c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a627:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a62a:	eb 20                	jmp    c001a64c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a62c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a62e:	8d 14 07             	lea    edx,[edi+eax*1]
c001a631:	39 da                	cmp    edx,ebx
c001a633:	7e 04                	jle    c001a639 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a635:	29 c3                	sub    ebx,eax
c001a637:	eb 10                	jmp    c001a649 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a639:	8b 0d b8 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310b8
c001a63f:	03 11                	add    edx,DWORD PTR [ecx]
c001a641:	39 da                	cmp    edx,ebx
c001a643:	7e 15                	jle    c001a65a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a645:	29 c3                	sub    ebx,eax
c001a647:	29 fb                	sub    ebx,edi
c001a649:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a64c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a650:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a653:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a656:	89 06                	mov    DWORD PTR [esi],eax
c001a658:	eb 1d                	jmp    c001a677 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a65a:	83 ec 0c             	sub    esp,0xc
c001a65d:	68 bc bb 02 c0       	push   0xc002bbbc
c001a662:	e8 18 00 00 00       	call   c001a67f <Krnl::panic(char const*)>
c001a667:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a66d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a674:	83 c4 10             	add    esp,0x10
c001a677:	89 f0                	mov    eax,esi
c001a679:	5b                   	pop    ebx
c001a67a:	5e                   	pop    esi
c001a67b:	5f                   	pop    edi
c001a67c:	c2 04 00             	ret    0x4

c001a67f <Krnl::panic(char const*)>:
c001a67f:	55                   	push   ebp
c001a680:	89 e5                	mov    ebp,esp
c001a682:	53                   	push   ebx
c001a683:	83 ec 0c             	sub    esp,0xc
c001a686:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a689:	fa                   	cli    
c001a68a:	c6 05 c4 10 03 c0 01 	mov    BYTE PTR ds:0xc00310c4,0x1
c001a691:	53                   	push   ebx
c001a692:	c6 05 a4 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d4a4,0x0
c001a699:	68 d6 bb 02 c0       	push   0xc002bbd6
c001a69e:	e8 02 88 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001a6a3:	58                   	pop    eax
c001a6a4:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a6a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6af:	e8 49 66 ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c001a6b4:	83 c4 0c             	add    esp,0xc
c001a6b7:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a6bc:	6a 01                	push   0x1
c001a6be:	6a 0f                	push   0xf
c001a6c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c6:	e8 63 60 ff ff       	call   c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6cb:	58                   	pop    eax
c001a6cc:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a6d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d7:	e8 c2 68 ff ff       	call   c0010f9e <VgaText::clearScreen()>
c001a6dc:	58                   	pop    eax
c001a6dd:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a6e2:	5a                   	pop    edx
c001a6e3:	68 ef bb 02 c0       	push   0xc002bbef
c001a6e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ee:	e8 29 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6f3:	59                   	pop    ecx
c001a6f4:	58                   	pop    eax
c001a6f5:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a6fa:	68 94 bc 02 c0       	push   0xc002bc94
c001a6ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a705:	e8 12 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a70a:	58                   	pop    eax
c001a70b:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a710:	5a                   	pop    edx
c001a711:	68 0b bc 02 c0       	push   0xc002bc0b
c001a716:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a71c:	e8 fb 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a721:	59                   	pop    ecx
c001a722:	58                   	pop    eax
c001a723:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a728:	53                   	push   ebx
c001a729:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72f:	e8 e8 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a734:	58                   	pop    eax
c001a735:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a73a:	5a                   	pop    edx
c001a73b:	68 2b bc 02 c0       	push   0xc002bc2b
c001a740:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a746:	e8 d1 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a74b:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	85 c0                	test   eax,eax
c001a755:	74 02                	je     c001a759 <Krnl::panic(char const*)+0xda>
c001a757:	ff d0                	call   eax
c001a759:	83 ec 0c             	sub    esp,0xc
c001a75c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a75f:	e8 fd 2f 00 00       	call   c001d761 <Thr::getDriverNameFromAddress(unsigned long)>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	89 c3                	mov    ebx,eax
c001a769:	85 c0                	test   eax,eax
c001a76b:	0f 84 50 02 00 00    	je     c001a9c1 <Krnl::panic(char const*)+0x342>
c001a771:	83 ec 08             	sub    esp,0x8
c001a774:	8b 15 d4 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ad4
c001a77a:	68 d0 bc 02 c0       	push   0xc002bcd0
c001a77f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a785:	e8 92 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a78a:	58                   	pop    eax
c001a78b:	5a                   	pop    edx
c001a78c:	8b 15 d4 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ad4
c001a792:	68 0b bc 02 c0       	push   0xc002bc0b
c001a797:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a79d:	e8 7a 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7a2:	59                   	pop    ecx
c001a7a3:	58                   	pop    eax
c001a7a4:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a7a9:	53                   	push   ebx
c001a7aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7b0:	e8 67 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7b5:	83 c4 10             	add    esp,0x10
c001a7b8:	83 ec 08             	sub    esp,0x8
c001a7bb:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a7c0:	68 2a bc 02 c0       	push   0xc002bc2a
c001a7c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7cb:	e8 4c 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7d0:	58                   	pop    eax
c001a7d1:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a7d6:	5a                   	pop    edx
c001a7d7:	68 28 bd 02 c0       	push   0xc002bd28
c001a7dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e2:	e8 35 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7e7:	59                   	pop    ecx
c001a7e8:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a7ed:	5b                   	pop    ebx
c001a7ee:	68 68 bd 02 c0       	push   0xc002bd68
c001a7f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f9:	e8 1e 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7fe:	58                   	pop    eax
c001a7ff:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a804:	5a                   	pop    edx
c001a805:	68 16 bc 02 c0       	push   0xc002bc16
c001a80a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a810:	e8 07 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a815:	59                   	pop    ecx
c001a816:	5b                   	pop    ebx
c001a817:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a81a:	68 2e bc 02 c0       	push   0xc002bc2e
c001a81f:	e8 81 86 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001a824:	58                   	pop    eax
c001a825:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a828:	5a                   	pop    edx
c001a829:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a82c:	68 37 bc 02 c0       	push   0xc002bc37
c001a831:	e8 6f 86 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001a836:	59                   	pop    ecx
c001a837:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a83a:	5b                   	pop    ebx
c001a83b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a83d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a840:	68 40 bc 02 c0       	push   0xc002bc40
c001a845:	e8 5b 86 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001a84a:	58                   	pop    eax
c001a84b:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a850:	5a                   	pop    edx
c001a851:	68 ac bd 02 c0       	push   0xc002bdac
c001a856:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85c:	e8 bb 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a861:	59                   	pop    ecx
c001a862:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a867:	5b                   	pop    ebx
c001a868:	68 49 bc 02 c0       	push   0xc002bc49
c001a86d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a873:	e8 a4 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a878:	0f 20 c0             	mov    eax,cr0
c001a87b:	5a                   	pop    edx
c001a87c:	59                   	pop    ecx
c001a87d:	50                   	push   eax
c001a87e:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a883:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a889:	e8 b4 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a88e:	5b                   	pop    ebx
c001a88f:	58                   	pop    eax
c001a890:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a895:	68 53 bc 02 c0       	push   0xc002bc53
c001a89a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a0:	e8 77 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a8a5:	0f 20 d0             	mov    eax,cr2
c001a8a8:	5a                   	pop    edx
c001a8a9:	59                   	pop    ecx
c001a8aa:	50                   	push   eax
c001a8ab:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a8b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b6:	e8 87 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a8bb:	5b                   	pop    ebx
c001a8bc:	58                   	pop    eax
c001a8bd:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a8c2:	68 5d bc 02 c0       	push   0xc002bc5d
c001a8c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8cd:	e8 4a 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a8d2:	0f 20 d8             	mov    eax,cr3
c001a8d5:	5a                   	pop    edx
c001a8d6:	59                   	pop    ecx
c001a8d7:	50                   	push   eax
c001a8d8:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a8dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e3:	e8 5a 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a8e8:	5b                   	pop    ebx
c001a8e9:	58                   	pop    eax
c001a8ea:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a8ef:	68 70 bc 02 c0       	push   0xc002bc70
c001a8f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8fa:	e8 1d 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a8ff:	0f 20 e0             	mov    eax,cr4
c001a902:	5a                   	pop    edx
c001a903:	59                   	pop    ecx
c001a904:	50                   	push   eax
c001a905:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a90a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a910:	e8 2d 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a915:	5b                   	pop    ebx
c001a916:	58                   	pop    eax
c001a917:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a91c:	68 7a bc 02 c0       	push   0xc002bc7a
c001a921:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a927:	e8 f0 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a92c:	5a                   	pop    edx
c001a92d:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a932:	59                   	pop    ecx
c001a933:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a939:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a93c:	50                   	push   eax
c001a93d:	e8 00 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a942:	5b                   	pop    ebx
c001a943:	58                   	pop    eax
c001a944:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a949:	68 91 bc 02 c0       	push   0xc002bc91
c001a94e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a954:	e8 c3 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a959:	5a                   	pop    edx
c001a95a:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a95f:	59                   	pop    ecx
c001a960:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a966:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a969:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a96c:	50                   	push   eax
c001a96d:	e8 d0 67 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a972:	5b                   	pop    ebx
c001a973:	58                   	pop    eax
c001a974:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a979:	68 91 bc 02 c0       	push   0xc002bc91
c001a97e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a984:	e8 93 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a989:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a98e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a991:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a997:	8b 12                	mov    edx,DWORD PTR [edx]
c001a999:	59                   	pop    ecx
c001a99a:	5b                   	pop    ebx
c001a99b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a99e:	50                   	push   eax
c001a99f:	e8 9e 67 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a9a4:	83 c4 10             	add    esp,0x10
c001a9a7:	b2 fe                	mov    dl,0xfe
c001a9a9:	e4 60                	in     al,0x60
c001a9ab:	3c 1c                	cmp    al,0x1c
c001a9ad:	74 04                	je     c001a9b3 <Krnl::panic(char const*)+0x334>
c001a9af:	3c 5a                	cmp    al,0x5a
c001a9b1:	75 f6                	jne    c001a9a9 <Krnl::panic(char const*)+0x32a>
c001a9b3:	e4 64                	in     al,0x64
c001a9b5:	a8 02                	test   al,0x2
c001a9b7:	75 fa                	jne    c001a9b3 <Krnl::panic(char const*)+0x334>
c001a9b9:	88 d0                	mov    al,dl
c001a9bb:	e6 64                	out    0x64,al
c001a9bd:	fa                   	cli    
c001a9be:	f4                   	hlt    
c001a9bf:	eb e8                	jmp    c001a9a9 <Krnl::panic(char const*)+0x32a>
c001a9c1:	50                   	push   eax
c001a9c2:	50                   	push   eax
c001a9c3:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a9c8:	68 fc bc 02 c0       	push   0xc002bcfc
c001a9cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d3:	e8 44 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a9d8:	58                   	pop    eax
c001a9d9:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001a9de:	5a                   	pop    edx
c001a9df:	68 0b bc 02 c0       	push   0xc002bc0b
c001a9e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ea:	e8 2d 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a9ef:	59                   	pop    ecx
c001a9f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9f5:	5b                   	pop    ebx
c001a9f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9f9:	83 c0 0c             	add    eax,0xc
c001a9fc:	50                   	push   eax
c001a9fd:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001aa02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa08:	e8 0f 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001aa0d:	83 c4 10             	add    esp,0x10
c001aa10:	e9 a3 fd ff ff       	jmp    c001a7b8 <Krnl::panic(char const*)+0x139>

c001aa15 <Net::switchEndian16(unsigned short)>:
c001aa15:	83 ec 04             	sub    esp,0x4
c001aa18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa1c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa20:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa24:	c1 f8 08             	sar    eax,0x8
c001aa27:	89 c2                	mov    edx,eax
c001aa29:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa2d:	c1 e0 08             	shl    eax,0x8
c001aa30:	09 d0                	or     eax,edx
c001aa32:	83 c4 04             	add    esp,0x4
c001aa35:	c3                   	ret    

c001aa36 <Net::switchEndian32(unsigned int)>:
c001aa36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa3a:	c1 e8 18             	shr    eax,0x18
c001aa3d:	89 c2                	mov    edx,eax
c001aa3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa43:	c1 e0 08             	shl    eax,0x8
c001aa46:	25 00 00 ff 00       	and    eax,0xff0000
c001aa4b:	09 c2                	or     edx,eax
c001aa4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa51:	c1 e8 08             	shr    eax,0x8
c001aa54:	25 00 ff 00 00       	and    eax,0xff00
c001aa59:	09 c2                	or     edx,eax
c001aa5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa5f:	c1 e0 18             	shl    eax,0x18
c001aa62:	09 d0                	or     eax,edx
c001aa64:	c3                   	ret    

c001aa65 <Net::crc32Calc(unsigned char*, int)>:
c001aa65:	83 ec 10             	sub    esp,0x10
c001aa68:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa6d:	75 07                	jne    c001aa76 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa6f:	b8 00 00 00 00       	mov    eax,0x0
c001aa74:	eb 7c                	jmp    c001aaf2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa76:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa7b:	7f 07                	jg     c001aa84 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa7d:	b8 00 00 00 00       	mov    eax,0x0
c001aa82:	eb 6e                	jmp    c001aaf2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa84:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa98:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa9c:	7d 4e                	jge    c001aaec <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aaa2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aaa6:	01 d0                	add    eax,edx
c001aaa8:	8a 00                	mov    al,BYTE PTR [eax]
c001aaaa:	0f b6 c0             	movzx  eax,al
c001aaad:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aab1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aab9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aabe:	7f 26                	jg     c001aae6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac4:	83 e0 01             	and    eax,0x1
c001aac7:	74 0d                	je     c001aad6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aacd:	d1 e8                	shr    eax,1
c001aacf:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aad4:	eb 06                	jmp    c001aadc <Net::crc32Calc(unsigned char*, int)+0x77>
c001aad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aada:	d1 e8                	shr    eax,1
c001aadc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aae0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aae4:	eb d3                	jmp    c001aab9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aae6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aaea:	eb a8                	jmp    c001aa94 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf0:	f7 d0                	not    eax
c001aaf2:	83 c4 10             	add    esp,0x10
c001aaf5:	c3                   	ret    

c001aaf6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aaf6:	83 ec 1c             	sub    esp,0x1c
c001aaf9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aafd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab09:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab0e:	7f 14                	jg     c001ab24 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab14:	8d 50 01             	lea    edx,[eax+0x1]
c001ab17:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab1b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab1e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab22:	eb e5                	jmp    c001ab09 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab28:	8d 50 01             	lea    edx,[eax+0x1]
c001ab2b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab2f:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab32:	83 ec 04             	sub    esp,0x4
c001ab35:	6a 06                	push   0x6
c001ab37:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab3b:	50                   	push   eax
c001ab3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab40:	e8 07 5c fe ff       	call   c000074c <memcpy>
c001ab45:	83 c4 10             	add    esp,0x10
c001ab48:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab4d:	83 ec 04             	sub    esp,0x4
c001ab50:	6a 06                	push   0x6
c001ab52:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab56:	50                   	push   eax
c001ab57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab5b:	e8 ec 5b fe ff       	call   c000074c <memcpy>
c001ab60:	83 c4 10             	add    esp,0x10
c001ab63:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab6c:	0f b7 c0             	movzx  eax,ax
c001ab6f:	c1 f8 08             	sar    eax,0x8
c001ab72:	89 c1                	mov    ecx,eax
c001ab74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab78:	8d 50 01             	lea    edx,[eax+0x1]
c001ab7b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab7f:	88 ca                	mov    dl,cl
c001ab81:	88 10                	mov    BYTE PTR [eax],dl
c001ab83:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab8b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab8e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab92:	88 10                	mov    BYTE PTR [eax],dl
c001ab94:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab9c:	83 ec 04             	sub    esp,0x4
c001ab9f:	52                   	push   edx
c001aba0:	50                   	push   eax
c001aba1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aba5:	e8 a2 5b fe ff       	call   c000074c <memcpy>
c001abaa:	83 c4 10             	add    esp,0x10
c001abad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abb1:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001abb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001abbd:	83 ec 08             	sub    esp,0x8
c001abc0:	50                   	push   eax
c001abc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001abc5:	e8 9b fe ff ff       	call   c001aa65 <Net::crc32Calc(unsigned char*, int)>
c001abca:	83 c4 10             	add    esp,0x10
c001abcd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abd5:	c1 e8 18             	shr    eax,0x18
c001abd8:	89 c1                	mov    ecx,eax
c001abda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abde:	8d 50 01             	lea    edx,[eax+0x1]
c001abe1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abe5:	88 ca                	mov    dl,cl
c001abe7:	88 10                	mov    BYTE PTR [eax],dl
c001abe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abed:	c1 e8 10             	shr    eax,0x10
c001abf0:	89 c1                	mov    ecx,eax
c001abf2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abf6:	8d 50 01             	lea    edx,[eax+0x1]
c001abf9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abfd:	88 ca                	mov    dl,cl
c001abff:	88 10                	mov    BYTE PTR [eax],dl
c001ac01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac05:	c1 e8 08             	shr    eax,0x8
c001ac08:	89 c1                	mov    ecx,eax
c001ac0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac11:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac15:	88 ca                	mov    dl,cl
c001ac17:	88 10                	mov    BYTE PTR [eax],dl
c001ac19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac1d:	8d 50 01             	lea    edx,[eax+0x1]
c001ac20:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac28:	88 10                	mov    BYTE PTR [eax],dl
c001ac2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac2e:	83 c4 1c             	add    esp,0x1c
c001ac31:	c3                   	ret    

c001ac32 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac32:	83 ec 2c             	sub    esp,0x2c
c001ac35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac3d:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac42:	83 ec 04             	sub    esp,0x4
c001ac45:	6a 06                	push   0x6
c001ac47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac4f:	83 c0 0e             	add    eax,0xe
c001ac52:	50                   	push   eax
c001ac53:	e8 f4 5a fe ff       	call   c000074c <memcpy>
c001ac58:	83 c4 10             	add    esp,0x10
c001ac5b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac60:	83 ec 04             	sub    esp,0x4
c001ac63:	6a 06                	push   0x6
c001ac65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac6d:	83 c0 08             	add    eax,0x8
c001ac70:	50                   	push   eax
c001ac71:	e8 d6 5a fe ff       	call   c000074c <memcpy>
c001ac76:	83 c4 10             	add    esp,0x10
c001ac79:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac82:	8d 50 01             	lea    edx,[eax+0x1]
c001ac85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac89:	8a 00                	mov    al,BYTE PTR [eax]
c001ac8b:	0f b6 c0             	movzx  eax,al
c001ac8e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac97:	8d 50 01             	lea    edx,[eax+0x1]
c001ac9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac9e:	8a 00                	mov    al,BYTE PTR [eax]
c001aca0:	0f b6 c0             	movzx  eax,al
c001aca3:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aca8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001acad:	c1 e0 08             	shl    eax,0x8
c001acb0:	89 c2                	mov    edx,eax
c001acb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acb6:	09 d0                	or     eax,edx
c001acb8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001acbc:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001acc0:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001acc5:	75 3a                	jne    c001ad01 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001accb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acce:	66 3d dc 05          	cmp    ax,0x5dc
c001acd2:	77 10                	ja     c001ace4 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001acd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acd8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acdb:	0f b7 c0             	movzx  eax,ax
c001acde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ace2:	eb 1d                	jmp    c001ad01 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	68 d4 bd 02 c0       	push   0xc002bdd4
c001acec:	e8 b4 81 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001acf1:	83 c4 10             	add    esp,0x10
c001acf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acf8:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001acfc:	e9 c0 00 00 00       	jmp    c001adc1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ad01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad09:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad0b:	83 ec 04             	sub    esp,0x4
c001ad0e:	52                   	push   edx
c001ad0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad13:	50                   	push   eax
c001ad14:	e8 33 5a fe ff       	call   c000074c <memcpy>
c001ad19:	83 c4 10             	add    esp,0x10
c001ad1c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad20:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad28:	8d 50 01             	lea    edx,[eax+0x1]
c001ad2b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad2f:	8a 00                	mov    al,BYTE PTR [eax]
c001ad31:	0f b6 c0             	movzx  eax,al
c001ad34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad3c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad43:	8a 00                	mov    al,BYTE PTR [eax]
c001ad45:	0f b6 c0             	movzx  eax,al
c001ad48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad50:	8d 50 01             	lea    edx,[eax+0x1]
c001ad53:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad57:	8a 00                	mov    al,BYTE PTR [eax]
c001ad59:	0f b6 c0             	movzx  eax,al
c001ad5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad64:	8d 50 01             	lea    edx,[eax+0x1]
c001ad67:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad6b:	8a 00                	mov    al,BYTE PTR [eax]
c001ad6d:	0f b6 c0             	movzx  eax,al
c001ad70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad78:	c1 e0 18             	shl    eax,0x18
c001ad7b:	89 c2                	mov    edx,eax
c001ad7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad81:	c1 e0 10             	shl    eax,0x10
c001ad84:	09 c2                	or     edx,eax
c001ad86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad8a:	c1 e0 08             	shl    eax,0x8
c001ad8d:	09 d0                	or     eax,edx
c001ad8f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad9b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad9f:	83 e8 04             	sub    eax,0x4
c001ada2:	83 ec 08             	sub    esp,0x8
c001ada5:	50                   	push   eax
c001ada6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001adaa:	e8 b6 fc ff ff       	call   c001aa65 <Net::crc32Calc(unsigned char*, int)>
c001adaf:	83 c4 10             	add    esp,0x10
c001adb2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001adb6:	0f 94 c2             	sete   dl
c001adb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adbd:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001adc0:	90                   	nop
c001adc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adc5:	83 c4 2c             	add    esp,0x2c
c001adc8:	c2 04 00             	ret    0x4

c001adcb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001adcb:	55                   	push   ebp
c001adcc:	57                   	push   edi
c001adcd:	56                   	push   esi
c001adce:	53                   	push   ebx
c001adcf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001add5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001addc:	8a 1e                	mov    bl,BYTE PTR [esi]
c001adde:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ade1:	80 fb 40             	cmp    bl,0x40
c001ade4:	75 1b                	jne    c001ae01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ade6:	8a 16                	mov    dl,BYTE PTR [esi]
c001ade8:	84 d2                	test   dl,dl
c001adea:	0f 84 f1 00 00 00    	je     c001aee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adf0:	8d 46 01             	lea    eax,[esi+0x1]
c001adf3:	80 fa 3a             	cmp    dl,0x3a
c001adf6:	74 04                	je     c001adfc <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001adf8:	89 c6                	mov    esi,eax
c001adfa:	eb ea                	jmp    c001ade6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001adfc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001adff:	89 c6                	mov    esi,eax
c001ae01:	50                   	push   eax
c001ae02:	6a 40                	push   0x40
c001ae04:	6a 00                	push   0x0
c001ae06:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae0a:	50                   	push   eax
c001ae0b:	e8 70 59 fe ff       	call   c0000780 <memset>
c001ae10:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae17:	31 c0                	xor    eax,eax
c001ae19:	83 c4 10             	add    esp,0x10
c001ae1c:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae1e:	84 c9                	test   cl,cl
c001ae20:	0f 84 bb 00 00 00    	je     c001aee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae26:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae2b:	0f 8f b0 00 00 00    	jg     c001aee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae31:	80 f9 0a             	cmp    cl,0xa
c001ae34:	0f 85 98 00 00 00    	jne    c001aed2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae3a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae3f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae43:	a8 df                	test   al,0xdf
c001ae45:	0f 94 c1             	sete   cl
c001ae48:	3c 23                	cmp    al,0x23
c001ae4a:	0f 94 c2             	sete   dl
c001ae4d:	08 d1                	or     cl,dl
c001ae4f:	75 4a                	jne    c001ae9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae51:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae54:	80 fa 01             	cmp    dl,0x1
c001ae57:	76 42                	jbe    c001ae9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae59:	3c 5b                	cmp    al,0x5b
c001ae5b:	75 42                	jne    c001ae9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae5d:	80 fb 40             	cmp    bl,0x40
c001ae60:	75 39                	jne    c001ae9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae62:	83 ec 0c             	sub    esp,0xc
c001ae65:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae69:	52                   	push   edx
c001ae6a:	e8 2d 59 fe ff       	call   c000079c <strlen>
c001ae6f:	83 c4 10             	add    esp,0x10
c001ae72:	83 f8 3f             	cmp    eax,0x3f
c001ae75:	77 6a                	ja     c001aee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae77:	50                   	push   eax
c001ae78:	50                   	push   eax
c001ae79:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae7d:	52                   	push   edx
c001ae7e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae82:	52                   	push   edx
c001ae83:	e8 b4 59 fe ff       	call   c000083c <strcpy>
c001ae88:	58                   	pop    eax
c001ae89:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae8d:	52                   	push   edx
c001ae8e:	e8 09 59 fe ff       	call   c000079c <strlen>
c001ae93:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae98:	83 c4 10             	add    esp,0x10
c001ae9b:	31 d2                	xor    edx,edx
c001ae9d:	eb 3a                	jmp    c001aed9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae9f:	80 fb 40             	cmp    bl,0x40
c001aea2:	74 06                	je     c001aeaa <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aea4:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aea8:	eb 20                	jmp    c001aeca <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aeaa:	50                   	push   eax
c001aeab:	50                   	push   eax
c001aeac:	55                   	push   ebp
c001aead:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aeb1:	50                   	push   eax
c001aeb2:	e8 11 5a fe ff       	call   c00008c8 <strcmp>
c001aeb7:	83 c4 10             	add    esp,0x10
c001aeba:	85 c0                	test   eax,eax
c001aebc:	75 dd                	jne    c001ae9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aebe:	eb e4                	jmp    c001aea4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aec0:	8d 50 01             	lea    edx,[eax+0x1]
c001aec3:	80 f9 3d             	cmp    cl,0x3d
c001aec6:	74 1d                	je     c001aee5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aec8:	89 d0                	mov    eax,edx
c001aeca:	8a 08                	mov    cl,BYTE PTR [eax]
c001aecc:	84 c9                	test   cl,cl
c001aece:	75 f0                	jne    c001aec0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aed0:	eb 0f                	jmp    c001aee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aed2:	8d 50 01             	lea    edx,[eax+0x1]
c001aed5:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aed9:	47                   	inc    edi
c001aeda:	89 d0                	mov    eax,edx
c001aedc:	e9 3b ff ff ff       	jmp    c001ae1c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aee1:	31 c0                	xor    eax,eax
c001aee3:	eb 33                	jmp    c001af18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aee5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aee9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aeec:	50                   	push   eax
c001aeed:	50                   	push   eax
c001aeee:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aef2:	50                   	push   eax
c001aef3:	56                   	push   esi
c001aef4:	e8 cf 59 fe ff       	call   c00008c8 <strcmp>
c001aef9:	83 c4 10             	add    esp,0x10
c001aefc:	85 c0                	test   eax,eax
c001aefe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af02:	75 97                	jne    c001ae9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af04:	51                   	push   ecx
c001af05:	51                   	push   ecx
c001af06:	52                   	push   edx
c001af07:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af0e:	e8 29 59 fe ff       	call   c000083c <strcpy>
c001af13:	83 c4 10             	add    esp,0x10
c001af16:	b0 01                	mov    al,0x1
c001af18:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af1e:	5b                   	pop    ebx
c001af1f:	5e                   	pop    esi
c001af20:	5f                   	pop    edi
c001af21:	5d                   	pop    ebp
c001af22:	c3                   	ret    

c001af23 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af23:	57                   	push   edi
c001af24:	56                   	push   esi
c001af25:	53                   	push   ebx
c001af26:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af2c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af33:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af3a:	53                   	push   ebx
c001af3b:	e8 5c 58 fe ff       	call   c000079c <strlen>
c001af40:	89 34 24             	mov    DWORD PTR [esp],esi
c001af43:	89 c7                	mov    edi,eax
c001af45:	e8 52 58 fe ff       	call   c000079c <strlen>
c001af4a:	83 c4 10             	add    esp,0x10
c001af4d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af51:	3d ff 00 00 00       	cmp    eax,0xff
c001af56:	0f 87 d3 00 00 00    	ja     c001b02f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af5c:	57                   	push   edi
c001af5d:	57                   	push   edi
c001af5e:	56                   	push   esi
c001af5f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af63:	56                   	push   esi
c001af64:	e8 d3 58 fe ff       	call   c000083c <strcpy>
c001af69:	58                   	pop    eax
c001af6a:	5a                   	pop    edx
c001af6b:	68 1d c3 02 c0       	push   0xc002c31d
c001af70:	56                   	push   esi
c001af71:	e8 06 5a fe ff       	call   c000097c <strcat>
c001af76:	59                   	pop    ecx
c001af77:	5f                   	pop    edi
c001af78:	53                   	push   ebx
c001af79:	56                   	push   esi
c001af7a:	e8 fd 59 fe ff       	call   c000097c <strcat>
c001af7f:	58                   	pop    eax
c001af80:	5a                   	pop    edx
c001af81:	68 20 be 02 c0       	push   0xc002be20
c001af86:	56                   	push   esi
c001af87:	e8 f0 59 fe ff       	call   c000097c <strcat>
c001af8c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af93:	e8 b3 48 ff ff       	call   c000f84b <malloc>
c001af98:	83 c4 0c             	add    esp,0xc
c001af9b:	89 c3                	mov    ebx,eax
c001af9d:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c001afa3:	56                   	push   esi
c001afa4:	50                   	push   eax
c001afa5:	e8 54 84 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001afaa:	83 c4 10             	add    esp,0x10
c001afad:	85 db                	test   ebx,ebx
c001afaf:	74 7e                	je     c001b02f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afb1:	51                   	push   ecx
c001afb2:	51                   	push   ecx
c001afb3:	6a 01                	push   0x1
c001afb5:	53                   	push   ebx
c001afb6:	e8 a7 84 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001afbb:	83 c4 10             	add    esp,0x10
c001afbe:	85 c0                	test   eax,eax
c001afc0:	74 08                	je     c001afca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001afc2:	83 ec 0c             	sub    esp,0xc
c001afc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afc7:	53                   	push   ebx
c001afc8:	eb 5f                	jmp    c001b029 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afca:	52                   	push   edx
c001afcb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afcf:	50                   	push   eax
c001afd0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001afd4:	50                   	push   eax
c001afd5:	53                   	push   ebx
c001afd6:	e8 33 87 ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001afdb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afdf:	83 c4 10             	add    esp,0x10
c001afe2:	89 c1                	mov    ecx,eax
c001afe4:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001afe8:	74 31                	je     c001b01b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afea:	83 ec 0c             	sub    esp,0xc
c001afed:	50                   	push   eax
c001afee:	e8 58 48 ff ff       	call   c000f84b <malloc>
c001aff3:	89 c6                	mov    esi,eax
c001aff5:	58                   	pop    eax
c001aff6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aff8:	8d 54 24 20          	lea    edx,[esp+0x20]
c001affc:	52                   	push   edx
c001affd:	56                   	push   esi
c001affe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b002:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b006:	53                   	push   ebx
c001b007:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b00a:	83 c4 20             	add    esp,0x20
c001b00d:	85 c0                	test   eax,eax
c001b00f:	75 0a                	jne    c001b01b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b011:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b015:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b019:	74 18                	je     c001b033 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b01b:	83 ec 0c             	sub    esp,0xc
c001b01e:	53                   	push   ebx
c001b01f:	e8 9c 84 ff ff       	call   c00134c0 <File::close()>
c001b024:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b029:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b02c:	83 c4 10             	add    esp,0x10
c001b02f:	31 c0                	xor    eax,eax
c001b031:	eb 3b                	jmp    c001b06e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b033:	83 ec 0c             	sub    esp,0xc
c001b036:	53                   	push   ebx
c001b037:	e8 84 84 ff ff       	call   c00134c0 <File::close()>
c001b03c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b03e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b041:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b044:	83 c4 0c             	add    esp,0xc
c001b047:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b04e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b055:	56                   	push   esi
c001b056:	e8 70 fd ff ff       	call   c001adcb <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b05b:	89 34 24             	mov    DWORD PTR [esp],esi
c001b05e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b062:	e8 f4 47 ff ff       	call   c000f85b <free>
c001b067:	83 c4 10             	add    esp,0x10
c001b06a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b06e:	81 c4 20 01 00 00    	add    esp,0x120
c001b074:	5b                   	pop    ebx
c001b075:	5e                   	pop    esi
c001b076:	5f                   	pop    edi
c001b077:	c3                   	ret    

c001b078 <Reg::getLine(char*, char*, char*)>:
c001b078:	57                   	push   edi
c001b079:	56                   	push   esi
c001b07a:	53                   	push   ebx
c001b07b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b07f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b083:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b087:	57                   	push   edi
c001b088:	56                   	push   esi
c001b089:	53                   	push   ebx
c001b08a:	68 25 be 02 c0       	push   0xc002be25
c001b08f:	e8 8f fe ff ff       	call   c001af23 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b094:	83 c4 10             	add    esp,0x10
c001b097:	84 c0                	test   al,al
c001b099:	75 10                	jne    c001b0ab <Reg::getLine(char*, char*, char*)+0x33>
c001b09b:	57                   	push   edi
c001b09c:	56                   	push   esi
c001b09d:	53                   	push   ebx
c001b09e:	68 4a be 02 c0       	push   0xc002be4a
c001b0a3:	e8 7b fe ff ff       	call   c001af23 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0a8:	83 c4 10             	add    esp,0x10
c001b0ab:	5b                   	pop    ebx
c001b0ac:	5e                   	pop    esi
c001b0ad:	5f                   	pop    edi
c001b0ae:	c3                   	ret    

c001b0af <Reg::readInt(char*, char*, int*)>:
c001b0af:	55                   	push   ebp
c001b0b0:	57                   	push   edi
c001b0b1:	56                   	push   esi
c001b0b2:	53                   	push   ebx
c001b0b3:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b0b9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0bd:	57                   	push   edi
c001b0be:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0c5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0cc:	e8 a7 ff ff ff       	call   c001b078 <Reg::getLine(char*, char*, char*)>
c001b0d1:	83 c4 10             	add    esp,0x10
c001b0d4:	84 c0                	test   al,al
c001b0d6:	0f 84 b3 00 00 00    	je     c001b18f <Reg::readInt(char*, char*, int*)+0xe0>
c001b0dc:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0e0:	80 fa 2b             	cmp    dl,0x2b
c001b0e3:	74 0c                	je     c001b0f1 <Reg::readInt(char*, char*, int*)+0x42>
c001b0e5:	80 fa 2d             	cmp    dl,0x2d
c001b0e8:	75 0e                	jne    c001b0f8 <Reg::readInt(char*, char*, int*)+0x49>
c001b0ea:	ba 01 00 00 00       	mov    edx,0x1
c001b0ef:	eb 0b                	jmp    c001b0fc <Reg::readInt(char*, char*, int*)+0x4d>
c001b0f1:	ba 01 00 00 00       	mov    edx,0x1
c001b0f6:	eb 02                	jmp    c001b0fa <Reg::readInt(char*, char*, int*)+0x4b>
c001b0f8:	31 d2                	xor    edx,edx
c001b0fa:	31 c0                	xor    eax,eax
c001b0fc:	be 0a 00 00 00       	mov    esi,0xa
c001b101:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b106:	75 20                	jne    c001b128 <Reg::readInt(char*, char*, int*)+0x79>
c001b108:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b10c:	80 f9 78             	cmp    cl,0x78
c001b10f:	75 0a                	jne    c001b11b <Reg::readInt(char*, char*, int*)+0x6c>
c001b111:	83 c2 02             	add    edx,0x2
c001b114:	be 10 00 00 00       	mov    esi,0x10
c001b119:	eb 0d                	jmp    c001b128 <Reg::readInt(char*, char*, int*)+0x79>
c001b11b:	80 f9 62             	cmp    cl,0x62
c001b11e:	75 08                	jne    c001b128 <Reg::readInt(char*, char*, int*)+0x79>
c001b120:	83 c2 02             	add    edx,0x2
c001b123:	be 02 00 00 00       	mov    esi,0x2
c001b128:	01 d7                	add    edi,edx
c001b12a:	31 d2                	xor    edx,edx
c001b12c:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b12e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b132:	80 fb 0d             	cmp    bl,0xd
c001b135:	0f 94 c3             	sete   bl
c001b138:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b13d:	0f 94 c1             	sete   cl
c001b140:	08 cb                	or     bl,cl
c001b142:	75 3a                	jne    c001b17e <Reg::readInt(char*, char*, int*)+0xcf>
c001b144:	0f af d6             	imul   edx,esi
c001b147:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b14c:	83 fe 10             	cmp    esi,0x10
c001b14f:	75 26                	jne    c001b177 <Reg::readInt(char*, char*, int*)+0xc8>
c001b151:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b155:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b158:	89 e9                	mov    ecx,ebp
c001b15a:	80 f9 05             	cmp    cl,0x5
c001b15d:	77 06                	ja     c001b165 <Reg::readInt(char*, char*, int*)+0xb6>
c001b15f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b163:	eb 16                	jmp    c001b17b <Reg::readInt(char*, char*, int*)+0xcc>
c001b165:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b169:	83 e9 61             	sub    ecx,0x61
c001b16c:	80 f9 05             	cmp    cl,0x5
c001b16f:	77 06                	ja     c001b177 <Reg::readInt(char*, char*, int*)+0xc8>
c001b171:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b175:	eb 04                	jmp    c001b17b <Reg::readInt(char*, char*, int*)+0xcc>
c001b177:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b17b:	47                   	inc    edi
c001b17c:	eb ae                	jmp    c001b12c <Reg::readInt(char*, char*, int*)+0x7d>
c001b17e:	84 c0                	test   al,al
c001b180:	74 02                	je     c001b184 <Reg::readInt(char*, char*, int*)+0xd5>
c001b182:	f7 da                	neg    edx
c001b184:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b18b:	89 10                	mov    DWORD PTR [eax],edx
c001b18d:	88 d8                	mov    al,bl
c001b18f:	81 c4 ec 00 00 00    	add    esp,0xec
c001b195:	5b                   	pop    ebx
c001b196:	5e                   	pop    esi
c001b197:	5f                   	pop    edi
c001b198:	5d                   	pop    ebp
c001b199:	c3                   	ret    

c001b19a <Reg::readString(char*, char*, char*, int)>:
c001b19a:	57                   	push   edi
c001b19b:	56                   	push   esi
c001b19c:	53                   	push   ebx
c001b19d:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b1a3:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b1aa:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b1ae:	57                   	push   edi
c001b1af:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1b6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1bd:	e8 b6 fe ff ff       	call   c001b078 <Reg::getLine(char*, char*, char*)>
c001b1c2:	83 c4 10             	add    esp,0x10
c001b1c5:	89 c6                	mov    esi,eax
c001b1c7:	84 c0                	test   al,al
c001b1c9:	74 44                	je     c001b20f <Reg::readString(char*, char*, char*, int)+0x75>
c001b1cb:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1d2:	31 c0                	xor    eax,eax
c001b1d4:	4a                   	dec    edx
c001b1d5:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1d8:	84 c9                	test   cl,cl
c001b1da:	74 0f                	je     c001b1eb <Reg::readString(char*, char*, char*, int)+0x51>
c001b1dc:	39 c2                	cmp    edx,eax
c001b1de:	7e 0b                	jle    c001b1eb <Reg::readString(char*, char*, char*, int)+0x51>
c001b1e0:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1e3:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1e8:	40                   	inc    eax
c001b1e9:	eb ea                	jmp    c001b1d5 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b1eb:	83 ec 0c             	sub    esp,0xc
c001b1ee:	53                   	push   ebx
c001b1ef:	e8 a8 55 fe ff       	call   c000079c <strlen>
c001b1f4:	83 c4 10             	add    esp,0x10
c001b1f7:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1fc:	75 11                	jne    c001b20f <Reg::readString(char*, char*, char*, int)+0x75>
c001b1fe:	83 ec 0c             	sub    esp,0xc
c001b201:	53                   	push   ebx
c001b202:	e8 95 55 fe ff       	call   c000079c <strlen>
c001b207:	83 c4 10             	add    esp,0x10
c001b20a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b20f:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b215:	89 f0                	mov    eax,esi
c001b217:	5b                   	pop    ebx
c001b218:	5e                   	pop    esi
c001b219:	5f                   	pop    edi
c001b21a:	c3                   	ret    

c001b21b <Reg::readBool(char*, char*, bool*)>:
c001b21b:	83 ec 20             	sub    esp,0x20
c001b21e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b222:	50                   	push   eax
c001b223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b22b:	e8 7f fe ff ff       	call   c001b0af <Reg::readInt(char*, char*, int*)>
c001b230:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b235:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b239:	0f 95 02             	setne  BYTE PTR [edx]
c001b23c:	83 c4 2c             	add    esp,0x2c
c001b23f:	c3                   	ret    

c001b240 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b240:	53                   	push   ebx
c001b241:	83 ec 1c             	sub    esp,0x1c
c001b244:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b248:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b24c:	50                   	push   eax
c001b24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b251:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b255:	e8 c1 ff ff ff       	call   c001b21b <Reg::readBool(char*, char*, bool*)>
c001b25a:	83 c4 10             	add    esp,0x10
c001b25d:	84 c0                	test   al,al
c001b25f:	74 04                	je     c001b265 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b261:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b265:	88 d8                	mov    al,bl
c001b267:	83 c4 18             	add    esp,0x18
c001b26a:	5b                   	pop    ebx
c001b26b:	c3                   	ret    

c001b26c <Reg::readIntWithDefault(char*, char*, int)>:
c001b26c:	53                   	push   ebx
c001b26d:	83 ec 1c             	sub    esp,0x1c
c001b270:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b274:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b278:	50                   	push   eax
c001b279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b27d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b281:	e8 29 fe ff ff       	call   c001b0af <Reg::readInt(char*, char*, int*)>
c001b286:	83 c4 10             	add    esp,0x10
c001b289:	84 c0                	test   al,al
c001b28b:	74 04                	je     c001b291 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b28d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b291:	89 d8                	mov    eax,ebx
c001b293:	83 c4 18             	add    esp,0x18
c001b296:	5b                   	pop    ebx
c001b297:	c3                   	ret    

c001b298 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b298:	57                   	push   edi
c001b299:	56                   	push   esi
c001b29a:	53                   	push   ebx
c001b29b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b29f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b2a3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2a7:	56                   	push   esi
c001b2a8:	53                   	push   ebx
c001b2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2b1:	e8 e4 fe ff ff       	call   c001b19a <Reg::readString(char*, char*, char*, int)>
c001b2b6:	83 c4 10             	add    esp,0x10
c001b2b9:	84 c0                	test   al,al
c001b2bb:	75 1b                	jne    c001b2d8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b2bd:	50                   	push   eax
c001b2be:	56                   	push   esi
c001b2bf:	4e                   	dec    esi
c001b2c0:	6a 00                	push   0x0
c001b2c2:	53                   	push   ebx
c001b2c3:	e8 b8 54 fe ff       	call   c0000780 <memset>
c001b2c8:	83 c4 0c             	add    esp,0xc
c001b2cb:	56                   	push   esi
c001b2cc:	57                   	push   edi
c001b2cd:	53                   	push   ebx
c001b2ce:	89 fb                	mov    ebx,edi
c001b2d0:	e8 77 54 fe ff       	call   c000074c <memcpy>
c001b2d5:	83 c4 10             	add    esp,0x10
c001b2d8:	89 d8                	mov    eax,ebx
c001b2da:	5b                   	pop    ebx
c001b2db:	5e                   	pop    esi
c001b2dc:	5f                   	pop    edi
c001b2dd:	c3                   	ret    

c001b2de <Sys::eject(regs*)>:
c001b2de:	83 ec 0c             	sub    esp,0xc
c001b2e1:	83 ca ff             	or     edx,0xffffffff
c001b2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2e8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b2eb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2f0:	83 e9 41             	sub    ecx,0x41
c001b2f3:	83 f9 19             	cmp    ecx,0x19
c001b2f6:	77 18                	ja     c001b310 <Sys::eject(regs*)+0x32>
c001b2f8:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c001b2ff:	85 c9                	test   ecx,ecx
c001b301:	74 0d                	je     c001b310 <Sys::eject(regs*)+0x32>
c001b303:	83 ec 0c             	sub    esp,0xc
c001b306:	51                   	push   ecx
c001b307:	e8 68 b4 ff ff       	call   c0016774 <LogicalDisk::eject()>
c001b30c:	83 c4 10             	add    esp,0x10
c001b30f:	99                   	cdq    
c001b310:	83 c4 0c             	add    esp,0xc
c001b313:	c3                   	ret    

c001b314 <Sys::exit(regs*)>:
c001b314:	83 ec 18             	sub    esp,0x18
c001b317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b31b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b31e:	e8 b4 35 00 00       	call   c001e8d7 <terminateTask(int)>
c001b323:	83 c8 ff             	or     eax,0xffffffff
c001b326:	83 c4 1c             	add    esp,0x1c
c001b329:	89 c2                	mov    edx,eax
c001b32b:	c3                   	ret    

c001b32c <Sys::getCwd(regs*)>:
c001b32c:	83 ec 10             	sub    esp,0x10
c001b32f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b333:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b336:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b339:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b33e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b341:	e8 ba 7e ff ff       	call   c0013200 <Fs::getcwd(Process*, char*, int)>
c001b346:	83 c4 1c             	add    esp,0x1c
c001b349:	99                   	cdq    
c001b34a:	c3                   	ret    

c001b34b <Sys::getPID(regs*)>:
c001b34b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b350:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b353:	8b 00                	mov    eax,DWORD PTR [eax]
c001b355:	99                   	cdq    
c001b356:	c3                   	ret    

c001b357 <Sys::getRAMData(regs*)>:
c001b357:	8b 0d b4 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5b4
c001b35d:	6b 05 b0 e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e5b0,0x64
c001b364:	99                   	cdq    
c001b365:	f7 f9                	idiv   ecx
c001b367:	c1 e0 18             	shl    eax,0x18
c001b36a:	09 c8                	or     eax,ecx
c001b36c:	99                   	cdq    
c001b36d:	c3                   	ret    

c001b36e <Sys::loadDLL(regs*)>:
c001b36e:	56                   	push   esi
c001b36f:	53                   	push   ebx
c001b370:	31 d2                	xor    edx,edx
c001b372:	51                   	push   ecx
c001b373:	b8 01 00 00 00       	mov    eax,0x1
c001b378:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b37c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b380:	0f 84 8c 00 00 00    	je     c001b412 <Sys::loadDLL(regs*)+0xa4>
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	68 14 01 00 00       	push   0x114
c001b38e:	e8 b8 44 ff ff       	call   c000f84b <malloc>
c001b393:	83 c4 0c             	add    esp,0xc
c001b396:	89 c3                	mov    ebx,eax
c001b398:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b39d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3a3:	53                   	push   ebx
c001b3a4:	e8 55 80 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001b3a9:	83 c4 10             	add    esp,0x10
c001b3ac:	31 d2                	xor    edx,edx
c001b3ae:	b8 02 00 00 00       	mov    eax,0x2
c001b3b3:	85 db                	test   ebx,ebx
c001b3b5:	74 5b                	je     c001b412 <Sys::loadDLL(regs*)+0xa4>
c001b3b7:	83 ec 0c             	sub    esp,0xc
c001b3ba:	53                   	push   ebx
c001b3bb:	e8 10 83 ff ff       	call   c00136d0 <File::exists()>
c001b3c0:	83 c4 10             	add    esp,0x10
c001b3c3:	84 c0                	test   al,al
c001b3c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3c7:	75 11                	jne    c001b3da <Sys::loadDLL(regs*)+0x6c>
c001b3c9:	83 ec 0c             	sub    esp,0xc
c001b3cc:	53                   	push   ebx
c001b3cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3d0:	83 c4 10             	add    esp,0x10
c001b3d3:	b8 03 00 00 00       	mov    eax,0x3
c001b3d8:	eb 36                	jmp    c001b410 <Sys::loadDLL(regs*)+0xa2>
c001b3da:	83 ec 0c             	sub    esp,0xc
c001b3dd:	53                   	push   ebx
c001b3de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3e1:	58                   	pop    eax
c001b3e2:	5a                   	pop    edx
c001b3e3:	6a 00                	push   0x0
c001b3e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3e8:	e8 c5 23 00 00       	call   c001d7b2 <Thr::loadDLL(char const*, bool)>
c001b3ed:	83 c4 10             	add    esp,0x10
c001b3f0:	89 c1                	mov    ecx,eax
c001b3f2:	31 d2                	xor    edx,edx
c001b3f4:	b8 04 00 00 00       	mov    eax,0x4
c001b3f9:	85 c9                	test   ecx,ecx
c001b3fb:	74 15                	je     c001b412 <Sys::loadDLL(regs*)+0xa4>
c001b3fd:	53                   	push   ebx
c001b3fe:	53                   	push   ebx
c001b3ff:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c001b405:	51                   	push   ecx
c001b406:	e8 db 25 00 00       	call   c001d9e6 <Thr::executeDLL(unsigned long, void*)>
c001b40b:	83 c4 10             	add    esp,0x10
c001b40e:	31 c0                	xor    eax,eax
c001b410:	31 d2                	xor    edx,edx
c001b412:	59                   	pop    ecx
c001b413:	5b                   	pop    ebx
c001b414:	5e                   	pop    esi
c001b415:	c3                   	ret    

c001b416 <Sys::read(regs*)>:
c001b416:	57                   	push   edi
c001b417:	56                   	push   esi
c001b418:	53                   	push   ebx
c001b419:	83 ec 10             	sub    esp,0x10
c001b41c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b420:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b423:	83 f8 02             	cmp    eax,0x2
c001b426:	77 10                	ja     c001b438 <Sys::read(regs*)+0x22>
c001b428:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b42d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b430:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b436:	eb 0e                	jmp    c001b446 <Sys::read(regs*)+0x30>
c001b438:	83 ec 0c             	sub    esp,0xc
c001b43b:	50                   	push   eax
c001b43c:	e8 b4 65 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b441:	83 c4 10             	add    esp,0x10
c001b444:	89 c1                	mov    ecx,eax
c001b446:	83 c8 ff             	or     eax,0xffffffff
c001b449:	85 c9                	test   ecx,ecx
c001b44b:	89 c2                	mov    edx,eax
c001b44d:	74 28                	je     c001b477 <Sys::read(regs*)+0x61>
c001b44f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b457:	31 ff                	xor    edi,edi
c001b459:	83 ec 0c             	sub    esp,0xc
c001b45c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b45e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b462:	52                   	push   edx
c001b463:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b466:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b469:	57                   	push   edi
c001b46a:	56                   	push   esi
c001b46b:	51                   	push   ecx
c001b46c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b46f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b473:	83 c4 20             	add    esp,0x20
c001b476:	99                   	cdq    
c001b477:	83 c4 10             	add    esp,0x10
c001b47a:	5b                   	pop    ebx
c001b47b:	5e                   	pop    esi
c001b47c:	5f                   	pop    edi
c001b47d:	c3                   	ret    

c001b47e <Sys::sbrk(regs*)>:
c001b47e:	56                   	push   esi
c001b47f:	53                   	push   ebx
c001b480:	50                   	push   eax
c001b481:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b486:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b48a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b48d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b490:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b496:	85 db                	test   ebx,ebx
c001b498:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b49b:	74 02                	je     c001b49f <Sys::sbrk(regs*)+0x21>
c001b49d:	79 06                	jns    c001b4a5 <Sys::sbrk(regs*)+0x27>
c001b49f:	89 f0                	mov    eax,esi
c001b4a1:	31 d2                	xor    edx,edx
c001b4a3:	eb 2a                	jmp    c001b4cf <Sys::sbrk(regs*)+0x51>
c001b4a5:	83 c8 ff             	or     eax,0xffffffff
c001b4a8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b4ae:	89 c2                	mov    edx,eax
c001b4b0:	77 1d                	ja     c001b4cf <Sys::sbrk(regs*)+0x51>
c001b4b2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b4b8:	50                   	push   eax
c001b4b9:	c1 ea 0c             	shr    edx,0xc
c001b4bc:	68 07 0c 00 00       	push   0xc07
c001b4c1:	52                   	push   edx
c001b4c2:	51                   	push   ecx
c001b4c3:	e8 70 6f ff ff       	call   c0012438 <VAS::allocatePages(int, int)>
c001b4c8:	89 f0                	mov    eax,esi
c001b4ca:	31 d2                	xor    edx,edx
c001b4cc:	83 c4 10             	add    esp,0x10
c001b4cf:	59                   	pop    ecx
c001b4d0:	5b                   	pop    ebx
c001b4d1:	5e                   	pop    esi
c001b4d2:	c3                   	ret    

c001b4d3 <Sys::setCwd(regs*)>:
c001b4d3:	83 ec 14             	sub    esp,0x14
c001b4d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4da:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4e5:	e8 85 82 ff ff       	call   c001376f <Fs::setcwd(Process*, char*)>
c001b4ea:	83 c4 1c             	add    esp,0x1c
c001b4ed:	99                   	cdq    
c001b4ee:	c3                   	ret    

c001b4ef <Sys::setTime(regs*)>:
c001b4ef:	55                   	push   ebp
c001b4f0:	31 d2                	xor    edx,edx
c001b4f2:	57                   	push   edi
c001b4f3:	bf 18 00 00 00       	mov    edi,0x18
c001b4f8:	56                   	push   esi
c001b4f9:	53                   	push   ebx
c001b4fa:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4ff:	83 ec 30             	sub    esp,0x30
c001b502:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b506:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b509:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b50c:	f7 f3                	div    ebx
c001b50e:	89 d6                	mov    esi,edx
c001b510:	31 d2                	xor    edx,edx
c001b512:	f7 f3                	div    ebx
c001b514:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b517:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b51b:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b520:	31 d2                	xor    edx,edx
c001b522:	f7 f3                	div    ebx
c001b524:	31 d2                	xor    edx,edx
c001b526:	bb 0c 00 00 00       	mov    ebx,0xc
c001b52b:	f7 f7                	div    edi
c001b52d:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b530:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b534:	0f b7 cd             	movzx  ecx,bp
c001b537:	56                   	push   esi
c001b538:	89 c7                	mov    edi,eax
c001b53a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b53e:	c1 e6 10             	shl    esi,0x10
c001b541:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b545:	83 e7 1f             	and    edi,0x1f
c001b548:	51                   	push   ecx
c001b549:	47                   	inc    edi
c001b54a:	c1 e8 05             	shr    eax,0x5
c001b54d:	31 d2                	xor    edx,edx
c001b54f:	f7 f3                	div    ebx
c001b551:	31 db                	xor    ebx,ebx
c001b553:	52                   	push   edx
c001b554:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b558:	57                   	push   edi
c001b559:	68 65 be 02 c0       	push   0xc002be65
c001b55e:	e8 42 79 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001b563:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b567:	89 f8                	mov    eax,edi
c001b569:	31 c9                	xor    ecx,ecx
c001b56b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b56f:	88 c1                	mov    cl,al
c001b571:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b577:	88 d5                	mov    ch,dl
c001b579:	c1 e0 10             	shl    eax,0x10
c001b57c:	0f b7 d1             	movzx  edx,cx
c001b57f:	09 c2                	or     edx,eax
c001b581:	89 d8                	mov    eax,ebx
c001b583:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b588:	09 f0                	or     eax,esi
c001b58a:	89 c3                	mov    ebx,eax
c001b58c:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b590:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b594:	83 c4 18             	add    esp,0x18
c001b597:	53                   	push   ebx
c001b598:	52                   	push   edx
c001b599:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b59d:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b5a1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5a5:	e8 df 88 ff ff       	call   c0013e89 <datetimeToSeconds(datetime_t)>
c001b5aa:	83 c4 0c             	add    esp,0xc
c001b5ad:	52                   	push   edx
c001b5ae:	50                   	push   eax
c001b5af:	56                   	push   esi
c001b5b0:	e8 5b 8a ff ff       	call   c0014010 <secondsToDatetime(unsigned long long)>
c001b5b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5bd:	51                   	push   ecx
c001b5be:	89 d6                	mov    esi,edx
c001b5c0:	51                   	push   ecx
c001b5c1:	c1 ee 10             	shr    esi,0x10
c001b5c4:	89 f3                	mov    ebx,esi
c001b5c6:	0f b6 f3             	movzx  esi,bl
c001b5c9:	56                   	push   esi
c001b5ca:	0f b6 f6             	movzx  esi,dh
c001b5cd:	0f b6 d2             	movzx  edx,dl
c001b5d0:	56                   	push   esi
c001b5d1:	52                   	push   edx
c001b5d2:	89 c2                	mov    edx,eax
c001b5d4:	c1 ea 10             	shr    edx,0x10
c001b5d7:	52                   	push   edx
c001b5d8:	0f b6 d4             	movzx  edx,ah
c001b5db:	0f b6 c0             	movzx  eax,al
c001b5de:	52                   	push   edx
c001b5df:	50                   	push   eax
c001b5e0:	68 81 be 02 c0       	push   0xc002be81
c001b5e5:	e8 bb 78 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001b5ea:	83 c4 2c             	add    esp,0x2c
c001b5ed:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001b5f2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5f6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5fa:	53                   	push   ebx
c001b5fb:	51                   	push   ecx
c001b5fc:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b602:	e8 a9 89 ff ff       	call   c0013fb0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b607:	83 f0 01             	xor    eax,0x1
c001b60a:	31 d2                	xor    edx,edx
c001b60c:	0f b6 c0             	movzx  eax,al
c001b60f:	83 c4 3c             	add    esp,0x3c
c001b612:	5b                   	pop    ebx
c001b613:	5e                   	pop    esi
c001b614:	5f                   	pop    edi
c001b615:	5d                   	pop    ebp
c001b616:	c3                   	ret    

c001b617 <Sys::timezone(regs*)>:
c001b617:	53                   	push   ebx
c001b618:	83 ec 08             	sub    esp,0x8
c001b61b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b61f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b623:	75 17                	jne    c001b63c <Sys::timezone(regs*)+0x25>
c001b625:	83 ec 0c             	sub    esp,0xc
c001b628:	68 9d be 02 c0       	push   0xc002be9d
c001b62d:	e8 73 78 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001b632:	83 c8 ff             	or     eax,0xffffffff
c001b635:	83 c4 10             	add    esp,0x10
c001b638:	89 c2                	mov    edx,eax
c001b63a:	eb 20                	jmp    c001b65c <Sys::timezone(regs*)+0x45>
c001b63c:	83 ec 0c             	sub    esp,0xc
c001b63f:	68 d5 be 02 c0       	push   0xc002bed5
c001b644:	e8 5c 78 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001b649:	58                   	pop    eax
c001b64a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b64d:	e8 c0 86 ff ff       	call   c0013d12 <User::loadClockSettings(int)>
c001b652:	83 c4 10             	add    esp,0x10
c001b655:	b8 01 00 00 00       	mov    eax,0x1
c001b65a:	31 d2                	xor    edx,edx
c001b65c:	83 c4 08             	add    esp,0x8
c001b65f:	5b                   	pop    ebx
c001b660:	c3                   	ret    

c001b661 <Sys::write(regs*)>:
c001b661:	57                   	push   edi
c001b662:	56                   	push   esi
c001b663:	53                   	push   ebx
c001b664:	83 ec 10             	sub    esp,0x10
c001b667:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b66b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b66e:	83 f8 02             	cmp    eax,0x2
c001b671:	77 10                	ja     c001b683 <Sys::write(regs*)+0x22>
c001b673:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b678:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b67b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b681:	eb 0e                	jmp    c001b691 <Sys::write(regs*)+0x30>
c001b683:	83 ec 0c             	sub    esp,0xc
c001b686:	50                   	push   eax
c001b687:	e8 69 63 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b68c:	83 c4 10             	add    esp,0x10
c001b68f:	89 c1                	mov    ecx,eax
c001b691:	83 c8 ff             	or     eax,0xffffffff
c001b694:	85 c9                	test   ecx,ecx
c001b696:	89 c2                	mov    edx,eax
c001b698:	74 28                	je     c001b6c2 <Sys::write(regs*)+0x61>
c001b69a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6a2:	31 ff                	xor    edi,edi
c001b6a4:	83 ec 0c             	sub    esp,0xc
c001b6a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6a9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6ad:	52                   	push   edx
c001b6ae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6b1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6b4:	57                   	push   edi
c001b6b5:	56                   	push   esi
c001b6b6:	51                   	push   ecx
c001b6b7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6be:	83 c4 20             	add    esp,0x20
c001b6c1:	99                   	cdq    
c001b6c2:	83 c4 10             	add    esp,0x10
c001b6c5:	5b                   	pop    ebx
c001b6c6:	5e                   	pop    esi
c001b6c7:	5f                   	pop    edi
c001b6c8:	c3                   	ret    

c001b6c9 <Sys::wsbe(regs*)>:
c001b6c9:	57                   	push   edi
c001b6ca:	b9 0b 00 00 00       	mov    ecx,0xb
c001b6cf:	56                   	push   esi
c001b6d0:	be 14 bf 02 c0       	mov    esi,0xc002bf14
c001b6d5:	53                   	push   ebx
c001b6d6:	83 ec 30             	sub    esp,0x30
c001b6d9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6dd:	fc                   	cld    
c001b6de:	83 ec 0c             	sub    esp,0xc
c001b6e1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6e3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6ef:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6f5:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6f7:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6fa:	57                   	push   edi
c001b6fb:	e8 9c 50 fe ff       	call   c000079c <strlen>
c001b700:	5a                   	pop    edx
c001b701:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b705:	52                   	push   edx
c001b706:	31 d2                	xor    edx,edx
c001b708:	57                   	push   edi
c001b709:	52                   	push   edx
c001b70a:	50                   	push   eax
c001b70b:	56                   	push   esi
c001b70c:	ff d3                	call   ebx
c001b70e:	83 c4 14             	add    esp,0x14
c001b711:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b715:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b718:	e8 ba 31 00 00       	call   c001e8d7 <terminateTask(int)>
c001b71d:	83 c4 40             	add    esp,0x40
c001b720:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b725:	5b                   	pop    ebx
c001b726:	31 d2                	xor    edx,edx
c001b728:	5e                   	pop    esi
c001b729:	5f                   	pop    edi
c001b72a:	c3                   	ret    

c001b72b <Sys::yield(regs*)>:
c001b72b:	57                   	push   edi
c001b72c:	56                   	push   esi
c001b72d:	53                   	push   ebx
c001b72e:	e8 27 27 00 00       	call   c001de5a <lockScheduler()>
c001b733:	e8 98 2a 00 00       	call   c001e1d0 <schedule()>
c001b738:	e8 1f 27 00 00       	call   c001de5c <unlockScheduler()>
c001b73d:	8b 35 f0 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002ebf0
c001b743:	8b 3d f4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebf4
c001b749:	89 f0                	mov    eax,esi
c001b74b:	89 fb                	mov    ebx,edi
c001b74d:	89 f1                	mov    ecx,esi
c001b74f:	c1 e0 07             	shl    eax,0x7
c001b752:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b756:	25 80 30 0f 00       	and    eax,0xf3080
c001b75b:	c1 eb 17             	shr    ebx,0x17
c001b75e:	31 c8                	xor    eax,ecx
c001b760:	89 da                	mov    edx,ebx
c001b762:	5b                   	pop    ebx
c001b763:	5e                   	pop    esi
c001b764:	5f                   	pop    edi
c001b765:	c3                   	ret    

c001b766 <sysCallSeekDir(regs*)>:
c001b766:	31 c0                	xor    eax,eax
c001b768:	31 d2                	xor    edx,edx
c001b76a:	c3                   	ret    

c001b76b <sysCallTellDir(regs*)>:
c001b76b:	31 c0                	xor    eax,eax
c001b76d:	31 d2                	xor    edx,edx
c001b76f:	c3                   	ret    

c001b770 <sysCallVerify(regs*)>:
c001b770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b774:	31 d2                	xor    edx,edx
c001b776:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b779:	c3                   	ret    

c001b77a <sysFormatDisk(regs*)>:
c001b77a:	56                   	push   esi
c001b77b:	53                   	push   ebx
c001b77c:	53                   	push   ebx
c001b77d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b781:	8b 1d f0 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6f0
c001b787:	eb 25                	jmp    c001b7ae <sysFormatDisk(regs*)+0x34>
c001b789:	83 ec 0c             	sub    esp,0xc
c001b78c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b78f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b791:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b794:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b797:	50                   	push   eax
c001b798:	ff 34 85 80 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1480]
c001b79f:	53                   	push   ebx
c001b7a0:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b7a3:	83 c4 20             	add    esp,0x20
c001b7a6:	83 f8 08             	cmp    eax,0x8
c001b7a9:	75 12                	jne    c001b7bd <sysFormatDisk(regs*)+0x43>
c001b7ab:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b7ae:	85 db                	test   ebx,ebx
c001b7b0:	75 d7                	jne    c001b789 <sysFormatDisk(regs*)+0xf>
c001b7b2:	59                   	pop    ecx
c001b7b3:	b8 03 00 00 00       	mov    eax,0x3
c001b7b8:	31 d2                	xor    edx,edx
c001b7ba:	5b                   	pop    ebx
c001b7bb:	5e                   	pop    esi
c001b7bc:	c3                   	ret    
c001b7bd:	85 c0                	test   eax,eax
c001b7bf:	74 1b                	je     c001b7dc <sysFormatDisk(regs*)+0x62>
c001b7c1:	83 f8 09             	cmp    eax,0x9
c001b7c4:	74 0b                	je     c001b7d1 <sysFormatDisk(regs*)+0x57>
c001b7c6:	59                   	pop    ecx
c001b7c7:	b8 02 00 00 00       	mov    eax,0x2
c001b7cc:	31 d2                	xor    edx,edx
c001b7ce:	5b                   	pop    ebx
c001b7cf:	5e                   	pop    esi
c001b7d0:	c3                   	ret    
c001b7d1:	59                   	pop    ecx
c001b7d2:	b8 01 00 00 00       	mov    eax,0x1
c001b7d7:	31 d2                	xor    edx,edx
c001b7d9:	5b                   	pop    ebx
c001b7da:	5e                   	pop    esi
c001b7db:	c3                   	ret    
c001b7dc:	59                   	pop    ecx
c001b7dd:	31 c0                	xor    eax,eax
c001b7df:	31 d2                	xor    edx,edx
c001b7e1:	5b                   	pop    ebx
c001b7e2:	5e                   	pop    esi
c001b7e3:	c3                   	ret    

c001b7e4 <sysSetDiskVolumeLabel(regs*)>:
c001b7e4:	56                   	push   esi
c001b7e5:	53                   	push   ebx
c001b7e6:	53                   	push   ebx
c001b7e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7eb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7ee:	83 f8 19             	cmp    eax,0x19
c001b7f1:	77 29                	ja     c001b81c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7f3:	8b 0c 85 80 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1480]
c001b7fa:	85 c9                	test   ecx,ecx
c001b7fc:	74 1e                	je     c001b81c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7fe:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b801:	85 d2                	test   edx,edx
c001b803:	74 17                	je     c001b81c <sysSetDiskVolumeLabel(regs*)+0x38>
c001b805:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b80b:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b80d:	52                   	push   edx
c001b80e:	50                   	push   eax
c001b80f:	51                   	push   ecx
c001b810:	53                   	push   ebx
c001b811:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b814:	83 c4 10             	add    esp,0x10
c001b817:	99                   	cdq    
c001b818:	59                   	pop    ecx
c001b819:	5b                   	pop    ebx
c001b81a:	5e                   	pop    esi
c001b81b:	c3                   	ret    
c001b81c:	59                   	pop    ecx
c001b81d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b822:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b827:	5b                   	pop    ebx
c001b828:	5e                   	pop    esi
c001b829:	c3                   	ret    

c001b82a <sysGetDiskVolumeLabel(regs*)>:
c001b82a:	57                   	push   edi
c001b82b:	56                   	push   esi
c001b82c:	53                   	push   ebx
c001b82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b831:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b834:	83 fa 19             	cmp    edx,0x19
c001b837:	77 34                	ja     c001b86d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b839:	8b 0c 95 80 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1480]
c001b840:	85 c9                	test   ecx,ecx
c001b842:	74 29                	je     c001b86d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b844:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b847:	85 db                	test   ebx,ebx
c001b849:	74 22                	je     c001b86d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b84b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b84e:	85 c0                	test   eax,eax
c001b850:	74 1b                	je     c001b86d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b852:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b858:	83 ec 0c             	sub    esp,0xc
c001b85b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b85d:	50                   	push   eax
c001b85e:	53                   	push   ebx
c001b85f:	52                   	push   edx
c001b860:	51                   	push   ecx
c001b861:	56                   	push   esi
c001b862:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b865:	83 c4 20             	add    esp,0x20
c001b868:	99                   	cdq    
c001b869:	5b                   	pop    ebx
c001b86a:	5e                   	pop    esi
c001b86b:	5f                   	pop    edi
c001b86c:	c3                   	ret    
c001b86d:	5b                   	pop    ebx
c001b86e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b873:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b878:	5e                   	pop    esi
c001b879:	5f                   	pop    edi
c001b87a:	c3                   	ret    

c001b87b <sysShutdown(regs*)>:
c001b87b:	83 ec 0c             	sub    esp,0xc
c001b87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b882:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b885:	85 c0                	test   eax,eax
c001b887:	74 18                	je     c001b8a1 <sysShutdown(regs*)+0x26>
c001b889:	83 f8 01             	cmp    eax,0x1
c001b88c:	74 38                	je     c001b8c6 <sysShutdown(regs*)+0x4b>
c001b88e:	83 f8 02             	cmp    eax,0x2
c001b891:	74 24                	je     c001b8b7 <sysShutdown(regs*)+0x3c>
c001b893:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b898:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b89d:	83 c4 0c             	add    esp,0xc
c001b8a0:	c3                   	ret    
c001b8a1:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001b8a6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8a8:	6a 00                	push   0x0
c001b8aa:	6a 00                	push   0x0
c001b8ac:	6a 00                	push   0x0
c001b8ae:	50                   	push   eax
c001b8af:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8b2:	83 c4 10             	add    esp,0x10
c001b8b5:	eb dc                	jmp    c001b893 <sysShutdown(regs*)+0x18>
c001b8b7:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001b8bc:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8be:	6a 00                	push   0x0
c001b8c0:	6a 00                	push   0x0
c001b8c2:	6a 01                	push   0x1
c001b8c4:	eb e8                	jmp    c001b8ae <sysShutdown(regs*)+0x33>
c001b8c6:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001b8cb:	85 c0                	test   eax,eax
c001b8cd:	74 02                	je     c001b8d1 <sysShutdown(regs*)+0x56>
c001b8cf:	ff d0                	call   eax
c001b8d1:	31 c0                	xor    eax,eax
c001b8d3:	31 d2                	xor    edx,edx
c001b8d5:	83 c4 0c             	add    esp,0xc
c001b8d8:	c3                   	ret    

c001b8d9 <sysCallRealpath(regs*)>:
c001b8d9:	83 ec 0c             	sub    esp,0xc
c001b8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8e3:	85 d2                	test   edx,edx
c001b8e5:	74 07                	je     c001b8ee <sysCallRealpath(regs*)+0x15>
c001b8e7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8ea:	85 c0                	test   eax,eax
c001b8ec:	75 0b                	jne    c001b8f9 <sysCallRealpath(regs*)+0x20>
c001b8ee:	b8 01 00 00 00       	mov    eax,0x1
c001b8f3:	31 d2                	xor    edx,edx
c001b8f5:	83 c4 0c             	add    esp,0xc
c001b8f8:	c3                   	ret    
c001b8f9:	51                   	push   ecx
c001b8fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b900:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b903:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b909:	51                   	push   ecx
c001b90a:	52                   	push   edx
c001b90b:	50                   	push   eax
c001b90c:	e8 43 79 ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b911:	83 c4 10             	add    esp,0x10
c001b914:	31 c0                	xor    eax,eax
c001b916:	31 d2                	xor    edx,edx
c001b918:	83 c4 0c             	add    esp,0xc
c001b91b:	c3                   	ret    

c001b91c <sysCallGetArgc(regs*)>:
c001b91c:	83 ec 14             	sub    esp,0x14
c001b91f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b924:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b927:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b92d:	68 40 bf 02 c0       	push   0xc002bf40
c001b932:	e8 6e 75 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001b937:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b93c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b93f:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b945:	83 c4 1c             	add    esp,0x1c
c001b948:	99                   	cdq    
c001b949:	c3                   	ret    

c001b94a <sysCallReadDir(regs*)>:
c001b94a:	53                   	push   ebx
c001b94b:	83 ec 18             	sub    esp,0x18
c001b94e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b952:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b955:	83 f8 02             	cmp    eax,0x2
c001b958:	76 53                	jbe    c001b9ad <sysCallReadDir(regs*)+0x63>
c001b95a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b95d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b963:	77 4f                	ja     c001b9b4 <sysCallReadDir(regs*)+0x6a>
c001b965:	83 ec 0c             	sub    esp,0xc
c001b968:	50                   	push   eax
c001b969:	e8 87 60 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b96e:	83 c4 10             	add    esp,0x10
c001b971:	85 c0                	test   eax,eax
c001b973:	74 50                	je     c001b9c5 <sysCallReadDir(regs*)+0x7b>
c001b975:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b97d:	83 ec 0c             	sub    esp,0xc
c001b980:	8b 10                	mov    edx,DWORD PTR [eax]
c001b982:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b986:	51                   	push   ecx
c001b987:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b98a:	6a 00                	push   0x0
c001b98c:	68 10 01 00 00       	push   0x110
c001b991:	50                   	push   eax
c001b992:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b995:	83 c4 20             	add    esp,0x20
c001b998:	85 c0                	test   eax,eax
c001b99a:	74 38                	je     c001b9d4 <sysCallReadDir(regs*)+0x8a>
c001b99c:	83 f8 07             	cmp    eax,0x7
c001b99f:	74 0c                	je     c001b9ad <sysCallReadDir(regs*)+0x63>
c001b9a1:	b8 02 00 00 00       	mov    eax,0x2
c001b9a6:	31 d2                	xor    edx,edx
c001b9a8:	83 c4 18             	add    esp,0x18
c001b9ab:	5b                   	pop    ebx
c001b9ac:	c3                   	ret    
c001b9ad:	b8 01 00 00 00       	mov    eax,0x1
c001b9b2:	eb f2                	jmp    c001b9a6 <sysCallReadDir(regs*)+0x5c>
c001b9b4:	83 ec 08             	sub    esp,0x8
c001b9b7:	52                   	push   edx
c001b9b8:	68 58 c0 02 c0       	push   0xc002c058
c001b9bd:	e8 e3 74 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001b9c2:	83 c4 10             	add    esp,0x10
c001b9c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9cf:	83 c4 18             	add    esp,0x18
c001b9d2:	5b                   	pop    ebx
c001b9d3:	c3                   	ret    
c001b9d4:	31 c0                	xor    eax,eax
c001b9d6:	eb ce                	jmp    c001b9a6 <sysCallReadDir(regs*)+0x5c>

c001b9d8 <sysCallIsATTY(regs*)>:
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9e2:	83 f8 02             	cmp    eax,0x2
c001b9e5:	76 07                	jbe    c001b9ee <sysCallIsATTY(regs*)+0x16>
c001b9e7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9ec:	75 26                	jne    c001ba14 <sysCallIsATTY(regs*)+0x3c>
c001b9ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9fc:	85 c0                	test   eax,eax
c001b9fe:	74 24                	je     c001ba24 <sysCallIsATTY(regs*)+0x4c>
c001ba00:	83 ec 0c             	sub    esp,0xc
c001ba03:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba05:	50                   	push   eax
c001ba06:	ff 12                	call   DWORD PTR [edx]
c001ba08:	31 d2                	xor    edx,edx
c001ba0a:	0f b6 c0             	movzx  eax,al
c001ba0d:	83 c4 10             	add    esp,0x10
c001ba10:	83 c4 0c             	add    esp,0xc
c001ba13:	c3                   	ret    
c001ba14:	83 ec 0c             	sub    esp,0xc
c001ba17:	50                   	push   eax
c001ba18:	e8 d8 5f ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001ba1d:	83 c4 10             	add    esp,0x10
c001ba20:	85 c0                	test   eax,eax
c001ba22:	75 dc                	jne    c001ba00 <sysCallIsATTY(regs*)+0x28>
c001ba24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba2e:	83 c4 0c             	add    esp,0xc
c001ba31:	c3                   	ret    

c001ba32 <sysCallSeek(regs*)>:
c001ba32:	53                   	push   ebx
c001ba33:	83 ec 08             	sub    esp,0x8
c001ba36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba3d:	83 f8 02             	cmp    eax,0x2
c001ba40:	76 4a                	jbe    c001ba8c <sysCallSeek(regs*)+0x5a>
c001ba42:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba47:	77 32                	ja     c001ba7b <sysCallSeek(regs*)+0x49>
c001ba49:	83 ec 0c             	sub    esp,0xc
c001ba4c:	50                   	push   eax
c001ba4d:	e8 a3 5f ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001ba52:	83 c4 0c             	add    esp,0xc
c001ba55:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba58:	31 db                	xor    ebx,ebx
c001ba5a:	53                   	push   ebx
c001ba5b:	51                   	push   ecx
c001ba5c:	50                   	push   eax
c001ba5d:	e8 be 7a ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001ba62:	83 c4 10             	add    esp,0x10
c001ba65:	85 c0                	test   eax,eax
c001ba67:	0f 95 c0             	setne  al
c001ba6a:	31 d2                	xor    edx,edx
c001ba6c:	0f b6 c0             	movzx  eax,al
c001ba6f:	f7 d8                	neg    eax
c001ba71:	83 d2 00             	adc    edx,0x0
c001ba74:	83 c4 08             	add    esp,0x8
c001ba77:	f7 da                	neg    edx
c001ba79:	5b                   	pop    ebx
c001ba7a:	c3                   	ret    
c001ba7b:	83 ec 08             	sub    esp,0x8
c001ba7e:	50                   	push   eax
c001ba7f:	68 4b bf 02 c0       	push   0xc002bf4b
c001ba84:	e8 1c 74 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001ba89:	83 c4 10             	add    esp,0x10
c001ba8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba91:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba96:	83 c4 08             	add    esp,0x8
c001ba99:	5b                   	pop    ebx
c001ba9a:	c3                   	ret    

c001ba9b <sysCallTell(regs*)>:
c001ba9b:	53                   	push   ebx
c001ba9c:	83 ec 08             	sub    esp,0x8
c001ba9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baa3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baa6:	83 f8 02             	cmp    eax,0x2
c001baa9:	76 5e                	jbe    c001bb09 <sysCallTell(regs*)+0x6e>
c001baab:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bab0:	77 2d                	ja     c001badf <sysCallTell(regs*)+0x44>
c001bab2:	83 ec 0c             	sub    esp,0xc
c001bab5:	50                   	push   eax
c001bab6:	e8 3a 5f ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001babb:	5a                   	pop    edx
c001babc:	59                   	pop    ecx
c001babd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bac0:	50                   	push   eax
c001bac1:	e8 b0 7a ff ff       	call   c0013576 <File::tell(unsigned long long*)>
c001bac6:	83 c4 10             	add    esp,0x10
c001bac9:	85 c0                	test   eax,eax
c001bacb:	0f 95 c0             	setne  al
c001bace:	31 d2                	xor    edx,edx
c001bad0:	0f b6 c0             	movzx  eax,al
c001bad3:	f7 d8                	neg    eax
c001bad5:	83 d2 00             	adc    edx,0x0
c001bad8:	83 c4 08             	add    esp,0x8
c001badb:	f7 da                	neg    edx
c001badd:	5b                   	pop    ebx
c001bade:	c3                   	ret    
c001badf:	83 ec 08             	sub    esp,0x8
c001bae2:	50                   	push   eax
c001bae3:	68 65 bf 02 c0       	push   0xc002bf65
c001bae8:	e8 b8 73 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001baed:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001baf0:	83 c4 10             	add    esp,0x10
c001baf3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001baf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb00:	31 d2                	xor    edx,edx
c001bb02:	31 c0                	xor    eax,eax
c001bb04:	83 c4 08             	add    esp,0x8
c001bb07:	5b                   	pop    ebx
c001bb08:	c3                   	ret    
c001bb09:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb0e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb13:	83 c4 08             	add    esp,0x8
c001bb16:	5b                   	pop    ebx
c001bb17:	c3                   	ret    

c001bb18 <sysCallSize(regs*)>:
c001bb18:	53                   	push   ebx
c001bb19:	83 ec 18             	sub    esp,0x18
c001bb1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb20:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb23:	83 f8 02             	cmp    eax,0x2
c001bb26:	76 64                	jbe    c001bb8c <sysCallSize(regs*)+0x74>
c001bb28:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb2d:	77 33                	ja     c001bb62 <sysCallSize(regs*)+0x4a>
c001bb2f:	83 ec 0c             	sub    esp,0xc
c001bb32:	50                   	push   eax
c001bb33:	e8 bd 5e ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bb38:	83 c4 0c             	add    esp,0xc
c001bb3b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb3f:	52                   	push   edx
c001bb40:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb43:	50                   	push   eax
c001bb44:	e8 c5 7b ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001bb49:	83 c4 10             	add    esp,0x10
c001bb4c:	85 c0                	test   eax,eax
c001bb4e:	0f 95 c0             	setne  al
c001bb51:	31 d2                	xor    edx,edx
c001bb53:	0f b6 c0             	movzx  eax,al
c001bb56:	f7 d8                	neg    eax
c001bb58:	83 d2 00             	adc    edx,0x0
c001bb5b:	83 c4 18             	add    esp,0x18
c001bb5e:	f7 da                	neg    edx
c001bb60:	5b                   	pop    ebx
c001bb61:	c3                   	ret    
c001bb62:	83 ec 08             	sub    esp,0x8
c001bb65:	50                   	push   eax
c001bb66:	68 7f bf 02 c0       	push   0xc002bf7f
c001bb6b:	e8 35 73 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001bb70:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb73:	83 c4 10             	add    esp,0x10
c001bb76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb83:	31 d2                	xor    edx,edx
c001bb85:	31 c0                	xor    eax,eax
c001bb87:	83 c4 18             	add    esp,0x18
c001bb8a:	5b                   	pop    ebx
c001bb8b:	c3                   	ret    
c001bb8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb91:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb96:	83 c4 18             	add    esp,0x18
c001bb99:	5b                   	pop    ebx
c001bb9a:	c3                   	ret    

c001bb9b <sysCallSizeFromFilename(regs*)>:
c001bb9b:	57                   	push   edi
c001bb9c:	56                   	push   esi
c001bb9d:	53                   	push   ebx
c001bb9e:	83 ec 20             	sub    esp,0x20
c001bba1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bba5:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bba8:	83 fb 02             	cmp    ebx,0x2
c001bbab:	0f 86 99 00 00 00    	jbe    c001bc4a <sysCallSizeFromFilename(regs*)+0xaf>
c001bbb1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bbb7:	77 65                	ja     c001bc1e <sysCallSizeFromFilename(regs*)+0x83>
c001bbb9:	83 ec 0c             	sub    esp,0xc
c001bbbc:	68 14 01 00 00       	push   0x114
c001bbc1:	e8 85 3c ff ff       	call   c000f84b <malloc>
c001bbc6:	83 c4 0c             	add    esp,0xc
c001bbc9:	89 c6                	mov    esi,eax
c001bbcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbd3:	53                   	push   ebx
c001bbd4:	56                   	push   esi
c001bbd5:	e8 24 78 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001bbda:	83 c4 0c             	add    esp,0xc
c001bbdd:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbe1:	50                   	push   eax
c001bbe2:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbe5:	56                   	push   esi
c001bbe6:	e8 23 7b ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001bbeb:	83 c4 10             	add    esp,0x10
c001bbee:	85 f6                	test   esi,esi
c001bbf0:	74 14                	je     c001bc06 <sysCallSizeFromFilename(regs*)+0x6b>
c001bbf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbf6:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbf8:	83 ec 0c             	sub    esp,0xc
c001bbfb:	56                   	push   esi
c001bbfc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbff:	83 c4 10             	add    esp,0x10
c001bc02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc06:	85 c0                	test   eax,eax
c001bc08:	0f 95 c0             	setne  al
c001bc0b:	31 d2                	xor    edx,edx
c001bc0d:	0f b6 c0             	movzx  eax,al
c001bc10:	f7 d8                	neg    eax
c001bc12:	83 d2 00             	adc    edx,0x0
c001bc15:	83 c4 20             	add    esp,0x20
c001bc18:	f7 da                	neg    edx
c001bc1a:	5b                   	pop    ebx
c001bc1b:	5e                   	pop    esi
c001bc1c:	5f                   	pop    edi
c001bc1d:	c3                   	ret    
c001bc1e:	83 ec 08             	sub    esp,0x8
c001bc21:	53                   	push   ebx
c001bc22:	68 7f bf 02 c0       	push   0xc002bf7f
c001bc27:	e8 79 72 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001bc2c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc2f:	83 c4 10             	add    esp,0x10
c001bc32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc38:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc3f:	31 d2                	xor    edx,edx
c001bc41:	83 c4 20             	add    esp,0x20
c001bc44:	31 c0                	xor    eax,eax
c001bc46:	5b                   	pop    ebx
c001bc47:	5e                   	pop    esi
c001bc48:	5f                   	pop    edi
c001bc49:	c3                   	ret    
c001bc4a:	83 c4 20             	add    esp,0x20
c001bc4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc52:	5b                   	pop    ebx
c001bc53:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc58:	5e                   	pop    esi
c001bc59:	5f                   	pop    edi
c001bc5a:	c3                   	ret    

c001bc5b <sysCallClose(regs*)>:
c001bc5b:	53                   	push   ebx
c001bc5c:	83 ec 08             	sub    esp,0x8
c001bc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc63:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc66:	83 f8 02             	cmp    eax,0x2
c001bc69:	76 50                	jbe    c001bcbb <sysCallClose(regs*)+0x60>
c001bc6b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc70:	74 58                	je     c001bcca <sysCallClose(regs*)+0x6f>
c001bc72:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc77:	74 60                	je     c001bcd9 <sysCallClose(regs*)+0x7e>
c001bc79:	77 2f                	ja     c001bcaa <sysCallClose(regs*)+0x4f>
c001bc7b:	83 ec 0c             	sub    esp,0xc
c001bc7e:	50                   	push   eax
c001bc7f:	e8 71 5d ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bc84:	89 c3                	mov    ebx,eax
c001bc86:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc89:	e8 32 78 ff ff       	call   c00134c0 <File::close()>
c001bc8e:	83 c4 10             	add    esp,0x10
c001bc91:	85 db                	test   ebx,ebx
c001bc93:	74 0c                	je     c001bca1 <sysCallClose(regs*)+0x46>
c001bc95:	83 ec 0c             	sub    esp,0xc
c001bc98:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc9a:	53                   	push   ebx
c001bc9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc9e:	83 c4 10             	add    esp,0x10
c001bca1:	31 c0                	xor    eax,eax
c001bca3:	31 d2                	xor    edx,edx
c001bca5:	83 c4 08             	add    esp,0x8
c001bca8:	5b                   	pop    ebx
c001bca9:	c3                   	ret    
c001bcaa:	83 ec 08             	sub    esp,0x8
c001bcad:	50                   	push   eax
c001bcae:	68 7c c0 02 c0       	push   0xc002c07c
c001bcb3:	e8 ed 71 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcc0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcc5:	83 c4 08             	add    esp,0x8
c001bcc8:	5b                   	pop    ebx
c001bcc9:	c3                   	ret    
c001bcca:	83 ec 0c             	sub    esp,0xc
c001bccd:	68 9a bf 02 c0       	push   0xc002bf9a
c001bcd2:	e8 ce 71 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001bcd7:	eb c5                	jmp    c001bc9e <sysCallClose(regs*)+0x43>
c001bcd9:	83 ec 0c             	sub    esp,0xc
c001bcdc:	68 a8 bf 02 c0       	push   0xc002bfa8
c001bce1:	eb ef                	jmp    c001bcd2 <sysCallClose(regs*)+0x77>

c001bce3 <sysCallOpenDir(regs*)>:
c001bce3:	56                   	push   esi
c001bce4:	53                   	push   ebx
c001bce5:	53                   	push   ebx
c001bce6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bced:	85 f6                	test   esi,esi
c001bcef:	74 59                	je     c001bd4a <sysCallOpenDir(regs*)+0x67>
c001bcf1:	83 ec 0c             	sub    esp,0xc
c001bcf4:	68 14 01 00 00       	push   0x114
c001bcf9:	e8 4d 3b ff ff       	call   c000f84b <malloc>
c001bcfe:	83 c4 0c             	add    esp,0xc
c001bd01:	89 c6                	mov    esi,eax
c001bd03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd08:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd0b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd0e:	56                   	push   esi
c001bd0f:	e8 96 7b ff ff       	call   c00138aa <Directory::Directory(char const*, Process*)>
c001bd14:	83 c4 10             	add    esp,0x10
c001bd17:	85 f6                	test   esi,esi
c001bd19:	74 2f                	je     c001bd4a <sysCallOpenDir(regs*)+0x67>
c001bd1b:	83 ec 0c             	sub    esp,0xc
c001bd1e:	56                   	push   esi
c001bd1f:	e8 ea 7b ff ff       	call   c001390e <Directory::open()>
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	85 c0                	test   eax,eax
c001bd29:	75 1f                	jne    c001bd4a <sysCallOpenDir(regs*)+0x67>
c001bd2b:	83 ec 0c             	sub    esp,0xc
c001bd2e:	56                   	push   esi
c001bd2f:	e8 cc 59 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001bd34:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd37:	83 c4 10             	add    esp,0x10
c001bd3a:	89 02                	mov    DWORD PTR [edx],eax
c001bd3c:	c1 f8 1f             	sar    eax,0x1f
c001bd3f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd42:	31 c0                	xor    eax,eax
c001bd44:	59                   	pop    ecx
c001bd45:	31 d2                	xor    edx,edx
c001bd47:	5b                   	pop    ebx
c001bd48:	5e                   	pop    esi
c001bd49:	c3                   	ret    
c001bd4a:	59                   	pop    ecx
c001bd4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd50:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd55:	5b                   	pop    ebx
c001bd56:	5e                   	pop    esi
c001bd57:	c3                   	ret    

c001bd58 <sysCallCloseDir(regs*)>:
c001bd58:	53                   	push   ebx
c001bd59:	83 ec 08             	sub    esp,0x8
c001bd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd63:	83 f8 02             	cmp    eax,0x2
c001bd66:	76 47                	jbe    c001bdaf <sysCallCloseDir(regs*)+0x57>
c001bd68:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd6d:	77 2f                	ja     c001bd9e <sysCallCloseDir(regs*)+0x46>
c001bd6f:	83 ec 0c             	sub    esp,0xc
c001bd72:	50                   	push   eax
c001bd73:	e8 7d 5c ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bd78:	89 c3                	mov    ebx,eax
c001bd7a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd7d:	e8 e8 7b ff ff       	call   c001396a <Directory::close()>
c001bd82:	83 c4 10             	add    esp,0x10
c001bd85:	85 db                	test   ebx,ebx
c001bd87:	74 0c                	je     c001bd95 <sysCallCloseDir(regs*)+0x3d>
c001bd89:	83 ec 0c             	sub    esp,0xc
c001bd8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd8e:	53                   	push   ebx
c001bd8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd92:	83 c4 10             	add    esp,0x10
c001bd95:	31 c0                	xor    eax,eax
c001bd97:	31 d2                	xor    edx,edx
c001bd99:	83 c4 08             	add    esp,0x8
c001bd9c:	5b                   	pop    ebx
c001bd9d:	c3                   	ret    
c001bd9e:	83 ec 08             	sub    esp,0x8
c001bda1:	50                   	push   eax
c001bda2:	68 a4 c0 02 c0       	push   0xc002c0a4
c001bda7:	e8 f9 70 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001bdac:	83 c4 10             	add    esp,0x10
c001bdaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdb9:	83 c4 08             	add    esp,0x8
c001bdbc:	5b                   	pop    ebx
c001bdbd:	c3                   	ret    

c001bdbe <sysCallMakeDir(regs*)>:
c001bdbe:	56                   	push   esi
c001bdbf:	53                   	push   ebx
c001bdc0:	83 ec 10             	sub    esp,0x10
c001bdc3:	68 14 01 00 00       	push   0x114
c001bdc8:	e8 7e 3a ff ff       	call   c000f84b <malloc>
c001bdcd:	83 c4 0c             	add    esp,0xc
c001bdd0:	89 c3                	mov    ebx,eax
c001bdd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdd7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdde:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bde1:	53                   	push   ebx
c001bde2:	e8 c3 7a ff ff       	call   c00138aa <Directory::Directory(char const*, Process*)>
c001bde7:	83 c4 10             	add    esp,0x10
c001bdea:	85 db                	test   ebx,ebx
c001bdec:	74 32                	je     c001be20 <sysCallMakeDir(regs*)+0x62>
c001bdee:	83 ec 0c             	sub    esp,0xc
c001bdf1:	53                   	push   ebx
c001bdf2:	e8 f7 7c ff ff       	call   c0013aee <Directory::create()>
c001bdf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdfa:	89 c6                	mov    esi,eax
c001bdfc:	e8 69 7b ff ff       	call   c001396a <Directory::close()>
c001be01:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be09:	83 c4 10             	add    esp,0x10
c001be0c:	31 c0                	xor    eax,eax
c001be0e:	59                   	pop    ecx
c001be0f:	85 f6                	test   esi,esi
c001be11:	5b                   	pop    ebx
c001be12:	0f 95 c0             	setne  al
c001be15:	5e                   	pop    esi
c001be16:	31 d2                	xor    edx,edx
c001be18:	f7 d8                	neg    eax
c001be1a:	83 d2 00             	adc    edx,0x0
c001be1d:	f7 da                	neg    edx
c001be1f:	c3                   	ret    
c001be20:	59                   	pop    ecx
c001be21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be26:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be2b:	5b                   	pop    ebx
c001be2c:	5e                   	pop    esi
c001be2d:	c3                   	ret    

c001be2e <sysCallWait(regs*)>:
c001be2e:	83 ec 10             	sub    esp,0x10
c001be31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be35:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be38:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be3b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be3e:	e8 08 25 00 00       	call   c001e34b <waitTask(int, int*, int)>
c001be43:	83 c4 1c             	add    esp,0x1c
c001be46:	99                   	cdq    
c001be47:	c3                   	ret    

c001be48 <sysCallNotImpl(regs*)>:
c001be48:	83 ec 18             	sub    esp,0x18
c001be4b:	68 b6 bf 02 c0       	push   0xc002bfb6
c001be50:	e8 2a e8 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001be55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be5f:	83 c4 1c             	add    esp,0x1c
c001be62:	c3                   	ret    

c001be63 <sysPanic(regs*)>:
c001be63:	83 ec 18             	sub    esp,0x18
c001be66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be6a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be6d:	e8 0d e8 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001be72:	c7 04 24 d0 bf 02 c0 	mov    DWORD PTR [esp],0xc002bfd0
c001be79:	e8 01 e8 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001be7e:	b8 01 00 00 00       	mov    eax,0x1
c001be83:	31 d2                	xor    edx,edx
c001be85:	83 c4 1c             	add    esp,0x1c
c001be88:	c3                   	ret    

c001be89 <sysCallRmdir(regs*)>:
c001be89:	56                   	push   esi
c001be8a:	53                   	push   ebx
c001be8b:	83 ec 20             	sub    esp,0x20
c001be8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be92:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be95:	68 14 01 00 00       	push   0x114
c001be9a:	e8 ac 39 ff ff       	call   c000f84b <malloc>
c001be9f:	83 c4 0c             	add    esp,0xc
c001bea2:	89 c3                	mov    ebx,eax
c001bea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beac:	56                   	push   esi
c001bead:	53                   	push   ebx
c001beae:	e8 4b 75 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001beb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001beb6:	e8 1f 77 ff ff       	call   c00135da <File::unlink()>
c001bebb:	83 c4 10             	add    esp,0x10
c001bebe:	85 db                	test   ebx,ebx
c001bec0:	74 14                	je     c001bed6 <sysCallRmdir(regs*)+0x4d>
c001bec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bec6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bec8:	83 ec 0c             	sub    esp,0xc
c001becb:	53                   	push   ebx
c001becc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001becf:	83 c4 10             	add    esp,0x10
c001bed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bed6:	85 c0                	test   eax,eax
c001bed8:	0f 95 c0             	setne  al
c001bedb:	31 d2                	xor    edx,edx
c001bedd:	0f b6 c0             	movzx  eax,al
c001bee0:	f7 d8                	neg    eax
c001bee2:	83 d2 00             	adc    edx,0x0
c001bee5:	83 c4 14             	add    esp,0x14
c001bee8:	f7 da                	neg    edx
c001beea:	5b                   	pop    ebx
c001beeb:	5e                   	pop    esi
c001beec:	c3                   	ret    

c001beed <sysCallUnlink(regs*)>:
c001beed:	56                   	push   esi
c001beee:	53                   	push   ebx
c001beef:	83 ec 20             	sub    esp,0x20
c001bef2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bef6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bef9:	68 14 01 00 00       	push   0x114
c001befe:	e8 48 39 ff ff       	call   c000f84b <malloc>
c001bf03:	83 c4 0c             	add    esp,0xc
c001bf06:	89 c3                	mov    ebx,eax
c001bf08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf0d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf10:	56                   	push   esi
c001bf11:	53                   	push   ebx
c001bf12:	e8 e7 74 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001bf17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf1a:	e8 bb 76 ff ff       	call   c00135da <File::unlink()>
c001bf1f:	83 c4 10             	add    esp,0x10
c001bf22:	85 db                	test   ebx,ebx
c001bf24:	74 14                	je     c001bf3a <sysCallUnlink(regs*)+0x4d>
c001bf26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf2a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf2c:	83 ec 0c             	sub    esp,0xc
c001bf2f:	53                   	push   ebx
c001bf30:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf33:	83 c4 10             	add    esp,0x10
c001bf36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf3a:	85 c0                	test   eax,eax
c001bf3c:	0f 95 c0             	setne  al
c001bf3f:	31 d2                	xor    edx,edx
c001bf41:	0f b6 c0             	movzx  eax,al
c001bf44:	f7 d8                	neg    eax
c001bf46:	83 d2 00             	adc    edx,0x0
c001bf49:	83 c4 14             	add    esp,0x14
c001bf4c:	f7 da                	neg    edx
c001bf4e:	5b                   	pop    ebx
c001bf4f:	5e                   	pop    esi
c001bf50:	c3                   	ret    

c001bf51 <sysCallGetArgv(regs*)>:
c001bf51:	83 ec 0c             	sub    esp,0xc
c001bf54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf58:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf5b:	85 c0                	test   eax,eax
c001bf5d:	78 2b                	js     c001bf8a <sysCallGetArgv(regs*)+0x39>
c001bf5f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf65:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf68:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf6e:	7d 1a                	jge    c001bf8a <sysCallGetArgv(regs*)+0x39>
c001bf70:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf77:	85 c0                	test   eax,eax
c001bf79:	74 17                	je     c001bf92 <sysCallGetArgv(regs*)+0x41>
c001bf7b:	83 ec 08             	sub    esp,0x8
c001bf7e:	50                   	push   eax
c001bf7f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf82:	e8 b5 48 fe ff       	call   c000083c <strcpy>
c001bf87:	83 c4 10             	add    esp,0x10
c001bf8a:	31 c0                	xor    eax,eax
c001bf8c:	31 d2                	xor    edx,edx
c001bf8e:	83 c4 0c             	add    esp,0xc
c001bf91:	c3                   	ret    
c001bf92:	b8 01 00 00 00       	mov    eax,0x1
c001bf97:	31 d2                	xor    edx,edx
c001bf99:	83 c4 0c             	add    esp,0xc
c001bf9c:	c3                   	ret    

c001bf9d <sysCallTTYName(regs*)>:
c001bf9d:	56                   	push   esi
c001bf9e:	53                   	push   ebx
c001bf9f:	53                   	push   ebx
c001bfa0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfa4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bfa7:	85 c0                	test   eax,eax
c001bfa9:	74 5f                	je     c001c00a <sysCallTTYName(regs*)+0x6d>
c001bfab:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bfae:	83 f8 02             	cmp    eax,0x2
c001bfb1:	77 3e                	ja     c001bff1 <sysCallTTYName(regs*)+0x54>
c001bfb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfb8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfbb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bfc1:	85 db                	test   ebx,ebx
c001bfc3:	74 45                	je     c001c00a <sysCallTTYName(regs*)+0x6d>
c001bfc5:	83 ec 0c             	sub    esp,0xc
c001bfc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfca:	53                   	push   ebx
c001bfcb:	ff 10                	call   DWORD PTR [eax]
c001bfcd:	83 c4 10             	add    esp,0x10
c001bfd0:	84 c0                	test   al,al
c001bfd2:	74 41                	je     c001c015 <sysCallTTYName(regs*)+0x78>
c001bfd4:	83 ec 08             	sub    esp,0x8
c001bfd7:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfdd:	53                   	push   ebx
c001bfde:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfe1:	e8 56 48 fe ff       	call   c000083c <strcpy>
c001bfe6:	83 c4 10             	add    esp,0x10
c001bfe9:	31 c0                	xor    eax,eax
c001bfeb:	59                   	pop    ecx
c001bfec:	31 d2                	xor    edx,edx
c001bfee:	5b                   	pop    ebx
c001bfef:	5e                   	pop    esi
c001bff0:	c3                   	ret    
c001bff1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bff6:	74 bb                	je     c001bfb3 <sysCallTTYName(regs*)+0x16>
c001bff8:	83 ec 0c             	sub    esp,0xc
c001bffb:	50                   	push   eax
c001bffc:	e8 f4 59 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001c001:	83 c4 10             	add    esp,0x10
c001c004:	89 c3                	mov    ebx,eax
c001c006:	85 db                	test   ebx,ebx
c001c008:	75 bb                	jne    c001bfc5 <sysCallTTYName(regs*)+0x28>
c001c00a:	59                   	pop    ecx
c001c00b:	b8 01 00 00 00       	mov    eax,0x1
c001c010:	31 d2                	xor    edx,edx
c001c012:	5b                   	pop    ebx
c001c013:	5e                   	pop    esi
c001c014:	c3                   	ret    
c001c015:	59                   	pop    ecx
c001c016:	b8 02 00 00 00       	mov    eax,0x2
c001c01b:	31 d2                	xor    edx,edx
c001c01d:	5b                   	pop    ebx
c001c01e:	5e                   	pop    esi
c001c01f:	c3                   	ret    

c001c020 <sysCallUSleep(regs*)>:
c001c020:	83 ec 14             	sub    esp,0x14
c001c023:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c028:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c02c:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c033:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c036:	01 ca                	add    edx,ecx
c001c038:	52                   	push   edx
c001c039:	50                   	push   eax
c001c03a:	e8 a5 23 00 00       	call   c001e3e4 <nanoSleep(unsigned long long)>
c001c03f:	31 c0                	xor    eax,eax
c001c041:	31 d2                	xor    edx,edx
c001c043:	83 c4 1c             	add    esp,0x1c
c001c046:	c3                   	ret    

c001c047 <sysCallSpawn(regs*)>:
c001c047:	56                   	push   esi
c001c048:	53                   	push   ebx
c001c049:	53                   	push   ebx
c001c04a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c04e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c051:	85 f6                	test   esi,esi
c001c053:	75 08                	jne    c001c05d <sysCallSpawn(regs*)+0x16>
c001c055:	59                   	pop    ecx
c001c056:	31 c0                	xor    eax,eax
c001c058:	31 d2                	xor    edx,edx
c001c05a:	5b                   	pop    ebx
c001c05b:	5e                   	pop    esi
c001c05c:	c3                   	ret    
c001c05d:	83 ec 0c             	sub    esp,0xc
c001c060:	68 3f 07 00 00       	push   0x73f
c001c065:	e8 e1 37 ff ff       	call   c000f84b <malloc>
c001c06a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c06d:	89 c6                	mov    esi,eax
c001c06f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c074:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c077:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c07a:	56                   	push   esi
c001c07b:	e8 2a 1a 00 00       	call   c001daaa <Process::Process(char const*, Process*, char**)>
c001c080:	83 c4 20             	add    esp,0x20
c001c083:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c08a:	75 c9                	jne    c001c055 <sysCallSpawn(regs*)+0xe>
c001c08c:	83 ec 0c             	sub    esp,0xc
c001c08f:	56                   	push   esi
c001c090:	e8 fd 1f 00 00       	call   c001e092 <Process::createUserThread()>
c001c095:	8b 06                	mov    eax,DWORD PTR [esi]
c001c097:	83 c4 10             	add    esp,0x10
c001c09a:	99                   	cdq    
c001c09b:	59                   	pop    ecx
c001c09c:	5b                   	pop    ebx
c001c09d:	5e                   	pop    esi
c001c09e:	c3                   	ret    

c001c09f <sysCallGetEnv(regs*)>:
c001c09f:	55                   	push   ebp
c001c0a0:	57                   	push   edi
c001c0a1:	56                   	push   esi
c001c0a2:	53                   	push   ebx
c001c0a3:	83 ec 28             	sub    esp,0x28
c001c0a6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0aa:	68 df bf 02 c0       	push   0xc002bfdf
c001c0af:	e8 f1 6d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c0b4:	5f                   	pop    edi
c001c0b5:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c0b8:	5d                   	pop    ebp
c001c0b9:	53                   	push   ebx
c001c0ba:	68 0e c3 02 c0       	push   0xc002c30e
c001c0bf:	e8 e1 6d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c0c4:	58                   	pop    eax
c001c0c5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c0c8:	5a                   	pop    edx
c001c0c9:	57                   	push   edi
c001c0ca:	68 e8 bf 02 c0       	push   0xc002bfe8
c001c0cf:	e8 d1 6d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c0d4:	59                   	pop    ecx
c001c0d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0da:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0dd:	e8 b9 e4 ff ff       	call   c001a59b <Krnl::getProcessTotalEnvCount(Process*)>
c001c0e2:	5a                   	pop    edx
c001c0e3:	89 c5                	mov    ebp,eax
c001c0e5:	59                   	pop    ecx
c001c0e6:	50                   	push   eax
c001c0e7:	68 f2 bf 02 c0       	push   0xc002bff2
c001c0ec:	e8 b4 6d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c0f1:	83 c4 10             	add    esp,0x10
c001c0f4:	39 ef                	cmp    edi,ebp
c001c0f6:	7c 15                	jl     c001c10d <sysCallGetEnv(regs*)+0x6e>
c001c0f8:	85 db                	test   ebx,ebx
c001c0fa:	75 0c                	jne    c001c108 <sysCallGetEnv(regs*)+0x69>
c001c0fc:	83 c4 1c             	add    esp,0x1c
c001c0ff:	31 c0                	xor    eax,eax
c001c101:	5b                   	pop    ebx
c001c102:	31 d2                	xor    edx,edx
c001c104:	5e                   	pop    esi
c001c105:	5f                   	pop    edi
c001c106:	5d                   	pop    ebp
c001c107:	c3                   	ret    
c001c108:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c10b:	eb ef                	jmp    c001c0fc <sysCallGetEnv(regs*)+0x5d>
c001c10d:	83 ec 0c             	sub    esp,0xc
c001c110:	68 fe bf 02 c0       	push   0xc002bffe
c001c115:	e8 8b 6d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c11a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c11e:	83 c4 0c             	add    esp,0xc
c001c121:	57                   	push   edi
c001c122:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c128:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c12b:	50                   	push   eax
c001c12c:	e8 8a e4 ff ff       	call   c001a5bb <Krnl::getProcessEnvPair(Process*, int)>
c001c131:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c135:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c139:	68 8d c3 02 c0       	push   0xc002c38d
c001c13e:	e8 62 6d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c143:	83 c4 10             	add    esp,0x10
c001c146:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c149:	85 f6                	test   esi,esi
c001c14b:	75 47                	jne    c001c194 <sysCallGetEnv(regs*)+0xf5>
c001c14d:	83 ec 0c             	sub    esp,0xc
c001c150:	55                   	push   ebp
c001c151:	e8 46 46 fe ff       	call   c000079c <strlen>
c001c156:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c159:	89 c3                	mov    ebx,eax
c001c15b:	e8 3c 46 fe ff       	call   c000079c <strlen>
c001c160:	5a                   	pop    edx
c001c161:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c165:	59                   	pop    ecx
c001c166:	50                   	push   eax
c001c167:	68 01 c0 02 c0       	push   0xc002c001
c001c16c:	e8 34 6d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c171:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c174:	e8 23 46 fe ff       	call   c000079c <strlen>
c001c179:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c17c:	89 c3                	mov    ebx,eax
c001c17e:	e8 19 46 fe ff       	call   c000079c <strlen>
c001c183:	83 c4 10             	add    esp,0x10
c001c186:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c18a:	83 c4 1c             	add    esp,0x1c
c001c18d:	31 d2                	xor    edx,edx
c001c18f:	5b                   	pop    ebx
c001c190:	5e                   	pop    esi
c001c191:	5f                   	pop    edi
c001c192:	5d                   	pop    ebp
c001c193:	c3                   	ret    
c001c194:	83 ec 0c             	sub    esp,0xc
c001c197:	68 a7 c3 02 c0       	push   0xc002c3a7
c001c19c:	e8 04 6d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c1a1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c1a4:	58                   	pop    eax
c001c1a5:	5a                   	pop    edx
c001c1a6:	55                   	push   ebp
c001c1a7:	53                   	push   ebx
c001c1a8:	e8 8f 46 fe ff       	call   c000083c <strcpy>
c001c1ad:	59                   	pop    ecx
c001c1ae:	5e                   	pop    esi
c001c1af:	68 0b c0 02 c0       	push   0xc002c00b
c001c1b4:	53                   	push   ebx
c001c1b5:	e8 c2 47 fe ff       	call   c000097c <strcat>
c001c1ba:	5d                   	pop    ebp
c001c1bb:	58                   	pop    eax
c001c1bc:	57                   	push   edi
c001c1bd:	53                   	push   ebx
c001c1be:	e8 b9 47 fe ff       	call   c000097c <strcat>
c001c1c3:	c7 04 24 c1 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3c1
c001c1ca:	e8 d6 6c ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c1cf:	83 c4 10             	add    esp,0x10
c001c1d2:	e9 25 ff ff ff       	jmp    c001c0fc <sysCallGetEnv(regs*)+0x5d>

c001c1d7 <sysAppSettings(regs*)>:
c001c1d7:	53                   	push   ebx
c001c1d8:	83 ec 08             	sub    esp,0x8
c001c1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1df:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1e2:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1e8:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1ed:	66 3d c0 09          	cmp    ax,0x9c0
c001c1f1:	75 2f                	jne    c001c222 <sysAppSettings(regs*)+0x4b>
c001c1f3:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1f9:	83 e0 1f             	and    eax,0x1f
c001c1fc:	3c 01                	cmp    al,0x1
c001c1fe:	74 2e                	je     c001c22e <sysAppSettings(regs*)+0x57>
c001c200:	3c 07                	cmp    al,0x7
c001c202:	0f 84 bd 00 00 00    	je     c001c2c5 <sysAppSettings(regs*)+0xee>
c001c208:	84 c0                	test   al,al
c001c20a:	0f 84 dc 00 00 00    	je     c001c2ec <sysAppSettings(regs*)+0x115>
c001c210:	3c 08                	cmp    al,0x8
c001c212:	74 6d                	je     c001c281 <sysAppSettings(regs*)+0xaa>
c001c214:	0f b6 c0             	movzx  eax,al
c001c217:	83 c4 08             	add    esp,0x8
c001c21a:	05 e8 03 00 00       	add    eax,0x3e8
c001c21f:	5b                   	pop    ebx
c001c220:	99                   	cdq    
c001c221:	c3                   	ret    
c001c222:	b8 01 00 00 00       	mov    eax,0x1
c001c227:	31 d2                	xor    edx,edx
c001c229:	83 c4 08             	add    esp,0x8
c001c22c:	5b                   	pop    ebx
c001c22d:	c3                   	ret    
c001c22e:	51                   	push   ecx
c001c22f:	68 00 01 00 00       	push   0x100
c001c234:	6a 00                	push   0x0
c001c236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c23b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c23e:	83 c0 0c             	add    eax,0xc
c001c241:	50                   	push   eax
c001c242:	e8 39 45 fe ff       	call   c0000780 <memset>
c001c247:	83 c4 0c             	add    esp,0xc
c001c24a:	68 ff 00 00 00       	push   0xff
c001c24f:	53                   	push   ebx
c001c250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c255:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c258:	83 c0 0c             	add    eax,0xc
c001c25b:	50                   	push   eax
c001c25c:	e8 eb 44 fe ff       	call   c000074c <memcpy>
c001c261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c266:	5b                   	pop    ebx
c001c267:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c26a:	5a                   	pop    edx
c001c26b:	8d 50 0c             	lea    edx,[eax+0xc]
c001c26e:	52                   	push   edx
c001c26f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c275:	e8 f6 48 ff ff       	call   c0010b70 <VgaText::setTitle(char*)>
c001c27a:	83 c4 10             	add    esp,0x10
c001c27d:	31 c0                	xor    eax,eax
c001c27f:	eb a6                	jmp    c001c227 <sysAppSettings(regs*)+0x50>
c001c281:	83 ec 08             	sub    esp,0x8
c001c284:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c28a:	83 e0 0f             	and    eax,0xf
c001c28d:	50                   	push   eax
c001c28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c293:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c296:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c29c:	e8 bf 48 ff ff       	call   c0010b60 <VgaText::setTitleColour(VgaColour)>
c001c2a1:	58                   	pop    eax
c001c2a2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2a8:	5a                   	pop    edx
c001c2a9:	c1 e8 04             	shr    eax,0x4
c001c2ac:	83 e0 0f             	and    eax,0xf
c001c2af:	50                   	push   eax
c001c2b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2be:	e8 8d 48 ff ff       	call   c0010b50 <VgaText::setTitleTextColour(VgaColour)>
c001c2c3:	eb b5                	jmp    c001c27a <sysAppSettings(regs*)+0xa3>
c001c2c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2cd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c2d3:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2d9:	c0 e8 06             	shr    al,0x6
c001c2dc:	83 e0 01             	and    eax,0x1
c001c2df:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2e5:	31 c0                	xor    eax,eax
c001c2e7:	e9 3b ff ff ff       	jmp    c001c227 <sysAppSettings(regs*)+0x50>
c001c2ec:	b8 02 00 00 00       	mov    eax,0x2
c001c2f1:	e9 31 ff ff ff       	jmp    c001c227 <sysAppSettings(regs*)+0x50>

c001c2f6 <sysSetFatAttrib(regs*)>:
c001c2f6:	57                   	push   edi
c001c2f7:	56                   	push   esi
c001c2f8:	53                   	push   ebx
c001c2f9:	83 ec 1c             	sub    esp,0x1c
c001c2fc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c300:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c303:	68 14 01 00 00       	push   0x114
c001c308:	e8 3e 35 ff ff       	call   c000f84b <malloc>
c001c30d:	83 c4 0c             	add    esp,0xc
c001c310:	89 c3                	mov    ebx,eax
c001c312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c317:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c31a:	57                   	push   edi
c001c31b:	53                   	push   ebx
c001c31c:	e8 dd 70 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001c321:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c324:	83 c4 0c             	add    esp,0xc
c001c327:	0f b6 d4             	movzx  edx,ah
c001c32a:	0f b6 c0             	movzx  eax,al
c001c32d:	52                   	push   edx
c001c32e:	50                   	push   eax
c001c32f:	53                   	push   ebx
c001c330:	e8 3f 73 ff ff       	call   c0013674 <File::chfatattr(unsigned char, unsigned char)>
c001c335:	83 c4 10             	add    esp,0x10
c001c338:	85 db                	test   ebx,ebx
c001c33a:	74 14                	je     c001c350 <sysSetFatAttrib(regs*)+0x5a>
c001c33c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c340:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c342:	83 ec 0c             	sub    esp,0xc
c001c345:	53                   	push   ebx
c001c346:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c349:	83 c4 10             	add    esp,0x10
c001c34c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c350:	85 c0                	test   eax,eax
c001c352:	0f 95 c0             	setne  al
c001c355:	31 d2                	xor    edx,edx
c001c357:	0f b6 c0             	movzx  eax,al
c001c35a:	f7 d8                	neg    eax
c001c35c:	83 d2 00             	adc    edx,0x0
c001c35f:	83 c4 10             	add    esp,0x10
c001c362:	f7 da                	neg    edx
c001c364:	5b                   	pop    ebx
c001c365:	5e                   	pop    esi
c001c366:	5f                   	pop    edi
c001c367:	c3                   	ret    

c001c368 <sysPipe(regs*)>:
c001c368:	57                   	push   edi
c001c369:	56                   	push   esi
c001c36a:	53                   	push   ebx
c001c36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c36f:	83 ec 0c             	sub    esp,0xc
c001c372:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c375:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c378:	6a 20                	push   0x20
c001c37a:	e8 cc 34 ff ff       	call   c000f84b <malloc>
c001c37f:	89 c3                	mov    ebx,eax
c001c381:	58                   	pop    eax
c001c382:	5a                   	pop    edx
c001c383:	68 00 50 00 00       	push   0x5000
c001c388:	53                   	push   ebx
c001c389:	e8 12 41 ff ff       	call   c00104a0 <Pipe::Pipe(int)>
c001c38e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c391:	e8 6a 53 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c396:	89 07                	mov    DWORD PTR [edi],eax
c001c398:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c39b:	e8 60 53 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c3a0:	83 c4 10             	add    esp,0x10
c001c3a3:	89 06                	mov    DWORD PTR [esi],eax
c001c3a5:	31 d2                	xor    edx,edx
c001c3a7:	5b                   	pop    ebx
c001c3a8:	31 c0                	xor    eax,eax
c001c3aa:	5e                   	pop    esi
c001c3ab:	5f                   	pop    edi
c001c3ac:	c3                   	ret    

c001c3ad <sysGetUnixTime(regs*)>:
c001c3ad:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001c3b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3bc:	e9 27 7a ff ff       	jmp    c0013de8 <Clock::timeInSecondsLocal()>

c001c3c1 <string_ends_with(char const*, char const*)>:
c001c3c1:	57                   	push   edi
c001c3c2:	56                   	push   esi
c001c3c3:	53                   	push   ebx
c001c3c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3c8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c3cc:	83 ec 0c             	sub    esp,0xc
c001c3cf:	53                   	push   ebx
c001c3d0:	e8 c7 43 fe ff       	call   c000079c <strlen>
c001c3d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3d8:	89 c6                	mov    esi,eax
c001c3da:	e8 bd 43 fe ff       	call   c000079c <strlen>
c001c3df:	83 c4 10             	add    esp,0x10
c001c3e2:	39 c6                	cmp    esi,eax
c001c3e4:	7d 06                	jge    c001c3ec <string_ends_with(char const*, char const*)+0x2b>
c001c3e6:	5b                   	pop    ebx
c001c3e7:	31 c0                	xor    eax,eax
c001c3e9:	5e                   	pop    esi
c001c3ea:	5f                   	pop    edi
c001c3eb:	c3                   	ret    
c001c3ec:	83 ec 08             	sub    esp,0x8
c001c3ef:	29 c6                	sub    esi,eax
c001c3f1:	57                   	push   edi
c001c3f2:	01 f3                	add    ebx,esi
c001c3f4:	53                   	push   ebx
c001c3f5:	e8 ce 44 fe ff       	call   c00008c8 <strcmp>
c001c3fa:	83 c4 10             	add    esp,0x10
c001c3fd:	85 c0                	test   eax,eax
c001c3ff:	5b                   	pop    ebx
c001c400:	0f 94 c0             	sete   al
c001c403:	5e                   	pop    esi
c001c404:	0f b6 c0             	movzx  eax,al
c001c407:	5f                   	pop    edi
c001c408:	c3                   	ret    

c001c409 <sysCallOpen(regs*)>:
c001c409:	56                   	push   esi
c001c40a:	53                   	push   ebx
c001c40b:	81 ec 04 01 00 00    	sub    esp,0x104
c001c411:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c418:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c41b:	85 c9                	test   ecx,ecx
c001c41d:	0f 84 b3 00 00 00    	je     c001c4d6 <sysCallOpen(regs*)+0xcd>
c001c423:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c426:	85 c0                	test   eax,eax
c001c428:	0f 84 a8 00 00 00    	je     c001c4d6 <sysCallOpen(regs*)+0xcd>
c001c42e:	52                   	push   edx
c001c42f:	68 0d c0 02 c0       	push   0xc002c00d
c001c434:	50                   	push   eax
c001c435:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c439:	56                   	push   esi
c001c43a:	e8 15 6e ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c43f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c442:	e8 55 43 fe ff       	call   c000079c <strlen>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	48                   	dec    eax
c001c44b:	74 1d                	je     c001c46a <sysCallOpen(regs*)+0x61>
c001c44d:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c450:	eb 0f                	jmp    c001c461 <sysCallOpen(regs*)+0x58>
c001c452:	80 fa 3a             	cmp    dl,0x3a
c001c455:	74 0f                	je     c001c466 <sysCallOpen(regs*)+0x5d>
c001c457:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c45b:	48                   	dec    eax
c001c45c:	74 0c                	je     c001c46a <sysCallOpen(regs*)+0x61>
c001c45e:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c461:	80 fa 2e             	cmp    dl,0x2e
c001c464:	75 ec                	jne    c001c452 <sysCallOpen(regs*)+0x49>
c001c466:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c46a:	83 ec 08             	sub    esp,0x8
c001c46d:	68 11 c0 02 c0       	push   0xc002c011
c001c472:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c475:	e8 47 ff ff ff       	call   c001c3c1 <string_ends_with(char const*, char const*)>
c001c47a:	83 c4 10             	add    esp,0x10
c001c47d:	85 c0                	test   eax,eax
c001c47f:	75 17                	jne    c001c498 <sysCallOpen(regs*)+0x8f>
c001c481:	83 ec 08             	sub    esp,0x8
c001c484:	68 32 c0 02 c0       	push   0xc002c032
c001c489:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c48c:	e8 30 ff ff ff       	call   c001c3c1 <string_ends_with(char const*, char const*)>
c001c491:	83 c4 10             	add    esp,0x10
c001c494:	85 c0                	test   eax,eax
c001c496:	74 51                	je     c001c4e9 <sysCallOpen(regs*)+0xe0>
c001c498:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c49b:	83 ec 08             	sub    esp,0x8
c001c49e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c4a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4ae:	ff 30                	push   DWORD PTR [eax]
c001c4b0:	68 16 c0 02 c0       	push   0xc002c016
c001c4b5:	e8 eb 69 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c4ba:	c7 04 24 25 c0 02 c0 	mov    DWORD PTR [esp],0xc002c025
c001c4c1:	e8 df 69 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c4c6:	83 c4 10             	add    esp,0x10
c001c4c9:	81 c4 04 01 00 00    	add    esp,0x104
c001c4cf:	31 c0                	xor    eax,eax
c001c4d1:	31 d2                	xor    edx,edx
c001c4d3:	5b                   	pop    ebx
c001c4d4:	5e                   	pop    esi
c001c4d5:	c3                   	ret    
c001c4d6:	81 c4 04 01 00 00    	add    esp,0x104
c001c4dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4e6:	5b                   	pop    ebx
c001c4e7:	5e                   	pop    esi
c001c4e8:	c3                   	ret    
c001c4e9:	83 ec 08             	sub    esp,0x8
c001c4ec:	68 12 c0 02 c0       	push   0xc002c012
c001c4f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4f4:	e8 cf 43 fe ff       	call   c00008c8 <strcmp>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	85 c0                	test   eax,eax
c001c4fe:	74 98                	je     c001c498 <sysCallOpen(regs*)+0x8f>
c001c500:	83 ec 08             	sub    esp,0x8
c001c503:	68 11 c0 02 c0       	push   0xc002c011
c001c508:	56                   	push   esi
c001c509:	e8 b3 fe ff ff       	call   c001c3c1 <string_ends_with(char const*, char const*)>
c001c50e:	83 c4 10             	add    esp,0x10
c001c511:	85 c0                	test   eax,eax
c001c513:	75 83                	jne    c001c498 <sysCallOpen(regs*)+0x8f>
c001c515:	83 ec 08             	sub    esp,0x8
c001c518:	68 37 c0 02 c0       	push   0xc002c037
c001c51d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c520:	e8 9c fe ff ff       	call   c001c3c1 <string_ends_with(char const*, char const*)>
c001c525:	83 c4 10             	add    esp,0x10
c001c528:	85 c0                	test   eax,eax
c001c52a:	0f 85 d9 00 00 00    	jne    c001c609 <sysCallOpen(regs*)+0x200>
c001c530:	83 ec 08             	sub    esp,0x8
c001c533:	68 3c c0 02 c0       	push   0xc002c03c
c001c538:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c53b:	e8 81 fe ff ff       	call   c001c3c1 <string_ends_with(char const*, char const*)>
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	85 c0                	test   eax,eax
c001c545:	0f 85 be 00 00 00    	jne    c001c609 <sysCallOpen(regs*)+0x200>
c001c54b:	83 ec 08             	sub    esp,0x8
c001c54e:	68 38 c0 02 c0       	push   0xc002c038
c001c553:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c556:	e8 6d 43 fe ff       	call   c00008c8 <strcmp>
c001c55b:	83 c4 10             	add    esp,0x10
c001c55e:	85 c0                	test   eax,eax
c001c560:	0f 84 a3 00 00 00    	je     c001c609 <sysCallOpen(regs*)+0x200>
c001c566:	83 ec 08             	sub    esp,0x8
c001c569:	68 37 c0 02 c0       	push   0xc002c037
c001c56e:	56                   	push   esi
c001c56f:	e8 4d fe ff ff       	call   c001c3c1 <string_ends_with(char const*, char const*)>
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	85 c0                	test   eax,eax
c001c579:	0f 85 8a 00 00 00    	jne    c001c609 <sysCallOpen(regs*)+0x200>
c001c57f:	83 ec 0c             	sub    esp,0xc
c001c582:	68 14 01 00 00       	push   0x114
c001c587:	e8 bf 32 ff ff       	call   c000f84b <malloc>
c001c58c:	83 c4 0c             	add    esp,0xc
c001c58f:	89 c6                	mov    esi,eax
c001c591:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c596:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c599:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c59c:	56                   	push   esi
c001c59d:	e8 5c 6e ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001c5a2:	83 c4 10             	add    esp,0x10
c001c5a5:	85 f6                	test   esi,esi
c001c5a7:	0f 84 29 ff ff ff    	je     c001c4d6 <sysCallOpen(regs*)+0xcd>
c001c5ad:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5b0:	0f b6 c2             	movzx  eax,dl
c001c5b3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c5b6:	89 d0                	mov    eax,edx
c001c5b8:	83 e0 01             	and    eax,0x1
c001c5bb:	f6 c2 02             	test   dl,0x2
c001c5be:	74 03                	je     c001c5c3 <sysCallOpen(regs*)+0x1ba>
c001c5c0:	83 c8 02             	or     eax,0x2
c001c5c3:	f6 c2 04             	test   dl,0x4
c001c5c6:	74 03                	je     c001c5cb <sysCallOpen(regs*)+0x1c2>
c001c5c8:	83 c8 04             	or     eax,0x4
c001c5cb:	f6 c2 08             	test   dl,0x8
c001c5ce:	74 03                	je     c001c5d3 <sysCallOpen(regs*)+0x1ca>
c001c5d0:	83 c8 0a             	or     eax,0xa
c001c5d3:	83 e2 10             	and    edx,0x10
c001c5d6:	74 03                	je     c001c5db <sysCallOpen(regs*)+0x1d2>
c001c5d8:	83 c8 12             	or     eax,0x12
c001c5db:	83 ec 08             	sub    esp,0x8
c001c5de:	50                   	push   eax
c001c5df:	56                   	push   esi
c001c5e0:	e8 7d 6e ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001c5e5:	83 c4 10             	add    esp,0x10
c001c5e8:	85 c0                	test   eax,eax
c001c5ea:	0f 85 e6 fe ff ff    	jne    c001c4d6 <sysCallOpen(regs*)+0xcd>
c001c5f0:	83 ec 0c             	sub    esp,0xc
c001c5f3:	56                   	push   esi
c001c5f4:	e8 07 51 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c5f9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5fc:	89 02                	mov    DWORD PTR [edx],eax
c001c5fe:	c1 f8 1f             	sar    eax,0x1f
c001c601:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c604:	e9 bd fe ff ff       	jmp    c001c4c6 <sysCallOpen(regs*)+0xbd>
c001c609:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c60c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c612:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c619:	e9 ab fe ff ff       	jmp    c001c4c9 <sysCallOpen(regs*)+0xc0>

c001c61e <Sys::loadSyscalls()>:
c001c61e:	c7 05 e0 10 03 c0 2b b7 01 c0 	mov    DWORD PTR ds:0xc00310e0,0xc001b72b
c001c628:	c7 05 e4 10 03 c0 14 b3 01 c0 	mov    DWORD PTR ds:0xc00310e4,0xc001b314
c001c632:	c7 05 e8 10 03 c0 7e b4 01 c0 	mov    DWORD PTR ds:0xc00310e8,0xc001b47e
c001c63c:	c7 05 ec 10 03 c0 61 b6 01 c0 	mov    DWORD PTR ds:0xc00310ec,0xc001b661
c001c646:	c7 05 f0 10 03 c0 16 b4 01 c0 	mov    DWORD PTR ds:0xc00310f0,0xc001b416
c001c650:	c7 05 f4 10 03 c0 4b b3 01 c0 	mov    DWORD PTR ds:0xc00310f4,0xc001b34b
c001c65a:	c7 05 f8 10 03 c0 2c b3 01 c0 	mov    DWORD PTR ds:0xc00310f8,0xc001b32c
c001c664:	c7 05 fc 10 03 c0 d3 b4 01 c0 	mov    DWORD PTR ds:0xc00310fc,0xc001b4d3
c001c66e:	c7 05 04 11 03 c0 5b bc 01 c0 	mov    DWORD PTR ds:0xc0031104,0xc001bc5b
c001c678:	c7 05 00 11 03 c0 09 c4 01 c0 	mov    DWORD PTR ds:0xc0031100,0xc001c409
c001c682:	c7 05 08 11 03 c0 e3 bc 01 c0 	mov    DWORD PTR ds:0xc0031108,0xc001bce3
c001c68c:	c7 05 0c 11 03 c0 4a b9 01 c0 	mov    DWORD PTR ds:0xc003110c,0xc001b94a
c001c696:	c7 05 10 11 03 c0 66 b7 01 c0 	mov    DWORD PTR ds:0xc0031110,0xc001b766
c001c6a0:	c7 05 14 11 03 c0 6b b7 01 c0 	mov    DWORD PTR ds:0xc0031114,0xc001b76b
c001c6aa:	c7 05 18 11 03 c0 be bd 01 c0 	mov    DWORD PTR ds:0xc0031118,0xc001bdbe
c001c6b4:	c7 05 1c 11 03 c0 58 bd 01 c0 	mov    DWORD PTR ds:0xc003111c,0xc001bd58
c001c6be:	c7 05 20 11 03 c0 32 ba 01 c0 	mov    DWORD PTR ds:0xc0031120,0xc001ba32
c001c6c8:	c7 05 24 11 03 c0 9b ba 01 c0 	mov    DWORD PTR ds:0xc0031124,0xc001ba9b
c001c6d2:	c7 05 28 11 03 c0 18 bb 01 c0 	mov    DWORD PTR ds:0xc0031128,0xc001bb18
c001c6dc:	c7 05 2c 11 03 c0 70 b7 01 c0 	mov    DWORD PTR ds:0xc003112c,0xc001b770
c001c6e6:	c7 05 30 11 03 c0 2e be 01 c0 	mov    DWORD PTR ds:0xc0031130,0xc001be2e
c001c6f0:	c7 05 34 11 03 c0 48 be 01 c0 	mov    DWORD PTR ds:0xc0031134,0xc001be48
c001c6fa:	c7 05 38 11 03 c0 48 be 01 c0 	mov    DWORD PTR ds:0xc0031138,0xc001be48
c001c704:	c7 05 3c 11 03 c0 89 be 01 c0 	mov    DWORD PTR ds:0xc003113c,0xc001be89
c001c70e:	c7 05 40 11 03 c0 ed be 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001beed
c001c718:	c7 05 44 11 03 c0 1c b9 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001b91c
c001c722:	c7 05 48 11 03 c0 51 bf 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001bf51
c001c72c:	c7 05 4c 11 03 c0 d9 b8 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b8d9
c001c736:	c7 05 50 11 03 c0 9d bf 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001bf9d
c001c740:	c7 05 54 11 03 c0 d8 b9 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b9d8
c001c74a:	c7 05 58 11 03 c0 20 c0 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001c020
c001c754:	c7 05 5c 11 03 c0 9b bb 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001bb9b
c001c75e:	c7 05 60 11 03 c0 47 c0 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001c047
c001c768:	c7 05 64 11 03 c0 9f c0 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001c09f
c001c772:	c7 05 68 11 03 c0 d7 c1 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001c1d7
c001c77c:	c7 05 6c 11 03 c0 7a b7 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b77a
c001c786:	c7 05 70 11 03 c0 e4 b7 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001b7e4
c001c790:	c7 05 74 11 03 c0 2a b8 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001b82a
c001c79a:	c7 05 78 11 03 c0 f6 c2 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001c2f6
c001c7a4:	c7 05 7c 11 03 c0 63 be 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001be63
c001c7ae:	c7 05 80 11 03 c0 7b b8 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001b87b
c001c7b8:	c7 05 84 11 03 c0 68 c3 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001c368
c001c7c2:	c7 05 88 11 03 c0 ad c3 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001c3ad
c001c7cc:	c7 05 8c 11 03 c0 6e b3 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b36e
c001c7d6:	c7 05 90 11 03 c0 ef b4 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001b4ef
c001c7e0:	c7 05 94 11 03 c0 17 b6 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001b617
c001c7ea:	c7 05 98 11 03 c0 de b2 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001b2de
c001c7f4:	c7 05 9c 11 03 c0 c9 b6 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001b6c9
c001c7fe:	c7 05 a0 11 03 c0 57 b3 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001b357
c001c808:	c3                   	ret    

c001c809 <Sys::systemCall(regs*, void*)>:
c001c809:	53                   	push   ebx
c001c80a:	83 ec 08             	sub    esp,0x8
c001c80d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c811:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c814:	83 f8 7f             	cmp    eax,0x7f
c001c817:	77 16                	ja     c001c82f <Sys::systemCall(regs*, void*)+0x26>
c001c819:	8b 14 85 e0 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef20]
c001c820:	85 d2                	test   edx,edx
c001c822:	74 0b                	je     c001c82f <Sys::systemCall(regs*, void*)+0x26>
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	53                   	push   ebx
c001c828:	ff d2                	call   edx
c001c82a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c82d:	eb 0d                	jmp    c001c83c <Sys::systemCall(regs*, void*)+0x33>
c001c82f:	52                   	push   edx
c001c830:	52                   	push   edx
c001c831:	50                   	push   eax
c001c832:	68 41 c0 02 c0       	push   0xc002c041
c001c837:	e8 69 66 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c83c:	83 c4 10             	add    esp,0x10
c001c83f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c844:	31 d2                	xor    edx,edx
c001c846:	83 c4 08             	add    esp,0x8
c001c849:	5b                   	pop    ebx
c001c84a:	c3                   	ret    

c001c84b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c84b:	55                   	push   ebp
c001c84c:	57                   	push   edi
c001c84d:	56                   	push   esi
c001c84e:	53                   	push   ebx
c001c84f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c855:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c85c:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c863:	85 c0                	test   eax,eax
c001c865:	0f 95 c1             	setne  cl
c001c868:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c870:	0f 94 c2             	sete   dl
c001c873:	84 d1                	test   cl,dl
c001c875:	74 23                	je     c001c89a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c877:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c87d:	74 1b                	je     c001c89a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c87f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c885:	89 da                	mov    edx,ebx
c001c887:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c88d:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c893:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c89a:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c8a1:	05 ff 0f 00 00       	add    eax,0xfff
c001c8a6:	83 ec 0c             	sub    esp,0xc
c001c8a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8ad:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c8b3:	c1 e8 0c             	shr    eax,0xc
c001c8b6:	89 ef                	mov    edi,ebp
c001c8b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8bc:	c1 ef 0c             	shr    edi,0xc
c001c8bf:	6a 01                	push   0x1
c001c8c1:	e8 85 52 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c001c8c6:	89 c6                	mov    esi,eax
c001c8c8:	58                   	pop    eax
c001c8c9:	5a                   	pop    edx
c001c8ca:	57                   	push   edi
c001c8cb:	68 c7 c0 02 c0       	push   0xc002c0c7
c001c8d0:	e8 d0 65 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c8d5:	59                   	pop    ecx
c001c8d6:	58                   	pop    eax
c001c8d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8db:	68 d9 c0 02 c0       	push   0xc002c0d9
c001c8e0:	e8 c0 65 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c8e5:	83 c4 10             	add    esp,0x10
c001c8e8:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8ee:	0f 86 24 01 00 00    	jbe    c001ca18 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8f4:	c1 e7 0c             	shl    edi,0xc
c001c8f7:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8fa:	89 df                	mov    edi,ebx
c001c8fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c900:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c907:	01 dd                	add    ebp,ebx
c001c909:	29 fd                	sub    ebp,edi
c001c90b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c90f:	0f 84 01 01 00 00    	je     c001ca16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c915:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c91b:	76 05                	jbe    c001c922 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c91d:	bd 00 10 00 00       	mov    ebp,0x1000
c001c922:	83 ec 0c             	sub    esp,0xc
c001c925:	31 d2                	xor    edx,edx
c001c927:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c92e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c930:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c934:	50                   	push   eax
c001c935:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c939:	50                   	push   eax
c001c93a:	52                   	push   edx
c001c93b:	55                   	push   ebp
c001c93c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c943:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c946:	83 c4 20             	add    esp,0x20
c001c949:	85 c0                	test   eax,eax
c001c94b:	74 0a                	je     c001c957 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c94d:	53                   	push   ebx
c001c94e:	53                   	push   ebx
c001c94f:	50                   	push   eax
c001c950:	68 eb c0 02 c0       	push   0xc002c0eb
c001c955:	eb 0f                	jmp    c001c966 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c957:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c95b:	74 20                	je     c001c97d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c95d:	51                   	push   ecx
c001c95e:	51                   	push   ecx
c001c95f:	6a 00                	push   0x0
c001c961:	68 16 c1 02 c0       	push   0xc002c116
c001c966:	e8 3a 65 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001c96b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c96e:	e8 5e 56 ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c001c973:	83 c4 10             	add    esp,0x10
c001c976:	31 c0                	xor    eax,eax
c001c978:	e9 55 01 00 00       	jmp    c001cad2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c97d:	e8 d8 14 00 00       	call   c001de5a <lockScheduler()>
c001c982:	e8 66 35 ff ff       	call   c000feed <Phys::allocatePage()>
c001c987:	6a 07                	push   0x7
c001c989:	89 c5                	mov    ebp,eax
c001c98b:	56                   	push   esi
c001c98c:	50                   	push   eax
c001c98d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c992:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c995:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c99b:	e8 98 59 ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9a0:	83 c4 0c             	add    esp,0xc
c001c9a3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9aa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b0:	6a 00                	push   0x0
c001c9b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9ba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c0:	e8 dd 57 ff ff       	call   c00121a2 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9c5:	58                   	pop    eax
c001c9c6:	5a                   	pop    edx
c001c9c7:	68 07 0c 00 00       	push   0xc07
c001c9cc:	57                   	push   edi
c001c9cd:	81 c7 00 10 00 00    	add    edi,0x1000
c001c9d3:	55                   	push   ebp
c001c9d4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9db:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9e1:	6a 00                	push   0x0
c001c9e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9eb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9f1:	e8 fc 5c ff ff       	call   c00126f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9f6:	83 c4 1c             	add    esp,0x1c
c001c9f9:	68 00 10 00 00       	push   0x1000
c001c9fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca02:	50                   	push   eax
c001ca03:	56                   	push   esi
c001ca04:	e8 43 3d fe ff       	call   c000074c <memcpy>
c001ca09:	e8 4e 14 00 00       	call   c001de5c <unlockScheduler()>
c001ca0e:	83 c4 10             	add    esp,0x10
c001ca11:	e9 ea fe ff ff       	jmp    c001c900 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca16:	89 fb                	mov    ebx,edi
c001ca18:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca20:	0f 86 9e 00 00 00    	jbe    c001cac4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca26:	e8 2f 14 00 00       	call   c001de5a <lockScheduler()>
c001ca2b:	51                   	push   ecx
c001ca2c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca33:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca39:	6a 00                	push   0x0
c001ca3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca43:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca49:	e8 54 57 ff ff       	call   c00121a2 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca4e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca52:	c1 e7 0c             	shl    edi,0xc
c001ca55:	01 df                	add    edi,ebx
c001ca57:	83 c4 10             	add    esp,0x10
c001ca5a:	39 fb                	cmp    ebx,edi
c001ca5c:	74 61                	je     c001cabf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca5e:	e8 8a 34 ff ff       	call   c000feed <Phys::allocatePage()>
c001ca63:	6a 07                	push   0x7
c001ca65:	89 c5                	mov    ebp,eax
c001ca67:	56                   	push   esi
c001ca68:	50                   	push   eax
c001ca69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca6e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca71:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca77:	e8 bc 58 ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca7c:	58                   	pop    eax
c001ca7d:	5a                   	pop    edx
c001ca7e:	68 07 0c 00 00       	push   0xc07
c001ca83:	53                   	push   ebx
c001ca84:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca8a:	55                   	push   ebp
c001ca8b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca92:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca98:	6a 00                	push   0x0
c001ca9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca9f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caa2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caa8:	e8 45 5c ff ff       	call   c00126f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001caad:	83 c4 1c             	add    esp,0x1c
c001cab0:	68 00 10 00 00       	push   0x1000
c001cab5:	6a 00                	push   0x0
c001cab7:	56                   	push   esi
c001cab8:	e8 c3 3c fe ff       	call   c0000780 <memset>
c001cabd:	eb 98                	jmp    c001ca57 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cabf:	e8 98 13 00 00       	call   c001de5c <unlockScheduler()>
c001cac4:	83 ec 0c             	sub    esp,0xc
c001cac7:	56                   	push   esi
c001cac8:	e8 04 55 ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c001cacd:	83 c4 10             	add    esp,0x10
c001cad0:	b0 01                	mov    al,0x1
c001cad2:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cad8:	5b                   	pop    ebx
c001cad9:	5e                   	pop    esi
c001cada:	5f                   	pop    edi
c001cadb:	5d                   	pop    ebp
c001cadc:	c3                   	ret    

c001cadd <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cadd:	55                   	push   ebp
c001cade:	57                   	push   edi
c001cadf:	56                   	push   esi
c001cae0:	53                   	push   ebx
c001cae1:	83 ec 48             	sub    esp,0x48
c001cae4:	68 14 01 00 00       	push   0x114
c001cae9:	e8 5d 2d ff ff       	call   c000f84b <malloc>
c001caee:	83 c4 0c             	add    esp,0xc
c001caf1:	89 c6                	mov    esi,eax
c001caf3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001caf7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cafb:	50                   	push   eax
c001cafc:	e8 fd 68 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001cb01:	58                   	pop    eax
c001cb02:	5a                   	pop    edx
c001cb03:	6a 01                	push   0x1
c001cb05:	56                   	push   esi
c001cb06:	e8 57 69 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001cb0b:	83 c4 10             	add    esp,0x10
c001cb0e:	85 c0                	test   eax,eax
c001cb10:	0f 85 47 01 00 00    	jne    c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb16:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb1e:	83 ec 0c             	sub    esp,0xc
c001cb21:	6a 34                	push   0x34
c001cb23:	e8 23 2d ff ff       	call   c000f84b <malloc>
c001cb28:	89 c3                	mov    ebx,eax
c001cb2a:	58                   	pop    eax
c001cb2b:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb2d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb31:	57                   	push   edi
c001cb32:	53                   	push   ebx
c001cb33:	6a 00                	push   0x0
c001cb35:	6a 34                	push   0x34
c001cb37:	56                   	push   esi
c001cb38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb3b:	83 c4 20             	add    esp,0x20
c001cb3e:	85 c0                	test   eax,eax
c001cb40:	0f 85 17 01 00 00    	jne    c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb46:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb4c:	0f 85 0b 01 00 00    	jne    c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb55:	85 c0                	test   eax,eax
c001cb57:	0f 84 00 01 00 00    	je     c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb5d:	31 d2                	xor    edx,edx
c001cb5f:	55                   	push   ebp
c001cb60:	52                   	push   edx
c001cb61:	50                   	push   eax
c001cb62:	56                   	push   esi
c001cb63:	e8 b8 69 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001cb68:	83 c4 10             	add    esp,0x10
c001cb6b:	85 c0                	test   eax,eax
c001cb6d:	0f 85 ea 00 00 00    	jne    c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb73:	83 ec 0c             	sub    esp,0xc
c001cb76:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb79:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb81:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb85:	0f af c2             	imul   eax,edx
c001cb88:	50                   	push   eax
c001cb89:	e8 bd 2c ff ff       	call   c000f84b <malloc>
c001cb8e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb90:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb94:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb9b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb9f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cba3:	0f af c2             	imul   eax,edx
c001cba6:	99                   	cdq    
c001cba7:	52                   	push   edx
c001cba8:	50                   	push   eax
c001cba9:	56                   	push   esi
c001cbaa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbad:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbb0:	83 c4 20             	add    esp,0x20
c001cbb3:	85 c0                	test   eax,eax
c001cbb5:	0f 84 a2 00 00 00    	je     c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbbb:	31 d2                	xor    edx,edx
c001cbbd:	51                   	push   ecx
c001cbbe:	52                   	push   edx
c001cbbf:	50                   	push   eax
c001cbc0:	56                   	push   esi
c001cbc1:	e8 5a 69 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001cbc6:	83 c4 10             	add    esp,0x10
c001cbc9:	85 c0                	test   eax,eax
c001cbcb:	0f 85 8c 00 00 00    	jne    c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbd1:	83 ec 0c             	sub    esp,0xc
c001cbd4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbd8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbdc:	31 ed                	xor    ebp,ebp
c001cbde:	0f af c2             	imul   eax,edx
c001cbe1:	50                   	push   eax
c001cbe2:	e8 64 2c ff ff       	call   c000f84b <malloc>
c001cbe7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbe9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbed:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbf8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbfc:	0f af c2             	imul   eax,edx
c001cbff:	99                   	cdq    
c001cc00:	52                   	push   edx
c001cc01:	50                   	push   eax
c001cc02:	56                   	push   esi
c001cc03:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc06:	83 c4 20             	add    esp,0x20
c001cc09:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc11:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc15:	0f 86 80 00 00 00    	jbe    c001cc9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc1b:	0f b7 fd             	movzx  edi,bp
c001cc1e:	c1 e7 05             	shl    edi,0x5
c001cc21:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc25:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc28:	75 6b                	jne    c001cc95 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc2a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc31:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc38:	52                   	push   edx
c001cc39:	31 d2                	xor    edx,edx
c001cc3b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc3e:	52                   	push   edx
c001cc3f:	50                   	push   eax
c001cc40:	56                   	push   esi
c001cc41:	e8 da 68 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001cc46:	83 c4 10             	add    esp,0x10
c001cc49:	85 c0                	test   eax,eax
c001cc4b:	74 17                	je     c001cc64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc4d:	83 ec 0c             	sub    esp,0xc
c001cc50:	68 42 c1 02 c0       	push   0xc002c142
c001cc55:	e8 4b 62 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001cc5a:	83 c4 10             	add    esp,0x10
c001cc5d:	31 c0                	xor    eax,eax
c001cc5f:	e9 87 00 00 00       	jmp    c001cceb <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc64:	83 ec 0c             	sub    esp,0xc
c001cc67:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc6a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc6d:	50                   	push   eax
c001cc6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc76:	56                   	push   esi
c001cc77:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc7b:	e8 cb fb ff ff       	call   c001c84b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc84:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc88:	83 c4 20             	add    esp,0x20
c001cc8b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc8f:	73 04                	jae    c001cc95 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc95:	45                   	inc    ebp
c001cc96:	e9 76 ff ff ff       	jmp    c001cc11 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc9b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc9f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cca3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cca7:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ccad:	83 ec 0c             	sub    esp,0xc
c001ccb0:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ccb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ccbb:	05 00 10 00 00       	add    eax,0x1000
c001ccc0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ccc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc7:	e8 8f 2b ff ff       	call   c000f85b <free>
c001cccc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cccf:	e8 87 2b ff ff       	call   c000f85b <free>
c001ccd4:	58                   	pop    eax
c001ccd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccd9:	e8 7d 2b ff ff       	call   c000f85b <free>
c001ccde:	89 34 24             	mov    DWORD PTR [esp],esi
c001cce1:	e8 da 67 ff ff       	call   c00134c0 <File::close()>
c001cce6:	83 c4 10             	add    esp,0x10
c001cce9:	b0 01                	mov    al,0x1
c001cceb:	83 c4 3c             	add    esp,0x3c
c001ccee:	5b                   	pop    ebx
c001ccef:	5e                   	pop    esi
c001ccf0:	5f                   	pop    edi
c001ccf1:	5d                   	pop    ebp
c001ccf2:	c3                   	ret    

c001ccf3 <Thr::runtimeReferenceHelper()>:
c001ccf3:	83 ec 18             	sub    esp,0x18
c001ccf6:	68 4a c1 02 c0       	push   0xc002c14a
c001ccfb:	e8 a5 61 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001cd00:	fa                   	cli    
c001cd01:	83 c4 10             	add    esp,0x10
c001cd04:	eb fe                	jmp    c001cd04 <Thr::runtimeReferenceHelper()+0x11>

c001cd06 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd06:	57                   	push   edi
c001cd07:	56                   	push   esi
c001cd08:	53                   	push   ebx
c001cd09:	31 db                	xor    ebx,ebx
c001cd0b:	39 1d 80 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a80,ebx
c001cd11:	7e 3c                	jle    c001cd4f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd13:	8b 34 9d 00 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce600]
c001cd1a:	31 ff                	xor    edi,edi
c001cd1c:	39 3c 9d 00 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce700],edi
c001cd23:	7e 27                	jle    c001cd4c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd25:	50                   	push   eax
c001cd26:	50                   	push   eax
c001cd27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd2b:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd2d:	03 04 9d 80 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce680]
c001cd34:	50                   	push   eax
c001cd35:	e8 8e 3b fe ff       	call   c00008c8 <strcmp>
c001cd3a:	83 c4 10             	add    esp,0x10
c001cd3d:	85 c0                	test   eax,eax
c001cd3f:	75 05                	jne    c001cd46 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd41:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd44:	eb 0b                	jmp    c001cd51 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd46:	83 c6 10             	add    esi,0x10
c001cd49:	47                   	inc    edi
c001cd4a:	eb d0                	jmp    c001cd1c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd4c:	43                   	inc    ebx
c001cd4d:	eb bc                	jmp    c001cd0b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd4f:	31 c0                	xor    eax,eax
c001cd51:	5b                   	pop    ebx
c001cd52:	5e                   	pop    esi
c001cd53:	5f                   	pop    edi
c001cd54:	c3                   	ret    

c001cd55 <Thr::loadKernelSymbolTable(char const*)>:
c001cd55:	55                   	push   ebp
c001cd56:	57                   	push   edi
c001cd57:	56                   	push   esi
c001cd58:	53                   	push   ebx
c001cd59:	83 ec 68             	sub    esp,0x68
c001cd5c:	8b 35 d4 1a 03 c0    	mov    esi,DWORD PTR ds:0xc0031ad4
c001cd62:	68 14 01 00 00       	push   0x114
c001cd67:	e8 df 2a ff ff       	call   c000f84b <malloc>
c001cd6c:	83 c4 0c             	add    esp,0xc
c001cd6f:	89 c3                	mov    ebx,eax
c001cd71:	56                   	push   esi
c001cd72:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd76:	50                   	push   eax
c001cd77:	e8 82 66 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001cd7c:	5e                   	pop    esi
c001cd7d:	5f                   	pop    edi
c001cd7e:	6a 01                	push   0x1
c001cd80:	53                   	push   ebx
c001cd81:	e8 dc 66 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001cd86:	83 c4 10             	add    esp,0x10
c001cd89:	85 c0                	test   eax,eax
c001cd8b:	74 0a                	je     c001cd97 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd8d:	83 ec 0c             	sub    esp,0xc
c001cd90:	68 6c c1 02 c0       	push   0xc002c16c
c001cd95:	eb 34                	jmp    c001cdcb <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd97:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd9f:	83 ec 0c             	sub    esp,0xc
c001cda2:	6a 34                	push   0x34
c001cda4:	e8 a2 2a ff ff       	call   c000f84b <malloc>
c001cda9:	59                   	pop    ecx
c001cdaa:	89 c7                	mov    edi,eax
c001cdac:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdb2:	56                   	push   esi
c001cdb3:	57                   	push   edi
c001cdb4:	6a 00                	push   0x0
c001cdb6:	6a 34                	push   0x34
c001cdb8:	53                   	push   ebx
c001cdb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdbc:	83 c4 20             	add    esp,0x20
c001cdbf:	85 c0                	test   eax,eax
c001cdc1:	74 17                	je     c001cdda <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cdc3:	83 ec 0c             	sub    esp,0xc
c001cdc6:	68 83 c1 02 c0       	push   0xc002c183
c001cdcb:	e8 af d8 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001cdd0:	83 c4 10             	add    esp,0x10
c001cdd3:	31 c0                	xor    eax,eax
c001cdd5:	e9 31 02 00 00       	jmp    c001d00b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cdda:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cde0:	75 e1                	jne    c001cdc3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cde2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cde5:	85 c0                	test   eax,eax
c001cde7:	74 da                	je     c001cdc3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cde9:	52                   	push   edx
c001cdea:	31 d2                	xor    edx,edx
c001cdec:	52                   	push   edx
c001cded:	50                   	push   eax
c001cdee:	53                   	push   ebx
c001cdef:	e8 2c 67 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001cdf4:	83 c4 10             	add    esp,0x10
c001cdf7:	85 c0                	test   eax,eax
c001cdf9:	75 c8                	jne    c001cdc3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdfb:	83 ec 0c             	sub    esp,0xc
c001cdfe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce02:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce06:	31 ed                	xor    ebp,ebp
c001ce08:	0f af c2             	imul   eax,edx
c001ce0b:	50                   	push   eax
c001ce0c:	e8 3a 2a ff ff       	call   c000f84b <malloc>
c001ce11:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce17:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce1e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce22:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce26:	0f af c2             	imul   eax,edx
c001ce29:	99                   	cdq    
c001ce2a:	52                   	push   edx
c001ce2b:	50                   	push   eax
c001ce2c:	53                   	push   ebx
c001ce2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce30:	83 c4 20             	add    esp,0x20
c001ce33:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce3b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce43:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce53:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce57:	0f 86 aa 00 00 00    	jbe    c001cf07 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce5d:	0f b7 f5             	movzx  esi,bp
c001ce60:	6b f6 28             	imul   esi,esi,0x28
c001ce63:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce67:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce6e:	50                   	push   eax
c001ce6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce73:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce77:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce79:	6b c0 28             	imul   eax,eax,0x28
c001ce7c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce80:	89 d0                	mov    eax,edx
c001ce82:	31 d2                	xor    edx,edx
c001ce84:	52                   	push   edx
c001ce85:	50                   	push   eax
c001ce86:	53                   	push   ebx
c001ce87:	e8 94 66 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001ce8c:	83 c4 0c             	add    esp,0xc
c001ce8f:	6a 20                	push   0x20
c001ce91:	6a 00                	push   0x0
c001ce93:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce97:	52                   	push   edx
c001ce98:	e8 e3 38 fe ff       	call   c0000780 <memset>
c001ce9d:	58                   	pop    eax
c001ce9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cea0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cea4:	51                   	push   ecx
c001cea5:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cea9:	52                   	push   edx
c001ceaa:	6a 00                	push   0x0
c001ceac:	6a 1f                	push   0x1f
c001ceae:	53                   	push   ebx
c001ceaf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ceb2:	83 c4 18             	add    esp,0x18
c001ceb5:	68 9a c1 02 c0       	push   0xc002c19a
c001ceba:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cebe:	52                   	push   edx
c001cebf:	e8 04 3a fe ff       	call   c00008c8 <strcmp>
c001cec4:	83 c4 10             	add    esp,0x10
c001cec7:	85 c0                	test   eax,eax
c001cec9:	75 0f                	jne    c001ceda <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cecb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cece:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ced2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ced6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ceda:	50                   	push   eax
c001cedb:	50                   	push   eax
c001cedc:	68 a2 c1 02 c0       	push   0xc002c1a2
c001cee1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cee5:	50                   	push   eax
c001cee6:	e8 dd 39 fe ff       	call   c00008c8 <strcmp>
c001ceeb:	83 c4 10             	add    esp,0x10
c001ceee:	85 c0                	test   eax,eax
c001cef0:	75 0f                	jne    c001cf01 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cef2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cef5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cef9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cefd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf01:	45                   	inc    ebp
c001cf02:	e9 4c ff ff ff       	jmp    c001ce53 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf07:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf0c:	75 10                	jne    c001cf1e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf0e:	83 ec 0c             	sub    esp,0xc
c001cf11:	68 aa c1 02 c0       	push   0xc002c1aa
c001cf16:	e8 64 d7 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001cf1b:	83 c4 10             	add    esp,0x10
c001cf1e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf23:	75 10                	jne    c001cf35 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf25:	83 ec 0c             	sub    esp,0xc
c001cf28:	68 aa c1 02 c0       	push   0xc002c1aa
c001cf2d:	e8 4d d7 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001cf32:	83 c4 10             	add    esp,0x10
c001cf35:	31 d2                	xor    edx,edx
c001cf37:	50                   	push   eax
c001cf38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf3c:	52                   	push   edx
c001cf3d:	50                   	push   eax
c001cf3e:	53                   	push   ebx
c001cf3f:	e8 dc 65 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001cf44:	5a                   	pop    edx
c001cf45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf49:	e8 fd 28 ff ff       	call   c000f84b <malloc>
c001cf4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf56:	31 c9                	xor    ecx,ecx
c001cf58:	5e                   	pop    esi
c001cf59:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf5b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf5f:	55                   	push   ebp
c001cf60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf64:	51                   	push   ecx
c001cf65:	52                   	push   edx
c001cf66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf6a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf6e:	53                   	push   ebx
c001cf6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf72:	83 c4 14             	add    esp,0x14
c001cf75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf79:	e8 cd 28 ff ff       	call   c000f84b <malloc>
c001cf7e:	89 c6                	mov    esi,eax
c001cf80:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf82:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf85:	56                   	push   esi
c001cf86:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf8a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf8e:	51                   	push   ecx
c001cf8f:	52                   	push   edx
c001cf90:	53                   	push   ebx
c001cf91:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf98:	8b 15 80 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a80
c001cf9e:	83 c4 1c             	add    esp,0x1c
c001cfa1:	c1 e8 04             	shr    eax,0x4
c001cfa4:	89 04 95 00 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce700],eax
c001cfab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfaf:	31 d2                	xor    edx,edx
c001cfb1:	52                   	push   edx
c001cfb2:	50                   	push   eax
c001cfb3:	53                   	push   ebx
c001cfb4:	e8 67 65 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001cfb9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cfbb:	31 d2                	xor    edx,edx
c001cfbd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfc0:	56                   	push   esi
c001cfc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfc5:	52                   	push   edx
c001cfc6:	50                   	push   eax
c001cfc7:	53                   	push   ebx
c001cfc8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfcb:	83 c4 14             	add    esp,0x14
c001cfce:	53                   	push   ebx
c001cfcf:	e8 ec 64 ff ff       	call   c00134c0 <File::close()>
c001cfd4:	5d                   	pop    ebp
c001cfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfd9:	e8 7d 28 ff ff       	call   c000f85b <free>
c001cfde:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfe1:	e8 75 28 ff ff       	call   c000f85b <free>
c001cfe6:	a1 80 1a 03 c0       	mov    eax,ds:0xc0031a80
c001cfeb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfef:	8d 50 01             	lea    edx,[eax+0x1]
c001cff2:	89 0c 85 00 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce600],ecx
c001cff9:	89 34 85 80 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce680],esi
c001d000:	89 15 80 1a 03 c0    	mov    DWORD PTR ds:0xc0031a80,edx
c001d006:	83 c4 10             	add    esp,0x10
c001d009:	b0 01                	mov    al,0x1
c001d00b:	83 c4 5c             	add    esp,0x5c
c001d00e:	5b                   	pop    ebx
c001d00f:	5e                   	pop    esi
c001d010:	5f                   	pop    edi
c001d011:	5d                   	pop    ebp
c001d012:	c3                   	ret    

c001d013 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d013:	55                   	push   ebp
c001d014:	57                   	push   edi
c001d015:	56                   	push   esi
c001d016:	53                   	push   ebx
c001d017:	81 ec 68 03 00 00    	sub    esp,0x368
c001d01d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d024:	8b 1d d4 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ad4
c001d02a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d02e:	68 14 01 00 00       	push   0x114
c001d033:	e8 13 28 ff ff       	call   c000f84b <malloc>
c001d038:	83 c4 0c             	add    esp,0xc
c001d03b:	89 c5                	mov    ebp,eax
c001d03d:	53                   	push   ebx
c001d03e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d045:	50                   	push   eax
c001d046:	e8 b3 63 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001d04b:	5e                   	pop    esi
c001d04c:	5f                   	pop    edi
c001d04d:	6a 01                	push   0x1
c001d04f:	55                   	push   ebp
c001d050:	e8 0d 64 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001d055:	83 c4 10             	add    esp,0x10
c001d058:	85 c0                	test   eax,eax
c001d05a:	0f 85 8d 06 00 00    	jne    c001d6ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d060:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d068:	83 ec 0c             	sub    esp,0xc
c001d06b:	6a 34                	push   0x34
c001d06d:	e8 d9 27 ff ff       	call   c000f84b <malloc>
c001d072:	5b                   	pop    ebx
c001d073:	89 c7                	mov    edi,eax
c001d075:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d079:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d07c:	53                   	push   ebx
c001d07d:	57                   	push   edi
c001d07e:	6a 00                	push   0x0
c001d080:	6a 34                	push   0x34
c001d082:	55                   	push   ebp
c001d083:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d086:	83 c4 20             	add    esp,0x20
c001d089:	85 c0                	test   eax,eax
c001d08b:	0f 85 5c 06 00 00    	jne    c001d6ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d091:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d097:	0f 85 50 06 00 00    	jne    c001d6ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d09d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0a0:	85 c0                	test   eax,eax
c001d0a2:	0f 84 45 06 00 00    	je     c001d6ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a8:	31 d2                	xor    edx,edx
c001d0aa:	51                   	push   ecx
c001d0ab:	52                   	push   edx
c001d0ac:	50                   	push   eax
c001d0ad:	55                   	push   ebp
c001d0ae:	e8 6d 64 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d0b3:	83 c4 10             	add    esp,0x10
c001d0b6:	85 c0                	test   eax,eax
c001d0b8:	0f 85 2f 06 00 00    	jne    c001d6ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0be:	83 ec 0c             	sub    esp,0xc
c001d0c1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0c4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0c8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0cc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0d0:	0f af c2             	imul   eax,edx
c001d0d3:	50                   	push   eax
c001d0d4:	e8 72 27 ff ff       	call   c000f84b <malloc>
c001d0d9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0e7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0eb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0ef:	0f af c2             	imul   eax,edx
c001d0f2:	99                   	cdq    
c001d0f3:	52                   	push   edx
c001d0f4:	50                   	push   eax
c001d0f5:	55                   	push   ebp
c001d0f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0f9:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0fc:	83 c4 20             	add    esp,0x20
c001d0ff:	85 c0                	test   eax,eax
c001d101:	0f 84 e6 05 00 00    	je     c001d6ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d107:	52                   	push   edx
c001d108:	31 d2                	xor    edx,edx
c001d10a:	52                   	push   edx
c001d10b:	50                   	push   eax
c001d10c:	55                   	push   ebp
c001d10d:	e8 0e 64 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d112:	83 c4 10             	add    esp,0x10
c001d115:	85 c0                	test   eax,eax
c001d117:	0f 85 d0 05 00 00    	jne    c001d6ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d11d:	83 ec 0c             	sub    esp,0xc
c001d120:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d124:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d128:	31 f6                	xor    esi,esi
c001d12a:	0f af c2             	imul   eax,edx
c001d12d:	50                   	push   eax
c001d12e:	e8 18 27 ff ff       	call   c000f84b <malloc>
c001d133:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d136:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d13a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d13d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d141:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d145:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d149:	0f af c2             	imul   eax,edx
c001d14c:	99                   	cdq    
c001d14d:	52                   	push   edx
c001d14e:	50                   	push   eax
c001d14f:	55                   	push   ebp
c001d150:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d153:	83 c4 20             	add    esp,0x20
c001d156:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d15a:	0f 86 8a 00 00 00    	jbe    c001d1ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d160:	0f b7 de             	movzx  ebx,si
c001d163:	c1 e3 05             	shl    ebx,0x5
c001d166:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d16a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d16d:	75 75                	jne    c001d1e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d16f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d172:	31 d2                	xor    edx,edx
c001d174:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d178:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d17b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d17f:	50                   	push   eax
c001d180:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d183:	52                   	push   edx
c001d184:	50                   	push   eax
c001d185:	55                   	push   ebp
c001d186:	e8 95 63 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d18b:	83 c4 10             	add    esp,0x10
c001d18e:	85 c0                	test   eax,eax
c001d190:	0f 85 57 05 00 00    	jne    c001d6ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d196:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d19d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1a0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d1a4:	31 d2                	xor    edx,edx
c001d1a6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1aa:	83 ec 0c             	sub    esp,0xc
c001d1ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1b8:	50                   	push   eax
c001d1b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c1:	52                   	push   edx
c001d1c2:	50                   	push   eax
c001d1c3:	55                   	push   ebp
c001d1c4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1c7:	83 c4 1c             	add    esp,0x1c
c001d1ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1cd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1d0:	50                   	push   eax
c001d1d1:	6a 00                	push   0x0
c001d1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1db:	50                   	push   eax
c001d1dc:	e8 9f 35 fe ff       	call   c0000780 <memset>
c001d1e1:	83 c4 10             	add    esp,0x10
c001d1e4:	46                   	inc    esi
c001d1e5:	e9 6c ff ff ff       	jmp    c001d156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1ea:	53                   	push   ebx
c001d1eb:	31 db                	xor    ebx,ebx
c001d1ed:	68 00 01 00 00       	push   0x100
c001d1f2:	6a 00                	push   0x0
c001d1f4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1f8:	50                   	push   eax
c001d1f9:	e8 82 35 fe ff       	call   c0000780 <memset>
c001d1fe:	83 c4 0c             	add    esp,0xc
c001d201:	68 00 01 00 00       	push   0x100
c001d206:	6a 00                	push   0x0
c001d208:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d20f:	50                   	push   eax
c001d210:	e8 6b 35 fe ff       	call   c0000780 <memset>
c001d215:	83 c4 10             	add    esp,0x10
c001d218:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d220:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d228:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d230:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d238:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d240:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d244:	0f 86 30 01 00 00    	jbe    c001d37a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d24a:	0f b7 f3             	movzx  esi,bx
c001d24d:	6b f6 28             	imul   esi,esi,0x28
c001d250:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d254:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d257:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d25b:	52                   	push   edx
c001d25c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d260:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d264:	8b 06                	mov    eax,DWORD PTR [esi]
c001d266:	6b d2 28             	imul   edx,edx,0x28
c001d269:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d26d:	31 d2                	xor    edx,edx
c001d26f:	52                   	push   edx
c001d270:	50                   	push   eax
c001d271:	55                   	push   ebp
c001d272:	e8 a9 62 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d277:	83 c4 0c             	add    esp,0xc
c001d27a:	6a 20                	push   0x20
c001d27c:	6a 00                	push   0x0
c001d27e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d285:	51                   	push   ecx
c001d286:	e8 f5 34 fe ff       	call   c0000780 <memset>
c001d28b:	59                   	pop    ecx
c001d28c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d28f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d293:	52                   	push   edx
c001d294:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d29b:	51                   	push   ecx
c001d29c:	6a 00                	push   0x0
c001d29e:	6a 1f                	push   0x1f
c001d2a0:	55                   	push   ebp
c001d2a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2a4:	83 c4 1c             	add    esp,0x1c
c001d2a7:	6a 09                	push   0x9
c001d2a9:	68 c4 c1 02 c0       	push   0xc002c1c4
c001d2ae:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2b5:	51                   	push   ecx
c001d2b6:	e8 8d 33 fe ff       	call   c0000648 <memcmp>
c001d2bb:	83 c4 10             	add    esp,0x10
c001d2be:	85 c0                	test   eax,eax
c001d2c0:	75 21                	jne    c001d2e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2ca:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2d2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2d5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2dc:	89 d0                	mov    eax,edx
c001d2de:	40                   	inc    eax
c001d2df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2e3:	50                   	push   eax
c001d2e4:	6a 09                	push   0x9
c001d2e6:	68 ce c1 02 c0       	push   0xc002c1ce
c001d2eb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f2:	50                   	push   eax
c001d2f3:	e8 50 33 fe ff       	call   c0000648 <memcmp>
c001d2f8:	83 c4 10             	add    esp,0x10
c001d2fb:	85 c0                	test   eax,eax
c001d2fd:	75 21                	jne    c001d320 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d303:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d307:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d30b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d30f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d312:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d319:	89 d0                	mov    eax,edx
c001d31b:	40                   	inc    eax
c001d31c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d320:	50                   	push   eax
c001d321:	50                   	push   eax
c001d322:	68 9a c1 02 c0       	push   0xc002c19a
c001d327:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d32e:	50                   	push   eax
c001d32f:	e8 94 35 fe ff       	call   c00008c8 <strcmp>
c001d334:	83 c4 10             	add    esp,0x10
c001d337:	85 c0                	test   eax,eax
c001d339:	75 0f                	jne    c001d34a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d33b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d33e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d342:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d346:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d34a:	50                   	push   eax
c001d34b:	50                   	push   eax
c001d34c:	68 a2 c1 02 c0       	push   0xc002c1a2
c001d351:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d358:	50                   	push   eax
c001d359:	e8 6a 35 fe ff       	call   c00008c8 <strcmp>
c001d35e:	83 c4 10             	add    esp,0x10
c001d361:	85 c0                	test   eax,eax
c001d363:	75 0f                	jne    c001d374 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d365:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d368:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d370:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d374:	43                   	inc    ebx
c001d375:	e9 c6 fe ff ff       	jmp    c001d240 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d37a:	31 d2                	xor    edx,edx
c001d37c:	50                   	push   eax
c001d37d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d381:	52                   	push   edx
c001d382:	50                   	push   eax
c001d383:	55                   	push   ebp
c001d384:	e8 97 61 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d389:	58                   	pop    eax
c001d38a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d38e:	e8 b8 24 ff ff       	call   c000f84b <malloc>
c001d393:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d396:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d39a:	31 d2                	xor    edx,edx
c001d39c:	58                   	pop    eax
c001d39d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3a1:	53                   	push   ebx
c001d3a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3aa:	52                   	push   edx
c001d3ab:	50                   	push   eax
c001d3ac:	55                   	push   ebp
c001d3ad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3b0:	83 c4 14             	add    esp,0x14
c001d3b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3b7:	e8 8f 24 ff ff       	call   c000f84b <malloc>
c001d3bc:	31 d2                	xor    edx,edx
c001d3be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3c2:	83 c4 0c             	add    esp,0xc
c001d3c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3c9:	52                   	push   edx
c001d3ca:	50                   	push   eax
c001d3cb:	55                   	push   ebp
c001d3cc:	e8 4f 61 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d3d1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3d4:	31 d2                	xor    edx,edx
c001d3d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3e1:	52                   	push   edx
c001d3e2:	50                   	push   eax
c001d3e3:	55                   	push   ebp
c001d3e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3e7:	83 c4 20             	add    esp,0x20
c001d3ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3f6:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3fa:	0f 84 f1 02 00 00    	je     c001d6f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d400:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d407:	31 d2                	xor    edx,edx
c001d409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d40d:	c1 e8 03             	shr    eax,0x3
c001d410:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d414:	51                   	push   ecx
c001d415:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d419:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d41d:	52                   	push   edx
c001d41e:	50                   	push   eax
c001d41f:	55                   	push   ebp
c001d420:	e8 fb 60 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d425:	5b                   	pop    ebx
c001d426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d42a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d431:	e8 15 24 ff ff       	call   c000f84b <malloc>
c001d436:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d439:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d43d:	31 d2                	xor    edx,edx
c001d43f:	5e                   	pop    esi
c001d440:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d444:	50                   	push   eax
c001d445:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d449:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d44d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d454:	52                   	push   edx
c001d455:	50                   	push   eax
c001d456:	55                   	push   ebp
c001d457:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d45a:	83 c4 20             	add    esp,0x20
c001d45d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d465:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d469:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d46d:	0f 8d 62 02 00 00    	jge    c001d6d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d473:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d47b:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d480:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d483:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d48b:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d48f:	89 d8                	mov    eax,ebx
c001d491:	c1 e8 08             	shr    eax,0x8
c001d494:	89 c6                	mov    esi,eax
c001d496:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d49a:	c1 e6 04             	shl    esi,0x4
c001d49d:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d4a1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d4a4:	85 d2                	test   edx,edx
c001d4a6:	0f 85 bf 00 00 00    	jne    c001d56b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4ac:	83 ec 0c             	sub    esp,0xc
c001d4af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4b3:	03 06                	add    eax,DWORD PTR [esi]
c001d4b5:	50                   	push   eax
c001d4b6:	e8 4b f8 ff ff       	call   c001cd06 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	89 c2                	mov    edx,eax
c001d4c0:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4c5:	85 c0                	test   eax,eax
c001d4c7:	0f 85 9e 00 00 00    	jne    c001d56b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4cd:	83 ec 0c             	sub    esp,0xc
c001d4d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4d4:	03 06                	add    eax,DWORD PTR [esi]
c001d4d6:	50                   	push   eax
c001d4d7:	e8 21 10 ff ff       	call   c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>
c001d4dc:	83 c4 10             	add    esp,0x10
c001d4df:	89 c2                	mov    edx,eax
c001d4e1:	85 c0                	test   eax,eax
c001d4e3:	0f 85 82 00 00 00    	jne    c001d56b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4e9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4ed:	50                   	push   eax
c001d4ee:	50                   	push   eax
c001d4ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4f3:	03 06                	add    eax,DWORD PTR [esi]
c001d4f5:	50                   	push   eax
c001d4f6:	68 d8 c1 02 c0       	push   0xc002c1d8
c001d4fb:	e8 a5 59 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001d500:	58                   	pop    eax
c001d501:	5a                   	pop    edx
c001d502:	68 f2 c1 02 c0       	push   0xc002c1f2
c001d507:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d50e:	50                   	push   eax
c001d50f:	e8 28 33 fe ff       	call   c000083c <strcpy>
c001d514:	59                   	pop    ecx
c001d515:	58                   	pop    eax
c001d516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d51a:	03 06                	add    eax,DWORD PTR [esi]
c001d51c:	50                   	push   eax
c001d51d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d524:	50                   	push   eax
c001d525:	e8 52 34 fe ff       	call   c000097c <strcat>
c001d52a:	58                   	pop    eax
c001d52b:	5a                   	pop    edx
c001d52c:	68 88 c2 02 c0       	push   0xc002c288
c001d531:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d538:	50                   	push   eax
c001d539:	e8 3e 34 fe ff       	call   c000097c <strcat>
c001d53e:	83 c4 10             	add    esp,0x10
c001d541:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d546:	0f 84 43 01 00 00    	je     c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d54c:	83 ec 0c             	sub    esp,0xc
c001d54f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d556:	50                   	push   eax
c001d557:	e8 23 d1 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d563:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d567:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d56b:	80 fb 01             	cmp    bl,0x1
c001d56e:	75 7d                	jne    c001d5ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d570:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d577:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d57b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d57f:	01 ce                	add    esi,ecx
c001d581:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d587:	0f 94 c0             	sete   al
c001d58a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d590:	0f 94 c3             	sete   bl
c001d593:	09 c3                	or     ebx,eax
c001d595:	8b 06                	mov    eax,DWORD PTR [esi]
c001d597:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d59c:	74 36                	je     c001d5d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d59e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d5a1:	84 db                	test   bl,bl
c001d5a3:	75 0a                	jne    c001d5af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d5a5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5a9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5ad:	76 37                	jbe    c001d5e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5af:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5b3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5b8:	0f 84 d1 00 00 00    	je     c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5be:	83 ec 0c             	sub    esp,0xc
c001d5c1:	68 09 c2 02 c0       	push   0xc002c209
c001d5c6:	e8 b4 d0 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001d5cb:	83 c4 10             	add    esp,0x10
c001d5ce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5d2:	eb 12                	jmp    c001d5e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5d4:	01 c1                	add    ecx,eax
c001d5d6:	84 db                	test   bl,bl
c001d5d8:	75 0c                	jne    c001d5e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5da:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5de:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5e2:	77 02                	ja     c001d5e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5e4:	01 d1                	add    ecx,edx
c001d5e6:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5e8:	e9 df 00 00 00       	jmp    c001d6cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5ed:	80 fb 02             	cmp    bl,0x2
c001d5f0:	75 71                	jne    c001d663 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5f2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5f9:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5fd:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d601:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d607:	74 15                	je     c001d61e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d609:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d60f:	74 0d                	je     c001d61e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d611:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d615:	83 e8 04             	sub    eax,0x4
c001d618:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d61c:	76 1f                	jbe    c001d63d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d61e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d622:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d627:	74 66                	je     c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d629:	83 ec 0c             	sub    esp,0xc
c001d62c:	68 25 c2 02 c0       	push   0xc002c225
c001d631:	e8 49 d0 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001d636:	83 c4 10             	add    esp,0x10
c001d639:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d63d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d63f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d644:	74 13                	je     c001d659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d646:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d64a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d651:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d655:	01 c8                	add    eax,ecx
c001d657:	eb 04                	jmp    c001d65d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d659:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d65d:	01 c2                	add    edx,eax
c001d65f:	89 16                	mov    DWORD PTR [esi],edx
c001d661:	eb 69                	jmp    c001d6cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d663:	0f b6 db             	movzx  ebx,bl
c001d666:	50                   	push   eax
c001d667:	50                   	push   eax
c001d668:	53                   	push   ebx
c001d669:	68 41 c2 02 c0       	push   0xc002c241
c001d66e:	e8 32 58 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001d673:	83 c4 10             	add    esp,0x10
c001d676:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d67b:	74 12                	je     c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d67d:	83 ec 0c             	sub    esp,0xc
c001d680:	68 4c c2 02 c0       	push   0xc002c24c
c001d685:	e8 f5 cf ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001d68a:	83 c4 10             	add    esp,0x10
c001d68d:	eb 3d                	jmp    c001d6cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d68f:	83 ec 0c             	sub    esp,0xc
c001d692:	55                   	push   ebp
c001d693:	e8 28 5e ff ff       	call   c00134c0 <File::close()>
c001d698:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d69b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d69e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6a1:	59                   	pop    ecx
c001d6a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6a6:	e8 b0 21 ff ff       	call   c000f85b <free>
c001d6ab:	5b                   	pop    ebx
c001d6ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6b0:	e8 a6 21 ff ff       	call   c000f85b <free>
c001d6b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6b8:	e8 9e 21 ff ff       	call   c000f85b <free>
c001d6bd:	5e                   	pop    esi
c001d6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6c2:	e8 94 21 ff ff       	call   c000f85b <free>
c001d6c7:	83 c4 10             	add    esp,0x10
c001d6ca:	eb 21                	jmp    c001d6ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d6cc:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6d0:	e9 90 fd ff ff       	jmp    c001d465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6d5:	83 ec 0c             	sub    esp,0xc
c001d6d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6dc:	e8 7a 21 ff ff       	call   c000f85b <free>
c001d6e1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6e5:	83 c4 10             	add    esp,0x10
c001d6e8:	e9 05 fd ff ff       	jmp    c001d3f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6ed:	31 c0                	xor    eax,eax
c001d6ef:	eb 33                	jmp    c001d724 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d6f1:	83 ec 0c             	sub    esp,0xc
c001d6f4:	55                   	push   ebp
c001d6f5:	e8 c6 5d ff ff       	call   c00134c0 <File::close()>
c001d6fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d700:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d703:	58                   	pop    eax
c001d704:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d708:	e8 4e 21 ff ff       	call   c000f85b <free>
c001d70d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d710:	e8 46 21 ff ff       	call   c000f85b <free>
c001d715:	5a                   	pop    edx
c001d716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d71a:	e8 3c 21 ff ff       	call   c000f85b <free>
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	b0 01                	mov    al,0x1
c001d724:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d72a:	5b                   	pop    ebx
c001d72b:	5e                   	pop    esi
c001d72c:	5f                   	pop    edi
c001d72d:	5d                   	pop    ebp
c001d72e:	c3                   	ret    

c001d72f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d72f:	56                   	push   esi
c001d730:	31 d2                	xor    edx,edx
c001d732:	53                   	push   ebx
c001d733:	8b 1d e0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312e0
c001d739:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d73d:	39 d3                	cmp    ebx,edx
c001d73f:	7e 1b                	jle    c001d75c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d741:	8b 04 95 00 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceb00]
c001d748:	39 c8                	cmp    eax,ecx
c001d74a:	77 0d                	ja     c001d759 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d74c:	8b 34 95 00 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffced00]
c001d753:	01 c6                	add    esi,eax
c001d755:	39 ce                	cmp    esi,ecx
c001d757:	77 05                	ja     c001d75e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d759:	42                   	inc    edx
c001d75a:	eb e1                	jmp    c001d73d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d75c:	31 c0                	xor    eax,eax
c001d75e:	5b                   	pop    ebx
c001d75f:	5e                   	pop    esi
c001d760:	c3                   	ret    

c001d761 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d761:	53                   	push   ebx
c001d762:	31 c0                	xor    eax,eax
c001d764:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d768:	8b 1d e0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312e0
c001d76e:	39 c3                	cmp    ebx,eax
c001d770:	7e 22                	jle    c001d794 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d772:	8b 14 85 00 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceb00]
c001d779:	39 ca                	cmp    edx,ecx
c001d77b:	77 14                	ja     c001d791 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d77d:	03 14 85 00 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffced00]
c001d784:	39 ca                	cmp    edx,ecx
c001d786:	76 09                	jbe    c001d791 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d788:	8b 04 85 00 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce900]
c001d78f:	eb 05                	jmp    c001d796 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d791:	40                   	inc    eax
c001d792:	eb da                	jmp    c001d76e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d794:	31 c0                	xor    eax,eax
c001d796:	5b                   	pop    ebx
c001d797:	c3                   	ret    

c001d798 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d798:	53                   	push   ebx
c001d799:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d79d:	53                   	push   ebx
c001d79e:	e8 8c ff ff ff       	call   c001d72f <Thr::getDriverBaseFromAddress(unsigned long)>
c001d7a3:	5a                   	pop    edx
c001d7a4:	31 d2                	xor    edx,edx
c001d7a6:	85 c0                	test   eax,eax
c001d7a8:	74 04                	je     c001d7ae <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7aa:	89 da                	mov    edx,ebx
c001d7ac:	29 c2                	sub    edx,eax
c001d7ae:	89 d0                	mov    eax,edx
c001d7b0:	5b                   	pop    ebx
c001d7b1:	c3                   	ret    

c001d7b2 <Thr::loadDLL(char const*, bool)>:
c001d7b2:	55                   	push   ebp
c001d7b3:	57                   	push   edi
c001d7b4:	56                   	push   esi
c001d7b5:	53                   	push   ebx
c001d7b6:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7bc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7c3:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d7ca:	56                   	push   esi
c001d7cb:	68 64 c2 02 c0       	push   0xc002c264
c001d7d0:	e8 d0 56 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001d7d5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7dc:	e8 6a 20 ff ff       	call   c000f84b <malloc>
c001d7e1:	83 c4 0c             	add    esp,0xc
c001d7e4:	89 c3                	mov    ebx,eax
c001d7e6:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c001d7ec:	56                   	push   esi
c001d7ed:	50                   	push   eax
c001d7ee:	e8 0b 5c ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001d7f3:	83 c4 10             	add    esp,0x10
c001d7f6:	85 db                	test   ebx,ebx
c001d7f8:	75 3c                	jne    c001d836 <Thr::loadDLL(char const*, bool)+0x84>
c001d7fa:	89 e8                	mov    eax,ebp
c001d7fc:	84 c0                	test   al,al
c001d7fe:	0f 84 d5 01 00 00    	je     c001d9d9 <Thr::loadDLL(char const*, bool)+0x227>
c001d804:	57                   	push   edi
c001d805:	57                   	push   edi
c001d806:	68 75 c2 02 c0       	push   0xc002c275
c001d80b:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d80f:	57                   	push   edi
c001d810:	e8 27 30 fe ff       	call   c000083c <strcpy>
c001d815:	58                   	pop    eax
c001d816:	5a                   	pop    edx
c001d817:	56                   	push   esi
c001d818:	57                   	push   edi
c001d819:	e8 5e 31 fe ff       	call   c000097c <strcat>
c001d81e:	59                   	pop    ecx
c001d81f:	58                   	pop    eax
c001d820:	68 88 c2 02 c0       	push   0xc002c288
c001d825:	57                   	push   edi
c001d826:	e8 51 31 fe ff       	call   c000097c <strcat>
c001d82b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d82e:	e8 4c ce ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001d833:	83 c4 10             	add    esp,0x10
c001d836:	51                   	push   ecx
c001d837:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d83b:	50                   	push   eax
c001d83c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d840:	50                   	push   eax
c001d841:	53                   	push   ebx
c001d842:	e8 c7 5e ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001d847:	83 c4 10             	add    esp,0x10
c001d84a:	85 db                	test   ebx,ebx
c001d84c:	74 0c                	je     c001d85a <Thr::loadDLL(char const*, bool)+0xa8>
c001d84e:	83 ec 0c             	sub    esp,0xc
c001d851:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d853:	53                   	push   ebx
c001d854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d857:	83 c4 10             	add    esp,0x10
c001d85a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d85f:	75 0a                	jne    c001d86b <Thr::loadDLL(char const*, bool)+0xb9>
c001d861:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d865:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d869:	75 3c                	jne    c001d8a7 <Thr::loadDLL(char const*, bool)+0xf5>
c001d86b:	89 e8                	mov    eax,ebp
c001d86d:	84 c0                	test   al,al
c001d86f:	0f 84 4c 01 00 00    	je     c001d9c1 <Thr::loadDLL(char const*, bool)+0x20f>
c001d875:	51                   	push   ecx
c001d876:	51                   	push   ecx
c001d877:	68 75 c2 02 c0       	push   0xc002c275
c001d87c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d880:	53                   	push   ebx
c001d881:	e8 b6 2f fe ff       	call   c000083c <strcpy>
c001d886:	5f                   	pop    edi
c001d887:	58                   	pop    eax
c001d888:	56                   	push   esi
c001d889:	53                   	push   ebx
c001d88a:	e8 ed 30 fe ff       	call   c000097c <strcat>
c001d88f:	58                   	pop    eax
c001d890:	5a                   	pop    edx
c001d891:	68 88 c2 02 c0       	push   0xc002c288
c001d896:	53                   	push   ebx
c001d897:	e8 e0 30 fe ff       	call   c000097c <strcat>
c001d89c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d89f:	e8 db cd ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001d8a4:	83 c4 10             	add    esp,0x10
c001d8a7:	e8 3a 45 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d8ac:	51                   	push   ecx
c001d8ad:	6a 03                	push   0x3
c001d8af:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d8b3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8b7:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8bd:	83 d3 00             	adc    ebx,0x0
c001d8c0:	89 ca                	mov    edx,ecx
c001d8c2:	89 d1                	mov    ecx,edx
c001d8c4:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d8c8:	51                   	push   ecx
c001d8c9:	50                   	push   eax
c001d8ca:	e8 69 4b ff ff       	call   c0012438 <VAS::allocatePages(int, int)>
c001d8cf:	5f                   	pop    edi
c001d8d0:	89 c3                	mov    ebx,eax
c001d8d2:	58                   	pop    eax
c001d8d3:	53                   	push   ebx
c001d8d4:	68 8a c2 02 c0       	push   0xc002c28a
c001d8d9:	e8 c7 55 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001d8de:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8e1:	e8 b6 2e fe ff       	call   c000079c <strlen>
c001d8e6:	8b 3d e0 12 03 c0    	mov    edi,DWORD PTR ds:0xc00312e0
c001d8ec:	40                   	inc    eax
c001d8ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8f0:	e8 56 1f ff ff       	call   c000f84b <malloc>
c001d8f5:	89 04 bd 00 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce900],eax
c001d8fc:	58                   	pop    eax
c001d8fd:	a1 e0 12 03 c0       	mov    eax,ds:0xc00312e0
c001d902:	5a                   	pop    edx
c001d903:	56                   	push   esi
c001d904:	ff 34 85 00 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce900]
c001d90b:	e8 2c 2f fe ff       	call   c000083c <strcpy>
c001d910:	a1 e0 12 03 c0       	mov    eax,ds:0xc00312e0
c001d915:	8d 50 01             	lea    edx,[eax+0x1]
c001d918:	89 1c 85 00 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb00],ebx
c001d91f:	89 15 e0 12 03 c0    	mov    DWORD PTR ds:0xc00312e0,edx
c001d925:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d929:	83 c4 0c             	add    esp,0xc
c001d92c:	89 14 85 00 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffced00],edx
c001d933:	6a 01                	push   0x1
c001d935:	53                   	push   ebx
c001d936:	56                   	push   esi
c001d937:	e8 d7 f6 ff ff       	call   c001d013 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	89 c7                	mov    edi,eax
c001d941:	84 c0                	test   al,al
c001d943:	0f 85 8c 00 00 00    	jne    c001d9d5 <Thr::loadDLL(char const*, bool)+0x223>
c001d949:	89 e8                	mov    eax,ebp
c001d94b:	84 c0                	test   al,al
c001d94d:	74 76                	je     c001d9c5 <Thr::loadDLL(char const*, bool)+0x213>
c001d94f:	83 ec 0c             	sub    esp,0xc
c001d952:	68 97 c2 02 c0       	push   0xc002c297
c001d957:	e8 23 cd ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001d95c:	83 c4 10             	add    esp,0x10
c001d95f:	eb 64                	jmp    c001d9c5 <Thr::loadDLL(char const*, bool)+0x213>
c001d961:	e8 80 44 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d966:	89 f5                	mov    ebp,esi
c001d968:	c1 e5 0c             	shl    ebp,0xc
c001d96b:	52                   	push   edx
c001d96c:	01 dd                	add    ebp,ebx
c001d96e:	52                   	push   edx
c001d96f:	55                   	push   ebp
c001d970:	50                   	push   eax
c001d971:	e8 3c 46 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c001d976:	83 c4 10             	add    esp,0x10
c001d979:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d97c:	75 0c                	jne    c001d98a <Thr::loadDLL(char const*, bool)+0x1d8>
c001d97e:	83 ec 0c             	sub    esp,0xc
c001d981:	55                   	push   ebp
c001d982:	e8 dc 24 ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c001d987:	83 c4 10             	add    esp,0x10
c001d98a:	46                   	inc    esi
c001d98b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d98f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d993:	05 ff 0f 00 00       	add    eax,0xfff
c001d998:	83 d2 00             	adc    edx,0x0
c001d99b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d99f:	c1 ea 0c             	shr    edx,0xc
c001d9a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9aa:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d9ae:	ba 00 00 00 00       	mov    edx,0x0
c001d9b3:	89 d0                	mov    eax,edx
c001d9b5:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9b9:	72 a6                	jb     c001d961 <Thr::loadDLL(char const*, bool)+0x1af>
c001d9bb:	89 f8                	mov    eax,edi
c001d9bd:	84 c0                	test   al,al
c001d9bf:	75 18                	jne    c001d9d9 <Thr::loadDLL(char const*, bool)+0x227>
c001d9c1:	31 db                	xor    ebx,ebx
c001d9c3:	eb 14                	jmp    c001d9d9 <Thr::loadDLL(char const*, bool)+0x227>
c001d9c5:	83 ec 0c             	sub    esp,0xc
c001d9c8:	68 b6 c2 02 c0       	push   0xc002c2b6
c001d9cd:	e8 ad cc ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001d9d2:	83 c4 10             	add    esp,0x10
c001d9d5:	31 f6                	xor    esi,esi
c001d9d7:	eb b2                	jmp    c001d98b <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9d9:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9df:	89 d8                	mov    eax,ebx
c001d9e1:	5b                   	pop    ebx
c001d9e2:	5e                   	pop    esi
c001d9e3:	5f                   	pop    edi
c001d9e4:	5d                   	pop    ebp
c001d9e5:	c3                   	ret    

c001d9e6 <Thr::executeDLL(unsigned long, void*)>:
c001d9e6:	56                   	push   esi
c001d9e7:	53                   	push   ebx
c001d9e8:	52                   	push   edx
c001d9e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9f1:	85 db                	test   ebx,ebx
c001d9f3:	75 10                	jne    c001da05 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9f5:	83 ec 0c             	sub    esp,0xc
c001d9f8:	68 d2 c2 02 c0       	push   0xc002c2d2
c001d9fd:	e8 7d cc ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001da02:	83 c4 10             	add    esp,0x10
c001da05:	50                   	push   eax
c001da06:	50                   	push   eax
c001da07:	53                   	push   ebx
c001da08:	68 fc c2 02 c0       	push   0xc002c2fc
c001da0d:	e8 93 54 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001da12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da16:	89 d8                	mov    eax,ebx
c001da18:	83 c4 14             	add    esp,0x14
c001da1b:	5b                   	pop    ebx
c001da1c:	5e                   	pop    esi
c001da1d:	ff e0                	jmp    eax
c001da1f:	90                   	nop

c001da20 <changeTSS>:
c001da20:	83 ec 14             	sub    esp,0x14
c001da23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da28:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da2b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da30:	c1 e2 15             	shl    edx,0x15
c001da33:	29 d0                	sub    eax,edx
c001da35:	50                   	push   eax
c001da36:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001da3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da41:	05 7c 11 00 00       	add    eax,0x117c
c001da46:	50                   	push   eax
c001da47:	e8 3e 3a ff ff       	call   c001148a <TSS::setESP(unsigned long)>
c001da4c:	83 c4 1c             	add    esp,0x1c
c001da4f:	c3                   	ret    

c001da50 <Process::addArgs(char**)>:
c001da50:	57                   	push   edi
c001da51:	56                   	push   esi
c001da52:	53                   	push   ebx
c001da53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da57:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da5b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da65:	85 ff                	test   edi,edi
c001da67:	74 3d                	je     c001daa6 <Process::addArgs(char**)+0x56>
c001da69:	8b 07                	mov    eax,DWORD PTR [edi]
c001da6b:	85 c0                	test   eax,eax
c001da6d:	74 37                	je     c001daa6 <Process::addArgs(char**)+0x56>
c001da6f:	31 db                	xor    ebx,ebx
c001da71:	83 ec 0c             	sub    esp,0xc
c001da74:	50                   	push   eax
c001da75:	e8 22 2d fe ff       	call   c000079c <strlen>
c001da7a:	40                   	inc    eax
c001da7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001da7e:	e8 c8 1d ff ff       	call   c000f84b <malloc>
c001da83:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da8a:	5a                   	pop    edx
c001da8b:	59                   	pop    ecx
c001da8c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da8f:	43                   	inc    ebx
c001da90:	50                   	push   eax
c001da91:	e8 a6 2d fe ff       	call   c000083c <strcpy>
c001da96:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da9c:	83 c4 10             	add    esp,0x10
c001da9f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001daa2:	85 c0                	test   eax,eax
c001daa4:	75 cb                	jne    c001da71 <Process::addArgs(char**)+0x21>
c001daa6:	5b                   	pop    ebx
c001daa7:	5e                   	pop    esi
c001daa8:	5f                   	pop    edi
c001daa9:	c3                   	ret    

c001daaa <Process::Process(char const*, Process*, char**)>:
c001daaa:	56                   	push   esi
c001daab:	53                   	push   ebx
c001daac:	83 ec 14             	sub    esp,0x14
c001daaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab3:	05 0c 02 00 00       	add    eax,0x20c
c001dab8:	bb 07 00 00 00       	mov    ebx,0x7
c001dabd:	89 c6                	mov    esi,eax
c001dabf:	85 db                	test   ebx,ebx
c001dac1:	78 12                	js     c001dad5 <Process::Process(char const*, Process*, char**)+0x2b>
c001dac3:	83 ec 0c             	sub    esp,0xc
c001dac6:	56                   	push   esi
c001dac7:	e8 66 b2 00 00       	call   c0028d32 <ThreadControlBlock::ThreadControlBlock()>
c001dacc:	83 c4 10             	add    esp,0x10
c001dacf:	83 c6 63             	add    esi,0x63
c001dad2:	4b                   	dec    ebx
c001dad3:	eb ea                	jmp    c001dabf <Process::Process(char const*, Process*, char**)+0x15>
c001dad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dae0:	83 ec 0c             	sub    esp,0xc
c001dae3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dae7:	e8 e4 c9 ff ff       	call   c001a4d0 <Krnl::newProcessEnv(Process*)>
c001daec:	83 c4 10             	add    esp,0x10
c001daef:	89 c2                	mov    edx,eax
c001daf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daff:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db08:	a1 f0 da 02 c0       	mov    eax,ds:0xc002daf0
c001db0d:	8d 50 01             	lea    edx,[eax+0x1]
c001db10:	89 15 f0 da 02 c0    	mov    DWORD PTR ds:0xc002daf0,edx
c001db16:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db1a:	89 02                	mov    DWORD PTR [edx],eax
c001db1c:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001db24:	83 ec 0c             	sub    esp,0xc
c001db27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db2b:	e8 1b 1d ff ff       	call   c000f84b <malloc>
c001db30:	83 c4 10             	add    esp,0x10
c001db33:	89 c3                	mov    ebx,eax
c001db35:	83 ec 08             	sub    esp,0x8
c001db38:	6a 00                	push   0x0
c001db3a:	53                   	push   ebx
c001db3b:	e8 a0 4c ff ff       	call   c00127e0 <VAS::VAS(bool)>
c001db40:	83 c4 10             	add    esp,0x10
c001db43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db47:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db51:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db63:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db73:	85 c0                	test   eax,eax
c001db75:	74 42                	je     c001dbb9 <Process::Process(char const*, Process*, char**)+0x10f>
c001db77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db81:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db95:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db9b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba5:	05 0c 01 00 00       	add    eax,0x10c
c001dbaa:	83 ec 08             	sub    esp,0x8
c001dbad:	52                   	push   edx
c001dbae:	50                   	push   eax
c001dbaf:	e8 88 2c fe ff       	call   c000083c <strcpy>
c001dbb4:	83 c4 10             	add    esp,0x10
c001dbb7:	eb 63                	jmp    c001dc1c <Process::Process(char const*, Process*, char**)+0x172>
c001dbb9:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dbc1:	83 ec 0c             	sub    esp,0xc
c001dbc4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbc8:	e8 7e 1c ff ff       	call   c000f84b <malloc>
c001dbcd:	83 c4 10             	add    esp,0x10
c001dbd0:	89 c3                	mov    ebx,eax
c001dbd2:	83 ec 08             	sub    esp,0x8
c001dbd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd9:	53                   	push   ebx
c001dbda:	e8 a9 35 ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c001dbdf:	83 c4 10             	add    esp,0x10
c001dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbf6:	83 ec 0c             	sub    esp,0xc
c001dbf9:	50                   	push   eax
c001dbfa:	e8 7c 29 ff ff       	call   c001057b <addToTerminalCycle(VgaText*)>
c001dbff:	83 c4 10             	add    esp,0x10
c001dc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc06:	05 0c 01 00 00       	add    eax,0x10c
c001dc0b:	83 ec 08             	sub    esp,0x8
c001dc0e:	68 1b c3 02 c0       	push   0xc002c31b
c001dc13:	50                   	push   eax
c001dc14:	e8 23 2c fe ff       	call   c000083c <strcpy>
c001dc19:	83 c4 10             	add    esp,0x10
c001dc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc20:	83 c0 0c             	add    eax,0xc
c001dc23:	83 ec 08             	sub    esp,0x8
c001dc26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc2a:	50                   	push   eax
c001dc2b:	e8 0c 2c fe ff       	call   c000083c <strcpy>
c001dc30:	83 c4 10             	add    esp,0x10
c001dc33:	83 ec 08             	sub    esp,0x8
c001dc36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc3e:	e8 0d fe ff ff       	call   c001da50 <Process::addArgs(char**)>
c001dc43:	83 c4 10             	add    esp,0x10
c001dc46:	83 ec 08             	sub    esp,0x8
c001dc49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc51:	e8 87 ee ff ff       	call   c001cadd <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc56:	83 c4 10             	add    esp,0x10
c001dc59:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc5d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc61:	83 f0 01             	xor    eax,0x1
c001dc64:	88 c2                	mov    dl,al
c001dc66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc6a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc70:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc75:	83 ec 08             	sub    esp,0x8
c001dc78:	50                   	push   eax
c001dc79:	68 18 c4 02 c0       	push   0xc002c418
c001dc7e:	e8 22 52 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001dc83:	83 c4 10             	add    esp,0x10
c001dc86:	90                   	nop
c001dc87:	83 c4 14             	add    esp,0x14
c001dc8a:	5b                   	pop    ebx
c001dc8b:	5e                   	pop    esi
c001dc8c:	c3                   	ret    
c001dc8d:	90                   	nop

c001dc8e <Process::Process(bool, char const*, Process*, char**)>:
c001dc8e:	56                   	push   esi
c001dc8f:	53                   	push   ebx
c001dc90:	83 ec 24             	sub    esp,0x24
c001dc93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc97:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc9f:	05 0c 02 00 00       	add    eax,0x20c
c001dca4:	bb 07 00 00 00       	mov    ebx,0x7
c001dca9:	89 c6                	mov    esi,eax
c001dcab:	85 db                	test   ebx,ebx
c001dcad:	78 12                	js     c001dcc1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dcaf:	83 ec 0c             	sub    esp,0xc
c001dcb2:	56                   	push   esi
c001dcb3:	e8 7a b0 00 00       	call   c0028d32 <ThreadControlBlock::ThreadControlBlock()>
c001dcb8:	83 c4 10             	add    esp,0x10
c001dcbb:	83 c6 63             	add    esi,0x63
c001dcbe:	4b                   	dec    ebx
c001dcbf:	eb ea                	jmp    c001dcab <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dccc:	83 ec 0c             	sub    esp,0xc
c001dccf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcd3:	e8 f8 c7 ff ff       	call   c001a4d0 <Krnl::newProcessEnv(Process*)>
c001dcd8:	83 c4 10             	add    esp,0x10
c001dcdb:	89 c2                	mov    edx,eax
c001dcdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dceb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcf4:	a1 f0 da 02 c0       	mov    eax,ds:0xc002daf0
c001dcf9:	8d 50 01             	lea    edx,[eax+0x1]
c001dcfc:	89 15 f0 da 02 c0    	mov    DWORD PTR ds:0xc002daf0,edx
c001dd02:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd06:	89 02                	mov    DWORD PTR [edx],eax
c001dd08:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dd10:	83 ec 0c             	sub    esp,0xc
c001dd13:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd17:	e8 2f 1b ff ff       	call   c000f84b <malloc>
c001dd1c:	83 c4 10             	add    esp,0x10
c001dd1f:	89 c3                	mov    ebx,eax
c001dd21:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd26:	83 ec 08             	sub    esp,0x8
c001dd29:	50                   	push   eax
c001dd2a:	53                   	push   ebx
c001dd2b:	e8 b0 4a ff ff       	call   c00127e0 <VAS::VAS(bool)>
c001dd30:	83 c4 10             	add    esp,0x10
c001dd33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd37:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd41:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd53:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd63:	85 c0                	test   eax,eax
c001dd65:	74 42                	je     c001dda9 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd71:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd85:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd8b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd95:	05 0c 01 00 00       	add    eax,0x10c
c001dd9a:	83 ec 08             	sub    esp,0x8
c001dd9d:	52                   	push   edx
c001dd9e:	50                   	push   eax
c001dd9f:	e8 98 2a fe ff       	call   c000083c <strcpy>
c001dda4:	83 c4 10             	add    esp,0x10
c001dda7:	eb 63                	jmp    c001de0c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dda9:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001ddb1:	83 ec 0c             	sub    esp,0xc
c001ddb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddb8:	e8 8e 1a ff ff       	call   c000f84b <malloc>
c001ddbd:	83 c4 10             	add    esp,0x10
c001ddc0:	89 c3                	mov    ebx,eax
c001ddc2:	83 ec 08             	sub    esp,0x8
c001ddc5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddc9:	53                   	push   ebx
c001ddca:	e8 b9 33 ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c001ddcf:	83 c4 10             	add    esp,0x10
c001ddd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dddc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dde6:	83 ec 0c             	sub    esp,0xc
c001dde9:	50                   	push   eax
c001ddea:	e8 8c 27 ff ff       	call   c001057b <addToTerminalCycle(VgaText*)>
c001ddef:	83 c4 10             	add    esp,0x10
c001ddf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddf6:	05 0c 01 00 00       	add    eax,0x10c
c001ddfb:	83 ec 08             	sub    esp,0x8
c001ddfe:	68 1b c3 02 c0       	push   0xc002c31b
c001de03:	50                   	push   eax
c001de04:	e8 33 2a fe ff       	call   c000083c <strcpy>
c001de09:	83 c4 10             	add    esp,0x10
c001de0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de10:	83 c0 0c             	add    eax,0xc
c001de13:	83 ec 08             	sub    esp,0x8
c001de16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de1a:	50                   	push   eax
c001de1b:	e8 1c 2a fe ff       	call   c000083c <strcpy>
c001de20:	83 c4 10             	add    esp,0x10
c001de23:	83 ec 08             	sub    esp,0x8
c001de26:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de2e:	e8 1d fc ff ff       	call   c001da50 <Process::addArgs(char**)>
c001de33:	83 c4 10             	add    esp,0x10
c001de36:	90                   	nop
c001de37:	83 c4 24             	add    esp,0x24
c001de3a:	5b                   	pop    ebx
c001de3b:	5e                   	pop    esi
c001de3c:	c3                   	ret    

c001de3d <disableIRQs()>:
c001de3d:	fa                   	cli    
c001de3e:	ff 05 ac 1a 03 c0    	inc    DWORD PTR ds:0xc0031aac
c001de44:	c3                   	ret    

c001de45 <getIRQNestingLevel()>:
c001de45:	a1 ac 1a 03 c0       	mov    eax,ds:0xc0031aac
c001de4a:	c3                   	ret    

c001de4b <enableIRQs()>:
c001de4b:	a1 ac 1a 03 c0       	mov    eax,ds:0xc0031aac
c001de50:	48                   	dec    eax
c001de51:	a3 ac 1a 03 c0       	mov    ds:0xc0031aac,eax
c001de56:	75 01                	jne    c001de59 <enableIRQs()+0xe>
c001de58:	fb                   	sti    
c001de59:	c3                   	ret    

c001de5a <lockScheduler()>:
c001de5a:	eb e1                	jmp    c001de3d <disableIRQs()>

c001de5c <unlockScheduler()>:
c001de5c:	eb ed                	jmp    c001de4b <enableIRQs()>

c001de5e <userModeEntryPoint(void*)>:
c001de5e:	83 ec 0c             	sub    esp,0xc
c001de61:	e8 f6 ff ff ff       	call   c001de5c <unlockScheduler()>
c001de66:	fb                   	sti    
c001de67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de6f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de79:	83 c4 0c             	add    esp,0xc
c001de7c:	e9 a9 24 fe ff       	jmp    c000032a <goToUsermode>

c001de81 <lockStuff()>:
c001de81:	e8 b7 ff ff ff       	call   c001de3d <disableIRQs()>
c001de86:	ff 05 a8 1a 03 c0    	inc    DWORD PTR ds:0xc0031aa8
c001de8c:	c3                   	ret    

c001de8d <taskStartupFunction>:
c001de8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de92:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de95:	c3                   	ret    

c001de96 <updateTimeUsed()>:
c001de96:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001de9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dea1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dea8:	74 50                	je     c001defa <updateTimeUsed()+0x64>
c001deaa:	57                   	push   edi
c001deab:	56                   	push   esi
c001deac:	53                   	push   ebx
c001dead:	0f 31                	rdtsc  
c001deaf:	89 c1                	mov    ecx,eax
c001deb1:	a3 e8 1a 03 c0       	mov    ds:0xc0031ae8,eax
c001deb6:	2b 0d d8 1a 03 c0    	sub    ecx,DWORD PTR ds:0xc0031ad8
c001debc:	89 d3                	mov    ebx,edx
c001debe:	89 0d e0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ae0,ecx
c001dec4:	1b 1d dc 1a 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031adc
c001deca:	a3 d8 1a 03 c0       	mov    ds:0xc0031ad8,eax
c001decf:	89 1d e4 1a 03 c0    	mov    DWORD PTR ds:0xc0031ae4,ebx
c001ded5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deda:	89 15 ec 1a 03 c0    	mov    DWORD PTR ds:0xc0031aec,edx
c001dee0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dee3:	89 15 dc 1a 03 c0    	mov    DWORD PTR ds:0xc0031adc,edx
c001dee9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001deec:	01 f1                	add    ecx,esi
c001deee:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001def1:	11 fb                	adc    ebx,edi
c001def3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001def6:	5b                   	pop    ebx
c001def7:	5e                   	pop    esi
c001def8:	5f                   	pop    edi
c001def9:	c3                   	ret    
c001defa:	c3                   	ret    

c001defb <switchToThread(ThreadControlBlock*)>:
c001defb:	53                   	push   ebx
c001defc:	83 ec 08             	sub    esp,0x8
c001deff:	a1 a8 1a 03 c0       	mov    eax,ds:0xc0031aa8
c001df04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df08:	85 c0                	test   eax,eax
c001df0a:	75 30                	jne    c001df3c <switchToThread(ThreadControlBlock*)+0x41>
c001df0c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df0f:	3c ff                	cmp    al,0xff
c001df11:	74 25                	je     c001df38 <switchToThread(ThreadControlBlock*)+0x3d>
c001df13:	0f b6 d0             	movzx  edx,al
c001df16:	b8 84 03 00 00       	mov    eax,0x384
c001df1b:	29 d0                	sub    eax,edx
c001df1d:	c1 e0 10             	shl    eax,0x10
c001df20:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df23:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df26:	e8 6b ff ff ff       	call   c001de96 <updateTimeUsed()>
c001df2b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df2f:	83 c4 08             	add    esp,0x8
c001df32:	5b                   	pop    ebx
c001df33:	e9 2a 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df38:	31 c0                	xor    eax,eax
c001df3a:	eb e7                	jmp    c001df23 <switchToThread(ThreadControlBlock*)+0x28>
c001df3c:	c7 05 a4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031aa4,0x1
c001df46:	83 c4 08             	add    esp,0x8
c001df49:	5b                   	pop    ebx
c001df4a:	c3                   	ret    
c001df4b:	90                   	nop

c001df4c <Semaphore::Semaphore(int)>:
c001df4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df54:	89 10                	mov    DWORD PTR [eax],edx
c001df56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df5a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df70:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df77:	90                   	nop
c001df78:	c3                   	ret    
c001df79:	90                   	nop

c001df7a <Mutex::Mutex()>:
c001df7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df7e:	6a 01                	push   0x1
c001df80:	50                   	push   eax
c001df81:	e8 c6 ff ff ff       	call   c001df4c <Semaphore::Semaphore(int)>
c001df86:	83 c4 08             	add    esp,0x8
c001df89:	90                   	nop
c001df8a:	c3                   	ret    
c001df8b:	90                   	nop

c001df8c <Process::createThread(void (*)(void*), void*, int)>:
c001df8c:	55                   	push   ebp
c001df8d:	31 c9                	xor    ecx,ecx
c001df8f:	57                   	push   edi
c001df90:	56                   	push   esi
c001df91:	53                   	push   ebx
c001df92:	83 ec 1c             	sub    esp,0x1c
c001df95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df99:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dfa0:	89 f2                	mov    edx,esi
c001dfa2:	0f b7 c2             	movzx  eax,dx
c001dfa5:	83 e2 01             	and    edx,0x1
c001dfa8:	74 16                	je     c001dfc0 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dfaa:	d1 f8                	sar    eax,1
c001dfac:	41                   	inc    ecx
c001dfad:	89 c2                	mov    edx,eax
c001dfaf:	83 f9 10             	cmp    ecx,0x10
c001dfb2:	75 ee                	jne    c001dfa2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dfb4:	83 c4 1c             	add    esp,0x1c
c001dfb7:	31 db                	xor    ebx,ebx
c001dfb9:	89 d8                	mov    eax,ebx
c001dfbb:	5b                   	pop    ebx
c001dfbc:	5e                   	pop    esi
c001dfbd:	5f                   	pop    edi
c001dfbe:	5d                   	pop    ebp
c001dfbf:	c3                   	ret    
c001dfc0:	b8 01 00 00 00       	mov    eax,0x1
c001dfc5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfc8:	d3 e0                	shl    eax,cl
c001dfca:	09 c6                	or     esi,eax
c001dfcc:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dfcf:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dfd6:	89 c6                	mov    esi,eax
c001dfd8:	c1 e6 05             	shl    esi,0x5
c001dfdb:	01 f0                	add    eax,esi
c001dfdd:	01 d8                	add    eax,ebx
c001dfdf:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dfe6:	75 0a                	jne    c001dff2 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dfe8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dff2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dff8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dffc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dfff:	01 ca                	add    edx,ecx
c001e001:	83 ec 08             	sub    esp,0x8
c001e004:	89 d0                	mov    eax,edx
c001e006:	c1 e0 05             	shl    eax,0x5
c001e009:	01 d0                	add    eax,edx
c001e00b:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e00f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e013:	01 d8                	add    eax,ebx
c001e015:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e01b:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e021:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e027:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e02d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e033:	89 cd                	mov    ebp,ecx
c001e035:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e039:	f7 dd                	neg    ebp
c001e03b:	c1 e5 15             	shl    ebp,0x15
c001e03e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e044:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e04a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e054:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e05a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e064:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e06e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e072:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e079:	53                   	push   ebx
c001e07a:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e07f:	e8 3c ab 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e084:	89 d8                	mov    eax,ebx
c001e086:	83 c4 10             	add    esp,0x10
c001e089:	83 c4 1c             	add    esp,0x1c
c001e08c:	5b                   	pop    ebx
c001e08d:	5e                   	pop    esi
c001e08e:	5f                   	pop    edi
c001e08f:	5d                   	pop    ebp
c001e090:	c3                   	ret    
c001e091:	90                   	nop

c001e092 <Process::createUserThread()>:
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	68 80 00 00 00       	push   0x80
c001e09a:	6a 00                	push   0x0
c001e09c:	68 5e de 01 c0       	push   0xc001de5e
c001e0a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0a5:	e8 e2 fe ff ff       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c001e0aa:	83 c4 1c             	add    esp,0x1c
c001e0ad:	c3                   	ret    

c001e0ae <setupMultitasking(void (*)())>:
c001e0ae:	56                   	push   esi
c001e0af:	53                   	push   ebx
c001e0b0:	51                   	push   ecx
c001e0b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0b5:	eb 10                	jmp    c001e0c7 <setupMultitasking(void (*)())+0x19>
c001e0b7:	83 ec 0c             	sub    esp,0xc
c001e0ba:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e0bf:	e8 4e aa 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0c4:	83 c4 10             	add    esp,0x10
c001e0c7:	83 ec 0c             	sub    esp,0xc
c001e0ca:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e0cf:	e8 22 aa 00 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0d4:	83 c4 10             	add    esp,0x10
c001e0d7:	84 c0                	test   al,al
c001e0d9:	74 dc                	je     c001e0b7 <setupMultitasking(void (*)())+0x9>
c001e0db:	83 ec 0c             	sub    esp,0xc
c001e0de:	68 3f 07 00 00       	push   0x73f
c001e0e3:	e8 63 17 ff ff       	call   c000f84b <malloc>
c001e0e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0ef:	89 c3                	mov    ebx,eax
c001e0f1:	6a 00                	push   0x0
c001e0f3:	68 1f c3 02 c0       	push   0xc002c31f
c001e0f8:	6a 01                	push   0x1
c001e0fa:	50                   	push   eax
c001e0fb:	e8 8e fb ff ff       	call   c001dc8e <Process::Process(bool, char const*, Process*, char**)>
c001e100:	83 c4 18             	add    esp,0x18
c001e103:	89 1d d4 1a 03 c0    	mov    DWORD PTR ds:0xc0031ad4,ebx
c001e109:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e10f:	68 40 c4 02 c0       	push   0xc002c440
c001e114:	e8 8c 4d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e119:	58                   	pop    eax
c001e11a:	5a                   	pop    edx
c001e11b:	6a 63                	push   0x63
c001e11d:	68 74 c4 02 c0       	push   0xc002c474
c001e122:	e8 7e 4d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e127:	59                   	pop    ecx
c001e128:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e12e:	e8 ca 2b ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c001e133:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e13b:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e145:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e14b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e14e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e158:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e15e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e164:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e16e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e178:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e182:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e188:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e192:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e198:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e1a2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e1a8:	58                   	pop    eax
c001e1a9:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e1af:	5a                   	pop    edx
c001e1b0:	68 1b c3 02 c0       	push   0xc002c31b
c001e1b5:	50                   	push   eax
c001e1b6:	e8 81 26 fe ff       	call   c000083c <strcpy>
c001e1bb:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1c2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1c6:	83 c4 14             	add    esp,0x14
c001e1c9:	5b                   	pop    ebx
c001e1ca:	5e                   	pop    esi
c001e1cb:	e9 84 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1d0 <schedule()>:
c001e1d0:	a1 a8 1a 03 c0       	mov    eax,ds:0xc0031aa8
c001e1d5:	85 c0                	test   eax,eax
c001e1d7:	74 0b                	je     c001e1e4 <schedule()+0x14>
c001e1d9:	c7 05 a4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031aa4,0x1
c001e1e3:	c3                   	ret    
c001e1e4:	53                   	push   ebx
c001e1e5:	83 ec 14             	sub    esp,0x14
c001e1e8:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e1ed:	e8 04 a9 00 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1f2:	83 c4 10             	add    esp,0x10
c001e1f5:	84 c0                	test   al,al
c001e1f7:	75 38                	jne    c001e231 <schedule()+0x61>
c001e1f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e201:	4a                   	dec    edx
c001e202:	74 32                	je     c001e236 <schedule()+0x66>
c001e204:	83 ec 0c             	sub    esp,0xc
c001e207:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e20c:	e8 dd a8 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e211:	c7 04 24 c8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ac8
c001e218:	89 c3                	mov    ebx,eax
c001e21a:	e8 f3 a8 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e21f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e229:	e8 cd fc ff ff       	call   c001defb <switchToThread(ThreadControlBlock*)>
c001e22e:	83 c4 10             	add    esp,0x10
c001e231:	83 c4 08             	add    esp,0x8
c001e234:	5b                   	pop    ebx
c001e235:	c3                   	ret    
c001e236:	83 ec 08             	sub    esp,0x8
c001e239:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e240:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e246:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e24b:	e8 70 a9 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e250:	83 c4 10             	add    esp,0x10
c001e253:	eb af                	jmp    c001e204 <schedule()+0x34>

c001e255 <unlockStuff()>:
c001e255:	a1 a8 1a 03 c0       	mov    eax,ds:0xc0031aa8
c001e25a:	48                   	dec    eax
c001e25b:	a3 a8 1a 03 c0       	mov    ds:0xc0031aa8,eax
c001e260:	75 09                	jne    c001e26b <unlockStuff()+0x16>
c001e262:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c001e267:	85 c0                	test   eax,eax
c001e269:	75 05                	jne    c001e270 <unlockStuff()+0x1b>
c001e26b:	e9 db fb ff ff       	jmp    c001de4b <enableIRQs()>
c001e270:	83 ec 0c             	sub    esp,0xc
c001e273:	c7 05 a4 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031aa4,0x0
c001e27d:	e8 4e ff ff ff       	call   c001e1d0 <schedule()>
c001e282:	83 c4 0c             	add    esp,0xc
c001e285:	e9 c1 fb ff ff       	jmp    c001de4b <enableIRQs()>

c001e28a <Semaphore::tryAcquire()>:
c001e28a:	83 ec 0c             	sub    esp,0xc
c001e28d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e291:	e8 eb fb ff ff       	call   c001de81 <lockStuff()>
c001e296:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e299:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e29b:	7c 0b                	jl     c001e2a8 <Semaphore::tryAcquire()+0x1e>
c001e29d:	e8 b3 ff ff ff       	call   c001e255 <unlockStuff()>
c001e2a2:	31 c0                	xor    eax,eax
c001e2a4:	83 c4 0c             	add    esp,0xc
c001e2a7:	c3                   	ret    
c001e2a8:	42                   	inc    edx
c001e2a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2ac:	e8 a4 ff ff ff       	call   c001e255 <unlockStuff()>
c001e2b1:	b0 01                	mov    al,0x1
c001e2b3:	83 c4 0c             	add    esp,0xc
c001e2b6:	c3                   	ret    
c001e2b7:	90                   	nop

c001e2b8 <Semaphore::assertLocked(char const*)>:
c001e2b8:	83 ec 0c             	sub    esp,0xc
c001e2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2c3:	e8 b9 fb ff ff       	call   c001de81 <lockStuff()>
c001e2c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2ca:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e2cd:	7c 05                	jl     c001e2d4 <Semaphore::assertLocked(char const*)+0x1c>
c001e2cf:	83 c4 0c             	add    esp,0xc
c001e2d2:	eb 81                	jmp    c001e255 <unlockStuff()>
c001e2d4:	83 ec 0c             	sub    esp,0xc
c001e2d7:	52                   	push   edx
c001e2d8:	e8 a2 c3 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001e2dd:	83 c4 10             	add    esp,0x10
c001e2e0:	83 c4 0c             	add    esp,0xc
c001e2e3:	e9 6d ff ff ff       	jmp    c001e255 <unlockStuff()>

c001e2e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2e8:	83 ec 0c             	sub    esp,0xc
c001e2eb:	e8 55 fb ff ff       	call   c001de45 <getIRQNestingLevel()>
c001e2f0:	83 ec 08             	sub    esp,0x8
c001e2f3:	50                   	push   eax
c001e2f4:	68 98 c4 02 c0       	push   0xc002c498
c001e2f9:	e8 a7 4b ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e2fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e307:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e30a:	e8 c1 fe ff ff       	call   c001e1d0 <schedule()>
c001e30f:	e8 48 fb ff ff       	call   c001de5c <unlockScheduler()>
c001e314:	e8 2c fb ff ff       	call   c001de45 <getIRQNestingLevel()>
c001e319:	5a                   	pop    edx
c001e31a:	59                   	pop    ecx
c001e31b:	50                   	push   eax
c001e31c:	68 cc c4 02 c0       	push   0xc002c4cc
c001e321:	e8 7f 4b ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e326:	83 c4 1c             	add    esp,0x1c
c001e329:	c3                   	ret    

c001e32a <blockTask(TaskState)>:
c001e32a:	83 ec 0c             	sub    esp,0xc
c001e32d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e331:	e8 24 fb ff ff       	call   c001de5a <lockScheduler()>
c001e336:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e33b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e33e:	e8 8d fe ff ff       	call   c001e1d0 <schedule()>
c001e343:	83 c4 0c             	add    esp,0xc
c001e346:	e9 11 fb ff ff       	jmp    c001de5c <unlockScheduler()>

c001e34b <waitTask(int, int*, int)>:
c001e34b:	83 ec 18             	sub    esp,0x18
c001e34e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e353:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e357:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e35a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e35e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e363:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e366:	6a 07                	push   0x7
c001e368:	e8 bd ff ff ff       	call   c001e32a <blockTask(TaskState)>
c001e36d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e372:	83 c4 10             	add    esp,0x10
c001e375:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e378:	85 d2                	test   edx,edx
c001e37a:	74 0a                	je     c001e386 <waitTask(int, int*, int)+0x3b>
c001e37c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e37f:	89 02                	mov    DWORD PTR [edx],eax
c001e381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e386:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e389:	83 c4 0c             	add    esp,0xc
c001e38c:	c3                   	ret    

c001e38d <nanoSleepUntil(unsigned long long)>:
c001e38d:	83 ec 0c             	sub    esp,0xc
c001e390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e394:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e398:	3b 05 f0 eb 02 c0    	cmp    eax,DWORD PTR ds:0xc002ebf0
c001e39e:	89 d1                	mov    ecx,edx
c001e3a0:	1b 0d f4 eb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ebf4
c001e3a6:	73 04                	jae    c001e3ac <nanoSleepUntil(unsigned long long)+0x1f>
c001e3a8:	83 c4 0c             	add    esp,0xc
c001e3ab:	c3                   	ret    
c001e3ac:	e8 d0 fa ff ff       	call   c001de81 <lockStuff()>
c001e3b1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3b7:	83 ec 08             	sub    esp,0x8
c001e3ba:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e3bd:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3c0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e3c6:	68 bc 1a 03 c0       	push   0xc0031abc
c001e3cb:	e8 f0 a7 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e3d7:	e8 4e ff ff ff       	call   c001e32a <blockTask(TaskState)>
c001e3dc:	83 c4 1c             	add    esp,0x1c
c001e3df:	e9 71 fe ff ff       	jmp    c001e255 <unlockStuff()>

c001e3e4 <nanoSleep(unsigned long long)>:
c001e3e4:	a1 f0 eb 02 c0       	mov    eax,ds:0xc002ebf0
c001e3e9:	8b 15 f4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebf4
c001e3ef:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3f3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3f7:	eb 94                	jmp    c001e38d <nanoSleepUntil(unsigned long long)>

c001e3f9 <sleep(unsigned long long)>:
c001e3f9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e401:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e406:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e40a:	01 ca                	add    edx,ecx
c001e40c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e410:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e414:	eb ce                	jmp    c001e3e4 <nanoSleep(unsigned long long)>

c001e416 <Semaphore::acquire()>:
c001e416:	83 ec 0c             	sub    esp,0xc
c001e419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41d:	e8 5f fa ff ff       	call   c001de81 <lockStuff()>
c001e422:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e425:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e427:	7d 0c                	jge    c001e435 <Semaphore::acquire()+0x1f>
c001e429:	42                   	inc    edx
c001e42a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e42d:	83 c4 0c             	add    esp,0xc
c001e430:	e9 20 fe ff ff       	jmp    c001e255 <unlockStuff()>
c001e435:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e43b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e442:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e445:	85 d2                	test   edx,edx
c001e447:	74 2a                	je     c001e473 <Semaphore::acquire()+0x5d>
c001e449:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e44c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e452:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e455:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e45b:	83 ec 0c             	sub    esp,0xc
c001e45e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e461:	6a 05                	push   0x5
c001e463:	e8 c2 fe ff ff       	call   c001e32a <blockTask(TaskState)>
c001e468:	83 c4 10             	add    esp,0x10
c001e46b:	83 c4 0c             	add    esp,0xc
c001e46e:	e9 e2 fd ff ff       	jmp    c001e255 <unlockStuff()>
c001e473:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e479:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e47c:	eb d7                	jmp    c001e455 <Semaphore::acquire()+0x3f>

c001e47e <taskReturned>:
c001e47e:	83 ec 18             	sub    esp,0x18
c001e481:	68 00 c5 02 c0       	push   0xc002c500
c001e486:	e8 f4 c1 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001e48b:	83 c4 10             	add    esp,0x10
c001e48e:	83 ec 0c             	sub    esp,0xc
c001e491:	6a 02                	push   0x2
c001e493:	e8 92 fe ff ff       	call   c001e32a <blockTask(TaskState)>
c001e498:	e8 bd f9 ff ff       	call   c001de5a <lockScheduler()>
c001e49d:	e8 2e fd ff ff       	call   c001e1d0 <schedule()>
c001e4a2:	e8 b5 f9 ff ff       	call   c001de5c <unlockScheduler()>
c001e4a7:	83 c4 10             	add    esp,0x10
c001e4aa:	eb e2                	jmp    c001e48e <taskReturned+0x10>

c001e4ac <unblockTask(ThreadControlBlock*)>:
c001e4ac:	53                   	push   ebx
c001e4ad:	83 ec 08             	sub    esp,0x8
c001e4b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4b4:	e8 a1 f9 ff ff       	call   c001de5a <lockScheduler()>
c001e4b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4bc:	85 c0                	test   eax,eax
c001e4be:	74 5c                	je     c001e51c <unblockTask(ThreadControlBlock*)+0x70>
c001e4c0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4c3:	48                   	dec    eax
c001e4c4:	74 31                	je     c001e4f7 <unblockTask(ThreadControlBlock*)+0x4b>
c001e4c6:	83 ec 0c             	sub    esp,0xc
c001e4c9:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e4ce:	e8 1b a6 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4d3:	83 c4 10             	add    esp,0x10
c001e4d6:	85 c0                	test   eax,eax
c001e4d8:	75 17                	jne    c001e4f1 <unblockTask(ThreadControlBlock*)+0x45>
c001e4da:	eb 65                	jmp    c001e541 <unblockTask(ThreadControlBlock*)+0x95>
c001e4dc:	83 ec 08             	sub    esp,0x8
c001e4df:	50                   	push   eax
c001e4e0:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e4e5:	e8 ea a8 00 00       	call   c0028dd4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4ea:	83 c4 10             	add    esp,0x10
c001e4ed:	85 c0                	test   eax,eax
c001e4ef:	74 50                	je     c001e541 <unblockTask(ThreadControlBlock*)+0x95>
c001e4f1:	39 c3                	cmp    ebx,eax
c001e4f3:	75 e7                	jne    c001e4dc <unblockTask(ThreadControlBlock*)+0x30>
c001e4f5:	eb 1c                	jmp    c001e513 <unblockTask(ThreadControlBlock*)+0x67>
c001e4f7:	83 ec 0c             	sub    esp,0xc
c001e4fa:	68 f0 c5 02 c0       	push   0xc002c5f0
c001e4ff:	e8 a1 49 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e504:	c7 04 24 7c c5 02 c0 	mov    DWORD PTR [esp],0xc002c57c
c001e50b:	e8 95 49 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	83 c4 08             	add    esp,0x8
c001e516:	5b                   	pop    ebx
c001e517:	e9 40 f9 ff ff       	jmp    c001de5c <unlockScheduler()>
c001e51c:	83 ec 0c             	sub    esp,0xc
c001e51f:	68 34 c5 02 c0       	push   0xc002c534
c001e524:	e8 7c 49 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e529:	c7 04 24 7c c5 02 c0 	mov    DWORD PTR [esp],0xc002c57c
c001e530:	e8 70 49 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e535:	83 c4 10             	add    esp,0x10
c001e538:	83 c4 08             	add    esp,0x8
c001e53b:	5b                   	pop    ebx
c001e53c:	e9 1b f9 ff ff       	jmp    c001de5c <unlockScheduler()>
c001e541:	83 ec 08             	sub    esp,0x8
c001e544:	53                   	push   ebx
c001e545:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e54a:	e8 71 a6 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e54f:	83 c4 10             	add    esp,0x10
c001e552:	83 c4 08             	add    esp,0x8
c001e555:	5b                   	pop    ebx
c001e556:	e9 01 f9 ff ff       	jmp    c001de5c <unlockScheduler()>

c001e55b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e55b:	55                   	push   ebp
c001e55c:	57                   	push   edi
c001e55d:	56                   	push   esi
c001e55e:	53                   	push   ebx
c001e55f:	83 ec 1c             	sub    esp,0x1c
c001e562:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e566:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e569:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e56f:	85 ff                	test   edi,edi
c001e571:	7e 20                	jle    c001e593 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e573:	31 f6                	xor    esi,esi
c001e575:	83 ec 0c             	sub    esp,0xc
c001e578:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e57f:	46                   	inc    esi
c001e580:	e8 d6 12 ff ff       	call   c000f85b <free>
c001e585:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e588:	83 c4 10             	add    esp,0x10
c001e58b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e591:	7f e2                	jg     c001e575 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e593:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e59d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e5a2:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e5a5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e5a8:	d3 c0                	rol    eax,cl
c001e5aa:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5b1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5b4:	89 f7                	mov    edi,esi
c001e5b6:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e5be:	0f 85 74 01 00 00    	jne    c001e738 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e5c4:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e5ca:	85 ed                	test   ebp,ebp
c001e5cc:	74 1b                	je     c001e5e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e5ce:	83 ec 0c             	sub    esp,0xc
c001e5d1:	55                   	push   ebp
c001e5d2:	e8 15 be ff ff       	call   c001a3ec <EnvVarContainer::~EnvVarContainer()>
c001e5d7:	59                   	pop    ecx
c001e5d8:	5e                   	pop    esi
c001e5d9:	6a 0c                	push   0xc
c001e5db:	55                   	push   ebp
c001e5dc:	e8 e4 47 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c001e5e1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5e4:	83 c4 10             	add    esp,0x10
c001e5e7:	89 f7                	mov    edi,esi
c001e5e9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5ef:	85 c0                	test   eax,eax
c001e5f1:	0f 84 aa 00 00 00    	je     c001e6a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5f7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5fa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5fe:	31 c9                	xor    ecx,ecx
c001e600:	eb 10                	jmp    c001e612 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e602:	41                   	inc    ecx
c001e603:	83 f9 10             	cmp    ecx,0x10
c001e606:	0f 84 95 00 00 00    	je     c001e6a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e60c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e612:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e619:	d3 fa                	sar    edx,cl
c001e61b:	83 e2 01             	and    edx,0x1
c001e61e:	74 e2                	je     c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e620:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e623:	01 ca                	add    edx,ecx
c001e625:	89 d5                	mov    ebp,edx
c001e627:	c1 e5 05             	shl    ebp,0x5
c001e62a:	01 ea                	add    edx,ebp
c001e62c:	01 d0                	add    eax,edx
c001e62e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e634:	83 fd 07             	cmp    ebp,0x7
c001e637:	75 c9                	jne    c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e639:	05 40 02 00 00       	add    eax,0x240
c001e63e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e641:	83 fd ff             	cmp    ebp,0xffffffff
c001e644:	0f 8c 08 01 00 00    	jl     c001e752 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e64a:	0f 84 b9 01 00 00    	je     c001e809 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e650:	85 ed                	test   ebp,ebp
c001e652:	0f 84 a0 01 00 00    	je     c001e7f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e658:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e65a:	75 a6                	jne    c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e65c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e662:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e666:	01 d0                	add    eax,edx
c001e668:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e66c:	83 ec 0c             	sub    esp,0xc
c001e66f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e675:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e678:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e67e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e685:	50                   	push   eax
c001e686:	e8 21 fe ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001e68b:	83 c4 10             	add    esp,0x10
c001e68e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e691:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e695:	89 f7                	mov    edi,esi
c001e697:	41                   	inc    ecx
c001e698:	83 f9 10             	cmp    ecx,0x10
c001e69b:	0f 85 6b ff ff ff    	jne    c001e60c <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e6a1:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e6a7:	85 c0                	test   eax,eax
c001e6a9:	74 5d                	je     c001e708 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6ab:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6b1:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e6b7:	74 4f                	je     c001e708 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6b9:	83 ec 0c             	sub    esp,0xc
c001e6bc:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e6c1:	e8 28 a4 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6c6:	c7 04 24 c8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ac8
c001e6cd:	89 c7                	mov    edi,eax
c001e6cf:	e8 22 a4 00 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6d4:	83 c4 10             	add    esp,0x10
c001e6d7:	84 c0                	test   al,al
c001e6d9:	0f 84 e4 00 00 00    	je     c001e7c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e6df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6e8:	85 d2                	test   edx,edx
c001e6ea:	74 0f                	je     c001e6fb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6ec:	83 ec 0c             	sub    esp,0xc
c001e6ef:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6f1:	52                   	push   edx
c001e6f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6f5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6f8:	83 c4 10             	add    esp,0x10
c001e6fb:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e705:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e708:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e70e:	85 db                	test   ebx,ebx
c001e710:	74 16                	je     c001e728 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e712:	83 ec 0c             	sub    esp,0xc
c001e715:	53                   	push   ebx
c001e716:	e8 b1 3a ff ff       	call   c00121cc <VAS::~VAS()>
c001e71b:	58                   	pop    eax
c001e71c:	5a                   	pop    edx
c001e71d:	6a 14                	push   0x14
c001e71f:	53                   	push   ebx
c001e720:	e8 a0 46 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c001e725:	83 c4 10             	add    esp,0x10
c001e728:	83 ec 0c             	sub    esp,0xc
c001e72b:	68 26 c3 02 c0       	push   0xc002c326
c001e730:	e8 70 47 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e735:	83 c4 10             	add    esp,0x10
c001e738:	83 ec 08             	sub    esp,0x8
c001e73b:	68 3f 07 00 00       	push   0x73f
c001e740:	68 34 c3 02 c0       	push   0xc002c334
c001e745:	e8 5b 47 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e74a:	83 c4 2c             	add    esp,0x2c
c001e74d:	5b                   	pop    ebx
c001e74e:	5e                   	pop    esi
c001e74f:	5f                   	pop    edi
c001e750:	5d                   	pop    ebp
c001e751:	c3                   	ret    
c001e752:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e756:	83 ec 0c             	sub    esp,0xc
c001e759:	68 34 c6 02 c0       	push   0xc002c634
c001e75e:	e8 1c bf ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001e763:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e766:	83 c4 10             	add    esp,0x10
c001e769:	89 f7                	mov    edi,esi
c001e76b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e76f:	e9 8e fe ff ff       	jmp    c001e602 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e774:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e77a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e780:	75 1c                	jne    c001e79e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e782:	83 ec 0c             	sub    esp,0xc
c001e785:	68 9c c6 02 c0       	push   0xc002c69c
c001e78a:	e8 16 47 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e78f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e796:	e8 8f fb ff ff       	call   c001e32a <blockTask(TaskState)>
c001e79b:	83 c4 10             	add    esp,0x10
c001e79e:	83 ec 08             	sub    esp,0x8
c001e7a1:	56                   	push   esi
c001e7a2:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e7a7:	e8 14 a4 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7ac:	c7 04 24 c8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ac8
c001e7b3:	e8 36 a3 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7b8:	83 c4 10             	add    esp,0x10
c001e7bb:	39 f8                	cmp    eax,edi
c001e7bd:	0f 84 1c ff ff ff    	je     c001e6df <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e7c3:	83 ec 0c             	sub    esp,0xc
c001e7c6:	68 c8 1a 03 c0       	push   0xc0031ac8
c001e7cb:	e8 1e a3 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7d0:	c7 04 24 c8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ac8
c001e7d7:	89 c6                	mov    esi,eax
c001e7d9:	e8 34 a3 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7de:	83 c4 10             	add    esp,0x10
c001e7e1:	39 f3                	cmp    ebx,esi
c001e7e3:	74 b9                	je     c001e79e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7e5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7e8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7eb:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7f1:	75 ab                	jne    c001e79e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7f3:	e9 7c ff ff ff       	jmp    c001e774 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7fc:	83 ec 0c             	sub    esp,0xc
c001e7ff:	68 68 c6 02 c0       	push   0xc002c668
c001e804:	e9 55 ff ff ff       	jmp    c001e75e <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e809:	8b 36                	mov    esi,DWORD PTR [esi]
c001e80b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e80f:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e812:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e815:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e81b:	01 d7                	add    edi,edx
c001e81d:	89 f8                	mov    eax,edi
c001e81f:	e9 44 fe ff ff       	jmp    c001e668 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e824 <cleanerTaskFunction(void*)>:
c001e824:	53                   	push   ebx
c001e825:	83 ec 08             	sub    esp,0x8
c001e828:	e8 2f f6 ff ff       	call   c001de5c <unlockScheduler()>
c001e82d:	e8 28 f6 ff ff       	call   c001de5a <lockScheduler()>
c001e832:	80 3d 8c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a8c,0x0
c001e839:	0f 85 8e 00 00 00    	jne    c001e8cd <cleanerTaskFunction(void*)+0xa9>
c001e83f:	83 ec 0c             	sub    esp,0xc
c001e842:	6a 02                	push   0x2
c001e844:	e8 9f fa ff ff       	call   c001e2e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	c6 05 8c 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a8c,0x0
c001e853:	e8 29 f6 ff ff       	call   c001de81 <lockStuff()>
c001e858:	e8 fd f5 ff ff       	call   c001de5a <lockScheduler()>
c001e85d:	83 ec 0c             	sub    esp,0xc
c001e860:	68 b0 1a 03 c0       	push   0xc0031ab0
c001e865:	e8 8c a2 00 00       	call   c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e86a:	83 c4 10             	add    esp,0x10
c001e86d:	84 c0                	test   al,al
c001e86f:	75 40                	jne    c001e8b1 <cleanerTaskFunction(void*)+0x8d>
c001e871:	83 ec 0c             	sub    esp,0xc
c001e874:	68 b0 1a 03 c0       	push   0xc0031ab0
c001e879:	e8 70 a2 00 00       	call   c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e87e:	c7 04 24 b0 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ab0
c001e885:	89 c3                	mov    ebx,eax
c001e887:	e8 86 a2 00 00       	call   c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e88c:	c7 04 24 4a c3 02 c0 	mov    DWORD PTR [esp],0xc002c34a
c001e893:	e8 0d 46 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e89b:	e8 bb fc ff ff       	call   c001e55b <cleanupTerminatedTask(ThreadControlBlock*)>
c001e8a0:	c7 04 24 63 c3 02 c0 	mov    DWORD PTR [esp],0xc002c363
c001e8a7:	e8 f9 45 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e8ac:	83 c4 10             	add    esp,0x10
c001e8af:	eb ac                	jmp    c001e85d <cleanerTaskFunction(void*)+0x39>
c001e8b1:	e8 a6 f5 ff ff       	call   c001de5c <unlockScheduler()>
c001e8b6:	e8 9a f9 ff ff       	call   c001e255 <unlockStuff()>
c001e8bb:	e8 9a f5 ff ff       	call   c001de5a <lockScheduler()>
c001e8c0:	80 3d 8c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a8c,0x0
c001e8c7:	0f 84 72 ff ff ff    	je     c001e83f <cleanerTaskFunction(void*)+0x1b>
c001e8cd:	e8 8a f5 ff ff       	call   c001de5c <unlockScheduler()>
c001e8d2:	e9 75 ff ff ff       	jmp    c001e84c <cleanerTaskFunction(void*)+0x28>

c001e8d7 <terminateTask(int)>:
c001e8d7:	83 ec 14             	sub    esp,0x14
c001e8da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8e2:	83 c0 0c             	add    eax,0xc
c001e8e5:	50                   	push   eax
c001e8e6:	68 c4 c6 02 c0       	push   0xc002c6c4
c001e8eb:	e8 b5 45 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e8f0:	e8 8c f5 ff ff       	call   c001de81 <lockStuff()>
c001e8f5:	e8 60 f5 ff ff       	call   c001de5a <lockScheduler()>
c001e8fa:	c7 04 24 76 c3 02 c0 	mov    DWORD PTR [esp],0xc002c376
c001e901:	e8 9f 45 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e906:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e90a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e90f:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e912:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e917:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e91a:	5a                   	pop    edx
c001e91b:	59                   	pop    ecx
c001e91c:	50                   	push   eax
c001e91d:	68 b0 1a 03 c0       	push   0xc0031ab0
c001e922:	e8 99 a2 00 00       	call   c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e92c:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e933:	c7 04 24 90 c3 02 c0 	mov    DWORD PTR [esp],0xc002c390
c001e93a:	e8 66 45 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e93f:	83 c4 10             	add    esp,0x10
c001e942:	a1 88 1a 03 c0       	mov    eax,ds:0xc0031a88
c001e947:	85 c0                	test   eax,eax
c001e949:	74 5a                	je     c001e9a5 <terminateTask(int)+0xce>
c001e94b:	83 ec 0c             	sub    esp,0xc
c001e94e:	68 aa c3 02 c0       	push   0xc002c3aa
c001e953:	e8 4d 45 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e958:	58                   	pop    eax
c001e959:	c6 05 8c 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a8c,0x1
c001e960:	ff 35 88 1a 03 c0    	push   DWORD PTR ds:0xc0031a88
c001e966:	e8 41 fb ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001e96b:	c7 04 24 c4 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3c4
c001e972:	e8 2e 45 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e977:	83 c4 10             	add    esp,0x10
c001e97a:	e8 dd f4 ff ff       	call   c001de5c <unlockScheduler()>
c001e97f:	e8 d1 f8 ff ff       	call   c001e255 <unlockStuff()>
c001e984:	83 ec 0c             	sub    esp,0xc
c001e987:	68 fc c3 02 c0       	push   0xc002c3fc
c001e98c:	e8 14 45 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e991:	83 c4 10             	add    esp,0x10
c001e994:	e8 c1 f4 ff ff       	call   c001de5a <lockScheduler()>
c001e999:	e8 32 f8 ff ff       	call   c001e1d0 <schedule()>
c001e99e:	e8 b9 f4 ff ff       	call   c001de5c <unlockScheduler()>
c001e9a3:	eb ef                	jmp    c001e994 <terminateTask(int)+0xbd>
c001e9a5:	83 ec 0c             	sub    esp,0xc
c001e9a8:	68 de c3 02 c0       	push   0xc002c3de
c001e9ad:	e8 f3 44 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001e9b2:	83 c4 10             	add    esp,0x10
c001e9b5:	eb c3                	jmp    c001e97a <terminateTask(int)+0xa3>

c001e9b7 <Thr::terminateFromIRQ(int)>:
c001e9b7:	83 ec 18             	sub    esp,0x18
c001e9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9be:	e8 14 ff ff ff       	call   c001e8d7 <terminateTask(int)>
c001e9c3:	90                   	nop

c001e9c4 <Semaphore::release()>:
c001e9c4:	83 ec 0c             	sub    esp,0xc
c001e9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cb:	e8 b1 f4 ff ff       	call   c001de81 <lockStuff()>
c001e9d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e9d3:	85 d2                	test   edx,edx
c001e9d5:	74 1a                	je     c001e9f1 <Semaphore::release()+0x2d>
c001e9d7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e9da:	83 ec 0c             	sub    esp,0xc
c001e9dd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9e0:	52                   	push   edx
c001e9e1:	e8 c6 fa ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001e9e6:	83 c4 10             	add    esp,0x10
c001e9e9:	83 c4 0c             	add    esp,0xc
c001e9ec:	e9 64 f8 ff ff       	jmp    c001e255 <unlockStuff()>
c001e9f1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9f4:	83 c4 0c             	add    esp,0xc
c001e9f7:	e9 59 f8 ff ff       	jmp    c001e255 <unlockStuff()>

c001e9fc <__static_initialization_and_destruction_0(int, int)>:
c001e9fc:	83 ec 0c             	sub    esp,0xc
c001e9ff:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea04:	0f 85 88 00 00 00    	jne    c001ea92 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea0a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea12:	75 7e                	jne    c001ea92 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	68 c8 1a 03 c0       	push   0xc0031ac8
c001ea1c:	e8 5b a3 00 00       	call   c0028d7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea21:	83 c4 10             	add    esp,0x10
c001ea24:	83 ec 04             	sub    esp,0x4
c001ea27:	68 7c d4 02 c0       	push   0xc002d47c
c001ea2c:	68 c8 1a 03 c0       	push   0xc0031ac8
c001ea31:	68 30 8d 02 c0       	push   0xc0028d30
c001ea36:	e8 04 43 ff ff       	call   c0012d3f <__cxa_atexit>
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	83 ec 0c             	sub    esp,0xc
c001ea41:	68 bc 1a 03 c0       	push   0xc0031abc
c001ea46:	e8 31 a3 00 00       	call   c0028d7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea4b:	83 c4 10             	add    esp,0x10
c001ea4e:	83 ec 04             	sub    esp,0x4
c001ea51:	68 7c d4 02 c0       	push   0xc002d47c
c001ea56:	68 bc 1a 03 c0       	push   0xc0031abc
c001ea5b:	68 30 8d 02 c0       	push   0xc0028d30
c001ea60:	e8 da 42 ff ff       	call   c0012d3f <__cxa_atexit>
c001ea65:	83 c4 10             	add    esp,0x10
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	68 b0 1a 03 c0       	push   0xc0031ab0
c001ea70:	e8 07 a3 00 00       	call   c0028d7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea75:	83 c4 10             	add    esp,0x10
c001ea78:	83 ec 04             	sub    esp,0x4
c001ea7b:	68 7c d4 02 c0       	push   0xc002d47c
c001ea80:	68 b0 1a 03 c0       	push   0xc0031ab0
c001ea85:	68 30 8d 02 c0       	push   0xc0028d30
c001ea8a:	e8 b0 42 ff ff       	call   c0012d3f <__cxa_atexit>
c001ea8f:	83 c4 10             	add    esp,0x10
c001ea92:	90                   	nop
c001ea93:	83 c4 0c             	add    esp,0xc
c001ea96:	c3                   	ret    

c001ea97 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea97:	83 ec 0c             	sub    esp,0xc
c001ea9a:	83 ec 08             	sub    esp,0x8
c001ea9d:	68 ff ff 00 00       	push   0xffff
c001eaa2:	6a 01                	push   0x1
c001eaa4:	e8 53 ff ff ff       	call   c001e9fc <__static_initialization_and_destruction_0(int, int)>
c001eaa9:	83 c4 10             	add    esp,0x10
c001eaac:	83 c4 0c             	add    esp,0xc
c001eaaf:	c3                   	ret    

c001eab0 <Vm::inbv(unsigned short)>:
c001eab0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eab4:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eab9:	75 06                	jne    c001eac1 <Vm::inbv(unsigned short)+0x11>
c001eabb:	a0 0c 1b 03 c0       	mov    al,ds:0xc0031b0c
c001eac0:	c3                   	ret    
c001eac1:	ec                   	in     al,dx
c001eac2:	c3                   	ret    

c001eac3 <Vm::outbv(unsigned short, unsigned char)>:
c001eac3:	53                   	push   ebx
c001eac4:	83 ec 08             	sub    esp,0x8
c001eac7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eacb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eacf:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ead4:	75 38                	jne    c001eb0e <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ead6:	0f b6 c3             	movzx  eax,bl
c001ead9:	51                   	push   ecx
c001eada:	51                   	push   ecx
c001eadb:	50                   	push   eax
c001eadc:	68 e3 c6 02 c0       	push   0xc002c6e3
c001eae1:	e8 bf 43 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001eae6:	8b 15 0c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b0c
c001eaec:	83 c4 10             	add    esp,0x10
c001eaef:	8d 42 01             	lea    eax,[edx+0x1]
c001eaf2:	88 9a 20 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4e0],bl
c001eaf8:	a3 0c 1b 03 c0       	mov    ds:0xc0031b0c,eax
c001eafd:	83 f8 20             	cmp    eax,0x20
c001eb00:	75 0f                	jne    c001eb11 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb02:	c7 05 0c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b0c,0x1f
c001eb0c:	eb 03                	jmp    c001eb11 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb0e:	88 d8                	mov    al,bl
c001eb10:	ee                   	out    dx,al
c001eb11:	83 c4 08             	add    esp,0x8
c001eb14:	5b                   	pop    ebx
c001eb15:	c3                   	ret    

c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb16:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb1b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb20:	c1 e0 04             	shl    eax,0x4
c001eb23:	01 d0                	add    eax,edx
c001eb25:	c3                   	ret    

c001eb26 <Vm::getSegment(unsigned int)>:
c001eb26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb2a:	c1 e8 10             	shr    eax,0x10
c001eb2d:	c3                   	ret    

c001eb2e <Vm::getOffset(unsigned int)>:
c001eb2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb32:	c3                   	ret    

c001eb33 <Vm::mainloop2()>:
c001eb33:	83 ec 0c             	sub    esp,0xc
c001eb36:	e8 1f f3 ff ff       	call   c001de5a <lockScheduler()>
c001eb3b:	83 ec 0c             	sub    esp,0xc
c001eb3e:	c6 05 05 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b05,0x1
c001eb45:	6a 02                	push   0x2
c001eb47:	e8 9c f7 ff ff       	call   c001e2e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb51:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb55:	52                   	push   edx
c001eb56:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb5a:	52                   	push   edx
c001eb5b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb5f:	52                   	push   edx
c001eb60:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb64:	50                   	push   eax
c001eb65:	e8 90 17 fe ff       	call   c00002fa <goToVM86>
c001eb6a:	83 c4 2c             	add    esp,0x2c
c001eb6d:	c3                   	ret    

c001eb6e <Vm::mainVm8086Loop(void*)>:
c001eb6e:	83 ec 0c             	sub    esp,0xc
c001eb71:	e8 e6 f2 ff ff       	call   c001de5c <unlockScheduler()>
c001eb76:	83 c4 0c             	add    esp,0xc
c001eb79:	eb b8                	jmp    c001eb33 <Vm::mainloop2()>

c001eb7b <Vm::mainloop3(unsigned long)>:
c001eb7b:	53                   	push   ebx
c001eb7c:	83 ec 08             	sub    esp,0x8
c001eb7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb83:	e8 d2 f2 ff ff       	call   c001de5a <lockScheduler()>
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	89 1d 00 1b 03 c0    	mov    DWORD PTR ds:0xc0031b00,ebx
c001eb91:	6a 02                	push   0x2
c001eb93:	c6 05 04 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b04,0x1
c001eb9a:	e8 49 f7 ff ff       	call   c001e2e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb9f:	83 c4 18             	add    esp,0x18
c001eba2:	5b                   	pop    ebx
c001eba3:	eb 8e                	jmp    c001eb33 <Vm::mainloop2()>

c001eba5 <Vm::initialise8086()>:
c001eba5:	83 ec 0c             	sub    esp,0xc
c001eba8:	68 80 00 00 00       	push   0x80
c001ebad:	6a 00                	push   0x0
c001ebaf:	68 6e eb 01 c0       	push   0xc001eb6e
c001ebb4:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c001ebba:	e8 cd f3 ff ff       	call   c001df8c <Process::createThread(void (*)(void*), void*, int)>
c001ebbf:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ebc6:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c001ebcb:	68 00 01 00 00       	push   0x100
c001ebd0:	a1 d4 1a 03 c0       	mov    eax,ds:0xc0031ad4
c001ebd5:	6a 00                	push   0x0
c001ebd7:	6a 00                	push   0x0
c001ebd9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ebdf:	e8 48 3a ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ebe4:	83 c4 2c             	add    esp,0x2c
c001ebe7:	c3                   	ret    

c001ebe8 <Vm::finish8086()>:
c001ebe8:	53                   	push   ebx
c001ebe9:	83 ec 08             	sub    esp,0x8
c001ebec:	e8 69 f2 ff ff       	call   c001de5a <lockScheduler()>
c001ebf1:	80 3d 04 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b04,0x0
c001ebf8:	75 0c                	jne    c001ec06 <Vm::finish8086()+0x1e>
c001ebfa:	e8 d1 f5 ff ff       	call   c001e1d0 <schedule()>
c001ebff:	e8 58 f2 ff ff       	call   c001de5c <unlockScheduler()>
c001ec04:	eb e6                	jmp    c001ebec <Vm::finish8086()+0x4>
c001ec06:	83 ec 0c             	sub    esp,0xc
c001ec09:	8b 1d 00 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b00
c001ec0f:	ff 35 08 1b 03 c0    	push   DWORD PTR ds:0xc0031b08
c001ec15:	c6 05 04 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b04,0x0
c001ec1c:	e8 8b f8 ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001ec21:	e8 36 f2 ff ff       	call   c001de5c <unlockScheduler()>
c001ec26:	89 d8                	mov    eax,ebx
c001ec28:	83 c4 18             	add    esp,0x18
c001ec2b:	5b                   	pop    ebx
c001ec2c:	c3                   	ret    

c001ec2d <Vm::getOutput8086(unsigned char*)>:
c001ec2d:	83 ec 10             	sub    esp,0x10
c001ec30:	ff 35 0c 1b 03 c0    	push   DWORD PTR ds:0xc0031b0c
c001ec36:	68 20 1b 03 c0       	push   0xc0031b20
c001ec3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec3f:	e8 08 1b fe ff       	call   c000074c <memcpy>
c001ec44:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c001ec49:	c7 05 0c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b0c,0x0
c001ec53:	83 c4 1c             	add    esp,0x1c
c001ec56:	c3                   	ret    

c001ec57 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec57:	55                   	push   ebp
c001ec58:	57                   	push   edi
c001ec59:	56                   	push   esi
c001ec5a:	53                   	push   ebx
c001ec5b:	83 ec 2c             	sub    esp,0x2c
c001ec5e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec62:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec66:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec6a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec6e:	e8 e7 f1 ff ff       	call   c001de5a <lockScheduler()>
c001ec73:	a0 05 1b 03 c0       	mov    al,ds:0xc0031b05
c001ec78:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec7c:	84 c0                	test   al,al
c001ec7e:	75 0c                	jne    c001ec8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec80:	e8 4b f5 ff ff       	call   c001e1d0 <schedule()>
c001ec85:	e8 d2 f1 ff ff       	call   c001de5c <unlockScheduler()>
c001ec8a:	eb e2                	jmp    c001ec6e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec8c:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001ec91:	c7 05 0c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b0c,0x0
c001ec9b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec9f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eca3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eca7:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ecab:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ecaf:	50                   	push   eax
c001ecb0:	6a 20                	push   0x20
c001ecb2:	6a 00                	push   0x0
c001ecb4:	68 20 1b 03 c0       	push   0xc0031b20
c001ecb9:	e8 c2 1a fe ff       	call   c0000780 <memset>
c001ecbe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ecc5:	e8 81 0b ff ff       	call   c000f84b <malloc>
c001ecca:	83 c4 0c             	add    esp,0xc
c001eccd:	89 c7                	mov    edi,eax
c001eccf:	ff 35 d4 1a 03 c0    	push   DWORD PTR ds:0xc0031ad4
c001ecd5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ecd9:	50                   	push   eax
c001ecda:	e8 1f 47 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001ecdf:	83 c4 10             	add    esp,0x10
c001ece2:	85 ff                	test   edi,edi
c001ece4:	75 0a                	jne    c001ecf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ece6:	83 ec 0c             	sub    esp,0xc
c001ece9:	68 ff c6 02 c0       	push   0xc002c6ff
c001ecee:	eb 27                	jmp    c001ed17 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ecf0:	50                   	push   eax
c001ecf1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ecf5:	50                   	push   eax
c001ecf6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecfa:	50                   	push   eax
c001ecfb:	57                   	push   edi
c001ecfc:	e8 0d 4a ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001ed01:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed06:	83 c4 10             	add    esp,0x10
c001ed09:	89 e8                	mov    eax,ebp
c001ed0b:	84 c0                	test   al,al
c001ed0d:	74 19                	je     c001ed28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed0f:	83 ec 0c             	sub    esp,0xc
c001ed12:	68 13 c7 02 c0       	push   0xc002c713
c001ed17:	e8 63 b9 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001ed1c:	31 ed                	xor    ebp,ebp
c001ed1e:	e8 39 f1 ff ff       	call   c001de5c <unlockScheduler()>
c001ed23:	83 c4 10             	add    esp,0x10
c001ed26:	eb 75                	jmp    c001ed9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed28:	50                   	push   eax
c001ed29:	50                   	push   eax
c001ed2a:	6a 01                	push   0x1
c001ed2c:	57                   	push   edi
c001ed2d:	e8 30 47 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001ed32:	83 c4 10             	add    esp,0x10
c001ed35:	85 c0                	test   eax,eax
c001ed37:	74 17                	je     c001ed50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed39:	83 ec 0c             	sub    esp,0xc
c001ed3c:	68 2c c7 02 c0       	push   0xc002c72c
c001ed41:	e8 39 b9 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001ed46:	e8 11 f1 ff ff       	call   c001de5c <unlockScheduler()>
c001ed4b:	83 c4 10             	add    esp,0x10
c001ed4e:	eb 4d                	jmp    c001ed9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed50:	0f b7 f6             	movzx  esi,si
c001ed53:	50                   	push   eax
c001ed54:	0f b7 db             	movzx  ebx,bx
c001ed57:	50                   	push   eax
c001ed58:	56                   	push   esi
c001ed59:	53                   	push   ebx
c001ed5a:	e8 b7 fd ff ff       	call   c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed5f:	5a                   	pop    edx
c001ed60:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed62:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed66:	51                   	push   ecx
c001ed67:	50                   	push   eax
c001ed68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed70:	57                   	push   edi
c001ed71:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed74:	83 c4 14             	add    esp,0x14
c001ed77:	57                   	push   edi
c001ed78:	e8 43 47 ff ff       	call   c00134c0 <File::close()>
c001ed7d:	c6 05 05 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b05,0x0
c001ed84:	e8 d3 f0 ff ff       	call   c001de5c <unlockScheduler()>
c001ed89:	59                   	pop    ecx
c001ed8a:	ff 35 08 1b 03 c0    	push   DWORD PTR ds:0xc0031b08
c001ed90:	e8 17 f7 ff ff       	call   c001e4ac <unblockTask(ThreadControlBlock*)>
c001ed95:	83 c4 10             	add    esp,0x10
c001ed98:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed9d:	83 c4 2c             	add    esp,0x2c
c001eda0:	89 e8                	mov    eax,ebp
c001eda2:	5b                   	pop    ebx
c001eda3:	5e                   	pop    esi
c001eda4:	5f                   	pop    edi
c001eda5:	5d                   	pop    ebp
c001eda6:	c3                   	ret    

c001eda7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eda7:	57                   	push   edi
c001eda8:	56                   	push   esi
c001eda9:	53                   	push   ebx
c001edaa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edb6:	83 e8 06             	sub    eax,0x6
c001edb9:	0f b7 c0             	movzx  eax,ax
c001edbc:	50                   	push   eax
c001edbd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001edc2:	50                   	push   eax
c001edc3:	e8 4e fd ff ff       	call   c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>
c001edc8:	5a                   	pop    edx
c001edc9:	5e                   	pop    esi
c001edca:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001edcd:	8d 56 fa             	lea    edx,[esi-0x6]
c001edd0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001edd6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001edd9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eddc:	83 c2 02             	add    edx,0x2
c001eddf:	66 89 10             	mov    WORD PTR [eax],dx
c001ede2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ede5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ede9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001edec:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001edf0:	89 d6                	mov    esi,edx
c001edf2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edf8:	66 81 e6 ff fd       	and    si,0xfdff
c001edfd:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ee01:	74 07                	je     c001ee0a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee03:	89 d6                	mov    esi,edx
c001ee05:	66 81 ce 00 02       	or     si,0x200
c001ee0a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee13:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee17:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee1f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee22:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee2a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee2d:	5b                   	pop    ebx
c001ee2e:	5e                   	pop    esi
c001ee2f:	5f                   	pop    edi
c001ee30:	c3                   	ret    

c001ee31 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee31:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee36:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee3b:	c1 e0 04             	shl    eax,0x4
c001ee3e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee41:	c3                   	ret    

c001ee42 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee4c:	c1 e0 04             	shl    eax,0x4
c001ee4f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee53:	c3                   	ret    

c001ee54 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee59:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee5e:	c1 e0 04             	shl    eax,0x4
c001ee61:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee64:	c3                   	ret    

c001ee65 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee65:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee6a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee6f:	c1 e0 04             	shl    eax,0x4
c001ee72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee76:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee79:	c3                   	ret    

c001ee7a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee84:	c1 e0 04             	shl    eax,0x4
c001ee87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee8b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee8f:	c3                   	ret    

c001ee90 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee90:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee95:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee9a:	c1 e0 04             	shl    eax,0x4
c001ee9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eea1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eea4:	c3                   	ret    

c001eea5 <Vm::faultHandler(regs*)>:
c001eea5:	55                   	push   ebp
c001eea6:	57                   	push   edi
c001eea7:	56                   	push   esi
c001eea8:	53                   	push   ebx
c001eea9:	83 ec 1c             	sub    esp,0x1c
c001eeac:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eeb0:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eeb3:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eeb6:	0f b7 c1             	movzx  eax,cx
c001eeb9:	50                   	push   eax
c001eeba:	0f b7 c3             	movzx  eax,bx
c001eebd:	c1 e3 04             	shl    ebx,0x4
c001eec0:	50                   	push   eax
c001eec1:	e8 50 fc ff ff       	call   c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>
c001eec6:	5a                   	pop    edx
c001eec7:	89 c5                	mov    ebp,eax
c001eec9:	5e                   	pop    esi
c001eeca:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eece:	50                   	push   eax
c001eecf:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eed3:	50                   	push   eax
c001eed4:	e8 3d fc ff ff       	call   c001eb16 <Vm::realToLinear(unsigned short, unsigned short)>
c001eed9:	01 cb                	add    ebx,ecx
c001eedb:	89 c6                	mov    esi,eax
c001eedd:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eee1:	50                   	push   eax
c001eee2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eee6:	50                   	push   eax
c001eee7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eeeb:	50                   	push   eax
c001eeec:	55                   	push   ebp
c001eeed:	53                   	push   ebx
c001eeee:	b3 06                	mov    bl,0x6
c001eef0:	68 45 c7 02 c0       	push   0xc002c745
c001eef5:	e8 ab 3f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001eefa:	83 c4 20             	add    esp,0x20
c001eefd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef02:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef07:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef0b:	3c 9d                	cmp    al,0x9d
c001ef0d:	0f 84 d7 02 00 00    	je     c001f1ea <Vm::faultHandler(regs*)+0x345>
c001ef13:	0f 87 a3 00 00 00    	ja     c001efbc <Vm::faultHandler(regs*)+0x117>
c001ef19:	3c 66                	cmp    al,0x66
c001ef1b:	0f 84 15 02 00 00    	je     c001f136 <Vm::faultHandler(regs*)+0x291>
c001ef21:	77 5f                	ja     c001ef82 <Vm::faultHandler(regs*)+0xdd>
c001ef23:	3c 36                	cmp    al,0x36
c001ef25:	0f 84 f1 01 00 00    	je     c001f11c <Vm::faultHandler(regs*)+0x277>
c001ef2b:	77 28                	ja     c001ef55 <Vm::faultHandler(regs*)+0xb0>
c001ef2d:	3c 26                	cmp    al,0x26
c001ef2f:	0f 84 99 01 00 00    	je     c001f0ce <Vm::faultHandler(regs*)+0x229>
c001ef35:	3c 2e                	cmp    al,0x2e
c001ef37:	0f 85 3b 07 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001ef3d:	83 ec 0c             	sub    esp,0xc
c001ef40:	31 db                	xor    ebx,ebx
c001ef42:	68 5a c7 02 c0       	push   0xc002c75a
c001ef47:	e8 59 3f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001ef4c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef4f:	83 c4 10             	add    esp,0x10
c001ef52:	45                   	inc    ebp
c001ef53:	eb b2                	jmp    c001ef07 <Vm::faultHandler(regs*)+0x62>
c001ef55:	3c 64                	cmp    al,0x64
c001ef57:	0f 84 8b 01 00 00    	je     c001f0e8 <Vm::faultHandler(regs*)+0x243>
c001ef5d:	0f 87 9f 01 00 00    	ja     c001f102 <Vm::faultHandler(regs*)+0x25d>
c001ef63:	3c 3e                	cmp    al,0x3e
c001ef65:	0f 85 0d 07 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001ef6b:	83 ec 0c             	sub    esp,0xc
c001ef6e:	b3 01                	mov    bl,0x1
c001ef70:	68 5e c7 02 c0       	push   0xc002c75e
c001ef75:	e8 2b 3f ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001ef7a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	eb d0                	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001ef82:	3c 6d                	cmp    al,0x6d
c001ef84:	0f 84 af 03 00 00    	je     c001f339 <Vm::faultHandler(regs*)+0x494>
c001ef8a:	77 15                	ja     c001efa1 <Vm::faultHandler(regs*)+0xfc>
c001ef8c:	3c 67                	cmp    al,0x67
c001ef8e:	0f 84 bf 01 00 00    	je     c001f153 <Vm::faultHandler(regs*)+0x2ae>
c001ef94:	3c 6c                	cmp    al,0x6c
c001ef96:	0f 84 3f 03 00 00    	je     c001f2db <Vm::faultHandler(regs*)+0x436>
c001ef9c:	e9 d7 06 00 00       	jmp    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001efa1:	3c 6f                	cmp    al,0x6f
c001efa3:	0f 84 a4 04 00 00    	je     c001f44d <Vm::faultHandler(regs*)+0x5a8>
c001efa9:	0f 82 11 04 00 00    	jb     c001f3c0 <Vm::faultHandler(regs*)+0x51b>
c001efaf:	3c 9c                	cmp    al,0x9c
c001efb1:	0f 84 ba 01 00 00    	je     c001f171 <Vm::faultHandler(regs*)+0x2cc>
c001efb7:	e9 bc 06 00 00       	jmp    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001efbc:	3c ec                	cmp    al,0xec
c001efbe:	0f 84 24 06 00 00    	je     c001f5e8 <Vm::faultHandler(regs*)+0x743>
c001efc4:	0f 87 93 00 00 00    	ja     c001f05d <Vm::faultHandler(regs*)+0x1b8>
c001efca:	3c e4                	cmp    al,0xe4
c001efcc:	0f 84 5c 05 00 00    	je     c001f52e <Vm::faultHandler(regs*)+0x689>
c001efd2:	77 6a                	ja     c001f03e <Vm::faultHandler(regs*)+0x199>
c001efd4:	3c cd                	cmp    al,0xcd
c001efd6:	0f 84 7e 02 00 00    	je     c001f25a <Vm::faultHandler(regs*)+0x3b5>
c001efdc:	3c cf                	cmp    al,0xcf
c001efde:	0f 85 94 06 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001efe4:	83 ec 0c             	sub    esp,0xc
c001efe7:	68 a2 c7 02 c0       	push   0xc002c7a2
c001efec:	e8 b4 3e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001eff1:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eff4:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eff7:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001effb:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001effe:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f002:	0d 00 02 02 00       	or     eax,0x20200
c001f007:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f00a:	56                   	push   esi
c001f00b:	53                   	push   ebx
c001f00c:	52                   	push   edx
c001f00d:	68 a8 c7 02 c0       	push   0xc002c7a8
c001f012:	e8 8e 3e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f017:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f01b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f021:	66 c1 e8 09          	shr    ax,0x9
c001f025:	83 e0 01             	and    eax,0x1
c001f028:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f02b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f02e:	83 c0 06             	add    eax,0x6
c001f031:	25 ff ff 00 00       	and    eax,0xffff
c001f036:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f039:	e9 95 02 00 00       	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x42e>
c001f03e:	3c e6                	cmp    al,0xe6
c001f040:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f044:	0f 84 4e 05 00 00    	je     c001f598 <Vm::faultHandler(regs*)+0x6f3>
c001f04a:	0f 82 0a 05 00 00    	jb     c001f55a <Vm::faultHandler(regs*)+0x6b5>
c001f050:	3c e7                	cmp    al,0xe7
c001f052:	0f 84 69 05 00 00    	je     c001f5c1 <Vm::faultHandler(regs*)+0x71c>
c001f058:	e9 1b 06 00 00       	jmp    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001f05d:	3c ef                	cmp    al,0xef
c001f05f:	0f 84 e6 05 00 00    	je     c001f64b <Vm::faultHandler(regs*)+0x7a6>
c001f065:	77 37                	ja     c001f09e <Vm::faultHandler(regs*)+0x1f9>
c001f067:	3c ed                	cmp    al,0xed
c001f069:	0f 84 a3 05 00 00    	je     c001f612 <Vm::faultHandler(regs*)+0x76d>
c001f06f:	3c ee                	cmp    al,0xee
c001f071:	0f 85 01 06 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001f077:	52                   	push   edx
c001f078:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f07b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f07e:	68 43 c8 02 c0       	push   0xc002c843
c001f083:	e8 1d 3e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f088:	59                   	pop    ecx
c001f089:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f08d:	5b                   	pop    ebx
c001f08e:	50                   	push   eax
c001f08f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f093:	50                   	push   eax
c001f094:	e8 2a fa ff ff       	call   c001eac3 <Vm::outbv(unsigned short, unsigned char)>
c001f099:	e9 a5 05 00 00       	jmp    c001f643 <Vm::faultHandler(regs*)+0x79e>
c001f09e:	3c fa                	cmp    al,0xfa
c001f0a0:	0f 84 f7 01 00 00    	je     c001f29d <Vm::faultHandler(regs*)+0x3f8>
c001f0a6:	3c fb                	cmp    al,0xfb
c001f0a8:	0f 84 0a 02 00 00    	je     c001f2b8 <Vm::faultHandler(regs*)+0x413>
c001f0ae:	3c f3                	cmp    al,0xf3
c001f0b0:	0f 85 c2 05 00 00    	jne    c001f678 <Vm::faultHandler(regs*)+0x7d3>
c001f0b6:	83 ec 0c             	sub    esp,0xc
c001f0b9:	68 7b c7 02 c0       	push   0xc002c77b
c001f0be:	e8 e2 3d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f0c3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c6:	83 c4 10             	add    esp,0x10
c001f0c9:	e9 84 fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f0ce:	83 ec 0c             	sub    esp,0xc
c001f0d1:	b3 02                	mov    bl,0x2
c001f0d3:	68 56 c7 02 c0       	push   0xc002c756
c001f0d8:	e8 c8 3d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f0dd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0e0:	83 c4 10             	add    esp,0x10
c001f0e3:	e9 6a fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f0e8:	83 ec 0c             	sub    esp,0xc
c001f0eb:	b3 03                	mov    bl,0x3
c001f0ed:	68 62 c7 02 c0       	push   0xc002c762
c001f0f2:	e8 ae 3d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f0f7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0fa:	83 c4 10             	add    esp,0x10
c001f0fd:	e9 50 fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f102:	83 ec 0c             	sub    esp,0xc
c001f105:	b3 04                	mov    bl,0x4
c001f107:	68 66 c7 02 c0       	push   0xc002c766
c001f10c:	e8 94 3d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f111:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f114:	83 c4 10             	add    esp,0x10
c001f117:	e9 36 fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f11c:	83 ec 0c             	sub    esp,0xc
c001f11f:	b3 05                	mov    bl,0x5
c001f121:	68 6a c7 02 c0       	push   0xc002c76a
c001f126:	e8 7a 3d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f12b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f12e:	83 c4 10             	add    esp,0x10
c001f131:	e9 1c fe ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f136:	83 ec 0c             	sub    esp,0xc
c001f139:	68 6e c7 02 c0       	push   0xc002c76e
c001f13e:	e8 62 3d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f143:	83 c4 10             	add    esp,0x10
c001f146:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f149:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f14e:	e9 ff fd ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f153:	50                   	push   eax
c001f154:	50                   	push   eax
c001f155:	6a 01                	push   0x1
c001f157:	68 73 c7 02 c0       	push   0xc002c773
c001f15c:	e8 44 3d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f161:	83 c4 10             	add    esp,0x10
c001f164:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f167:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f16c:	e9 e1 fd ff ff       	jmp    c001ef52 <Vm::faultHandler(regs*)+0xad>
c001f171:	83 ec 0c             	sub    esp,0xc
c001f174:	68 81 c7 02 c0       	push   0xc002c781
c001f179:	e8 27 3d ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f17e:	83 c4 10             	add    esp,0x10
c001f181:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f184:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f189:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f18c:	74 2f                	je     c001f1bd <Vm::faultHandler(regs*)+0x318>
c001f18e:	83 ea 04             	sub    edx,0x4
c001f191:	25 ff 0d 00 00       	and    eax,0xdff
c001f196:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f19c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f19f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a8:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1ac:	0f 84 bf 04 00 00    	je     c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f1b2:	80 cc 02             	or     ah,0x2
c001f1b5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1b8:	e9 b4 04 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f1bd:	83 ea 02             	sub    edx,0x2
c001f1c0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1c6:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1c9:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1d3:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1d7:	74 05                	je     c001f1de <Vm::faultHandler(regs*)+0x339>
c001f1d9:	80 cc 02             	or     ah,0x2
c001f1dc:	eb 03                	jmp    c001f1e1 <Vm::faultHandler(regs*)+0x33c>
c001f1de:	80 e4 fd             	and    ah,0xfd
c001f1e1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1e5:	e9 87 04 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	68 88 c7 02 c0       	push   0xc002c788
c001f1f2:	e8 ae 3c ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f1f7:	83 c4 10             	add    esp,0x10
c001f1fa:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1ff:	74 28                	je     c001f229 <Vm::faultHandler(regs*)+0x384>
c001f201:	8b 06                	mov    eax,DWORD PTR [esi]
c001f203:	25 ff 0d 00 00       	and    eax,0xdff
c001f208:	0d 00 02 02 00       	or     eax,0x20200
c001f20d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f210:	8b 06                	mov    eax,DWORD PTR [esi]
c001f212:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f218:	c1 e8 09             	shr    eax,0x9
c001f21b:	83 e0 01             	and    eax,0x1
c001f21e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f221:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f224:	83 c0 04             	add    eax,0x4
c001f227:	eb 24                	jmp    c001f24d <Vm::faultHandler(regs*)+0x3a8>
c001f229:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f22c:	0d 00 02 02 00       	or     eax,0x20200
c001f231:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f234:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f237:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f23d:	66 c1 e8 09          	shr    ax,0x9
c001f241:	83 e0 01             	and    eax,0x1
c001f244:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f247:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f24a:	83 c0 02             	add    eax,0x2
c001f24d:	25 ff ff 00 00       	and    eax,0xffff
c001f252:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f255:	e9 17 04 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f25a:	53                   	push   ebx
c001f25b:	53                   	push   ebx
c001f25c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f260:	50                   	push   eax
c001f261:	68 8e c7 02 c0       	push   0xc002c78e
c001f266:	e8 3a 3c ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f26b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	3c ee                	cmp    al,0xee
c001f274:	75 10                	jne    c001f286 <Vm::faultHandler(regs*)+0x3e1>
c001f276:	83 ec 0c             	sub    esp,0xc
c001f279:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f27c:	e8 fa f8 ff ff       	call   c001eb7b <Vm::mainloop3(unsigned long)>
c001f281:	e9 c0 03 00 00       	jmp    c001f646 <Vm::faultHandler(regs*)+0x7a1>
c001f286:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f28a:	83 ec 0c             	sub    esp,0xc
c001f28d:	53                   	push   ebx
c001f28e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f292:	53                   	push   ebx
c001f293:	55                   	push   ebp
c001f294:	50                   	push   eax
c001f295:	57                   	push   edi
c001f296:	e8 0c fb ff ff       	call   c001eda7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f29b:	eb 36                	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x42e>
c001f29d:	83 ec 0c             	sub    esp,0xc
c001f2a0:	68 98 c7 02 c0       	push   0xc002c798
c001f2a5:	e8 fb 3b ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f2aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2af:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2b3:	e9 8b 03 00 00       	jmp    c001f643 <Vm::faultHandler(regs*)+0x79e>
c001f2b8:	83 ec 0c             	sub    esp,0xc
c001f2bb:	68 9d c7 02 c0       	push   0xc002c79d
c001f2c0:	e8 e0 3b ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f2c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2ca:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f2ce:	e9 70 03 00 00       	jmp    c001f643 <Vm::faultHandler(regs*)+0x79e>
c001f2d3:	83 c4 20             	add    esp,0x20
c001f2d6:	e9 99 03 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x7cf>
c001f2db:	83 ec 0c             	sub    esp,0xc
c001f2de:	68 db c7 02 c0       	push   0xc002c7db
c001f2e3:	e8 bd 3b ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f2e8:	83 c4 10             	add    esp,0x10
c001f2eb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2ee:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2f3:	74 0d                	je     c001f302 <Vm::faultHandler(regs*)+0x45d>
c001f2f5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2fc:	0f 87 9e 01 00 00    	ja     c001f4a0 <Vm::faultHandler(regs*)+0x5fb>
c001f302:	83 ec 0c             	sub    esp,0xc
c001f305:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f309:	0f b7 db             	movzx  ebx,bx
c001f30c:	50                   	push   eax
c001f30d:	e8 9e f7 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f312:	83 c4 0c             	add    esp,0xc
c001f315:	0f b6 c0             	movzx  eax,al
c001f318:	50                   	push   eax
c001f319:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f31d:	50                   	push   eax
c001f31e:	53                   	push   ebx
c001f31f:	e8 41 fb ff ff       	call   c001ee65 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f324:	83 c4 10             	add    esp,0x10
c001f327:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f32a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f32e:	74 03                	je     c001f333 <Vm::faultHandler(regs*)+0x48e>
c001f330:	48                   	dec    eax
c001f331:	eb 01                	jmp    c001f334 <Vm::faultHandler(regs*)+0x48f>
c001f333:	40                   	inc    eax
c001f334:	0f b7 c0             	movzx  eax,ax
c001f337:	eb 7f                	jmp    c001f3b8 <Vm::faultHandler(regs*)+0x513>
c001f339:	83 ec 0c             	sub    esp,0xc
c001f33c:	68 0d c8 02 c0       	push   0xc002c80d
c001f341:	e8 5f 3b ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f346:	83 c4 10             	add    esp,0x10
c001f349:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f34c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f351:	74 0d                	je     c001f360 <Vm::faultHandler(regs*)+0x4bb>
c001f353:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f35a:	0f 87 40 01 00 00    	ja     c001f4a0 <Vm::faultHandler(regs*)+0x5fb>
c001f360:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f363:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f367:	0f b7 db             	movzx  ebx,bx
c001f36a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f36f:	74 20                	je     c001f391 <Vm::faultHandler(regs*)+0x4ec>
c001f371:	ed                   	in     eax,dx
c001f372:	51                   	push   ecx
c001f373:	50                   	push   eax
c001f374:	56                   	push   esi
c001f375:	53                   	push   ebx
c001f376:	e8 15 fb ff ff       	call   c001ee90 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f37b:	83 c4 10             	add    esp,0x10
c001f37e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f381:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f385:	74 05                	je     c001f38c <Vm::faultHandler(regs*)+0x4e7>
c001f387:	83 e8 04             	sub    eax,0x4
c001f38a:	eb 27                	jmp    c001f3b3 <Vm::faultHandler(regs*)+0x50e>
c001f38c:	83 c0 04             	add    eax,0x4
c001f38f:	eb 22                	jmp    c001f3b3 <Vm::faultHandler(regs*)+0x50e>
c001f391:	66 ed                	in     ax,dx
c001f393:	0f b7 c0             	movzx  eax,ax
c001f396:	52                   	push   edx
c001f397:	50                   	push   eax
c001f398:	56                   	push   esi
c001f399:	53                   	push   ebx
c001f39a:	e8 db fa ff ff       	call   c001ee7a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f39f:	83 c4 10             	add    esp,0x10
c001f3a2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3a5:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3a9:	74 05                	je     c001f3b0 <Vm::faultHandler(regs*)+0x50b>
c001f3ab:	83 e8 02             	sub    eax,0x2
c001f3ae:	eb 03                	jmp    c001f3b3 <Vm::faultHandler(regs*)+0x50e>
c001f3b0:	83 c0 02             	add    eax,0x2
c001f3b3:	25 ff ff 00 00       	and    eax,0xffff
c001f3b8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f3bb:	e9 b1 02 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f3c0:	83 ec 0c             	sub    esp,0xc
c001f3c3:	4b                   	dec    ebx
c001f3c4:	68 13 c8 02 c0       	push   0xc002c813
c001f3c9:	e8 d7 3a ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f3ce:	83 c4 10             	add    esp,0x10
c001f3d1:	80 fb 05             	cmp    bl,0x5
c001f3d4:	77 0a                	ja     c001f3e0 <Vm::faultHandler(regs*)+0x53b>
c001f3d6:	0f b6 db             	movzx  ebx,bl
c001f3d9:	ff 24 9d 84 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd377c]
c001f3e0:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3e4:	eb 1b                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3e6:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3ea:	eb 15                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3ec:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3f0:	eb 0f                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3f2:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3f6:	eb 09                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3f8:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3fb:	eb 04                	jmp    c001f401 <Vm::faultHandler(regs*)+0x55c>
c001f3fd:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f401:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f406:	74 0d                	je     c001f415 <Vm::faultHandler(regs*)+0x570>
c001f408:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f40f:	0f 87 8b 00 00 00    	ja     c001f4a0 <Vm::faultHandler(regs*)+0x5fb>
c001f415:	53                   	push   ebx
c001f416:	53                   	push   ebx
c001f417:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f41b:	52                   	push   edx
c001f41c:	50                   	push   eax
c001f41d:	e8 0f fa ff ff       	call   c001ee31 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f422:	5e                   	pop    esi
c001f423:	0f b6 c0             	movzx  eax,al
c001f426:	5d                   	pop    ebp
c001f427:	50                   	push   eax
c001f428:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f42c:	50                   	push   eax
c001f42d:	e8 91 f6 ff ff       	call   c001eac3 <Vm::outbv(unsigned short, unsigned char)>
c001f432:	83 c4 10             	add    esp,0x10
c001f435:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f438:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f43c:	74 03                	je     c001f441 <Vm::faultHandler(regs*)+0x59c>
c001f43e:	48                   	dec    eax
c001f43f:	eb 01                	jmp    c001f442 <Vm::faultHandler(regs*)+0x59d>
c001f441:	40                   	inc    eax
c001f442:	0f b7 c0             	movzx  eax,ax
c001f445:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f448:	e9 24 02 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f44d:	83 ec 0c             	sub    esp,0xc
c001f450:	4b                   	dec    ebx
c001f451:	68 13 c8 02 c0       	push   0xc002c813
c001f456:	e8 4a 3a ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f45b:	83 c4 10             	add    esp,0x10
c001f45e:	80 fb 05             	cmp    bl,0x5
c001f461:	77 0a                	ja     c001f46d <Vm::faultHandler(regs*)+0x5c8>
c001f463:	0f b6 db             	movzx  ebx,bl
c001f466:	ff 24 9d 9c c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3764]
c001f46d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f471:	eb 1b                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f473:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f477:	eb 15                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f479:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f47d:	eb 0f                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f47f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f483:	eb 09                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f485:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f488:	eb 04                	jmp    c001f48e <Vm::faultHandler(regs*)+0x5e9>
c001f48a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f48e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f491:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f496:	74 39                	je     c001f4d1 <Vm::faultHandler(regs*)+0x62c>
c001f498:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f49e:	76 31                	jbe    c001f4d1 <Vm::faultHandler(regs*)+0x62c>
c001f4a0:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4a4:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4a8:	51                   	push   ecx
c001f4a9:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4ad:	51                   	push   ecx
c001f4ae:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4b2:	51                   	push   ecx
c001f4b3:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4b7:	51                   	push   ecx
c001f4b8:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4bc:	52                   	push   edx
c001f4bd:	50                   	push   eax
c001f4be:	50                   	push   eax
c001f4bf:	68 e0 c7 02 c0       	push   0xc002c7e0
c001f4c4:	e8 dc 39 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f4c9:	83 c4 20             	add    esp,0x20
c001f4cc:	e9 fb 01 00 00       	jmp    c001f6cc <Vm::faultHandler(regs*)+0x827>
c001f4d1:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f4d4:	0f b7 d3             	movzx  edx,bx
c001f4d7:	81 e6 00 04 00 00    	and    esi,0x400
c001f4dd:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4e0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4e5:	74 1d                	je     c001f504 <Vm::faultHandler(regs*)+0x65f>
c001f4e7:	51                   	push   ecx
c001f4e8:	51                   	push   ecx
c001f4e9:	52                   	push   edx
c001f4ea:	50                   	push   eax
c001f4eb:	e8 64 f9 ff ff       	call   c001ee54 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4f0:	83 c4 10             	add    esp,0x10
c001f4f3:	89 ea                	mov    edx,ebp
c001f4f5:	ef                   	out    dx,eax
c001f4f6:	85 f6                	test   esi,esi
c001f4f8:	74 05                	je     c001f4ff <Vm::faultHandler(regs*)+0x65a>
c001f4fa:	83 eb 04             	sub    ebx,0x4
c001f4fd:	eb 21                	jmp    c001f520 <Vm::faultHandler(regs*)+0x67b>
c001f4ff:	83 c3 04             	add    ebx,0x4
c001f502:	eb 1c                	jmp    c001f520 <Vm::faultHandler(regs*)+0x67b>
c001f504:	51                   	push   ecx
c001f505:	51                   	push   ecx
c001f506:	52                   	push   edx
c001f507:	50                   	push   eax
c001f508:	e8 35 f9 ff ff       	call   c001ee42 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f50d:	83 c4 10             	add    esp,0x10
c001f510:	89 ea                	mov    edx,ebp
c001f512:	66 ef                	out    dx,ax
c001f514:	85 f6                	test   esi,esi
c001f516:	74 05                	je     c001f51d <Vm::faultHandler(regs*)+0x678>
c001f518:	83 eb 02             	sub    ebx,0x2
c001f51b:	eb 03                	jmp    c001f520 <Vm::faultHandler(regs*)+0x67b>
c001f51d:	83 c3 02             	add    ebx,0x2
c001f520:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f526:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f529:	e9 43 01 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f52e:	53                   	push   ebx
c001f52f:	53                   	push   ebx
c001f530:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f534:	50                   	push   eax
c001f535:	68 19 c8 02 c0       	push   0xc002c819
c001f53a:	e8 66 39 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f53f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f546:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f54a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f54d:	e8 5e f5 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f552:	0f b6 c0             	movzx  eax,al
c001f555:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f558:	eb 5e                	jmp    c001f5b8 <Vm::faultHandler(regs*)+0x713>
c001f55a:	51                   	push   ecx
c001f55b:	51                   	push   ecx
c001f55c:	53                   	push   ebx
c001f55d:	68 1f c8 02 c0       	push   0xc002c81f
c001f562:	e8 3e 39 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f567:	83 c4 10             	add    esp,0x10
c001f56a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f56f:	74 07                	je     c001f578 <Vm::faultHandler(regs*)+0x6d3>
c001f571:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f575:	ed                   	in     eax,dx
c001f576:	eb 14                	jmp    c001f58c <Vm::faultHandler(regs*)+0x6e7>
c001f578:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f57b:	66 31 db             	xor    bx,bx
c001f57e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f581:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f585:	66 ed                	in     ax,dx
c001f587:	0f b7 c0             	movzx  eax,ax
c001f58a:	09 d8                	or     eax,ebx
c001f58c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f58f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f593:	e9 dc 00 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x7cf>
c001f598:	50                   	push   eax
c001f599:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f59c:	53                   	push   ebx
c001f59d:	68 25 c8 02 c0       	push   0xc002c825
c001f5a2:	e8 fe 38 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f5a7:	58                   	pop    eax
c001f5a8:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5ac:	5a                   	pop    edx
c001f5ad:	50                   	push   eax
c001f5ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5b2:	50                   	push   eax
c001f5b3:	e8 0b f5 ff ff       	call   c001eac3 <Vm::outbv(unsigned short, unsigned char)>
c001f5b8:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5bc:	e9 85 00 00 00       	jmp    c001f646 <Vm::faultHandler(regs*)+0x7a1>
c001f5c1:	50                   	push   eax
c001f5c2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5c5:	53                   	push   ebx
c001f5c6:	68 2e c8 02 c0       	push   0xc002c82e
c001f5cb:	e8 d5 38 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f5d0:	83 c4 10             	add    esp,0x10
c001f5d3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5d7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5dc:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5df:	74 03                	je     c001f5e4 <Vm::faultHandler(regs*)+0x73f>
c001f5e1:	ef                   	out    dx,eax
c001f5e2:	eb ab                	jmp    c001f58f <Vm::faultHandler(regs*)+0x6ea>
c001f5e4:	66 ef                	out    dx,ax
c001f5e6:	eb a7                	jmp    c001f58f <Vm::faultHandler(regs*)+0x6ea>
c001f5e8:	55                   	push   ebp
c001f5e9:	55                   	push   ebp
c001f5ea:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5ed:	68 37 c8 02 c0       	push   0xc002c837
c001f5f2:	e8 ae 38 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f5f7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5fe:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f602:	89 04 24             	mov    DWORD PTR [esp],eax
c001f605:	e8 a6 f4 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f60a:	0f b6 c0             	movzx  eax,al
c001f60d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f610:	eb 31                	jmp    c001f643 <Vm::faultHandler(regs*)+0x79e>
c001f612:	56                   	push   esi
c001f613:	56                   	push   esi
c001f614:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f617:	68 3d c8 02 c0       	push   0xc002c83d
c001f61c:	e8 84 38 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f621:	83 c4 10             	add    esp,0x10
c001f624:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f627:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f62c:	74 03                	je     c001f631 <Vm::faultHandler(regs*)+0x78c>
c001f62e:	ed                   	in     eax,dx
c001f62f:	eb 0d                	jmp    c001f63e <Vm::faultHandler(regs*)+0x799>
c001f631:	66 ed                	in     ax,dx
c001f633:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f636:	0f b7 c0             	movzx  eax,ax
c001f639:	66 31 d2             	xor    dx,dx
c001f63c:	09 d0                	or     eax,edx
c001f63e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f641:	eb 2e                	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f643:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f646:	83 c4 10             	add    esp,0x10
c001f649:	eb 29                	jmp    c001f674 <Vm::faultHandler(regs*)+0x7cf>
c001f64b:	50                   	push   eax
c001f64c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f64f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f652:	68 4c c8 02 c0       	push   0xc002c84c
c001f657:	e8 49 38 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f65c:	83 c4 10             	add    esp,0x10
c001f65f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f662:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f667:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f66a:	74 03                	je     c001f66f <Vm::faultHandler(regs*)+0x7ca>
c001f66c:	ef                   	out    dx,eax
c001f66d:	eb 02                	jmp    c001f671 <Vm::faultHandler(regs*)+0x7cc>
c001f66f:	66 ef                	out    dx,ax
c001f671:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f674:	b0 01                	mov    al,0x1
c001f676:	eb 56                	jmp    c001f6ce <Vm::faultHandler(regs*)+0x829>
c001f678:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f67c:	51                   	push   ecx
c001f67d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f681:	51                   	push   ecx
c001f682:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f686:	51                   	push   ecx
c001f687:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f68b:	51                   	push   ecx
c001f68c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f690:	52                   	push   edx
c001f691:	50                   	push   eax
c001f692:	50                   	push   eax
c001f693:	68 55 c8 02 c0       	push   0xc002c855
c001f698:	e8 08 38 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c001f69d:	83 c4 20             	add    esp,0x20
c001f6a0:	83 ec 0c             	sub    esp,0xc
c001f6a3:	6a 60                	push   0x60
c001f6a5:	e8 06 f4 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f6aa:	83 c4 10             	add    esp,0x10
c001f6ad:	3c 1c                	cmp    al,0x1c
c001f6af:	74 04                	je     c001f6b5 <Vm::faultHandler(regs*)+0x810>
c001f6b1:	3c 5a                	cmp    al,0x5a
c001f6b3:	75 eb                	jne    c001f6a0 <Vm::faultHandler(regs*)+0x7fb>
c001f6b5:	3c 1c                	cmp    al,0x1c
c001f6b7:	74 04                	je     c001f6bd <Vm::faultHandler(regs*)+0x818>
c001f6b9:	3c 5a                	cmp    al,0x5a
c001f6bb:	75 0f                	jne    c001f6cc <Vm::faultHandler(regs*)+0x827>
c001f6bd:	83 ec 0c             	sub    esp,0xc
c001f6c0:	6a 60                	push   0x60
c001f6c2:	e8 e9 f3 ff ff       	call   c001eab0 <Vm::inbv(unsigned short)>
c001f6c7:	83 c4 10             	add    esp,0x10
c001f6ca:	eb e9                	jmp    c001f6b5 <Vm::faultHandler(regs*)+0x810>
c001f6cc:	31 c0                	xor    eax,eax
c001f6ce:	83 c4 1c             	add    esp,0x1c
c001f6d1:	5b                   	pop    ebx
c001f6d2:	5e                   	pop    esi
c001f6d3:	5f                   	pop    edi
c001f6d4:	5d                   	pop    ebp
c001f6d5:	c3                   	ret    

c001f6d6 <Vm::fpuInternalTo32(unsigned long long)>:
c001f6d6:	57                   	push   edi
c001f6d7:	56                   	push   esi
c001f6d8:	53                   	push   ebx
c001f6d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e1:	89 d6                	mov    esi,edx
c001f6e3:	89 d7                	mov    edi,edx
c001f6e5:	89 c1                	mov    ecx,eax
c001f6e7:	c1 ef 14             	shr    edi,0x14
c001f6ea:	89 d3                	mov    ebx,edx
c001f6ec:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6f2:	31 d2                	xor    edx,edx
c001f6f4:	89 f8                	mov    eax,edi
c001f6f6:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6fc:	bf ff 00 00 00       	mov    edi,0xff
c001f701:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f706:	83 d2 ff             	adc    edx,0xffffffff
c001f709:	39 c7                	cmp    edi,eax
c001f70b:	bf 00 00 00 00       	mov    edi,0x0
c001f710:	19 d7                	sbb    edi,edx
c001f712:	72 15                	jb     c001f729 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f714:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f718:	c1 e0 17             	shl    eax,0x17
c001f71b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f721:	09 f1                	or     ecx,esi
c001f723:	09 c1                	or     ecx,eax
c001f725:	89 cf                	mov    edi,ecx
c001f727:	eb 02                	jmp    c001f72b <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f729:	31 ff                	xor    edi,edi
c001f72b:	89 f8                	mov    eax,edi
c001f72d:	5b                   	pop    ebx
c001f72e:	5e                   	pop    esi
c001f72f:	5f                   	pop    edi
c001f730:	c3                   	ret    

c001f731 <Vm::fpuInternalTo64(unsigned long long)>:
c001f731:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f739:	c3                   	ret    

c001f73a <Vm::fpu32ToInternal(unsigned int)>:
c001f73a:	57                   	push   edi
c001f73b:	31 ff                	xor    edi,edi
c001f73d:	56                   	push   esi
c001f73e:	53                   	push   ebx
c001f73f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f743:	89 cb                	mov    ebx,ecx
c001f745:	89 ce                	mov    esi,ecx
c001f747:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f74d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f753:	c1 e9 17             	shr    ecx,0x17
c001f756:	89 f0                	mov    eax,esi
c001f758:	0f b6 d1             	movzx  edx,cl
c001f75b:	81 c2 80 03 00 00    	add    edx,0x380
c001f761:	89 d1                	mov    ecx,edx
c001f763:	89 fa                	mov    edx,edi
c001f765:	c1 e1 14             	shl    ecx,0x14
c001f768:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f76c:	c1 e0 1d             	shl    eax,0x1d
c001f76f:	89 d7                	mov    edi,edx
c001f771:	89 c6                	mov    esi,eax
c001f773:	89 ca                	mov    edx,ecx
c001f775:	89 f0                	mov    eax,esi
c001f777:	09 fa                	or     edx,edi
c001f779:	09 da                	or     edx,ebx
c001f77b:	5b                   	pop    ebx
c001f77c:	5e                   	pop    esi
c001f77d:	5f                   	pop    edi
c001f77e:	c3                   	ret    

c001f77f <Vm::fpu64ToInternal(unsigned long long)>:
c001f77f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f783:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f787:	c3                   	ret    

c001f788 <Vm::fpuFloatToLong(unsigned long long)>:
c001f788:	57                   	push   edi
c001f789:	31 c0                	xor    eax,eax
c001f78b:	56                   	push   esi
c001f78c:	31 d2                	xor    edx,edx
c001f78e:	53                   	push   ebx
c001f78f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f793:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f797:	89 d9                	mov    ecx,ebx
c001f799:	c1 e9 14             	shr    ecx,0x14
c001f79c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7a2:	89 cf                	mov    edi,ecx
c001f7a4:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7aa:	78 33                	js     c001f7df <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7ac:	89 d9                	mov    ecx,ebx
c001f7ae:	89 f0                	mov    eax,esi
c001f7b0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7b6:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f7bc:	89 ca                	mov    edx,ecx
c001f7be:	b9 34 00 00 00       	mov    ecx,0x34
c001f7c3:	29 f9                	sub    ecx,edi
c001f7c5:	0f ad d0             	shrd   eax,edx,cl
c001f7c8:	d3 fa                	sar    edx,cl
c001f7ca:	f6 c1 20             	test   cl,0x20
c001f7cd:	74 05                	je     c001f7d4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7cf:	89 d0                	mov    eax,edx
c001f7d1:	c1 fa 1f             	sar    edx,0x1f
c001f7d4:	85 db                	test   ebx,ebx
c001f7d6:	79 07                	jns    c001f7df <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7d8:	f7 d8                	neg    eax
c001f7da:	83 d2 00             	adc    edx,0x0
c001f7dd:	f7 da                	neg    edx
c001f7df:	5b                   	pop    ebx
c001f7e0:	5e                   	pop    esi
c001f7e1:	5f                   	pop    edi
c001f7e2:	c3                   	ret    

c001f7e3 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7e3:	57                   	push   edi
c001f7e4:	31 c9                	xor    ecx,ecx
c001f7e6:	56                   	push   esi
c001f7e7:	53                   	push   ebx
c001f7e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7ec:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7f0:	0f ba e7 14          	bt     edi,0x14
c001f7f4:	72 07                	jb     c001f7fd <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7f6:	01 f6                	add    esi,esi
c001f7f8:	11 ff                	adc    edi,edi
c001f7fa:	41                   	inc    ecx
c001f7fb:	eb f3                	jmp    c001f7f0 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7fd:	89 fa                	mov    edx,edi
c001f7ff:	89 f0                	mov    eax,esi
c001f801:	bb 33 04 00 00       	mov    ebx,0x433
c001f806:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f80c:	29 cb                	sub    ebx,ecx
c001f80e:	89 d9                	mov    ecx,ebx
c001f810:	5b                   	pop    ebx
c001f811:	c1 e1 14             	shl    ecx,0x14
c001f814:	5e                   	pop    esi
c001f815:	09 ca                	or     edx,ecx
c001f817:	5f                   	pop    edi
c001f818:	c3                   	ret    

c001f819 <Vm::fpuLongToFloat(long long)>:
c001f819:	56                   	push   esi
c001f81a:	31 c0                	xor    eax,eax
c001f81c:	53                   	push   ebx
c001f81d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f821:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f825:	39 c8                	cmp    eax,ecx
c001f827:	19 d8                	sbb    eax,ebx
c001f829:	7d 04                	jge    c001f82f <Vm::fpuLongToFloat(long long)+0x16>
c001f82b:	31 f6                	xor    esi,esi
c001f82d:	eb 0c                	jmp    c001f83b <Vm::fpuLongToFloat(long long)+0x22>
c001f82f:	f7 d9                	neg    ecx
c001f831:	be 01 00 00 00       	mov    esi,0x1
c001f836:	83 d3 00             	adc    ebx,0x0
c001f839:	f7 db                	neg    ebx
c001f83b:	31 c0                	xor    eax,eax
c001f83d:	0f ba e3 14          	bt     ebx,0x14
c001f841:	72 07                	jb     c001f84a <Vm::fpuLongToFloat(long long)+0x31>
c001f843:	01 c9                	add    ecx,ecx
c001f845:	11 db                	adc    ebx,ebx
c001f847:	40                   	inc    eax
c001f848:	eb f3                	jmp    c001f83d <Vm::fpuLongToFloat(long long)+0x24>
c001f84a:	ba 33 04 00 00       	mov    edx,0x433
c001f84f:	29 c2                	sub    edx,eax
c001f851:	89 c8                	mov    eax,ecx
c001f853:	c1 e2 14             	shl    edx,0x14
c001f856:	89 d9                	mov    ecx,ebx
c001f858:	89 f3                	mov    ebx,esi
c001f85a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f860:	09 ca                	or     edx,ecx
c001f862:	84 db                	test   bl,bl
c001f864:	74 06                	je     c001f86c <Vm::fpuLongToFloat(long long)+0x53>
c001f866:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f86c:	5b                   	pop    ebx
c001f86d:	5e                   	pop    esi
c001f86e:	c3                   	ret    

c001f86f <Vm::fpuGet0()>:
c001f86f:	31 c0                	xor    eax,eax
c001f871:	31 d2                	xor    edx,edx
c001f873:	c3                   	ret    

c001f874 <Vm::fpuGet1()>:
c001f874:	b8 01 00 00 00       	mov    eax,0x1
c001f879:	31 d2                	xor    edx,edx
c001f87b:	c3                   	ret    

c001f87c <Vm::fpuGetPi()>:
c001f87c:	b8 03 00 00 00       	mov    eax,0x3
c001f881:	31 d2                	xor    edx,edx
c001f883:	c3                   	ret    

c001f884 <Vm::fpuGetLog2E()>:
c001f884:	83 ec 18             	sub    esp,0x18
c001f887:	68 b4 c8 02 c0       	push   0xc002c8b4
c001f88c:	e8 ee ad ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001f891:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f896:	31 d2                	xor    edx,edx
c001f898:	83 c4 1c             	add    esp,0x1c
c001f89b:	c3                   	ret    

c001f89c <Vm::fpuGetLogE2()>:
c001f89c:	83 ec 18             	sub    esp,0x18
c001f89f:	68 c0 c8 02 c0       	push   0xc002c8c0
c001f8a4:	e8 d6 ad ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001f8a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8ae:	31 d2                	xor    edx,edx
c001f8b0:	83 c4 1c             	add    esp,0x1c
c001f8b3:	c3                   	ret    

c001f8b4 <Vm::fpuGetLog210()>:
c001f8b4:	83 ec 18             	sub    esp,0x18
c001f8b7:	68 cc c8 02 c0       	push   0xc002c8cc
c001f8bc:	e8 be ad ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001f8c1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8c6:	31 d2                	xor    edx,edx
c001f8c8:	83 c4 1c             	add    esp,0x1c
c001f8cb:	c3                   	ret    

c001f8cc <Vm::fpuGetLog102()>:
c001f8cc:	83 ec 18             	sub    esp,0x18
c001f8cf:	68 d9 c8 02 c0       	push   0xc002c8d9
c001f8d4:	e8 a6 ad ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001f8d9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8de:	31 d2                	xor    edx,edx
c001f8e0:	83 c4 1c             	add    esp,0x1c
c001f8e3:	c3                   	ret    

c001f8e4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8e8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8f0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8f4:	0f 92 c0             	setb   al
c001f8f7:	c3                   	ret    

c001f8f8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f900:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f904:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f908:	09 c2                	or     edx,eax
c001f90a:	0f 94 c0             	sete   al
c001f90d:	c3                   	ret    

c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f90e:	57                   	push   edi
c001f90f:	56                   	push   esi
c001f910:	53                   	push   ebx
c001f911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f915:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f919:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f91d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f921:	57                   	push   edi
c001f922:	56                   	push   esi
c001f923:	53                   	push   ebx
c001f924:	51                   	push   ecx
c001f925:	e8 ce ff ff ff       	call   c001f8f8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f92a:	83 c4 10             	add    esp,0x10
c001f92d:	88 c2                	mov    dl,al
c001f92f:	31 c0                	xor    eax,eax
c001f931:	84 d2                	test   dl,dl
c001f933:	75 0c                	jne    c001f941 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f935:	57                   	push   edi
c001f936:	56                   	push   esi
c001f937:	53                   	push   ebx
c001f938:	51                   	push   ecx
c001f939:	e8 a6 ff ff ff       	call   c001f8e4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f93e:	83 c4 10             	add    esp,0x10
c001f941:	83 e0 01             	and    eax,0x1
c001f944:	5b                   	pop    ebx
c001f945:	88 c1                	mov    cl,al
c001f947:	83 e2 01             	and    edx,0x1
c001f94a:	a0 41 1b 03 c0       	mov    al,ds:0xc0031b41
c001f94f:	c1 e2 06             	shl    edx,0x6
c001f952:	83 e0 ba             	and    eax,0xffffffba
c001f955:	5e                   	pop    esi
c001f956:	09 c8                	or     eax,ecx
c001f958:	5f                   	pop    edi
c001f959:	09 d0                	or     eax,edx
c001f95b:	a2 41 1b 03 c0       	mov    ds:0xc0031b41,al
c001f960:	c3                   	ret    

c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f961:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f965:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f969:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f96d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f971:	c3                   	ret    

c001f972 <Vm::fpuAbs(unsigned long long)>:
c001f972:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f976:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f97a:	c3                   	ret    

c001f97b <Vm::fpuChs(unsigned long long)>:
c001f97b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f97f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f983:	f7 d8                	neg    eax
c001f985:	83 d2 00             	adc    edx,0x0
c001f988:	f7 da                	neg    edx
c001f98a:	c3                   	ret    

c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f98b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f98f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f994:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f998:	eb c7                	jmp    c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f99a:	53                   	push   ebx
c001f99b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f99f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9ab:	0f af ca             	imul   ecx,edx
c001f9ae:	0f af d8             	imul   ebx,eax
c001f9b1:	f7 e2                	mul    edx
c001f9b3:	01 d9                	add    ecx,ebx
c001f9b5:	5b                   	pop    ebx
c001f9b6:	01 ca                	add    edx,ecx
c001f9b8:	c3                   	ret    

c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9b9:	83 ec 0c             	sub    esp,0xc
c001f9bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9cc:	e8 9f 70 00 00       	call   c0026a70 <__udivdi3>
c001f9d1:	83 c4 1c             	add    esp,0x1c
c001f9d4:	c3                   	ret    

c001f9d5 <Vm::fpuSquare(unsigned long long)>:
c001f9d5:	50                   	push   eax
c001f9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9de:	52                   	push   edx
c001f9df:	50                   	push   eax
c001f9e0:	52                   	push   edx
c001f9e1:	50                   	push   eax
c001f9e2:	e8 b3 ff ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9e7:	83 c4 14             	add    esp,0x14
c001f9ea:	c3                   	ret    

c001f9eb <Vm::fpuGetReg(int)>:
c001f9eb:	83 ec 0c             	sub    esp,0xc
c001f9ee:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9f3:	76 10                	jbe    c001fa05 <Vm::fpuGetReg(int)+0x1a>
c001f9f5:	83 ec 0c             	sub    esp,0xc
c001f9f8:	68 e6 c8 02 c0       	push   0xc002c8e6
c001f9fd:	e8 7d ac ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001fa02:	83 c4 10             	add    esp,0x10
c001fa05:	a0 41 1b 03 c0       	mov    al,ds:0xc0031b41
c001fa0a:	b9 08 00 00 00       	mov    ecx,0x8
c001fa0f:	c0 e8 03             	shr    al,0x3
c001fa12:	83 e0 07             	and    eax,0x7
c001fa15:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa19:	99                   	cdq    
c001fa1a:	f7 f9                	idiv   ecx
c001fa1c:	8b 04 d5 44 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce4bc]
c001fa23:	8b 14 d5 48 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce4b8]
c001fa2a:	83 c4 0c             	add    esp,0xc
c001fa2d:	c3                   	ret    

c001fa2e <Vm::fpuSetReg(int, unsigned long long)>:
c001fa2e:	57                   	push   edi
c001fa2f:	56                   	push   esi
c001fa30:	52                   	push   edx
c001fa31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa35:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa39:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa3e:	76 10                	jbe    c001fa50 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa40:	83 ec 0c             	sub    esp,0xc
c001fa43:	68 f9 c8 02 c0       	push   0xc002c8f9
c001fa48:	e8 32 ac ff ff       	call   c001a67f <Krnl::panic(char const*)>
c001fa4d:	83 c4 10             	add    esp,0x10
c001fa50:	a0 41 1b 03 c0       	mov    al,ds:0xc0031b41
c001fa55:	b9 08 00 00 00       	mov    ecx,0x8
c001fa5a:	c0 e8 03             	shr    al,0x3
c001fa5d:	83 e0 07             	and    eax,0x7
c001fa60:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa64:	99                   	cdq    
c001fa65:	f7 f9                	idiv   ecx
c001fa67:	89 34 d5 44 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce4bc],esi
c001fa6e:	89 3c d5 48 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce4b8],edi
c001fa75:	58                   	pop    eax
c001fa76:	5e                   	pop    esi
c001fa77:	5f                   	pop    edi
c001fa78:	c3                   	ret    

c001fa79 <Vm::fpuPush(unsigned long long)>:
c001fa79:	a0 41 1b 03 c0       	mov    al,ds:0xc0031b41
c001fa7e:	c0 e8 03             	shr    al,0x3
c001fa81:	83 e0 07             	and    eax,0x7
c001fa84:	83 c0 07             	add    eax,0x7
c001fa87:	88 c2                	mov    dl,al
c001fa89:	83 e0 07             	and    eax,0x7
c001fa8c:	83 e2 07             	and    edx,0x7
c001fa8f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa96:	8a 15 41 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b41
c001fa9c:	83 e2 c7             	and    edx,0xffffffc7
c001fa9f:	09 ca                	or     edx,ecx
c001faa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faa5:	88 15 41 1b 03 c0    	mov    BYTE PTR ds:0xc0031b41,dl
c001faab:	89 0c c5 48 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce4b8],ecx
c001fab2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fab6:	89 14 c5 44 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce4bc],edx
c001fabd:	a1 84 1b 03 c0       	mov    eax,ds:0xc0031b84
c001fac2:	83 f8 08             	cmp    eax,0x8
c001fac5:	75 08                	jne    c001facf <Vm::fpuPush(unsigned long long)+0x56>
c001fac7:	80 0d 40 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b40,0x40
c001face:	c3                   	ret    
c001facf:	40                   	inc    eax
c001fad0:	a3 84 1b 03 c0       	mov    ds:0xc0031b84,eax
c001fad5:	c3                   	ret    

c001fad6 <Vm::fpuPop()>:
c001fad6:	8a 0d 41 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031b41
c001fadc:	53                   	push   ebx
c001fadd:	c0 e9 03             	shr    cl,0x3
c001fae0:	8a 1d 41 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031b41
c001fae6:	83 e1 07             	and    ecx,0x7
c001fae9:	83 e3 c7             	and    ebx,0xffffffc7
c001faec:	8b 04 cd 44 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce4bc]
c001faf3:	8b 14 cd 48 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce4b8]
c001fafa:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb01:	83 e1 38             	and    ecx,0x38
c001fb04:	09 d9                	or     ecx,ebx
c001fb06:	88 0d 41 1b 03 c0    	mov    BYTE PTR ds:0xc0031b41,cl
c001fb0c:	8b 0d 84 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b84
c001fb12:	85 c9                	test   ecx,ecx
c001fb14:	74 09                	je     c001fb1f <Vm::fpuPop()+0x49>
c001fb16:	49                   	dec    ecx
c001fb17:	89 0d 84 1b 03 c0    	mov    DWORD PTR ds:0xc0031b84,ecx
c001fb1d:	eb 07                	jmp    c001fb26 <Vm::fpuPop()+0x50>
c001fb1f:	80 0d 40 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b40,0x40
c001fb26:	5b                   	pop    ebx
c001fb27:	c3                   	ret    

c001fb28 <Vm::x87Handler(regs*)>:
c001fb28:	55                   	push   ebp
c001fb29:	57                   	push   edi
c001fb2a:	56                   	push   esi
c001fb2b:	53                   	push   ebx
c001fb2c:	83 ec 1c             	sub    esp,0x1c
c001fb2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb33:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb38:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb3b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb43:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb47:	50                   	push   eax
c001fb48:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb4c:	50                   	push   eax
c001fb4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb51:	50                   	push   eax
c001fb52:	53                   	push   ebx
c001fb53:	e8 ee a1 ff ff       	call   c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb58:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb5b:	83 c4 10             	add    esp,0x10
c001fb5e:	89 c6                	mov    esi,eax
c001fb60:	80 fa d9             	cmp    dl,0xd9
c001fb63:	0f 85 52 01 00 00    	jne    c001fcbb <Vm::x87Handler(regs*)+0x193>
c001fb69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb6d:	8d 50 20             	lea    edx,[eax+0x20]
c001fb70:	80 fa 0e             	cmp    dl,0xe
c001fb73:	0f 87 86 00 00 00    	ja     c001fbff <Vm::x87Handler(regs*)+0xd7>
c001fb79:	0f b6 d2             	movzx  edx,dl
c001fb7c:	ff 24 95 0c c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd36f4]
c001fb83:	e8 e7 fc ff ff       	call   c001f86f <Vm::fpuGet0()>
c001fb88:	eb 05                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fb8a:	e8 e5 fc ff ff       	call   c001f874 <Vm::fpuGet1()>
c001fb8f:	57                   	push   edi
c001fb90:	57                   	push   edi
c001fb91:	52                   	push   edx
c001fb92:	50                   	push   eax
c001fb93:	e8 e1 fe ff ff       	call   c001fa79 <Vm::fpuPush(unsigned long long)>
c001fb98:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb9c:	83 c4 10             	add    esp,0x10
c001fb9f:	b0 01                	mov    al,0x1
c001fba1:	e9 e3 09 00 00       	jmp    c0020589 <Vm::x87Handler(regs*)+0xa61>
c001fba6:	83 ec 0c             	sub    esp,0xc
c001fba9:	6a 00                	push   0x0
c001fbab:	e8 3b fe ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fbb0:	59                   	pop    ecx
c001fbb1:	5e                   	pop    esi
c001fbb2:	52                   	push   edx
c001fbb3:	50                   	push   eax
c001fbb4:	e8 c2 fd ff ff       	call   c001f97b <Vm::fpuChs(unsigned long long)>
c001fbb9:	eb 13                	jmp    c001fbce <Vm::x87Handler(regs*)+0xa6>
c001fbbb:	83 ec 0c             	sub    esp,0xc
c001fbbe:	6a 00                	push   0x0
c001fbc0:	e8 26 fe ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fbc5:	5f                   	pop    edi
c001fbc6:	5d                   	pop    ebp
c001fbc7:	52                   	push   edx
c001fbc8:	50                   	push   eax
c001fbc9:	e8 a4 fd ff ff       	call   c001f972 <Vm::fpuAbs(unsigned long long)>
c001fbce:	83 c4 0c             	add    esp,0xc
c001fbd1:	52                   	push   edx
c001fbd2:	50                   	push   eax
c001fbd3:	6a 00                	push   0x0
c001fbd5:	e8 54 fe ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c001fbda:	eb bc                	jmp    c001fb98 <Vm::x87Handler(regs*)+0x70>
c001fbdc:	e8 d3 fc ff ff       	call   c001f8b4 <Vm::fpuGetLog210()>
c001fbe1:	eb ac                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbe3:	e8 9c fc ff ff       	call   c001f884 <Vm::fpuGetLog2E()>
c001fbe8:	eb a5                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbea:	e8 8d fc ff ff       	call   c001f87c <Vm::fpuGetPi()>
c001fbef:	eb 9e                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbf1:	e8 d6 fc ff ff       	call   c001f8cc <Vm::fpuGetLog102()>
c001fbf6:	eb 97                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbf8:	e8 9f fc ff ff       	call   c001f89c <Vm::fpuGetLogE2()>
c001fbfd:	eb 90                	jmp    c001fb8f <Vm::x87Handler(regs*)+0x67>
c001fbff:	8d 50 40             	lea    edx,[eax+0x40]
c001fc02:	80 fa 07             	cmp    dl,0x7
c001fc05:	77 15                	ja     c001fc1c <Vm::x87Handler(regs*)+0xf4>
c001fc07:	83 ec 0c             	sub    esp,0xc
c001fc0a:	2d c0 00 00 00       	sub    eax,0xc0
c001fc0f:	50                   	push   eax
c001fc10:	e8 d6 fd ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fc15:	59                   	pop    ecx
c001fc16:	5e                   	pop    esi
c001fc17:	e9 75 ff ff ff       	jmp    c001fb91 <Vm::x87Handler(regs*)+0x69>
c001fc1c:	8d 50 38             	lea    edx,[eax+0x38]
c001fc1f:	80 fa 07             	cmp    dl,0x7
c001fc22:	77 3c                	ja     c001fc60 <Vm::x87Handler(regs*)+0x138>
c001fc24:	83 ec 0c             	sub    esp,0xc
c001fc27:	2d c8 00 00 00       	sub    eax,0xc8
c001fc2c:	50                   	push   eax
c001fc2d:	e8 b9 fd ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fc32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc39:	89 c6                	mov    esi,eax
c001fc3b:	89 d7                	mov    edi,edx
c001fc3d:	e8 a9 fd ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fc42:	83 c4 0c             	add    esp,0xc
c001fc45:	52                   	push   edx
c001fc46:	50                   	push   eax
c001fc47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc4b:	2d c8 00 00 00       	sub    eax,0xc8
c001fc50:	50                   	push   eax
c001fc51:	e8 d8 fd ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c001fc56:	83 c4 0c             	add    esp,0xc
c001fc59:	57                   	push   edi
c001fc5a:	56                   	push   esi
c001fc5b:	e9 73 ff ff ff       	jmp    c001fbd3 <Vm::x87Handler(regs*)+0xab>
c001fc60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc64:	84 d2                	test   dl,dl
c001fc66:	75 0f                	jne    c001fc77 <Vm::x87Handler(regs*)+0x14f>
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	ff 36                	push   DWORD PTR [esi]
c001fc6d:	e8 c8 fa ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c001fc72:	e9 bf 00 00 00       	jmp    c001fd36 <Vm::x87Handler(regs*)+0x20e>
c001fc77:	80 fa 03             	cmp    dl,0x3
c001fc7a:	75 13                	jne    c001fc8f <Vm::x87Handler(regs*)+0x167>
c001fc7c:	e8 55 fe ff ff       	call   c001fad6 <Vm::fpuPop()>
c001fc81:	55                   	push   ebp
c001fc82:	55                   	push   ebp
c001fc83:	52                   	push   edx
c001fc84:	50                   	push   eax
c001fc85:	e8 4c fa ff ff       	call   c001f6d6 <Vm::fpuInternalTo32(unsigned long long)>
c001fc8a:	e9 88 00 00 00       	jmp    c001fd17 <Vm::x87Handler(regs*)+0x1ef>
c001fc8f:	80 fa 05             	cmp    dl,0x5
c001fc92:	75 0e                	jne    c001fca2 <Vm::x87Handler(regs*)+0x17a>
c001fc94:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc97:	66 a3 42 1b 03 c0    	mov    ds:0xc0031b42,ax
c001fc9d:	e9 df 00 00 00       	jmp    c001fd81 <Vm::x87Handler(regs*)+0x259>
c001fca2:	31 c0                	xor    eax,eax
c001fca4:	80 fa 07             	cmp    dl,0x7
c001fca7:	0f 85 dc 08 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c001fcad:	66 a1 42 1b 03 c0    	mov    ax,ds:0xc0031b42
c001fcb3:	66 89 06             	mov    WORD PTR [esi],ax
c001fcb6:	e9 c6 00 00 00       	jmp    c001fd81 <Vm::x87Handler(regs*)+0x259>
c001fcbb:	80 fa d8             	cmp    dl,0xd8
c001fcbe:	0f 84 c9 00 00 00    	je     c001fd8d <Vm::x87Handler(regs*)+0x265>
c001fcc4:	80 fa dc             	cmp    dl,0xdc
c001fcc7:	0f 84 0d 02 00 00    	je     c001feda <Vm::x87Handler(regs*)+0x3b2>
c001fccd:	80 fa de             	cmp    dl,0xde
c001fcd0:	0f 84 cd 02 00 00    	je     c001ffa3 <Vm::x87Handler(regs*)+0x47b>
c001fcd6:	80 fa dd             	cmp    dl,0xdd
c001fcd9:	0f 84 5f 04 00 00    	je     c002013e <Vm::x87Handler(regs*)+0x616>
c001fcdf:	80 fa da             	cmp    dl,0xda
c001fce2:	0f 84 24 05 00 00    	je     c002020c <Vm::x87Handler(regs*)+0x6e4>
c001fce8:	80 fa df             	cmp    dl,0xdf
c001fceb:	0f 84 68 05 00 00    	je     c0020259 <Vm::x87Handler(regs*)+0x731>
c001fcf1:	31 c0                	xor    eax,eax
c001fcf3:	80 fa db             	cmp    dl,0xdb
c001fcf6:	0f 85 8d 08 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c001fcfc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd00:	80 fa 03             	cmp    dl,0x3
c001fd03:	0f 85 70 06 00 00    	jne    c0020379 <Vm::x87Handler(regs*)+0x851>
c001fd09:	e8 c8 fd ff ff       	call   c001fad6 <Vm::fpuPop()>
c001fd0e:	55                   	push   ebp
c001fd0f:	55                   	push   ebp
c001fd10:	52                   	push   edx
c001fd11:	50                   	push   eax
c001fd12:	e8 71 fa ff ff       	call   c001f788 <Vm::fpuFloatToLong(unsigned long long)>
c001fd17:	83 c4 10             	add    esp,0x10
c001fd1a:	89 06                	mov    DWORD PTR [esi],eax
c001fd1c:	eb 63                	jmp    c001fd81 <Vm::x87Handler(regs*)+0x259>
c001fd1e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd22:	84 d2                	test   dl,dl
c001fd24:	0f 85 e6 05 00 00    	jne    c0020310 <Vm::x87Handler(regs*)+0x7e8>
c001fd2a:	57                   	push   edi
c001fd2b:	57                   	push   edi
c001fd2c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd2f:	ff 36                	push   DWORD PTR [esi]
c001fd31:	e8 49 fa ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c001fd36:	5e                   	pop    esi
c001fd37:	5f                   	pop    edi
c001fd38:	52                   	push   edx
c001fd39:	50                   	push   eax
c001fd3a:	e8 3a fd ff ff       	call   c001fa79 <Vm::fpuPush(unsigned long long)>
c001fd3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd43:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd46:	e9 51 fe ff ff       	jmp    c001fb9c <Vm::x87Handler(regs*)+0x74>
c001fd4b:	80 fa 03             	cmp    dl,0x3
c001fd4e:	0f 85 d7 06 00 00    	jne    c002042b <Vm::x87Handler(regs*)+0x903>
c001fd54:	57                   	push   edi
c001fd55:	57                   	push   edi
c001fd56:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd59:	ff 36                	push   DWORD PTR [esi]
c001fd5b:	e8 1f fa ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c001fd60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd67:	89 c6                	mov    esi,eax
c001fd69:	89 d7                	mov    edi,edx
c001fd6b:	e8 7b fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fd70:	57                   	push   edi
c001fd71:	56                   	push   esi
c001fd72:	52                   	push   edx
c001fd73:	50                   	push   eax
c001fd74:	e8 95 fb ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd79:	83 c4 20             	add    esp,0x20
c001fd7c:	e8 55 fd ff ff       	call   c001fad6 <Vm::fpuPop()>
c001fd81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd85:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd88:	e9 12 fe ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x77>
c001fd8d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd91:	8d 50 40             	lea    edx,[eax+0x40]
c001fd94:	80 fa 07             	cmp    dl,0x7
c001fd97:	77 29                	ja     c001fdc2 <Vm::x87Handler(regs*)+0x29a>
c001fd99:	83 ec 0c             	sub    esp,0xc
c001fd9c:	2d c0 00 00 00       	sub    eax,0xc0
c001fda1:	50                   	push   eax
c001fda2:	e8 44 fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fda7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdae:	89 c6                	mov    esi,eax
c001fdb0:	89 d7                	mov    edi,edx
c001fdb2:	e8 34 fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fdb7:	57                   	push   edi
c001fdb8:	56                   	push   esi
c001fdb9:	52                   	push   edx
c001fdba:	50                   	push   eax
c001fdbb:	e8 a1 fb ff ff       	call   c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdc0:	eb 2f                	jmp    c001fdf1 <Vm::x87Handler(regs*)+0x2c9>
c001fdc2:	8d 50 38             	lea    edx,[eax+0x38]
c001fdc5:	80 fa 07             	cmp    dl,0x7
c001fdc8:	77 2f                	ja     c001fdf9 <Vm::x87Handler(regs*)+0x2d1>
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	2d c8 00 00 00       	sub    eax,0xc8
c001fdd2:	50                   	push   eax
c001fdd3:	e8 13 fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fdd8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fddf:	89 c6                	mov    esi,eax
c001fde1:	89 d7                	mov    edi,edx
c001fde3:	e8 03 fc ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fde8:	57                   	push   edi
c001fde9:	56                   	push   esi
c001fdea:	52                   	push   edx
c001fdeb:	50                   	push   eax
c001fdec:	e8 a9 fb ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdf1:	83 c4 1c             	add    esp,0x1c
c001fdf4:	e9 d8 fd ff ff       	jmp    c001fbd1 <Vm::x87Handler(regs*)+0xa9>
c001fdf9:	8d 50 30             	lea    edx,[eax+0x30]
c001fdfc:	80 fa 07             	cmp    dl,0x7
c001fdff:	77 0d                	ja     c001fe0e <Vm::x87Handler(regs*)+0x2e6>
c001fe01:	83 ec 0c             	sub    esp,0xc
c001fe04:	2d d0 00 00 00       	sub    eax,0xd0
c001fe09:	e9 99 03 00 00       	jmp    c00201a7 <Vm::x87Handler(regs*)+0x67f>
c001fe0e:	8d 50 28             	lea    edx,[eax+0x28]
c001fe11:	80 fa 07             	cmp    dl,0x7
c001fe14:	77 0d                	ja     c001fe23 <Vm::x87Handler(regs*)+0x2fb>
c001fe16:	83 ec 0c             	sub    esp,0xc
c001fe19:	2d d8 00 00 00       	sub    eax,0xd8
c001fe1e:	e9 c0 03 00 00       	jmp    c00201e3 <Vm::x87Handler(regs*)+0x6bb>
c001fe23:	8d 50 20             	lea    edx,[eax+0x20]
c001fe26:	80 fa 07             	cmp    dl,0x7
c001fe29:	77 1b                	ja     c001fe46 <Vm::x87Handler(regs*)+0x31e>
c001fe2b:	83 ec 0c             	sub    esp,0xc
c001fe2e:	2d e0 00 00 00       	sub    eax,0xe0
c001fe33:	50                   	push   eax
c001fe34:	e8 b2 fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fe39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe40:	89 c6                	mov    esi,eax
c001fe42:	89 d7                	mov    edi,edx
c001fe44:	eb 22                	jmp    c001fe68 <Vm::x87Handler(regs*)+0x340>
c001fe46:	8d 50 18             	lea    edx,[eax+0x18]
c001fe49:	80 fa 07             	cmp    dl,0x7
c001fe4c:	77 2d                	ja     c001fe7b <Vm::x87Handler(regs*)+0x353>
c001fe4e:	83 ec 0c             	sub    esp,0xc
c001fe51:	6a 00                	push   0x0
c001fe53:	e8 93 fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fe58:	89 c6                	mov    esi,eax
c001fe5a:	89 d7                	mov    edi,edx
c001fe5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe60:	2d e8 00 00 00       	sub    eax,0xe8
c001fe65:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe68:	e8 7e fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fe6d:	57                   	push   edi
c001fe6e:	56                   	push   esi
c001fe6f:	52                   	push   edx
c001fe70:	50                   	push   eax
c001fe71:	e8 15 fb ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe76:	e9 76 ff ff ff       	jmp    c001fdf1 <Vm::x87Handler(regs*)+0x2c9>
c001fe7b:	8d 50 10             	lea    edx,[eax+0x10]
c001fe7e:	80 fa 07             	cmp    dl,0x7
c001fe81:	77 1b                	ja     c001fe9e <Vm::x87Handler(regs*)+0x376>
c001fe83:	83 ec 0c             	sub    esp,0xc
c001fe86:	2d f0 00 00 00       	sub    eax,0xf0
c001fe8b:	50                   	push   eax
c001fe8c:	e8 5a fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fe91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe98:	89 c6                	mov    esi,eax
c001fe9a:	89 d7                	mov    edi,edx
c001fe9c:	eb 22                	jmp    c001fec0 <Vm::x87Handler(regs*)+0x398>
c001fe9e:	3c f7                	cmp    al,0xf7
c001fea0:	0f 86 d1 03 00 00    	jbe    c0020277 <Vm::x87Handler(regs*)+0x74f>
c001fea6:	83 ec 0c             	sub    esp,0xc
c001fea9:	6a 00                	push   0x0
c001feab:	e8 3b fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001feb0:	89 c6                	mov    esi,eax
c001feb2:	89 d7                	mov    edi,edx
c001feb4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb8:	2d f8 00 00 00       	sub    eax,0xf8
c001febd:	89 04 24             	mov    DWORD PTR [esp],eax
c001fec0:	e8 26 fb ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fec5:	57                   	push   edi
c001fec6:	56                   	push   esi
c001fec7:	52                   	push   edx
c001fec8:	50                   	push   eax
c001fec9:	e8 eb fa ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fece:	83 c4 1c             	add    esp,0x1c
c001fed1:	52                   	push   edx
c001fed2:	50                   	push   eax
c001fed3:	6a 00                	push   0x0
c001fed5:	e9 51 02 00 00       	jmp    c002012b <Vm::x87Handler(regs*)+0x603>
c001feda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fede:	8d 50 40             	lea    edx,[eax+0x40]
c001fee1:	80 fa 07             	cmp    dl,0x7
c001fee4:	77 37                	ja     c001ff1d <Vm::x87Handler(regs*)+0x3f5>
c001fee6:	83 ec 0c             	sub    esp,0xc
c001fee9:	2d c0 00 00 00       	sub    eax,0xc0
c001feee:	50                   	push   eax
c001feef:	e8 f7 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001fef4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fefb:	89 c6                	mov    esi,eax
c001fefd:	89 d7                	mov    edi,edx
c001feff:	e8 e7 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff04:	57                   	push   edi
c001ff05:	56                   	push   esi
c001ff06:	52                   	push   edx
c001ff07:	50                   	push   eax
c001ff08:	e8 54 fa ff ff       	call   c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff0d:	83 c4 1c             	add    esp,0x1c
c001ff10:	52                   	push   edx
c001ff11:	50                   	push   eax
c001ff12:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff16:	2d c0 00 00 00       	sub    eax,0xc0
c001ff1b:	eb 3d                	jmp    c001ff5a <Vm::x87Handler(regs*)+0x432>
c001ff1d:	8d 50 38             	lea    edx,[eax+0x38]
c001ff20:	80 fa 07             	cmp    dl,0x7
c001ff23:	77 3b                	ja     c001ff60 <Vm::x87Handler(regs*)+0x438>
c001ff25:	83 ec 0c             	sub    esp,0xc
c001ff28:	2d c8 00 00 00       	sub    eax,0xc8
c001ff2d:	50                   	push   eax
c001ff2e:	e8 b8 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff3a:	89 c6                	mov    esi,eax
c001ff3c:	89 d7                	mov    edi,edx
c001ff3e:	e8 a8 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff43:	57                   	push   edi
c001ff44:	56                   	push   esi
c001ff45:	52                   	push   edx
c001ff46:	50                   	push   eax
c001ff47:	e8 4e fa ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff4c:	83 c4 1c             	add    esp,0x1c
c001ff4f:	52                   	push   edx
c001ff50:	50                   	push   eax
c001ff51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff55:	2d c8 00 00 00       	sub    eax,0xc8
c001ff5a:	50                   	push   eax
c001ff5b:	e9 75 fc ff ff       	jmp    c001fbd5 <Vm::x87Handler(regs*)+0xad>
c001ff60:	83 c0 18             	add    eax,0x18
c001ff63:	3c 07                	cmp    al,0x7
c001ff65:	0f 87 3b 04 00 00    	ja     c00203a6 <Vm::x87Handler(regs*)+0x87e>
c001ff6b:	83 ec 0c             	sub    esp,0xc
c001ff6e:	6a 00                	push   0x0
c001ff70:	e8 76 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff75:	89 c6                	mov    esi,eax
c001ff77:	89 d7                	mov    edi,edx
c001ff79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff7d:	2d e8 00 00 00       	sub    eax,0xe8
c001ff82:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff85:	e8 61 fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ff8a:	57                   	push   edi
c001ff8b:	56                   	push   esi
c001ff8c:	52                   	push   edx
c001ff8d:	50                   	push   eax
c001ff8e:	e8 f8 f9 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff93:	83 c4 1c             	add    esp,0x1c
c001ff96:	52                   	push   edx
c001ff97:	50                   	push   eax
c001ff98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff9c:	2d e8 00 00 00       	sub    eax,0xe8
c001ffa1:	eb b7                	jmp    c001ff5a <Vm::x87Handler(regs*)+0x432>
c001ffa3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa7:	8d 50 40             	lea    edx,[eax+0x40]
c001ffaa:	80 fa 07             	cmp    dl,0x7
c001ffad:	77 3a                	ja     c001ffe9 <Vm::x87Handler(regs*)+0x4c1>
c001ffaf:	83 ec 0c             	sub    esp,0xc
c001ffb2:	2d c0 00 00 00       	sub    eax,0xc0
c001ffb7:	50                   	push   eax
c001ffb8:	e8 2e fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ffbd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc4:	89 c6                	mov    esi,eax
c001ffc6:	89 d7                	mov    edi,edx
c001ffc8:	e8 1e fa ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ffcd:	57                   	push   edi
c001ffce:	56                   	push   esi
c001ffcf:	52                   	push   edx
c001ffd0:	50                   	push   eax
c001ffd1:	e8 8b f9 ff ff       	call   c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ffd6:	83 c4 1c             	add    esp,0x1c
c001ffd9:	52                   	push   edx
c001ffda:	50                   	push   eax
c001ffdb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffdf:	2d c0 00 00 00       	sub    eax,0xc0
c001ffe4:	e9 9e 01 00 00       	jmp    c0020187 <Vm::x87Handler(regs*)+0x65f>
c001ffe9:	8d 50 20             	lea    edx,[eax+0x20]
c001ffec:	80 fa 07             	cmp    dl,0x7
c001ffef:	77 3a                	ja     c002002b <Vm::x87Handler(regs*)+0x503>
c001fff1:	83 ec 0c             	sub    esp,0xc
c001fff4:	2d e0 00 00 00       	sub    eax,0xe0
c001fff9:	50                   	push   eax
c001fffa:	e8 ec f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c001ffff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020006:	89 c6                	mov    esi,eax
c0020008:	89 d7                	mov    edi,edx
c002000a:	e8 dc f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c002000f:	57                   	push   edi
c0020010:	56                   	push   esi
c0020011:	52                   	push   edx
c0020012:	50                   	push   eax
c0020013:	e8 73 f9 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020018:	83 c4 1c             	add    esp,0x1c
c002001b:	52                   	push   edx
c002001c:	50                   	push   eax
c002001d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020021:	2d e0 00 00 00       	sub    eax,0xe0
c0020026:	e9 5c 01 00 00       	jmp    c0020187 <Vm::x87Handler(regs*)+0x65f>
c002002b:	8d 50 18             	lea    edx,[eax+0x18]
c002002e:	80 fa 07             	cmp    dl,0x7
c0020031:	77 3b                	ja     c002006e <Vm::x87Handler(regs*)+0x546>
c0020033:	83 ec 0c             	sub    esp,0xc
c0020036:	6a 00                	push   0x0
c0020038:	e8 ae f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c002003d:	89 c6                	mov    esi,eax
c002003f:	89 d7                	mov    edi,edx
c0020041:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020045:	2d e8 00 00 00       	sub    eax,0xe8
c002004a:	89 04 24             	mov    DWORD PTR [esp],eax
c002004d:	e8 99 f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020052:	57                   	push   edi
c0020053:	56                   	push   esi
c0020054:	52                   	push   edx
c0020055:	50                   	push   eax
c0020056:	e8 30 f9 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c002005b:	83 c4 1c             	add    esp,0x1c
c002005e:	52                   	push   edx
c002005f:	50                   	push   eax
c0020060:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020064:	2d e8 00 00 00       	sub    eax,0xe8
c0020069:	e9 19 01 00 00       	jmp    c0020187 <Vm::x87Handler(regs*)+0x65f>
c002006e:	8d 50 38             	lea    edx,[eax+0x38]
c0020071:	80 fa 07             	cmp    dl,0x7
c0020074:	77 37                	ja     c00200ad <Vm::x87Handler(regs*)+0x585>
c0020076:	83 ec 0c             	sub    esp,0xc
c0020079:	2d c8 00 00 00       	sub    eax,0xc8
c002007e:	50                   	push   eax
c002007f:	e8 67 f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020084:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002008b:	89 c6                	mov    esi,eax
c002008d:	89 d7                	mov    edi,edx
c002008f:	e8 57 f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020094:	57                   	push   edi
c0020095:	56                   	push   esi
c0020096:	52                   	push   edx
c0020097:	50                   	push   eax
c0020098:	e8 fd f8 ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002009d:	83 c4 1c             	add    esp,0x1c
c00200a0:	52                   	push   edx
c00200a1:	50                   	push   eax
c00200a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a6:	2d c8 00 00 00       	sub    eax,0xc8
c00200ab:	eb 7d                	jmp    c002012a <Vm::x87Handler(regs*)+0x602>
c00200ad:	3c f7                	cmp    al,0xf7
c00200af:	76 38                	jbe    c00200e9 <Vm::x87Handler(regs*)+0x5c1>
c00200b1:	83 ec 0c             	sub    esp,0xc
c00200b4:	6a 00                	push   0x0
c00200b6:	e8 30 f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00200bb:	89 c6                	mov    esi,eax
c00200bd:	89 d7                	mov    edi,edx
c00200bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c3:	2d f8 00 00 00       	sub    eax,0xf8
c00200c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00200cb:	e8 1b f9 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00200d0:	57                   	push   edi
c00200d1:	56                   	push   esi
c00200d2:	52                   	push   edx
c00200d3:	50                   	push   eax
c00200d4:	e8 e0 f8 ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200d9:	83 c4 1c             	add    esp,0x1c
c00200dc:	52                   	push   edx
c00200dd:	50                   	push   eax
c00200de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e2:	2d f8 00 00 00       	sub    eax,0xf8
c00200e7:	eb 41                	jmp    c002012a <Vm::x87Handler(regs*)+0x602>
c00200e9:	8d 50 10             	lea    edx,[eax+0x10]
c00200ec:	80 fa 07             	cmp    dl,0x7
c00200ef:	0f 87 5a 01 00 00    	ja     c002024f <Vm::x87Handler(regs*)+0x727>
c00200f5:	83 ec 0c             	sub    esp,0xc
c00200f8:	2d f0 00 00 00       	sub    eax,0xf0
c00200fd:	50                   	push   eax
c00200fe:	e8 e8 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020103:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002010a:	89 c6                	mov    esi,eax
c002010c:	89 d7                	mov    edi,edx
c002010e:	e8 d8 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020113:	57                   	push   edi
c0020114:	56                   	push   esi
c0020115:	52                   	push   edx
c0020116:	50                   	push   eax
c0020117:	e8 9d f8 ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002011c:	83 c4 1c             	add    esp,0x1c
c002011f:	52                   	push   edx
c0020120:	50                   	push   eax
c0020121:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020125:	2d f0 00 00 00       	sub    eax,0xf0
c002012a:	50                   	push   eax
c002012b:	e8 fe f8 ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c0020130:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020134:	e8 9d f9 ff ff       	call   c001fad6 <Vm::fpuPop()>
c0020139:	e9 5e fa ff ff       	jmp    c001fb9c <Vm::x87Handler(regs*)+0x74>
c002013e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020142:	8d 50 30             	lea    edx,[eax+0x30]
c0020145:	80 fa 07             	cmp    dl,0x7
c0020148:	77 1d                	ja     c0020167 <Vm::x87Handler(regs*)+0x63f>
c002014a:	83 ec 0c             	sub    esp,0xc
c002014d:	6a 00                	push   0x0
c002014f:	e8 97 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020154:	83 c4 0c             	add    esp,0xc
c0020157:	52                   	push   edx
c0020158:	50                   	push   eax
c0020159:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002015d:	2d d0 00 00 00       	sub    eax,0xd0
c0020162:	e9 f3 fd ff ff       	jmp    c001ff5a <Vm::x87Handler(regs*)+0x432>
c0020167:	8d 50 28             	lea    edx,[eax+0x28]
c002016a:	80 fa 07             	cmp    dl,0x7
c002016d:	77 28                	ja     c0020197 <Vm::x87Handler(regs*)+0x66f>
c002016f:	83 ec 0c             	sub    esp,0xc
c0020172:	6a 00                	push   0x0
c0020174:	e8 72 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020179:	83 c4 0c             	add    esp,0xc
c002017c:	52                   	push   edx
c002017d:	50                   	push   eax
c002017e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020182:	2d d8 00 00 00       	sub    eax,0xd8
c0020187:	50                   	push   eax
c0020188:	e8 a1 f8 ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c002018d:	e8 44 f9 ff ff       	call   c001fad6 <Vm::fpuPop()>
c0020192:	e9 01 fa ff ff       	jmp    c001fb98 <Vm::x87Handler(regs*)+0x70>
c0020197:	8d 50 20             	lea    edx,[eax+0x20]
c002019a:	80 fa 07             	cmp    dl,0x7
c002019d:	77 30                	ja     c00201cf <Vm::x87Handler(regs*)+0x6a7>
c002019f:	83 ec 0c             	sub    esp,0xc
c00201a2:	2d e0 00 00 00       	sub    eax,0xe0
c00201a7:	50                   	push   eax
c00201a8:	e8 3e f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00201ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b4:	89 c6                	mov    esi,eax
c00201b6:	89 d7                	mov    edi,edx
c00201b8:	e8 2e f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00201bd:	57                   	push   edi
c00201be:	56                   	push   esi
c00201bf:	52                   	push   edx
c00201c0:	50                   	push   eax
c00201c1:	e8 48 f7 ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201ca:	e9 54 02 00 00       	jmp    c0020423 <Vm::x87Handler(regs*)+0x8fb>
c00201cf:	8d 50 18             	lea    edx,[eax+0x18]
c00201d2:	80 fa 07             	cmp    dl,0x7
c00201d5:	0f 87 43 fb ff ff    	ja     c001fd1e <Vm::x87Handler(regs*)+0x1f6>
c00201db:	83 ec 0c             	sub    esp,0xc
c00201de:	2d e8 00 00 00       	sub    eax,0xe8
c00201e3:	50                   	push   eax
c00201e4:	e8 02 f8 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00201e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201f0:	89 c6                	mov    esi,eax
c00201f2:	89 d7                	mov    edi,edx
c00201f4:	e8 f2 f7 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00201f9:	57                   	push   edi
c00201fa:	56                   	push   esi
c00201fb:	52                   	push   edx
c00201fc:	50                   	push   eax
c00201fd:	e8 0c f7 ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020202:	83 c4 20             	add    esp,0x20
c0020205:	e8 cc f8 ff ff       	call   c001fad6 <Vm::fpuPop()>
c002020a:	eb 62                	jmp    c002026e <Vm::x87Handler(regs*)+0x746>
c002020c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020210:	0f 85 0f 01 00 00    	jne    c0020325 <Vm::x87Handler(regs*)+0x7fd>
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	6a 01                	push   0x1
c002021b:	e8 cb f7 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020220:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020227:	89 c6                	mov    esi,eax
c0020229:	89 d7                	mov    edi,edx
c002022b:	e8 bb f7 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020230:	57                   	push   edi
c0020231:	56                   	push   esi
c0020232:	52                   	push   edx
c0020233:	50                   	push   eax
c0020234:	e8 d5 f6 ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020239:	83 c4 20             	add    esp,0x20
c002023c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020240:	e8 91 f8 ff ff       	call   c001fad6 <Vm::fpuPop()>
c0020245:	e8 8c f8 ff ff       	call   c001fad6 <Vm::fpuPop()>
c002024a:	e9 50 f9 ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x77>
c002024f:	3c d9                	cmp    al,0xd9
c0020251:	0f 85 b5 02 00 00    	jne    c002050c <Vm::x87Handler(regs*)+0x9e4>
c0020257:	eb bd                	jmp    c0020216 <Vm::x87Handler(regs*)+0x6ee>
c0020259:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002025d:	0f 85 ea 02 00 00    	jne    c002054d <Vm::x87Handler(regs*)+0xa25>
c0020263:	0f b7 05 40 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031b40
c002026a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002026e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020272:	e9 28 f9 ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x77>
c0020277:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002027b:	84 d2                	test   dl,dl
c002027d:	75 0f                	jne    c002028e <Vm::x87Handler(regs*)+0x766>
c002027f:	83 ec 0c             	sub    esp,0xc
c0020282:	ff 36                	push   DWORD PTR [esi]
c0020284:	e8 b1 f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c0020289:	e9 2c 01 00 00       	jmp    c00203ba <Vm::x87Handler(regs*)+0x892>
c002028e:	80 fa 01             	cmp    dl,0x1
c0020291:	75 0f                	jne    c00202a2 <Vm::x87Handler(regs*)+0x77a>
c0020293:	83 ec 0c             	sub    esp,0xc
c0020296:	ff 36                	push   DWORD PTR [esi]
c0020298:	e8 9d f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c002029d:	e9 81 02 00 00       	jmp    c0020523 <Vm::x87Handler(regs*)+0x9fb>
c00202a2:	80 fa 04             	cmp    dl,0x4
c00202a5:	75 0f                	jne    c00202b6 <Vm::x87Handler(regs*)+0x78e>
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	ff 36                	push   DWORD PTR [esi]
c00202ac:	e8 89 f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c00202b1:	e9 86 01 00 00       	jmp    c002043c <Vm::x87Handler(regs*)+0x914>
c00202b6:	80 fa 05             	cmp    dl,0x5
c00202b9:	75 1b                	jne    c00202d6 <Vm::x87Handler(regs*)+0x7ae>
c00202bb:	83 ec 0c             	sub    esp,0xc
c00202be:	6a 00                	push   0x0
c00202c0:	e8 26 f7 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00202c5:	89 c7                	mov    edi,eax
c00202c7:	89 d5                	mov    ebp,edx
c00202c9:	58                   	pop    eax
c00202ca:	ff 36                	push   DWORD PTR [esi]
c00202cc:	e8 69 f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c00202d1:	e9 a3 01 00 00       	jmp    c0020479 <Vm::x87Handler(regs*)+0x951>
c00202d6:	80 fa 06             	cmp    dl,0x6
c00202d9:	75 0f                	jne    c00202ea <Vm::x87Handler(regs*)+0x7c2>
c00202db:	83 ec 0c             	sub    esp,0xc
c00202de:	ff 36                	push   DWORD PTR [esi]
c00202e0:	e8 55 f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c00202e5:	e9 ae 01 00 00       	jmp    c0020498 <Vm::x87Handler(regs*)+0x970>
c00202ea:	31 c0                	xor    eax,eax
c00202ec:	80 fa 07             	cmp    dl,0x7
c00202ef:	0f 85 94 02 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c00202f5:	83 ec 0c             	sub    esp,0xc
c00202f8:	6a 00                	push   0x0
c00202fa:	e8 ec f6 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00202ff:	89 c7                	mov    edi,eax
c0020301:	89 d5                	mov    ebp,edx
c0020303:	58                   	pop    eax
c0020304:	ff 36                	push   DWORD PTR [esi]
c0020306:	e8 2f f4 ff ff       	call   c001f73a <Vm::fpu32ToInternal(unsigned int)>
c002030b:	e9 cb 01 00 00       	jmp    c00204db <Vm::x87Handler(regs*)+0x9b3>
c0020310:	80 fa 03             	cmp    dl,0x3
c0020313:	0f 85 d3 01 00 00    	jne    c00204ec <Vm::x87Handler(regs*)+0x9c4>
c0020319:	e8 b8 f7 ff ff       	call   c001fad6 <Vm::fpuPop()>
c002031e:	51                   	push   ecx
c002031f:	51                   	push   ecx
c0020320:	e9 de 01 00 00       	jmp    c0020503 <Vm::x87Handler(regs*)+0x9db>
c0020325:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020329:	80 fa 01             	cmp    dl,0x1
c002032c:	75 09                	jne    c0020337 <Vm::x87Handler(regs*)+0x80f>
c002032e:	57                   	push   edi
c002032f:	57                   	push   edi
c0020330:	8b 06                	mov    eax,DWORD PTR [esi]
c0020332:	e9 e3 01 00 00       	jmp    c002051a <Vm::x87Handler(regs*)+0x9f2>
c0020337:	80 fa 04             	cmp    dl,0x4
c002033a:	75 12                	jne    c002034e <Vm::x87Handler(regs*)+0x826>
c002033c:	31 d2                	xor    edx,edx
c002033e:	51                   	push   ecx
c002033f:	51                   	push   ecx
c0020340:	8b 06                	mov    eax,DWORD PTR [esi]
c0020342:	52                   	push   edx
c0020343:	50                   	push   eax
c0020344:	e8 d0 f4 ff ff       	call   c001f819 <Vm::fpuLongToFloat(long long)>
c0020349:	e9 ee 00 00 00       	jmp    c002043c <Vm::x87Handler(regs*)+0x914>
c002034e:	31 c0                	xor    eax,eax
c0020350:	80 fa 07             	cmp    dl,0x7
c0020353:	0f 85 30 02 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c0020359:	83 ec 0c             	sub    esp,0xc
c002035c:	6a 00                	push   0x0
c002035e:	e8 88 f6 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020363:	89 c7                	mov    edi,eax
c0020365:	89 d5                	mov    ebp,edx
c0020367:	58                   	pop    eax
c0020368:	8b 06                	mov    eax,DWORD PTR [esi]
c002036a:	5a                   	pop    edx
c002036b:	31 d2                	xor    edx,edx
c002036d:	52                   	push   edx
c002036e:	50                   	push   eax
c002036f:	e8 a5 f4 ff ff       	call   c001f819 <Vm::fpuLongToFloat(long long)>
c0020374:	e9 62 01 00 00       	jmp    c00204db <Vm::x87Handler(regs*)+0x9b3>
c0020379:	84 d2                	test   dl,dl
c002037b:	75 0d                	jne    c002038a <Vm::x87Handler(regs*)+0x862>
c002037d:	31 d2                	xor    edx,edx
c002037f:	55                   	push   ebp
c0020380:	55                   	push   ebp
c0020381:	8b 06                	mov    eax,DWORD PTR [esi]
c0020383:	52                   	push   edx
c0020384:	50                   	push   eax
c0020385:	e9 d3 01 00 00       	jmp    c002055d <Vm::x87Handler(regs*)+0xa35>
c002038a:	31 c0                	xor    eax,eax
c002038c:	80 fa 02             	cmp    dl,0x2
c002038f:	0f 85 f4 01 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c0020395:	83 ec 0c             	sub    esp,0xc
c0020398:	6a 00                	push   0x0
c002039a:	e8 4c f6 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c002039f:	59                   	pop    ecx
c00203a0:	5f                   	pop    edi
c00203a1:	e9 6a f9 ff ff       	jmp    c001fd10 <Vm::x87Handler(regs*)+0x1e8>
c00203a6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203aa:	84 d2                	test   dl,dl
c00203ac:	75 2a                	jne    c00203d8 <Vm::x87Handler(regs*)+0x8b0>
c00203ae:	50                   	push   eax
c00203af:	50                   	push   eax
c00203b0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b3:	ff 36                	push   DWORD PTR [esi]
c00203b5:	e8 c5 f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c00203ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203c1:	89 c6                	mov    esi,eax
c00203c3:	89 d7                	mov    edi,edx
c00203c5:	e8 21 f6 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00203ca:	57                   	push   edi
c00203cb:	56                   	push   esi
c00203cc:	52                   	push   edx
c00203cd:	50                   	push   eax
c00203ce:	e8 8e f5 ff ff       	call   c001f961 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203d3:	e9 64 01 00 00       	jmp    c002053c <Vm::x87Handler(regs*)+0xa14>
c00203d8:	80 fa 01             	cmp    dl,0x1
c00203db:	75 11                	jne    c00203ee <Vm::x87Handler(regs*)+0x8c6>
c00203dd:	50                   	push   eax
c00203de:	50                   	push   eax
c00203df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e2:	ff 36                	push   DWORD PTR [esi]
c00203e4:	e8 96 f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c00203e9:	e9 35 01 00 00       	jmp    c0020523 <Vm::x87Handler(regs*)+0x9fb>
c00203ee:	80 fa 02             	cmp    dl,0x2
c00203f1:	0f 85 54 f9 ff ff    	jne    c001fd4b <Vm::x87Handler(regs*)+0x223>
c00203f7:	55                   	push   ebp
c00203f8:	55                   	push   ebp
c00203f9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203fc:	ff 36                	push   DWORD PTR [esi]
c00203fe:	e8 7c f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c0020403:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002040a:	89 c6                	mov    esi,eax
c002040c:	89 d7                	mov    edi,edx
c002040e:	e8 d8 f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020413:	57                   	push   edi
c0020414:	56                   	push   esi
c0020415:	52                   	push   edx
c0020416:	50                   	push   eax
c0020417:	e8 f2 f4 ff ff       	call   c001f90e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002041c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020420:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020423:	83 c4 20             	add    esp,0x20
c0020426:	e9 74 f7 ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x77>
c002042b:	80 fa 04             	cmp    dl,0x4
c002042e:	75 2a                	jne    c002045a <Vm::x87Handler(regs*)+0x932>
c0020430:	51                   	push   ecx
c0020431:	51                   	push   ecx
c0020432:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020435:	ff 36                	push   DWORD PTR [esi]
c0020437:	e8 43 f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c002043c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020443:	89 c6                	mov    esi,eax
c0020445:	89 d7                	mov    edi,edx
c0020447:	e8 9f f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c002044c:	57                   	push   edi
c002044d:	56                   	push   esi
c002044e:	52                   	push   edx
c002044f:	50                   	push   eax
c0020450:	e8 36 f5 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020455:	e9 e2 00 00 00       	jmp    c002053c <Vm::x87Handler(regs*)+0xa14>
c002045a:	80 fa 05             	cmp    dl,0x5
c002045d:	75 28                	jne    c0020487 <Vm::x87Handler(regs*)+0x95f>
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	6a 00                	push   0x0
c0020464:	e8 82 f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020469:	89 c7                	mov    edi,eax
c002046b:	89 d5                	mov    ebp,edx
c002046d:	58                   	pop    eax
c002046e:	5a                   	pop    edx
c002046f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020472:	ff 36                	push   DWORD PTR [esi]
c0020474:	e8 06 f3 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c0020479:	83 c4 10             	add    esp,0x10
c002047c:	55                   	push   ebp
c002047d:	57                   	push   edi
c002047e:	52                   	push   edx
c002047f:	50                   	push   eax
c0020480:	e8 06 f5 ff ff       	call   c001f98b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020485:	eb 60                	jmp    c00204e7 <Vm::x87Handler(regs*)+0x9bf>
c0020487:	80 fa 06             	cmp    dl,0x6
c002048a:	75 2a                	jne    c00204b6 <Vm::x87Handler(regs*)+0x98e>
c002048c:	51                   	push   ecx
c002048d:	51                   	push   ecx
c002048e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020491:	ff 36                	push   DWORD PTR [esi]
c0020493:	e8 e7 f2 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c0020498:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049f:	89 c6                	mov    esi,eax
c00204a1:	89 d7                	mov    edi,edx
c00204a3:	e8 43 f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00204a8:	57                   	push   edi
c00204a9:	56                   	push   esi
c00204aa:	52                   	push   edx
c00204ab:	50                   	push   eax
c00204ac:	e8 08 f5 ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204b1:	e9 86 00 00 00       	jmp    c002053c <Vm::x87Handler(regs*)+0xa14>
c00204b6:	31 c0                	xor    eax,eax
c00204b8:	80 fa 07             	cmp    dl,0x7
c00204bb:	0f 85 c8 00 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c00204c1:	83 ec 0c             	sub    esp,0xc
c00204c4:	6a 00                	push   0x0
c00204c6:	e8 20 f5 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c00204cb:	89 c7                	mov    edi,eax
c00204cd:	89 d5                	mov    ebp,edx
c00204cf:	58                   	pop    eax
c00204d0:	5a                   	pop    edx
c00204d1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204d4:	ff 36                	push   DWORD PTR [esi]
c00204d6:	e8 a4 f2 ff ff       	call   c001f77f <Vm::fpu64ToInternal(unsigned long long)>
c00204db:	83 c4 10             	add    esp,0x10
c00204de:	55                   	push   ebp
c00204df:	57                   	push   edi
c00204e0:	52                   	push   edx
c00204e1:	50                   	push   eax
c00204e2:	e8 d2 f4 ff ff       	call   c001f9b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204e7:	83 c4 0c             	add    esp,0xc
c00204ea:	eb 53                	jmp    c002053f <Vm::x87Handler(regs*)+0xa17>
c00204ec:	31 c0                	xor    eax,eax
c00204ee:	80 fa 02             	cmp    dl,0x2
c00204f1:	0f 85 92 00 00 00    	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c00204f7:	83 ec 0c             	sub    esp,0xc
c00204fa:	6a 00                	push   0x0
c00204fc:	e8 ea f4 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020501:	59                   	pop    ecx
c0020502:	5f                   	pop    edi
c0020503:	52                   	push   edx
c0020504:	50                   	push   eax
c0020505:	e8 27 f2 ff ff       	call   c001f731 <Vm::fpuInternalTo64(unsigned long long)>
c002050a:	eb 70                	jmp    c002057c <Vm::x87Handler(regs*)+0xa54>
c002050c:	31 c0                	xor    eax,eax
c002050e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020513:	75 74                	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c0020515:	50                   	push   eax
c0020516:	50                   	push   eax
c0020517:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002051a:	31 d2                	xor    edx,edx
c002051c:	52                   	push   edx
c002051d:	50                   	push   eax
c002051e:	e8 f6 f2 ff ff       	call   c001f819 <Vm::fpuLongToFloat(long long)>
c0020523:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002052a:	89 c6                	mov    esi,eax
c002052c:	89 d7                	mov    edi,edx
c002052e:	e8 b8 f4 ff ff       	call   c001f9eb <Vm::fpuGetReg(int)>
c0020533:	57                   	push   edi
c0020534:	56                   	push   esi
c0020535:	52                   	push   edx
c0020536:	50                   	push   eax
c0020537:	e8 5e f4 ff ff       	call   c001f99a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002053c:	83 c4 1c             	add    esp,0x1c
c002053f:	52                   	push   edx
c0020540:	50                   	push   eax
c0020541:	6a 00                	push   0x0
c0020543:	e8 e6 f4 ff ff       	call   c001fa2e <Vm::fpuSetReg(int, unsigned long long)>
c0020548:	e9 f2 f7 ff ff       	jmp    c001fd3f <Vm::x87Handler(regs*)+0x217>
c002054d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020551:	80 fa 05             	cmp    dl,0x5
c0020554:	75 11                	jne    c0020567 <Vm::x87Handler(regs*)+0xa3f>
c0020556:	55                   	push   ebp
c0020557:	55                   	push   ebp
c0020558:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002055b:	ff 36                	push   DWORD PTR [esi]
c002055d:	e8 81 f2 ff ff       	call   c001f7e3 <Vm::fpuULongToFloat(unsigned long long)>
c0020562:	e9 cf f7 ff ff       	jmp    c001fd36 <Vm::x87Handler(regs*)+0x20e>
c0020567:	31 c0                	xor    eax,eax
c0020569:	80 fa 07             	cmp    dl,0x7
c002056c:	75 1b                	jne    c0020589 <Vm::x87Handler(regs*)+0xa61>
c002056e:	e8 63 f5 ff ff       	call   c001fad6 <Vm::fpuPop()>
c0020573:	51                   	push   ecx
c0020574:	51                   	push   ecx
c0020575:	52                   	push   edx
c0020576:	50                   	push   eax
c0020577:	e8 0c f2 ff ff       	call   c001f788 <Vm::fpuFloatToLong(unsigned long long)>
c002057c:	83 c4 10             	add    esp,0x10
c002057f:	89 06                	mov    DWORD PTR [esi],eax
c0020581:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020584:	e9 f8 f7 ff ff       	jmp    c001fd81 <Vm::x87Handler(regs*)+0x259>
c0020589:	83 c4 1c             	add    esp,0x1c
c002058c:	5b                   	pop    ebx
c002058d:	5e                   	pop    esi
c002058e:	5f                   	pop    edi
c002058f:	5d                   	pop    ebp
c0020590:	c3                   	ret    

c0020591 <__static_initialization_and_destruction_0(int, int)>:
c0020591:	83 ec 0c             	sub    esp,0xc
c0020594:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020599:	75 1a                	jne    c00205b5 <__static_initialization_and_destruction_0(int, int)+0x24>
c002059b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205a3:	75 10                	jne    c00205b5 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205a5:	83 ec 0c             	sub    esp,0xc
c00205a8:	68 40 1b 03 c0       	push   0xc0031b40
c00205ad:	e8 2a 88 00 00       	call   c0028ddc <Vm::_FPUState::_FPUState()>
c00205b2:	83 c4 10             	add    esp,0x10
c00205b5:	90                   	nop
c00205b6:	83 c4 0c             	add    esp,0xc
c00205b9:	c3                   	ret    

c00205ba <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00205ba:	83 ec 0c             	sub    esp,0xc
c00205bd:	83 ec 08             	sub    esp,0x8
c00205c0:	68 ff ff 00 00       	push   0xffff
c00205c5:	6a 01                	push   0x1
c00205c7:	e8 c5 ff ff ff       	call   c0020591 <__static_initialization_and_destruction_0(int, int)>
c00205cc:	83 c4 10             	add    esp,0x10
c00205cf:	83 c4 0c             	add    esp,0xc
c00205d2:	c3                   	ret    
c00205d3:	90                   	nop

c00205d4 <FAT::getName()>:
c00205d4:	b8 48 c9 02 c0       	mov    eax,0xc002c948
c00205d9:	c3                   	ret    

c00205da <FAT::tell(void*, unsigned long long*)>:
c00205da:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205df:	75 06                	jne    c00205e7 <FAT::tell(void*, unsigned long long*)+0xd>
c00205e1:	b8 04 00 00 00       	mov    eax,0x4
c00205e6:	c3                   	ret    
c00205e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205ec:	75 06                	jne    c00205f4 <FAT::tell(void*, unsigned long long*)+0x1a>
c00205ee:	b8 04 00 00 00       	mov    eax,0x4
c00205f3:	c3                   	ret    
c00205f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205f8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205fb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020602:	89 01                	mov    DWORD PTR [ecx],eax
c0020604:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020607:	b8 00 00 00 00       	mov    eax,0x0
c002060c:	c3                   	ret    
c002060d:	90                   	nop

c002060e <FAT::stat(void*, unsigned long long*)>:
c002060e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020613:	75 06                	jne    c002061b <FAT::stat(void*, unsigned long long*)+0xd>
c0020615:	b8 04 00 00 00       	mov    eax,0x4
c002061a:	c3                   	ret    
c002061b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020620:	75 06                	jne    c0020628 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020622:	b8 04 00 00 00       	mov    eax,0x4
c0020627:	c3                   	ret    
c0020628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002062c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002062f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020632:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020636:	89 01                	mov    DWORD PTR [ecx],eax
c0020638:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002063b:	b8 00 00 00 00       	mov    eax,0x0
c0020640:	c3                   	ret    
c0020641:	90                   	nop

c0020642 <FAT::~FAT()>:
c0020642:	83 ec 0c             	sub    esp,0xc
c0020645:	ba cc c9 02 c0       	mov    edx,0xc002c9cc
c002064a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064e:	89 10                	mov    DWORD PTR [eax],edx
c0020650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020654:	83 ec 0c             	sub    esp,0xc
c0020657:	50                   	push   eax
c0020658:	e8 71 2b ff ff       	call   c00131ce <Filesystem::~Filesystem()>
c002065d:	83 c4 10             	add    esp,0x10
c0020660:	90                   	nop
c0020661:	83 c4 0c             	add    esp,0xc
c0020664:	c3                   	ret    
c0020665:	90                   	nop

c0020666 <FAT::~FAT()>:
c0020666:	83 ec 0c             	sub    esp,0xc
c0020669:	83 ec 0c             	sub    esp,0xc
c002066c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020670:	e8 cd ff ff ff       	call   c0020642 <FAT::~FAT()>
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	83 ec 08             	sub    esp,0x8
c002067b:	6a 08                	push   0x8
c002067d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020681:	e8 3f 27 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0020686:	83 c4 10             	add    esp,0x10
c0020689:	83 c4 0c             	add    esp,0xc
c002068c:	c3                   	ret    
c002068d:	90                   	nop

c002068e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002068e:	83 ec 1c             	sub    esp,0x1c
c0020691:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020698:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002069d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206a1:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c00206a8:	83 f8 ff             	cmp    eax,0xffffffff
c00206ab:	75 34                	jne    c00206e1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206ad:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206b1:	88 c2                	mov    dl,al
c00206b3:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c00206b8:	01 d0                	add    eax,edx
c00206ba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206be:	8b 15 a0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031ba0
c00206c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206c8:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c00206cf:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c00206d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00206d8:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c00206df:	eb 17                	jmp    c00206f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206e1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206e5:	88 c2                	mov    dl,al
c00206e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206eb:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c00206f2:	01 d0                	add    eax,edx
c00206f4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206f8:	83 ec 04             	sub    esp,0x4
c00206fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020703:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020707:	50                   	push   eax
c0020708:	e8 33 66 fe ff       	call   c0006d40 <f_getlabel>
c002070d:	83 c4 10             	add    esp,0x10
c0020710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020714:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020719:	75 07                	jne    c0020722 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002071b:	b8 00 00 00 00       	mov    eax,0x0
c0020720:	eb 05                	jmp    c0020727 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020722:	b8 01 00 00 00       	mov    eax,0x1
c0020727:	83 c4 1c             	add    esp,0x1c
c002072a:	c3                   	ret    
c002072b:	90                   	nop

c002072c <FAT::setlabel(LogicalDisk*, int, char*)>:
c002072c:	57                   	push   edi
c002072d:	83 ec 58             	sub    esp,0x58
c0020730:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020738:	8d 54 24 10          	lea    edx,[esp+0x10]
c002073c:	b9 0f 00 00 00       	mov    ecx,0xf
c0020741:	b8 00 00 00 00       	mov    eax,0x0
c0020746:	fc                   	cld    
c0020747:	89 d7                	mov    edi,edx
c0020749:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002074b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002074f:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c0020756:	83 f8 ff             	cmp    eax,0xffffffff
c0020759:	75 34                	jne    c002078f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002075b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002075f:	88 c2                	mov    dl,al
c0020761:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c0020766:	01 d0                	add    eax,edx
c0020768:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002076c:	8b 15 a0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031ba0
c0020772:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020776:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c002077d:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c0020782:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020786:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c002078d:	eb 17                	jmp    c00207a6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002078f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020793:	88 c2                	mov    dl,al
c0020795:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020799:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c00207a0:	01 d0                	add    eax,edx
c00207a2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207a6:	83 ec 08             	sub    esp,0x8
c00207a9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207b1:	50                   	push   eax
c00207b2:	e8 c5 01 fe ff       	call   c000097c <strcat>
c00207b7:	83 c4 10             	add    esp,0x10
c00207ba:	83 ec 0c             	sub    esp,0xc
c00207bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207c1:	50                   	push   eax
c00207c2:	e8 67 67 fe ff       	call   c0006f2e <f_setlabel>
c00207c7:	83 c4 10             	add    esp,0x10
c00207ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207ce:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00207d3:	75 07                	jne    c00207dc <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00207d5:	b8 00 00 00 00       	mov    eax,0x0
c00207da:	eb 05                	jmp    c00207e1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207dc:	b8 01 00 00 00       	mov    eax,0x1
c00207e1:	83 c4 58             	add    esp,0x58
c00207e4:	5f                   	pop    edi
c00207e5:	c3                   	ret    

c00207e6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207e6:	83 ec 2c             	sub    esp,0x2c
c00207e9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207f1:	83 ec 08             	sub    esp,0x8
c00207f4:	68 6c c9 02 c0       	push   0xc002c96c
c00207f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207fd:	e8 c6 00 fe ff       	call   c00008c8 <strcmp>
c0020802:	83 c4 10             	add    esp,0x10
c0020805:	85 c0                	test   eax,eax
c0020807:	0f 94 c0             	sete   al
c002080a:	84 c0                	test   al,al
c002080c:	74 0d                	je     c002081b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002080e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020816:	e9 a6 00 00 00       	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002081b:	83 ec 08             	sub    esp,0x8
c002081e:	68 5e c9 02 c0       	push   0xc002c95e
c0020823:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020827:	e8 9c 00 fe ff       	call   c00008c8 <strcmp>
c002082c:	83 c4 10             	add    esp,0x10
c002082f:	85 c0                	test   eax,eax
c0020831:	0f 94 c0             	sete   al
c0020834:	84 c0                	test   al,al
c0020836:	74 0a                	je     c0020842 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020838:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020840:	eb 7f                	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020842:	83 ec 08             	sub    esp,0x8
c0020845:	68 64 c9 02 c0       	push   0xc002c964
c002084a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002084e:	e8 75 00 fe ff       	call   c00008c8 <strcmp>
c0020853:	83 c4 10             	add    esp,0x10
c0020856:	85 c0                	test   eax,eax
c0020858:	0f 94 c0             	sete   al
c002085b:	84 c0                	test   al,al
c002085d:	74 0a                	je     c0020869 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002085f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020867:	eb 58                	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020869:	83 ec 08             	sub    esp,0x8
c002086c:	68 4c 95 02 c0       	push   0xc002954c
c0020871:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020875:	e8 4e 00 fe ff       	call   c00008c8 <strcmp>
c002087a:	83 c4 10             	add    esp,0x10
c002087d:	85 c0                	test   eax,eax
c002087f:	0f 94 c0             	sete   al
c0020882:	84 c0                	test   al,al
c0020884:	74 0a                	je     c0020890 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020886:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002088e:	eb 31                	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020890:	83 ec 08             	sub    esp,0x8
c0020893:	68 6a c9 02 c0       	push   0xc002c96a
c0020898:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002089c:	e8 27 00 fe ff       	call   c00008c8 <strcmp>
c00208a1:	83 c4 10             	add    esp,0x10
c00208a4:	85 c0                	test   eax,eax
c00208a6:	0f 94 c0             	sete   al
c00208a9:	84 c0                	test   al,al
c00208ab:	74 0a                	je     c00208b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208ad:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208b5:	eb 0a                	jmp    c00208c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208b7:	b8 08 00 00 00       	mov    eax,0x8
c00208bc:	e9 04 01 00 00       	jmp    c00209c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208c1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208c8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208d1:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c00208d8:	83 f8 ff             	cmp    eax,0xffffffff
c00208db:	75 34                	jne    c0020911 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208dd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208e1:	88 c2                	mov    dl,al
c00208e3:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c00208e8:	01 d0                	add    eax,edx
c00208ea:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208ee:	8b 15 a0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031ba0
c00208f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208f8:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c00208ff:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c0020904:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020908:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c002090f:	eb 17                	jmp    c0020928 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020911:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020915:	88 c2                	mov    dl,al
c0020917:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002091b:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c0020922:	01 d0                	add    eax,edx
c0020924:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002092c:	88 04 24             	mov    BYTE PTR [esp],al
c002092f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020933:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020937:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002093f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020944:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002094c:	83 ec 0c             	sub    esp,0xc
c002094f:	68 00 20 00 00       	push   0x2000
c0020954:	e8 f2 ee fe ff       	call   c000f84b <malloc>
c0020959:	83 c4 10             	add    esp,0x10
c002095c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020960:	68 00 20 00 00       	push   0x2000
c0020965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020969:	8d 44 24 08          	lea    eax,[esp+0x8]
c002096d:	50                   	push   eax
c002096e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020972:	50                   	push   eax
c0020973:	e8 01 6a fe ff       	call   c0007379 <f_mkfs>
c0020978:	83 c4 10             	add    esp,0x10
c002097b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002097f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020984:	75 07                	jne    c002098d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020986:	b8 00 00 00 00       	mov    eax,0x0
c002098b:	eb 38                	jmp    c00209c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002098d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020992:	75 17                	jne    c00209ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020994:	83 ec 0c             	sub    esp,0xc
c0020997:	68 9c c9 02 c0       	push   0xc002c99c
c002099c:	e8 04 25 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	b8 09 00 00 00       	mov    eax,0x9
c00209a9:	eb 1a                	jmp    c00209c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209af:	83 ec 08             	sub    esp,0x8
c00209b2:	50                   	push   eax
c00209b3:	68 70 c9 02 c0       	push   0xc002c970
c00209b8:	e8 e8 24 ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00209bd:	83 c4 10             	add    esp,0x10
c00209c0:	b8 01 00 00 00       	mov    eax,0x1
c00209c5:	83 c4 2c             	add    esp,0x2c
c00209c8:	c3                   	ret    
c00209c9:	90                   	nop

c00209ca <FAT::tryMount(LogicalDisk*, int)>:
c00209ca:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209d0:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c00209d5:	83 f8 14             	cmp    eax,0x14
c00209d8:	75 17                	jne    c00209f1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209da:	83 ec 0c             	sub    esp,0xc
c00209dd:	68 82 c9 02 c0       	push   0xc002c982
c00209e2:	e8 98 9c ff ff       	call   c001a67f <Krnl::panic(char const*)>
c00209e7:	83 c4 10             	add    esp,0x10
c00209ea:	b0 00                	mov    al,0x0
c00209ec:	e9 d7 01 00 00       	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209f1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a04:	3d 00 02 00 00       	cmp    eax,0x200
c0020a09:	74 07                	je     c0020a12 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a0b:	b0 00                	mov    al,0x0
c0020a0d:	e9 b6 01 00 00       	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a12:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a1a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a21:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c0020a28:	83 f8 ff             	cmp    eax,0xffffffff
c0020a2b:	74 07                	je     c0020a34 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a2d:	b0 01                	mov    al,0x1
c0020a2f:	e9 94 01 00 00       	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a34:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a3e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a46:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a4d:	88 c2                	mov    dl,al
c0020a4f:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c0020a54:	01 d0                	add    eax,edx
c0020a56:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a5d:	8b 15 a0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031ba0
c0020a63:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a6a:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c0020a71:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c0020a76:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a7d:	89 14 85 40 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3c0],edx
c0020a84:	83 ec 0c             	sub    esp,0xc
c0020a87:	68 54 02 00 00       	push   0x254
c0020a8c:	e8 ba ed fe ff       	call   c000f84b <malloc>
c0020a91:	83 c4 10             	add    esp,0x10
c0020a94:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a9b:	83 ec 04             	sub    esp,0x4
c0020a9e:	6a 00                	push   0x0
c0020aa0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aa7:	50                   	push   eax
c0020aa8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020aaf:	e8 83 44 fe ff       	call   c0004f37 <f_mount>
c0020ab4:	83 c4 10             	add    esp,0x10
c0020ab7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020abe:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020ac6:	74 19                	je     c0020ae1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020ac8:	83 ec 0c             	sub    esp,0xc
c0020acb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ad2:	e8 94 ed fe ff       	call   c000f86b <rfree>
c0020ad7:	83 c4 10             	add    esp,0x10
c0020ada:	b0 00                	mov    al,0x0
c0020adc:	e9 e7 00 00 00       	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ae1:	83 ec 04             	sub    esp,0x4
c0020ae4:	68 00 01 00 00       	push   0x100
c0020ae9:	6a 00                	push   0x0
c0020aeb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020af2:	50                   	push   eax
c0020af3:	e8 88 fc fd ff       	call   c0000780 <memset>
c0020af8:	83 c4 10             	add    esp,0x10
c0020afb:	83 ec 08             	sub    esp,0x8
c0020afe:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b05:	50                   	push   eax
c0020b06:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b0d:	50                   	push   eax
c0020b0e:	e8 69 fe fd ff       	call   c000097c <strcat>
c0020b13:	83 c4 10             	add    esp,0x10
c0020b16:	83 ec 08             	sub    esp,0x8
c0020b19:	68 90 c9 02 c0       	push   0xc002c990
c0020b1e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b25:	50                   	push   eax
c0020b26:	e8 51 fe fd ff       	call   c000097c <strcat>
c0020b2b:	83 c4 10             	add    esp,0x10
c0020b2e:	83 ec 04             	sub    esp,0x4
c0020b31:	6a 01                	push   0x1
c0020b33:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b3a:	50                   	push   eax
c0020b3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b3f:	50                   	push   eax
c0020b40:	e8 54 44 fe ff       	call   c0004f99 <f_open>
c0020b45:	83 c4 10             	add    esp,0x10
c0020b48:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b4f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b56:	85 c0                	test   eax,eax
c0020b58:	74 0a                	je     c0020b64 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b5a:	78 2d                	js     c0020b89 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b5c:	83 e8 04             	sub    eax,0x4
c0020b5f:	83 f8 01             	cmp    eax,0x1
c0020b62:	77 25                	ja     c0020b89 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b64:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b6c:	83 ec 0c             	sub    esp,0xc
c0020b6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b73:	50                   	push   eax
c0020b74:	e8 72 4f fe ff       	call   c0005aeb <f_close>
c0020b79:	83 c4 10             	add    esp,0x10
c0020b7c:	90                   	nop
c0020b7d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b85:	74 3a                	je     c0020bc1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b87:	eb 2d                	jmp    c0020bb6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b89:	83 ec 0c             	sub    esp,0xc
c0020b8c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b93:	e8 d3 ec fe ff       	call   c000f86b <rfree>
c0020b98:	83 c4 10             	add    esp,0x10
c0020b9b:	83 ec 04             	sub    esp,0x4
c0020b9e:	6a 00                	push   0x0
c0020ba0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ba7:	50                   	push   eax
c0020ba8:	6a 00                	push   0x0
c0020baa:	e8 88 43 fe ff       	call   c0004f37 <f_mount>
c0020baf:	83 c4 10             	add    esp,0x10
c0020bb2:	b0 00                	mov    al,0x0
c0020bb4:	eb 12                	jmp    c0020bc8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020bb6:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c0020bbb:	40                   	inc    eax
c0020bbc:	a3 a0 1b 03 c0       	mov    ds:0xc0031ba0,eax
c0020bc1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020bc8:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bce:	c3                   	ret    
c0020bcf:	90                   	nop

c0020bd0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020bd0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020bd6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020bde:	74 0a                	je     c0020bea <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020be0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020be8:	75 0a                	jne    c0020bf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020bea:	b8 04 00 00 00       	mov    eax,0x4
c0020bef:	e9 db 00 00 00       	jmp    c0020ccf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bf4:	83 ec 08             	sub    esp,0x8
c0020bf7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bfe:	50                   	push   eax
c0020bff:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c06:	e8 ea 54 fe ff       	call   c00060f5 <f_readdir>
c0020c0b:	83 c4 10             	add    esp,0x10
c0020c0e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c15:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c1b:	83 ec 0c             	sub    esp,0xc
c0020c1e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c25:	83 c0 1a             	add    eax,0x1a
c0020c28:	50                   	push   eax
c0020c29:	e8 6e fb fd ff       	call   c000079c <strlen>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	ba 00 00 00 00       	mov    edx,0x0
c0020c36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c3a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c3e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c45:	0f b6 c0             	movzx  eax,al
c0020c48:	83 e0 10             	and    eax,0x10
c0020c4b:	74 07                	je     c0020c54 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c4d:	b8 02 00 00 00       	mov    eax,0x2
c0020c52:	eb 05                	jmp    c0020c59 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c54:	b8 01 00 00 00       	mov    eax,0x1
c0020c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c5d:	83 ec 08             	sub    esp,0x8
c0020c60:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c67:	83 c0 1a             	add    eax,0x1a
c0020c6a:	50                   	push   eax
c0020c6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c6f:	83 c0 10             	add    eax,0x10
c0020c72:	50                   	push   eax
c0020c73:	e8 c4 fb fd ff       	call   c000083c <strcpy>
c0020c78:	83 c4 10             	add    esp,0x10
c0020c7b:	83 ec 04             	sub    esp,0x4
c0020c7e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c85:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c89:	50                   	push   eax
c0020c8a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c91:	e8 b6 fa fd ff       	call   c000074c <memcpy>
c0020c96:	83 c4 10             	add    esp,0x10
c0020c99:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ca0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ca6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020cad:	84 c0                	test   al,al
c0020caf:	75 07                	jne    c0020cb8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020cb1:	b8 07 00 00 00       	mov    eax,0x7
c0020cb6:	eb 17                	jmp    c0020ccf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cb8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020cbf:	85 c0                	test   eax,eax
c0020cc1:	75 07                	jne    c0020cca <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020cc3:	b8 00 00 00 00       	mov    eax,0x0
c0020cc8:	eb 05                	jmp    c0020ccf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cca:	b8 01 00 00 00       	mov    eax,0x1
c0020ccf:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020cd5:	c3                   	ret    

c0020cd6 <FAT::read(void*, unsigned long, void*, int*)>:
c0020cd6:	83 ec 1c             	sub    esp,0x1c
c0020cd9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cde:	74 07                	je     c0020ce7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ce0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ce5:	75 07                	jne    c0020cee <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020ce7:	b8 04 00 00 00       	mov    eax,0x4
c0020cec:	eb 3d                	jmp    c0020d2b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cee:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cf2:	50                   	push   eax
c0020cf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cfb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cff:	e8 d1 46 fe ff       	call   c00053d5 <f_read>
c0020d04:	83 c4 10             	add    esp,0x10
c0020d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d0f:	89 c2                	mov    edx,eax
c0020d11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d15:	89 10                	mov    DWORD PTR [eax],edx
c0020d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d1b:	85 c0                	test   eax,eax
c0020d1d:	75 07                	jne    c0020d26 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d1f:	b8 00 00 00 00       	mov    eax,0x0
c0020d24:	eb 05                	jmp    c0020d2b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d26:	b8 01 00 00 00       	mov    eax,0x1
c0020d2b:	83 c4 1c             	add    esp,0x1c
c0020d2e:	c3                   	ret    
c0020d2f:	90                   	nop

c0020d30 <FAT::write(void*, unsigned long, void*, int*)>:
c0020d30:	83 ec 1c             	sub    esp,0x1c
c0020d33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d38:	74 07                	je     c0020d41 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d3a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d3f:	75 07                	jne    c0020d48 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d41:	b8 04 00 00 00       	mov    eax,0x4
c0020d46:	eb 3d                	jmp    c0020d85 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d48:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d4c:	50                   	push   eax
c0020d4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d59:	e8 f7 48 fe ff       	call   c0005655 <f_write>
c0020d5e:	83 c4 10             	add    esp,0x10
c0020d61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d69:	89 c2                	mov    edx,eax
c0020d6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d6f:	89 10                	mov    DWORD PTR [eax],edx
c0020d71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d75:	85 c0                	test   eax,eax
c0020d77:	75 07                	jne    c0020d80 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d79:	b8 00 00 00 00       	mov    eax,0x0
c0020d7e:	eb 05                	jmp    c0020d85 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d80:	b8 01 00 00 00       	mov    eax,0x1
c0020d85:	83 c4 1c             	add    esp,0x1c
c0020d88:	c3                   	ret    
c0020d89:	90                   	nop

c0020d8a <FAT::close(void*)>:
c0020d8a:	83 ec 1c             	sub    esp,0x1c
c0020d8d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d92:	75 07                	jne    c0020d9b <FAT::close(void*)+0x11>
c0020d94:	b8 04 00 00 00       	mov    eax,0x4
c0020d99:	eb 36                	jmp    c0020dd1 <FAT::close(void*)+0x47>
c0020d9b:	83 ec 0c             	sub    esp,0xc
c0020d9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da2:	e8 44 4d fe ff       	call   c0005aeb <f_close>
c0020da7:	83 c4 10             	add    esp,0x10
c0020daa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dae:	83 ec 0c             	sub    esp,0xc
c0020db1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020db5:	e8 a1 ea fe ff       	call   c000f85b <free>
c0020dba:	83 c4 10             	add    esp,0x10
c0020dbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dc1:	85 c0                	test   eax,eax
c0020dc3:	75 07                	jne    c0020dcc <FAT::close(void*)+0x42>
c0020dc5:	b8 00 00 00 00       	mov    eax,0x0
c0020dca:	eb 05                	jmp    c0020dd1 <FAT::close(void*)+0x47>
c0020dcc:	b8 01 00 00 00       	mov    eax,0x1
c0020dd1:	83 c4 1c             	add    esp,0x1c
c0020dd4:	c3                   	ret    
c0020dd5:	90                   	nop

c0020dd6 <FAT::closeDir(void*)>:
c0020dd6:	83 ec 1c             	sub    esp,0x1c
c0020dd9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020dde:	75 07                	jne    c0020de7 <FAT::closeDir(void*)+0x11>
c0020de0:	b8 04 00 00 00       	mov    eax,0x4
c0020de5:	eb 36                	jmp    c0020e1d <FAT::closeDir(void*)+0x47>
c0020de7:	83 ec 0c             	sub    esp,0xc
c0020dea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dee:	e8 e0 52 fe ff       	call   c00060d3 <f_closedir>
c0020df3:	83 c4 10             	add    esp,0x10
c0020df6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dfa:	83 ec 0c             	sub    esp,0xc
c0020dfd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e01:	e8 55 ea fe ff       	call   c000f85b <free>
c0020e06:	83 c4 10             	add    esp,0x10
c0020e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e0d:	85 c0                	test   eax,eax
c0020e0f:	75 07                	jne    c0020e18 <FAT::closeDir(void*)+0x42>
c0020e11:	b8 00 00 00 00       	mov    eax,0x0
c0020e16:	eb 05                	jmp    c0020e1d <FAT::closeDir(void*)+0x47>
c0020e18:	b8 01 00 00 00       	mov    eax,0x1
c0020e1d:	83 c4 1c             	add    esp,0x1c
c0020e20:	c3                   	ret    
c0020e21:	90                   	nop

c0020e22 <FAT::seek(void*, unsigned long long)>:
c0020e22:	83 ec 2c             	sub    esp,0x2c
c0020e25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e35:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e3a:	75 07                	jne    c0020e43 <FAT::seek(void*, unsigned long long)+0x21>
c0020e3c:	b8 04 00 00 00       	mov    eax,0x4
c0020e41:	eb 2f                	jmp    c0020e72 <FAT::seek(void*, unsigned long long)+0x50>
c0020e43:	83 ec 04             	sub    esp,0x4
c0020e46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e4a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e4e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e52:	e8 c3 4c fe ff       	call   c0005b1a <f_lseek>
c0020e57:	83 c4 10             	add    esp,0x10
c0020e5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e62:	85 c0                	test   eax,eax
c0020e64:	75 07                	jne    c0020e6d <FAT::seek(void*, unsigned long long)+0x4b>
c0020e66:	b8 00 00 00 00       	mov    eax,0x0
c0020e6b:	eb 05                	jmp    c0020e72 <FAT::seek(void*, unsigned long long)+0x50>
c0020e6d:	b8 01 00 00 00       	mov    eax,0x1
c0020e72:	83 c4 2c             	add    esp,0x2c
c0020e75:	c3                   	ret    

c0020e76 <fatWrapperReadDisk>:
c0020e76:	83 ec 1c             	sub    esp,0x1c
c0020e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e7d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e85:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e95:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c0020e9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ea0:	83 ec 0c             	sub    esp,0xc
c0020ea3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ea7:	52                   	push   edx
c0020ea8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eb0:	50                   	push   eax
c0020eb1:	e8 28 59 ff ff       	call   c00167de <LogicalDisk::read(unsigned long long, int, void*)>
c0020eb6:	83 c4 20             	add    esp,0x20
c0020eb9:	83 c4 1c             	add    esp,0x1c
c0020ebc:	c3                   	ret    

c0020ebd <fatWrapperWriteDisk>:
c0020ebd:	83 ec 1c             	sub    esp,0x1c
c0020ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ec4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ec8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ecc:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ecf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ed3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ed7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020edc:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c0020ee3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ee7:	83 ec 0c             	sub    esp,0xc
c0020eea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eee:	52                   	push   edx
c0020eef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef7:	50                   	push   eax
c0020ef8:	e8 4d 59 ff ff       	call   c001684a <LogicalDisk::write(unsigned long long, int, void*)>
c0020efd:	83 c4 20             	add    esp,0x20
c0020f00:	83 c4 1c             	add    esp,0x1c
c0020f03:	c3                   	ret    

c0020f04 <fatWrapperIoctl>:
c0020f04:	53                   	push   ebx
c0020f05:	83 ec 28             	sub    esp,0x28
c0020f08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f10:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f14:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f18:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f1d:	75 31                	jne    c0020f50 <fatWrapperIoctl+0x4c>
c0020f1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f27:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f2c:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c0020f33:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f39:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f43:	66 89 02             	mov    WORD PTR [edx],ax
c0020f46:	b8 00 00 00 00       	mov    eax,0x0
c0020f4b:	e9 b2 00 00 00       	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020f50:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f55:	75 6a                	jne    c0020fc1 <fatWrapperIoctl+0xbd>
c0020f57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f5f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f64:	8b 04 85 80 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1480]
c0020f6b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f71:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f77:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f7d:	89 c8                	mov    eax,ecx
c0020f7f:	89 da                	mov    edx,ebx
c0020f81:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f85:	c1 e0 0a             	shl    eax,0xa
c0020f88:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f8d:	8b 0c 8d 80 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1480]
c0020f94:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f9a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020fa0:	89 cb                	mov    ebx,ecx
c0020fa2:	c1 fb 1f             	sar    ebx,0x1f
c0020fa5:	53                   	push   ebx
c0020fa6:	51                   	push   ecx
c0020fa7:	52                   	push   edx
c0020fa8:	50                   	push   eax
c0020fa9:	e8 c2 5a 00 00       	call   c0026a70 <__udivdi3>
c0020fae:	83 c4 10             	add    esp,0x10
c0020fb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fb5:	89 01                	mov    DWORD PTR [ecx],eax
c0020fb7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020fba:	b8 00 00 00 00       	mov    eax,0x0
c0020fbf:	eb 41                	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020fc1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020fc6:	75 07                	jne    c0020fcf <fatWrapperIoctl+0xcb>
c0020fc8:	b8 00 00 00 00       	mov    eax,0x0
c0020fcd:	eb 33                	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020fcf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020fd4:	75 19                	jne    c0020fef <fatWrapperIoctl+0xeb>
c0020fd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fe2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020fe8:	b8 00 00 00 00       	mov    eax,0x0
c0020fed:	eb 13                	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020fef:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ff4:	75 07                	jne    c0020ffd <fatWrapperIoctl+0xf9>
c0020ff6:	b8 00 00 00 00       	mov    eax,0x0
c0020ffb:	eb 05                	jmp    c0021002 <fatWrapperIoctl+0xfe>
c0020ffd:	b8 04 00 00 00       	mov    eax,0x4
c0021002:	83 c4 28             	add    esp,0x28
c0021005:	5b                   	pop    ebx
c0021006:	c3                   	ret    
c0021007:	90                   	nop

c0021008 <FAT::FAT()>:
c0021008:	83 ec 1c             	sub    esp,0x1c
c002100b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002100f:	83 ec 0c             	sub    esp,0xc
c0021012:	50                   	push   eax
c0021013:	e8 92 21 ff ff       	call   c00131aa <Filesystem::Filesystem()>
c0021018:	83 c4 10             	add    esp,0x10
c002101b:	ba cc c9 02 c0       	mov    edx,0xc002c9cc
c0021020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021024:	89 10                	mov    DWORD PTR [eax],edx
c0021026:	c7 05 a0 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ba0,0x0
c0021030:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021038:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002103d:	7f 15                	jg     c0021054 <FAT::FAT()+0x4c>
c002103f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021043:	c7 04 85 c0 1b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce440],0xffffffff
c002104e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021052:	eb e4                	jmp    c0021038 <FAT::FAT()+0x30>
c0021054:	90                   	nop
c0021055:	83 c4 1c             	add    esp,0x1c
c0021058:	c3                   	ret    
c0021059:	90                   	nop

c002105a <FAT::fixFilepath(char*)>:
c002105a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002105e:	8a 00                	mov    al,BYTE PTR [eax]
c0021060:	3c 40                	cmp    al,0x40
c0021062:	7e 2c                	jle    c0021090 <FAT::fixFilepath(char*)+0x36>
c0021064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021068:	8a 00                	mov    al,BYTE PTR [eax]
c002106a:	83 e8 41             	sub    eax,0x41
c002106d:	88 c2                	mov    dl,al
c002106f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021073:	88 10                	mov    BYTE PTR [eax],dl
c0021075:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021079:	8a 00                	mov    al,BYTE PTR [eax]
c002107b:	0f be c0             	movsx  eax,al
c002107e:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c0021085:	83 c0 30             	add    eax,0x30
c0021088:	88 c2                	mov    dl,al
c002108a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002108e:	88 10                	mov    BYTE PTR [eax],dl
c0021090:	90                   	nop
c0021091:	c3                   	ret    

c0021092 <FAT::open(char const*, void**, FileOpenMode)>:
c0021092:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021098:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210a0:	74 0a                	je     c00210ac <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00210a2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210aa:	75 0a                	jne    c00210b6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00210ac:	b8 04 00 00 00       	mov    eax,0x4
c00210b1:	e9 fd 00 00 00       	jmp    c00211b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210b6:	83 ec 08             	sub    esp,0x8
c00210b9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210c4:	50                   	push   eax
c00210c5:	e8 72 f7 fd ff       	call   c000083c <strcpy>
c00210ca:	83 c4 10             	add    esp,0x10
c00210cd:	83 ec 08             	sub    esp,0x8
c00210d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00210d4:	50                   	push   eax
c00210d5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210dc:	e8 79 ff ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c00210e1:	83 c4 10             	add    esp,0x10
c00210e4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00210ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210f3:	83 e0 01             	and    eax,0x1
c00210f6:	74 08                	je     c0021100 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210f8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021100:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021107:	83 e0 04             	and    eax,0x4
c002110a:	74 10                	je     c002111c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002110c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021114:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002111c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021123:	83 e0 02             	and    eax,0x2
c0021126:	74 08                	je     c0021130 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021128:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021130:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021137:	83 e0 08             	and    eax,0x8
c002113a:	74 08                	je     c0021144 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002113c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021144:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002114b:	83 e0 10             	and    eax,0x10
c002114e:	74 08                	je     c0021158 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021150:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021158:	83 ec 0c             	sub    esp,0xc
c002115b:	68 50 02 00 00       	push   0x250
c0021160:	e8 e6 e6 fe ff       	call   c000f84b <malloc>
c0021165:	83 c4 10             	add    esp,0x10
c0021168:	89 c2                	mov    edx,eax
c002116a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021171:	89 10                	mov    DWORD PTR [eax],edx
c0021173:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002117b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021182:	8b 00                	mov    eax,DWORD PTR [eax]
c0021184:	83 ec 04             	sub    esp,0x4
c0021187:	52                   	push   edx
c0021188:	8d 54 24 10          	lea    edx,[esp+0x10]
c002118c:	52                   	push   edx
c002118d:	50                   	push   eax
c002118e:	e8 06 3e fe ff       	call   c0004f99 <f_open>
c0021193:	83 c4 10             	add    esp,0x10
c0021196:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002119d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00211a5:	74 07                	je     c00211ae <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00211a7:	b8 01 00 00 00       	mov    eax,0x1
c00211ac:	eb 05                	jmp    c00211b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211ae:	b8 00 00 00 00       	mov    eax,0x0
c00211b3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211b9:	c3                   	ret    

c00211ba <FAT::openDir(char const*, void**)>:
c00211ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211c8:	74 0a                	je     c00211d4 <FAT::openDir(char const*, void**)+0x1a>
c00211ca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211d2:	75 07                	jne    c00211db <FAT::openDir(char const*, void**)+0x21>
c00211d4:	b8 04 00 00 00       	mov    eax,0x4
c00211d9:	eb 7d                	jmp    c0021258 <FAT::openDir(char const*, void**)+0x9e>
c00211db:	83 ec 08             	sub    esp,0x8
c00211de:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211e9:	50                   	push   eax
c00211ea:	e8 4d f6 fd ff       	call   c000083c <strcpy>
c00211ef:	83 c4 10             	add    esp,0x10
c00211f2:	83 ec 08             	sub    esp,0x8
c00211f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211f9:	50                   	push   eax
c00211fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021201:	e8 54 fe ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c0021206:	83 c4 10             	add    esp,0x10
c0021209:	83 ec 0c             	sub    esp,0xc
c002120c:	6a 4c                	push   0x4c
c002120e:	e8 38 e6 fe ff       	call   c000f84b <malloc>
c0021213:	83 c4 10             	add    esp,0x10
c0021216:	89 c2                	mov    edx,eax
c0021218:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002121f:	89 10                	mov    DWORD PTR [eax],edx
c0021221:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021228:	8b 00                	mov    eax,DWORD PTR [eax]
c002122a:	83 ec 08             	sub    esp,0x8
c002122d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021231:	52                   	push   edx
c0021232:	50                   	push   eax
c0021233:	e8 99 4d fe ff       	call   c0005fd1 <f_opendir>
c0021238:	83 c4 10             	add    esp,0x10
c002123b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021242:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002124a:	74 07                	je     c0021253 <FAT::openDir(char const*, void**)+0x99>
c002124c:	b8 01 00 00 00       	mov    eax,0x1
c0021251:	eb 05                	jmp    c0021258 <FAT::openDir(char const*, void**)+0x9e>
c0021253:	b8 00 00 00 00       	mov    eax,0x0
c0021258:	81 c4 1c 01 00 00    	add    esp,0x11c
c002125e:	c3                   	ret    
c002125f:	90                   	nop

c0021260 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021260:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021266:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002126e:	75 0a                	jne    c002127a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021270:	b8 04 00 00 00       	mov    eax,0x4
c0021275:	e9 c9 00 00 00       	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002127a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021282:	75 0a                	jne    c002128e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021284:	b8 04 00 00 00       	mov    eax,0x4
c0021289:	e9 b5 00 00 00       	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002128e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021296:	75 0a                	jne    c00212a2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021298:	b8 04 00 00 00       	mov    eax,0x4
c002129d:	e9 a1 00 00 00       	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a2:	83 ec 08             	sub    esp,0x8
c00212a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212b3:	50                   	push   eax
c00212b4:	e8 83 f5 fd ff       	call   c000083c <strcpy>
c00212b9:	83 c4 10             	add    esp,0x10
c00212bc:	83 ec 08             	sub    esp,0x8
c00212bf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212c6:	50                   	push   eax
c00212c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212ce:	e8 87 fd ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c00212d3:	83 c4 10             	add    esp,0x10
c00212d6:	83 ec 08             	sub    esp,0x8
c00212d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212dd:	50                   	push   eax
c00212de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212e5:	50                   	push   eax
c00212e6:	e8 a5 4e fe ff       	call   c0006190 <f_stat>
c00212eb:	83 c4 10             	add    esp,0x10
c00212ee:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212f5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212fc:	85 c0                	test   eax,eax
c00212fe:	74 07                	je     c0021307 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021300:	83 f8 04             	cmp    eax,0x4
c0021303:	74 32                	je     c0021337 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021305:	eb 37                	jmp    c002133e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021307:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002130b:	0f b6 c0             	movzx  eax,al
c002130e:	83 e0 10             	and    eax,0x10
c0021311:	0f 95 c2             	setne  dl
c0021314:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002131b:	88 10                	mov    BYTE PTR [eax],dl
c002131d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021320:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021324:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002132b:	89 01                	mov    DWORD PTR [ecx],eax
c002132d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021330:	b8 00 00 00 00       	mov    eax,0x0
c0021335:	eb 0c                	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021337:	b8 02 00 00 00       	mov    eax,0x2
c002133c:	eb 05                	jmp    c0021343 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002133e:	b8 01 00 00 00       	mov    eax,0x1
c0021343:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021349:	c3                   	ret    

c002134a <FAT::unlink(char const*)>:
c002134a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021350:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021358:	75 07                	jne    c0021361 <FAT::unlink(char const*)+0x17>
c002135a:	b8 04 00 00 00       	mov    eax,0x4
c002135f:	eb 5c                	jmp    c00213bd <FAT::unlink(char const*)+0x73>
c0021361:	83 ec 08             	sub    esp,0x8
c0021364:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002136b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002136f:	50                   	push   eax
c0021370:	e8 c7 f4 fd ff       	call   c000083c <strcpy>
c0021375:	83 c4 10             	add    esp,0x10
c0021378:	83 ec 08             	sub    esp,0x8
c002137b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002137f:	50                   	push   eax
c0021380:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021387:	e8 ce fc ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002138c:	83 c4 10             	add    esp,0x10
c002138f:	83 ec 0c             	sub    esp,0xc
c0021392:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021396:	50                   	push   eax
c0021397:	e8 46 51 fe ff       	call   c00064e2 <f_unlink>
c002139c:	83 c4 10             	add    esp,0x10
c002139f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213a6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00213ad:	85 c0                	test   eax,eax
c00213af:	75 07                	jne    c00213b8 <FAT::unlink(char const*)+0x6e>
c00213b1:	b8 00 00 00 00       	mov    eax,0x0
c00213b6:	eb 05                	jmp    c00213bd <FAT::unlink(char const*)+0x73>
c00213b8:	b8 01 00 00 00       	mov    eax,0x1
c00213bd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213c3:	c3                   	ret    

c00213c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00213c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00213ca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00213d1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00213d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00213dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00213e0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00213e8:	75 0a                	jne    c00213f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00213ea:	b8 04 00 00 00       	mov    eax,0x4
c00213ef:	e9 1c 01 00 00       	jmp    c0021510 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213f4:	83 ec 08             	sub    esp,0x8
c00213f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021402:	50                   	push   eax
c0021403:	e8 34 f4 fd ff       	call   c000083c <strcpy>
c0021408:	83 c4 10             	add    esp,0x10
c002140b:	83 ec 08             	sub    esp,0x8
c002140e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021412:	50                   	push   eax
c0021413:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002141a:	e8 3b fc ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002141f:	83 c4 10             	add    esp,0x10
c0021422:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002142a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021432:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021437:	83 e0 01             	and    eax,0x1
c002143a:	74 08                	je     c0021444 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002143c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021444:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021449:	83 e0 02             	and    eax,0x2
c002144c:	74 08                	je     c0021456 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002144e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021456:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002145b:	83 e0 04             	and    eax,0x4
c002145e:	74 08                	je     c0021468 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021460:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021468:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002146d:	83 e0 08             	and    eax,0x8
c0021470:	74 08                	je     c002147a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021472:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002147a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002147f:	83 e0 01             	and    eax,0x1
c0021482:	74 08                	je     c002148c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021484:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002148c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021491:	83 e0 02             	and    eax,0x2
c0021494:	74 08                	je     c002149e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021496:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002149e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214a3:	83 e0 04             	and    eax,0x4
c00214a6:	74 08                	je     c00214b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00214a8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214b5:	83 e0 08             	and    eax,0x8
c00214b8:	74 08                	je     c00214c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00214ba:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00214c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00214c9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00214d0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00214d8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00214e0:	83 ec 04             	sub    esp,0x4
c00214e3:	52                   	push   edx
c00214e4:	50                   	push   eax
c00214e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214e9:	50                   	push   eax
c00214ea:	e8 95 56 fe ff       	call   c0006b84 <f_chmod>
c00214ef:	83 c4 10             	add    esp,0x10
c00214f2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214f9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021500:	85 c0                	test   eax,eax
c0021502:	75 07                	jne    c002150b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021504:	b8 00 00 00 00       	mov    eax,0x0
c0021509:	eb 05                	jmp    c0021510 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002150b:	b8 01 00 00 00       	mov    eax,0x1
c0021510:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021516:	c3                   	ret    
c0021517:	90                   	nop

c0021518 <FAT::rename(char const*, char const*)>:
c0021518:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002151e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021526:	74 0a                	je     c0021532 <FAT::rename(char const*, char const*)+0x1a>
c0021528:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021530:	75 0a                	jne    c002153c <FAT::rename(char const*, char const*)+0x24>
c0021532:	b8 04 00 00 00       	mov    eax,0x4
c0021537:	e9 98 00 00 00       	jmp    c00215d4 <FAT::rename(char const*, char const*)+0xbc>
c002153c:	83 ec 08             	sub    esp,0x8
c002153f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021546:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002154d:	50                   	push   eax
c002154e:	e8 e9 f2 fd ff       	call   c000083c <strcpy>
c0021553:	83 c4 10             	add    esp,0x10
c0021556:	83 ec 08             	sub    esp,0x8
c0021559:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021560:	50                   	push   eax
c0021561:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021568:	e8 ed fa ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002156d:	83 c4 10             	add    esp,0x10
c0021570:	83 ec 08             	sub    esp,0x8
c0021573:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002157a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002157e:	50                   	push   eax
c002157f:	e8 b8 f2 fd ff       	call   c000083c <strcpy>
c0021584:	83 c4 10             	add    esp,0x10
c0021587:	83 ec 08             	sub    esp,0x8
c002158a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002158e:	50                   	push   eax
c002158f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021596:	e8 bf fa ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002159b:	83 c4 10             	add    esp,0x10
c002159e:	83 ec 08             	sub    esp,0x8
c00215a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215a5:	50                   	push   eax
c00215a6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215ad:	50                   	push   eax
c00215ae:	e8 de 52 fe ff       	call   c0006891 <f_rename>
c00215b3:	83 c4 10             	add    esp,0x10
c00215b6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00215bd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00215c4:	85 c0                	test   eax,eax
c00215c6:	75 07                	jne    c00215cf <FAT::rename(char const*, char const*)+0xb7>
c00215c8:	b8 00 00 00 00       	mov    eax,0x0
c00215cd:	eb 05                	jmp    c00215d4 <FAT::rename(char const*, char const*)+0xbc>
c00215cf:	b8 01 00 00 00       	mov    eax,0x1
c00215d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00215da:	c3                   	ret    
c00215db:	90                   	nop

c00215dc <FAT::mkdir(char const*)>:
c00215dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215ea:	75 07                	jne    c00215f3 <FAT::mkdir(char const*)+0x17>
c00215ec:	b8 04 00 00 00       	mov    eax,0x4
c00215f1:	eb 5c                	jmp    c002164f <FAT::mkdir(char const*)+0x73>
c00215f3:	83 ec 08             	sub    esp,0x8
c00215f6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021601:	50                   	push   eax
c0021602:	e8 35 f2 fd ff       	call   c000083c <strcpy>
c0021607:	83 c4 10             	add    esp,0x10
c002160a:	83 ec 08             	sub    esp,0x8
c002160d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021611:	50                   	push   eax
c0021612:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021619:	e8 3c fa ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c002161e:	83 c4 10             	add    esp,0x10
c0021621:	83 ec 0c             	sub    esp,0xc
c0021624:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021628:	50                   	push   eax
c0021629:	e8 37 50 fe ff       	call   c0006665 <f_mkdir>
c002162e:	83 c4 10             	add    esp,0x10
c0021631:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021638:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002163f:	85 c0                	test   eax,eax
c0021641:	75 07                	jne    c002164a <FAT::mkdir(char const*)+0x6e>
c0021643:	b8 00 00 00 00       	mov    eax,0x0
c0021648:	eb 05                	jmp    c002164f <FAT::mkdir(char const*)+0x73>
c002164a:	b8 01 00 00 00       	mov    eax,0x1
c002164f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021655:	c3                   	ret    

c0021656 <FAT::exists(char const*)>:
c0021656:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002165c:	83 ec 08             	sub    esp,0x8
c002165f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021666:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002166a:	50                   	push   eax
c002166b:	e8 cc f1 fd ff       	call   c000083c <strcpy>
c0021670:	83 c4 10             	add    esp,0x10
c0021673:	83 ec 08             	sub    esp,0x8
c0021676:	8d 44 24 08          	lea    eax,[esp+0x8]
c002167a:	50                   	push   eax
c002167b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021682:	e8 d3 f9 ff ff       	call   c002105a <FAT::fixFilepath(char*)>
c0021687:	83 c4 10             	add    esp,0x10
c002168a:	83 ec 08             	sub    esp,0x8
c002168d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021694:	50                   	push   eax
c0021695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021699:	50                   	push   eax
c002169a:	e8 f1 4a fe ff       	call   c0006190 <f_stat>
c002169f:	83 c4 10             	add    esp,0x10
c00216a2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00216a9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216b0:	85 c0                	test   eax,eax
c00216b2:	75 04                	jne    c00216b8 <FAT::exists(char const*)+0x62>
c00216b4:	b0 01                	mov    al,0x1
c00216b6:	eb 02                	jmp    c00216ba <FAT::exists(char const*)+0x64>
c00216b8:	b0 00                	mov    al,0x0
c00216ba:	81 c4 2c 02 00 00    	add    esp,0x22c
c00216c0:	c3                   	ret    
c00216c1:	90                   	nop

c00216c2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00216c2:	b8 08 00 00 00       	mov    eax,0x8
c00216c7:	c3                   	ret    

c00216c8 <ISO9660::seek(void*, unsigned long long)>:
c00216c8:	53                   	push   ebx
c00216c9:	b8 04 00 00 00       	mov    eax,0x4
c00216ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00216da:	85 d2                	test   edx,edx
c00216dc:	74 17                	je     c00216f5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216de:	89 c8                	mov    eax,ecx
c00216e0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00216e3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00216e6:	b8 01 00 00 00       	mov    eax,0x1
c00216eb:	73 08                	jae    c00216f5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216ed:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00216f0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00216f3:	31 c0                	xor    eax,eax
c00216f5:	5b                   	pop    ebx
c00216f6:	c3                   	ret    
c00216f7:	90                   	nop

c00216f8 <ISO9660::tell(void*, unsigned long long*)>:
c00216f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021700:	85 d2                	test   edx,edx
c0021702:	74 12                	je     c0021716 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021704:	85 c0                	test   eax,eax
c0021706:	74 0e                	je     c0021716 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021708:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002170b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002170e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021711:	89 10                	mov    DWORD PTR [eax],edx
c0021713:	31 c0                	xor    eax,eax
c0021715:	c3                   	ret    
c0021716:	b8 04 00 00 00       	mov    eax,0x4
c002171b:	c3                   	ret    

c002171c <ISO9660::getName()>:
c002171c:	b8 28 ca 02 c0       	mov    eax,0xc002ca28
c0021721:	c3                   	ret    

c0021722 <ISO9660::stat(void*, unsigned long long*)>:
c0021722:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002172a:	85 d2                	test   edx,edx
c002172c:	74 12                	je     c0021740 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002172e:	85 c0                	test   eax,eax
c0021730:	74 0e                	je     c0021740 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021732:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021735:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021738:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002173b:	89 10                	mov    DWORD PTR [eax],edx
c002173d:	31 c0                	xor    eax,eax
c002173f:	c3                   	ret    
c0021740:	b8 04 00 00 00       	mov    eax,0x4
c0021745:	c3                   	ret    

c0021746 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021746:	b8 01 00 00 00       	mov    eax,0x1
c002174b:	c3                   	ret    

c002174c <ISO9660::unlink(char const*)>:
c002174c:	b8 01 00 00 00       	mov    eax,0x1
c0021751:	c3                   	ret    

c0021752 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021752:	b8 01 00 00 00       	mov    eax,0x1
c0021757:	c3                   	ret    

c0021758 <ISO9660::rename(char const*, char const*)>:
c0021758:	b8 01 00 00 00       	mov    eax,0x1
c002175d:	c3                   	ret    

c002175e <ISO9660::mkdir(char const*)>:
c002175e:	b8 01 00 00 00       	mov    eax,0x1
c0021763:	c3                   	ret    

c0021764 <ISO9660::close(void*)>:
c0021764:	83 ec 0c             	sub    esp,0xc
c0021767:	b8 04 00 00 00       	mov    eax,0x4
c002176c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021770:	85 d2                	test   edx,edx
c0021772:	74 0e                	je     c0021782 <ISO9660::close(void*)+0x1e>
c0021774:	83 ec 0c             	sub    esp,0xc
c0021777:	52                   	push   edx
c0021778:	e8 de e0 fe ff       	call   c000f85b <free>
c002177d:	83 c4 10             	add    esp,0x10
c0021780:	31 c0                	xor    eax,eax
c0021782:	83 c4 0c             	add    esp,0xc
c0021785:	c3                   	ret    

c0021786 <ISO9660::closeDir(void*)>:
c0021786:	83 ec 0c             	sub    esp,0xc
c0021789:	b8 04 00 00 00       	mov    eax,0x4
c002178e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021792:	85 d2                	test   edx,edx
c0021794:	74 0e                	je     c00217a4 <ISO9660::closeDir(void*)+0x1e>
c0021796:	83 ec 0c             	sub    esp,0xc
c0021799:	52                   	push   edx
c002179a:	e8 bc e0 fe ff       	call   c000f85b <free>
c002179f:	83 c4 10             	add    esp,0x10
c00217a2:	31 c0                	xor    eax,eax
c00217a4:	83 c4 0c             	add    esp,0xc
c00217a7:	c3                   	ret    

c00217a8 <ISO9660::~ISO9660()>:
c00217a8:	83 ec 0c             	sub    esp,0xc
c00217ab:	ba 8c ca 02 c0       	mov    edx,0xc002ca8c
c00217b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b4:	89 10                	mov    DWORD PTR [eax],edx
c00217b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ba:	83 ec 0c             	sub    esp,0xc
c00217bd:	50                   	push   eax
c00217be:	e8 0b 1a ff ff       	call   c00131ce <Filesystem::~Filesystem()>
c00217c3:	83 c4 10             	add    esp,0x10
c00217c6:	90                   	nop
c00217c7:	83 c4 0c             	add    esp,0xc
c00217ca:	c3                   	ret    
c00217cb:	90                   	nop

c00217cc <ISO9660::~ISO9660()>:
c00217cc:	83 ec 0c             	sub    esp,0xc
c00217cf:	83 ec 0c             	sub    esp,0xc
c00217d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217d6:	e8 cd ff ff ff       	call   c00217a8 <ISO9660::~ISO9660()>
c00217db:	83 c4 10             	add    esp,0x10
c00217de:	83 ec 08             	sub    esp,0x8
c00217e1:	6a 08                	push   0x8
c00217e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217e7:	e8 d9 15 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00217ec:	83 c4 10             	add    esp,0x10
c00217ef:	83 c4 0c             	add    esp,0xc
c00217f2:	c3                   	ret    

c00217f3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00217f3:	55                   	push   ebp
c00217f4:	31 c9                	xor    ecx,ecx
c00217f6:	57                   	push   edi
c00217f7:	56                   	push   esi
c00217f8:	53                   	push   ebx
c00217f9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00217fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021801:	89 eb                	mov    ebx,ebp
c0021803:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021807:	39 ce                	cmp    esi,ecx
c0021809:	7e 17                	jle    c0021822 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002180b:	31 d2                	xor    edx,edx
c002180d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021811:	7d 13                	jge    c0021826 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021813:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021817:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002181a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002181d:	75 0d                	jne    c002182c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002181f:	42                   	inc    edx
c0021820:	eb eb                	jmp    c002180d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021822:	31 c0                	xor    eax,eax
c0021824:	eb 0a                	jmp    c0021830 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021826:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002182a:	eb 04                	jmp    c0021830 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002182c:	41                   	inc    ecx
c002182d:	43                   	inc    ebx
c002182e:	eb d7                	jmp    c0021807 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021830:	5b                   	pop    ebx
c0021831:	5e                   	pop    esi
c0021832:	5f                   	pop    edi
c0021833:	5d                   	pop    ebp
c0021834:	c3                   	ret    

c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021835:	56                   	push   esi
c0021836:	53                   	push   ebx
c0021837:	52                   	push   edx
c0021838:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002183c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021840:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021844:	39 0d a0 1c 03 c0    	cmp    DWORD PTR ds:0xc0031ca0,ecx
c002184a:	75 08                	jne    c0021854 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002184c:	38 05 f4 da 02 c0    	cmp    BYTE PTR ds:0xc002daf4,al
c0021852:	74 2b                	je     c002187f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021854:	83 ec 0c             	sub    esp,0xc
c0021857:	a2 f4 da 02 c0       	mov    ds:0xc002daf4,al
c002185c:	68 c0 1c 03 c0       	push   0xc0031cc0
c0021861:	0f be c0             	movsx  eax,al
c0021864:	6a 01                	push   0x1
c0021866:	89 0d a0 1c 03 c0    	mov    DWORD PTR ds:0xc0031ca0,ecx
c002186c:	31 db                	xor    ebx,ebx
c002186e:	53                   	push   ebx
c002186f:	51                   	push   ecx
c0021870:	ff 34 85 7c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1584]
c0021877:	e8 62 4f ff ff       	call   c00167de <LogicalDisk::read(unsigned long long, int, void*)>
c002187c:	83 c4 20             	add    esp,0x20
c002187f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021887:	c7 44 24 14 c0 1c 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031cc0
c002188f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021893:	58                   	pop    eax
c0021894:	5b                   	pop    ebx
c0021895:	5e                   	pop    esi
c0021896:	e9 b1 ee fd ff       	jmp    c000074c <memcpy>
c002189b:	90                   	nop

c002189c <ISO9660::tryMount(LogicalDisk*, int)>:
c002189c:	81 ec 10 08 00 00    	sub    esp,0x810
c00218a2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00218a9:	83 c0 41             	add    eax,0x41
c00218ac:	0f be c0             	movsx  eax,al
c00218af:	50                   	push   eax
c00218b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218b4:	50                   	push   eax
c00218b5:	6a 10                	push   0x10
c00218b7:	e8 79 ff ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218bc:	83 c4 10             	add    esp,0x10
c00218bf:	31 c0                	xor    eax,eax
c00218c1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00218c6:	75 1d                	jne    c00218e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218c8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00218cd:	75 16                	jne    c00218e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218cf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00218d4:	75 0f                	jne    c00218e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218d6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00218db:	75 08                	jne    c00218e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218dd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00218e2:	0f 94 c0             	sete   al
c00218e5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00218eb:	c3                   	ret    

c00218ec <ISO9660::read(void*, unsigned long, void*, int*)>:
c00218ec:	55                   	push   ebp
c00218ed:	57                   	push   edi
c00218ee:	56                   	push   esi
c00218ef:	53                   	push   ebx
c00218f0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00218f6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00218fd:	85 ed                	test   ebp,ebp
c00218ff:	0f 84 d6 01 00 00    	je     c0021adb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021905:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002190d:	0f 84 c8 01 00 00    	je     c0021adb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021913:	b8 01 00 00 00       	mov    eax,0x1
c0021918:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002191c:	0f 85 be 01 00 00    	jne    c0021ae0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021922:	31 d2                	xor    edx,edx
c0021924:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002192b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002192e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021931:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021935:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021938:	89 04 24             	mov    DWORD PTR [esp],eax
c002193b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002193f:	01 f0                	add    eax,esi
c0021941:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021944:	11 fa                	adc    edx,edi
c0021946:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002194a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002194e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021952:	19 d1                	sbb    ecx,edx
c0021954:	72 0a                	jb     c0021960 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002195a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002195e:	eb 13                	jmp    c0021973 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021960:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021964:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021968:	29 f0                	sub    eax,esi
c002196a:	19 fa                	sbb    edx,edi
c002196c:	89 04 24             	mov    DWORD PTR [esp],eax
c002196f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021973:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021976:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021979:	0f a4 c2 0b          	shld   edx,eax,0xb
c002197d:	51                   	push   ecx
c002197e:	c1 e0 0b             	shl    eax,0xb
c0021981:	01 c6                	add    esi,eax
c0021983:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021987:	11 d7                	adc    edi,edx
c0021989:	50                   	push   eax
c002198a:	89 fa                	mov    edx,edi
c002198c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021990:	89 f0                	mov    eax,esi
c0021992:	53                   	push   ebx
c0021993:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021997:	50                   	push   eax
c0021998:	e8 98 fe ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002199d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219a1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219a4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00219a8:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00219ae:	83 c4 10             	add    esp,0x10
c00219b1:	b8 00 08 00 00       	mov    eax,0x800
c00219b6:	29 d0                	sub    eax,edx
c00219b8:	39 c1                	cmp    ecx,eax
c00219ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00219be:	83 d9 00             	sbb    ecx,0x0
c00219c1:	7d 1c                	jge    c00219df <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00219c3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00219c8:	75 12                	jne    c00219dc <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00219ca:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219d7:	e9 fb 00 00 00       	jmp    c0021ad7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00219dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219df:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00219e2:	31 d2                	xor    edx,edx
c00219e4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00219e8:	39 c2                	cmp    edx,eax
c00219ea:	7d 14                	jge    c0021a00 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00219ec:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00219f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219f7:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00219fa:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00219fd:	42                   	inc    edx
c00219fe:	eb e8                	jmp    c00219e8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021a00:	89 c3                	mov    ebx,eax
c0021a02:	85 c0                	test   eax,eax
c0021a04:	79 02                	jns    c0021a08 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a06:	31 db                	xor    ebx,ebx
c0021a08:	99                   	cdq    
c0021a09:	01 c3                	add    ebx,eax
c0021a0b:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a12:	01 c6                	add    esi,eax
c0021a14:	11 d7                	adc    edi,edx
c0021a16:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a1a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a1e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a21:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a25:	29 c6                	sub    esi,eax
c0021a27:	19 d7                	sbb    edi,edx
c0021a29:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a2c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a30:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a35:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a38:	b8 00 00 00 00       	mov    eax,0x0
c0021a3d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a41:	7d 3e                	jge    c0021a81 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a43:	52                   	push   edx
c0021a44:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a48:	50                   	push   eax
c0021a49:	53                   	push   ebx
c0021a4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a4e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a52:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a56:	50                   	push   eax
c0021a57:	e8 d9 fd ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a5c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a64:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a69:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a6f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a77:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a7c:	83 c4 10             	add    esp,0x10
c0021a7f:	eb af                	jmp    c0021a30 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a85:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a88:	74 32                	je     c0021abc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a8a:	50                   	push   eax
c0021a8b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a8f:	50                   	push   eax
c0021a90:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a94:	50                   	push   eax
c0021a95:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a99:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a9d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021aa1:	56                   	push   esi
c0021aa2:	e8 8e fd ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aa7:	83 c4 0c             	add    esp,0xc
c0021aaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021aae:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ab2:	50                   	push   eax
c0021ab3:	53                   	push   ebx
c0021ab4:	e8 93 ec fd ff       	call   c000074c <memcpy>
c0021ab9:	83 c4 10             	add    esp,0x10
c0021abc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ac3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ac7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021acb:	89 38                	mov    DWORD PTR [eax],edi
c0021acd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ad1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021ad4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021ad7:	31 c0                	xor    eax,eax
c0021ad9:	eb 05                	jmp    c0021ae0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021adb:	b8 04 00 00 00       	mov    eax,0x4
c0021ae0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021ae6:	5b                   	pop    ebx
c0021ae7:	5e                   	pop    esi
c0021ae8:	5f                   	pop    edi
c0021ae9:	5d                   	pop    ebp
c0021aea:	c3                   	ret    
c0021aeb:	90                   	nop

c0021aec <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021aec:	55                   	push   ebp
c0021aed:	57                   	push   edi
c0021aee:	56                   	push   esi
c0021aef:	53                   	push   ebx
c0021af0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021af6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021afd:	85 f6                	test   esi,esi
c0021aff:	0f 84 64 02 00 00    	je     c0021d69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b05:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b0d:	0f 84 56 02 00 00    	je     c0021d69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b13:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b16:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b19:	75 0a                	jne    c0021b25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b1b:	b8 07 00 00 00       	mov    eax,0x7
c0021b20:	e9 49 02 00 00       	jmp    c0021d6e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b25:	50                   	push   eax
c0021b26:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b2a:	50                   	push   eax
c0021b2b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b32:	53                   	push   ebx
c0021b33:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b35:	c1 e0 0b             	shl    eax,0xb
c0021b38:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b3b:	c1 e8 0b             	shr    eax,0xb
c0021b3e:	50                   	push   eax
c0021b3f:	e8 f1 fc ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b44:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b47:	83 c4 10             	add    esp,0x10
c0021b4a:	89 c1                	mov    ecx,eax
c0021b4c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b4f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b55:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b58:	84 db                	test   bl,bl
c0021b5a:	0f 85 90 00 00 00    	jne    c0021bf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b60:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b66:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b6c:	29 c7                	sub    edi,eax
c0021b6e:	89 fb                	mov    ebx,edi
c0021b70:	c1 fb 1f             	sar    ebx,0x1f
c0021b73:	01 f8                	add    eax,edi
c0021b75:	11 da                	adc    edx,ebx
c0021b77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b7f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b82:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b85:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b88:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b92:	89 d8                	mov    eax,ebx
c0021b94:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b97:	ba 00 00 00 00       	mov    edx,0x0
c0021b9c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ba0:	b8 00 00 00 00       	mov    eax,0x0
c0021ba5:	73 0b                	jae    c0021bb2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021ba7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021baa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bae:	29 f8                	sub    eax,edi
c0021bb0:	19 da                	sbb    edx,ebx
c0021bb2:	89 d3                	mov    ebx,edx
c0021bb4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021bb7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021bba:	09 c3                	or     ebx,eax
c0021bbc:	0f 84 59 ff ff ff    	je     c0021b1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021bc2:	55                   	push   ebp
c0021bc3:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021bc7:	50                   	push   eax
c0021bc8:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bcf:	53                   	push   ebx
c0021bd0:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bd2:	c1 e0 0b             	shl    eax,0xb
c0021bd5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021bd9:	c1 e8 0b             	shr    eax,0xb
c0021bdc:	50                   	push   eax
c0021bdd:	e8 53 fc ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021be2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021be5:	83 c4 10             	add    esp,0x10
c0021be8:	25 ff 07 00 00       	and    eax,0x7ff
c0021bed:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021bf0:	57                   	push   edi
c0021bf1:	6a 28                	push   0x28
c0021bf3:	6a 00                	push   0x0
c0021bf5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bf9:	50                   	push   eax
c0021bfa:	e8 81 eb fd ff       	call   c0000780 <memset>
c0021bff:	31 d2                	xor    edx,edx
c0021c01:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c04:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c0a:	89 f8                	mov    eax,edi
c0021c0c:	83 c0 21             	add    eax,0x21
c0021c0f:	83 d2 00             	adc    edx,0x0
c0021c12:	89 c7                	mov    edi,eax
c0021c14:	89 d5                	mov    ebp,edx
c0021c16:	83 c4 10             	add    esp,0x10
c0021c19:	31 c9                	xor    ecx,ecx
c0021c1b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c22:	83 f9 28             	cmp    ecx,0x28
c0021c25:	88 04 24             	mov    BYTE PTR [esp],al
c0021c28:	0f 94 c2             	sete   dl
c0021c2b:	88 d0                	mov    al,dl
c0021c2d:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c32:	39 fa                	cmp    edx,edi
c0021c34:	ba 00 00 00 00       	mov    edx,0x0
c0021c39:	19 ea                	sbb    edx,ebp
c0021c3b:	0f 92 c2             	setb   dl
c0021c3e:	09 c2                	or     edx,eax
c0021c40:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c44:	0f 94 c0             	sete   al
c0021c47:	08 d0                	or     al,dl
c0021c49:	75 16                	jne    c0021c61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c4b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c4f:	74 10                	je     c0021c61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c51:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c54:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c58:	41                   	inc    ecx
c0021c59:	83 c7 01             	add    edi,0x1
c0021c5c:	83 d5 00             	adc    ebp,0x0
c0021c5f:	eb ba                	jmp    c0021c1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c61:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c68:	83 ec 0c             	sub    esp,0xc
c0021c6b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c6f:	57                   	push   edi
c0021c70:	e8 27 eb fd ff       	call   c000079c <strlen>
c0021c75:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c7d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c81:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c88:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c8b:	5a                   	pop    edx
c0021c8c:	25 ff 07 00 00       	and    eax,0x7ff
c0021c91:	01 c8                	add    eax,ecx
c0021c93:	59                   	pop    ecx
c0021c94:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c9a:	83 e0 02             	and    eax,0x2
c0021c9d:	3c 01                	cmp    al,0x1
c0021c9f:	19 c0                	sbb    eax,eax
c0021ca1:	83 c0 02             	add    eax,0x2
c0021ca4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ca8:	57                   	push   edi
c0021ca9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021cad:	50                   	push   eax
c0021cae:	e8 89 eb fd ff       	call   c000083c <strcpy>
c0021cb3:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021cb7:	83 c4 10             	add    esp,0x10
c0021cba:	84 c0                	test   al,al
c0021cbc:	75 21                	jne    c0021cdf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021cbe:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021cc6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cce:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cd6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021cdd:	eb 28                	jmp    c0021d07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021cdf:	fe c8                	dec    al
c0021ce1:	75 24                	jne    c0021d07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ce3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021ceb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cf3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cfb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d02:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d07:	0f b6 fb             	movzx  edi,bl
c0021d0a:	31 db                	xor    ebx,ebx
c0021d0c:	50                   	push   eax
c0021d0d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d14:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d18:	50                   	push   eax
c0021d19:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d20:	e8 27 ea fd ff       	call   c000074c <memcpy>
c0021d25:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d2c:	89 f9                	mov    ecx,edi
c0021d2e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d34:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d37:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d3a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d3d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d40:	83 c4 10             	add    esp,0x10
c0021d43:	39 c7                	cmp    edi,eax
c0021d45:	89 df                	mov    edi,ebx
c0021d47:	19 d7                	sbb    edi,edx
c0021d49:	72 10                	jb     c0021d5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d4b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d52:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d59:	eb 0a                	jmp    c0021d65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d5b:	29 c8                	sub    eax,ecx
c0021d5d:	19 da                	sbb    edx,ebx
c0021d5f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d62:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d65:	31 c0                	xor    eax,eax
c0021d67:	eb 05                	jmp    c0021d6e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d69:	b8 04 00 00 00       	mov    eax,0x4
c0021d6e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d74:	5b                   	pop    ebx
c0021d75:	5e                   	pop    esi
c0021d76:	5f                   	pop    edi
c0021d77:	5d                   	pop    ebp
c0021d78:	c3                   	ret    

c0021d79 <readRoot(unsigned int*, unsigned int*, char)>:
c0021d79:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d7f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d87:	50                   	push   eax
c0021d88:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d8c:	50                   	push   eax
c0021d8d:	6a 10                	push   0x10
c0021d8f:	e8 a1 fa ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d94:	83 c4 0c             	add    esp,0xc
c0021d97:	6a 22                	push   0x22
c0021d99:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021da0:	50                   	push   eax
c0021da1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021da5:	50                   	push   eax
c0021da6:	e8 a1 e9 fd ff       	call   c000074c <memcpy>
c0021dab:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021db2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021db6:	89 10                	mov    DWORD PTR [eax],edx
c0021db8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021dbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021dc3:	89 10                	mov    DWORD PTR [eax],edx
c0021dc5:	b0 01                	mov    al,0x1
c0021dc7:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021dcd:	c3                   	ret    

c0021dce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021dce:	55                   	push   ebp
c0021dcf:	57                   	push   edi
c0021dd0:	56                   	push   esi
c0021dd1:	53                   	push   ebx
c0021dd2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021dd8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021ddf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021de6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021dea:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021dee:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021df2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021df6:	75 03                	jne    c0021dfb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021df8:	83 c3 02             	add    ebx,0x2
c0021dfb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021dfe:	75 03                	jne    c0021e03 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021e00:	43                   	inc    ebx
c0021e01:	eb f8                	jmp    c0021dfb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e03:	51                   	push   ecx
c0021e04:	68 00 01 00 00       	push   0x100
c0021e09:	6a 00                	push   0x0
c0021e0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e0f:	50                   	push   eax
c0021e10:	e8 6b e9 fd ff       	call   c0000780 <memset>
c0021e15:	83 c4 10             	add    esp,0x10
c0021e18:	31 d2                	xor    edx,edx
c0021e1a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e1d:	84 c0                	test   al,al
c0021e1f:	74 21                	je     c0021e42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e21:	3c 2f                	cmp    al,0x2f
c0021e23:	75 0b                	jne    c0021e30 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e25:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e29:	bd 01 00 00 00       	mov    ebp,0x1
c0021e2e:	eb 14                	jmp    c0021e44 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e30:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e33:	80 f9 19             	cmp    cl,0x19
c0021e36:	77 03                	ja     c0021e3b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e38:	83 e8 20             	sub    eax,0x20
c0021e3b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e3f:	42                   	inc    edx
c0021e40:	eb d8                	jmp    c0021e1a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e42:	31 ed                	xor    ebp,ebp
c0021e44:	83 ec 0c             	sub    esp,0xc
c0021e47:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e4e:	e8 f8 d9 fe ff       	call   c000f84b <malloc>
c0021e53:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e5a:	89 c6                	mov    esi,eax
c0021e5c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e62:	c1 ef 0b             	shr    edi,0xb
c0021e65:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e6c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e70:	83 c4 10             	add    esp,0x10
c0021e73:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e7c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e83:	74 28                	je     c0021ead <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e85:	52                   	push   edx
c0021e86:	57                   	push   edi
c0021e87:	50                   	push   eax
c0021e88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e8c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e93:	e8 9d f9 ff ff       	call   c0021835 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e9c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ea3:	05 00 08 00 00       	add    eax,0x800
c0021ea8:	83 c4 10             	add    esp,0x10
c0021eab:	eb cb                	jmp    c0021e78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ead:	83 ec 0c             	sub    esp,0xc
c0021eb0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021eb4:	57                   	push   edi
c0021eb5:	e8 e2 e8 fd ff       	call   c000079c <strlen>
c0021eba:	50                   	push   eax
c0021ebb:	57                   	push   edi
c0021ebc:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ec3:	56                   	push   esi
c0021ec4:	e8 2a f9 ff ff       	call   c00217f3 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ec9:	83 c4 20             	add    esp,0x20
c0021ecc:	85 c0                	test   eax,eax
c0021ece:	75 13                	jne    c0021ee3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ed0:	83 ec 0c             	sub    esp,0xc
c0021ed3:	56                   	push   esi
c0021ed4:	e8 82 d9 fe ff       	call   c000f85b <free>
c0021ed9:	83 c4 10             	add    esp,0x10
c0021edc:	31 c0                	xor    eax,eax
c0021ede:	e9 b3 00 00 00       	jmp    c0021f96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ee3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ee7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021eeb:	c1 e7 08             	shl    edi,0x8
c0021eee:	c1 e2 10             	shl    edx,0x10
c0021ef1:	09 d7                	or     edi,edx
c0021ef3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021ef7:	09 d7                	or     edi,edx
c0021ef9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021efd:	c1 e2 18             	shl    edx,0x18
c0021f00:	09 d7                	or     edi,edx
c0021f02:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f06:	89 d1                	mov    ecx,edx
c0021f08:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f0c:	c1 e1 08             	shl    ecx,0x8
c0021f0f:	c1 e2 10             	shl    edx,0x10
c0021f12:	09 ca                	or     edx,ecx
c0021f14:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f18:	09 ca                	or     edx,ecx
c0021f1a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f1e:	c1 e1 18             	shl    ecx,0x18
c0021f21:	09 ca                	or     edx,ecx
c0021f23:	89 e9                	mov    ecx,ebp
c0021f25:	84 c9                	test   cl,cl
c0021f27:	74 3c                	je     c0021f65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f29:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f2d:	83 ec 0c             	sub    esp,0xc
c0021f30:	56                   	push   esi
c0021f31:	e8 25 d9 fe ff       	call   c000f85b <free>
c0021f36:	83 c4 0c             	add    esp,0xc
c0021f39:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f40:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f45:	50                   	push   eax
c0021f46:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f4d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f58:	52                   	push   edx
c0021f59:	57                   	push   edi
c0021f5a:	53                   	push   ebx
c0021f5b:	e8 6e fe ff ff       	call   c0021dce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f60:	83 c4 20             	add    esp,0x20
c0021f63:	eb 31                	jmp    c0021f96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f65:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f68:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f6f:	d0 e8                	shr    al,1
c0021f71:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f73:	83 e0 01             	and    eax,0x1
c0021f76:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f7d:	83 ec 0c             	sub    esp,0xc
c0021f80:	89 13                	mov    DWORD PTR [ebx],edx
c0021f82:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f89:	89 03                	mov    DWORD PTR [ebx],eax
c0021f8b:	56                   	push   esi
c0021f8c:	e8 ca d8 fe ff       	call   c000f85b <free>
c0021f91:	83 c4 10             	add    esp,0x10
c0021f94:	b0 01                	mov    al,0x1
c0021f96:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f9c:	5b                   	pop    ebx
c0021f9d:	5e                   	pop    esi
c0021f9e:	5f                   	pop    edi
c0021f9f:	5d                   	pop    ebp
c0021fa0:	c3                   	ret    

c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021fa1:	55                   	push   ebp
c0021fa2:	57                   	push   edi
c0021fa3:	56                   	push   esi
c0021fa4:	53                   	push   ebx
c0021fa5:	83 ec 20             	sub    esp,0x20
c0021fa8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021fac:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021fb0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021fb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fbc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021fc4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021fc9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021fcf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021fd5:	57                   	push   edi
c0021fd6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fda:	50                   	push   eax
c0021fdb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fdf:	50                   	push   eax
c0021fe0:	e8 94 fd ff ff       	call   c0021d79 <readRoot(unsigned int*, unsigned int*, char)>
c0021fe5:	5a                   	pop    edx
c0021fe6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021fea:	e8 ad e7 fd ff       	call   c000079c <strlen>
c0021fef:	83 c4 10             	add    esp,0x10
c0021ff2:	83 f8 03             	cmp    eax,0x3
c0021ff5:	77 17                	ja     c002200e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ff7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ffb:	89 03                	mov    DWORD PTR [ebx],eax
c0021ffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022001:	89 06                	mov    DWORD PTR [esi],eax
c0022003:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002200a:	b0 01                	mov    al,0x1
c002200c:	eb 19                	jmp    c0022027 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002200e:	50                   	push   eax
c002200f:	55                   	push   ebp
c0022010:	57                   	push   edi
c0022011:	56                   	push   esi
c0022012:	53                   	push   ebx
c0022013:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022017:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002201b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002201f:	e8 aa fd ff ff       	call   c0021dce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022024:	83 c4 20             	add    esp,0x20
c0022027:	83 c4 1c             	add    esp,0x1c
c002202a:	5b                   	pop    ebx
c002202b:	5e                   	pop    esi
c002202c:	5f                   	pop    edi
c002202d:	5d                   	pop    ebp
c002202e:	c3                   	ret    
c002202f:	90                   	nop

c0022030 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022030:	57                   	push   edi
c0022031:	56                   	push   esi
c0022032:	53                   	push   ebx
c0022033:	83 ec 10             	sub    esp,0x10
c0022036:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002203a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002203e:	85 ff                	test   edi,edi
c0022040:	0f 84 9d 00 00 00    	je     c00220e3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022046:	85 f6                	test   esi,esi
c0022048:	0f 84 95 00 00 00    	je     c00220e3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002204e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022053:	74 17                	je     c002206c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022055:	83 ec 0c             	sub    esp,0xc
c0022058:	68 43 ca 02 c0       	push   0xc002ca43
c002205d:	e8 43 0e ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0022062:	83 c4 10             	add    esp,0x10
c0022065:	b8 03 00 00 00       	mov    eax,0x3
c002206a:	eb 7c                	jmp    c00220e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002206c:	83 ec 0c             	sub    esp,0xc
c002206f:	6a 1c                	push   0x1c
c0022071:	e8 d5 d7 fe ff       	call   c000f84b <malloc>
c0022076:	89 07                	mov    DWORD PTR [edi],eax
c0022078:	89 c3                	mov    ebx,eax
c002207a:	58                   	pop    eax
c002207b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002207f:	50                   	push   eax
c0022080:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022083:	50                   	push   eax
c0022084:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022088:	50                   	push   eax
c0022089:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002208d:	50                   	push   eax
c002208e:	56                   	push   esi
c002208f:	e8 0d ff ff ff       	call   c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022094:	83 c4 20             	add    esp,0x20
c0022097:	84 c0                	test   al,al
c0022099:	74 07                	je     c00220a2 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002209b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220a0:	74 0b                	je     c00220ad <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00220a2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220a6:	b8 01 00 00 00       	mov    eax,0x1
c00220ab:	eb 3b                	jmp    c00220e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220b5:	89 03                	mov    DWORD PTR [ebx],eax
c00220b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00220da:	8a 06                	mov    al,BYTE PTR [esi]
c00220dc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00220df:	31 c0                	xor    eax,eax
c00220e1:	eb 05                	jmp    c00220e8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220e3:	b8 04 00 00 00       	mov    eax,0x4
c00220e8:	83 c4 10             	add    esp,0x10
c00220eb:	5b                   	pop    ebx
c00220ec:	5e                   	pop    esi
c00220ed:	5f                   	pop    edi
c00220ee:	c3                   	ret    
c00220ef:	90                   	nop

c00220f0 <ISO9660::exists(char const*)>:
c00220f0:	83 ec 28             	sub    esp,0x28
c00220f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00220fb:	52                   	push   edx
c00220fc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00220ff:	52                   	push   edx
c0022100:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022104:	52                   	push   edx
c0022105:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022109:	52                   	push   edx
c002210a:	50                   	push   eax
c002210b:	e8 91 fe ff ff       	call   c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022110:	83 c4 3c             	add    esp,0x3c
c0022113:	c3                   	ret    

c0022114 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022114:	56                   	push   esi
c0022115:	53                   	push   ebx
c0022116:	83 ec 14             	sub    esp,0x14
c0022119:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002211d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022121:	85 db                	test   ebx,ebx
c0022123:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022127:	0f 94 c2             	sete   dl
c002212a:	85 f6                	test   esi,esi
c002212c:	0f 94 c0             	sete   al
c002212f:	08 c2                	or     dl,al
c0022131:	75 68                	jne    c002219b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022133:	85 c9                	test   ecx,ecx
c0022135:	74 64                	je     c002219b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022137:	83 ec 0c             	sub    esp,0xc
c002213a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002213d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022141:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022147:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002214e:	50                   	push   eax
c002214f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022152:	50                   	push   eax
c0022153:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022157:	50                   	push   eax
c0022158:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002215c:	50                   	push   eax
c002215d:	51                   	push   ecx
c002215e:	e8 3e fe ff ff       	call   c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022163:	83 c4 20             	add    esp,0x20
c0022166:	ba 01 00 00 00       	mov    edx,0x1
c002216b:	84 c0                	test   al,al
c002216d:	74 31                	je     c00221a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002216f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022173:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002217a:	89 03                	mov    DWORD PTR [ebx],eax
c002217c:	ba 00 00 00 00       	mov    edx,0x0
c0022181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022185:	85 c0                	test   eax,eax
c0022187:	0f 95 06             	setne  BYTE PTR [esi]
c002218a:	74 14                	je     c00221a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002218c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022192:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022199:	eb 05                	jmp    c00221a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002219b:	ba 04 00 00 00       	mov    edx,0x4
c00221a0:	83 c4 14             	add    esp,0x14
c00221a3:	89 d0                	mov    eax,edx
c00221a5:	5b                   	pop    ebx
c00221a6:	5e                   	pop    esi
c00221a7:	c3                   	ret    

c00221a8 <ISO9660::openDir(char const*, void**)>:
c00221a8:	57                   	push   edi
c00221a9:	56                   	push   esi
c00221aa:	53                   	push   ebx
c00221ab:	83 ec 10             	sub    esp,0x10
c00221ae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221b2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221b6:	85 ff                	test   edi,edi
c00221b8:	0f 84 95 00 00 00    	je     c0022253 <ISO9660::openDir(char const*, void**)+0xab>
c00221be:	85 f6                	test   esi,esi
c00221c0:	0f 84 8d 00 00 00    	je     c0022253 <ISO9660::openDir(char const*, void**)+0xab>
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	6a 1c                	push   0x1c
c00221cb:	e8 7b d6 fe ff       	call   c000f84b <malloc>
c00221d0:	89 07                	mov    DWORD PTR [edi],eax
c00221d2:	89 c3                	mov    ebx,eax
c00221d4:	59                   	pop    ecx
c00221d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221d9:	50                   	push   eax
c00221da:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221dd:	50                   	push   eax
c00221de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221e2:	50                   	push   eax
c00221e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221e7:	50                   	push   eax
c00221e8:	56                   	push   esi
c00221e9:	e8 b3 fd ff ff       	call   c0021fa1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221ee:	83 c4 20             	add    esp,0x20
c00221f1:	84 c0                	test   al,al
c00221f3:	74 07                	je     c00221fc <ISO9660::openDir(char const*, void**)+0x54>
c00221f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221fa:	75 21                	jne    c002221d <ISO9660::openDir(char const*, void**)+0x75>
c00221fc:	0f b6 c0             	movzx  eax,al
c00221ff:	52                   	push   edx
c0022200:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022204:	50                   	push   eax
c0022205:	68 69 ca 02 c0       	push   0xc002ca69
c002220a:	e8 96 0c ff ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c002220f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022213:	83 c4 10             	add    esp,0x10
c0022216:	b8 01 00 00 00       	mov    eax,0x1
c002221b:	eb 3b                	jmp    c0022258 <ISO9660::openDir(char const*, void**)+0xb0>
c002221d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022221:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022225:	89 03                	mov    DWORD PTR [ebx],eax
c0022227:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002222e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022232:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022239:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022240:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022243:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002224a:	8a 06                	mov    al,BYTE PTR [esi]
c002224c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002224f:	31 c0                	xor    eax,eax
c0022251:	eb 05                	jmp    c0022258 <ISO9660::openDir(char const*, void**)+0xb0>
c0022253:	b8 04 00 00 00       	mov    eax,0x4
c0022258:	83 c4 10             	add    esp,0x10
c002225b:	5b                   	pop    ebx
c002225c:	5e                   	pop    esi
c002225d:	5f                   	pop    edi
c002225e:	c3                   	ret    
c002225f:	90                   	nop

c0022260 <ISO9660::ISO9660()>:
c0022260:	83 ec 0c             	sub    esp,0xc
c0022263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022267:	83 ec 0c             	sub    esp,0xc
c002226a:	50                   	push   eax
c002226b:	e8 3a 0f ff ff       	call   c00131aa <Filesystem::Filesystem()>
c0022270:	83 c4 10             	add    esp,0x10
c0022273:	ba 8c ca 02 c0       	mov    edx,0xc002ca8c
c0022278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227c:	89 10                	mov    DWORD PTR [eax],edx
c002227e:	90                   	nop
c002227f:	83 c4 0c             	add    esp,0xc
c0022282:	c3                   	ret    
c0022283:	90                   	nop

c0022284 <SoundChannel::~SoundChannel()>:
c0022284:	83 ec 0c             	sub    esp,0xc
c0022287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002228e:	83 ec 0c             	sub    esp,0xc
c0022291:	50                   	push   eax
c0022292:	e8 c4 d5 fe ff       	call   c000f85b <free>
c0022297:	83 c4 10             	add    esp,0x10
c002229a:	90                   	nop
c002229b:	83 c4 0c             	add    esp,0xc
c002229e:	c3                   	ret    
c002229f:	90                   	nop

c00222a0 <SoundChannel::setSpeed(float)>:
c00222a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222a8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00222ab:	c3                   	ret    

c00222ac <SoundChannel::getSpeed()>:
c00222ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222b3:	c3                   	ret    

c00222b4 <SoundChannel::setVolume(int)>:
c00222b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222b8:	83 f8 64             	cmp    eax,0x64
c00222bb:	7e 05                	jle    c00222c2 <SoundChannel::setVolume(int)+0xe>
c00222bd:	b8 64 00 00 00       	mov    eax,0x64
c00222c2:	85 c0                	test   eax,eax
c00222c4:	79 02                	jns    c00222c8 <SoundChannel::setVolume(int)+0x14>
c00222c6:	31 c0                	xor    eax,eax
c00222c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222cc:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00222cf:	c3                   	ret    

c00222d0 <SoundChannel::getVolume()>:
c00222d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00222d7:	c3                   	ret    

c00222d8 <SoundChannel::pause()>:
c00222d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222dc:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00222e0:	c3                   	ret    
c00222e1:	90                   	nop

c00222e2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00222e2:	83 ec 1c             	sub    esp,0x1c
c00222e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222e9:	e8 ea ff ff ff       	call   c00222d8 <SoundChannel::pause()>
c00222ee:	83 c4 04             	add    esp,0x4
c00222f1:	6a 50                	push   0x50
c00222f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222f7:	e8 b8 ff ff ff       	call   c00222b4 <SoundChannel::setVolume(int)>
c00222fc:	83 c4 08             	add    esp,0x8
c00222ff:	a1 04 cb 02 c0       	mov    eax,ds:0xc002cb04
c0022304:	50                   	push   eax
c0022305:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022309:	e8 92 ff ff ff       	call   c00222a0 <SoundChannel::setSpeed(float)>
c002230e:	83 c4 08             	add    esp,0x8
c0022311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022315:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022319:	89 10                	mov    DWORD PTR [eax],edx
c002231b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022323:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002232a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002232e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022331:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022336:	75 23                	jne    c002235b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002233c:	8b 10                	mov    edx,DWORD PTR [eax]
c002233e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022342:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022345:	0f af c2             	imul   eax,edx
c0022348:	85 c0                	test   eax,eax
c002234a:	79 03                	jns    c002234f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002234c:	83 c0 03             	add    eax,0x3
c002234f:	c1 f8 02             	sar    eax,0x2
c0022352:	05 a0 0f 00 00       	add    eax,0xfa0
c0022357:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002235b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002235f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022363:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002236a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022375:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002237c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022380:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022383:	c1 e0 02             	shl    eax,0x2
c0022386:	83 ec 0c             	sub    esp,0xc
c0022389:	50                   	push   eax
c002238a:	e8 bc d4 fe ff       	call   c000f84b <malloc>
c002238f:	83 c4 10             	add    esp,0x10
c0022392:	89 c2                	mov    edx,eax
c0022394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022398:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002239b:	83 ec 04             	sub    esp,0x4
c002239e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00223a2:	50                   	push   eax
c00223a3:	6a 01                	push   0x1
c00223a5:	6a 04                	push   0x4
c00223a7:	e8 fb 67 fe ff       	call   c0008ba7 <src_new>
c00223ac:	83 c4 10             	add    esp,0x10
c00223af:	89 c2                	mov    edx,eax
c00223b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00223b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223bc:	85 c0                	test   eax,eax
c00223be:	74 10                	je     c00223d0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00223c0:	83 ec 0c             	sub    esp,0xc
c00223c3:	68 e8 ca 02 c0       	push   0xc002cae8
c00223c8:	e8 b2 82 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c00223cd:	83 c4 10             	add    esp,0x10
c00223d0:	a0 c0 28 03 c0       	mov    al,ds:0xc00328c0
c00223d5:	83 f0 01             	xor    eax,0x1
c00223d8:	84 c0                	test   al,al
c00223da:	74 57                	je     c0022433 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00223dc:	a1 08 cb 02 c0       	mov    eax,ds:0xc002cb08
c00223e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223e5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223ed:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00223f5:	7f 35                	jg     c002242c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00223f7:	83 ec 0c             	sub    esp,0xc
c00223fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00223fe:	e8 98 4f 00 00       	call   c002739b <__floatsisf>
c0022403:	83 c4 10             	add    esp,0x10
c0022406:	8b 15 08 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb08
c002240c:	83 ec 08             	sub    esp,0x8
c002240f:	52                   	push   edx
c0022410:	50                   	push   eax
c0022411:	e8 97 4b 00 00       	call   c0026fad <__mulsf3>
c0022416:	83 c4 10             	add    esp,0x10
c0022419:	89 c2                	mov    edx,eax
c002241b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002241f:	89 14 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],edx
c0022426:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002242a:	eb c1                	jmp    c00223ed <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002242c:	c6 05 c0 28 03 c0 01 	mov    BYTE PTR ds:0xc00328c0,0x1
c0022433:	90                   	nop
c0022434:	83 c4 1c             	add    esp,0x1c
c0022437:	c3                   	ret    

c0022438 <SoundChannel::play()>:
c0022438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002243c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022440:	c3                   	ret    
c0022441:	90                   	nop

c0022442 <SoundChannel::paused()>:
c0022442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022446:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022449:	c3                   	ret    

c002244a <SoundChannel::getSampleRate()>:
c002244a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002244e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022450:	c3                   	ret    
c0022451:	90                   	nop

c0022452 <SoundChannel::getBits()>:
c0022452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022459:	c3                   	ret    

c002245a <SoundChannel::getBufferUsed()>:
c002245a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002245e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022461:	c3                   	ret    

c0022462 <SoundChannel::getBufferSize()>:
c0022462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022466:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022469:	c3                   	ret    

c002246a <SoundChannel::unbuffer(float*, int, int)>:
c002246a:	56                   	push   esi
c002246b:	53                   	push   ebx
c002246c:	83 ec 40             	sub    esp,0x40
c002246f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022473:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022476:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002247a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002247d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022481:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022485:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022489:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002248d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022491:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022495:	e8 01 4f 00 00       	call   c002739b <__floatsisf>
c002249a:	5a                   	pop    edx
c002249b:	89 c6                	mov    esi,eax
c002249d:	ff 33                	push   DWORD PTR [ebx]
c002249f:	e8 f7 4e 00 00       	call   c002739b <__floatsisf>
c00224a4:	59                   	pop    ecx
c00224a5:	5a                   	pop    edx
c00224a6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00224a9:	50                   	push   eax
c00224aa:	e8 fe 4a 00 00       	call   c0026fad <__mulsf3>
c00224af:	59                   	pop    ecx
c00224b0:	5a                   	pop    edx
c00224b1:	50                   	push   eax
c00224b2:	56                   	push   esi
c00224b3:	e8 b8 4c 00 00       	call   c0027170 <__divsf3>
c00224b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00224bb:	e8 ab 61 00 00       	call   c002866b <__extendsfdf2>
c00224c0:	59                   	pop    ecx
c00224c1:	5e                   	pop    esi
c00224c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00224ca:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00224d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224d6:	50                   	push   eax
c00224d7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00224da:	e8 bd 62 fe ff       	call   c000879c <src_process>
c00224df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224e3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00224e6:	83 c4 0c             	add    esp,0xc
c00224e9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224ec:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224ef:	29 d0                	sub    eax,edx
c00224f1:	c1 e0 02             	shl    eax,0x2
c00224f4:	50                   	push   eax
c00224f5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224f8:	50                   	push   eax
c00224f9:	51                   	push   ecx
c00224fa:	e8 85 e1 fd ff       	call   c0000684 <memmove>
c00224ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022503:	83 c4 44             	add    esp,0x44
c0022506:	5b                   	pop    ebx
c0022507:	5e                   	pop    esi
c0022508:	c3                   	ret    
c0022509:	90                   	nop

c002250a <SoundChannel::buffer8(unsigned char*, int)>:
c002250a:	55                   	push   ebp
c002250b:	57                   	push   edi
c002250c:	56                   	push   esi
c002250d:	53                   	push   ebx
c002250e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022512:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022516:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022519:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002251d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022520:	74 7a                	je     c002259c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022522:	85 ff                	test   edi,edi
c0022524:	7e 76                	jle    c002259c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022526:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002252a:	8d 70 01             	lea    esi,[eax+0x1]
c002252d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022530:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022533:	8b 1c 9d c0 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb40]
c002253a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002253d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022540:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022543:	74 5e                	je     c00225a3 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022545:	83 ff 01             	cmp    edi,0x1
c0022548:	74 4b                	je     c0022595 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002254a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002254e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022551:	8d 70 01             	lea    esi,[eax+0x1]
c0022554:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022557:	8b 1c 9d c0 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb40]
c002255e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022561:	b8 02 00 00 00       	mov    eax,0x2
c0022566:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022569:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002256c:	75 23                	jne    c0022591 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002256e:	eb 27                	jmp    c0022597 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022570:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022575:	8d 71 01             	lea    esi,[ecx+0x1]
c0022578:	40                   	inc    eax
c0022579:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002257c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002257f:	8b 1c 9d c0 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb40]
c0022586:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022589:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002258c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002258f:	74 06                	je     c0022597 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022591:	39 c7                	cmp    edi,eax
c0022593:	75 db                	jne    c0022570 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022595:	89 f8                	mov    eax,edi
c0022597:	5b                   	pop    ebx
c0022598:	5e                   	pop    esi
c0022599:	5f                   	pop    edi
c002259a:	5d                   	pop    ebp
c002259b:	c3                   	ret    
c002259c:	5b                   	pop    ebx
c002259d:	31 c0                	xor    eax,eax
c002259f:	5e                   	pop    esi
c00225a0:	5f                   	pop    edi
c00225a1:	5d                   	pop    ebp
c00225a2:	c3                   	ret    
c00225a3:	b8 01 00 00 00       	mov    eax,0x1
c00225a8:	eb ed                	jmp    c0022597 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00225aa <SoundDevice::SoundDevice(char const*)>:
c00225aa:	83 ec 1c             	sub    esp,0x1c
c00225ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b1:	83 ec 08             	sub    esp,0x8
c00225b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225b8:	50                   	push   eax
c00225b9:	e8 fe 1e ff ff       	call   c00144bc <Device::Device(char const*)>
c00225be:	83 c4 10             	add    esp,0x10
c00225c1:	ba 14 cb 02 c0       	mov    edx,0xc002cb14
c00225c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ca:	89 10                	mov    DWORD PTR [eax],edx
c00225cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00225da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225de:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225f0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225f5:	7f 19                	jg     c0022610 <SoundDevice::SoundDevice(char const*)+0x66>
c00225f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225ff:	83 c2 54             	add    edx,0x54
c0022602:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002260a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002260e:	eb e0                	jmp    c00225f0 <SoundDevice::SoundDevice(char const*)+0x46>
c0022610:	90                   	nop
c0022611:	83 c4 1c             	add    esp,0x1c
c0022614:	c3                   	ret    
c0022615:	90                   	nop

c0022616 <SoundDevice::~SoundDevice()>:
c0022616:	53                   	push   ebx
c0022617:	83 ec 18             	sub    esp,0x18
c002261a:	ba 14 cb 02 c0       	mov    edx,0xc002cb14
c002261f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022623:	89 10                	mov    DWORD PTR [eax],edx
c0022625:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002262d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022632:	7f 46                	jg     c002267a <SoundDevice::~SoundDevice()+0x64>
c0022634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022638:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002263c:	83 c2 54             	add    edx,0x54
c002263f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022643:	85 c0                	test   eax,eax
c0022645:	74 2d                	je     c0022674 <SoundDevice::~SoundDevice()+0x5e>
c0022647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002264b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002264f:	83 c2 54             	add    edx,0x54
c0022652:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022656:	85 db                	test   ebx,ebx
c0022658:	74 1a                	je     c0022674 <SoundDevice::~SoundDevice()+0x5e>
c002265a:	83 ec 0c             	sub    esp,0xc
c002265d:	53                   	push   ebx
c002265e:	e8 21 fc ff ff       	call   c0022284 <SoundChannel::~SoundChannel()>
c0022663:	83 c4 10             	add    esp,0x10
c0022666:	83 ec 08             	sub    esp,0x8
c0022669:	6a 2c                	push   0x2c
c002266b:	53                   	push   ebx
c002266c:	e8 54 07 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0022671:	83 c4 10             	add    esp,0x10
c0022674:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022678:	eb b3                	jmp    c002262d <SoundDevice::~SoundDevice()+0x17>
c002267a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002267e:	83 ec 0c             	sub    esp,0xc
c0022681:	50                   	push   eax
c0022682:	e8 17 1b ff ff       	call   c001419e <Device::~Device()>
c0022687:	83 c4 10             	add    esp,0x10
c002268a:	90                   	nop
c002268b:	83 c4 18             	add    esp,0x18
c002268e:	5b                   	pop    ebx
c002268f:	c3                   	ret    

c0022690 <SoundDevice::~SoundDevice()>:
c0022690:	83 ec 0c             	sub    esp,0xc
c0022693:	83 ec 0c             	sub    esp,0xc
c0022696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002269a:	e8 77 ff ff ff       	call   c0022616 <SoundDevice::~SoundDevice()>
c002269f:	83 c4 10             	add    esp,0x10
c00226a2:	83 ec 08             	sub    esp,0x8
c00226a5:	68 e4 01 00 00       	push   0x1e4
c00226aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226ae:	e8 12 07 ff ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00226b3:	83 c4 10             	add    esp,0x10
c00226b6:	83 c4 0c             	add    esp,0xc
c00226b9:	c3                   	ret    

c00226ba <SoundDevice::getFreeChannelNum()>:
c00226ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226be:	31 c0                	xor    eax,eax
c00226c0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00226c8:	74 09                	je     c00226d3 <SoundDevice::getFreeChannelNum()+0x19>
c00226ca:	40                   	inc    eax
c00226cb:	83 f8 20             	cmp    eax,0x20
c00226ce:	75 f0                	jne    c00226c0 <SoundDevice::getFreeChannelNum()+0x6>
c00226d0:	83 c8 ff             	or     eax,0xffffffff
c00226d3:	c3                   	ret    

c00226d4 <SoundDevice::addChannel(SoundChannel*)>:
c00226d4:	56                   	push   esi
c00226d5:	53                   	push   ebx
c00226d6:	51                   	push   ecx
c00226d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00226df:	53                   	push   ebx
c00226e0:	e8 d5 ff ff ff       	call   c00226ba <SoundDevice::getFreeChannelNum()>
c00226e5:	5a                   	pop    edx
c00226e6:	83 f8 ff             	cmp    eax,0xffffffff
c00226e9:	74 51                	je     c002273c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226eb:	85 f6                	test   esi,esi
c00226ed:	74 4d                	je     c002273c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226ef:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226f6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226fd:	75 30                	jne    c002272f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226ff:	83 ec 0c             	sub    esp,0xc
c0022702:	56                   	push   esi
c0022703:	e8 42 fd ff ff       	call   c002244a <SoundChannel::getSampleRate()>
c0022708:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002270e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022711:	e8 3c fd ff ff       	call   c0022452 <SoundChannel::getBits()>
c0022716:	83 c4 0c             	add    esp,0xc
c0022719:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002271f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022721:	50                   	push   eax
c0022722:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022728:	53                   	push   ebx
c0022729:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002272c:	83 c4 10             	add    esp,0x10
c002272f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022735:	b8 01 00 00 00       	mov    eax,0x1
c002273a:	eb 03                	jmp    c002273f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002273c:	83 c8 ff             	or     eax,0xffffffff
c002273f:	5a                   	pop    edx
c0022740:	5b                   	pop    ebx
c0022741:	5e                   	pop    esi
c0022742:	c3                   	ret    
c0022743:	90                   	nop

c0022744 <SoundDevice::removeChannel(int)>:
c0022744:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002274c:	83 fa 1f             	cmp    edx,0x1f
c002274f:	77 23                	ja     c0022774 <SoundDevice::removeChannel(int)+0x30>
c0022751:	8d 14 90             	lea    edx,[eax+edx*4]
c0022754:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002275b:	74 17                	je     c0022774 <SoundDevice::removeChannel(int)+0x30>
c002275d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022767:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002276d:	75 05                	jne    c0022774 <SoundDevice::removeChannel(int)+0x30>
c002276f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022771:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022774:	c3                   	ret    
c0022775:	90                   	nop

c0022776 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022776:	57                   	push   edi
c0022777:	56                   	push   esi
c0022778:	53                   	push   ebx
c0022779:	31 db                	xor    ebx,ebx
c002277b:	83 ec 10             	sub    esp,0x10
c002277e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022782:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022786:	0f 8d cb 00 00 00    	jge    c0022857 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002278c:	83 ec 0c             	sub    esp,0xc
c002278f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022793:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022796:	e8 d0 5e 00 00       	call   c002866b <__extendsfdf2>
c002279b:	83 c4 10             	add    esp,0x10
c002279e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227a6:	68 00 00 f0 3f       	push   0x3ff00000
c00227ab:	6a 00                	push   0x0
c00227ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b5:	e8 3d 4e 00 00       	call   c00275f7 <__adddf3>
c00227ba:	83 c4 10             	add    esp,0x10
c00227bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227c5:	68 00 00 e0 3f       	push   0x3fe00000
c00227ca:	6a 00                	push   0x0
c00227cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d4:	e8 9b 54 00 00       	call   c0027c74 <__muldf3>
c00227d9:	83 c4 10             	add    esp,0x10
c00227dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227e4:	68 00 00 60 40       	push   0x40600000
c00227e9:	6a 00                	push   0x0
c00227eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f3:	e8 7c 54 00 00       	call   c0027c74 <__muldf3>
c00227f8:	59                   	pop    ecx
c00227f9:	5f                   	pop    edi
c00227fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227fe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002280a:	e8 38 5d 00 00       	call   c0028547 <__truncdfsf2>
c002280f:	5a                   	pop    edx
c0022810:	89 c7                	mov    edi,eax
c0022812:	59                   	pop    ecx
c0022813:	68 00 00 fe 42       	push   0x42fe0000
c0022818:	50                   	push   eax
c0022819:	e8 d3 4d 00 00       	call   c00275f1 <__gesf2>
c002281e:	83 c4 10             	add    esp,0x10
c0022821:	85 c0                	test   eax,eax
c0022823:	78 06                	js     c002282b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022825:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022829:	eb 26                	jmp    c0022851 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002282b:	50                   	push   eax
c002282c:	50                   	push   eax
c002282d:	6a 00                	push   0x0
c002282f:	57                   	push   edi
c0022830:	e8 c0 4d 00 00       	call   c00275f5 <__lesf2>
c0022835:	83 c4 10             	add    esp,0x10
c0022838:	85 c0                	test   eax,eax
c002283a:	7f 06                	jg     c0022842 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002283c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022840:	eb 0f                	jmp    c0022851 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022842:	83 ec 0c             	sub    esp,0xc
c0022845:	57                   	push   edi
c0022846:	e8 c1 5e 00 00       	call   c002870c <lrintf>
c002284b:	83 c4 10             	add    esp,0x10
c002284e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022851:	43                   	inc    ebx
c0022852:	e9 2b ff ff ff       	jmp    c0022782 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022857:	83 c4 10             	add    esp,0x10
c002285a:	5b                   	pop    ebx
c002285b:	5e                   	pop    esi
c002285c:	5f                   	pop    edi
c002285d:	c3                   	ret    

c002285e <SoundDevice::getAudio(int, float*, float*)>:
c002285e:	55                   	push   ebp
c002285f:	57                   	push   edi
c0022860:	56                   	push   esi
c0022861:	53                   	push   ebx
c0022862:	31 db                	xor    ebx,ebx
c0022864:	83 ec 20             	sub    esp,0x20
c0022867:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002286b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002286f:	c1 e0 02             	shl    eax,0x2
c0022872:	50                   	push   eax
c0022873:	6a 00                	push   0x0
c0022875:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022879:	e8 02 df fd ff       	call   c0000780 <memset>
c002287e:	83 c4 10             	add    esp,0x10
c0022881:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022885:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002288c:	85 c0                	test   eax,eax
c002288e:	0f 84 d7 00 00 00    	je     c002296b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022894:	83 ec 0c             	sub    esp,0xc
c0022897:	50                   	push   eax
c0022898:	e8 a5 fb ff ff       	call   c0022442 <SoundChannel::paused()>
c002289d:	83 c4 10             	add    esp,0x10
c00228a0:	84 c0                	test   al,al
c00228a2:	0f 85 c3 00 00 00    	jne    c002296b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228a8:	83 ec 0c             	sub    esp,0xc
c00228ab:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228b2:	e8 19 fa ff ff       	call   c00222d0 <SoundChannel::getVolume()>
c00228b7:	83 c4 10             	add    esp,0x10
c00228ba:	85 c0                	test   eax,eax
c00228bc:	0f 84 a9 00 00 00    	je     c002296b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228c2:	83 ec 0c             	sub    esp,0xc
c00228c5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228cc:	e8 ff f9 ff ff       	call   c00222d0 <SoundChannel::getVolume()>
c00228d1:	83 ec 0c             	sub    esp,0xc
c00228d4:	50                   	push   eax
c00228d5:	e8 c1 4a 00 00       	call   c002739b <__floatsisf>
c00228da:	59                   	pop    ecx
c00228db:	5d                   	pop    ebp
c00228dc:	31 ed                	xor    ebp,ebp
c00228de:	68 00 00 c8 42       	push   0x42c80000
c00228e3:	50                   	push   eax
c00228e4:	e8 87 48 00 00       	call   c0027170 <__divsf3>
c00228e9:	83 c4 10             	add    esp,0x10
c00228ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228f4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228fa:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228fe:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022905:	e8 60 fb ff ff       	call   c002246a <SoundChannel::unbuffer(float*, int, int)>
c002290a:	83 c4 20             	add    esp,0x20
c002290d:	89 c1                	mov    ecx,eax
c002290f:	39 cd                	cmp    ebp,ecx
c0022911:	7d 52                	jge    c0022965 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022913:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022917:	50                   	push   eax
c0022918:	50                   	push   eax
c0022919:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002291d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022920:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022924:	e8 84 46 00 00       	call   c0026fad <__mulsf3>
c0022929:	5a                   	pop    edx
c002292a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002292e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022934:	e8 62 4a 00 00       	call   c002739b <__floatsisf>
c0022939:	59                   	pop    ecx
c002293a:	5a                   	pop    edx
c002293b:	50                   	push   eax
c002293c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022940:	e8 2b 48 00 00       	call   c0027170 <__divsf3>
c0022945:	59                   	pop    ecx
c0022946:	5a                   	pop    edx
c0022947:	50                   	push   eax
c0022948:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002294c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002294f:	e8 36 43 00 00       	call   c0026c8a <__addsf3>
c0022954:	83 c4 10             	add    esp,0x10
c0022957:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002295b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002295f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022962:	45                   	inc    ebp
c0022963:	eb aa                	jmp    c002290f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022965:	39 cf                	cmp    edi,ecx
c0022967:	7e 02                	jle    c002296b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022969:	89 cf                	mov    edi,ecx
c002296b:	43                   	inc    ebx
c002296c:	83 fb 20             	cmp    ebx,0x20
c002296f:	0f 85 10 ff ff ff    	jne    c0022885 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022975:	83 c4 1c             	add    esp,0x1c
c0022978:	89 f8                	mov    eax,edi
c002297a:	5b                   	pop    ebx
c002297b:	5e                   	pop    esi
c002297c:	5f                   	pop    edi
c002297d:	5d                   	pop    ebp
c002297e:	c3                   	ret    
c002297f:	90                   	nop

c0022980 <PCI::open(int, int, void*)>:
c0022980:	83 ec 18             	sub    esp,0x18
c0022983:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022987:	8b 10                	mov    edx,DWORD PTR [eax]
c0022989:	50                   	push   eax
c002298a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002298d:	31 c0                	xor    eax,eax
c002298f:	83 c4 1c             	add    esp,0x1c
c0022992:	c3                   	ret    
c0022993:	90                   	nop

c0022994 <PCI::close(int, int, void*)>:
c0022994:	31 c0                	xor    eax,eax
c0022996:	c3                   	ret    
c0022997:	90                   	nop

c0022998 <PCI::PCI()>:
c0022998:	83 ec 0c             	sub    esp,0xc
c002299b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299f:	83 ec 08             	sub    esp,0x8
c00229a2:	68 44 cb 02 c0       	push   0xc002cb44
c00229a7:	50                   	push   eax
c00229a8:	e8 93 11 ff ff       	call   c0013b40 <Bus::Bus(char const*)>
c00229ad:	83 c4 10             	add    esp,0x10
c00229b0:	ba b0 cb 02 c0       	mov    edx,0xc002cbb0
c00229b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b9:	89 10                	mov    DWORD PTR [eax],edx
c00229bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229c5:	0f b6 d0             	movzx  edx,al
c00229c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cc:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229dd:	0f b6 d0             	movzx  edx,al
c00229e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229f3:	8d 50 01             	lea    edx,[eax+0x1]
c00229f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229fa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a00:	0f b6 d0             	movzx  edx,al
c0022a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a07:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a0b:	83 c9 c0             	or     ecx,0xffffffc0
c0022a0e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a12:	90                   	nop
c0022a13:	83 c4 0c             	add    esp,0xc
c0022a16:	c3                   	ret    
c0022a17:	90                   	nop

c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a21:	89 ca                	mov    edx,ecx
c0022a23:	c1 e0 10             	shl    eax,0x10
c0022a26:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a2c:	09 d0                	or     eax,edx
c0022a2e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a33:	c1 e2 08             	shl    edx,0x8
c0022a36:	09 d0                	or     eax,edx
c0022a38:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a3d:	c1 e2 0b             	shl    edx,0xb
c0022a40:	09 d0                	or     eax,edx
c0022a42:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a47:	0d 00 00 00 80       	or     eax,0x80000000
c0022a4c:	ef                   	out    dx,eax
c0022a4d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a52:	ed                   	in     eax,dx
c0022a53:	83 e1 02             	and    ecx,0x2
c0022a56:	0f b6 c9             	movzx  ecx,cl
c0022a59:	c1 e1 03             	shl    ecx,0x3
c0022a5c:	d3 e8                	shr    eax,cl
c0022a5e:	c3                   	ret    
c0022a5f:	90                   	nop

c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a60:	6a 00                	push   0x0
c0022a62:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a67:	50                   	push   eax
c0022a68:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6d:	50                   	push   eax
c0022a6e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a73:	50                   	push   eax
c0022a74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a78:	e8 9b ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a7d:	83 c4 14             	add    esp,0x14
c0022a80:	c3                   	ret    
c0022a81:	90                   	nop

c0022a82 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a82:	6a 0e                	push   0xe
c0022a84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a89:	50                   	push   eax
c0022a8a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a8f:	50                   	push   eax
c0022a90:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a95:	50                   	push   eax
c0022a96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a9a:	e8 79 ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a9f:	83 c4 14             	add    esp,0x14
c0022aa2:	0f b6 c0             	movzx  eax,al
c0022aa5:	c3                   	ret    

c0022aa6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022aa6:	55                   	push   ebp
c0022aa7:	57                   	push   edi
c0022aa8:	56                   	push   esi
c0022aa9:	53                   	push   ebx
c0022aaa:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022aaf:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022ab4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022ab9:	6a 0a                	push   0xa
c0022abb:	56                   	push   esi
c0022abc:	55                   	push   ebp
c0022abd:	57                   	push   edi
c0022abe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022ac2:	e8 51 ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac7:	6a 0a                	push   0xa
c0022ac9:	89 c3                	mov    ebx,eax
c0022acb:	56                   	push   esi
c0022acc:	0f b6 db             	movzx  ebx,bl
c0022acf:	55                   	push   ebp
c0022ad0:	57                   	push   edi
c0022ad1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022ad5:	e8 3e ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ada:	83 c4 28             	add    esp,0x28
c0022add:	25 00 ff 00 00       	and    eax,0xff00
c0022ae2:	09 d8                	or     eax,ebx
c0022ae4:	5b                   	pop    ebx
c0022ae5:	5e                   	pop    esi
c0022ae6:	5f                   	pop    edi
c0022ae7:	5d                   	pop    ebp
c0022ae8:	c3                   	ret    
c0022ae9:	90                   	nop

c0022aea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022aea:	6a 08                	push   0x8
c0022aec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af1:	50                   	push   eax
c0022af2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af7:	50                   	push   eax
c0022af8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022afd:	50                   	push   eax
c0022afe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b02:	e8 11 ff ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b07:	83 c4 14             	add    esp,0x14
c0022b0a:	0f b6 c4             	movzx  eax,ah
c0022b0d:	c3                   	ret    

c0022b0e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b0e:	6a 08                	push   0x8
c0022b10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b15:	50                   	push   eax
c0022b16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1b:	50                   	push   eax
c0022b1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b21:	50                   	push   eax
c0022b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b26:	e8 ed fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b2b:	83 c4 14             	add    esp,0x14
c0022b2e:	c3                   	ret    
c0022b2f:	90                   	nop

c0022b30 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b30:	6a 3c                	push   0x3c
c0022b32:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b37:	50                   	push   eax
c0022b38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b3d:	50                   	push   eax
c0022b3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b43:	50                   	push   eax
c0022b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b48:	e8 cb fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b4d:	83 c4 14             	add    esp,0x14
c0022b50:	c3                   	ret    
c0022b51:	90                   	nop

c0022b52 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b52:	6a 18                	push   0x18
c0022b54:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b59:	50                   	push   eax
c0022b5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b5f:	50                   	push   eax
c0022b60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b65:	50                   	push   eax
c0022b66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b6a:	e8 a9 fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b6f:	83 c4 14             	add    esp,0x14
c0022b72:	0f b6 c4             	movzx  eax,ah
c0022b75:	c3                   	ret    

c0022b76 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b76:	55                   	push   ebp
c0022b77:	57                   	push   edi
c0022b78:	56                   	push   esi
c0022b79:	53                   	push   ebx
c0022b7a:	50                   	push   eax
c0022b7b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b7f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b84:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b89:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b8e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b95:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b98:	83 c3 10             	add    ebx,0x10
c0022b9b:	0f b6 c0             	movzx  eax,al
c0022b9e:	0f b6 db             	movzx  ebx,bl
c0022ba1:	50                   	push   eax
c0022ba2:	51                   	push   ecx
c0022ba3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022ba7:	57                   	push   edi
c0022ba8:	55                   	push   ebp
c0022ba9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022bad:	e8 66 fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bb2:	53                   	push   ebx
c0022bb3:	89 c6                	mov    esi,eax
c0022bb5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022bb9:	c1 e6 10             	shl    esi,0x10
c0022bbc:	51                   	push   ecx
c0022bbd:	57                   	push   edi
c0022bbe:	55                   	push   ebp
c0022bbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022bc3:	e8 50 fe ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bc8:	83 c4 2c             	add    esp,0x2c
c0022bcb:	0f b7 c0             	movzx  eax,ax
c0022bce:	5b                   	pop    ebx
c0022bcf:	09 f0                	or     eax,esi
c0022bd1:	5e                   	pop    esi
c0022bd2:	5f                   	pop    edi
c0022bd3:	5d                   	pop    ebp
c0022bd4:	c3                   	ret    
c0022bd5:	90                   	nop

c0022bd6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022bd6:	53                   	push   ebx
c0022bd7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bdc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022be1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022be5:	c1 e1 10             	shl    ecx,0x10
c0022be8:	25 fc 00 00 00       	and    eax,0xfc
c0022bed:	09 c1                	or     ecx,eax
c0022bef:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bf4:	c1 e0 08             	shl    eax,0x8
c0022bf7:	09 c1                	or     ecx,eax
c0022bf9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022bfe:	c1 e0 0b             	shl    eax,0xb
c0022c01:	09 c1                	or     ecx,eax
c0022c03:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c09:	89 c8                	mov    eax,ecx
c0022c0b:	ef                   	out    dx,eax
c0022c0c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c11:	ed                   	in     eax,dx
c0022c12:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c17:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c1c:	74 0a                	je     c0022c28 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c1e:	0f b7 d8             	movzx  ebx,ax
c0022c21:	89 d0                	mov    eax,edx
c0022c23:	c1 e0 10             	shl    eax,0x10
c0022c26:	eb 05                	jmp    c0022c2d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c28:	66 31 c0             	xor    ax,ax
c0022c2b:	89 d3                	mov    ebx,edx
c0022c2d:	09 c3                	or     ebx,eax
c0022c2f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c34:	89 c8                	mov    eax,ecx
c0022c36:	ef                   	out    dx,eax
c0022c37:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c3c:	89 d8                	mov    eax,ebx
c0022c3e:	ef                   	out    dx,eax
c0022c3f:	5b                   	pop    ebx
c0022c40:	c3                   	ret    
c0022c41:	90                   	nop

c0022c42 <PCI::checkBus(unsigned char)>:
c0022c42:	56                   	push   esi
c0022c43:	53                   	push   ebx
c0022c44:	31 db                	xor    ebx,ebx
c0022c46:	51                   	push   ecx
c0022c47:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c4c:	52                   	push   edx
c0022c4d:	53                   	push   ebx
c0022c4e:	43                   	inc    ebx
c0022c4f:	56                   	push   esi
c0022c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c54:	e8 2b 03 00 00       	call   c0022f84 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c59:	83 c4 10             	add    esp,0x10
c0022c5c:	83 fb 20             	cmp    ebx,0x20
c0022c5f:	75 eb                	jne    c0022c4c <PCI::checkBus(unsigned char)+0xa>
c0022c61:	58                   	pop    eax
c0022c62:	5b                   	pop    ebx
c0022c63:	5e                   	pop    esi
c0022c64:	c3                   	ret    
c0022c65:	90                   	nop

c0022c66 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c66:	55                   	push   ebp
c0022c67:	57                   	push   edi
c0022c68:	56                   	push   esi
c0022c69:	53                   	push   ebx
c0022c6a:	83 ec 1c             	sub    esp,0x1c
c0022c6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c71:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c77:	0f 84 52 01 00 00    	je     c0022dcf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c7d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c81:	66 81 f9 06 04       	cmp    cx,0x406
c0022c86:	75 2c                	jne    c0022cb4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c88:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c8d:	50                   	push   eax
c0022c8e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c93:	50                   	push   eax
c0022c94:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c99:	50                   	push   eax
c0022c9a:	56                   	push   esi
c0022c9b:	e8 b2 fe ff ff       	call   c0022b52 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ca0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ca4:	0f b6 c0             	movzx  eax,al
c0022ca7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022cab:	83 c4 2c             	add    esp,0x2c
c0022cae:	5b                   	pop    ebx
c0022caf:	5e                   	pop    esi
c0022cb0:	5f                   	pop    edi
c0022cb1:	5d                   	pop    ebp
c0022cb2:	eb 8e                	jmp    c0022c42 <PCI::checkBus(unsigned char)>
c0022cb4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022cb8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022cbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022cc2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022cc6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cca:	88 d3                	mov    bl,dl
c0022ccc:	85 c0                	test   eax,eax
c0022cce:	74 33                	je     c0022d03 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cd3:	85 d2                	test   edx,edx
c0022cd5:	74 28                	je     c0022cff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cd7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022cdd:	31 ef                	xor    edi,ebp
c0022cdf:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022ce5:	75 18                	jne    c0022cff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ce7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ceb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022cf1:	75 0c                	jne    c0022cff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cf3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cf9:	0f 84 d0 00 00 00    	je     c0022dcf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d01:	eb c9                	jmp    c0022ccc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d03:	66 81 f9 01 06       	cmp    cx,0x601
c0022d08:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d0c:	75 19                	jne    c0022d27 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d0e:	83 ec 0c             	sub    esp,0xc
c0022d11:	68 64 01 00 00       	push   0x164
c0022d16:	e8 30 cb fe ff       	call   c000f84b <malloc>
c0022d1b:	89 c5                	mov    ebp,eax
c0022d1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d20:	e8 95 0f 00 00       	call   c0023cba <SATABus::SATABus()>
c0022d25:	eb 1e                	jmp    c0022d45 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d27:	66 81 f9 01 01       	cmp    cx,0x101
c0022d2c:	75 60                	jne    c0022d8e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d2e:	83 ec 0c             	sub    esp,0xc
c0022d31:	68 70 02 00 00       	push   0x270
c0022d36:	e8 10 cb fe ff       	call   c000f84b <malloc>
c0022d3b:	89 c5                	mov    ebp,eax
c0022d3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d40:	e8 03 03 00 00       	call   c0023048 <IDE::IDE()>
c0022d45:	58                   	pop    eax
c0022d46:	5a                   	pop    edx
c0022d47:	55                   	push   ebp
c0022d48:	56                   	push   esi
c0022d49:	e8 7e 15 ff ff       	call   c00142cc <Device::addChild(Device*)>
c0022d4e:	83 ec 1c             	sub    esp,0x1c
c0022d51:	b9 09 00 00 00       	mov    ecx,0x9
c0022d56:	fc                   	cld    
c0022d57:	89 e7                	mov    edi,esp
c0022d59:	89 de                	mov    esi,ebx
c0022d5b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d5d:	55                   	push   ebp
c0022d5e:	e8 73 14 ff ff       	call   c00141d6 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d66:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d6a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d72:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d7a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d85:	83 c4 4c             	add    esp,0x4c
c0022d88:	5b                   	pop    ebx
c0022d89:	5e                   	pop    esi
c0022d8a:	5f                   	pop    edi
c0022d8b:	5d                   	pop    ebp
c0022d8c:	ff e0                	jmp    eax
c0022d8e:	83 ec 0c             	sub    esp,0xc
c0022d91:	68 58 01 00 00       	push   0x158
c0022d96:	e8 b0 ca fe ff       	call   c000f84b <malloc>
c0022d9b:	89 c5                	mov    ebp,eax
c0022d9d:	58                   	pop    eax
c0022d9e:	5a                   	pop    edx
c0022d9f:	68 4c cb 02 c0       	push   0xc002cb4c
c0022da4:	55                   	push   ebp
c0022da5:	e8 18 18 ff ff       	call   c00145c2 <DriverlessDevice::DriverlessDevice(char const*)>
c0022daa:	59                   	pop    ecx
c0022dab:	5f                   	pop    edi
c0022dac:	55                   	push   ebp
c0022dad:	56                   	push   esi
c0022dae:	e8 19 15 ff ff       	call   c00142cc <Device::addChild(Device*)>
c0022db3:	b9 09 00 00 00       	mov    ecx,0x9
c0022db8:	fc                   	cld    
c0022db9:	89 df                	mov    edi,ebx
c0022dbb:	89 de                	mov    esi,ebx
c0022dbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022dbf:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022dc3:	83 c4 2c             	add    esp,0x2c
c0022dc6:	5b                   	pop    ebx
c0022dc7:	5e                   	pop    esi
c0022dc8:	5f                   	pop    edi
c0022dc9:	5d                   	pop    ebp
c0022dca:	e9 07 14 ff ff       	jmp    c00141d6 <Device::preOpenPCI(PCIDeviceInfo)>
c0022dcf:	83 c4 1c             	add    esp,0x1c
c0022dd2:	5b                   	pop    ebx
c0022dd3:	5e                   	pop    esi
c0022dd4:	5f                   	pop    edi
c0022dd5:	5d                   	pop    ebp
c0022dd6:	c3                   	ret    
c0022dd7:	90                   	nop

c0022dd8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022dd8:	55                   	push   ebp
c0022dd9:	57                   	push   edi
c0022dda:	56                   	push   esi
c0022ddb:	53                   	push   ebx
c0022ddc:	83 ec 5c             	sub    esp,0x5c
c0022ddf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022de3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022deb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022df0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022df4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022df8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022dfd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e01:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e06:	6a 0c                	push   0xc
c0022e08:	55                   	push   ebp
c0022e09:	53                   	push   ebx
c0022e0a:	57                   	push   edi
c0022e0b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e12:	e8 01 fc ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e17:	55                   	push   ebp
c0022e18:	53                   	push   ebx
c0022e19:	57                   	push   edi
c0022e1a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e21:	e8 80 fc ff ff       	call   c0022aa6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e26:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e2b:	83 c4 24             	add    esp,0x24
c0022e2e:	55                   	push   ebp
c0022e2f:	53                   	push   ebx
c0022e30:	57                   	push   edi
c0022e31:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e35:	e8 f6 fc ff ff       	call   c0022b30 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e3a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e3e:	6a 3c                	push   0x3c
c0022e40:	55                   	push   ebp
c0022e41:	53                   	push   ebx
c0022e42:	57                   	push   edi
c0022e43:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e4a:	e8 c9 fb ff ff       	call   c0022a18 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e4f:	0f b6 c4             	movzx  eax,ah
c0022e52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e56:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e5a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e5e:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0022e63:	83 c4 24             	add    esp,0x24
c0022e66:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e6c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e73:	74 6c                	je     c0022ee1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e75:	31 f6                	xor    esi,esi
c0022e77:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c0022e7d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e83:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e89:	7e 56                	jle    c0022ee1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e8b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e8e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e95:	39 cb                	cmp    ebx,ecx
c0022e97:	75 45                	jne    c0022ede <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e99:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ea0:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022ea4:	75 38                	jne    c0022ede <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ea6:	83 ec 0c             	sub    esp,0xc
c0022ea9:	68 66 cb 02 c0       	push   0xc002cb66
c0022eae:	e8 f2 ff fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0022eb3:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c0022eb9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ebf:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022ec7:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ecb:	52                   	push   edx
c0022ecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ed0:	53                   	push   ebx
c0022ed1:	68 8b cb 02 c0       	push   0xc002cb8b
c0022ed6:	e8 ca ff fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0022edb:	83 c4 20             	add    esp,0x20
c0022ede:	46                   	inc    esi
c0022edf:	eb 96                	jmp    c0022e77 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ee1:	31 d2                	xor    edx,edx
c0022ee3:	83 ec 0c             	sub    esp,0xc
c0022ee6:	55                   	push   ebp
c0022ee7:	53                   	push   ebx
c0022ee8:	57                   	push   edi
c0022ee9:	52                   	push   edx
c0022eea:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022eee:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ef5:	e8 7c fc ff ff       	call   c0022b76 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022efa:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022efe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f02:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f06:	42                   	inc    edx
c0022f07:	83 c4 20             	add    esp,0x20
c0022f0a:	83 fa 06             	cmp    edx,0x6
c0022f0d:	75 d4                	jne    c0022ee3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f0f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f13:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f17:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f1b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f1f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f23:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f27:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f2c:	86 e0                	xchg   al,ah
c0022f2e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f33:	55                   	push   ebp
c0022f34:	53                   	push   ebx
c0022f35:	57                   	push   edi
c0022f36:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f3a:	e8 ab fb ff ff       	call   c0022aea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f3f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f43:	55                   	push   ebp
c0022f44:	53                   	push   ebx
c0022f45:	57                   	push   edi
c0022f46:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f4d:	e8 0e fb ff ff       	call   c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f52:	83 ec 0c             	sub    esp,0xc
c0022f55:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f5a:	b9 09 00 00 00       	mov    ecx,0x9
c0022f5f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f63:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f67:	fc                   	cld    
c0022f68:	89 e7                	mov    edi,esp
c0022f6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f6c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f73:	e8 ee fc ff ff       	call   c0022c66 <PCI::foundDevice(PCIDeviceInfo)>
c0022f78:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f7e:	5b                   	pop    ebx
c0022f7f:	5e                   	pop    esi
c0022f80:	5f                   	pop    edi
c0022f81:	5d                   	pop    ebp
c0022f82:	c3                   	ret    
c0022f83:	90                   	nop

c0022f84 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f84:	55                   	push   ebp
c0022f85:	57                   	push   edi
c0022f86:	56                   	push   esi
c0022f87:	53                   	push   ebx
c0022f88:	83 ec 0c             	sub    esp,0xc
c0022f8b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f8f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f94:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f99:	6a 00                	push   0x0
c0022f9b:	56                   	push   esi
c0022f9c:	57                   	push   edi
c0022f9d:	55                   	push   ebp
c0022f9e:	e8 bd fa ff ff       	call   c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fa3:	6a 00                	push   0x0
c0022fa5:	56                   	push   esi
c0022fa6:	57                   	push   edi
c0022fa7:	55                   	push   ebp
c0022fa8:	e8 2b fe ff ff       	call   c0022dd8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fad:	83 c4 20             	add    esp,0x20
c0022fb0:	6a 00                	push   0x0
c0022fb2:	56                   	push   esi
c0022fb3:	57                   	push   edi
c0022fb4:	55                   	push   ebp
c0022fb5:	e8 c8 fa ff ff       	call   c0022a82 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fba:	83 c4 10             	add    esp,0x10
c0022fbd:	84 c0                	test   al,al
c0022fbf:	79 27                	jns    c0022fe8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fc1:	bb 01 00 00 00       	mov    ebx,0x1
c0022fc6:	53                   	push   ebx
c0022fc7:	56                   	push   esi
c0022fc8:	57                   	push   edi
c0022fc9:	55                   	push   ebp
c0022fca:	e8 91 fa ff ff       	call   c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fcf:	83 c4 10             	add    esp,0x10
c0022fd2:	66 40                	inc    ax
c0022fd4:	74 0c                	je     c0022fe2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022fd6:	53                   	push   ebx
c0022fd7:	56                   	push   esi
c0022fd8:	57                   	push   edi
c0022fd9:	55                   	push   ebp
c0022fda:	e8 f9 fd ff ff       	call   c0022dd8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fdf:	83 c4 10             	add    esp,0x10
c0022fe2:	43                   	inc    ebx
c0022fe3:	83 fb 08             	cmp    ebx,0x8
c0022fe6:	75 de                	jne    c0022fc6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fe8:	83 c4 0c             	add    esp,0xc
c0022feb:	5b                   	pop    ebx
c0022fec:	5e                   	pop    esi
c0022fed:	5f                   	pop    edi
c0022fee:	5d                   	pop    ebp
c0022fef:	c3                   	ret    

c0022ff0 <PCI::detect()>:
c0022ff0:	56                   	push   esi
c0022ff1:	53                   	push   ebx
c0022ff2:	53                   	push   ebx
c0022ff3:	31 db                	xor    ebx,ebx
c0022ff5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ff9:	6a 00                	push   0x0
c0022ffb:	6a 00                	push   0x0
c0022ffd:	6a 00                	push   0x0
c0022fff:	56                   	push   esi
c0023000:	e8 7d fa ff ff       	call   c0022a82 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023005:	83 c4 10             	add    esp,0x10
c0023008:	a8 80                	test   al,0x80
c002300a:	75 21                	jne    c002302d <PCI::detect()+0x3d>
c002300c:	51                   	push   ecx
c002300d:	51                   	push   ecx
c002300e:	6a 00                	push   0x0
c0023010:	56                   	push   esi
c0023011:	e8 2c fc ff ff       	call   c0022c42 <PCI::checkBus(unsigned char)>
c0023016:	83 c4 10             	add    esp,0x10
c0023019:	eb 24                	jmp    c002303f <PCI::detect()+0x4f>
c002301b:	52                   	push   edx
c002301c:	52                   	push   edx
c002301d:	53                   	push   ebx
c002301e:	43                   	inc    ebx
c002301f:	56                   	push   esi
c0023020:	e8 1d fc ff ff       	call   c0022c42 <PCI::checkBus(unsigned char)>
c0023025:	83 c4 10             	add    esp,0x10
c0023028:	83 fb 08             	cmp    ebx,0x8
c002302b:	74 12                	je     c002303f <PCI::detect()+0x4f>
c002302d:	53                   	push   ebx
c002302e:	6a 00                	push   0x0
c0023030:	6a 00                	push   0x0
c0023032:	56                   	push   esi
c0023033:	e8 28 fa ff ff       	call   c0022a60 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023038:	83 c4 10             	add    esp,0x10
c002303b:	66 40                	inc    ax
c002303d:	74 dc                	je     c002301b <PCI::detect()+0x2b>
c002303f:	58                   	pop    eax
c0023040:	5b                   	pop    ebx
c0023041:	5e                   	pop    esi
c0023042:	c3                   	ret    
c0023043:	90                   	nop

c0023044 <IDE::close(int, int, void*)>:
c0023044:	83 c8 ff             	or     eax,0xffffffff
c0023047:	c3                   	ret    

c0023048 <IDE::IDE()>:
c0023048:	83 ec 0c             	sub    esp,0xc
c002304b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304f:	83 ec 08             	sub    esp,0x8
c0023052:	68 d4 cb 02 c0       	push   0xc002cbd4
c0023057:	50                   	push   eax
c0023058:	e8 fb 15 ff ff       	call   c0014658 <HardDiskController::HardDiskController(char const*)>
c002305d:	83 c4 10             	add    esp,0x10
c0023060:	ba 14 ce 02 c0       	mov    edx,0xc002ce14
c0023065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023069:	89 10                	mov    DWORD PTR [eax],edx
c002306b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023076:	90                   	nop
c0023077:	83 c4 0c             	add    esp,0xc
c002307a:	c3                   	ret    
c002307b:	90                   	nop

c002307c <IDE::prepareInterrupt(unsigned char)>:
c002307c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023081:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023085:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002308d:	c3                   	ret    

c002308e <selectDrive(unsigned char, unsigned char)>:
c002308e:	c3                   	ret    
c002308f:	90                   	nop

c0023090 <IDE::getBase(unsigned char)>:
c0023090:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023095:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023099:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00230a1:	c3                   	ret    

c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230a2:	55                   	push   ebp
c00230a3:	57                   	push   edi
c00230a4:	56                   	push   esi
c00230a5:	53                   	push   ebx
c00230a6:	83 ec 1c             	sub    esp,0x1c
c00230a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230b1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230b4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230bc:	80 f9 03             	cmp    cl,0x3
c00230bf:	77 51                	ja     c0023112 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230c5:	0f b6 f2             	movzx  esi,dl
c00230c8:	0f b6 db             	movzx  ebx,bl
c00230cb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230ce:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230d2:	83 ca 80             	or     edx,0xffffff80
c00230d5:	0f b6 d2             	movzx  edx,dl
c00230d8:	52                   	push   edx
c00230d9:	6a 0c                	push   0xc
c00230db:	56                   	push   esi
c00230dc:	57                   	push   edi
c00230dd:	e8 c0 ff ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230eb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230ef:	ee                   	out    dx,al
c00230f0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230f5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230f9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023101:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023109:	83 c4 2c             	add    esp,0x2c
c002310c:	5b                   	pop    ebx
c002310d:	5e                   	pop    esi
c002310e:	5f                   	pop    edi
c002310f:	5d                   	pop    ebp
c0023110:	eb 90                	jmp    c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023112:	80 fb 07             	cmp    bl,0x7
c0023115:	77 12                	ja     c0023129 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023117:	0f b6 d2             	movzx  edx,dl
c002311a:	0f b6 db             	movzx  ebx,bl
c002311d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023125:	89 da                	mov    edx,ebx
c0023127:	eb 2f                	jmp    c0023158 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023129:	80 fb 0d             	cmp    bl,0xd
c002312c:	77 13                	ja     c0023141 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002312e:	0f b6 d2             	movzx  edx,dl
c0023131:	0f b6 db             	movzx  ebx,bl
c0023134:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002313b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002313f:	eb 17                	jmp    c0023158 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023141:	80 fb 15             	cmp    bl,0x15
c0023144:	77 13                	ja     c0023159 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023146:	0f b6 d2             	movzx  edx,dl
c0023149:	0f b6 db             	movzx  ebx,bl
c002314c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023154:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023158:	ee                   	out    dx,al
c0023159:	83 c4 1c             	add    esp,0x1c
c002315c:	5b                   	pop    ebx
c002315d:	5e                   	pop    esi
c002315e:	5f                   	pop    edi
c002315f:	5d                   	pop    ebp
c0023160:	c3                   	ret    
c0023161:	90                   	nop

c0023162 <IDE::read(unsigned char, unsigned char)>:
c0023162:	55                   	push   ebp
c0023163:	57                   	push   edi
c0023164:	56                   	push   esi
c0023165:	53                   	push   ebx
c0023166:	83 ec 1c             	sub    esp,0x1c
c0023169:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002316d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023171:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023174:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023178:	3c 03                	cmp    al,0x3
c002317a:	77 43                	ja     c00231bf <IDE::read(unsigned char, unsigned char)+0x5d>
c002317c:	0f b6 f2             	movzx  esi,dl
c002317f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023182:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023186:	83 c8 80             	or     eax,0xffffff80
c0023189:	0f b6 c0             	movzx  eax,al
c002318c:	50                   	push   eax
c002318d:	6a 0c                	push   0xc
c002318f:	56                   	push   esi
c0023190:	57                   	push   edi
c0023191:	e8 0c ff ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023196:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002319b:	0f b6 c3             	movzx  eax,bl
c002319e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231a2:	ec                   	in     al,dx
c00231a3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231a7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231ac:	52                   	push   edx
c00231ad:	6a 0c                	push   0xc
c00231af:	56                   	push   esi
c00231b0:	57                   	push   edi
c00231b1:	e8 ec fe ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231b6:	83 c4 20             	add    esp,0x20
c00231b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231bd:	eb 49                	jmp    c0023208 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231bf:	80 fb 07             	cmp    bl,0x7
c00231c2:	77 12                	ja     c00231d6 <IDE::read(unsigned char, unsigned char)+0x74>
c00231c4:	0f b6 d2             	movzx  edx,dl
c00231c7:	0f b6 c3             	movzx  eax,bl
c00231ca:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231d2:	89 c2                	mov    edx,eax
c00231d4:	eb 31                	jmp    c0023207 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231d6:	80 fb 0d             	cmp    bl,0xd
c00231d9:	77 13                	ja     c00231ee <IDE::read(unsigned char, unsigned char)+0x8c>
c00231db:	0f b6 d2             	movzx  edx,dl
c00231de:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231e5:	0f b6 d3             	movzx  edx,bl
c00231e8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231ec:	eb 19                	jmp    c0023207 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231ee:	31 c0                	xor    eax,eax
c00231f0:	80 fb 15             	cmp    bl,0x15
c00231f3:	77 13                	ja     c0023208 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231f5:	0f b6 d2             	movzx  edx,dl
c00231f8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023200:	0f b6 d3             	movzx  edx,bl
c0023203:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023207:	ec                   	in     al,dx
c0023208:	83 c4 1c             	add    esp,0x1c
c002320b:	5b                   	pop    ebx
c002320c:	5e                   	pop    esi
c002320d:	5f                   	pop    edi
c002320e:	5d                   	pop    ebp
c002320f:	c3                   	ret    

c0023210 <IDE::waitInterrupt(unsigned char)>:
c0023210:	55                   	push   ebp
c0023211:	57                   	push   edi
c0023212:	56                   	push   esi
c0023213:	53                   	push   ebx
c0023214:	31 db                	xor    ebx,ebx
c0023216:	83 ec 0c             	sub    esp,0xc
c0023219:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002321d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023222:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002322a:	89 e8                	mov    eax,ebp
c002322c:	84 c0                	test   al,al
c002322e:	75 34                	jne    c0023264 <IDE::waitInterrupt(unsigned char)+0x54>
c0023230:	52                   	push   edx
c0023231:	6a 0c                	push   0xc
c0023233:	56                   	push   esi
c0023234:	57                   	push   edi
c0023235:	e8 28 ff ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002323a:	83 c4 10             	add    esp,0x10
c002323d:	a8 01                	test   al,0x1
c002323f:	75 2b                	jne    c002326c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023241:	f6 c3 04             	test   bl,0x4
c0023244:	75 16                	jne    c002325c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023246:	83 fb 32             	cmp    ebx,0x32
c0023249:	7e 11                	jle    c002325c <IDE::waitInterrupt(unsigned char)+0x4c>
c002324b:	50                   	push   eax
c002324c:	50                   	push   eax
c002324d:	6a 00                	push   0x0
c002324f:	68 80 96 98 00       	push   0x989680
c0023254:	e8 8b b1 ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0023259:	83 c4 10             	add    esp,0x10
c002325c:	83 fb 3c             	cmp    ebx,0x3c
c002325f:	74 0b                	je     c002326c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023261:	43                   	inc    ebx
c0023262:	eb be                	jmp    c0023222 <IDE::waitInterrupt(unsigned char)+0x12>
c0023264:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002326c:	83 c4 0c             	add    esp,0xc
c002326f:	89 e8                	mov    eax,ebp
c0023271:	5b                   	pop    ebx
c0023272:	5e                   	pop    esi
c0023273:	5f                   	pop    edi
c0023274:	5d                   	pop    ebp
c0023275:	c3                   	ret    

c0023276 <ideChannel0IRQHandler(regs*, void*)>:
c0023276:	83 ec 10             	sub    esp,0x10
c0023279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002327d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023284:	6a 07                	push   0x7
c0023286:	6a 00                	push   0x0
c0023288:	50                   	push   eax
c0023289:	e8 d4 fe ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002328e:	83 c4 1c             	add    esp,0x1c
c0023291:	c3                   	ret    

c0023292 <ideChannel1IRQHandler(regs*, void*)>:
c0023292:	83 ec 10             	sub    esp,0x10
c0023295:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023299:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00232a0:	6a 07                	push   0x7
c00232a2:	6a 01                	push   0x1
c00232a4:	50                   	push   eax
c00232a5:	e8 b8 fe ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00232aa:	83 c4 1c             	add    esp,0x1c
c00232ad:	c3                   	ret    

c00232ae <IDE::enableIRQs(unsigned char, bool)>:
c00232ae:	57                   	push   edi
c00232af:	56                   	push   esi
c00232b0:	be 04 00 00 00       	mov    esi,0x4
c00232b5:	53                   	push   ebx
c00232b6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232bf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232c4:	0f 94 c0             	sete   al
c00232c7:	d1 e0                	shl    eax,1
c00232c9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232d0:	0f b6 c0             	movzx  eax,al
c00232d3:	50                   	push   eax
c00232d4:	6a 0c                	push   0xc
c00232d6:	57                   	push   edi
c00232d7:	53                   	push   ebx
c00232d8:	e8 c5 fd ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232dd:	83 c4 10             	add    esp,0x10
c00232e0:	50                   	push   eax
c00232e1:	6a 0c                	push   0xc
c00232e3:	57                   	push   edi
c00232e4:	53                   	push   ebx
c00232e5:	e8 78 fe ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00232ea:	83 c4 10             	add    esp,0x10
c00232ed:	4e                   	dec    esi
c00232ee:	75 f0                	jne    c00232e0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232f0:	5b                   	pop    ebx
c00232f1:	5e                   	pop    esi
c00232f2:	5f                   	pop    edi
c00232f3:	c3                   	ret    

c00232f4 <IDE::open(int, int, void*)>:
c00232f4:	55                   	push   ebp
c00232f5:	57                   	push   edi
c00232f6:	56                   	push   esi
c00232f7:	53                   	push   ebx
c00232f8:	83 ec 1c             	sub    esp,0x1c
c00232fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232ff:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023308:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023311:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023318:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002331f:	0f 85 b0 02 00 00    	jne    c00235d5 <IDE::open(int, int, void*)+0x2e1>
c0023325:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002332b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002332f:	83 e0 7f             	and    eax,0x7f
c0023332:	3c 05                	cmp    al,0x5
c0023334:	74 04                	je     c002333a <IDE::open(int, int, void*)+0x46>
c0023336:	3c 0f                	cmp    al,0xf
c0023338:	75 32                	jne    c002336c <IDE::open(int, int, void*)+0x78>
c002333a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023340:	83 e0 fc             	and    eax,0xfffffffc
c0023343:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002334a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023350:	83 e0 fc             	and    eax,0xfffffffc
c0023353:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002335a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023360:	83 e0 fc             	and    eax,0xfffffffc
c0023363:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002336a:	eb 14                	jmp    c0023380 <IDE::open(int, int, void*)+0x8c>
c002336c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023376:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023380:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023387:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002338e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023392:	89 c6                	mov    esi,eax
c0023394:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023399:	c1 e6 10             	shl    esi,0x10
c002339c:	89 e8                	mov    eax,ebp
c002339e:	89 fa                	mov    edx,edi
c00233a0:	c1 e0 0b             	shl    eax,0xb
c00233a3:	09 f0                	or     eax,esi
c00233a5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233ac:	c1 e6 08             	shl    esi,0x8
c00233af:	09 c6                	or     esi,eax
c00233b1:	89 f0                	mov    eax,esi
c00233b3:	0d 08 00 00 80       	or     eax,0x80000008
c00233b8:	ef                   	out    dx,eax
c00233b9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233be:	89 ca                	mov    edx,ecx
c00233c0:	ed                   	in     eax,dx
c00233c1:	c1 e8 10             	shr    eax,0x10
c00233c4:	3d ff ff 00 00       	cmp    eax,0xffff
c00233c9:	0f 84 f5 00 00 00    	je     c00234c4 <IDE::open(int, int, void*)+0x1d0>
c00233cf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00233d5:	89 fa                	mov    edx,edi
c00233d7:	89 f0                	mov    eax,esi
c00233d9:	ef                   	out    dx,eax
c00233da:	b0 fe                	mov    al,0xfe
c00233dc:	89 ca                	mov    edx,ecx
c00233de:	ee                   	out    dx,al
c00233df:	89 f0                	mov    eax,esi
c00233e1:	89 fa                	mov    edx,edi
c00233e3:	ef                   	out    dx,eax
c00233e4:	89 ca                	mov    edx,ecx
c00233e6:	ed                   	in     eax,dx
c00233e7:	3c fe                	cmp    al,0xfe
c00233e9:	0f 85 a9 00 00 00    	jne    c0023498 <IDE::open(int, int, void*)+0x1a4>
c00233ef:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c00233f5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233fc:	74 33                	je     c0023431 <IDE::open(int, int, void*)+0x13d>
c00233fe:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023404:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023408:	40                   	inc    eax
c0023409:	83 ec 0c             	sub    esp,0xc
c002340c:	0f b6 c0             	movzx  eax,al
c002340f:	50                   	push   eax
c0023410:	55                   	push   ebp
c0023411:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023415:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002341b:	51                   	push   ecx
c002341c:	e8 b7 4e ff ff       	call   c00182d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023421:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023426:	83 c4 1c             	add    esp,0x1c
c0023429:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002342f:	eb 0a                	jmp    c002343b <IDE::open(int, int, void*)+0x147>
c0023431:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002343b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023442:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023449:	c1 e1 10             	shl    ecx,0x10
c002344c:	c1 e0 08             	shl    eax,0x8
c002344f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023454:	09 c1                	or     ecx,eax
c0023456:	89 fa                	mov    edx,edi
c0023458:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002345f:	c1 e0 0b             	shl    eax,0xb
c0023462:	09 c1                	or     ecx,eax
c0023464:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002346a:	89 c8                	mov    eax,ecx
c002346c:	ef                   	out    dx,eax
c002346d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023472:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023478:	89 f2                	mov    edx,esi
c002347a:	ee                   	out    dx,al
c002347b:	89 c8                	mov    eax,ecx
c002347d:	89 fa                	mov    edx,edi
c002347f:	ef                   	out    dx,eax
c0023480:	89 f2                	mov    edx,esi
c0023482:	ed                   	in     eax,dx
c0023483:	0f b6 c0             	movzx  eax,al
c0023486:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002348c:	74 46                	je     c00234d4 <IDE::open(int, int, void*)+0x1e0>
c002348e:	83 ec 0c             	sub    esp,0xc
c0023491:	68 ec cb 02 c0       	push   0xc002cbec
c0023496:	eb 34                	jmp    c00234cc <IDE::open(int, int, void*)+0x1d8>
c0023498:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00234a1:	75 17                	jne    c00234ba <IDE::open(int, int, void*)+0x1c6>
c00234a3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234a8:	74 07                	je     c00234b1 <IDE::open(int, int, void*)+0x1bd>
c00234aa:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234af:	75 09                	jne    c00234ba <IDE::open(int, int, void*)+0x1c6>
c00234b1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234b8:	eb 1a                	jmp    c00234d4 <IDE::open(int, int, void*)+0x1e0>
c00234ba:	83 ec 0c             	sub    esp,0xc
c00234bd:	68 f4 cb 02 c0       	push   0xc002cbf4
c00234c2:	eb 08                	jmp    c00234cc <IDE::open(int, int, void*)+0x1d8>
c00234c4:	83 ec 0c             	sub    esp,0xc
c00234c7:	68 25 cc 02 c0       	push   0xc002cc25
c00234cc:	e8 ae 71 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c00234d1:	83 c4 10             	add    esp,0x10
c00234d4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00234db:	79 1a                	jns    c00234f7 <IDE::open(int, int, void*)+0x203>
c00234dd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234e3:	83 e0 fc             	and    eax,0xfffffffc
c00234e6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234ed:	83 c0 08             	add    eax,0x8
c00234f0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234f7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234fd:	89 c2                	mov    edx,eax
c00234ff:	83 e2 0f             	and    edx,0xf
c0023502:	66 83 fa 08          	cmp    dx,0x8
c0023506:	75 0a                	jne    c0023512 <IDE::open(int, int, void*)+0x21e>
c0023508:	83 e8 02             	sub    eax,0x2
c002350b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023512:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023518:	89 c2                	mov    edx,eax
c002351a:	83 e2 0f             	and    edx,0xf
c002351d:	66 83 fa 08          	cmp    dx,0x8
c0023521:	75 0a                	jne    c002352d <IDE::open(int, int, void*)+0x239>
c0023523:	83 e8 02             	sub    eax,0x2
c0023526:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002352d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023534:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002353b:	89 d0                	mov    eax,edx
c002353d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023540:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023544:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023548:	8d 4a 01             	lea    ecx,[edx+0x1]
c002354b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023550:	0f b6 c9             	movzx  ecx,cl
c0023553:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002355a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002355d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023561:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023565:	8d 50 02             	lea    edx,[eax+0x2]
c0023568:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002356d:	0f b6 d2             	movzx  edx,dl
c0023570:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023576:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023579:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002357d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023581:	8d 48 03             	lea    ecx,[eax+0x3]
c0023584:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023589:	0f b6 c9             	movzx  ecx,cl
c002358c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023592:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023595:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023599:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002359d:	8d 50 04             	lea    edx,[eax+0x4]
c00235a0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235a6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235ab:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235b2:	66 85 f6             	test   si,si
c00235b5:	74 3e                	je     c00235f5 <IDE::open(int, int, void*)+0x301>
c00235b7:	0f b6 d2             	movzx  edx,dl
c00235ba:	83 c0 05             	add    eax,0x5
c00235bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235c0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235c4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235c8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235ce:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235d3:	eb 20                	jmp    c00235f5 <IDE::open(int, int, void*)+0x301>
c00235d5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00235df:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00235e9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235f0:	e9 02 ff ff ff       	jmp    c00234f7 <IDE::open(int, int, void*)+0x203>
c00235f5:	52                   	push   edx
c00235f6:	52                   	push   edx
c00235f7:	6a 00                	push   0x0
c00235f9:	53                   	push   ebx
c00235fa:	e8 7d fa ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c00235ff:	59                   	pop    ecx
c0023600:	5e                   	pop    esi
c0023601:	6a 01                	push   0x1
c0023603:	53                   	push   ebx
c0023604:	e8 73 fa ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c0023609:	83 c4 0c             	add    esp,0xc
c002360c:	6a 00                	push   0x0
c002360e:	6a 00                	push   0x0
c0023610:	53                   	push   ebx
c0023611:	e8 98 fc ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c0023616:	83 c4 0c             	add    esp,0xc
c0023619:	6a 00                	push   0x0
c002361b:	6a 01                	push   0x1
c002361d:	53                   	push   ebx
c002361e:	e8 8b fc ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c0023623:	83 c4 10             	add    esp,0x10
c0023626:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002362d:	74 40                	je     c002366f <IDE::open(int, int, void*)+0x37b>
c002362f:	83 ec 0c             	sub    esp,0xc
c0023632:	68 4f cc 02 c0       	push   0xc002cc4f
c0023637:	e8 69 f8 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c002363c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002363f:	6a 01                	push   0x1
c0023641:	68 76 32 02 c0       	push   0xc0023276
c0023646:	6a 0e                	push   0xe
c0023648:	53                   	push   ebx
c0023649:	e8 02 0c ff ff       	call   c0014250 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002364e:	83 c4 14             	add    esp,0x14
c0023651:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023657:	53                   	push   ebx
c0023658:	6a 01                	push   0x1
c002365a:	68 92 32 02 c0       	push   0xc0023292
c002365f:	6a 0f                	push   0xf
c0023661:	53                   	push   ebx
c0023662:	e8 e9 0b ff ff       	call   c0014250 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023667:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002366d:	eb 4a                	jmp    c00236b9 <IDE::open(int, int, void*)+0x3c5>
c002366f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023679:	50                   	push   eax
c002367a:	6a 0f                	push   0xf
c002367c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023682:	68 6b cc 02 c0       	push   0xc002cc6b
c0023687:	e8 19 f8 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c002368c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002368f:	6a 00                	push   0x0
c0023691:	68 76 32 02 c0       	push   0xc0023276
c0023696:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002369c:	53                   	push   ebx
c002369d:	e8 ae 0b ff ff       	call   c0014250 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236a2:	83 c4 14             	add    esp,0x14
c00236a5:	53                   	push   ebx
c00236a6:	6a 00                	push   0x0
c00236a8:	68 92 32 02 c0       	push   0xc0023292
c00236ad:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236b3:	53                   	push   ebx
c00236b4:	e8 97 0b ff ff       	call   c0014250 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236bb:	83 c4 20             	add    esp,0x20
c00236be:	83 ec 0c             	sub    esp,0xc
c00236c1:	53                   	push   ebx
c00236c2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236c5:	83 c4 0c             	add    esp,0xc
c00236c8:	6a 07                	push   0x7
c00236ca:	6a 00                	push   0x0
c00236cc:	53                   	push   ebx
c00236cd:	e8 90 fa ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00236d2:	83 c4 0c             	add    esp,0xc
c00236d5:	6a 07                	push   0x7
c00236d7:	6a 01                	push   0x1
c00236d9:	53                   	push   ebx
c00236da:	e8 83 fa ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00236df:	83 c4 0c             	add    esp,0xc
c00236e2:	6a 01                	push   0x1
c00236e4:	6a 00                	push   0x0
c00236e6:	53                   	push   ebx
c00236e7:	e8 c2 fb ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c00236ec:	83 c4 0c             	add    esp,0xc
c00236ef:	6a 01                	push   0x1
c00236f1:	6a 01                	push   0x1
c00236f3:	53                   	push   ebx
c00236f4:	e8 b5 fb ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c00236f9:	83 c4 2c             	add    esp,0x2c
c00236fc:	31 c0                	xor    eax,eax
c00236fe:	5b                   	pop    ebx
c00236ff:	5e                   	pop    esi
c0023700:	5f                   	pop    edi
c0023701:	5d                   	pop    ebp
c0023702:	c3                   	ret    
c0023703:	90                   	nop

c0023704 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023704:	55                   	push   ebp
c0023705:	57                   	push   edi
c0023706:	56                   	push   esi
c0023707:	53                   	push   ebx
c0023708:	83 ec 1c             	sub    esp,0x1c
c002370b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002370f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023713:	8d 50 f8             	lea    edx,[eax-0x8]
c0023716:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002371a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002371e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023722:	80 fa 03             	cmp    dl,0x3
c0023725:	77 5d                	ja     c0023784 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023727:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002372b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002372f:	0f b6 db             	movzx  ebx,bl
c0023732:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023735:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023739:	83 ca 80             	or     edx,0xffffff80
c002373c:	0f b6 d2             	movzx  edx,dl
c002373f:	52                   	push   edx
c0023740:	6a 0c                	push   0xc
c0023742:	53                   	push   ebx
c0023743:	56                   	push   esi
c0023744:	e8 59 f9 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023749:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002374e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023752:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023756:	0f b6 c0             	movzx  eax,al
c0023759:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002375d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002375f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023764:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023768:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002376c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023770:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023778:	83 c4 2c             	add    esp,0x2c
c002377b:	5b                   	pop    ebx
c002377c:	5e                   	pop    esi
c002377d:	5f                   	pop    edi
c002377e:	5d                   	pop    ebp
c002377f:	e9 1e f9 ff ff       	jmp    c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023784:	3c 07                	cmp    al,0x7
c0023786:	77 10                	ja     c0023798 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023788:	0f b6 db             	movzx  ebx,bl
c002378b:	0f b6 d0             	movzx  edx,al
c002378e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023796:	eb 2d                	jmp    c00237c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023798:	3c 0d                	cmp    al,0xd
c002379a:	77 13                	ja     c00237af <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002379c:	0f b6 db             	movzx  ebx,bl
c002379f:	0f b6 c0             	movzx  eax,al
c00237a2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237a9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237ad:	eb 16                	jmp    c00237c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237af:	3c 15                	cmp    al,0x15
c00237b1:	77 14                	ja     c00237c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237b3:	0f b6 db             	movzx  ebx,bl
c00237b6:	0f b6 c0             	movzx  eax,al
c00237b9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237c1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237c5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237c7:	83 c4 1c             	add    esp,0x1c
c00237ca:	5b                   	pop    ebx
c00237cb:	5e                   	pop    esi
c00237cc:	5f                   	pop    edi
c00237cd:	5d                   	pop    ebp
c00237ce:	c3                   	ret    
c00237cf:	90                   	nop

c00237d0 <IDE::detect()>:
c00237d0:	55                   	push   ebp
c00237d1:	57                   	push   edi
c00237d2:	56                   	push   esi
c00237d3:	53                   	push   ebx
c00237d4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00237da:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237e1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237e8:	0f 85 be 02 00 00    	jne    c0023aac <IDE::detect()+0x2dc>
c00237ee:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237f5:	31 f6                	xor    esi,esi
c00237f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237ff:	31 ed                	xor    ebp,ebp
c0023801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023805:	c1 e0 06             	shl    eax,0x6
c0023808:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023810:	89 e8                	mov    eax,ebp
c0023812:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023816:	c1 e0 04             	shl    eax,0x4
c0023819:	83 c8 a0             	or     eax,0xffffffa0
c002381c:	0f b6 c0             	movzx  eax,al
c002381f:	50                   	push   eax
c0023820:	6a 06                	push   0x6
c0023822:	56                   	push   esi
c0023823:	53                   	push   ebx
c0023824:	e8 79 f8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023829:	83 c4 0c             	add    esp,0xc
c002382c:	6a 0c                	push   0xc
c002382e:	56                   	push   esi
c002382f:	53                   	push   ebx
c0023830:	e8 2d f9 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023835:	83 c4 0c             	add    esp,0xc
c0023838:	6a 0c                	push   0xc
c002383a:	56                   	push   esi
c002383b:	53                   	push   ebx
c002383c:	e8 21 f9 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023841:	83 c4 0c             	add    esp,0xc
c0023844:	6a 0c                	push   0xc
c0023846:	56                   	push   esi
c0023847:	53                   	push   ebx
c0023848:	e8 15 f9 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002384d:	83 c4 0c             	add    esp,0xc
c0023850:	6a 0c                	push   0xc
c0023852:	56                   	push   esi
c0023853:	53                   	push   ebx
c0023854:	e8 09 f9 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023859:	68 ec 00 00 00       	push   0xec
c002385e:	6a 07                	push   0x7
c0023860:	56                   	push   esi
c0023861:	53                   	push   ebx
c0023862:	e8 3b f8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023867:	83 c4 1c             	add    esp,0x1c
c002386a:	6a 0c                	push   0xc
c002386c:	56                   	push   esi
c002386d:	53                   	push   ebx
c002386e:	e8 ef f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023873:	83 c4 0c             	add    esp,0xc
c0023876:	6a 0c                	push   0xc
c0023878:	56                   	push   esi
c0023879:	53                   	push   ebx
c002387a:	e8 e3 f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002387f:	83 c4 0c             	add    esp,0xc
c0023882:	6a 0c                	push   0xc
c0023884:	56                   	push   esi
c0023885:	53                   	push   ebx
c0023886:	e8 d7 f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c002388b:	83 c4 0c             	add    esp,0xc
c002388e:	6a 0c                	push   0xc
c0023890:	56                   	push   esi
c0023891:	53                   	push   ebx
c0023892:	e8 cb f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023897:	83 c4 0c             	add    esp,0xc
c002389a:	6a 0c                	push   0xc
c002389c:	56                   	push   esi
c002389d:	53                   	push   ebx
c002389e:	e8 bf f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00238a3:	83 c4 10             	add    esp,0x10
c00238a6:	84 c0                	test   al,al
c00238a8:	0f 84 8b 01 00 00    	je     c0023a39 <IDE::detect()+0x269>
c00238ae:	31 ff                	xor    edi,edi
c00238b0:	50                   	push   eax
c00238b1:	6a 0c                	push   0xc
c00238b3:	56                   	push   esi
c00238b4:	53                   	push   ebx
c00238b5:	e8 a8 f8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00238ba:	83 c4 10             	add    esp,0x10
c00238bd:	a8 01                	test   al,0x1
c00238bf:	0f 85 8e 01 00 00    	jne    c0023a53 <IDE::detect()+0x283>
c00238c5:	84 c0                	test   al,al
c00238c7:	78 04                	js     c00238cd <IDE::detect()+0xfd>
c00238c9:	a8 08                	test   al,0x8
c00238cb:	75 27                	jne    c00238f4 <IDE::detect()+0x124>
c00238cd:	47                   	inc    edi
c00238ce:	81 ff 17 01 00 00    	cmp    edi,0x117
c00238d4:	7e da                	jle    c00238b0 <IDE::detect()+0xe0>
c00238d6:	50                   	push   eax
c00238d7:	50                   	push   eax
c00238d8:	6a 00                	push   0x0
c00238da:	68 40 4b 4c 00       	push   0x4c4b40
c00238df:	e8 00 ab ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c00238e4:	83 c4 10             	add    esp,0x10
c00238e7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238ed:	75 c1                	jne    c00238b0 <IDE::detect()+0xe0>
c00238ef:	e9 5f 01 00 00       	jmp    c0023a53 <IDE::detect()+0x283>
c00238f4:	31 c9                	xor    ecx,ecx
c00238f6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238fa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238fe:	83 ec 0c             	sub    esp,0xc
c0023901:	68 80 00 00 00       	push   0x80
c0023906:	57                   	push   edi
c0023907:	6a 00                	push   0x0
c0023909:	56                   	push   esi
c002390a:	53                   	push   ebx
c002390b:	e8 f4 fd ff ff       	call   c0023704 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023910:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023915:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023919:	89 d1                	mov    ecx,edx
c002391b:	c1 e0 06             	shl    eax,0x6
c002391e:	01 d8                	add    eax,ebx
c0023920:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023927:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002392e:	89 f2                	mov    edx,esi
c0023930:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023936:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002393a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023940:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023944:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002394b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023953:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002395a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023962:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023968:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002396f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023975:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023979:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002397d:	83 c4 20             	add    esp,0x20
c0023980:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023983:	83 c0 02             	add    eax,0x2
c0023986:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002398c:	83 c7 02             	add    edi,0x2
c002398f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023992:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023998:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002399c:	75 e2                	jne    c0023980 <IDE::detect()+0x1b0>
c002399e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239a2:	c1 e0 06             	shl    eax,0x6
c00239a5:	01 d8                	add    eax,ebx
c00239a7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239ad:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239b4:	66 c1 ea 09          	shr    dx,0x9
c00239b8:	83 e2 01             	and    edx,0x1
c00239bb:	84 c9                	test   cl,cl
c00239bd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239c3:	75 2f                	jne    c00239f4 <IDE::detect()+0x224>
c00239c5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00239cb:	85 c0                	test   eax,eax
c00239cd:	74 66                	je     c0023a35 <IDE::detect()+0x265>
c00239cf:	50                   	push   eax
c00239d0:	55                   	push   ebp
c00239d1:	56                   	push   esi
c00239d2:	68 87 cc 02 c0       	push   0xc002cc87
c00239d7:	e8 c9 f4 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00239dc:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00239e3:	e8 63 be fe ff       	call   c000f84b <malloc>
c00239e8:	89 c7                	mov    edi,eax
c00239ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00239ed:	e8 78 06 00 00       	call   c002406a <ATA::ATA()>
c00239f2:	eb 28                	jmp    c0023a1c <IDE::detect()+0x24c>
c00239f4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00239fa:	55                   	push   ebp
c00239fb:	56                   	push   esi
c00239fc:	68 b6 cc 02 c0       	push   0xc002ccb6
c0023a01:	e8 9f f4 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023a06:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a0d:	e8 39 be fe ff       	call   c000f84b <malloc>
c0023a12:	89 c7                	mov    edi,eax
c0023a14:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a17:	e8 8e 0c 00 00       	call   c00246aa <ATAPI::ATAPI()>
c0023a1c:	5a                   	pop    edx
c0023a1d:	59                   	pop    ecx
c0023a1e:	57                   	push   edi
c0023a1f:	53                   	push   ebx
c0023a20:	e8 a7 08 ff ff       	call   c00142cc <Device::addChild(Device*)>
c0023a25:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a27:	53                   	push   ebx
c0023a28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a2c:	6a 00                	push   0x0
c0023a2e:	57                   	push   edi
c0023a2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a32:	83 c4 20             	add    esp,0x20
c0023a35:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a39:	4d                   	dec    ebp
c0023a3a:	74 0a                	je     c0023a46 <IDE::detect()+0x276>
c0023a3c:	bd 01 00 00 00       	mov    ebp,0x1
c0023a41:	e9 bb fd ff ff       	jmp    c0023801 <IDE::detect()+0x31>
c0023a46:	4e                   	dec    esi
c0023a47:	74 63                	je     c0023aac <IDE::detect()+0x2dc>
c0023a49:	be 01 00 00 00       	mov    esi,0x1
c0023a4e:	e9 ac fd ff ff       	jmp    c00237ff <IDE::detect()+0x2f>
c0023a53:	50                   	push   eax
c0023a54:	6a 04                	push   0x4
c0023a56:	56                   	push   esi
c0023a57:	53                   	push   ebx
c0023a58:	e8 05 f7 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023a5d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a61:	83 c4 0c             	add    esp,0xc
c0023a64:	6a 05                	push   0x5
c0023a66:	56                   	push   esi
c0023a67:	53                   	push   ebx
c0023a68:	e8 f5 f6 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023a6d:	83 c4 10             	add    esp,0x10
c0023a70:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a74:	80 fa 14             	cmp    dl,0x14
c0023a77:	75 04                	jne    c0023a7d <IDE::detect()+0x2ad>
c0023a79:	3c eb                	cmp    al,0xeb
c0023a7b:	eb 07                	jmp    c0023a84 <IDE::detect()+0x2b4>
c0023a7d:	3c 96                	cmp    al,0x96
c0023a7f:	75 b8                	jne    c0023a39 <IDE::detect()+0x269>
c0023a81:	80 fa 69             	cmp    dl,0x69
c0023a84:	75 b3                	jne    c0023a39 <IDE::detect()+0x269>
c0023a86:	68 a1 00 00 00       	push   0xa1
c0023a8b:	6a 07                	push   0x7
c0023a8d:	56                   	push   esi
c0023a8e:	53                   	push   ebx
c0023a8f:	e8 0e f6 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a94:	5f                   	pop    edi
c0023a95:	58                   	pop    eax
c0023a96:	6a 00                	push   0x0
c0023a98:	68 40 42 0f 00       	push   0xf4240
c0023a9d:	e8 42 a9 ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0023aa2:	83 c4 10             	add    esp,0x10
c0023aa5:	b1 01                	mov    cl,0x1
c0023aa7:	e9 4a fe ff ff       	jmp    c00238f6 <IDE::detect()+0x126>
c0023aac:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023ab2:	5b                   	pop    ebx
c0023ab3:	5e                   	pop    esi
c0023ab4:	5f                   	pop    edi
c0023ab5:	5d                   	pop    ebp
c0023ab6:	c3                   	ret    
c0023ab7:	90                   	nop

c0023ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023ab8:	55                   	push   ebp
c0023ab9:	57                   	push   edi
c0023aba:	56                   	push   esi
c0023abb:	53                   	push   ebx
c0023abc:	83 ec 1c             	sub    esp,0x1c
c0023abf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023ac3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023ac7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023acb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023acf:	88 c3                	mov    bl,al
c0023ad1:	84 c0                	test   al,al
c0023ad3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ad7:	0f 84 67 01 00 00    	je     c0023c44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023add:	83 ec 0c             	sub    esp,0xc
c0023ae0:	68 e7 cc 02 c0       	push   0xc002cce7
c0023ae5:	e8 bb f3 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023aea:	83 c4 10             	add    esp,0x10
c0023aed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023af1:	3c 01                	cmp    al,0x1
c0023af3:	75 17                	jne    c0023b0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023af5:	83 ec 0c             	sub    esp,0xc
c0023af8:	b3 13                	mov    bl,0x13
c0023afa:	68 f3 cc 02 c0       	push   0xc002ccf3
c0023aff:	e8 a1 f3 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023b04:	83 c4 10             	add    esp,0x10
c0023b07:	e9 25 01 00 00       	jmp    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b0c:	3c 02                	cmp    al,0x2
c0023b0e:	0f 85 ef 00 00 00    	jne    c0023c03 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b14:	d1 e6                	shl    esi,1
c0023b16:	09 ee                	or     esi,ebp
c0023b18:	52                   	push   edx
c0023b19:	89 f0                	mov    eax,esi
c0023b1b:	6a 01                	push   0x1
c0023b1d:	0f b6 f0             	movzx  esi,al
c0023b20:	c1 e6 06             	shl    esi,0x6
c0023b23:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b2b:	50                   	push   eax
c0023b2c:	57                   	push   edi
c0023b2d:	e8 30 f6 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023b32:	83 c4 10             	add    esp,0x10
c0023b35:	89 c6                	mov    esi,eax
c0023b37:	a8 01                	test   al,0x1
c0023b39:	74 12                	je     c0023b4d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b3b:	83 ec 0c             	sub    esp,0xc
c0023b3e:	b3 07                	mov    bl,0x7
c0023b40:	68 08 cd 02 c0       	push   0xc002cd08
c0023b45:	e8 5b f3 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023b4a:	83 c4 10             	add    esp,0x10
c0023b4d:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b53:	74 12                	je     c0023b67 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b55:	83 ec 0c             	sub    esp,0xc
c0023b58:	b3 03                	mov    bl,0x3
c0023b5a:	68 26 cd 02 c0       	push   0xc002cd26
c0023b5f:	e8 41 f3 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023b64:	83 c4 10             	add    esp,0x10
c0023b67:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b6d:	74 12                	je     c0023b81 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b6f:	83 ec 0c             	sub    esp,0xc
c0023b72:	b3 14                	mov    bl,0x14
c0023b74:	68 46 cd 02 c0       	push   0xc002cd46
c0023b79:	e8 27 f3 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023b7e:	83 c4 10             	add    esp,0x10
c0023b81:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b87:	74 12                	je     c0023b9b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b89:	83 ec 0c             	sub    esp,0xc
c0023b8c:	b3 03                	mov    bl,0x3
c0023b8e:	68 26 cd 02 c0       	push   0xc002cd26
c0023b93:	e8 0d f3 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023b98:	83 c4 10             	add    esp,0x10
c0023b9b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ba1:	74 12                	je     c0023bb5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ba3:	83 ec 0c             	sub    esp,0xc
c0023ba6:	b3 15                	mov    bl,0x15
c0023ba8:	68 5e cd 02 c0       	push   0xc002cd5e
c0023bad:	e8 f3 f2 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023bb2:	83 c4 10             	add    esp,0x10
c0023bb5:	f7 c6 20 00 00 00    	test   esi,0x20
c0023bbb:	74 12                	je     c0023bcf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023bbd:	83 ec 0c             	sub    esp,0xc
c0023bc0:	b3 03                	mov    bl,0x3
c0023bc2:	68 26 cd 02 c0       	push   0xc002cd26
c0023bc7:	e8 d9 f2 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023bcc:	83 c4 10             	add    esp,0x10
c0023bcf:	f7 c6 40 00 00 00    	test   esi,0x40
c0023bd5:	74 12                	je     c0023be9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023bd7:	83 ec 0c             	sub    esp,0xc
c0023bda:	b3 16                	mov    bl,0x16
c0023bdc:	68 78 cd 02 c0       	push   0xc002cd78
c0023be1:	e8 bf f2 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023be6:	83 c4 10             	add    esp,0x10
c0023be9:	89 f0                	mov    eax,esi
c0023beb:	84 c0                	test   al,al
c0023bed:	79 42                	jns    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bef:	83 ec 0c             	sub    esp,0xc
c0023bf2:	b3 0d                	mov    bl,0xd
c0023bf4:	68 99 cd 02 c0       	push   0xc002cd99
c0023bf9:	e8 a7 f2 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023bfe:	83 c4 10             	add    esp,0x10
c0023c01:	eb 2e                	jmp    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c03:	3c 03                	cmp    al,0x3
c0023c05:	75 14                	jne    c0023c1b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c07:	83 ec 0c             	sub    esp,0xc
c0023c0a:	b3 17                	mov    bl,0x17
c0023c0c:	68 ad cd 02 c0       	push   0xc002cdad
c0023c11:	e8 8f f2 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023c16:	83 c4 10             	add    esp,0x10
c0023c19:	eb 16                	jmp    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c1b:	3c 04                	cmp    al,0x4
c0023c1d:	75 12                	jne    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c1f:	83 ec 0c             	sub    esp,0xc
c0023c22:	b3 08                	mov    bl,0x8
c0023c24:	68 c3 cd 02 c0       	push   0xc002cdc3
c0023c29:	e8 77 f2 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023c2e:	83 c4 10             	add    esp,0x10
c0023c31:	50                   	push   eax
c0023c32:	50                   	push   eax
c0023c33:	0f b6 c3             	movzx  eax,bl
c0023c36:	50                   	push   eax
c0023c37:	68 db cd 02 c0       	push   0xc002cddb
c0023c3c:	e8 64 f2 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023c41:	83 c4 10             	add    esp,0x10
c0023c44:	83 c4 1c             	add    esp,0x1c
c0023c47:	88 d8                	mov    al,bl
c0023c49:	5b                   	pop    ebx
c0023c4a:	5e                   	pop    esi
c0023c4b:	5f                   	pop    edi
c0023c4c:	5d                   	pop    ebp
c0023c4d:	c3                   	ret    

c0023c4e <IDE::polling(unsigned char, unsigned int)>:
c0023c4e:	57                   	push   edi
c0023c4f:	56                   	push   esi
c0023c50:	53                   	push   ebx
c0023c51:	bb 04 00 00 00       	mov    ebx,0x4
c0023c56:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c5a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c5f:	52                   	push   edx
c0023c60:	6a 0c                	push   0xc
c0023c62:	56                   	push   esi
c0023c63:	57                   	push   edi
c0023c64:	e8 f9 f4 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023c69:	83 c4 10             	add    esp,0x10
c0023c6c:	4b                   	dec    ebx
c0023c6d:	75 f0                	jne    c0023c5f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c6f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c74:	50                   	push   eax
c0023c75:	6a 0c                	push   0xc
c0023c77:	56                   	push   esi
c0023c78:	57                   	push   edi
c0023c79:	e8 e4 f4 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0023c7e:	83 c4 10             	add    esp,0x10
c0023c81:	a8 01                	test   al,0x1
c0023c83:	74 12                	je     c0023c97 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c85:	83 ec 0c             	sub    esp,0xc
c0023c88:	68 f5 cd 02 c0       	push   0xc002cdf5
c0023c8d:	e8 13 f2 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023c92:	83 c4 10             	add    esp,0x10
c0023c95:	eb 17                	jmp    c0023cae <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c97:	a8 20                	test   al,0x20
c0023c99:	75 0f                	jne    c0023caa <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c9b:	4b                   	dec    ebx
c0023c9c:	74 10                	je     c0023cae <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c9e:	84 c0                	test   al,al
c0023ca0:	78 d2                	js     c0023c74 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ca2:	a8 08                	test   al,0x8
c0023ca4:	74 ce                	je     c0023c74 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ca6:	31 c0                	xor    eax,eax
c0023ca8:	eb 06                	jmp    c0023cb0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023caa:	b0 01                	mov    al,0x1
c0023cac:	eb 02                	jmp    c0023cb0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cae:	b0 02                	mov    al,0x2
c0023cb0:	5b                   	pop    ebx
c0023cb1:	5e                   	pop    esi
c0023cb2:	5f                   	pop    edi
c0023cb3:	c3                   	ret    

c0023cb4 <SATABus::close(int, int, void*)>:
c0023cb4:	31 c0                	xor    eax,eax
c0023cb6:	c3                   	ret    
c0023cb7:	90                   	nop

c0023cb8 <SATABus::detect()>:
c0023cb8:	c3                   	ret    
c0023cb9:	90                   	nop

c0023cba <SATABus::SATABus()>:
c0023cba:	83 ec 0c             	sub    esp,0xc
c0023cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc1:	83 ec 08             	sub    esp,0x8
c0023cc4:	68 38 ce 02 c0       	push   0xc002ce38
c0023cc9:	50                   	push   eax
c0023cca:	e8 89 09 ff ff       	call   c0014658 <HardDiskController::HardDiskController(char const*)>
c0023ccf:	83 c4 10             	add    esp,0x10
c0023cd2:	ba f4 ce 02 c0       	mov    edx,0xc002cef4
c0023cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cdb:	89 10                	mov    DWORD PTR [eax],edx
c0023cdd:	83 ec 0c             	sub    esp,0xc
c0023ce0:	6a 50                	push   0x50
c0023ce2:	e8 eb c2 fe ff       	call   c000ffd2 <Phys::allocateContiguousPages(int)>
c0023ce7:	83 c4 10             	add    esp,0x10
c0023cea:	89 c2                	mov    edx,eax
c0023cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cf0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023cf6:	83 ec 0c             	sub    esp,0xc
c0023cf9:	6a 50                	push   0x50
c0023cfb:	e8 4b de fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0023d00:	83 c4 10             	add    esp,0x10
c0023d03:	89 c2                	mov    edx,eax
c0023d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d09:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d0f:	e8 d2 e0 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0023d14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d18:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d22:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d28:	83 ec 0c             	sub    esp,0xc
c0023d2b:	6a 03                	push   0x3
c0023d2d:	6a 50                	push   0x50
c0023d2f:	51                   	push   ecx
c0023d30:	52                   	push   edx
c0023d31:	50                   	push   eax
c0023d32:	e8 f5 e8 fe ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d37:	83 c4 20             	add    esp,0x20
c0023d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d3e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d48:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d4e:	83 ec 04             	sub    esp,0x4
c0023d51:	52                   	push   edx
c0023d52:	50                   	push   eax
c0023d53:	68 5c ce 02 c0       	push   0xc002ce5c
c0023d58:	e8 48 f1 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023d5d:	83 c4 10             	add    esp,0x10
c0023d60:	90                   	nop
c0023d61:	83 c4 0c             	add    esp,0xc
c0023d64:	c3                   	ret    
c0023d65:	90                   	nop

c0023d66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d66:	83 ec 0c             	sub    esp,0xc
c0023d69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d6d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d73:	09 c2                	or     edx,eax
c0023d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d81:	31 c0                	xor    eax,eax
c0023d83:	c1 e9 08             	shr    ecx,0x8
c0023d86:	83 e1 0f             	and    ecx,0xf
c0023d89:	39 c8                	cmp    eax,ecx
c0023d8b:	74 0a                	je     c0023d97 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d8d:	f6 c2 01             	test   dl,0x1
c0023d90:	74 18                	je     c0023daa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d92:	d1 ea                	shr    edx,1
c0023d94:	40                   	inc    eax
c0023d95:	eb f2                	jmp    c0023d89 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d97:	83 ec 0c             	sub    esp,0xc
c0023d9a:	68 80 ce 02 c0       	push   0xc002ce80
c0023d9f:	e8 db 68 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0023da4:	83 c4 10             	add    esp,0x10
c0023da7:	83 c8 ff             	or     eax,0xffffffff
c0023daa:	83 c4 0c             	add    esp,0xc
c0023dad:	c3                   	ret    

c0023dae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023dae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023db2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023db5:	89 c2                	mov    edx,eax
c0023db7:	c1 ea 08             	shr    edx,0x8
c0023dba:	83 e2 0f             	and    edx,0xf
c0023dbd:	fe ca                	dec    dl
c0023dbf:	75 31                	jne    c0023df2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dc1:	83 e0 0f             	and    eax,0xf
c0023dc4:	3c 03                	cmp    al,0x3
c0023dc6:	75 2a                	jne    c0023df2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dc8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023dcb:	b8 02 00 00 00       	mov    eax,0x2
c0023dd0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023dd6:	74 1c                	je     c0023df4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023dd8:	b8 04 00 00 00       	mov    eax,0x4
c0023ddd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023de3:	74 0f                	je     c0023df4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023de5:	31 c0                	xor    eax,eax
c0023de7:	83 fa 03             	cmp    edx,0x3
c0023dea:	0f 94 c0             	sete   al
c0023ded:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023df1:	c3                   	ret    
c0023df2:	31 c0                	xor    eax,eax
c0023df4:	c3                   	ret    
c0023df5:	90                   	nop

c0023df6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dfa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dfd:	0f ba e2 0f          	bt     edx,0xf
c0023e01:	72 f7                	jb     c0023dfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e03:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e06:	83 ca 10             	or     edx,0x10
c0023e09:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e0f:	83 ca 01             	or     edx,0x1
c0023e12:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e15:	c3                   	ret    

c0023e16 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e1d:	83 e2 fe             	and    edx,0xfffffffe
c0023e20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e23:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e26:	83 e2 ef             	and    edx,0xffffffef
c0023e29:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e2c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e2f:	0f ba e2 0e          	bt     edx,0xe
c0023e33:	72 f7                	jb     c0023e2c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e35:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e38:	0f ba e2 0f          	bt     edx,0xf
c0023e3c:	72 ee                	jb     c0023e2c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e3e:	c3                   	ret    
c0023e3f:	90                   	nop

c0023e40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e40:	55                   	push   ebp
c0023e41:	57                   	push   edi
c0023e42:	56                   	push   esi
c0023e43:	53                   	push   ebx
c0023e44:	83 ec 1c             	sub    esp,0x1c
c0023e47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e53:	53                   	push   ebx
c0023e54:	89 fd                	mov    ebp,edi
c0023e56:	56                   	push   esi
c0023e57:	c1 e5 0a             	shl    ebp,0xa
c0023e5a:	e8 b7 ff ff ff       	call   c0023e16 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e5f:	83 ec 0c             	sub    esp,0xc
c0023e62:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e68:	01 e8                	add    eax,ebp
c0023e6a:	89 03                	mov    DWORD PTR [ebx],eax
c0023e6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e6e:	68 00 04 00 00       	push   0x400
c0023e73:	6a 00                	push   0x0
c0023e75:	50                   	push   eax
c0023e76:	e8 05 c9 fd ff       	call   c0000780 <memset>
c0023e7b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e81:	89 fa                	mov    edx,edi
c0023e83:	01 e8                	add    eax,ebp
c0023e85:	c1 e7 0d             	shl    edi,0xd
c0023e88:	89 03                	mov    DWORD PTR [ebx],eax
c0023e8a:	c1 e2 08             	shl    edx,0x8
c0023e8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e94:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e9e:	89 d0                	mov    eax,edx
c0023ea0:	83 c4 1c             	add    esp,0x1c
c0023ea3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ea9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023eac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023eaf:	68 00 01 00 00       	push   0x100
c0023eb4:	6a 00                	push   0x0
c0023eb6:	50                   	push   eax
c0023eb7:	e8 c4 c8 fd ff       	call   c0000780 <memset>
c0023ebc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ec0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023ec6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ecc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ed0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ed3:	83 c4 10             	add    esp,0x10
c0023ed6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023edd:	31 ff                	xor    edi,edi
c0023edf:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ee5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023eeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023eef:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ef5:	83 c5 20             	add    ebp,0x20
c0023ef8:	01 f8                	add    eax,edi
c0023efa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023efd:	52                   	push   edx
c0023efe:	68 00 01 00 00       	push   0x100
c0023f03:	6a 00                	push   0x0
c0023f05:	50                   	push   eax
c0023f06:	e8 75 c8 fd ff       	call   c0000780 <memset>
c0023f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f0f:	83 c4 10             	add    esp,0x10
c0023f12:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f18:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f1f:	01 f8                	add    eax,edi
c0023f21:	81 c7 00 01 00 00    	add    edi,0x100
c0023f27:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f2a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f30:	75 b3                	jne    c0023ee5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f32:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f36:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f3a:	83 c4 1c             	add    esp,0x1c
c0023f3d:	5b                   	pop    ebx
c0023f3e:	5e                   	pop    esi
c0023f3f:	5f                   	pop    edi
c0023f40:	5d                   	pop    ebp
c0023f41:	e9 b0 fe ff ff       	jmp    c0023df6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f46:	55                   	push   ebp
c0023f47:	57                   	push   edi
c0023f48:	56                   	push   esi
c0023f49:	53                   	push   ebx
c0023f4a:	31 db                	xor    ebx,ebx
c0023f4c:	83 ec 0c             	sub    esp,0xc
c0023f4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f57:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f5a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f60:	0f 84 aa 00 00 00    	je     c0024010 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f6a:	89 d8                	mov    eax,ebx
c0023f6c:	c1 e0 07             	shl    eax,0x7
c0023f6f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f76:	55                   	push   ebp
c0023f77:	56                   	push   esi
c0023f78:	e8 31 fe ff ff       	call   c0023dae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f7d:	5a                   	pop    edx
c0023f7e:	83 f8 01             	cmp    eax,0x1
c0023f81:	59                   	pop    ecx
c0023f82:	75 30                	jne    c0023fb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f84:	50                   	push   eax
c0023f85:	50                   	push   eax
c0023f86:	53                   	push   ebx
c0023f87:	68 a5 ce 02 c0       	push   0xc002cea5
c0023f8c:	e8 14 ef fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023f91:	83 c4 0c             	add    esp,0xc
c0023f94:	53                   	push   ebx
c0023f95:	55                   	push   ebp
c0023f96:	56                   	push   esi
c0023f97:	e8 a4 fe ff ff       	call   c0023e40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f9c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023fa3:	e8 a3 b8 fe ff       	call   c000f84b <malloc>
c0023fa8:	89 c5                	mov    ebp,eax
c0023faa:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fad:	e8 60 0d 00 00       	call   c0024d12 <SATA::SATA()>
c0023fb2:	eb 33                	jmp    c0023fe7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023fb4:	83 f8 04             	cmp    eax,0x4
c0023fb7:	75 47                	jne    c0024000 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023fb9:	50                   	push   eax
c0023fba:	50                   	push   eax
c0023fbb:	53                   	push   ebx
c0023fbc:	68 bc ce 02 c0       	push   0xc002cebc
c0023fc1:	e8 df ee fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0023fc6:	83 c4 0c             	add    esp,0xc
c0023fc9:	53                   	push   ebx
c0023fca:	55                   	push   ebp
c0023fcb:	56                   	push   esi
c0023fcc:	e8 6f fe ff ff       	call   c0023e40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fd1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023fd8:	e8 6e b8 fe ff       	call   c000f84b <malloc>
c0023fdd:	89 c5                	mov    ebp,eax
c0023fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fe2:	e8 d7 10 00 00       	call   c00250be <SATAPI::SATAPI()>
c0023fe7:	5a                   	pop    edx
c0023fe8:	59                   	pop    ecx
c0023fe9:	55                   	push   ebp
c0023fea:	56                   	push   esi
c0023feb:	e8 dc 02 ff ff       	call   c00142cc <Device::addChild(Device*)>
c0023ff0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023ff3:	56                   	push   esi
c0023ff4:	6a 00                	push   0x0
c0023ff6:	53                   	push   ebx
c0023ff7:	55                   	push   ebp
c0023ff8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023ffb:	83 c4 20             	add    esp,0x20
c0023ffe:	eb 10                	jmp    c0024010 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024000:	50                   	push   eax
c0024001:	50                   	push   eax
c0024002:	53                   	push   ebx
c0024003:	68 d5 ce 02 c0       	push   0xc002ced5
c0024008:	e8 98 ee fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c002400d:	83 c4 10             	add    esp,0x10
c0024010:	d1 ef                	shr    edi,1
c0024012:	43                   	inc    ebx
c0024013:	83 fb 20             	cmp    ebx,0x20
c0024016:	0f 85 3e ff ff ff    	jne    c0023f5a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002401c:	83 c4 0c             	add    esp,0xc
c002401f:	5b                   	pop    ebx
c0024020:	5e                   	pop    esi
c0024021:	5f                   	pop    edi
c0024022:	5d                   	pop    ebp
c0024023:	c3                   	ret    

c0024024 <SATABus::open(int, int, void*)>:
c0024024:	83 ec 14             	sub    esp,0x14
c0024027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002402b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024031:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024037:	52                   	push   edx
c0024038:	50                   	push   eax
c0024039:	e8 08 ff ff ff       	call   c0023f46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002403e:	31 c0                	xor    eax,eax
c0024040:	83 c4 1c             	add    esp,0x1c
c0024043:	c3                   	ret    

c0024044 <ATA::close(int, int, void*)>:
c0024044:	83 ec 0c             	sub    esp,0xc
c0024047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002404b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024051:	85 c0                	test   eax,eax
c0024053:	74 0c                	je     c0024061 <ATA::close(int, int, void*)+0x1d>
c0024055:	83 ec 0c             	sub    esp,0xc
c0024058:	8b 10                	mov    edx,DWORD PTR [eax]
c002405a:	50                   	push   eax
c002405b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002405e:	83 c4 10             	add    esp,0x10
c0024061:	31 c0                	xor    eax,eax
c0024063:	83 c4 0c             	add    esp,0xc
c0024066:	c3                   	ret    
c0024067:	90                   	nop

c0024068 <ATA::powerSaving(PowerSavingLevel)>:
c0024068:	c3                   	ret    
c0024069:	90                   	nop

c002406a <ATA::ATA()>:
c002406a:	83 ec 0c             	sub    esp,0xc
c002406d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024071:	83 ec 04             	sub    esp,0x4
c0024074:	68 00 02 00 00       	push   0x200
c0024079:	68 bd cf 02 c0       	push   0xc002cfbd
c002407e:	50                   	push   eax
c002407f:	e8 6c 06 ff ff       	call   c00146f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024084:	83 c4 10             	add    esp,0x10
c0024087:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c002408c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024090:	89 10                	mov    DWORD PTR [eax],edx
c0024092:	90                   	nop
c0024093:	83 c4 0c             	add    esp,0xc
c0024096:	c3                   	ret    
c0024097:	90                   	nop

c0024098 <ATA::flush(bool)>:
c0024098:	53                   	push   ebx
c0024099:	83 ec 08             	sub    esp,0x8
c002409c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00240a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240a5:	19 c0                	sbb    eax,eax
c00240a7:	83 e0 fd             	and    eax,0xfffffffd
c00240aa:	05 ea 00 00 00       	add    eax,0xea
c00240af:	50                   	push   eax
c00240b0:	6a 07                	push   0x7
c00240b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240b9:	50                   	push   eax
c00240ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c0:	e8 dd ef ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240c5:	83 c4 0c             	add    esp,0xc
c00240c8:	6a 00                	push   0x0
c00240ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240d1:	50                   	push   eax
c00240d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240d8:	e8 71 fb ff ff       	call   c0023c4e <IDE::polling(unsigned char, unsigned int)>
c00240dd:	83 c4 18             	add    esp,0x18
c00240e0:	5b                   	pop    ebx
c00240e1:	c3                   	ret    

c00240e2 <ATA::readyForCommand()>:
c00240e2:	56                   	push   esi
c00240e3:	53                   	push   ebx
c00240e4:	31 db                	xor    ebx,ebx
c00240e6:	50                   	push   eax
c00240e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00240eb:	50                   	push   eax
c00240ec:	6a 0c                	push   0xc
c00240ee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240f5:	50                   	push   eax
c00240f6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00240fc:	e8 61 f0 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c0024101:	83 c4 10             	add    esp,0x10
c0024104:	a8 88                	test   al,0x88
c0024106:	74 23                	je     c002412b <ATA::readyForCommand()+0x49>
c0024108:	43                   	inc    ebx
c0024109:	83 fb 63             	cmp    ebx,0x63
c002410c:	7e dd                	jle    c00240eb <ATA::readyForCommand()+0x9>
c002410e:	51                   	push   ecx
c002410f:	51                   	push   ecx
c0024110:	6a 00                	push   0x0
c0024112:	68 40 42 0f 00       	push   0xf4240
c0024117:	e8 c8 a2 ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c002411c:	83 c4 10             	add    esp,0x10
c002411f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024125:	75 c4                	jne    c00240eb <ATA::readyForCommand()+0x9>
c0024127:	31 c0                	xor    eax,eax
c0024129:	eb 02                	jmp    c002412d <ATA::readyForCommand()+0x4b>
c002412b:	b0 01                	mov    al,0x1
c002412d:	5a                   	pop    edx
c002412e:	5b                   	pop    ebx
c002412f:	5e                   	pop    esi
c0024130:	c3                   	ret    
c0024131:	90                   	nop

c0024132 <ATA::access(unsigned long long, int, void*, bool)>:
c0024132:	55                   	push   ebp
c0024133:	57                   	push   edi
c0024134:	56                   	push   esi
c0024135:	53                   	push   ebx
c0024136:	83 ec 2c             	sub    esp,0x2c
c0024139:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002413d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024141:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024145:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024149:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002414d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024151:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024155:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002415b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002415f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024169:	c1 e0 06             	shl    eax,0x6
c002416c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024174:	74 5d                	je     c00241d3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024176:	89 fa                	mov    edx,edi
c0024178:	89 f0                	mov    eax,esi
c002417a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002417e:	c1 ea 1c             	shr    edx,0x1c
c0024181:	89 d1                	mov    ecx,edx
c0024183:	09 c1                	or     ecx,eax
c0024185:	74 25                	je     c00241ac <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024187:	31 ed                	xor    ebp,ebp
c0024189:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024190:	89 fa                	mov    edx,edi
c0024192:	89 f0                	mov    eax,esi
c0024194:	0f ad d0             	shrd   eax,edx,cl
c0024197:	d3 ea                	shr    edx,cl
c0024199:	f6 c1 20             	test   cl,0x20
c002419c:	74 02                	je     c00241a0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002419e:	89 d0                	mov    eax,edx
c00241a0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241a4:	45                   	inc    ebp
c00241a5:	83 fd 06             	cmp    ebp,0x6
c00241a8:	75 df                	jne    c0024189 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00241aa:	eb 76                	jmp    c0024222 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00241ac:	89 f0                	mov    eax,esi
c00241ae:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241b3:	89 fa                	mov    edx,edi
c00241b5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241bc:	0f ac d0 10          	shrd   eax,edx,0x10
c00241c0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241c5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00241c9:	c1 ee 18             	shr    esi,0x18
c00241cc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00241d1:	eb 56                	jmp    c0024229 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241d3:	6a 00                	push   0x0
c00241d5:	6a 3f                	push   0x3f
c00241d7:	57                   	push   edi
c00241d8:	56                   	push   esi
c00241d9:	e8 92 29 00 00       	call   c0026b70 <__umoddi3>
c00241de:	83 c4 10             	add    esp,0x10
c00241e1:	40                   	inc    eax
c00241e2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00241e6:	6a 00                	push   0x0
c00241e8:	68 f0 03 00 00       	push   0x3f0
c00241ed:	57                   	push   edi
c00241ee:	56                   	push   esi
c00241ef:	e8 7c 28 00 00       	call   c0026a70 <__udivdi3>
c00241f4:	83 c4 10             	add    esp,0x10
c00241f7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00241fc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024203:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024208:	6a 00                	push   0x0
c002420a:	6a 3f                	push   0x3f
c002420c:	57                   	push   edi
c002420d:	56                   	push   esi
c002420e:	e8 5d 28 00 00       	call   c0026a70 <__udivdi3>
c0024213:	83 c4 10             	add    esp,0x10
c0024216:	89 c6                	mov    esi,eax
c0024218:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002421d:	83 e6 0f             	and    esi,0xf
c0024220:	eb 07                	jmp    c0024229 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024222:	31 f6                	xor    esi,esi
c0024224:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024229:	bf 01 00 00 00       	mov    edi,0x1
c002422e:	50                   	push   eax
c002422f:	6a 00                	push   0x0
c0024231:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024238:	50                   	push   eax
c0024239:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002423d:	e8 6c f0 ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c0024242:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024245:	e8 98 fe ff ff       	call   c00240e2 <ATA::readyForCommand()>
c002424a:	83 c4 10             	add    esp,0x10
c002424d:	84 c0                	test   al,al
c002424f:	0f 84 5a 02 00 00    	je     c00244af <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024255:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002425b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024261:	c1 e0 04             	shl    eax,0x4
c0024264:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002426b:	09 c6                	or     esi,eax
c002426d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024272:	75 05                	jne    c0024279 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024274:	83 ce a0             	or     esi,0xffffffa0
c0024277:	eb 03                	jmp    c002427c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024279:	83 ce e0             	or     esi,0xffffffe0
c002427c:	89 f0                	mov    eax,esi
c002427e:	0f b6 f0             	movzx  esi,al
c0024281:	56                   	push   esi
c0024282:	6a 06                	push   0x6
c0024284:	51                   	push   ecx
c0024285:	52                   	push   edx
c0024286:	e8 17 ee ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428b:	83 c4 10             	add    esp,0x10
c002428e:	6a 00                	push   0x0
c0024290:	6a 01                	push   0x1
c0024292:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024299:	50                   	push   eax
c002429a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a0:	e8 fd ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a5:	83 c4 10             	add    esp,0x10
c00242a8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242ad:	75 6e                	jne    c002431d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00242af:	6a 00                	push   0x0
c00242b1:	6a 08                	push   0x8
c00242b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ba:	50                   	push   eax
c00242bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c1:	e8 dc ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00242cb:	50                   	push   eax
c00242cc:	6a 09                	push   0x9
c00242ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d5:	50                   	push   eax
c00242d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242dc:	e8 c1 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242e1:	83 c4 20             	add    esp,0x20
c00242e4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00242e9:	50                   	push   eax
c00242ea:	6a 0a                	push   0xa
c00242ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f3:	50                   	push   eax
c00242f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242fa:	e8 a3 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ff:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024304:	50                   	push   eax
c0024305:	6a 0b                	push   0xb
c0024307:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430e:	50                   	push   eax
c002430f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024315:	e8 88 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002431a:	83 c4 20             	add    esp,0x20
c002431d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024322:	50                   	push   eax
c0024323:	6a 02                	push   0x2
c0024325:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432c:	50                   	push   eax
c002432d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024333:	e8 6a ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024338:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002433d:	50                   	push   eax
c002433e:	6a 03                	push   0x3
c0024340:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024347:	50                   	push   eax
c0024348:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434e:	e8 4f ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024353:	83 c4 20             	add    esp,0x20
c0024356:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002435b:	50                   	push   eax
c002435c:	6a 04                	push   0x4
c002435e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024365:	50                   	push   eax
c0024366:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002436c:	e8 31 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024371:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024376:	50                   	push   eax
c0024377:	6a 05                	push   0x5
c0024379:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024380:	50                   	push   eax
c0024381:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024387:	e8 16 ed ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002438c:	83 c4 20             	add    esp,0x20
c002438f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024394:	0f 94 c0             	sete   al
c0024397:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002439c:	74 09                	je     c00243a7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002439e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243a5:	eb 07                	jmp    c00243ae <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00243a7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243ae:	0f b6 c0             	movzx  eax,al
c00243b1:	50                   	push   eax
c00243b2:	6a 07                	push   0x7
c00243b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243bb:	50                   	push   eax
c00243bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c2:	e8 db ec ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243c7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00243cb:	83 c4 10             	add    esp,0x10
c00243ce:	85 f6                	test   esi,esi
c00243d0:	0f 84 ba 00 00 00    	je     c0024490 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00243d6:	50                   	push   eax
c00243d7:	6a 01                	push   0x1
c00243d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e0:	50                   	push   eax
c00243e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243e7:	e8 62 f8 ff ff       	call   c0023c4e <IDE::polling(unsigned char, unsigned int)>
c00243ec:	83 c4 10             	add    esp,0x10
c00243ef:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243f5:	84 c0                	test   al,al
c00243f7:	74 2c                	je     c0024425 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00243f9:	0f b6 f8             	movzx  edi,al
c00243fc:	0f b6 d2             	movzx  edx,dl
c00243ff:	57                   	push   edi
c0024400:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024407:	50                   	push   eax
c0024408:	52                   	push   edx
c0024409:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002440f:	e8 a4 f6 ff ff       	call   c0023ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024414:	c7 04 24 18 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf18
c002441b:	e8 85 ea fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0024420:	e9 87 00 00 00       	jmp    c00244ac <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024425:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002442a:	74 33                	je     c002445f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002442c:	31 ed                	xor    ebp,ebp
c002442e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024432:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024436:	50                   	push   eax
c0024437:	50                   	push   eax
c0024438:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002443f:	50                   	push   eax
c0024440:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024446:	e8 45 ec ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c002444b:	89 c2                	mov    edx,eax
c002444d:	89 f8                	mov    eax,edi
c002444f:	66 ef                	out    dx,ax
c0024451:	45                   	inc    ebp
c0024452:	83 c4 10             	add    esp,0x10
c0024455:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002445b:	75 d1                	jne    c002442e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002445d:	eb 23                	jmp    c0024482 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002445f:	0f b6 d2             	movzx  edx,dl
c0024462:	51                   	push   ecx
c0024463:	51                   	push   ecx
c0024464:	52                   	push   edx
c0024465:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002446b:	e8 20 ec ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c0024470:	b9 00 01 00 00       	mov    ecx,0x100
c0024475:	89 c2                	mov    edx,eax
c0024477:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002447b:	fc                   	cld    
c002447c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002447f:	83 c4 10             	add    esp,0x10
c0024482:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002448a:	4e                   	dec    esi
c002448b:	e9 3e ff ff ff       	jmp    c00243ce <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024490:	31 ff                	xor    edi,edi
c0024492:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024497:	74 16                	je     c00244af <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024499:	50                   	push   eax
c002449a:	50                   	push   eax
c002449b:	31 c0                	xor    eax,eax
c002449d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00244a2:	0f 94 c0             	sete   al
c00244a5:	50                   	push   eax
c00244a6:	53                   	push   ebx
c00244a7:	e8 ec fb ff ff       	call   c0024098 <ATA::flush(bool)>
c00244ac:	83 c4 10             	add    esp,0x10
c00244af:	83 c4 2c             	add    esp,0x2c
c00244b2:	89 f8                	mov    eax,edi
c00244b4:	5b                   	pop    ebx
c00244b5:	5e                   	pop    esi
c00244b6:	5f                   	pop    edi
c00244b7:	5d                   	pop    ebp
c00244b8:	c3                   	ret    
c00244b9:	90                   	nop

c00244ba <ATA::read(unsigned long long, int, void*)>:
c00244ba:	57                   	push   edi
c00244bb:	b8 04 00 00 00       	mov    eax,0x4
c00244c0:	56                   	push   esi
c00244c1:	53                   	push   ebx
c00244c2:	83 ec 10             	sub    esp,0x10
c00244c5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244cd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244d8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244de:	77 3b                	ja     c002451b <ATA::read(unsigned long long, int, void*)+0x61>
c00244e0:	b8 06 00 00 00       	mov    eax,0x6
c00244e5:	85 d2                	test   edx,edx
c00244e7:	74 32                	je     c002451b <ATA::read(unsigned long long, int, void*)+0x61>
c00244e9:	50                   	push   eax
c00244ea:	50                   	push   eax
c00244eb:	6a 00                	push   0x0
c00244ed:	52                   	push   edx
c00244ee:	53                   	push   ebx
c00244ef:	57                   	push   edi
c00244f0:	56                   	push   esi
c00244f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244f5:	e8 38 fc ff ff       	call   c0024132 <ATA::access(unsigned long long, int, void*, bool)>
c00244fa:	83 c4 20             	add    esp,0x20
c00244fd:	85 c0                	test   eax,eax
c00244ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024503:	75 11                	jne    c0024516 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024505:	01 1d c8 28 03 c0    	add    DWORD PTR ds:0xc00328c8,ebx
c002450b:	e8 90 c4 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0024510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024514:	eb 05                	jmp    c002451b <ATA::read(unsigned long long, int, void*)+0x61>
c0024516:	b8 01 00 00 00       	mov    eax,0x1
c002451b:	83 c4 10             	add    esp,0x10
c002451e:	5b                   	pop    ebx
c002451f:	5e                   	pop    esi
c0024520:	5f                   	pop    edi
c0024521:	c3                   	ret    

c0024522 <ATA::write(unsigned long long, int, void*)>:
c0024522:	57                   	push   edi
c0024523:	b8 04 00 00 00       	mov    eax,0x4
c0024528:	56                   	push   esi
c0024529:	53                   	push   ebx
c002452a:	83 ec 10             	sub    esp,0x10
c002452d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024531:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024535:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024538:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002453c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024540:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024546:	77 3b                	ja     c0024583 <ATA::write(unsigned long long, int, void*)+0x61>
c0024548:	b8 06 00 00 00       	mov    eax,0x6
c002454d:	85 d2                	test   edx,edx
c002454f:	74 32                	je     c0024583 <ATA::write(unsigned long long, int, void*)+0x61>
c0024551:	50                   	push   eax
c0024552:	50                   	push   eax
c0024553:	6a 01                	push   0x1
c0024555:	52                   	push   edx
c0024556:	53                   	push   ebx
c0024557:	57                   	push   edi
c0024558:	56                   	push   esi
c0024559:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002455d:	e8 d0 fb ff ff       	call   c0024132 <ATA::access(unsigned long long, int, void*, bool)>
c0024562:	83 c4 20             	add    esp,0x20
c0024565:	85 c0                	test   eax,eax
c0024567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002456b:	75 11                	jne    c002457e <ATA::write(unsigned long long, int, void*)+0x5c>
c002456d:	01 1d c4 28 03 c0    	add    DWORD PTR ds:0xc00328c4,ebx
c0024573:	e8 28 c4 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0024578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002457c:	eb 05                	jmp    c0024583 <ATA::write(unsigned long long, int, void*)+0x61>
c002457e:	b8 01 00 00 00       	mov    eax,0x1
c0024583:	83 c4 10             	add    esp,0x10
c0024586:	5b                   	pop    ebx
c0024587:	5e                   	pop    esi
c0024588:	5f                   	pop    edi
c0024589:	c3                   	ret    

c002458a <ATA::detectCHS()>:
c002458a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002458e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024594:	c1 e0 06             	shl    eax,0x6
c0024597:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002459d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00245a7:	c7 44 24 04 23 cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cf23
c00245af:	e9 cb 60 ff ff       	jmp    c001a67f <Krnl::panic(char const*)>

c00245b4 <ATA::open(int, int, void*)>:
c00245b4:	53                   	push   ebx
c00245b5:	83 ec 08             	sub    esp,0x8
c00245b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00245bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245c4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245ca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245d0:	c1 e0 06             	shl    eax,0x6
c00245d3:	01 d0                	add    eax,edx
c00245d5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00245dc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00245e2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00245e9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00245f3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00245f9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024600:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024607:	75 0c                	jne    c0024615 <ATA::open(int, int, void*)+0x61>
c0024609:	83 ec 0c             	sub    esp,0xc
c002460c:	53                   	push   ebx
c002460d:	e8 78 ff ff ff       	call   c002458a <ATA::detectCHS()>
c0024612:	83 c4 10             	add    esp,0x10
c0024615:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002461b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024621:	c1 e0 06             	shl    eax,0x6
c0024624:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002462b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024635:	d1 e8                	shr    eax,1
c0024637:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002463d:	6a 04                	push   0x4
c002463f:	6a 0c                	push   0xc
c0024641:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024648:	50                   	push   eax
c0024649:	52                   	push   edx
c002464a:	e8 53 ea ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002464f:	90                   	nop
c0024650:	90                   	nop
c0024651:	6a 00                	push   0x0
c0024653:	6a 0c                	push   0xc
c0024655:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002465c:	50                   	push   eax
c002465d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024663:	e8 3a ea ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024668:	83 c4 14             	add    esp,0x14
c002466b:	53                   	push   ebx
c002466c:	e8 e7 00 ff ff       	call   c0014758 <PhysicalDisk::startCache()>
c0024671:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024674:	e8 7d 23 ff ff       	call   c00169f6 <createPartitionsForDisk(PhysicalDisk*)>
c0024679:	31 c0                	xor    eax,eax
c002467b:	83 c4 18             	add    esp,0x18
c002467e:	5b                   	pop    ebx
c002467f:	c3                   	ret    

c0024680 <ATAPI::write(unsigned long long, int, void*)>:
c0024680:	b8 03 00 00 00       	mov    eax,0x3
c0024685:	c3                   	ret    

c0024686 <ATAPI::close(int, int, void*)>:
c0024686:	83 ec 0c             	sub    esp,0xc
c0024689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002468d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024693:	85 c0                	test   eax,eax
c0024695:	74 0c                	je     c00246a3 <ATAPI::close(int, int, void*)+0x1d>
c0024697:	83 ec 0c             	sub    esp,0xc
c002469a:	8b 10                	mov    edx,DWORD PTR [eax]
c002469c:	50                   	push   eax
c002469d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00246a0:	83 c4 10             	add    esp,0x10
c00246a3:	31 c0                	xor    eax,eax
c00246a5:	83 c4 0c             	add    esp,0xc
c00246a8:	c3                   	ret    
c00246a9:	90                   	nop

c00246aa <ATAPI::ATAPI()>:
c00246aa:	83 ec 0c             	sub    esp,0xc
c00246ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246b1:	83 ec 04             	sub    esp,0x4
c00246b4:	68 00 08 00 00       	push   0x800
c00246b9:	68 5d d0 02 c0       	push   0xc002d05d
c00246be:	50                   	push   eax
c00246bf:	e8 2c 00 ff ff       	call   c00146f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246c4:	83 c4 10             	add    esp,0x10
c00246c7:	ba 78 cf 02 c0       	mov    edx,0xc002cf78
c00246cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d0:	89 10                	mov    DWORD PTR [eax],edx
c00246d2:	90                   	nop
c00246d3:	83 c4 0c             	add    esp,0xc
c00246d6:	c3                   	ret    
c00246d7:	90                   	nop

c00246d8 <ATAPI::readyForCommand()>:
c00246d8:	56                   	push   esi
c00246d9:	53                   	push   ebx
c00246da:	31 db                	xor    ebx,ebx
c00246dc:	50                   	push   eax
c00246dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00246e1:	50                   	push   eax
c00246e2:	6a 0c                	push   0xc
c00246e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00246eb:	50                   	push   eax
c00246ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00246f2:	e8 6b ea ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00246f7:	83 c4 10             	add    esp,0x10
c00246fa:	a8 88                	test   al,0x88
c00246fc:	74 23                	je     c0024721 <ATAPI::readyForCommand()+0x49>
c00246fe:	43                   	inc    ebx
c00246ff:	83 fb 63             	cmp    ebx,0x63
c0024702:	7e dd                	jle    c00246e1 <ATAPI::readyForCommand()+0x9>
c0024704:	51                   	push   ecx
c0024705:	51                   	push   ecx
c0024706:	6a 00                	push   0x0
c0024708:	68 40 42 0f 00       	push   0xf4240
c002470d:	e8 d2 9c ff ff       	call   c001e3e4 <nanoSleep(unsigned long long)>
c0024712:	83 c4 10             	add    esp,0x10
c0024715:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002471b:	75 c4                	jne    c00246e1 <ATAPI::readyForCommand()+0x9>
c002471d:	31 c0                	xor    eax,eax
c002471f:	eb 02                	jmp    c0024723 <ATAPI::readyForCommand()+0x4b>
c0024721:	b0 01                	mov    al,0x1
c0024723:	5a                   	pop    edx
c0024724:	5b                   	pop    ebx
c0024725:	5e                   	pop    esi
c0024726:	c3                   	ret    
c0024727:	90                   	nop

c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024728:	55                   	push   ebp
c0024729:	57                   	push   edi
c002472a:	56                   	push   esi
c002472b:	53                   	push   ebx
c002472c:	83 ec 20             	sub    esp,0x20
c002472f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024733:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024737:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002473b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002473f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024743:	6a 01                	push   0x1
c0024745:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002474c:	50                   	push   eax
c002474d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024753:	e8 56 eb ff ff       	call   c00232ae <IDE::enableIRQs(unsigned char, bool)>
c0024758:	5e                   	pop    esi
c0024759:	58                   	pop    eax
c002475a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024761:	50                   	push   eax
c0024762:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024768:	e8 0f e9 ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c002476d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024770:	e8 63 ff ff ff       	call   c00246d8 <ATAPI::readyForCommand()>
c0024775:	83 c4 10             	add    esp,0x10
c0024778:	84 c0                	test   al,al
c002477a:	75 0a                	jne    c0024786 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002477c:	bb 01 00 00 00       	mov    ebx,0x1
c0024781:	e9 57 02 00 00       	jmp    c00249dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024786:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002478c:	c1 e0 04             	shl    eax,0x4
c002478f:	0f b6 c0             	movzx  eax,al
c0024792:	50                   	push   eax
c0024793:	6a 06                	push   0x6
c0024795:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002479c:	50                   	push   eax
c002479d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a3:	e8 fa e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247a8:	6a 00                	push   0x0
c00247aa:	6a 01                	push   0x1
c00247ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b3:	50                   	push   eax
c00247b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ba:	e8 e3 e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247bf:	83 c4 20             	add    esp,0x20
c00247c2:	0f b6 c3             	movzx  eax,bl
c00247c5:	0f b6 df             	movzx  ebx,bh
c00247c8:	50                   	push   eax
c00247c9:	6a 04                	push   0x4
c00247cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d2:	50                   	push   eax
c00247d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d9:	e8 c4 e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247de:	53                   	push   ebx
c00247df:	6a 05                	push   0x5
c00247e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e8:	50                   	push   eax
c00247e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ef:	e8 ae e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247f4:	83 c4 20             	add    esp,0x20
c00247f7:	68 a0 00 00 00       	push   0xa0
c00247fc:	6a 07                	push   0x7
c00247fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024805:	50                   	push   eax
c0024806:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002480c:	e8 91 e8 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024811:	83 c4 0c             	add    esp,0xc
c0024814:	6a 01                	push   0x1
c0024816:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002481d:	50                   	push   eax
c002481e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024824:	e8 25 f4 ff ff       	call   c0023c4e <IDE::polling(unsigned char, unsigned int)>
c0024829:	83 c4 10             	add    esp,0x10
c002482c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024832:	84 c0                	test   al,al
c0024834:	74 23                	je     c0024859 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024836:	0f b6 d8             	movzx  ebx,al
c0024839:	0f b6 d2             	movzx  edx,dl
c002483c:	53                   	push   ebx
c002483d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024844:	50                   	push   eax
c0024845:	52                   	push   edx
c0024846:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002484c:	e8 67 f2 ff ff       	call   c0023ab8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024851:	83 c4 10             	add    esp,0x10
c0024854:	e9 84 01 00 00       	jmp    c00249dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024859:	0f b6 d2             	movzx  edx,dl
c002485c:	53                   	push   ebx
c002485d:	53                   	push   ebx
c002485e:	52                   	push   edx
c002485f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024865:	e8 26 e8 ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c002486a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002486e:	b9 06 00 00 00       	mov    ecx,0x6
c0024873:	89 c2                	mov    edx,eax
c0024875:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024878:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002487c:	83 c4 10             	add    esp,0x10
c002487f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024885:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002488c:	85 db                	test   ebx,ebx
c002488e:	0f 84 ec 00 00 00    	je     c0024980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024894:	51                   	push   ecx
c0024895:	51                   	push   ecx
c0024896:	52                   	push   edx
c0024897:	50                   	push   eax
c0024898:	e8 73 e9 ff ff       	call   c0023210 <IDE::waitInterrupt(unsigned char)>
c002489d:	83 c4 10             	add    esp,0x10
c00248a0:	84 c0                	test   al,al
c00248a2:	0f 84 d4 fe ff ff    	je     c002477c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248a8:	56                   	push   esi
c00248a9:	56                   	push   esi
c00248aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248b1:	50                   	push   eax
c00248b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248b8:	e8 bf e7 ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c00248bd:	83 c4 0c             	add    esp,0xc
c00248c0:	6a 04                	push   0x4
c00248c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248c9:	50                   	push   eax
c00248ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248d0:	e8 8d e8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00248d5:	83 c4 0c             	add    esp,0xc
c00248d8:	89 c6                	mov    esi,eax
c00248da:	6a 05                	push   0x5
c00248dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e3:	50                   	push   eax
c00248e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248ea:	e8 73 e8 ff ff       	call   c0023162 <IDE::read(unsigned char, unsigned char)>
c00248ef:	89 f1                	mov    ecx,esi
c00248f1:	0f b6 c0             	movzx  eax,al
c00248f4:	0f b6 f1             	movzx  esi,cl
c00248f7:	c1 e0 08             	shl    eax,0x8
c00248fa:	09 c6                	or     esi,eax
c00248fc:	d1 fe                	sar    esi,1
c00248fe:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024902:	83 c4 10             	add    esp,0x10
c0024905:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002490a:	74 41                	je     c002494d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002490c:	31 c9                	xor    ecx,ecx
c002490e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024914:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002491b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002491f:	75 0a                	jne    c002492b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024921:	01 c9                	add    ecx,ecx
c0024923:	01 cd                	add    ebp,ecx
c0024925:	4b                   	dec    ebx
c0024926:	e9 54 ff ff ff       	jmp    c002487f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002492b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024930:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024934:	51                   	push   ecx
c0024935:	51                   	push   ecx
c0024936:	52                   	push   edx
c0024937:	50                   	push   eax
c0024938:	e8 53 e7 ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c002493d:	89 c2                	mov    edx,eax
c002493f:	89 f0                	mov    eax,esi
c0024941:	66 ef                	out    dx,ax
c0024943:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024947:	83 c4 10             	add    esp,0x10
c002494a:	41                   	inc    ecx
c002494b:	eb c1                	jmp    c002490e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002494d:	31 f6                	xor    esi,esi
c002494f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024955:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002495c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024960:	75 06                	jne    c0024968 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024962:	01 f6                	add    esi,esi
c0024964:	01 f5                	add    ebp,esi
c0024966:	eb bd                	jmp    c0024925 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024968:	51                   	push   ecx
c0024969:	51                   	push   ecx
c002496a:	52                   	push   edx
c002496b:	50                   	push   eax
c002496c:	e8 1f e7 ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c0024971:	89 c2                	mov    edx,eax
c0024973:	66 ed                	in     ax,dx
c0024975:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002497a:	83 c4 10             	add    esp,0x10
c002497d:	46                   	inc    esi
c002497e:	eb cf                	jmp    c002494f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024980:	51                   	push   ecx
c0024981:	51                   	push   ecx
c0024982:	52                   	push   edx
c0024983:	50                   	push   eax
c0024984:	e8 87 e8 ff ff       	call   c0023210 <IDE::waitInterrupt(unsigned char)>
c0024989:	83 c4 10             	add    esp,0x10
c002498c:	84 c0                	test   al,al
c002498e:	0f 84 e8 fd ff ff    	je     c002477c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024994:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024999:	52                   	push   edx
c002499a:	52                   	push   edx
c002499b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249a2:	50                   	push   eax
c00249a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249a9:	e8 ce e6 ff ff       	call   c002307c <IDE::prepareInterrupt(unsigned char)>
c00249ae:	83 c4 10             	add    esp,0x10
c00249b1:	50                   	push   eax
c00249b2:	50                   	push   eax
c00249b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249ba:	50                   	push   eax
c00249bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249c1:	e8 ca e6 ff ff       	call   c0023090 <IDE::getBase(unsigned char)>
c00249c6:	8d 50 07             	lea    edx,[eax+0x7]
c00249c9:	ec                   	in     al,dx
c00249ca:	83 c4 10             	add    esp,0x10
c00249cd:	a8 88                	test   al,0x88
c00249cf:	74 0a                	je     c00249db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00249d1:	4b                   	dec    ebx
c00249d2:	75 dd                	jne    c00249b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00249d4:	bb 02 00 00 00       	mov    ebx,0x2
c00249d9:	eb 02                	jmp    c00249dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00249db:	31 db                	xor    ebx,ebx
c00249dd:	83 c4 1c             	add    esp,0x1c
c00249e0:	89 d8                	mov    eax,ebx
c00249e2:	5b                   	pop    ebx
c00249e3:	5e                   	pop    esi
c00249e4:	5f                   	pop    edi
c00249e5:	5d                   	pop    ebp
c00249e6:	c3                   	ret    
c00249e7:	90                   	nop

c00249e8 <ATAPI::diskRemoved()>:
c00249e8:	83 ec 18             	sub    esp,0x18
c00249eb:	68 69 d0 02 c0       	push   0xc002d069
c00249f0:	e8 b0 e4 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00249f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249f9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a00:	83 c4 1c             	add    esp,0x1c
c0024a03:	c3                   	ret    

c0024a04 <ATAPI::eject()>:
c0024a04:	57                   	push   edi
c0024a05:	b9 03 00 00 00       	mov    ecx,0x3
c0024a0a:	53                   	push   ebx
c0024a0b:	83 ec 14             	sub    esp,0x14
c0024a0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a12:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a16:	fc                   	cld    
c0024a17:	31 c0                	xor    eax,eax
c0024a19:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a1b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a20:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a25:	50                   	push   eax
c0024a26:	50                   	push   eax
c0024a27:	6a 00                	push   0x0
c0024a29:	6a 00                	push   0x0
c0024a2b:	6a 00                	push   0x0
c0024a2d:	6a 02                	push   0x2
c0024a2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a33:	50                   	push   eax
c0024a34:	53                   	push   ebx
c0024a35:	e8 ee fc ff ff       	call   c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a3a:	83 c4 14             	add    esp,0x14
c0024a3d:	53                   	push   ebx
c0024a3e:	e8 a5 ff ff ff       	call   c00249e8 <ATAPI::diskRemoved()>
c0024a43:	83 c4 24             	add    esp,0x24
c0024a46:	31 c0                	xor    eax,eax
c0024a48:	5b                   	pop    ebx
c0024a49:	5f                   	pop    edi
c0024a4a:	c3                   	ret    
c0024a4b:	90                   	nop

c0024a4c <ATAPI::diskInserted()>:
c0024a4c:	53                   	push   ebx
c0024a4d:	83 ec 14             	sub    esp,0x14
c0024a50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a54:	68 80 d0 02 c0       	push   0xc002d080
c0024a59:	e8 47 e4 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0024a5e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a68:	e8 eb fc fe ff       	call   c0014758 <PhysicalDisk::startCache()>
c0024a6d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a71:	83 c4 18             	add    esp,0x18
c0024a74:	5b                   	pop    ebx
c0024a75:	e9 7c 1f ff ff       	jmp    c00169f6 <createPartitionsForDisk(PhysicalDisk*)>

c0024a7a <ATAPI::detectMedia()>:
c0024a7a:	56                   	push   esi
c0024a7b:	53                   	push   ebx
c0024a7c:	83 ec 28             	sub    esp,0x28
c0024a7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a83:	6a 0c                	push   0xc
c0024a85:	6a 00                	push   0x0
c0024a87:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a8b:	56                   	push   esi
c0024a8c:	e8 ef bc fd ff       	call   c0000780 <memset>
c0024a91:	58                   	pop    eax
c0024a92:	5a                   	pop    edx
c0024a93:	6a 00                	push   0x0
c0024a95:	6a 00                	push   0x0
c0024a97:	6a 00                	push   0x0
c0024a99:	6a 00                	push   0x0
c0024a9b:	56                   	push   esi
c0024a9c:	53                   	push   ebx
c0024a9d:	e8 86 fc ff ff       	call   c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024aa2:	83 c4 1c             	add    esp,0x1c
c0024aa5:	6a 0c                	push   0xc
c0024aa7:	6a 00                	push   0x0
c0024aa9:	56                   	push   esi
c0024aaa:	e8 d1 bc fd ff       	call   c0000780 <memset>
c0024aaf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ab4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024ab9:	59                   	pop    ecx
c0024aba:	58                   	pop    eax
c0024abb:	6a 01                	push   0x1
c0024abd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024ac1:	50                   	push   eax
c0024ac2:	6a 00                	push   0x0
c0024ac4:	6a 12                	push   0x12
c0024ac6:	56                   	push   esi
c0024ac7:	53                   	push   ebx
c0024ac8:	e8 5b fc ff ff       	call   c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024acd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ad1:	83 c4 20             	add    esp,0x20
c0024ad4:	83 e0 7f             	and    eax,0x7f
c0024ad7:	3c 70                	cmp    al,0x70
c0024ad9:	74 15                	je     c0024af0 <ATAPI::detectMedia()+0x76>
c0024adb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ae2:	75 0c                	jne    c0024af0 <ATAPI::detectMedia()+0x76>
c0024ae4:	83 ec 0c             	sub    esp,0xc
c0024ae7:	53                   	push   ebx
c0024ae8:	e8 5f ff ff ff       	call   c0024a4c <ATAPI::diskInserted()>
c0024aed:	83 c4 10             	add    esp,0x10
c0024af0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024af4:	83 e0 0f             	and    eax,0xf
c0024af7:	3c 02                	cmp    al,0x2
c0024af9:	75 1b                	jne    c0024b16 <ATAPI::detectMedia()+0x9c>
c0024afb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b00:	75 2d                	jne    c0024b2f <ATAPI::detectMedia()+0xb5>
c0024b02:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b09:	74 24                	je     c0024b2f <ATAPI::detectMedia()+0xb5>
c0024b0b:	83 ec 0c             	sub    esp,0xc
c0024b0e:	53                   	push   ebx
c0024b0f:	e8 d4 fe ff ff       	call   c00249e8 <ATAPI::diskRemoved()>
c0024b14:	eb 16                	jmp    c0024b2c <ATAPI::detectMedia()+0xb2>
c0024b16:	84 c0                	test   al,al
c0024b18:	75 15                	jne    c0024b2f <ATAPI::detectMedia()+0xb5>
c0024b1a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b21:	75 0c                	jne    c0024b2f <ATAPI::detectMedia()+0xb5>
c0024b23:	83 ec 0c             	sub    esp,0xc
c0024b26:	53                   	push   ebx
c0024b27:	e8 20 ff ff ff       	call   c0024a4c <ATAPI::diskInserted()>
c0024b2c:	83 c4 10             	add    esp,0x10
c0024b2f:	83 c4 24             	add    esp,0x24
c0024b32:	5b                   	pop    ebx
c0024b33:	5e                   	pop    esi
c0024b34:	c3                   	ret    
c0024b35:	90                   	nop

c0024b36 <ATAPI::open(int, int, void*)>:
c0024b36:	53                   	push   ebx
c0024b37:	83 ec 08             	sub    esp,0x8
c0024b3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b46:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b4c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b52:	c1 e0 06             	shl    eax,0x6
c0024b55:	01 d0                	add    eax,edx
c0024b57:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b5e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b64:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b6b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b75:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b7b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b82:	6a 04                	push   0x4
c0024b84:	6a 0c                	push   0xc
c0024b86:	51                   	push   ecx
c0024b87:	52                   	push   edx
c0024b88:	e8 15 e5 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b8d:	90                   	nop
c0024b8e:	90                   	nop
c0024b8f:	6a 00                	push   0x0
c0024b91:	6a 0c                	push   0xc
c0024b93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b9a:	50                   	push   eax
c0024b9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ba1:	e8 fc e4 ff ff       	call   c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ba6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024bad:	83 c4 14             	add    esp,0x14
c0024bb0:	53                   	push   ebx
c0024bb1:	e8 c4 fe ff ff       	call   c0024a7a <ATAPI::detectMedia()>
c0024bb6:	31 c0                	xor    eax,eax
c0024bb8:	83 c4 18             	add    esp,0x18
c0024bbb:	5b                   	pop    ebx
c0024bbc:	c3                   	ret    
c0024bbd:	90                   	nop

c0024bbe <ATAPI::read(unsigned long long, int, void*)>:
c0024bbe:	55                   	push   ebp
c0024bbf:	57                   	push   edi
c0024bc0:	56                   	push   esi
c0024bc1:	53                   	push   ebx
c0024bc2:	83 ec 1c             	sub    esp,0x1c
c0024bc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024bc9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bcd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bd1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bd8:	74 41                	je     c0024c1b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024bda:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024bde:	b9 03 00 00 00       	mov    ecx,0x3
c0024be3:	fc                   	cld    
c0024be4:	31 c0                	xor    eax,eax
c0024be6:	86 fb                	xchg   bl,bh
c0024be8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024bea:	c1 c3 10             	rol    ebx,0x10
c0024bed:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024bf2:	89 e8                	mov    eax,ebp
c0024bf4:	86 fb                	xchg   bl,bh
c0024bf6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024bfa:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024bfe:	50                   	push   eax
c0024bff:	50                   	push   eax
c0024c00:	55                   	push   ebp
c0024c01:	c1 e5 0b             	shl    ebp,0xb
c0024c04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c08:	6a 00                	push   0x0
c0024c0a:	55                   	push   ebp
c0024c0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c0f:	50                   	push   eax
c0024c10:	56                   	push   esi
c0024c11:	e8 12 fb ff ff       	call   c0024728 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c16:	83 c4 20             	add    esp,0x20
c0024c19:	eb 1a                	jmp    c0024c35 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c1b:	83 ec 0c             	sub    esp,0xc
c0024c1e:	56                   	push   esi
c0024c1f:	e8 56 fe ff ff       	call   c0024a7a <ATAPI::detectMedia()>
c0024c24:	83 c4 10             	add    esp,0x10
c0024c27:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c2e:	75 aa                	jne    c0024bda <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c30:	b8 02 00 00 00       	mov    eax,0x2
c0024c35:	83 c4 1c             	add    esp,0x1c
c0024c38:	5b                   	pop    ebx
c0024c39:	5e                   	pop    esi
c0024c3a:	5f                   	pop    edi
c0024c3b:	5d                   	pop    ebp
c0024c3c:	c3                   	ret    
c0024c3d:	90                   	nop

c0024c3e <SATA::close(int, int, void*)>:
c0024c3e:	83 ec 0c             	sub    esp,0xc
c0024c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c45:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c4b:	85 c0                	test   eax,eax
c0024c4d:	74 0c                	je     c0024c5b <SATA::close(int, int, void*)+0x1d>
c0024c4f:	83 ec 0c             	sub    esp,0xc
c0024c52:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c54:	50                   	push   eax
c0024c55:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c58:	83 c4 10             	add    esp,0x10
c0024c5b:	31 c0                	xor    eax,eax
c0024c5d:	83 c4 0c             	add    esp,0xc
c0024c60:	c3                   	ret    
c0024c61:	90                   	nop

c0024c62 <SATA::powerSaving(PowerSavingLevel)>:
c0024c62:	c3                   	ret    
c0024c63:	90                   	nop

c0024c64 <SATA::open(int, int, void*)>:
c0024c64:	56                   	push   esi
c0024c65:	53                   	push   ebx
c0024c66:	50                   	push   eax
c0024c67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c6f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c79:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c7f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c8d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c97:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c9d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ca4:	e8 44 b2 fe ff       	call   c000feed <Phys::allocatePage()>
c0024ca9:	89 c6                	mov    esi,eax
c0024cab:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024cb1:	81 c6 00 10 00 00    	add    esi,0x1000
c0024cb7:	e8 31 b2 fe ff       	call   c000feed <Phys::allocatePage()>
c0024cbc:	39 c6                	cmp    esi,eax
c0024cbe:	74 10                	je     c0024cd0 <SATA::open(int, int, void*)+0x6c>
c0024cc0:	83 ec 0c             	sub    esp,0xc
c0024cc3:	68 a8 cf 02 c0       	push   0xc002cfa8
c0024cc8:	e8 b2 59 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0024ccd:	83 c4 10             	add    esp,0x10
c0024cd0:	83 ec 0c             	sub    esp,0xc
c0024cd3:	6a 02                	push   0x2
c0024cd5:	e8 71 ce fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0024cda:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ce0:	e8 01 d1 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0024ce5:	6a 03                	push   0x3
c0024ce7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024ced:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024cf3:	50                   	push   eax
c0024cf4:	e8 3f d6 fe ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cf9:	83 c4 14             	add    esp,0x14
c0024cfc:	53                   	push   ebx
c0024cfd:	e8 56 fa fe ff       	call   c0014758 <PhysicalDisk::startCache()>
c0024d02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d05:	e8 ec 1c ff ff       	call   c00169f6 <createPartitionsForDisk(PhysicalDisk*)>
c0024d0a:	83 c4 14             	add    esp,0x14
c0024d0d:	31 c0                	xor    eax,eax
c0024d0f:	5b                   	pop    ebx
c0024d10:	5e                   	pop    esi
c0024d11:	c3                   	ret    

c0024d12 <SATA::SATA()>:
c0024d12:	83 ec 0c             	sub    esp,0xc
c0024d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d19:	83 ec 04             	sub    esp,0x4
c0024d1c:	68 00 02 00 00       	push   0x200
c0024d21:	68 bc cf 02 c0       	push   0xc002cfbc
c0024d26:	50                   	push   eax
c0024d27:	e8 c4 f9 fe ff       	call   c00146f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d2c:	83 c4 10             	add    esp,0x10
c0024d2f:	ba 2c d0 02 c0       	mov    edx,0xc002d02c
c0024d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d38:	89 10                	mov    DWORD PTR [eax],edx
c0024d3a:	90                   	nop
c0024d3b:	83 c4 0c             	add    esp,0xc
c0024d3e:	c3                   	ret    
c0024d3f:	90                   	nop

c0024d40 <SATA::access(unsigned long long, int, void*, bool)>:
c0024d40:	55                   	push   ebp
c0024d41:	57                   	push   edi
c0024d42:	56                   	push   esi
c0024d43:	53                   	push   ebx
c0024d44:	83 ec 2c             	sub    esp,0x2c
c0024d47:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d4b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d53:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d57:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d5b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d64:	7e 10                	jle    c0024d76 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d66:	83 ec 0c             	sub    esp,0xc
c0024d69:	68 cc cf 02 c0       	push   0xc002cfcc
c0024d6e:	e8 0c 59 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0024d73:	83 c4 10             	add    esp,0x10
c0024d76:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d7c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d8c:	89 f0                	mov    eax,esi
c0024d8e:	c1 e0 07             	shl    eax,0x7
c0024d91:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d95:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d9f:	53                   	push   ebx
c0024da0:	8d 46 02             	lea    eax,[esi+0x2]
c0024da3:	53                   	push   ebx
c0024da4:	c1 e0 07             	shl    eax,0x7
c0024da7:	bb 01 00 00 00       	mov    ebx,0x1
c0024dac:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024db0:	50                   	push   eax
c0024db1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024db7:	e8 aa ef ff ff       	call   c0023d66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024dbc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024dc0:	83 c4 10             	add    esp,0x10
c0024dc3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024dc8:	0f 84 ce 01 00 00    	je     c0024f9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024dd2:	c1 e0 09             	shl    eax,0x9
c0024dd5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024dda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024dde:	74 17                	je     c0024df7 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024de0:	51                   	push   ecx
c0024de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024de5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024de9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024def:	e8 58 b9 fd ff       	call   c000074c <memcpy>
c0024df4:	83 c4 10             	add    esp,0x10
c0024df7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dfd:	8d 46 02             	lea    eax,[esi+0x2]
c0024e00:	c1 e0 07             	shl    eax,0x7
c0024e03:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e07:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e09:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e0f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e15:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e19:	c1 e1 05             	shl    ecx,0x5
c0024e1c:	01 c8                	add    eax,ecx
c0024e1e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e22:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e24:	83 e1 01             	and    ecx,0x1
c0024e27:	83 e3 bf             	and    ebx,0xffffffbf
c0024e2a:	c1 e1 06             	shl    ecx,0x6
c0024e2d:	09 d9                	or     ecx,ebx
c0024e2f:	88 08                	mov    BYTE PTR [eax],cl
c0024e31:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e33:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e39:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e3f:	89 08                	mov    DWORD PTR [eax],ecx
c0024e41:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e47:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e4d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e53:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e56:	52                   	push   edx
c0024e57:	68 90 00 00 00       	push   0x90
c0024e5c:	6a 00                	push   0x0
c0024e5e:	53                   	push   ebx
c0024e5f:	e8 1c b9 fd ff       	call   c0000780 <memset>
c0024e64:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e6a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e6e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e74:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e7c:	83 c4 10             	add    esp,0x10
c0024e7f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e82:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e88:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e8e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e93:	09 c8                	or     eax,ecx
c0024e95:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e9b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e9e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ea5:	66 25 00 7f          	and    ax,0x7f00
c0024ea9:	66 0d 27 80          	or     ax,0x8027
c0024ead:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024eb2:	66 89 03             	mov    WORD PTR [ebx],ax
c0024eb5:	19 c0                	sbb    eax,eax
c0024eb7:	83 e0 f0             	and    eax,0xfffffff0
c0024eba:	83 c0 35             	add    eax,0x35
c0024ebd:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024ec0:	89 f8                	mov    eax,edi
c0024ec2:	c1 e8 10             	shr    eax,0x10
c0024ec5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ec8:	89 f8                	mov    eax,edi
c0024eca:	c1 e8 18             	shr    eax,0x18
c0024ecd:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024ed0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024ed4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ed7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024edb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ede:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ee2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024ee6:	89 f3                	mov    ebx,esi
c0024ee8:	31 c0                	xor    eax,eax
c0024eea:	c1 e3 07             	shl    ebx,0x7
c0024eed:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024ef1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024ef7:	80 e1 88             	and    cl,0x88
c0024efa:	74 0a                	je     c0024f06 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024efc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f01:	74 0a                	je     c0024f0d <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f03:	40                   	inc    eax
c0024f04:	eb eb                	jmp    c0024ef1 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f06:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f0b:	75 0a                	jne    c0024f17 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f0d:	83 ec 0c             	sub    esp,0xc
c0024f10:	68 05 d0 02 c0       	push   0xc002d005
c0024f15:	eb 56                	jmp    c0024f6d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f17:	b8 01 00 00 00       	mov    eax,0x1
c0024f1c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f20:	c1 e6 07             	shl    esi,0x7
c0024f23:	d3 e0                	shl    eax,cl
c0024f25:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f29:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f2f:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f35:	85 c8                	test   eax,ecx
c0024f37:	74 20                	je     c0024f59 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f39:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f3f:	0f ba e1 1e          	bt     ecx,0x1e
c0024f43:	73 ea                	jae    c0024f2f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f45:	83 ec 0c             	sub    esp,0xc
c0024f48:	31 db                	xor    ebx,ebx
c0024f4a:	68 13 d0 02 c0       	push   0xc002d013
c0024f4f:	e8 2b 57 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0024f54:	83 c4 10             	add    esp,0x10
c0024f57:	eb 43                	jmp    c0024f9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f59:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f5f:	0f ba e0 1e          	bt     eax,0x1e
c0024f63:	73 17                	jae    c0024f7c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f65:	83 ec 0c             	sub    esp,0xc
c0024f68:	68 13 d0 02 c0       	push   0xc002d013
c0024f6d:	e8 0d 57 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0024f72:	bb 01 00 00 00       	mov    ebx,0x1
c0024f77:	83 c4 10             	add    esp,0x10
c0024f7a:	eb 20                	jmp    c0024f9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f7c:	31 db                	xor    ebx,ebx
c0024f7e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f83:	75 17                	jne    c0024f9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f85:	50                   	push   eax
c0024f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f8a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f90:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f94:	e8 b3 b7 fd ff       	call   c000074c <memcpy>
c0024f99:	83 c4 10             	add    esp,0x10
c0024f9c:	83 c4 2c             	add    esp,0x2c
c0024f9f:	89 d8                	mov    eax,ebx
c0024fa1:	5b                   	pop    ebx
c0024fa2:	5e                   	pop    esi
c0024fa3:	5f                   	pop    edi
c0024fa4:	5d                   	pop    ebp
c0024fa5:	c3                   	ret    

c0024fa6 <SATA::read(unsigned long long, int, void*)>:
c0024fa6:	57                   	push   edi
c0024fa7:	b8 04 00 00 00       	mov    eax,0x4
c0024fac:	56                   	push   esi
c0024fad:	53                   	push   ebx
c0024fae:	83 ec 10             	sub    esp,0x10
c0024fb1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fb5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fb9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024fbc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024fc4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024fca:	77 3b                	ja     c0025007 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fcc:	b8 06 00 00 00       	mov    eax,0x6
c0024fd1:	85 d2                	test   edx,edx
c0024fd3:	74 32                	je     c0025007 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fd5:	50                   	push   eax
c0024fd6:	50                   	push   eax
c0024fd7:	6a 00                	push   0x0
c0024fd9:	52                   	push   edx
c0024fda:	53                   	push   ebx
c0024fdb:	57                   	push   edi
c0024fdc:	56                   	push   esi
c0024fdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fe1:	e8 5a fd ff ff       	call   c0024d40 <SATA::access(unsigned long long, int, void*, bool)>
c0024fe6:	83 c4 20             	add    esp,0x20
c0024fe9:	85 c0                	test   eax,eax
c0024feb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fef:	75 11                	jne    c0025002 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024ff1:	01 1d c8 28 03 c0    	add    DWORD PTR ds:0xc00328c8,ebx
c0024ff7:	e8 a4 b9 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0024ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025000:	eb 05                	jmp    c0025007 <SATA::read(unsigned long long, int, void*)+0x61>
c0025002:	b8 01 00 00 00       	mov    eax,0x1
c0025007:	83 c4 10             	add    esp,0x10
c002500a:	5b                   	pop    ebx
c002500b:	5e                   	pop    esi
c002500c:	5f                   	pop    edi
c002500d:	c3                   	ret    

c002500e <SATA::write(unsigned long long, int, void*)>:
c002500e:	55                   	push   ebp
c002500f:	b8 04 00 00 00       	mov    eax,0x4
c0025014:	57                   	push   edi
c0025015:	56                   	push   esi
c0025016:	53                   	push   ebx
c0025017:	83 ec 1c             	sub    esp,0x1c
c002501a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002501e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025022:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025025:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025029:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002502d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025033:	77 56                	ja     c002508b <SATA::write(unsigned long long, int, void*)+0x7d>
c0025035:	b8 06 00 00 00       	mov    eax,0x6
c002503a:	85 ff                	test   edi,edi
c002503c:	74 4d                	je     c002508b <SATA::write(unsigned long long, int, void*)+0x7d>
c002503e:	89 ee                	mov    esi,ebp
c0025040:	c1 e6 09             	shl    esi,0x9
c0025043:	01 fe                	add    esi,edi
c0025045:	89 c8                	mov    eax,ecx
c0025047:	89 da                	mov    edx,ebx
c0025049:	83 c0 01             	add    eax,0x1
c002504c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025050:	83 d2 00             	adc    edx,0x0
c0025053:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025057:	50                   	push   eax
c0025058:	50                   	push   eax
c0025059:	6a 01                	push   0x1
c002505b:	57                   	push   edi
c002505c:	81 c7 00 02 00 00    	add    edi,0x200
c0025062:	6a 01                	push   0x1
c0025064:	53                   	push   ebx
c0025065:	51                   	push   ecx
c0025066:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002506a:	e8 d1 fc ff ff       	call   c0024d40 <SATA::access(unsigned long long, int, void*, bool)>
c002506f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025073:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025077:	83 c4 20             	add    esp,0x20
c002507a:	39 f7                	cmp    edi,esi
c002507c:	75 c7                	jne    c0025045 <SATA::write(unsigned long long, int, void*)+0x37>
c002507e:	01 2d c4 28 03 c0    	add    DWORD PTR ds:0xc00328c4,ebp
c0025084:	e8 17 b9 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0025089:	31 c0                	xor    eax,eax
c002508b:	83 c4 1c             	add    esp,0x1c
c002508e:	5b                   	pop    ebx
c002508f:	5e                   	pop    esi
c0025090:	5f                   	pop    edi
c0025091:	5d                   	pop    ebp
c0025092:	c3                   	ret    
c0025093:	90                   	nop

c0025094 <SATAPI::write(unsigned long long, int, void*)>:
c0025094:	b8 03 00 00 00       	mov    eax,0x3
c0025099:	c3                   	ret    

c002509a <SATAPI::close(int, int, void*)>:
c002509a:	83 ec 0c             	sub    esp,0xc
c002509d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250a7:	85 c0                	test   eax,eax
c00250a9:	74 0c                	je     c00250b7 <SATAPI::close(int, int, void*)+0x1d>
c00250ab:	83 ec 0c             	sub    esp,0xc
c00250ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00250b0:	50                   	push   eax
c00250b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250b4:	83 c4 10             	add    esp,0x10
c00250b7:	31 c0                	xor    eax,eax
c00250b9:	83 c4 0c             	add    esp,0xc
c00250bc:	c3                   	ret    
c00250bd:	90                   	nop

c00250be <SATAPI::SATAPI()>:
c00250be:	83 ec 0c             	sub    esp,0xc
c00250c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c5:	83 ec 04             	sub    esp,0x4
c00250c8:	68 00 08 00 00       	push   0x800
c00250cd:	68 5c d0 02 c0       	push   0xc002d05c
c00250d2:	50                   	push   eax
c00250d3:	e8 18 f6 fe ff       	call   c00146f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250d8:	83 c4 10             	add    esp,0x10
c00250db:	ba 08 d1 02 c0       	mov    edx,0xc002d108
c00250e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250e4:	89 10                	mov    DWORD PTR [eax],edx
c00250e6:	90                   	nop
c00250e7:	83 c4 0c             	add    esp,0xc
c00250ea:	c3                   	ret    
c00250eb:	90                   	nop

c00250ec <SATAPI::diskRemoved()>:
c00250ec:	83 ec 18             	sub    esp,0x18
c00250ef:	68 68 d0 02 c0       	push   0xc002d068
c00250f4:	e8 ac dd fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00250f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250fd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025104:	83 c4 1c             	add    esp,0x1c
c0025107:	c3                   	ret    

c0025108 <SATAPI::diskInserted()>:
c0025108:	53                   	push   ebx
c0025109:	83 ec 14             	sub    esp,0x14
c002510c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025110:	68 7f d0 02 c0       	push   0xc002d07f
c0025115:	e8 8b dd fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c002511a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025121:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025124:	e8 2f f6 fe ff       	call   c0014758 <PhysicalDisk::startCache()>
c0025129:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002512d:	83 c4 18             	add    esp,0x18
c0025130:	5b                   	pop    ebx
c0025131:	e9 c0 18 ff ff       	jmp    c00169f6 <createPartitionsForDisk(PhysicalDisk*)>

c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025136:	55                   	push   ebp
c0025137:	57                   	push   edi
c0025138:	56                   	push   esi
c0025139:	53                   	push   ebx
c002513a:	83 ec 24             	sub    esp,0x24
c002513d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025141:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025145:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002514b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002514f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025153:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025159:	8d 5f 02             	lea    ebx,[edi+0x2]
c002515c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025162:	c1 e3 07             	shl    ebx,0x7
c0025165:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025169:	89 f8                	mov    eax,edi
c002516b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002516f:	c1 e0 07             	shl    eax,0x7
c0025172:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025176:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002517a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025184:	53                   	push   ebx
c0025185:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002518b:	e8 d6 eb ff ff       	call   c0023d66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025190:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025194:	83 c4 10             	add    esp,0x10
c0025197:	b8 01 00 00 00       	mov    eax,0x1
c002519c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00251a1:	0f 84 8a 01 00 00    	je     c0025331 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251a7:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251af:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251b5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00251bf:	c1 e1 05             	shl    ecx,0x5
c00251c2:	01 c8                	add    eax,ecx
c00251c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251c6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251cc:	81 c9 25 00 01 00    	or     ecx,0x10025
c00251d2:	89 08                	mov    DWORD PTR [eax],ecx
c00251d4:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251da:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00251e0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00251e6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00251e9:	52                   	push   edx
c00251ea:	68 90 00 00 00       	push   0x90
c00251ef:	6a 00                	push   0x0
c00251f1:	53                   	push   ebx
c00251f2:	e8 89 b5 fd ff       	call   c0000780 <memset>
c00251f7:	83 c4 0c             	add    esp,0xc
c00251fa:	8d 43 40             	lea    eax,[ebx+0x40]
c00251fd:	6a 0c                	push   0xc
c00251ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025203:	50                   	push   eax
c0025204:	e8 43 b5 fd ff       	call   c000074c <memcpy>
c0025209:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002520f:	89 ea                	mov    edx,ebp
c0025211:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025217:	c1 ea 18             	shr    edx,0x18
c002521a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002521e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025221:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025224:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025228:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002522e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025234:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025239:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002523d:	09 c8                	or     eax,ecx
c002523f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025243:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025249:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002524c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025253:	66 25 00 7f          	and    ax,0x7f00
c0025257:	66 0d 27 80          	or     ax,0x8027
c002525b:	66 89 03             	mov    WORD PTR [ebx],ax
c002525e:	89 e8                	mov    eax,ebp
c0025260:	c1 e8 10             	shr    eax,0x10
c0025263:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025266:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002526a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002526d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025271:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025274:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025278:	83 c4 10             	add    esp,0x10
c002527b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002527f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025283:	31 c0                	xor    eax,eax
c0025285:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002528b:	80 e1 88             	and    cl,0x88
c002528e:	74 0a                	je     c002529a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025290:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025295:	74 0a                	je     c00252a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025297:	40                   	inc    eax
c0025298:	eb eb                	jmp    c0025285 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002529a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002529f:	75 0f                	jne    c00252b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00252a1:	83 ec 0c             	sub    esp,0xc
c00252a4:	68 05 d0 02 c0       	push   0xc002d005
c00252a9:	e8 d1 53 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c00252ae:	eb 3a                	jmp    c00252ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252b0:	b8 01 00 00 00       	mov    eax,0x1
c00252b5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00252b9:	c1 e7 07             	shl    edi,0x7
c00252bc:	d3 e0                	shl    eax,cl
c00252be:	03 3c 24             	add    edi,DWORD PTR [esp]
c00252c1:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252c7:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252cd:	85 d0                	test   eax,edx
c00252cf:	74 23                	je     c00252f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00252d1:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00252d7:	0f ba e2 1e          	bt     edx,0x1e
c00252db:	73 ea                	jae    c00252c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00252dd:	83 ec 0c             	sub    esp,0xc
c00252e0:	68 97 d0 02 c0       	push   0xc002d097
c00252e5:	e8 bb db fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00252ea:	83 c4 10             	add    esp,0x10
c00252ed:	b8 01 00 00 00       	mov    eax,0x1
c00252f2:	eb 3d                	jmp    c0025331 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252f4:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00252fa:	0f ba e0 1e          	bt     eax,0x1e
c00252fe:	73 0a                	jae    c002530a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025300:	83 ec 0c             	sub    esp,0xc
c0025303:	68 aa d0 02 c0       	push   0xc002d0aa
c0025308:	eb db                	jmp    c00252e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002530a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002530f:	74 1e                	je     c002532f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025311:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025316:	74 17                	je     c002532f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025318:	50                   	push   eax
c0025319:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002531d:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025323:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025327:	e8 20 b4 fd ff       	call   c000074c <memcpy>
c002532c:	83 c4 10             	add    esp,0x10
c002532f:	31 c0                	xor    eax,eax
c0025331:	83 c4 1c             	add    esp,0x1c
c0025334:	5b                   	pop    ebx
c0025335:	5e                   	pop    esi
c0025336:	5f                   	pop    edi
c0025337:	5d                   	pop    ebp
c0025338:	c3                   	ret    
c0025339:	90                   	nop

c002533a <SATAPI::eject()>:
c002533a:	57                   	push   edi
c002533b:	b9 03 00 00 00       	mov    ecx,0x3
c0025340:	53                   	push   ebx
c0025341:	83 ec 14             	sub    esp,0x14
c0025344:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025348:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002534c:	fc                   	cld    
c002534d:	31 c0                	xor    eax,eax
c002534f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025351:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025356:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002535b:	50                   	push   eax
c002535c:	6a 00                	push   0x0
c002535e:	6a 00                	push   0x0
c0025360:	6a 00                	push   0x0
c0025362:	6a 00                	push   0x0
c0025364:	6a 02                	push   0x2
c0025366:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002536a:	50                   	push   eax
c002536b:	53                   	push   ebx
c002536c:	e8 c5 fd ff ff       	call   c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025371:	83 c4 14             	add    esp,0x14
c0025374:	53                   	push   ebx
c0025375:	e8 72 fd ff ff       	call   c00250ec <SATAPI::diskRemoved()>
c002537a:	83 c4 24             	add    esp,0x24
c002537d:	31 c0                	xor    eax,eax
c002537f:	5b                   	pop    ebx
c0025380:	5f                   	pop    edi
c0025381:	c3                   	ret    

c0025382 <SATAPI::detectMedia()>:
c0025382:	56                   	push   esi
c0025383:	53                   	push   ebx
c0025384:	83 ec 28             	sub    esp,0x28
c0025387:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002538b:	6a 0c                	push   0xc
c002538d:	6a 00                	push   0x0
c002538f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025393:	56                   	push   esi
c0025394:	e8 e7 b3 fd ff       	call   c0000780 <memset>
c0025399:	83 c4 0c             	add    esp,0xc
c002539c:	6a 00                	push   0x0
c002539e:	6a 00                	push   0x0
c00253a0:	6a 00                	push   0x0
c00253a2:	6a 00                	push   0x0
c00253a4:	6a 00                	push   0x0
c00253a6:	56                   	push   esi
c00253a7:	53                   	push   ebx
c00253a8:	e8 89 fd ff ff       	call   c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253ad:	83 c4 1c             	add    esp,0x1c
c00253b0:	6a 0c                	push   0xc
c00253b2:	6a 00                	push   0x0
c00253b4:	56                   	push   esi
c00253b5:	e8 c6 b3 fd ff       	call   c0000780 <memset>
c00253ba:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253bf:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253c4:	83 c4 0c             	add    esp,0xc
c00253c7:	6a 01                	push   0x1
c00253c9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00253cd:	50                   	push   eax
c00253ce:	6a 00                	push   0x0
c00253d0:	6a 00                	push   0x0
c00253d2:	6a 12                	push   0x12
c00253d4:	56                   	push   esi
c00253d5:	53                   	push   ebx
c00253d6:	e8 5b fd ff ff       	call   c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253db:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00253df:	83 c4 20             	add    esp,0x20
c00253e2:	83 e0 7f             	and    eax,0x7f
c00253e5:	3c 70                	cmp    al,0x70
c00253e7:	74 15                	je     c00253fe <SATAPI::detectMedia()+0x7c>
c00253e9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253f0:	75 0c                	jne    c00253fe <SATAPI::detectMedia()+0x7c>
c00253f2:	83 ec 0c             	sub    esp,0xc
c00253f5:	53                   	push   ebx
c00253f6:	e8 0d fd ff ff       	call   c0025108 <SATAPI::diskInserted()>
c00253fb:	83 c4 10             	add    esp,0x10
c00253fe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025402:	83 e0 0f             	and    eax,0xf
c0025405:	3c 02                	cmp    al,0x2
c0025407:	75 1b                	jne    c0025424 <SATAPI::detectMedia()+0xa2>
c0025409:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002540e:	75 2d                	jne    c002543d <SATAPI::detectMedia()+0xbb>
c0025410:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025417:	74 24                	je     c002543d <SATAPI::detectMedia()+0xbb>
c0025419:	83 ec 0c             	sub    esp,0xc
c002541c:	53                   	push   ebx
c002541d:	e8 ca fc ff ff       	call   c00250ec <SATAPI::diskRemoved()>
c0025422:	eb 16                	jmp    c002543a <SATAPI::detectMedia()+0xb8>
c0025424:	84 c0                	test   al,al
c0025426:	75 15                	jne    c002543d <SATAPI::detectMedia()+0xbb>
c0025428:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002542f:	75 0c                	jne    c002543d <SATAPI::detectMedia()+0xbb>
c0025431:	83 ec 0c             	sub    esp,0xc
c0025434:	53                   	push   ebx
c0025435:	e8 ce fc ff ff       	call   c0025108 <SATAPI::diskInserted()>
c002543a:	83 c4 10             	add    esp,0x10
c002543d:	83 c4 24             	add    esp,0x24
c0025440:	5b                   	pop    ebx
c0025441:	5e                   	pop    esi
c0025442:	c3                   	ret    
c0025443:	90                   	nop

c0025444 <SATAPI::open(int, int, void*)>:
c0025444:	56                   	push   esi
c0025445:	53                   	push   ebx
c0025446:	50                   	push   eax
c0025447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002544b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002544f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025459:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002545f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002546d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025477:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002547d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025484:	e8 64 aa fe ff       	call   c000feed <Phys::allocatePage()>
c0025489:	89 c6                	mov    esi,eax
c002548b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025491:	81 c6 00 10 00 00    	add    esi,0x1000
c0025497:	e8 51 aa fe ff       	call   c000feed <Phys::allocatePage()>
c002549c:	39 c6                	cmp    esi,eax
c002549e:	74 10                	je     c00254b0 <SATAPI::open(int, int, void*)+0x6c>
c00254a0:	83 ec 0c             	sub    esp,0xc
c00254a3:	68 bf d0 02 c0       	push   0xc002d0bf
c00254a8:	e8 d2 51 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c00254ad:	83 c4 10             	add    esp,0x10
c00254b0:	83 ec 0c             	sub    esp,0xc
c00254b3:	6a 02                	push   0x2
c00254b5:	e8 91 c6 fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c00254ba:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00254c0:	e8 21 c9 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00254c5:	6a 03                	push   0x3
c00254c7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00254cd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00254d3:	50                   	push   eax
c00254d4:	e8 5f ce fe ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c00254d9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00254e0:	83 c4 14             	add    esp,0x14
c00254e3:	53                   	push   ebx
c00254e4:	e8 99 fe ff ff       	call   c0025382 <SATAPI::detectMedia()>
c00254e9:	83 c4 14             	add    esp,0x14
c00254ec:	31 c0                	xor    eax,eax
c00254ee:	5b                   	pop    ebx
c00254ef:	5e                   	pop    esi
c00254f0:	c3                   	ret    
c00254f1:	90                   	nop

c00254f2 <SATAPI::read(unsigned long long, int, void*)>:
c00254f2:	55                   	push   ebp
c00254f3:	57                   	push   edi
c00254f4:	56                   	push   esi
c00254f5:	53                   	push   ebx
c00254f6:	83 ec 1c             	sub    esp,0x1c
c00254f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00254fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025501:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025505:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002550c:	74 19                	je     c0025527 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002550e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025513:	7e 2e                	jle    c0025543 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025515:	83 ec 0c             	sub    esp,0xc
c0025518:	68 d5 d0 02 c0       	push   0xc002d0d5
c002551d:	e8 5d 51 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0025522:	83 c4 10             	add    esp,0x10
c0025525:	eb 1c                	jmp    c0025543 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025527:	83 ec 0c             	sub    esp,0xc
c002552a:	55                   	push   ebp
c002552b:	e8 52 fe ff ff       	call   c0025382 <SATAPI::detectMedia()>
c0025530:	83 c4 10             	add    esp,0x10
c0025533:	b8 02 00 00 00       	mov    eax,0x2
c0025538:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002553f:	75 cd                	jne    c002550e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025541:	eb 49                	jmp    c002558c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025543:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025547:	b9 03 00 00 00       	mov    ecx,0x3
c002554c:	fc                   	cld    
c002554d:	31 c0                	xor    eax,eax
c002554f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025551:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025556:	89 d8                	mov    eax,ebx
c0025558:	86 e0                	xchg   al,ah
c002555a:	c1 c0 10             	rol    eax,0x10
c002555d:	86 e0                	xchg   al,ah
c002555f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025563:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025567:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002556b:	50                   	push   eax
c002556c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025570:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025574:	56                   	push   esi
c0025575:	53                   	push   ebx
c0025576:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002557a:	c1 e0 0b             	shl    eax,0xb
c002557d:	50                   	push   eax
c002557e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025582:	50                   	push   eax
c0025583:	55                   	push   ebp
c0025584:	e8 ad fb ff ff       	call   c0025136 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025589:	83 c4 20             	add    esp,0x20
c002558c:	83 c4 1c             	add    esp,0x1c
c002558f:	5b                   	pop    ebx
c0025590:	5e                   	pop    esi
c0025591:	5f                   	pop    edi
c0025592:	5d                   	pop    ebp
c0025593:	c3                   	ret    

c0025594 <AVX::open(int, int, void*)>:
c0025594:	83 ec 0c             	sub    esp,0xc
c0025597:	e8 3c 11 00 00       	call   c00266d8 <avxInit>
c002559c:	b8 00 00 00 00       	mov    eax,0x0
c00255a1:	83 c4 0c             	add    esp,0xc
c00255a4:	c3                   	ret    
c00255a5:	90                   	nop

c00255a6 <AVX::close(int, int, void*)>:
c00255a6:	83 ec 0c             	sub    esp,0xc
c00255a9:	e8 2b 11 00 00       	call   c00266d9 <avxClose>
c00255ae:	b8 00 00 00 00       	mov    eax,0x0
c00255b3:	83 c4 0c             	add    esp,0xc
c00255b6:	c3                   	ret    
c00255b7:	90                   	nop

c00255b8 <AVX::available()>:
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	e8 10 11 00 00       	call   c00266d0 <avxDetect>
c00255c0:	85 c0                	test   eax,eax
c00255c2:	0f 95 c0             	setne  al
c00255c5:	83 c4 0c             	add    esp,0xc
c00255c8:	c3                   	ret    
c00255c9:	90                   	nop

c00255ca <AVX::save(void*)>:
c00255ca:	83 ec 0c             	sub    esp,0xc
c00255cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255d1:	83 ec 0c             	sub    esp,0xc
c00255d4:	50                   	push   eax
c00255d5:	e8 fc 10 00 00       	call   c00266d6 <avxSave>
c00255da:	83 c4 10             	add    esp,0x10
c00255dd:	90                   	nop
c00255de:	83 c4 0c             	add    esp,0xc
c00255e1:	c3                   	ret    

c00255e2 <AVX::load(void*)>:
c00255e2:	83 ec 0c             	sub    esp,0xc
c00255e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255e9:	83 ec 0c             	sub    esp,0xc
c00255ec:	50                   	push   eax
c00255ed:	e8 e5 10 00 00       	call   c00266d7 <avxLoad>
c00255f2:	83 c4 10             	add    esp,0x10
c00255f5:	90                   	nop
c00255f6:	83 c4 0c             	add    esp,0xc
c00255f9:	c3                   	ret    

c00255fa <AVX::AVX()>:
c00255fa:	83 ec 0c             	sub    esp,0xc
c00255fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025601:	83 ec 08             	sub    esp,0x8
c0025604:	68 38 d1 02 c0       	push   0xc002d138
c0025609:	50                   	push   eax
c002560a:	e8 bf f1 fe ff       	call   c00147ce <FPU::FPU(char const*)>
c002560f:	83 c4 10             	add    esp,0x10
c0025612:	ba 48 d1 02 c0       	mov    edx,0xc002d148
c0025617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561b:	89 10                	mov    DWORD PTR [eax],edx
c002561d:	90                   	nop
c002561e:	83 c4 0c             	add    esp,0xc
c0025621:	c3                   	ret    

c0025622 <MMX::available()>:
c0025622:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0025627:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002562d:	83 e0 20             	and    eax,0x20
c0025630:	84 c0                	test   al,al
c0025632:	0f 95 c0             	setne  al
c0025635:	c3                   	ret    

c0025636 <MMX::open(int, int, void*)>:
c0025636:	83 ec 0c             	sub    esp,0xc
c0025639:	e8 22 11 00 00       	call   c0026760 <x87Init>
c002563e:	b8 00 00 00 00       	mov    eax,0x0
c0025643:	83 c4 0c             	add    esp,0xc
c0025646:	c3                   	ret    
c0025647:	90                   	nop

c0025648 <MMX::close(int, int, void*)>:
c0025648:	83 ec 0c             	sub    esp,0xc
c002564b:	e8 2a 11 00 00       	call   c002677a <x87Close>
c0025650:	b8 00 00 00 00       	mov    eax,0x0
c0025655:	83 c4 0c             	add    esp,0xc
c0025658:	c3                   	ret    
c0025659:	90                   	nop

c002565a <MMX::save(void*)>:
c002565a:	83 ec 0c             	sub    esp,0xc
c002565d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025661:	83 ec 0c             	sub    esp,0xc
c0025664:	50                   	push   eax
c0025665:	e8 e7 10 00 00       	call   c0026751 <x87Save>
c002566a:	83 c4 10             	add    esp,0x10
c002566d:	90                   	nop
c002566e:	83 c4 0c             	add    esp,0xc
c0025671:	c3                   	ret    

c0025672 <MMX::load(void*)>:
c0025672:	83 ec 0c             	sub    esp,0xc
c0025675:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025679:	83 ec 0c             	sub    esp,0xc
c002567c:	50                   	push   eax
c002567d:	e8 d7 10 00 00       	call   c0026759 <x87Load>
c0025682:	83 c4 10             	add    esp,0x10
c0025685:	90                   	nop
c0025686:	83 c4 0c             	add    esp,0xc
c0025689:	c3                   	ret    

c002568a <MMX::MMX()>:
c002568a:	83 ec 0c             	sub    esp,0xc
c002568d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025691:	83 ec 08             	sub    esp,0x8
c0025694:	68 78 d1 02 c0       	push   0xc002d178
c0025699:	50                   	push   eax
c002569a:	e8 2f f1 fe ff       	call   c00147ce <FPU::FPU(char const*)>
c002569f:	83 c4 10             	add    esp,0x10
c00256a2:	ba 88 d1 02 c0       	mov    edx,0xc002d188
c00256a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ab:	89 10                	mov    DWORD PTR [eax],edx
c00256ad:	90                   	nop
c00256ae:	83 c4 0c             	add    esp,0xc
c00256b1:	c3                   	ret    

c00256b2 <SSE::open(int, int, void*)>:
c00256b2:	83 ec 0c             	sub    esp,0xc
c00256b5:	e8 5a 10 00 00       	call   c0026714 <sseInit>
c00256ba:	b8 00 00 00 00       	mov    eax,0x0
c00256bf:	83 c4 0c             	add    esp,0xc
c00256c2:	c3                   	ret    
c00256c3:	90                   	nop

c00256c4 <SSE::close(int, int, void*)>:
c00256c4:	83 ec 0c             	sub    esp,0xc
c00256c7:	e8 58 10 00 00       	call   c0026724 <sseClose>
c00256cc:	b8 00 00 00 00       	mov    eax,0x0
c00256d1:	83 c4 0c             	add    esp,0xc
c00256d4:	c3                   	ret    
c00256d5:	90                   	nop

c00256d6 <SSE::available()>:
c00256d6:	83 ec 1c             	sub    esp,0x1c
c00256d9:	e8 12 10 00 00       	call   c00266f0 <absolutelyNoChanceInHell>
c00256de:	85 c0                	test   eax,eax
c00256e0:	0f 95 c0             	setne  al
c00256e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00256e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00256eb:	83 c4 1c             	add    esp,0x1c
c00256ee:	c3                   	ret    
c00256ef:	90                   	nop

c00256f0 <SSE::save(void*)>:
c00256f0:	83 ec 0c             	sub    esp,0xc
c00256f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256f7:	83 ec 0c             	sub    esp,0xc
c00256fa:	50                   	push   eax
c00256fb:	e8 08 10 00 00       	call   c0026708 <sseSave>
c0025700:	83 c4 10             	add    esp,0x10
c0025703:	90                   	nop
c0025704:	83 c4 0c             	add    esp,0xc
c0025707:	c3                   	ret    

c0025708 <SSE::load(void*)>:
c0025708:	83 ec 0c             	sub    esp,0xc
c002570b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002570f:	83 ec 0c             	sub    esp,0xc
c0025712:	50                   	push   eax
c0025713:	e8 f6 0f 00 00       	call   c002670e <sseLoad>
c0025718:	83 c4 10             	add    esp,0x10
c002571b:	90                   	nop
c002571c:	83 c4 0c             	add    esp,0xc
c002571f:	c3                   	ret    

c0025720 <SSE::SSE()>:
c0025720:	83 ec 0c             	sub    esp,0xc
c0025723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025727:	83 ec 08             	sub    esp,0x8
c002572a:	68 b8 d1 02 c0       	push   0xc002d1b8
c002572f:	50                   	push   eax
c0025730:	e8 99 f0 fe ff       	call   c00147ce <FPU::FPU(char const*)>
c0025735:	83 c4 10             	add    esp,0x10
c0025738:	ba c8 d1 02 c0       	mov    edx,0xc002d1c8
c002573d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025741:	89 10                	mov    DWORD PTR [eax],edx
c0025743:	90                   	nop
c0025744:	83 c4 0c             	add    esp,0xc
c0025747:	c3                   	ret    

c0025748 <x87::open(int, int, void*)>:
c0025748:	83 ec 0c             	sub    esp,0xc
c002574b:	e8 10 10 00 00       	call   c0026760 <x87Init>
c0025750:	b8 00 00 00 00       	mov    eax,0x0
c0025755:	83 c4 0c             	add    esp,0xc
c0025758:	c3                   	ret    
c0025759:	90                   	nop

c002575a <x87::close(int, int, void*)>:
c002575a:	83 ec 0c             	sub    esp,0xc
c002575d:	e8 18 10 00 00       	call   c002677a <x87Close>
c0025762:	b8 00 00 00 00       	mov    eax,0x0
c0025767:	83 c4 0c             	add    esp,0xc
c002576a:	c3                   	ret    
c002576b:	90                   	nop

c002576c <x87::available()>:
c002576c:	83 ec 0c             	sub    esp,0xc
c002576f:	e8 c2 0f 00 00       	call   c0026736 <x87Detect>
c0025774:	85 c0                	test   eax,eax
c0025776:	0f 95 c0             	setne  al
c0025779:	83 c4 0c             	add    esp,0xc
c002577c:	c3                   	ret    
c002577d:	90                   	nop

c002577e <x87::save(void*)>:
c002577e:	83 ec 0c             	sub    esp,0xc
c0025781:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025785:	83 ec 0c             	sub    esp,0xc
c0025788:	50                   	push   eax
c0025789:	e8 c3 0f 00 00       	call   c0026751 <x87Save>
c002578e:	83 c4 10             	add    esp,0x10
c0025791:	90                   	nop
c0025792:	83 c4 0c             	add    esp,0xc
c0025795:	c3                   	ret    

c0025796 <x87::load(void*)>:
c0025796:	83 ec 0c             	sub    esp,0xc
c0025799:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002579d:	83 ec 0c             	sub    esp,0xc
c00257a0:	50                   	push   eax
c00257a1:	e8 b3 0f 00 00       	call   c0026759 <x87Load>
c00257a6:	83 c4 10             	add    esp,0x10
c00257a9:	90                   	nop
c00257aa:	83 c4 0c             	add    esp,0xc
c00257ad:	c3                   	ret    

c00257ae <x87::x87()>:
c00257ae:	83 ec 0c             	sub    esp,0xc
c00257b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b5:	83 ec 08             	sub    esp,0x8
c00257b8:	68 f8 d1 02 c0       	push   0xc002d1f8
c00257bd:	50                   	push   eax
c00257be:	e8 0b f0 fe ff       	call   c00147ce <FPU::FPU(char const*)>
c00257c3:	83 c4 10             	add    esp,0x10
c00257c6:	ba 08 d2 02 c0       	mov    edx,0xc002d208
c00257cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257cf:	89 10                	mov    DWORD PTR [eax],edx
c00257d1:	90                   	nop
c00257d2:	83 c4 0c             	add    esp,0xc
c00257d5:	c3                   	ret    

c00257d6 <APIC::disable()>:
c00257d6:	90                   	nop
c00257d7:	c3                   	ret    

c00257d8 <APIC::close(int, int, void*)>:
c00257d8:	55                   	push   ebp
c00257d9:	89 e5                	mov    ebp,esp
c00257db:	83 ec 08             	sub    esp,0x8
c00257de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e3:	83 c0 3c             	add    eax,0x3c
c00257e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e8:	83 ec 0c             	sub    esp,0xc
c00257eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ee:	ff d0                	call   eax
c00257f0:	83 c4 10             	add    esp,0x10
c00257f3:	b8 00 00 00 00       	mov    eax,0x0
c00257f8:	c9                   	leave  
c00257f9:	c3                   	ret    

c00257fa <IOAPIC::close(int, int, void*)>:
c00257fa:	b8 00 00 00 00       	mov    eax,0x0
c00257ff:	c3                   	ret    

c0025800 <APIC::io_wait()>:
c0025800:	eb 00                	jmp    c0025802 <APIC::io_wait()+0x2>
c0025802:	eb 00                	jmp    c0025804 <APIC::io_wait()+0x4>
c0025804:	90                   	nop
c0025805:	c3                   	ret    

c0025806 <APIC::getBase()>:
c0025806:	55                   	push   ebp
c0025807:	89 e5                	mov    ebp,esp
c0025809:	83 ec 18             	sub    esp,0x18
c002580c:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0025811:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025817:	83 e0 08             	and    eax,0x8
c002581a:	84 c0                	test   al,al
c002581c:	75 07                	jne    c0025825 <APIC::getBase()+0x1f>
c002581e:	b8 00 00 00 00       	mov    eax,0x0
c0025823:	eb 21                	jmp    c0025846 <APIC::getBase()+0x40>
c0025825:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c002582a:	83 ec 08             	sub    esp,0x8
c002582d:	6a 1b                	push   0x1b
c002582f:	50                   	push   eax
c0025830:	e8 bb 95 fe ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0025835:	83 c4 10             	add    esp,0x10
c0025838:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002583b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002583e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025841:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025846:	c9                   	leave  
c0025847:	c3                   	ret    

c0025848 <APIC::eoi(unsigned char)>:
c0025848:	55                   	push   ebp
c0025849:	89 e5                	mov    ebp,esp
c002584b:	83 ec 28             	sub    esp,0x28
c002584e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025851:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025854:	83 ec 0c             	sub    esp,0xc
c0025857:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002585a:	e8 a7 ff ff ff       	call   c0025806 <APIC::getBase()>
c002585f:	83 c4 10             	add    esp,0x10
c0025862:	05 b0 00 00 00       	add    eax,0xb0
c0025867:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002586a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002586d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025873:	90                   	nop
c0025874:	c9                   	leave  
c0025875:	c3                   	ret    

c0025876 <APIC::open(int, int, void*)>:
c0025876:	55                   	push   ebp
c0025877:	89 e5                	mov    ebp,esp
c0025879:	57                   	push   edi
c002587a:	56                   	push   esi
c002587b:	53                   	push   ebx
c002587c:	83 ec 2c             	sub    esp,0x2c
c002587f:	83 ec 0c             	sub    esp,0xc
c0025882:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025885:	e8 7c ff ff ff       	call   c0025806 <APIC::getBase()>
c002588a:	83 c4 10             	add    esp,0x10
c002588d:	89 c2                	mov    edx,eax
c002588f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025892:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025898:	0f b6 f8             	movzx  edi,al
c002589b:	89 d0                	mov    eax,edx
c002589d:	ba 00 00 00 00       	mov    edx,0x0
c00258a2:	89 c1                	mov    ecx,eax
c00258a4:	80 e5 ff             	and    ch,0xff
c00258a7:	89 cb                	mov    ebx,ecx
c00258a9:	0f b6 f2             	movzx  esi,dl
c00258ac:	89 d8                	mov    eax,ebx
c00258ae:	89 f2                	mov    edx,esi
c00258b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258b3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258b6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00258ba:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258be:	83 e0 00             	and    eax,0x0
c00258c1:	09 d0                	or     eax,edx
c00258c3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ca:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258d0:	8d 50 01             	lea    edx,[eax+0x1]
c00258d3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258d6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00258dc:	0f b6 d0             	movzx  edx,al
c00258df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e2:	83 c2 08             	add    edx,0x8
c00258e5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258e9:	0f b6 c9             	movzx  ecx,cl
c00258ec:	81 c9 00 00 01 00    	or     ecx,0x10000
c00258f2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258f6:	83 ec 0c             	sub    esp,0xc
c00258f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258fc:	e8 05 ff ff ff       	call   c0025806 <APIC::getBase()>
c0025901:	83 c4 10             	add    esp,0x10
c0025904:	05 f0 00 00 00       	add    eax,0xf0
c0025909:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002590c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002590f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025911:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025914:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002591b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025922:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025925:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025928:	89 10                	mov    DWORD PTR [eax],edx
c002592a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025931:	a1 50 0e 03 c0       	mov    eax,ds:0xc0030e50
c0025936:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025939:	7d 7c                	jge    c00259b7 <APIC::open(int, int, void*)+0x141>
c002593b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002593e:	8b 04 85 60 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1a0]
c0025945:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025948:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002594b:	8b 04 85 60 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1a0]
c0025952:	c1 e8 08             	shr    eax,0x8
c0025955:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025959:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002595c:	8b 04 85 60 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1a0]
c0025963:	c1 e8 18             	shr    eax,0x18
c0025966:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025969:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002596d:	75 40                	jne    c00259af <APIC::open(int, int, void*)+0x139>
c002596f:	83 ec 0c             	sub    esp,0xc
c0025972:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025975:	e8 8c fe ff ff       	call   c0025806 <APIC::getBase()>
c002597a:	83 c4 10             	add    esp,0x10
c002597d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025981:	75 07                	jne    c002598a <APIC::open(int, int, void*)+0x114>
c0025983:	ba 60 03 00 00       	mov    edx,0x360
c0025988:	eb 05                	jmp    c002598f <APIC::open(int, int, void*)+0x119>
c002598a:	ba 50 03 00 00       	mov    edx,0x350
c002598f:	01 d0                	add    eax,edx
c0025991:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025994:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025997:	8b 00                	mov    eax,DWORD PTR [eax]
c0025999:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002599c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259a3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259a7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259aa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259ad:	89 10                	mov    DWORD PTR [eax],edx
c00259af:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259b2:	e9 7a ff ff ff       	jmp    c0025931 <APIC::open(int, int, void*)+0xbb>
c00259b7:	b8 00 00 00 00       	mov    eax,0x0
c00259bc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259bf:	5b                   	pop    ebx
c00259c0:	5e                   	pop    esi
c00259c1:	5f                   	pop    edi
c00259c2:	5d                   	pop    ebp
c00259c3:	c3                   	ret    

c00259c4 <IOAPIC::IOAPIC()>:
c00259c4:	83 ec 0c             	sub    esp,0xc
c00259c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259cb:	83 ec 08             	sub    esp,0x8
c00259ce:	68 38 d2 02 c0       	push   0xc002d238
c00259d3:	50                   	push   eax
c00259d4:	e8 e3 ea fe ff       	call   c00144bc <Device::Device(char const*)>
c00259d9:	83 c4 10             	add    esp,0x10
c00259dc:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c00259e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e5:	89 10                	mov    DWORD PTR [eax],edx
c00259e7:	90                   	nop
c00259e8:	83 c4 0c             	add    esp,0xc
c00259eb:	c3                   	ret    

c00259ec <APIC::APIC()>:
c00259ec:	53                   	push   ebx
c00259ed:	83 ec 18             	sub    esp,0x18
c00259f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259f4:	83 ec 08             	sub    esp,0x8
c00259f7:	68 40 d2 02 c0       	push   0xc002d240
c00259fc:	50                   	push   eax
c00259fd:	e8 26 f2 fe ff       	call   c0014c28 <InterruptController::InterruptController(char const*)>
c0025a02:	83 c4 10             	add    esp,0x10
c0025a05:	ba 18 d3 02 c0       	mov    edx,0xc002d318
c0025a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a0e:	89 10                	mov    DWORD PTR [eax],edx
c0025a10:	a0 20 29 03 c0       	mov    al,ds:0xc0032920
c0025a15:	83 f0 01             	xor    eax,0x1
c0025a18:	84 c0                	test   al,al
c0025a1a:	0f 84 a1 00 00 00    	je     c0025ac1 <APIC::APIC()+0xd5>
c0025a20:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a25:	a0 00 0f 03 c0       	mov    al,ds:0xc0030f00
c0025a2a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a2e:	0f 83 86 00 00 00    	jae    c0025aba <APIC::APIC()+0xce>
c0025a34:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a3c:	83 ec 0c             	sub    esp,0xc
c0025a3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a43:	e8 03 9e fe ff       	call   c000f84b <malloc>
c0025a48:	83 c4 10             	add    esp,0x10
c0025a4b:	89 c3                	mov    ebx,eax
c0025a4d:	83 ec 0c             	sub    esp,0xc
c0025a50:	53                   	push   ebx
c0025a51:	e8 6e ff ff ff       	call   c00259c4 <IOAPIC::IOAPIC()>
c0025a56:	83 c4 10             	add    esp,0x10
c0025a59:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a5d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a66:	89 14 85 00 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd700],edx
c0025a6d:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0025a72:	40                   	inc    eax
c0025a73:	a3 e0 28 03 c0       	mov    ds:0xc00328e0,eax
c0025a78:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0025a7d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a83:	83 ec 08             	sub    esp,0x8
c0025a86:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a8a:	50                   	push   eax
c0025a8b:	e8 3c e8 fe ff       	call   c00142cc <Device::addChild(Device*)>
c0025a90:	83 c4 10             	add    esp,0x10
c0025a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a99:	83 c0 08             	add    eax,0x8
c0025a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a9e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025aa3:	6a 00                	push   0x0
c0025aa5:	6a 00                	push   0x0
c0025aa7:	52                   	push   edx
c0025aa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025aac:	ff d0                	call   eax
c0025aae:	83 c4 10             	add    esp,0x10
c0025ab1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025ab5:	e9 6b ff ff ff       	jmp    c0025a25 <APIC::APIC()+0x39>
c0025aba:	c6 05 20 29 03 c0 01 	mov    BYTE PTR ds:0xc0032920,0x1
c0025ac1:	90                   	nop
c0025ac2:	83 c4 18             	add    esp,0x18
c0025ac5:	5b                   	pop    ebx
c0025ac6:	c3                   	ret    
c0025ac7:	90                   	nop

c0025ac8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025ac8:	55                   	push   ebp
c0025ac9:	89 e5                	mov    ebp,esp
c0025acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ace:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ad4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ad7:	72 1d                	jb     c0025af6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025adc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025aeb:	01 d0                	add    eax,edx
c0025aed:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025af0:	73 04                	jae    c0025af6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025af2:	b0 01                	mov    al,0x1
c0025af4:	eb 02                	jmp    c0025af8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025af6:	b0 00                	mov    al,0x0
c0025af8:	5d                   	pop    ebp
c0025af9:	c3                   	ret    

c0025afa <IOAPIC::read(int)>:
c0025afa:	55                   	push   ebp
c0025afb:	89 e5                	mov    ebp,esp
c0025afd:	83 ec 10             	sub    esp,0x10
c0025b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b03:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b09:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b0f:	0f b6 d0             	movzx  edx,al
c0025b12:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b15:	89 10                	mov    DWORD PTR [eax],edx
c0025b17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b1a:	83 c0 10             	add    eax,0x10
c0025b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b1f:	c9                   	leave  
c0025b20:	c3                   	ret    
c0025b21:	90                   	nop

c0025b22 <IOAPIC::open(int, int, void*)>:
c0025b22:	55                   	push   ebp
c0025b23:	89 e5                	mov    ebp,esp
c0025b25:	57                   	push   edi
c0025b26:	56                   	push   esi
c0025b27:	53                   	push   ebx
c0025b28:	83 ec 0c             	sub    esp,0xc
c0025b2b:	83 ec 0c             	sub    esp,0xc
c0025b2e:	68 6b d2 02 c0       	push   0xc002d26b
c0025b33:	e8 6d d3 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0025b38:	83 c4 10             	add    esp,0x10
c0025b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b41:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b50:	8b 14 85 40 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf0c0]
c0025b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b5a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b63:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b69:	8b 14 85 c0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf040]
c0025b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b73:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b7c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b85:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b8b:	0f b6 f8             	movzx  edi,al
c0025b8e:	89 d0                	mov    eax,edx
c0025b90:	ba 00 00 00 00       	mov    edx,0x0
c0025b95:	89 c1                	mov    ecx,eax
c0025b97:	80 e5 ff             	and    ch,0xff
c0025b9a:	89 cb                	mov    ebx,ecx
c0025b9c:	0f b6 f2             	movzx  esi,dl
c0025b9f:	89 d8                	mov    eax,ebx
c0025ba1:	89 f2                	mov    edx,esi
c0025ba3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ba6:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ba9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bad:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bb1:	83 e0 00             	and    eax,0x0
c0025bb4:	09 d0                	or     eax,edx
c0025bb6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bbd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bc3:	8d 50 01             	lea    edx,[eax+0x1]
c0025bc6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bc9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bcf:	0f b6 d0             	movzx  edx,al
c0025bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bd5:	83 c2 08             	add    edx,0x8
c0025bd8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025bdc:	0f b6 c9             	movzx  ecx,cl
c0025bdf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025be5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025be9:	83 ec 08             	sub    esp,0x8
c0025bec:	6a 01                	push   0x1
c0025bee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf1:	e8 04 ff ff ff       	call   c0025afa <IOAPIC::read(int)>
c0025bf6:	83 c4 10             	add    esp,0x10
c0025bf9:	c1 f8 10             	sar    eax,0x10
c0025bfc:	0f b6 c0             	movzx  eax,al
c0025bff:	8d 50 01             	lea    edx,[eax+0x1]
c0025c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c05:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c0b:	b8 00 00 00 00       	mov    eax,0x0
c0025c10:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c13:	5b                   	pop    ebx
c0025c14:	5e                   	pop    esi
c0025c15:	5f                   	pop    edi
c0025c16:	5d                   	pop    ebp
c0025c17:	c3                   	ret    

c0025c18 <IOAPIC::write(int, int)>:
c0025c18:	55                   	push   ebp
c0025c19:	89 e5                	mov    ebp,esp
c0025c1b:	83 ec 10             	sub    esp,0x10
c0025c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c27:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c2d:	0f b6 d0             	movzx  edx,al
c0025c30:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c33:	89 10                	mov    DWORD PTR [eax],edx
c0025c35:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c38:	8d 50 10             	lea    edx,[eax+0x10]
c0025c3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c3e:	89 02                	mov    DWORD PTR [edx],eax
c0025c40:	90                   	nop
c0025c41:	c9                   	leave  
c0025c42:	c3                   	ret    
c0025c43:	90                   	nop

c0025c44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c44:	55                   	push   ebp
c0025c45:	89 e5                	mov    ebp,esp
c0025c47:	53                   	push   ebx
c0025c48:	83 ec 2c             	sub    esp,0x2c
c0025c4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c4e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c51:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c54:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c5d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c60:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c63:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c66:	88 d8                	mov    al,bl
c0025c68:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c6b:	88 c8                	mov    al,cl
c0025c6d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c70:	88 d0                	mov    al,dl
c0025c72:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c75:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c79:	83 c0 08             	add    eax,0x8
c0025c7c:	01 c0                	add    eax,eax
c0025c7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c81:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c85:	83 c0 08             	add    eax,0x8
c0025c88:	01 c0                	add    eax,eax
c0025c8a:	40                   	inc    eax
c0025c8b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c91:	50                   	push   eax
c0025c92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c95:	e8 60 fe ff ff       	call   c0025afa <IOAPIC::read(int)>
c0025c9a:	83 c4 08             	add    esp,0x8
c0025c9d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ca0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ca7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025caa:	c1 e0 18             	shl    eax,0x18
c0025cad:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cb0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cb6:	52                   	push   edx
c0025cb7:	50                   	push   eax
c0025cb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cbb:	e8 58 ff ff ff       	call   c0025c18 <IOAPIC::write(int, int)>
c0025cc0:	83 c4 0c             	add    esp,0xc
c0025cc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cc6:	50                   	push   eax
c0025cc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cca:	e8 2b fe ff ff       	call   c0025afa <IOAPIC::read(int)>
c0025ccf:	83 c4 08             	add    esp,0x8
c0025cd2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025cd5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025cdc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ce3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025cea:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cee:	74 09                	je     c0025cf9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025cf0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025cf7:	eb 07                	jmp    c0025d00 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025cf9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d00:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d04:	74 09                	je     c0025d0f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d06:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d0d:	eb 07                	jmp    c0025d16 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d0f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d16:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d1d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d21:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d24:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d2a:	52                   	push   edx
c0025d2b:	50                   	push   eax
c0025d2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d2f:	e8 e4 fe ff ff       	call   c0025c18 <IOAPIC::write(int, int)>
c0025d34:	83 c4 0c             	add    esp,0xc
c0025d37:	90                   	nop
c0025d38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d3b:	c9                   	leave  
c0025d3c:	c3                   	ret    
c0025d3d:	90                   	nop

c0025d3e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d3e:	55                   	push   ebp
c0025d3f:	89 e5                	mov    ebp,esp
c0025d41:	57                   	push   edi
c0025d42:	56                   	push   esi
c0025d43:	53                   	push   ebx
c0025d44:	83 ec 2c             	sub    esp,0x2c
c0025d47:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d4a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d4d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d51:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d55:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d59:	74 5a                	je     c0025db5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d5b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d5f:	7f 44                	jg     c0025da5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d64:	05 c0 d7 02 c0       	add    eax,0xc002d7c0
c0025d69:	8a 00                	mov    al,BYTE PTR [eax]
c0025d6b:	0f b6 c0             	movzx  eax,al
c0025d6e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d74:	66 8b 84 00 e0 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf120]
c0025d7c:	0f b7 c0             	movzx  eax,ax
c0025d7f:	83 e0 02             	and    eax,0x2
c0025d82:	85 c0                	test   eax,eax
c0025d84:	74 04                	je     c0025d8a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d86:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d8d:	66 8b 84 00 e0 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf120]
c0025d95:	0f b7 c0             	movzx  eax,ax
c0025d98:	83 e0 08             	and    eax,0x8
c0025d9b:	85 c0                	test   eax,eax
c0025d9d:	74 16                	je     c0025db5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d9f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025da3:	eb 10                	jmp    c0025db5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025da5:	83 ec 0c             	sub    esp,0xc
c0025da8:	68 7c d2 02 c0       	push   0xc002d27c
c0025dad:	e8 cd 48 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0025db2:	83 c4 10             	add    esp,0x10
c0025db5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025db9:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0025dbe:	83 ec 08             	sub    esp,0x8
c0025dc1:	50                   	push   eax
c0025dc2:	68 b4 d2 02 c0       	push   0xc002d2b4
c0025dc7:	e8 d9 d0 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0025dcc:	83 c4 10             	add    esp,0x10
c0025dcf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025dd6:	a1 e0 28 03 c0       	mov    eax,ds:0xc00328e0
c0025ddb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025dde:	7d 67                	jge    c0025e47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025de0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025de3:	8b 04 85 00 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd700]
c0025dea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ded:	83 ec 08             	sub    esp,0x8
c0025df0:	52                   	push   edx
c0025df1:	50                   	push   eax
c0025df2:	e8 d1 fc ff ff       	call   c0025ac8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025df7:	83 c4 10             	add    esp,0x10
c0025dfa:	84 c0                	test   al,al
c0025dfc:	74 44                	je     c0025e42 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025dfe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e01:	8b 1c 85 00 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd700]
c0025e08:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e0c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e0f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e16:	83 c0 20             	add    eax,0x20
c0025e19:	0f b6 f0             	movzx  esi,al
c0025e1c:	b8 00 00 00 00       	mov    eax,0x0
c0025e21:	99                   	cdq    
c0025e22:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e25:	0f b6 c9             	movzx  ecx,cl
c0025e28:	83 ec 04             	sub    esp,0x4
c0025e2b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e2e:	57                   	push   edi
c0025e2f:	56                   	push   esi
c0025e30:	52                   	push   edx
c0025e31:	50                   	push   eax
c0025e32:	51                   	push   ecx
c0025e33:	53                   	push   ebx
c0025e34:	e8 0b fe ff ff       	call   c0025c44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e39:	83 c4 20             	add    esp,0x20
c0025e3c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e40:	eb 05                	jmp    c0025e47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e42:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e45:	eb 8f                	jmp    c0025dd6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e47:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e4a:	83 f0 01             	xor    eax,0x1
c0025e4d:	84 c0                	test   al,al
c0025e4f:	74 10                	je     c0025e61 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e51:	83 ec 0c             	sub    esp,0xc
c0025e54:	68 cb d2 02 c0       	push   0xc002d2cb
c0025e59:	e8 21 48 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0025e5e:	83 c4 10             	add    esp,0x10
c0025e61:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e65:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e6c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e70:	7f 65                	jg     c0025ed7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e78:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e7f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e82:	01 ca                	add    edx,ecx
c0025e84:	83 c2 54             	add    edx,0x54
c0025e87:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e8b:	85 c0                	test   eax,eax
c0025e8d:	75 43                	jne    c0025ed2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e92:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e95:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e9c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e9f:	01 ca                	add    edx,ecx
c0025ea1:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ea4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ea7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025eb1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025eb8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ebb:	01 ca                	add    edx,ecx
c0025ebd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ec3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025ec6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025eca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ecd:	83 e8 20             	sub    eax,0x20
c0025ed0:	eb 1a                	jmp    c0025eec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ed2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025ed5:	eb 95                	jmp    c0025e6c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ed7:	83 ec 0c             	sub    esp,0xc
c0025eda:	68 d8 d2 02 c0       	push   0xc002d2d8
c0025edf:	e8 9b 47 ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0025ee4:	83 c4 10             	add    esp,0x10
c0025ee7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025eec:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025eef:	5b                   	pop    ebx
c0025ef0:	5e                   	pop    esi
c0025ef1:	5f                   	pop    edi
c0025ef2:	5d                   	pop    ebp
c0025ef3:	c3                   	ret    

c0025ef4 <PIC::disable()>:
c0025ef4:	55                   	push   ebp
c0025ef5:	89 e5                	mov    ebp,esp
c0025ef7:	83 ec 10             	sub    esp,0x10
c0025efa:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f00:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f04:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f07:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f0b:	ee                   	out    dx,al
c0025f0c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f12:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f16:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f19:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f1d:	ee                   	out    dx,al
c0025f1e:	90                   	nop
c0025f1f:	c9                   	leave  
c0025f20:	c3                   	ret    
c0025f21:	90                   	nop

c0025f22 <PIC::close(int, int, void*)>:
c0025f22:	55                   	push   ebp
c0025f23:	89 e5                	mov    ebp,esp
c0025f25:	83 ec 08             	sub    esp,0x8
c0025f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f2d:	83 c0 3c             	add    eax,0x3c
c0025f30:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f32:	83 ec 0c             	sub    esp,0xc
c0025f35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f38:	ff d0                	call   eax
c0025f3a:	83 c4 10             	add    esp,0x10
c0025f3d:	b8 00 00 00 00       	mov    eax,0x0
c0025f42:	c9                   	leave  
c0025f43:	c3                   	ret    

c0025f44 <PIC::PIC()>:
c0025f44:	83 ec 0c             	sub    esp,0xc
c0025f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4b:	83 ec 08             	sub    esp,0x8
c0025f4e:	68 84 d3 02 c0       	push   0xc002d384
c0025f53:	50                   	push   eax
c0025f54:	e8 cf ec fe ff       	call   c0014c28 <InterruptController::InterruptController(char const*)>
c0025f59:	83 c4 10             	add    esp,0x10
c0025f5c:	ba b0 d3 02 c0       	mov    edx,0xc002d3b0
c0025f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f65:	89 10                	mov    DWORD PTR [eax],edx
c0025f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f71:	0f b6 d0             	movzx  edx,al
c0025f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f78:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f89:	0f b6 d0             	movzx  edx,al
c0025f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f90:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f9f:	8d 50 01             	lea    edx,[eax+0x1]
c0025fa2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fa6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fac:	0f b6 d0             	movzx  edx,al
c0025faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fb7:	83 e1 3f             	and    ecx,0x3f
c0025fba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fc8:	0f b6 d0             	movzx  edx,al
c0025fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fda:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fe0:	0f b6 d0             	movzx  edx,al
c0025fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ff6:	8d 50 01             	lea    edx,[eax+0x1]
c0025ff9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ffd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026003:	0f b6 d0             	movzx  edx,al
c0026006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002600e:	83 e1 3f             	and    ecx,0x3f
c0026011:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026015:	90                   	nop
c0026016:	83 c4 0c             	add    esp,0xc
c0026019:	c3                   	ret    

c002601a <PIC::ioWait()>:
c002601a:	eb 00                	jmp    c002601c <PIC::ioWait()+0x2>
c002601c:	eb 00                	jmp    c002601e <PIC::ioWait()+0x4>
c002601e:	90                   	nop
c002601f:	c3                   	ret    

c0026020 <PIC::getIRQReg(int)>:
c0026020:	55                   	push   ebp
c0026021:	89 e5                	mov    ebp,esp
c0026023:	83 ec 10             	sub    esp,0x10
c0026026:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026029:	0f b6 c0             	movzx  eax,al
c002602c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026032:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026035:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026038:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002603c:	ee                   	out    dx,al
c002603d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026040:	0f b6 c0             	movzx  eax,al
c0026043:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026049:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002604c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002604f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026053:	ee                   	out    dx,al
c0026054:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002605a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002605e:	89 c2                	mov    edx,eax
c0026060:	ec                   	in     al,dx
c0026061:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026064:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026067:	0f b6 c0             	movzx  eax,al
c002606a:	c1 e0 08             	shl    eax,0x8
c002606d:	89 c1                	mov    ecx,eax
c002606f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026075:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026079:	89 c2                	mov    edx,eax
c002607b:	ec                   	in     al,dx
c002607c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002607f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026082:	0f b6 c0             	movzx  eax,al
c0026085:	09 c8                	or     eax,ecx
c0026087:	c9                   	leave  
c0026088:	c3                   	ret    
c0026089:	90                   	nop

c002608a <PIC::eoi(unsigned char)>:
c002608a:	55                   	push   ebp
c002608b:	89 e5                	mov    ebp,esp
c002608d:	83 ec 14             	sub    esp,0x14
c0026090:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026093:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026096:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002609a:	75 1e                	jne    c00260ba <PIC::eoi(unsigned char)+0x30>
c002609c:	6a 0b                	push   0xb
c002609e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a1:	e8 7a ff ff ff       	call   c0026020 <PIC::getIRQReg(int)>
c00260a6:	83 c4 08             	add    esp,0x8
c00260a9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260ad:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260b1:	25 80 00 00 00       	and    eax,0x80
c00260b6:	85 c0                	test   eax,eax
c00260b8:	74 5f                	je     c0026119 <PIC::eoi(unsigned char)+0x8f>
c00260ba:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00260be:	75 2d                	jne    c00260ed <PIC::eoi(unsigned char)+0x63>
c00260c0:	6a 0b                	push   0xb
c00260c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c5:	e8 56 ff ff ff       	call   c0026020 <PIC::getIRQReg(int)>
c00260ca:	83 c4 08             	add    esp,0x8
c00260cd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00260d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00260d4:	66 85 c0             	test   ax,ax
c00260d7:	78 14                	js     c00260ed <PIC::eoi(unsigned char)+0x63>
c00260d9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00260df:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00260e3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260e6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260ea:	ee                   	out    dx,al
c00260eb:	eb 2d                	jmp    c002611a <PIC::eoi(unsigned char)+0x90>
c00260ed:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260f1:	76 12                	jbe    c0026105 <PIC::eoi(unsigned char)+0x7b>
c00260f3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260f9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00260fd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026100:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026104:	ee                   	out    dx,al
c0026105:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002610b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002610f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026112:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026116:	ee                   	out    dx,al
c0026117:	eb 01                	jmp    c002611a <PIC::eoi(unsigned char)+0x90>
c0026119:	90                   	nop
c002611a:	c9                   	leave  
c002611b:	c3                   	ret    

c002611c <PIC::remap()>:
c002611c:	55                   	push   ebp
c002611d:	89 e5                	mov    ebp,esp
c002611f:	83 ec 48             	sub    esp,0x48
c0026122:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026129:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026130:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026136:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026139:	89 c2                	mov    edx,eax
c002613b:	ec                   	in     al,dx
c002613c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002613f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026142:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026145:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002614b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002614e:	89 c2                	mov    edx,eax
c0026150:	ec                   	in     al,dx
c0026151:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026154:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026157:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002615a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026160:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026164:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026167:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002616a:	ee                   	out    dx,al
c002616b:	83 ec 0c             	sub    esp,0xc
c002616e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026171:	e8 a4 fe ff ff       	call   c002601a <PIC::ioWait()>
c0026176:	83 c4 10             	add    esp,0x10
c0026179:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002617f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026183:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026186:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026189:	ee                   	out    dx,al
c002618a:	83 ec 0c             	sub    esp,0xc
c002618d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026190:	e8 85 fe ff ff       	call   c002601a <PIC::ioWait()>
c0026195:	83 c4 10             	add    esp,0x10
c0026198:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002619b:	0f b6 c0             	movzx  eax,al
c002619e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261a4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261a7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261aa:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261ad:	ee                   	out    dx,al
c00261ae:	83 ec 0c             	sub    esp,0xc
c00261b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b4:	e8 61 fe ff ff       	call   c002601a <PIC::ioWait()>
c00261b9:	83 c4 10             	add    esp,0x10
c00261bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261bf:	0f b6 c0             	movzx  eax,al
c00261c2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00261c8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00261cb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00261ce:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00261d1:	ee                   	out    dx,al
c00261d2:	83 ec 0c             	sub    esp,0xc
c00261d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d8:	e8 3d fe ff ff       	call   c002601a <PIC::ioWait()>
c00261dd:	83 c4 10             	add    esp,0x10
c00261e0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00261e6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00261ea:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00261ed:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261f0:	ee                   	out    dx,al
c00261f1:	83 ec 0c             	sub    esp,0xc
c00261f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f7:	e8 1e fe ff ff       	call   c002601a <PIC::ioWait()>
c00261fc:	83 c4 10             	add    esp,0x10
c00261ff:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026205:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026209:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002620c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002620f:	ee                   	out    dx,al
c0026210:	83 ec 0c             	sub    esp,0xc
c0026213:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026216:	e8 ff fd ff ff       	call   c002601a <PIC::ioWait()>
c002621b:	83 c4 10             	add    esp,0x10
c002621e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026224:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026228:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002622b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002622e:	ee                   	out    dx,al
c002622f:	83 ec 0c             	sub    esp,0xc
c0026232:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026235:	e8 e0 fd ff ff       	call   c002601a <PIC::ioWait()>
c002623a:	83 c4 10             	add    esp,0x10
c002623d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026243:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026247:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002624a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002624d:	ee                   	out    dx,al
c002624e:	83 ec 0c             	sub    esp,0xc
c0026251:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026254:	e8 c1 fd ff ff       	call   c002601a <PIC::ioWait()>
c0026259:	83 c4 10             	add    esp,0x10
c002625c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026260:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026266:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026269:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002626c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002626f:	ee                   	out    dx,al
c0026270:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026274:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002627a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002627d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026280:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026283:	ee                   	out    dx,al
c0026284:	90                   	nop
c0026285:	c9                   	leave  
c0026286:	c3                   	ret    
c0026287:	90                   	nop

c0026288 <PIC::open(int, int, void*)>:
c0026288:	55                   	push   ebp
c0026289:	89 e5                	mov    ebp,esp
c002628b:	83 ec 18             	sub    esp,0x18
c002628e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026294:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026298:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002629b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002629f:	ee                   	out    dx,al
c00262a0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262a6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262aa:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262ad:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262b1:	ee                   	out    dx,al
c00262b2:	83 ec 0c             	sub    esp,0xc
c00262b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262b8:	e8 5f fe ff ff       	call   c002611c <PIC::remap()>
c00262bd:	83 c4 10             	add    esp,0x10
c00262c0:	b8 00 00 00 00       	mov    eax,0x0
c00262c5:	c9                   	leave  
c00262c6:	c3                   	ret    
c00262c7:	90                   	nop

c00262c8 <APICTimer::close(int, int, void*)>:
c00262c8:	b8 00 00 00 00       	mov    eax,0x0
c00262cd:	c3                   	ret    

c00262ce <apicTimerHandler(regs*, void*)>:
c00262ce:	83 ec 0c             	sub    esp,0xc
c00262d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00262d7:	99                   	cdq    
c00262d8:	52                   	push   edx
c00262d9:	50                   	push   eax
c00262da:	6a 00                	push   0x0
c00262dc:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262e1:	e8 8a 07 00 00       	call   c0026a70 <__udivdi3>
c00262e6:	83 c4 10             	add    esp,0x10
c00262e9:	83 ec 08             	sub    esp,0x8
c00262ec:	52                   	push   edx
c00262ed:	50                   	push   eax
c00262ee:	e8 a8 0a ff ff       	call   c0016d9b <timerHandler(unsigned long long)>
c00262f3:	83 c4 10             	add    esp,0x10
c00262f6:	90                   	nop
c00262f7:	83 c4 0c             	add    esp,0xc
c00262fa:	c3                   	ret    
c00262fb:	90                   	nop

c00262fc <APICTimer::write(int)>:
c00262fc:	53                   	push   ebx
c00262fd:	83 ec 28             	sub    esp,0x28
c0026300:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026304:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026308:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002630e:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0026313:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026319:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002631f:	83 ec 0c             	sub    esp,0xc
c0026322:	50                   	push   eax
c0026323:	e8 de f4 ff ff       	call   c0025806 <APIC::getBase()>
c0026328:	83 c4 10             	add    esp,0x10
c002632b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002632f:	a1 f0 eb 02 c0       	mov    eax,ds:0xc002ebf0
c0026334:	8b 15 f4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebf4
c002633a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002633e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026346:	05 e0 03 00 00       	add    eax,0x3e0
c002634b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026355:	05 80 03 00 00       	add    eax,0x380
c002635a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026360:	fb                   	sti    
c0026361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026365:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026369:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002636e:	83 d2 00             	adc    edx,0x0
c0026371:	89 c1                	mov    ecx,eax
c0026373:	89 d3                	mov    ebx,edx
c0026375:	a1 f0 eb 02 c0       	mov    eax,ds:0xc002ebf0
c002637a:	8b 15 f4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebf4
c0026380:	39 c8                	cmp    eax,ecx
c0026382:	89 d0                	mov    eax,edx
c0026384:	19 d8                	sbb    eax,ebx
c0026386:	73 02                	jae    c002638a <APICTimer::write(int)+0x8e>
c0026388:	eb d7                	jmp    c0026361 <APICTimer::write(int)+0x65>
c002638a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002638e:	05 20 03 00 00       	add    eax,0x320
c0026393:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002639d:	05 90 03 00 00       	add    eax,0x390
c00263a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00263a4:	f7 d0                	not    eax
c00263a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263aa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263b2:	ba 00 00 00 00       	mov    edx,0x0
c00263b7:	f7 f3                	div    ebx
c00263b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263c7:	0d 00 00 02 00       	or     eax,0x20000
c00263cc:	89 c2                	mov    edx,eax
c00263ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263d2:	05 20 03 00 00       	add    eax,0x320
c00263d7:	89 10                	mov    DWORD PTR [eax],edx
c00263d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263dd:	05 e0 03 00 00       	add    eax,0x3e0
c00263e2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00263e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263ec:	05 80 03 00 00       	add    eax,0x380
c00263f1:	89 c2                	mov    edx,eax
c00263f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263f7:	89 02                	mov    DWORD PTR [edx],eax
c00263f9:	90                   	nop
c00263fa:	83 c4 28             	add    esp,0x28
c00263fd:	5b                   	pop    ebx
c00263fe:	c3                   	ret    
c00263ff:	90                   	nop

c0026400 <APICTimer::open(int, int, void*)>:
c0026400:	57                   	push   edi
c0026401:	56                   	push   esi
c0026402:	53                   	push   ebx
c0026403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026407:	8b 00                	mov    eax,DWORD PTR [eax]
c0026409:	83 c0 24             	add    eax,0x24
c002640c:	8b 00                	mov    eax,DWORD PTR [eax]
c002640e:	83 ec 08             	sub    esp,0x8
c0026411:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026415:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026419:	ff d0                	call   eax
c002641b:	83 c4 10             	add    esp,0x10
c002641e:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0026423:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026429:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002642f:	83 ec 0c             	sub    esp,0xc
c0026432:	50                   	push   eax
c0026433:	e8 ce f3 ff ff       	call   c0025806 <APIC::getBase()>
c0026438:	83 c4 10             	add    esp,0x10
c002643b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026445:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002644b:	0f b6 f8             	movzx  edi,al
c002644e:	89 d0                	mov    eax,edx
c0026450:	ba 00 00 00 00       	mov    edx,0x0
c0026455:	89 c1                	mov    ecx,eax
c0026457:	80 e5 ff             	and    ch,0xff
c002645a:	89 cb                	mov    ebx,ecx
c002645c:	0f b6 f2             	movzx  esi,dl
c002645f:	89 d8                	mov    eax,ebx
c0026461:	89 f2                	mov    edx,esi
c0026463:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026467:	8d 5f 08             	lea    ebx,[edi+0x8]
c002646a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002646e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026472:	83 e0 00             	and    eax,0x0
c0026475:	09 d0                	or     eax,edx
c0026477:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002647b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026485:	8d 50 01             	lea    edx,[eax+0x1]
c0026488:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002648c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026492:	0f b6 d0             	movzx  edx,al
c0026495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026499:	83 c2 08             	add    edx,0x8
c002649c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264a0:	0f b6 c9             	movzx  ecx,cl
c00264a3:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264a9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264b5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00264bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264c3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00264c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264cd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00264d3:	83 ec 0c             	sub    esp,0xc
c00264d6:	51                   	push   ecx
c00264d7:	6a 01                	push   0x1
c00264d9:	68 ce 62 02 c0       	push   0xc00262ce
c00264de:	52                   	push   edx
c00264df:	50                   	push   eax
c00264e0:	e8 6b dd fe ff       	call   c0014250 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264e5:	83 c4 20             	add    esp,0x20
c00264e8:	89 c2                	mov    edx,eax
c00264ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ee:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264f4:	b8 00 00 00 00       	mov    eax,0x0
c00264f9:	5b                   	pop    ebx
c00264fa:	5e                   	pop    esi
c00264fb:	5f                   	pop    edi
c00264fc:	c3                   	ret    
c00264fd:	90                   	nop

c00264fe <APICTimer::APICTimer()>:
c00264fe:	83 ec 0c             	sub    esp,0xc
c0026501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026505:	83 ec 08             	sub    esp,0x8
c0026508:	68 f0 d3 02 c0       	push   0xc002d3f0
c002650d:	50                   	push   eax
c002650e:	e8 f9 07 ff ff       	call   c0016d0c <Timer::Timer(char const*)>
c0026513:	83 c4 10             	add    esp,0x10
c0026516:	ba 04 d4 02 c0       	mov    edx,0xc002d404
c002651b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651f:	89 10                	mov    DWORD PTR [eax],edx
c0026521:	90                   	nop
c0026522:	83 c4 0c             	add    esp,0xc
c0026525:	c3                   	ret    

c0026526 <PIT::write(int)>:
c0026526:	83 ec 10             	sub    esp,0x10
c0026529:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002652d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026531:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026537:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002653b:	a3 24 29 03 c0       	mov    ds:0xc0032924,eax
c0026540:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026545:	99                   	cdq    
c0026546:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002654a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002654e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026555:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002655a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002655e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026563:	ee                   	out    dx,al
c0026564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026568:	0f b6 c0             	movzx  eax,al
c002656b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026572:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026576:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002657a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002657f:	ee                   	out    dx,al
c0026580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026584:	c1 f8 08             	sar    eax,0x8
c0026587:	0f b6 c0             	movzx  eax,al
c002658a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026591:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026595:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026599:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002659e:	ee                   	out    dx,al
c002659f:	90                   	nop
c00265a0:	83 c4 10             	add    esp,0x10
c00265a3:	c3                   	ret    

c00265a4 <pitHandler(regs*, void*)>:
c00265a4:	83 ec 0c             	sub    esp,0xc
c00265a7:	a1 24 29 03 c0       	mov    eax,ds:0xc0032924
c00265ac:	99                   	cdq    
c00265ad:	52                   	push   edx
c00265ae:	50                   	push   eax
c00265af:	6a 00                	push   0x0
c00265b1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265b6:	e8 b5 04 00 00       	call   c0026a70 <__udivdi3>
c00265bb:	83 c4 10             	add    esp,0x10
c00265be:	83 ec 08             	sub    esp,0x8
c00265c1:	52                   	push   edx
c00265c2:	50                   	push   eax
c00265c3:	e8 d3 07 ff ff       	call   c0016d9b <timerHandler(unsigned long long)>
c00265c8:	83 c4 10             	add    esp,0x10
c00265cb:	90                   	nop
c00265cc:	83 c4 0c             	add    esp,0xc
c00265cf:	c3                   	ret    

c00265d0 <PIT::open(int, int, void*)>:
c00265d0:	83 ec 0c             	sub    esp,0xc
c00265d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00265d9:	83 c0 24             	add    eax,0x24
c00265dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00265de:	83 ec 08             	sub    esp,0x8
c00265e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265e9:	ff d0                	call   eax
c00265eb:	83 c4 10             	add    esp,0x10
c00265ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f2:	83 ec 0c             	sub    esp,0xc
c00265f5:	6a 00                	push   0x0
c00265f7:	6a 01                	push   0x1
c00265f9:	68 a4 65 02 c0       	push   0xc00265a4
c00265fe:	6a 00                	push   0x0
c0026600:	50                   	push   eax
c0026601:	e8 4a dc fe ff       	call   c0014250 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026606:	83 c4 20             	add    esp,0x20
c0026609:	89 c2                	mov    edx,eax
c002660b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026615:	b8 00 00 00 00       	mov    eax,0x0
c002661a:	83 c4 0c             	add    esp,0xc
c002661d:	c3                   	ret    

c002661e <PIT::close(int, int, void*)>:
c002661e:	83 ec 0c             	sub    esp,0xc
c0026621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026625:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002662f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026633:	6a 01                	push   0x1
c0026635:	68 a4 65 02 c0       	push   0xc00265a4
c002663a:	6a 00                	push   0x0
c002663c:	50                   	push   eax
c002663d:	e8 4c dc fe ff       	call   c001428e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026642:	83 c4 10             	add    esp,0x10
c0026645:	b8 00 00 00 00       	mov    eax,0x0
c002664a:	83 c4 0c             	add    esp,0xc
c002664d:	c3                   	ret    

c002664e <PIT::PIT()>:
c002664e:	83 ec 0c             	sub    esp,0xc
c0026651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026655:	83 ec 08             	sub    esp,0x8
c0026658:	68 2c d4 02 c0       	push   0xc002d42c
c002665d:	50                   	push   eax
c002665e:	e8 a9 06 ff ff       	call   c0016d0c <Timer::Timer(char const*)>
c0026663:	83 c4 10             	add    esp,0x10
c0026666:	ba 54 d4 02 c0       	mov    edx,0xc002d454
c002666b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666f:	89 10                	mov    DWORD PTR [eax],edx
c0026671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026675:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002667b:	0f b6 d0             	movzx  edx,al
c002667e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026682:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002668d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026693:	0f b6 d0             	movzx  edx,al
c0026696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002669f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266a9:	8d 50 01             	lea    edx,[eax+0x1]
c00266ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266b0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266b6:	0f b6 d0             	movzx  edx,al
c00266b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266c1:	83 e1 3f             	and    ecx,0x3f
c00266c4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266c8:	90                   	nop
c00266c9:	83 c4 0c             	add    esp,0xc
c00266cc:	c3                   	ret    
c00266cd:	66 90                	xchg   ax,ax
c00266cf:	90                   	nop

c00266d0 <avxDetect>:
c00266d0:	b8 00 00 00 00       	mov    eax,0x0
c00266d5:	c3                   	ret    

c00266d6 <avxSave>:
c00266d6:	c3                   	ret    

c00266d7 <avxLoad>:
c00266d7:	c3                   	ret    

c00266d8 <avxInit>:
c00266d8:	c3                   	ret    

c00266d9 <avxClose>:
c00266d9:	c3                   	ret    

c00266da <wouldSheSayYes>:
c00266da:	c3                   	ret    
c00266db:	49                   	dec    ecx
c00266dc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00266e0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00266e4:	75 20                	jne    c0026706 <sseDetect.noSSE+0x1>
c00266e6:	4e                   	dec    esi
c00266e7:	79 61                	jns    c002674a <x87Detect+0x14>
c00266e9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00266ee:	66 90                	xchg   ax,ax

c00266f0 <absolutelyNoChanceInHell>:
c00266f0:	b8 01 00 00 00       	mov    eax,0x1
c00266f5:	0f a2                	cpuid  
c00266f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00266fd:	74 06                	je     c0026705 <sseDetect.noSSE>
c00266ff:	b8 01 00 00 00       	mov    eax,0x1
c0026704:	c3                   	ret    

c0026705 <sseDetect.noSSE>:
c0026705:	31 c0                	xor    eax,eax
c0026707:	c3                   	ret    

c0026708 <sseSave>:
c0026708:	0f ae 44 24 08       	fxsave [esp+0x8]
c002670d:	c3                   	ret    

c002670e <sseLoad>:
c002670e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026713:	c3                   	ret    

c0026714 <sseInit>:
c0026714:	e8 47 00 00 00       	call   c0026760 <x87Init>
c0026719:	0f 20 e0             	mov    eax,cr4
c002671c:	66 0d 00 06          	or     ax,0x600
c0026720:	0f 22 e0             	mov    cr4,eax
c0026723:	c3                   	ret    

c0026724 <sseClose>:
c0026724:	c3                   	ret    
c0026725:	66 90                	xchg   ax,ax
c0026727:	66 90                	xchg   ax,ax
c0026729:	66 90                	xchg   ax,ax
c002672b:	66 90                	xchg   ax,ax
c002672d:	66 90                	xchg   ax,ax
c002672f:	90                   	nop

c0026730 <value_37F>:
c0026730:	7f 03                	jg     c0026735 <value_37A+0x1>

c0026732 <value_37E>:
c0026732:	7e 03                	jle    c0026737 <x87Detect+0x1>

c0026734 <value_37A>:
c0026734:	7a 03                	jp     c0026739 <x87Detect+0x3>

c0026736 <x87Detect>:
c0026736:	b8 01 00 00 00       	mov    eax,0x1
c002673b:	0f a2                	cpuid  
c002673d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026743:	74 06                	je     c002674b <x87Detect.nox87>
c0026745:	b8 01 00 00 00       	mov    eax,0x1
c002674a:	c3                   	ret    

c002674b <x87Detect.nox87>:
c002674b:	b8 00 00 00 00       	mov    eax,0x0
c0026750:	c3                   	ret    

c0026751 <x87Save>:
c0026751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026755:	9b dd 30             	fsave  [eax]
c0026758:	c3                   	ret    

c0026759 <x87Load>:
c0026759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002675d:	dd 20                	frstor [eax]
c002675f:	c3                   	ret    

c0026760 <x87Init>:
c0026760:	9b db e3             	finit  
c0026763:	0f 20 c0             	mov    eax,cr0
c0026766:	66 25 fb ff          	and    ax,0xfffb
c002676a:	66 0d 22 00          	or     ax,0x22
c002676e:	0f 22 c0             	mov    cr0,eax
c0026771:	0f 06                	clts   
c0026773:	d9 2d 34 67 02 c0    	fldcw  WORD PTR ds:0xc0026734
c0026779:	c3                   	ret    

c002677a <x87Close>:
c002677a:	c3                   	ret    
c002677b:	90                   	nop

c002677c <__do_global_ctors_aux>:
c002677c:	a1 d8 92 02 c0       	mov    eax,ds:0xc00292d8
c0026781:	83 f8 ff             	cmp    eax,0xffffffff
c0026784:	74 1a                	je     c00267a0 <__do_global_ctors_aux+0x24>
c0026786:	55                   	push   ebp
c0026787:	89 e5                	mov    ebp,esp
c0026789:	53                   	push   ebx
c002678a:	52                   	push   edx
c002678b:	bb d8 92 02 c0       	mov    ebx,0xc00292d8
c0026790:	ff d0                	call   eax
c0026792:	83 eb 04             	sub    ebx,0x4
c0026795:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026797:	83 f8 ff             	cmp    eax,0xffffffff
c002679a:	75 f4                	jne    c0026790 <__do_global_ctors_aux+0x14>
c002679c:	58                   	pop    eax
c002679d:	5b                   	pop    ebx
c002679e:	5d                   	pop    ebp
c002679f:	c3                   	ret    
c00267a0:	c3                   	ret    
c00267a1:	66 90                	xchg   ax,ax
c00267a3:	90                   	nop

c00267a4 <__divdi3>:
c00267a4:	55                   	push   ebp
c00267a5:	57                   	push   edi
c00267a6:	56                   	push   esi
c00267a7:	53                   	push   ebx
c00267a8:	83 ec 1c             	sub    esp,0x1c
c00267ab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00267af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00267be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267c2:	85 db                	test   ebx,ebx
c00267c4:	0f 88 8e 00 00 00    	js     c0026858 <__divdi3+0xb4>
c00267ca:	89 dd                	mov    ebp,ebx
c00267cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00267d4:	89 d3                	mov    ebx,edx
c00267d6:	85 d2                	test   edx,edx
c00267d8:	79 0d                	jns    c00267e7 <__divdi3+0x43>
c00267da:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00267de:	f7 d8                	neg    eax
c00267e0:	83 d2 00             	adc    edx,0x0
c00267e3:	f7 da                	neg    edx
c00267e5:	89 d3                	mov    ebx,edx
c00267e7:	89 c7                	mov    edi,eax
c00267e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267ec:	85 db                	test   ebx,ebx
c00267ee:	75 48                	jne    c0026838 <__divdi3+0x94>
c00267f0:	39 ef                	cmp    edi,ebp
c00267f2:	76 24                	jbe    c0026818 <__divdi3+0x74>
c00267f4:	89 ea                	mov    edx,ebp
c00267f6:	f7 f7                	div    edi
c00267f8:	89 c1                	mov    ecx,eax
c00267fa:	31 f6                	xor    esi,esi
c00267fc:	89 c8                	mov    eax,ecx
c00267fe:	89 f2                	mov    edx,esi
c0026800:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026804:	85 c9                	test   ecx,ecx
c0026806:	74 07                	je     c002680f <__divdi3+0x6b>
c0026808:	f7 d8                	neg    eax
c002680a:	83 d2 00             	adc    edx,0x0
c002680d:	f7 da                	neg    edx
c002680f:	83 c4 1c             	add    esp,0x1c
c0026812:	5b                   	pop    ebx
c0026813:	5e                   	pop    esi
c0026814:	5f                   	pop    edi
c0026815:	5d                   	pop    ebp
c0026816:	c3                   	ret    
c0026817:	90                   	nop
c0026818:	85 ff                	test   edi,edi
c002681a:	75 0b                	jne    c0026827 <__divdi3+0x83>
c002681c:	b8 01 00 00 00       	mov    eax,0x1
c0026821:	31 d2                	xor    edx,edx
c0026823:	f7 f3                	div    ebx
c0026825:	89 c7                	mov    edi,eax
c0026827:	31 d2                	xor    edx,edx
c0026829:	89 e8                	mov    eax,ebp
c002682b:	f7 f7                	div    edi
c002682d:	89 c6                	mov    esi,eax
c002682f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026832:	f7 f7                	div    edi
c0026834:	89 c1                	mov    ecx,eax
c0026836:	eb c4                	jmp    c00267fc <__divdi3+0x58>
c0026838:	39 eb                	cmp    ebx,ebp
c002683a:	77 3c                	ja     c0026878 <__divdi3+0xd4>
c002683c:	0f bd f3             	bsr    esi,ebx
c002683f:	83 f6 1f             	xor    esi,0x1f
c0026842:	75 40                	jne    c0026884 <__divdi3+0xe0>
c0026844:	39 eb                	cmp    ebx,ebp
c0026846:	72 09                	jb     c0026851 <__divdi3+0xad>
c0026848:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002684b:	0f 87 97 00 00 00    	ja     c00268e8 <__divdi3+0x144>
c0026851:	b9 01 00 00 00       	mov    ecx,0x1
c0026856:	eb a4                	jmp    c00267fc <__divdi3+0x58>
c0026858:	f7 d9                	neg    ecx
c002685a:	83 d3 00             	adc    ebx,0x0
c002685d:	f7 db                	neg    ebx
c002685f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026862:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026866:	89 dd                	mov    ebp,ebx
c0026868:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026870:	e9 5f ff ff ff       	jmp    c00267d4 <__divdi3+0x30>
c0026875:	8d 76 00             	lea    esi,[esi+0x0]
c0026878:	31 f6                	xor    esi,esi
c002687a:	31 c9                	xor    ecx,ecx
c002687c:	e9 7b ff ff ff       	jmp    c00267fc <__divdi3+0x58>
c0026881:	8d 76 00             	lea    esi,[esi+0x0]
c0026884:	b8 20 00 00 00       	mov    eax,0x20
c0026889:	29 f0                	sub    eax,esi
c002688b:	89 f1                	mov    ecx,esi
c002688d:	d3 e3                	shl    ebx,cl
c002688f:	89 fa                	mov    edx,edi
c0026891:	88 c1                	mov    cl,al
c0026893:	d3 ea                	shr    edx,cl
c0026895:	09 da                	or     edx,ebx
c0026897:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002689b:	89 f1                	mov    ecx,esi
c002689d:	d3 e7                	shl    edi,cl
c002689f:	89 eb                	mov    ebx,ebp
c00268a1:	88 c1                	mov    cl,al
c00268a3:	d3 eb                	shr    ebx,cl
c00268a5:	89 f1                	mov    ecx,esi
c00268a7:	d3 e5                	shl    ebp,cl
c00268a9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00268ac:	88 c1                	mov    cl,al
c00268ae:	d3 ea                	shr    edx,cl
c00268b0:	09 d5                	or     ebp,edx
c00268b2:	89 e8                	mov    eax,ebp
c00268b4:	89 da                	mov    edx,ebx
c00268b6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00268ba:	89 d3                	mov    ebx,edx
c00268bc:	89 c5                	mov    ebp,eax
c00268be:	f7 e7                	mul    edi
c00268c0:	39 d3                	cmp    ebx,edx
c00268c2:	72 18                	jb     c00268dc <__divdi3+0x138>
c00268c4:	74 0a                	je     c00268d0 <__divdi3+0x12c>
c00268c6:	89 e9                	mov    ecx,ebp
c00268c8:	31 f6                	xor    esi,esi
c00268ca:	e9 2d ff ff ff       	jmp    c00267fc <__divdi3+0x58>
c00268cf:	90                   	nop
c00268d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00268d3:	89 f1                	mov    ecx,esi
c00268d5:	d3 e7                	shl    edi,cl
c00268d7:	39 c7                	cmp    edi,eax
c00268d9:	73 eb                	jae    c00268c6 <__divdi3+0x122>
c00268db:	90                   	nop
c00268dc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00268df:	31 f6                	xor    esi,esi
c00268e1:	e9 16 ff ff ff       	jmp    c00267fc <__divdi3+0x58>
c00268e6:	66 90                	xchg   ax,ax
c00268e8:	31 c9                	xor    ecx,ecx
c00268ea:	e9 0d ff ff ff       	jmp    c00267fc <__divdi3+0x58>
c00268ef:	90                   	nop

c00268f0 <__moddi3>:
c00268f0:	55                   	push   ebp
c00268f1:	57                   	push   edi
c00268f2:	56                   	push   esi
c00268f3:	53                   	push   ebx
c00268f4:	83 ec 2c             	sub    esp,0x2c
c00268f7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00268fb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00268ff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026903:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026907:	85 db                	test   ebx,ebx
c0026909:	0f 88 85 00 00 00    	js     c0026994 <__moddi3+0xa4>
c002690f:	89 de                	mov    esi,ebx
c0026911:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026919:	89 d7                	mov    edi,edx
c002691b:	85 d2                	test   edx,edx
c002691d:	79 09                	jns    c0026928 <__moddi3+0x38>
c002691f:	f7 d8                	neg    eax
c0026921:	83 d2 00             	adc    edx,0x0
c0026924:	f7 da                	neg    edx
c0026926:	89 d7                	mov    edi,edx
c0026928:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002692c:	89 cd                	mov    ebp,ecx
c002692e:	85 ff                	test   edi,edi
c0026930:	75 52                	jne    c0026984 <__moddi3+0x94>
c0026932:	89 c3                	mov    ebx,eax
c0026934:	39 f0                	cmp    eax,esi
c0026936:	76 24                	jbe    c002695c <__moddi3+0x6c>
c0026938:	89 c8                	mov    eax,ecx
c002693a:	89 f2                	mov    edx,esi
c002693c:	f7 f3                	div    ebx
c002693e:	89 d6                	mov    esi,edx
c0026940:	89 f0                	mov    eax,esi
c0026942:	31 d2                	xor    edx,edx
c0026944:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026948:	85 c9                	test   ecx,ecx
c002694a:	74 07                	je     c0026953 <__moddi3+0x63>
c002694c:	f7 d8                	neg    eax
c002694e:	83 d2 00             	adc    edx,0x0
c0026951:	f7 da                	neg    edx
c0026953:	83 c4 2c             	add    esp,0x2c
c0026956:	5b                   	pop    ebx
c0026957:	5e                   	pop    esi
c0026958:	5f                   	pop    edi
c0026959:	5d                   	pop    ebp
c002695a:	c3                   	ret    
c002695b:	90                   	nop
c002695c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026960:	85 db                	test   ebx,ebx
c0026962:	75 0d                	jne    c0026971 <__moddi3+0x81>
c0026964:	b8 01 00 00 00       	mov    eax,0x1
c0026969:	31 d2                	xor    edx,edx
c002696b:	f7 f7                	div    edi
c002696d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026971:	89 f0                	mov    eax,esi
c0026973:	31 d2                	xor    edx,edx
c0026975:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026979:	f7 f7                	div    edi
c002697b:	89 e8                	mov    eax,ebp
c002697d:	f7 f7                	div    edi
c002697f:	89 d6                	mov    esi,edx
c0026981:	eb bd                	jmp    c0026940 <__moddi3+0x50>
c0026983:	90                   	nop
c0026984:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026988:	39 f7                	cmp    edi,esi
c002698a:	76 20                	jbe    c00269ac <__moddi3+0xbc>
c002698c:	89 c8                	mov    eax,ecx
c002698e:	89 f2                	mov    edx,esi
c0026990:	eb b2                	jmp    c0026944 <__moddi3+0x54>
c0026992:	66 90                	xchg   ax,ax
c0026994:	f7 d9                	neg    ecx
c0026996:	83 d3 00             	adc    ebx,0x0
c0026999:	f7 db                	neg    ebx
c002699b:	89 de                	mov    esi,ebx
c002699d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269a5:	e9 6f ff ff ff       	jmp    c0026919 <__moddi3+0x29>
c00269aa:	66 90                	xchg   ax,ax
c00269ac:	0f bd c7             	bsr    eax,edi
c00269af:	83 f0 1f             	xor    eax,0x1f
c00269b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00269b6:	75 24                	jne    c00269dc <__moddi3+0xec>
c00269b8:	39 f7                	cmp    edi,esi
c00269ba:	72 06                	jb     c00269c2 <__moddi3+0xd2>
c00269bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00269c0:	77 0c                	ja     c00269ce <__moddi3+0xde>
c00269c2:	89 e9                	mov    ecx,ebp
c00269c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00269c8:	19 fe                	sbb    esi,edi
c00269ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269d2:	89 f2                	mov    edx,esi
c00269d4:	e9 6b ff ff ff       	jmp    c0026944 <__moddi3+0x54>
c00269d9:	8d 76 00             	lea    esi,[esi+0x0]
c00269dc:	b8 20 00 00 00       	mov    eax,0x20
c00269e1:	89 c2                	mov    edx,eax
c00269e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00269e7:	29 da                	sub    edx,ebx
c00269e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00269ed:	88 d9                	mov    cl,bl
c00269ef:	d3 e7                	shl    edi,cl
c00269f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00269f5:	88 d1                	mov    cl,dl
c00269f7:	d3 e8                	shr    eax,cl
c00269f9:	09 c7                	or     edi,eax
c00269fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00269ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a03:	89 d8                	mov    eax,ebx
c0026a05:	88 d9                	mov    cl,bl
c0026a07:	d3 e7                	shl    edi,cl
c0026a09:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a0d:	89 f3                	mov    ebx,esi
c0026a0f:	88 d1                	mov    cl,dl
c0026a11:	d3 eb                	shr    ebx,cl
c0026a13:	89 c7                	mov    edi,eax
c0026a15:	88 c1                	mov    cl,al
c0026a17:	d3 e6                	shl    esi,cl
c0026a19:	89 e8                	mov    eax,ebp
c0026a1b:	88 d1                	mov    cl,dl
c0026a1d:	d3 e8                	shr    eax,cl
c0026a1f:	09 f0                	or     eax,esi
c0026a21:	89 f9                	mov    ecx,edi
c0026a23:	d3 e5                	shl    ebp,cl
c0026a25:	89 da                	mov    edx,ebx
c0026a27:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a2b:	89 d3                	mov    ebx,edx
c0026a2d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a31:	89 c6                	mov    esi,eax
c0026a33:	89 d1                	mov    ecx,edx
c0026a35:	39 d3                	cmp    ebx,edx
c0026a37:	72 27                	jb     c0026a60 <__moddi3+0x170>
c0026a39:	74 21                	je     c0026a5c <__moddi3+0x16c>
c0026a3b:	29 f5                	sub    ebp,esi
c0026a3d:	19 cb                	sbb    ebx,ecx
c0026a3f:	89 de                	mov    esi,ebx
c0026a41:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a45:	d3 e6                	shl    esi,cl
c0026a47:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a4b:	89 f9                	mov    ecx,edi
c0026a4d:	d3 ed                	shr    ebp,cl
c0026a4f:	09 ee                	or     esi,ebp
c0026a51:	89 f0                	mov    eax,esi
c0026a53:	d3 eb                	shr    ebx,cl
c0026a55:	89 da                	mov    edx,ebx
c0026a57:	e9 e8 fe ff ff       	jmp    c0026944 <__moddi3+0x54>
c0026a5c:	39 c5                	cmp    ebp,eax
c0026a5e:	73 db                	jae    c0026a3b <__moddi3+0x14b>
c0026a60:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a64:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a68:	89 d1                	mov    ecx,edx
c0026a6a:	89 c6                	mov    esi,eax
c0026a6c:	eb cd                	jmp    c0026a3b <__moddi3+0x14b>
c0026a6e:	66 90                	xchg   ax,ax

c0026a70 <__udivdi3>:
c0026a70:	55                   	push   ebp
c0026a71:	57                   	push   edi
c0026a72:	56                   	push   esi
c0026a73:	53                   	push   ebx
c0026a74:	83 ec 1c             	sub    esp,0x1c
c0026a77:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a7b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a7f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a83:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a87:	85 d2                	test   edx,edx
c0026a89:	75 41                	jne    c0026acc <__udivdi3+0x5c>
c0026a8b:	39 f7                	cmp    edi,esi
c0026a8d:	76 15                	jbe    c0026aa4 <__udivdi3+0x34>
c0026a8f:	89 e8                	mov    eax,ebp
c0026a91:	89 f2                	mov    edx,esi
c0026a93:	f7 f7                	div    edi
c0026a95:	31 db                	xor    ebx,ebx
c0026a97:	89 da                	mov    edx,ebx
c0026a99:	83 c4 1c             	add    esp,0x1c
c0026a9c:	5b                   	pop    ebx
c0026a9d:	5e                   	pop    esi
c0026a9e:	5f                   	pop    edi
c0026a9f:	5d                   	pop    ebp
c0026aa0:	c3                   	ret    
c0026aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0026aa4:	89 f9                	mov    ecx,edi
c0026aa6:	85 ff                	test   edi,edi
c0026aa8:	75 0b                	jne    c0026ab5 <__udivdi3+0x45>
c0026aaa:	b8 01 00 00 00       	mov    eax,0x1
c0026aaf:	31 d2                	xor    edx,edx
c0026ab1:	f7 f7                	div    edi
c0026ab3:	89 c1                	mov    ecx,eax
c0026ab5:	31 d2                	xor    edx,edx
c0026ab7:	89 f0                	mov    eax,esi
c0026ab9:	f7 f1                	div    ecx
c0026abb:	89 c3                	mov    ebx,eax
c0026abd:	89 e8                	mov    eax,ebp
c0026abf:	f7 f1                	div    ecx
c0026ac1:	89 da                	mov    edx,ebx
c0026ac3:	83 c4 1c             	add    esp,0x1c
c0026ac6:	5b                   	pop    ebx
c0026ac7:	5e                   	pop    esi
c0026ac8:	5f                   	pop    edi
c0026ac9:	5d                   	pop    ebp
c0026aca:	c3                   	ret    
c0026acb:	90                   	nop
c0026acc:	39 f2                	cmp    edx,esi
c0026ace:	77 1c                	ja     c0026aec <__udivdi3+0x7c>
c0026ad0:	0f bd da             	bsr    ebx,edx
c0026ad3:	83 f3 1f             	xor    ebx,0x1f
c0026ad6:	75 24                	jne    c0026afc <__udivdi3+0x8c>
c0026ad8:	39 f2                	cmp    edx,esi
c0026ada:	72 08                	jb     c0026ae4 <__udivdi3+0x74>
c0026adc:	39 ef                	cmp    edi,ebp
c0026ade:	0f 87 84 00 00 00    	ja     c0026b68 <__udivdi3+0xf8>
c0026ae4:	b8 01 00 00 00       	mov    eax,0x1
c0026ae9:	eb ac                	jmp    c0026a97 <__udivdi3+0x27>
c0026aeb:	90                   	nop
c0026aec:	31 db                	xor    ebx,ebx
c0026aee:	31 c0                	xor    eax,eax
c0026af0:	89 da                	mov    edx,ebx
c0026af2:	83 c4 1c             	add    esp,0x1c
c0026af5:	5b                   	pop    ebx
c0026af6:	5e                   	pop    esi
c0026af7:	5f                   	pop    edi
c0026af8:	5d                   	pop    ebp
c0026af9:	c3                   	ret    
c0026afa:	66 90                	xchg   ax,ax
c0026afc:	b8 20 00 00 00       	mov    eax,0x20
c0026b01:	29 d8                	sub    eax,ebx
c0026b03:	88 d9                	mov    cl,bl
c0026b05:	d3 e2                	shl    edx,cl
c0026b07:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b0b:	89 fa                	mov    edx,edi
c0026b0d:	88 c1                	mov    cl,al
c0026b0f:	d3 ea                	shr    edx,cl
c0026b11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b15:	09 d1                	or     ecx,edx
c0026b17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b1b:	88 d9                	mov    cl,bl
c0026b1d:	d3 e7                	shl    edi,cl
c0026b1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b23:	89 f7                	mov    edi,esi
c0026b25:	88 c1                	mov    cl,al
c0026b27:	d3 ef                	shr    edi,cl
c0026b29:	88 d9                	mov    cl,bl
c0026b2b:	d3 e6                	shl    esi,cl
c0026b2d:	89 ea                	mov    edx,ebp
c0026b2f:	88 c1                	mov    cl,al
c0026b31:	d3 ea                	shr    edx,cl
c0026b33:	09 d6                	or     esi,edx
c0026b35:	89 f0                	mov    eax,esi
c0026b37:	89 fa                	mov    edx,edi
c0026b39:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b3d:	89 d7                	mov    edi,edx
c0026b3f:	89 c6                	mov    esi,eax
c0026b41:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b45:	39 d7                	cmp    edi,edx
c0026b47:	72 13                	jb     c0026b5c <__udivdi3+0xec>
c0026b49:	74 09                	je     c0026b54 <__udivdi3+0xe4>
c0026b4b:	89 f0                	mov    eax,esi
c0026b4d:	31 db                	xor    ebx,ebx
c0026b4f:	e9 43 ff ff ff       	jmp    c0026a97 <__udivdi3+0x27>
c0026b54:	88 d9                	mov    cl,bl
c0026b56:	d3 e5                	shl    ebp,cl
c0026b58:	39 c5                	cmp    ebp,eax
c0026b5a:	73 ef                	jae    c0026b4b <__udivdi3+0xdb>
c0026b5c:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b5f:	31 db                	xor    ebx,ebx
c0026b61:	e9 31 ff ff ff       	jmp    c0026a97 <__udivdi3+0x27>
c0026b66:	66 90                	xchg   ax,ax
c0026b68:	31 c0                	xor    eax,eax
c0026b6a:	e9 28 ff ff ff       	jmp    c0026a97 <__udivdi3+0x27>
c0026b6f:	90                   	nop

c0026b70 <__umoddi3>:
c0026b70:	55                   	push   ebp
c0026b71:	57                   	push   edi
c0026b72:	56                   	push   esi
c0026b73:	53                   	push   ebx
c0026b74:	83 ec 1c             	sub    esp,0x1c
c0026b77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b7f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b87:	89 da                	mov    edx,ebx
c0026b89:	85 c0                	test   eax,eax
c0026b8b:	75 37                	jne    c0026bc4 <__umoddi3+0x54>
c0026b8d:	39 df                	cmp    edi,ebx
c0026b8f:	76 13                	jbe    c0026ba4 <__umoddi3+0x34>
c0026b91:	89 f0                	mov    eax,esi
c0026b93:	f7 f7                	div    edi
c0026b95:	89 d0                	mov    eax,edx
c0026b97:	31 d2                	xor    edx,edx
c0026b99:	83 c4 1c             	add    esp,0x1c
c0026b9c:	5b                   	pop    ebx
c0026b9d:	5e                   	pop    esi
c0026b9e:	5f                   	pop    edi
c0026b9f:	5d                   	pop    ebp
c0026ba0:	c3                   	ret    
c0026ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0026ba4:	89 fd                	mov    ebp,edi
c0026ba6:	85 ff                	test   edi,edi
c0026ba8:	75 0b                	jne    c0026bb5 <__umoddi3+0x45>
c0026baa:	b8 01 00 00 00       	mov    eax,0x1
c0026baf:	31 d2                	xor    edx,edx
c0026bb1:	f7 f7                	div    edi
c0026bb3:	89 c5                	mov    ebp,eax
c0026bb5:	89 d8                	mov    eax,ebx
c0026bb7:	31 d2                	xor    edx,edx
c0026bb9:	f7 f5                	div    ebp
c0026bbb:	89 f0                	mov    eax,esi
c0026bbd:	f7 f5                	div    ebp
c0026bbf:	89 d0                	mov    eax,edx
c0026bc1:	eb d4                	jmp    c0026b97 <__umoddi3+0x27>
c0026bc3:	90                   	nop
c0026bc4:	89 f1                	mov    ecx,esi
c0026bc6:	39 d8                	cmp    eax,ebx
c0026bc8:	76 0a                	jbe    c0026bd4 <__umoddi3+0x64>
c0026bca:	89 f0                	mov    eax,esi
c0026bcc:	83 c4 1c             	add    esp,0x1c
c0026bcf:	5b                   	pop    ebx
c0026bd0:	5e                   	pop    esi
c0026bd1:	5f                   	pop    edi
c0026bd2:	5d                   	pop    ebp
c0026bd3:	c3                   	ret    
c0026bd4:	0f bd e8             	bsr    ebp,eax
c0026bd7:	83 f5 1f             	xor    ebp,0x1f
c0026bda:	75 1c                	jne    c0026bf8 <__umoddi3+0x88>
c0026bdc:	39 d8                	cmp    eax,ebx
c0026bde:	72 04                	jb     c0026be4 <__umoddi3+0x74>
c0026be0:	39 f7                	cmp    edi,esi
c0026be2:	77 08                	ja     c0026bec <__umoddi3+0x7c>
c0026be4:	89 da                	mov    edx,ebx
c0026be6:	29 fe                	sub    esi,edi
c0026be8:	19 c2                	sbb    edx,eax
c0026bea:	89 f1                	mov    ecx,esi
c0026bec:	89 c8                	mov    eax,ecx
c0026bee:	83 c4 1c             	add    esp,0x1c
c0026bf1:	5b                   	pop    ebx
c0026bf2:	5e                   	pop    esi
c0026bf3:	5f                   	pop    edi
c0026bf4:	5d                   	pop    ebp
c0026bf5:	c3                   	ret    
c0026bf6:	66 90                	xchg   ax,ax
c0026bf8:	ba 20 00 00 00       	mov    edx,0x20
c0026bfd:	29 ea                	sub    edx,ebp
c0026bff:	89 e9                	mov    ecx,ebp
c0026c01:	d3 e0                	shl    eax,cl
c0026c03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c07:	89 f8                	mov    eax,edi
c0026c09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c0d:	88 d1                	mov    cl,dl
c0026c0f:	d3 e8                	shr    eax,cl
c0026c11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c15:	09 c1                	or     ecx,eax
c0026c17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c1b:	89 e9                	mov    ecx,ebp
c0026c1d:	d3 e7                	shl    edi,cl
c0026c1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c23:	89 d8                	mov    eax,ebx
c0026c25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c29:	88 d1                	mov    cl,dl
c0026c2b:	d3 e8                	shr    eax,cl
c0026c2d:	89 c7                	mov    edi,eax
c0026c2f:	89 e9                	mov    ecx,ebp
c0026c31:	d3 e3                	shl    ebx,cl
c0026c33:	89 f0                	mov    eax,esi
c0026c35:	88 d1                	mov    cl,dl
c0026c37:	d3 e8                	shr    eax,cl
c0026c39:	09 d8                	or     eax,ebx
c0026c3b:	89 e9                	mov    ecx,ebp
c0026c3d:	d3 e6                	shl    esi,cl
c0026c3f:	89 f3                	mov    ebx,esi
c0026c41:	89 fa                	mov    edx,edi
c0026c43:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c47:	89 d1                	mov    ecx,edx
c0026c49:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c4d:	89 c6                	mov    esi,eax
c0026c4f:	89 d7                	mov    edi,edx
c0026c51:	39 d1                	cmp    ecx,edx
c0026c53:	72 27                	jb     c0026c7c <__umoddi3+0x10c>
c0026c55:	74 21                	je     c0026c78 <__umoddi3+0x108>
c0026c57:	89 ca                	mov    edx,ecx
c0026c59:	29 f3                	sub    ebx,esi
c0026c5b:	19 fa                	sbb    edx,edi
c0026c5d:	89 d0                	mov    eax,edx
c0026c5f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c63:	d3 e0                	shl    eax,cl
c0026c65:	89 e9                	mov    ecx,ebp
c0026c67:	d3 eb                	shr    ebx,cl
c0026c69:	09 d8                	or     eax,ebx
c0026c6b:	d3 ea                	shr    edx,cl
c0026c6d:	83 c4 1c             	add    esp,0x1c
c0026c70:	5b                   	pop    ebx
c0026c71:	5e                   	pop    esi
c0026c72:	5f                   	pop    edi
c0026c73:	5d                   	pop    ebp
c0026c74:	c3                   	ret    
c0026c75:	8d 76 00             	lea    esi,[esi+0x0]
c0026c78:	39 c3                	cmp    ebx,eax
c0026c7a:	73 db                	jae    c0026c57 <__umoddi3+0xe7>
c0026c7c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c80:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c84:	89 d7                	mov    edi,edx
c0026c86:	89 c6                	mov    esi,eax
c0026c88:	eb cd                	jmp    c0026c57 <__umoddi3+0xe7>

c0026c8a <__addsf3>:
c0026c8a:	55                   	push   ebp
c0026c8b:	89 e5                	mov    ebp,esp
c0026c8d:	57                   	push   edi
c0026c8e:	56                   	push   esi
c0026c8f:	53                   	push   ebx
c0026c90:	83 ec 08             	sub    esp,0x8
c0026c93:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c96:	89 fa                	mov    edx,edi
c0026c98:	89 f8                	mov    eax,edi
c0026c9a:	c1 f8 17             	sar    eax,0x17
c0026c9d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026ca0:	c1 e2 08             	shl    edx,0x8
c0026ca3:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ca9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cac:	89 de                	mov    esi,ebx
c0026cae:	c1 fe 17             	sar    esi,0x17
c0026cb1:	c1 e3 08             	shl    ebx,0x8
c0026cb4:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026cba:	31 f0                	xor    eax,esi
c0026cbc:	0f 88 3b 01 00 00    	js     c0026dfd <__addsf3+0x173>
c0026cc2:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026cc5:	29 f1                	sub    ecx,esi
c0026cc7:	85 c9                	test   ecx,ecx
c0026cc9:	7e 54                	jle    c0026d1f <__addsf3+0x95>
c0026ccb:	89 f0                	mov    eax,esi
c0026ccd:	84 c0                	test   al,al
c0026ccf:	75 10                	jne    c0026ce1 <__addsf3+0x57>
c0026cd1:	85 db                	test   ebx,ebx
c0026cd3:	0f 84 aa 02 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026cd9:	49                   	dec    ecx
c0026cda:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cdd:	74 38                	je     c0026d17 <__addsf3+0x8d>
c0026cdf:	eb 13                	jmp    c0026cf4 <__addsf3+0x6a>
c0026ce1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ce4:	f7 d0                	not    eax
c0026ce6:	84 c0                	test   al,al
c0026ce8:	0f 84 95 02 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026cee:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cf4:	83 f9 1f             	cmp    ecx,0x1f
c0026cf7:	0f 8f 86 02 00 00    	jg     c0026f83 <__addsf3+0x2f9>
c0026cfd:	89 de                	mov    esi,ebx
c0026cff:	d3 ee                	shr    esi,cl
c0026d01:	b8 20 00 00 00       	mov    eax,0x20
c0026d06:	29 c8                	sub    eax,ecx
c0026d08:	89 c1                	mov    ecx,eax
c0026d0a:	d3 e3                	shl    ebx,cl
c0026d0c:	31 c0                	xor    eax,eax
c0026d0e:	85 db                	test   ebx,ebx
c0026d10:	0f 95 c0             	setne  al
c0026d13:	09 f0                	or     eax,esi
c0026d15:	01 d0                	add    eax,edx
c0026d17:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d1a:	e9 b6 00 00 00       	jmp    c0026dd5 <__addsf3+0x14b>
c0026d1f:	74 5c                	je     c0026d7d <__addsf3+0xf3>
c0026d21:	89 f1                	mov    ecx,esi
c0026d23:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d26:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d29:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d2d:	75 14                	jne    c0026d43 <__addsf3+0xb9>
c0026d2f:	85 d2                	test   edx,edx
c0026d31:	0f 84 4c 02 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026d37:	49                   	dec    ecx
c0026d38:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d3b:	0f 84 94 00 00 00    	je     c0026dd5 <__addsf3+0x14b>
c0026d41:	eb 12                	jmp    c0026d55 <__addsf3+0xcb>
c0026d43:	89 f0                	mov    eax,esi
c0026d45:	f7 d0                	not    eax
c0026d47:	84 c0                	test   al,al
c0026d49:	0f 84 34 02 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026d4f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d55:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d58:	83 f9 1f             	cmp    ecx,0x1f
c0026d5b:	0f 8f 22 02 00 00    	jg     c0026f83 <__addsf3+0x2f9>
c0026d61:	89 d7                	mov    edi,edx
c0026d63:	d3 ef                	shr    edi,cl
c0026d65:	b8 20 00 00 00       	mov    eax,0x20
c0026d6a:	29 c8                	sub    eax,ecx
c0026d6c:	89 c1                	mov    ecx,eax
c0026d6e:	d3 e2                	shl    edx,cl
c0026d70:	31 c0                	xor    eax,eax
c0026d72:	85 d2                	test   edx,edx
c0026d74:	0f 95 c0             	setne  al
c0026d77:	09 f8                	or     eax,edi
c0026d79:	01 d8                	add    eax,ebx
c0026d7b:	eb 58                	jmp    c0026dd5 <__addsf3+0x14b>
c0026d7d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d80:	8d 70 01             	lea    esi,[eax+0x1]
c0026d83:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d89:	75 32                	jne    c0026dbd <__addsf3+0x133>
c0026d8b:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d8f:	75 1f                	jne    c0026db0 <__addsf3+0x126>
c0026d91:	85 d2                	test   edx,edx
c0026d93:	0f 84 e0 01 00 00    	je     c0026f79 <__addsf3+0x2ef>
c0026d99:	85 db                	test   ebx,ebx
c0026d9b:	0f 84 e2 01 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026da1:	89 d0                	mov    eax,edx
c0026da3:	01 d8                	add    eax,ebx
c0026da5:	0f 89 a9 01 00 00    	jns    c0026f54 <__addsf3+0x2ca>
c0026dab:	e9 9d 01 00 00       	jmp    c0026f4d <__addsf3+0x2c3>
c0026db0:	85 d2                	test   edx,edx
c0026db2:	0f 85 cb 01 00 00    	jne    c0026f83 <__addsf3+0x2f9>
c0026db8:	e9 bc 01 00 00       	jmp    c0026f79 <__addsf3+0x2ef>
c0026dbd:	31 c0                	xor    eax,eax
c0026dbf:	89 f1                	mov    ecx,esi
c0026dc1:	f7 d1                	not    ecx
c0026dc3:	84 c9                	test   cl,cl
c0026dc5:	0f 84 90 01 00 00    	je     c0026f5b <__addsf3+0x2d1>
c0026dcb:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dce:	d1 e8                	shr    eax,1
c0026dd0:	e9 86 01 00 00       	jmp    c0026f5b <__addsf3+0x2d1>
c0026dd5:	85 c0                	test   eax,eax
c0026dd7:	0f 89 7e 01 00 00    	jns    c0026f5b <__addsf3+0x2d1>
c0026ddd:	46                   	inc    esi
c0026dde:	89 f2                	mov    edx,esi
c0026de0:	f7 d2                	not    edx
c0026de2:	84 d2                	test   dl,dl
c0026de4:	0f 84 6f 01 00 00    	je     c0026f59 <__addsf3+0x2cf>
c0026dea:	89 c2                	mov    edx,eax
c0026dec:	83 e2 01             	and    edx,0x1
c0026def:	d1 e8                	shr    eax,1
c0026df1:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026df6:	09 d0                	or     eax,edx
c0026df8:	e9 5e 01 00 00       	jmp    c0026f5b <__addsf3+0x2d1>
c0026dfd:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e04:	89 f0                	mov    eax,esi
c0026e06:	0f b6 c0             	movzx  eax,al
c0026e09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e0c:	29 c1                	sub    ecx,eax
c0026e0e:	85 c9                	test   ecx,ecx
c0026e10:	7e 55                	jle    c0026e67 <__addsf3+0x1dd>
c0026e12:	85 c0                	test   eax,eax
c0026e14:	75 11                	jne    c0026e27 <__addsf3+0x19d>
c0026e16:	85 db                	test   ebx,ebx
c0026e18:	0f 84 65 01 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026e1e:	49                   	dec    ecx
c0026e1f:	75 19                	jne    c0026e3a <__addsf3+0x1b0>
c0026e21:	89 d0                	mov    eax,edx
c0026e23:	29 d8                	sub    eax,ebx
c0026e25:	eb 38                	jmp    c0026e5f <__addsf3+0x1d5>
c0026e27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e2a:	f7 d0                	not    eax
c0026e2c:	84 c0                	test   al,al
c0026e2e:	0f 84 4f 01 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026e34:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e3a:	83 f9 1f             	cmp    ecx,0x1f
c0026e3d:	0f 8f 40 01 00 00    	jg     c0026f83 <__addsf3+0x2f9>
c0026e43:	89 de                	mov    esi,ebx
c0026e45:	d3 ee                	shr    esi,cl
c0026e47:	b8 20 00 00 00       	mov    eax,0x20
c0026e4c:	29 c8                	sub    eax,ecx
c0026e4e:	89 c1                	mov    ecx,eax
c0026e50:	d3 e3                	shl    ebx,cl
c0026e52:	31 c0                	xor    eax,eax
c0026e54:	85 db                	test   ebx,ebx
c0026e56:	0f 95 c0             	setne  al
c0026e59:	09 f0                	or     eax,esi
c0026e5b:	29 c2                	sub    edx,eax
c0026e5d:	89 d0                	mov    eax,edx
c0026e5f:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e62:	e9 af 00 00 00       	jmp    c0026f16 <__addsf3+0x28c>
c0026e67:	74 5c                	je     c0026ec5 <__addsf3+0x23b>
c0026e69:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e6c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e6f:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e73:	75 14                	jne    c0026e89 <__addsf3+0x1ff>
c0026e75:	85 d2                	test   edx,edx
c0026e77:	0f 84 06 01 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026e7d:	48                   	dec    eax
c0026e7e:	75 1b                	jne    c0026e9b <__addsf3+0x211>
c0026e80:	89 d8                	mov    eax,ebx
c0026e82:	29 d0                	sub    eax,edx
c0026e84:	e9 8d 00 00 00       	jmp    c0026f16 <__addsf3+0x28c>
c0026e89:	89 f1                	mov    ecx,esi
c0026e8b:	f7 d1                	not    ecx
c0026e8d:	84 c9                	test   cl,cl
c0026e8f:	0f 84 ee 00 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026e95:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e9b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e9e:	83 f8 1f             	cmp    eax,0x1f
c0026ea1:	0f 8f dc 00 00 00    	jg     c0026f83 <__addsf3+0x2f9>
c0026ea7:	89 d7                	mov    edi,edx
c0026ea9:	88 c1                	mov    cl,al
c0026eab:	d3 ef                	shr    edi,cl
c0026ead:	b9 20 00 00 00       	mov    ecx,0x20
c0026eb2:	29 c1                	sub    ecx,eax
c0026eb4:	d3 e2                	shl    edx,cl
c0026eb6:	31 c0                	xor    eax,eax
c0026eb8:	85 d2                	test   edx,edx
c0026eba:	0f 95 c0             	setne  al
c0026ebd:	09 f8                	or     eax,edi
c0026ebf:	29 c3                	sub    ebx,eax
c0026ec1:	89 d8                	mov    eax,ebx
c0026ec3:	eb 51                	jmp    c0026f16 <__addsf3+0x28c>
c0026ec5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ec8:	40                   	inc    eax
c0026ec9:	a8 fe                	test   al,0xfe
c0026ecb:	75 3d                	jne    c0026f0a <__addsf3+0x280>
c0026ecd:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ed1:	0f 85 a7 00 00 00    	jne    c0026f7e <__addsf3+0x2f4>
c0026ed7:	85 d2                	test   edx,edx
c0026ed9:	75 12                	jne    c0026eed <__addsf3+0x263>
c0026edb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ede:	85 db                	test   ebx,ebx
c0026ee0:	0f 85 9d 00 00 00    	jne    c0026f83 <__addsf3+0x2f9>
c0026ee6:	31 ff                	xor    edi,edi
c0026ee8:	e9 96 00 00 00       	jmp    c0026f83 <__addsf3+0x2f9>
c0026eed:	85 db                	test   ebx,ebx
c0026eef:	0f 84 8e 00 00 00    	je     c0026f83 <__addsf3+0x2f9>
c0026ef5:	89 d0                	mov    eax,edx
c0026ef7:	29 d8                	sub    eax,ebx
c0026ef9:	79 06                	jns    c0026f01 <__addsf3+0x277>
c0026efb:	89 d8                	mov    eax,ebx
c0026efd:	29 d0                	sub    eax,edx
c0026eff:	eb 5a                	jmp    c0026f5b <__addsf3+0x2d1>
c0026f01:	bf 00 00 00 00       	mov    edi,0x0
c0026f06:	74 7b                	je     c0026f83 <__addsf3+0x2f9>
c0026f08:	eb 4a                	jmp    c0026f54 <__addsf3+0x2ca>
c0026f0a:	89 d0                	mov    eax,edx
c0026f0c:	29 d8                	sub    eax,ebx
c0026f0e:	79 12                	jns    c0026f22 <__addsf3+0x298>
c0026f10:	89 d8                	mov    eax,ebx
c0026f12:	29 d0                	sub    eax,edx
c0026f14:	eb 09                	jmp    c0026f1f <__addsf3+0x295>
c0026f16:	85 c0                	test   eax,eax
c0026f18:	79 41                	jns    c0026f5b <__addsf3+0x2d1>
c0026f1a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f1f:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f22:	31 f6                	xor    esi,esi
c0026f24:	85 c0                	test   eax,eax
c0026f26:	74 33                	je     c0026f5b <__addsf3+0x2d1>
c0026f28:	0f bd c8             	bsr    ecx,eax
c0026f2b:	83 f1 1f             	xor    ecx,0x1f
c0026f2e:	d3 e0                	shl    eax,cl
c0026f30:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f34:	39 ca                	cmp    edx,ecx
c0026f36:	7f 10                	jg     c0026f48 <__addsf3+0x2be>
c0026f38:	29 d1                	sub    ecx,edx
c0026f3a:	41                   	inc    ecx
c0026f3b:	d3 e8                	shr    eax,cl
c0026f3d:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f40:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f46:	eb 13                	jmp    c0026f5b <__addsf3+0x2d1>
c0026f48:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f4b:	29 ce                	sub    esi,ecx
c0026f4d:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f52:	eb 07                	jmp    c0026f5b <__addsf3+0x2d1>
c0026f54:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f57:	eb 02                	jmp    c0026f5b <__addsf3+0x2d1>
c0026f59:	31 c0                	xor    eax,eax
c0026f5b:	89 c2                	mov    edx,eax
c0026f5d:	c1 ea 08             	shr    edx,0x8
c0026f60:	a8 7f                	test   al,0x7f
c0026f62:	0f 95 c1             	setne  cl
c0026f65:	09 d1                	or     ecx,edx
c0026f67:	83 e1 01             	and    ecx,0x1
c0026f6a:	c1 e8 07             	shr    eax,0x7
c0026f6d:	21 c8                	and    eax,ecx
c0026f6f:	c1 e6 17             	shl    esi,0x17
c0026f72:	09 d6                	or     esi,edx
c0026f74:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f77:	eb 0a                	jmp    c0026f83 <__addsf3+0x2f9>
c0026f79:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f7c:	eb 05                	jmp    c0026f83 <__addsf3+0x2f9>
c0026f7e:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f83:	89 f8                	mov    eax,edi
c0026f85:	5a                   	pop    edx
c0026f86:	59                   	pop    ecx
c0026f87:	5b                   	pop    ebx
c0026f88:	5e                   	pop    esi
c0026f89:	5f                   	pop    edi
c0026f8a:	5d                   	pop    ebp
c0026f8b:	c3                   	ret    

c0026f8c <__subsf3>:
c0026f8c:	55                   	push   ebp
c0026f8d:	89 e5                	mov    ebp,esp
c0026f8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f92:	05 00 00 00 80       	add    eax,0x80000000
c0026f97:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f9a:	5d                   	pop    ebp
c0026f9b:	e9 ea fc ff ff       	jmp    c0026c8a <__addsf3>

c0026fa0 <__negsf2>:
c0026fa0:	55                   	push   ebp
c0026fa1:	89 e5                	mov    ebp,esp
c0026fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fa6:	05 00 00 00 80       	add    eax,0x80000000
c0026fab:	5d                   	pop    ebp
c0026fac:	c3                   	ret    

c0026fad <__mulsf3>:
c0026fad:	55                   	push   ebp
c0026fae:	89 e5                	mov    ebp,esp
c0026fb0:	57                   	push   edi
c0026fb1:	56                   	push   esi
c0026fb2:	53                   	push   ebx
c0026fb3:	83 ec 1c             	sub    esp,0x1c
c0026fb6:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026fb9:	89 f0                	mov    eax,esi
c0026fbb:	89 f1                	mov    ecx,esi
c0026fbd:	c1 f9 17             	sar    ecx,0x17
c0026fc0:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026fc3:	c1 e0 08             	shl    eax,0x8
c0026fc6:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fcb:	89 c1                	mov    ecx,eax
c0026fcd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fd0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fd3:	89 c7                	mov    edi,eax
c0026fd5:	c1 ff 17             	sar    edi,0x17
c0026fd8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fdc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fdf:	89 f8                	mov    eax,edi
c0026fe1:	0f b6 c0             	movzx  eax,al
c0026fe4:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fe7:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026feb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fee:	42                   	inc    edx
c0026fef:	80 e2 fe             	and    dl,0xfe
c0026ff2:	75 7b                	jne    c002706f <__mulsf3+0xc2>
c0026ff4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ff8:	74 54                	je     c002704e <__mulsf3+0xa1>
c0026ffa:	85 c9                	test   ecx,ecx
c0026ffc:	0f 85 64 01 00 00    	jne    c0027166 <__mulsf3+0x1b9>
c0027002:	8d 57 01             	lea    edx,[edi+0x1]
c0027005:	80 e2 fe             	and    dl,0xfe
c0027008:	75 1f                	jne    c0027029 <__mulsf3+0x7c>
c002700a:	85 c0                	test   eax,eax
c002700c:	b8 00 00 00 00       	mov    eax,0x0
c0027011:	74 29                	je     c002703c <__mulsf3+0x8f>
c0027013:	53                   	push   ebx
c0027014:	53                   	push   ebx
c0027015:	50                   	push   eax
c0027016:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027019:	e8 96 05 00 00       	call   c00275b4 <__nesf2>
c002701e:	83 c4 10             	add    esp,0x10
c0027021:	85 c0                	test   eax,eax
c0027023:	0f 85 3a 01 00 00    	jne    c0027163 <__mulsf3+0x1b6>
c0027029:	85 ff                	test   edi,edi
c002702b:	0f 89 35 01 00 00    	jns    c0027166 <__mulsf3+0x1b9>
c0027031:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027037:	e9 2a 01 00 00       	jmp    c0027166 <__mulsf3+0x1b9>
c002703c:	51                   	push   ecx
c002703d:	51                   	push   ecx
c002703e:	50                   	push   eax
c002703f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027042:	e8 6d 05 00 00       	call   c00275b4 <__nesf2>
c0027047:	83 c4 10             	add    esp,0x10
c002704a:	85 c0                	test   eax,eax
c002704c:	eb 15                	jmp    c0027063 <__mulsf3+0xb6>
c002704e:	85 c9                	test   ecx,ecx
c0027050:	74 0b                	je     c002705d <__mulsf3+0xb0>
c0027052:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027055:	01 c9                	add    ecx,ecx
c0027057:	78 16                	js     c002706f <__mulsf3+0xc2>
c0027059:	89 d3                	mov    ebx,edx
c002705b:	eb f5                	jmp    c0027052 <__mulsf3+0xa5>
c002705d:	89 f8                	mov    eax,edi
c002705f:	f7 d0                	not    eax
c0027061:	84 c0                	test   al,al
c0027063:	75 c4                	jne    c0027029 <__mulsf3+0x7c>
c0027065:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002706a:	e9 f7 00 00 00       	jmp    c0027166 <__mulsf3+0x1b9>
c002706f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027072:	c1 e6 08             	shl    esi,0x8
c0027075:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002707b:	8d 57 01             	lea    edx,[edi+0x1]
c002707e:	80 e2 fe             	and    dl,0xfe
c0027081:	75 63                	jne    c00270e6 <__mulsf3+0x139>
c0027083:	85 c0                	test   eax,eax
c0027085:	74 2f                	je     c00270b6 <__mulsf3+0x109>
c0027087:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002708b:	0f 89 d2 00 00 00    	jns    c0027163 <__mulsf3+0x1b6>
c0027091:	52                   	push   edx
c0027092:	52                   	push   edx
c0027093:	6a 00                	push   0x0
c0027095:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027098:	e8 dc 04 00 00       	call   c0027579 <__eqsf2>
c002709d:	83 c4 10             	add    esp,0x10
c00270a0:	85 c0                	test   eax,eax
c00270a2:	0f 85 bb 00 00 00    	jne    c0027163 <__mulsf3+0x1b6>
c00270a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270ab:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00270b1:	e9 b0 00 00 00       	jmp    c0027166 <__mulsf3+0x1b9>
c00270b6:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270b9:	50                   	push   eax
c00270ba:	50                   	push   eax
c00270bb:	6a 00                	push   0x0
c00270bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270c0:	e8 b4 04 00 00       	call   c0027579 <__eqsf2>
c00270c5:	83 c4 10             	add    esp,0x10
c00270c8:	85 c0                	test   eax,eax
c00270ca:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270cd:	75 0c                	jne    c00270db <__mulsf3+0x12e>
c00270cf:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270d3:	0f 89 8a 00 00 00    	jns    c0027163 <__mulsf3+0x1b6>
c00270d9:	eb cd                	jmp    c00270a8 <__mulsf3+0xfb>
c00270db:	8d 43 ff             	lea    eax,[ebx-0x1]
c00270de:	01 f6                	add    esi,esi
c00270e0:	78 04                	js     c00270e6 <__mulsf3+0x139>
c00270e2:	89 c3                	mov    ebx,eax
c00270e4:	eb f5                	jmp    c00270db <__mulsf3+0x12e>
c00270e6:	89 c8                	mov    eax,ecx
c00270e8:	0d 00 00 00 80       	or     eax,0x80000000
c00270ed:	81 ce 00 00 00 80    	or     esi,0x80000000
c00270f3:	f7 e6                	mul    esi
c00270f5:	85 c0                	test   eax,eax
c00270f7:	0f 95 c0             	setne  al
c00270fa:	0f b6 c0             	movzx  eax,al
c00270fd:	09 c2                	or     edx,eax
c00270ff:	78 03                	js     c0027104 <__mulsf3+0x157>
c0027101:	01 d2                	add    edx,edx
c0027103:	4b                   	dec    ebx
c0027104:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002710a:	7f 22                	jg     c002712e <__mulsf3+0x181>
c002710c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027112:	85 db                	test   ebx,ebx
c0027114:	7f 23                	jg     c0027139 <__mulsf3+0x18c>
c0027116:	83 fb e9             	cmp    ebx,0xffffffe9
c0027119:	7c 1a                	jl     c0027135 <__mulsf3+0x188>
c002711b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027121:	b9 01 00 00 00       	mov    ecx,0x1
c0027126:	29 d9                	sub    ecx,ebx
c0027128:	d3 ea                	shr    edx,cl
c002712a:	31 db                	xor    ebx,ebx
c002712c:	eb 0b                	jmp    c0027139 <__mulsf3+0x18c>
c002712e:	bb ff 00 00 00       	mov    ebx,0xff
c0027133:	eb 02                	jmp    c0027137 <__mulsf3+0x18a>
c0027135:	31 db                	xor    ebx,ebx
c0027137:	31 d2                	xor    edx,edx
c0027139:	89 d0                	mov    eax,edx
c002713b:	c1 e8 08             	shr    eax,0x8
c002713e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027141:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027147:	09 fb                	or     ebx,edi
c0027149:	c1 e3 17             	shl    ebx,0x17
c002714c:	09 c3                	or     ebx,eax
c002714e:	f6 c2 7f             	test   dl,0x7f
c0027151:	0f 95 c1             	setne  cl
c0027154:	09 c8                	or     eax,ecx
c0027156:	83 e0 01             	and    eax,0x1
c0027159:	c1 ea 07             	shr    edx,0x7
c002715c:	21 c2                	and    edx,eax
c002715e:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027161:	eb 03                	jmp    c0027166 <__mulsf3+0x1b9>
c0027163:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027166:	89 f0                	mov    eax,esi
c0027168:	8d 65 f4             	lea    esp,[ebp-0xc]
c002716b:	5b                   	pop    ebx
c002716c:	5e                   	pop    esi
c002716d:	5f                   	pop    edi
c002716e:	5d                   	pop    ebp
c002716f:	c3                   	ret    

c0027170 <__divsf3>:
c0027170:	55                   	push   ebp
c0027171:	89 e5                	mov    ebp,esp
c0027173:	57                   	push   edi
c0027174:	56                   	push   esi
c0027175:	53                   	push   ebx
c0027176:	83 ec 1c             	sub    esp,0x1c
c0027179:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002717c:	89 d8                	mov    eax,ebx
c002717e:	89 d9                	mov    ecx,ebx
c0027180:	c1 f9 17             	sar    ecx,0x17
c0027183:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027186:	c1 e0 08             	shl    eax,0x8
c0027189:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002718e:	89 c1                	mov    ecx,eax
c0027190:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027193:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027196:	89 c7                	mov    edi,eax
c0027198:	c1 ff 17             	sar    edi,0x17
c002719b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002719f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00271a2:	89 f8                	mov    eax,edi
c00271a4:	0f b6 c0             	movzx  eax,al
c00271a7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271aa:	29 c6                	sub    esi,eax
c00271ac:	83 c6 7f             	add    esi,0x7f
c00271af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271b2:	42                   	inc    edx
c00271b3:	80 e2 fe             	and    dl,0xfe
c00271b6:	0f 85 9c 00 00 00    	jne    c0027258 <__divsf3+0xe8>
c00271bc:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271c0:	74 33                	je     c00271f5 <__divsf3+0x85>
c00271c2:	85 c9                	test   ecx,ecx
c00271c4:	0f 85 c7 01 00 00    	jne    c0027391 <__divsf3+0x221>
c00271ca:	8d 57 01             	lea    edx,[edi+0x1]
c00271cd:	80 e2 fe             	and    dl,0xfe
c00271d0:	75 2f                	jne    c0027201 <__divsf3+0x91>
c00271d2:	85 c0                	test   eax,eax
c00271d4:	74 2b                	je     c0027201 <__divsf3+0x91>
c00271d6:	51                   	push   ecx
c00271d7:	51                   	push   ecx
c00271d8:	6a 00                	push   0x0
c00271da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271dd:	e8 d2 03 00 00       	call   c00275b4 <__nesf2>
c00271e2:	83 c4 10             	add    esp,0x10
c00271e5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271e8:	85 c0                	test   eax,eax
c00271ea:	0f 85 a1 01 00 00    	jne    c0027391 <__divsf3+0x221>
c00271f0:	e9 92 01 00 00       	jmp    c0027387 <__divsf3+0x217>
c00271f5:	85 c9                	test   ecx,ecx
c00271f7:	75 1b                	jne    c0027214 <__divsf3+0xa4>
c00271f9:	8d 57 01             	lea    edx,[edi+0x1]
c00271fc:	80 e2 fe             	and    dl,0xfe
c00271ff:	74 1e                	je     c002721f <__divsf3+0xaf>
c0027201:	85 ff                	test   edi,edi
c0027203:	0f 89 88 01 00 00    	jns    c0027391 <__divsf3+0x221>
c0027209:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002720f:	e9 7d 01 00 00       	jmp    c0027391 <__divsf3+0x221>
c0027214:	8d 56 ff             	lea    edx,[esi-0x1]
c0027217:	01 c9                	add    ecx,ecx
c0027219:	78 3d                	js     c0027258 <__divsf3+0xe8>
c002721b:	89 d6                	mov    esi,edx
c002721d:	eb f5                	jmp    c0027214 <__divsf3+0xa4>
c002721f:	85 c0                	test   eax,eax
c0027221:	b8 00 00 00 00       	mov    eax,0x0
c0027226:	74 18                	je     c0027240 <__divsf3+0xd0>
c0027228:	52                   	push   edx
c0027229:	52                   	push   edx
c002722a:	50                   	push   eax
c002722b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002722e:	e8 81 03 00 00       	call   c00275b4 <__nesf2>
c0027233:	83 c4 10             	add    esp,0x10
c0027236:	85 c0                	test   eax,eax
c0027238:	0f 85 50 01 00 00    	jne    c002738e <__divsf3+0x21e>
c002723e:	eb c1                	jmp    c0027201 <__divsf3+0x91>
c0027240:	56                   	push   esi
c0027241:	56                   	push   esi
c0027242:	50                   	push   eax
c0027243:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027246:	e8 69 03 00 00       	call   c00275b4 <__nesf2>
c002724b:	83 c4 10             	add    esp,0x10
c002724e:	85 c0                	test   eax,eax
c0027250:	0f 84 31 01 00 00    	je     c0027387 <__divsf3+0x217>
c0027256:	eb a9                	jmp    c0027201 <__divsf3+0x91>
c0027258:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002725b:	c1 e3 08             	shl    ebx,0x8
c002725e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027264:	8d 57 01             	lea    edx,[edi+0x1]
c0027267:	80 e2 fe             	and    dl,0xfe
c002726a:	75 71                	jne    c00272dd <__divsf3+0x16d>
c002726c:	85 c0                	test   eax,eax
c002726e:	ba 00 00 00 00       	mov    edx,0x0
c0027273:	74 2f                	je     c00272a4 <__divsf3+0x134>
c0027275:	51                   	push   ecx
c0027276:	51                   	push   ecx
c0027277:	52                   	push   edx
c0027278:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002727b:	e8 f9 02 00 00       	call   c0027579 <__eqsf2>
c0027280:	83 c4 10             	add    esp,0x10
c0027283:	85 c0                	test   eax,eax
c0027285:	0f 85 03 01 00 00    	jne    c002738e <__divsf3+0x21e>
c002728b:	31 d2                	xor    edx,edx
c002728d:	89 d3                	mov    ebx,edx
c002728f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027292:	31 f8                	xor    eax,edi
c0027294:	0f 89 f7 00 00 00    	jns    c0027391 <__divsf3+0x221>
c002729a:	bb 00 00 00 80       	mov    ebx,0x80000000
c002729f:	e9 ed 00 00 00       	jmp    c0027391 <__divsf3+0x221>
c00272a4:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272a7:	50                   	push   eax
c00272a8:	50                   	push   eax
c00272a9:	52                   	push   edx
c00272aa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272ad:	e8 c7 02 00 00       	call   c0027579 <__eqsf2>
c00272b2:	83 c4 10             	add    esp,0x10
c00272b5:	85 c0                	test   eax,eax
c00272b7:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272ba:	75 16                	jne    c00272d2 <__divsf3+0x162>
c00272bc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272bf:	31 fb                	xor    ebx,edi
c00272c1:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00272c7:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00272cd:	e9 bf 00 00 00       	jmp    c0027391 <__divsf3+0x221>
c00272d2:	8d 46 01             	lea    eax,[esi+0x1]
c00272d5:	01 db                	add    ebx,ebx
c00272d7:	78 04                	js     c00272dd <__divsf3+0x16d>
c00272d9:	89 c6                	mov    esi,eax
c00272db:	eb f5                	jmp    c00272d2 <__divsf3+0x162>
c00272dd:	89 c8                	mov    eax,ecx
c00272df:	0d 00 00 00 80       	or     eax,0x80000000
c00272e4:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00272ea:	31 d2                	xor    edx,edx
c00272ec:	39 d8                	cmp    eax,ebx
c00272ee:	72 07                	jb     c00272f7 <__divsf3+0x187>
c00272f0:	29 d8                	sub    eax,ebx
c00272f2:	ba 01 00 00 00       	mov    edx,0x1
c00272f7:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00272fe:	01 d2                	add    edx,edx
c0027300:	89 c1                	mov    ecx,eax
c0027302:	01 c0                	add    eax,eax
c0027304:	85 c9                	test   ecx,ecx
c0027306:	78 04                	js     c002730c <__divsf3+0x19c>
c0027308:	39 c3                	cmp    ebx,eax
c002730a:	77 05                	ja     c0027311 <__divsf3+0x1a1>
c002730c:	29 d8                	sub    eax,ebx
c002730e:	83 ca 01             	or     edx,0x1
c0027311:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027314:	75 e8                	jne    c00272fe <__divsf3+0x18e>
c0027316:	85 c0                	test   eax,eax
c0027318:	0f 95 c0             	setne  al
c002731b:	0f b6 c0             	movzx  eax,al
c002731e:	c1 e2 06             	shl    edx,0x6
c0027321:	09 c2                	or     edx,eax
c0027323:	78 03                	js     c0027328 <__divsf3+0x1b8>
c0027325:	01 d2                	add    edx,edx
c0027327:	4e                   	dec    esi
c0027328:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002732e:	7f 22                	jg     c0027352 <__divsf3+0x1e2>
c0027330:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027336:	85 f6                	test   esi,esi
c0027338:	7f 23                	jg     c002735d <__divsf3+0x1ed>
c002733a:	83 fe e9             	cmp    esi,0xffffffe9
c002733d:	7c 1a                	jl     c0027359 <__divsf3+0x1e9>
c002733f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027345:	b9 01 00 00 00       	mov    ecx,0x1
c002734a:	29 f1                	sub    ecx,esi
c002734c:	d3 ea                	shr    edx,cl
c002734e:	31 f6                	xor    esi,esi
c0027350:	eb 0b                	jmp    c002735d <__divsf3+0x1ed>
c0027352:	be ff 00 00 00       	mov    esi,0xff
c0027357:	eb 02                	jmp    c002735b <__divsf3+0x1eb>
c0027359:	31 f6                	xor    esi,esi
c002735b:	31 d2                	xor    edx,edx
c002735d:	89 d0                	mov    eax,edx
c002735f:	c1 e8 08             	shr    eax,0x8
c0027362:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027365:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002736b:	09 fe                	or     esi,edi
c002736d:	c1 e6 17             	shl    esi,0x17
c0027370:	09 c6                	or     esi,eax
c0027372:	f6 c2 7f             	test   dl,0x7f
c0027375:	0f 95 c1             	setne  cl
c0027378:	09 c8                	or     eax,ecx
c002737a:	83 e0 01             	and    eax,0x1
c002737d:	c1 ea 07             	shr    edx,0x7
c0027380:	21 c2                	and    edx,eax
c0027382:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027385:	eb 0a                	jmp    c0027391 <__divsf3+0x221>
c0027387:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c002738c:	eb 03                	jmp    c0027391 <__divsf3+0x221>
c002738e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027391:	89 d8                	mov    eax,ebx
c0027393:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027396:	5b                   	pop    ebx
c0027397:	5e                   	pop    esi
c0027398:	5f                   	pop    edi
c0027399:	5d                   	pop    ebp
c002739a:	c3                   	ret    

c002739b <__floatsisf>:
c002739b:	55                   	push   ebp
c002739c:	89 e5                	mov    ebp,esp
c002739e:	53                   	push   ebx
c002739f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273a2:	85 d2                	test   edx,edx
c00273a4:	7e 2b                	jle    c00273d1 <__floatsisf+0x36>
c00273a6:	0f bd ca             	bsr    ecx,edx
c00273a9:	83 f1 1f             	xor    ecx,0x1f
c00273ac:	d3 e2                	shl    edx,cl
c00273ae:	89 d0                	mov    eax,edx
c00273b0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273b5:	89 c3                	mov    ebx,eax
c00273b7:	c1 eb 08             	shr    ebx,0x8
c00273ba:	80 e2 7f             	and    dl,0x7f
c00273bd:	0f 95 c2             	setne  dl
c00273c0:	09 da                	or     edx,ebx
c00273c2:	83 e2 01             	and    edx,0x1
c00273c5:	c1 e8 07             	shr    eax,0x7
c00273c8:	21 c2                	and    edx,eax
c00273ca:	b8 9e 00 00 00       	mov    eax,0x9e
c00273cf:	eb 32                	jmp    c0027403 <__floatsisf+0x68>
c00273d1:	b8 00 00 00 00       	mov    eax,0x0
c00273d6:	74 34                	je     c002740c <__floatsisf+0x71>
c00273d8:	f7 da                	neg    edx
c00273da:	0f bd ca             	bsr    ecx,edx
c00273dd:	83 f1 1f             	xor    ecx,0x1f
c00273e0:	d3 e2                	shl    edx,cl
c00273e2:	89 d0                	mov    eax,edx
c00273e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273e9:	89 c3                	mov    ebx,eax
c00273eb:	c1 eb 08             	shr    ebx,0x8
c00273ee:	80 e2 7f             	and    dl,0x7f
c00273f1:	0f 95 c2             	setne  dl
c00273f4:	09 da                	or     edx,ebx
c00273f6:	83 e2 01             	and    edx,0x1
c00273f9:	c1 e8 07             	shr    eax,0x7
c00273fc:	21 c2                	and    edx,eax
c00273fe:	b8 9e 01 00 00       	mov    eax,0x19e
c0027403:	29 c8                	sub    eax,ecx
c0027405:	c1 e0 17             	shl    eax,0x17
c0027408:	09 d8                	or     eax,ebx
c002740a:	01 d0                	add    eax,edx
c002740c:	5b                   	pop    ebx
c002740d:	5d                   	pop    ebp
c002740e:	c3                   	ret    

c002740f <__floatunsisf>:
c002740f:	55                   	push   ebp
c0027410:	89 e5                	mov    ebp,esp
c0027412:	53                   	push   ebx
c0027413:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027416:	31 c0                	xor    eax,eax
c0027418:	85 d2                	test   edx,edx
c002741a:	74 32                	je     c002744e <__floatunsisf+0x3f>
c002741c:	0f bd ca             	bsr    ecx,edx
c002741f:	83 f1 1f             	xor    ecx,0x1f
c0027422:	d3 e2                	shl    edx,cl
c0027424:	89 d0                	mov    eax,edx
c0027426:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002742b:	89 c3                	mov    ebx,eax
c002742d:	c1 eb 08             	shr    ebx,0x8
c0027430:	80 e2 7f             	and    dl,0x7f
c0027433:	0f 95 c2             	setne  dl
c0027436:	09 da                	or     edx,ebx
c0027438:	83 e2 01             	and    edx,0x1
c002743b:	c1 e8 07             	shr    eax,0x7
c002743e:	21 c2                	and    edx,eax
c0027440:	b8 9e 00 00 00       	mov    eax,0x9e
c0027445:	29 c8                	sub    eax,ecx
c0027447:	c1 e0 17             	shl    eax,0x17
c002744a:	09 d8                	or     eax,ebx
c002744c:	01 d0                	add    eax,edx
c002744e:	5b                   	pop    ebx
c002744f:	5d                   	pop    ebp
c0027450:	c3                   	ret    

c0027451 <__fixsfsi>:
c0027451:	55                   	push   ebp
c0027452:	89 e5                	mov    ebp,esp
c0027454:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027457:	89 d1                	mov    ecx,edx
c0027459:	c1 e1 08             	shl    ecx,0x8
c002745c:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027462:	c1 fa 17             	sar    edx,0x17
c0027465:	78 1c                	js     c0027483 <__fixsfsi+0x32>
c0027467:	83 ea 7f             	sub    edx,0x7f
c002746a:	31 c0                	xor    eax,eax
c002746c:	83 fa 1e             	cmp    edx,0x1e
c002746f:	77 40                	ja     c00274b1 <__fixsfsi+0x60>
c0027471:	89 c8                	mov    eax,ecx
c0027473:	0d 00 00 00 80       	or     eax,0x80000000
c0027478:	b9 1f 00 00 00       	mov    ecx,0x1f
c002747d:	29 d1                	sub    ecx,edx
c002747f:	d3 e8                	shr    eax,cl
c0027481:	eb 2e                	jmp    c00274b1 <__fixsfsi+0x60>
c0027483:	31 c0                	xor    eax,eax
c0027485:	81 c2 81 00 00 00    	add    edx,0x81
c002748b:	78 24                	js     c00274b1 <__fixsfsi+0x60>
c002748d:	83 fa 1e             	cmp    edx,0x1e
c0027490:	7e 09                	jle    c002749b <__fixsfsi+0x4a>
c0027492:	83 fa 1f             	cmp    edx,0x1f
c0027495:	75 18                	jne    c00274af <__fixsfsi+0x5e>
c0027497:	85 c9                	test   ecx,ecx
c0027499:	75 14                	jne    c00274af <__fixsfsi+0x5e>
c002749b:	89 c8                	mov    eax,ecx
c002749d:	0d 00 00 00 80       	or     eax,0x80000000
c00274a2:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274a7:	29 d1                	sub    ecx,edx
c00274a9:	d3 e8                	shr    eax,cl
c00274ab:	f7 d8                	neg    eax
c00274ad:	eb 02                	jmp    c00274b1 <__fixsfsi+0x60>
c00274af:	31 c0                	xor    eax,eax
c00274b1:	5d                   	pop    ebp
c00274b2:	c3                   	ret    

c00274b3 <__fixunssfsi>:
c00274b3:	55                   	push   ebp
c00274b4:	89 e5                	mov    ebp,esp
c00274b6:	53                   	push   ebx
c00274b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274ba:	89 d3                	mov    ebx,edx
c00274bc:	c1 fb 17             	sar    ebx,0x17
c00274bf:	83 eb 7f             	sub    ebx,0x7f
c00274c2:	31 c0                	xor    eax,eax
c00274c4:	83 fb 1f             	cmp    ebx,0x1f
c00274c7:	77 18                	ja     c00274e1 <__fixunssfsi+0x2e>
c00274c9:	89 d0                	mov    eax,edx
c00274cb:	c1 e0 08             	shl    eax,0x8
c00274ce:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274d3:	0d 00 00 00 80       	or     eax,0x80000000
c00274d8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274dd:	29 d9                	sub    ecx,ebx
c00274df:	d3 e8                	shr    eax,cl
c00274e1:	5b                   	pop    ebx
c00274e2:	5d                   	pop    ebp
c00274e3:	c3                   	ret    

c00274e4 <__cmpsf2>:
c00274e4:	55                   	push   ebp
c00274e5:	89 e5                	mov    ebp,esp
c00274e7:	57                   	push   edi
c00274e8:	56                   	push   esi
c00274e9:	53                   	push   ebx
c00274ea:	83 ec 24             	sub    esp,0x24
c00274ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274f3:	e8 4f 10 00 00       	call   c0028547 <__truncdfsf2>
c00274f8:	5a                   	pop    edx
c00274f9:	59                   	pop    ecx
c00274fa:	89 c3                	mov    ebx,eax
c00274fc:	c1 e8 17             	shr    eax,0x17
c00274ff:	0f b6 f0             	movzx  esi,al
c0027502:	89 d8                	mov    eax,ebx
c0027504:	c1 e8 1f             	shr    eax,0x1f
c0027507:	31 c6                	xor    esi,eax
c0027509:	c1 e3 08             	shl    ebx,0x8
c002750c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002750f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027512:	e8 30 10 00 00       	call   c0028547 <__truncdfsf2>
c0027517:	83 c4 10             	add    esp,0x10
c002751a:	89 c1                	mov    ecx,eax
c002751c:	c1 e9 17             	shr    ecx,0x17
c002751f:	0f b6 c9             	movzx  ecx,cl
c0027522:	89 c7                	mov    edi,eax
c0027524:	c1 ef 1f             	shr    edi,0x1f
c0027527:	89 ca                	mov    edx,ecx
c0027529:	31 fa                	xor    edx,edi
c002752b:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002752e:	c1 e0 08             	shl    eax,0x8
c0027531:	89 c2                	mov    edx,eax
c0027533:	89 d8                	mov    eax,ebx
c0027535:	09 d0                	or     eax,edx
c0027537:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002753c:	09 f0                	or     eax,esi
c002753e:	75 08                	jne    c0027548 <__cmpsf2+0x64>
c0027540:	31 c0                	xor    eax,eax
c0027542:	39 f9                	cmp    ecx,edi
c0027544:	75 0c                	jne    c0027552 <__cmpsf2+0x6e>
c0027546:	eb 29                	jmp    c0027571 <__cmpsf2+0x8d>
c0027548:	b8 01 00 00 00       	mov    eax,0x1
c002754d:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027550:	7f 1f                	jg     c0027571 <__cmpsf2+0x8d>
c0027552:	83 c8 ff             	or     eax,0xffffffff
c0027555:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027558:	7c 17                	jl     c0027571 <__cmpsf2+0x8d>
c002755a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027560:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027566:	b8 01 00 00 00       	mov    eax,0x1
c002756b:	39 d3                	cmp    ebx,edx
c002756d:	77 02                	ja     c0027571 <__cmpsf2+0x8d>
c002756f:	19 c0                	sbb    eax,eax
c0027571:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027574:	5b                   	pop    ebx
c0027575:	5e                   	pop    esi
c0027576:	5f                   	pop    edi
c0027577:	5d                   	pop    ebp
c0027578:	c3                   	ret    

c0027579 <__eqsf2>:
c0027579:	55                   	push   ebp
c002757a:	89 e5                	mov    ebp,esp
c002757c:	83 ec 24             	sub    esp,0x24
c002757f:	6a 01                	push   0x1
c0027581:	83 ec 0c             	sub    esp,0xc
c0027584:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027587:	e8 df 10 00 00       	call   c002866b <__extendsfdf2>
c002758c:	83 c4 10             	add    esp,0x10
c002758f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027592:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027595:	52                   	push   edx
c0027596:	50                   	push   eax
c0027597:	50                   	push   eax
c0027598:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002759b:	e8 cb 10 00 00       	call   c002866b <__extendsfdf2>
c00275a0:	59                   	pop    ecx
c00275a1:	59                   	pop    ecx
c00275a2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275a5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275a8:	52                   	push   edx
c00275a9:	50                   	push   eax
c00275aa:	e8 35 ff ff ff       	call   c00274e4 <__cmpsf2>
c00275af:	83 c4 20             	add    esp,0x20
c00275b2:	c9                   	leave  
c00275b3:	c3                   	ret    

c00275b4 <__nesf2>:
c00275b4:	eb c3                	jmp    c0027579 <__eqsf2>

c00275b6 <__gtsf2>:
c00275b6:	55                   	push   ebp
c00275b7:	89 e5                	mov    ebp,esp
c00275b9:	83 ec 24             	sub    esp,0x24
c00275bc:	6a ff                	push   0xffffffff
c00275be:	83 ec 0c             	sub    esp,0xc
c00275c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275c4:	e8 a2 10 00 00       	call   c002866b <__extendsfdf2>
c00275c9:	83 c4 10             	add    esp,0x10
c00275cc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275cf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275d2:	52                   	push   edx
c00275d3:	50                   	push   eax
c00275d4:	50                   	push   eax
c00275d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275d8:	e8 8e 10 00 00       	call   c002866b <__extendsfdf2>
c00275dd:	59                   	pop    ecx
c00275de:	59                   	pop    ecx
c00275df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275e2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275e5:	52                   	push   edx
c00275e6:	50                   	push   eax
c00275e7:	e8 f8 fe ff ff       	call   c00274e4 <__cmpsf2>
c00275ec:	83 c4 20             	add    esp,0x20
c00275ef:	c9                   	leave  
c00275f0:	c3                   	ret    

c00275f1 <__gesf2>:
c00275f1:	eb c3                	jmp    c00275b6 <__gtsf2>

c00275f3 <__ltsf2>:
c00275f3:	eb 84                	jmp    c0027579 <__eqsf2>

c00275f5 <__lesf2>:
c00275f5:	eb 82                	jmp    c0027579 <__eqsf2>

c00275f7 <__adddf3>:
c00275f7:	55                   	push   ebp
c00275f8:	89 e5                	mov    ebp,esp
c00275fa:	57                   	push   edi
c00275fb:	56                   	push   esi
c00275fc:	53                   	push   ebx
c00275fd:	83 ec 24             	sub    esp,0x24
c0027600:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027603:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027606:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027609:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002760c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002760f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027612:	89 c8                	mov    eax,ecx
c0027614:	89 ce                	mov    esi,ecx
c0027616:	c1 fe 14             	sar    esi,0x14
c0027619:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c002761c:	89 fb                	mov    ebx,edi
c002761e:	89 fa                	mov    edx,edi
c0027620:	c1 e2 0b             	shl    edx,0xb
c0027623:	c1 e0 0b             	shl    eax,0xb
c0027626:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002762b:	c1 eb 15             	shr    ebx,0x15
c002762e:	09 d8                	or     eax,ebx
c0027630:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027633:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027636:	c1 fe 14             	sar    esi,0x14
c0027639:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002763c:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002763f:	89 f3                	mov    ebx,esi
c0027641:	c1 e3 0b             	shl    ebx,0xb
c0027644:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027647:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002764a:	c1 e3 0b             	shl    ebx,0xb
c002764d:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027653:	c1 ee 15             	shr    esi,0x15
c0027656:	09 f3                	or     ebx,esi
c0027658:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002765b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002765e:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027661:	0f 88 5f 02 00 00    	js     c00278c6 <__adddf3+0x2cf>
c0027667:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002766a:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c002766d:	85 db                	test   ebx,ebx
c002766f:	0f 8e c7 00 00 00    	jle    c002773c <__adddf3+0x145>
c0027675:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c002767c:	75 1a                	jne    c0027698 <__adddf3+0xa1>
c002767e:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027681:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027684:	0f 84 b2 05 00 00    	je     c0027c3c <__adddf3+0x645>
c002768a:	4b                   	dec    ebx
c002768b:	75 23                	jne    c00276b0 <__adddf3+0xb9>
c002768d:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027690:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027693:	e9 99 00 00 00       	jmp    c0027731 <__adddf3+0x13a>
c0027698:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002769b:	f7 d6                	not    esi
c002769d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276a3:	0f 84 93 05 00 00    	je     c0027c3c <__adddf3+0x645>
c00276a9:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276b0:	83 fb 1f             	cmp    ebx,0x1f
c00276b3:	7e 42                	jle    c00276f7 <__adddf3+0x100>
c00276b5:	83 fb 3f             	cmp    ebx,0x3f
c00276b8:	0f 8f 7e 05 00 00    	jg     c0027c3c <__adddf3+0x645>
c00276be:	83 e3 1f             	and    ebx,0x1f
c00276c1:	89 d9                	mov    ecx,ebx
c00276c3:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276c6:	d3 ef                	shr    edi,cl
c00276c8:	31 db                	xor    ebx,ebx
c00276ca:	85 c9                	test   ecx,ecx
c00276cc:	74 15                	je     c00276e3 <__adddf3+0xec>
c00276ce:	be 20 00 00 00       	mov    esi,0x20
c00276d3:	29 ce                	sub    esi,ecx
c00276d5:	89 f1                	mov    ecx,esi
c00276d7:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276da:	d3 e6                	shl    esi,cl
c00276dc:	31 db                	xor    ebx,ebx
c00276de:	85 f6                	test   esi,esi
c00276e0:	0f 95 c3             	setne  bl
c00276e3:	31 c9                	xor    ecx,ecx
c00276e5:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276e9:	0f 95 c1             	setne  cl
c00276ec:	09 cf                	or     edi,ecx
c00276ee:	09 fb                	or     ebx,edi
c00276f0:	01 da                	add    edx,ebx
c00276f2:	83 d0 00             	adc    eax,0x0
c00276f5:	eb 3a                	jmp    c0027731 <__adddf3+0x13a>
c00276f7:	bf 20 00 00 00       	mov    edi,0x20
c00276fc:	29 df                	sub    edi,ebx
c00276fe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027701:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027704:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027707:	d3 e6                	shl    esi,cl
c0027709:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002770c:	88 d9                	mov    cl,bl
c002770e:	d3 ef                	shr    edi,cl
c0027710:	09 fe                	or     esi,edi
c0027712:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027715:	88 d9                	mov    cl,bl
c0027717:	d3 ef                	shr    edi,cl
c0027719:	89 fb                	mov    ebx,edi
c002771b:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002771e:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027721:	d3 e7                	shl    edi,cl
c0027723:	85 ff                	test   edi,edi
c0027725:	0f 95 c1             	setne  cl
c0027728:	0f b6 c9             	movzx  ecx,cl
c002772b:	09 ce                	or     esi,ecx
c002772d:	01 f2                	add    edx,esi
c002772f:	11 d8                	adc    eax,ebx
c0027731:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027734:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027737:	e9 52 01 00 00       	jmp    c002788e <__adddf3+0x297>
c002773c:	0f 84 d5 00 00 00    	je     c0027817 <__adddf3+0x220>
c0027742:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027745:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027748:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002774b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002774e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027755:	75 20                	jne    c0027777 <__adddf3+0x180>
c0027757:	89 d6                	mov    esi,edx
c0027759:	09 c6                	or     esi,eax
c002775b:	0f 84 db 04 00 00    	je     c0027c3c <__adddf3+0x645>
c0027761:	4b                   	dec    ebx
c0027762:	75 29                	jne    c002778d <__adddf3+0x196>
c0027764:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027767:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002776a:	01 d1                	add    ecx,edx
c002776c:	11 c6                	adc    esi,eax
c002776e:	89 f0                	mov    eax,esi
c0027770:	89 ca                	mov    edx,ecx
c0027772:	e9 17 01 00 00       	jmp    c002788e <__adddf3+0x297>
c0027777:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002777a:	f7 d6                	not    esi
c002777c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027782:	0f 84 b4 04 00 00    	je     c0027c3c <__adddf3+0x645>
c0027788:	0d 00 00 00 80       	or     eax,0x80000000
c002778d:	83 fb 1f             	cmp    ebx,0x1f
c0027790:	7e 48                	jle    c00277da <__adddf3+0x1e3>
c0027792:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027795:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027798:	83 fb 3f             	cmp    ebx,0x3f
c002779b:	0f 8f 9b 04 00 00    	jg     c0027c3c <__adddf3+0x645>
c00277a1:	83 e3 1f             	and    ebx,0x1f
c00277a4:	89 d9                	mov    ecx,ebx
c00277a6:	89 c7                	mov    edi,eax
c00277a8:	d3 ef                	shr    edi,cl
c00277aa:	31 db                	xor    ebx,ebx
c00277ac:	85 c9                	test   ecx,ecx
c00277ae:	74 12                	je     c00277c2 <__adddf3+0x1cb>
c00277b0:	be 20 00 00 00       	mov    esi,0x20
c00277b5:	29 ce                	sub    esi,ecx
c00277b7:	89 f1                	mov    ecx,esi
c00277b9:	d3 e0                	shl    eax,cl
c00277bb:	31 db                	xor    ebx,ebx
c00277bd:	85 c0                	test   eax,eax
c00277bf:	0f 95 c3             	setne  bl
c00277c2:	31 c0                	xor    eax,eax
c00277c4:	85 d2                	test   edx,edx
c00277c6:	0f 95 c0             	setne  al
c00277c9:	09 c7                	or     edi,eax
c00277cb:	09 fb                	or     ebx,edi
c00277cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277d3:	01 da                	add    edx,ebx
c00277d5:	83 d6 00             	adc    esi,0x0
c00277d8:	eb 39                	jmp    c0027813 <__adddf3+0x21c>
c00277da:	be 20 00 00 00       	mov    esi,0x20
c00277df:	29 de                	sub    esi,ebx
c00277e1:	89 c7                	mov    edi,eax
c00277e3:	89 f1                	mov    ecx,esi
c00277e5:	d3 e7                	shl    edi,cl
c00277e7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277ea:	89 d7                	mov    edi,edx
c00277ec:	88 d9                	mov    cl,bl
c00277ee:	d3 ef                	shr    edi,cl
c00277f0:	89 f9                	mov    ecx,edi
c00277f2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277f5:	09 cf                	or     edi,ecx
c00277f7:	88 d9                	mov    cl,bl
c00277f9:	d3 e8                	shr    eax,cl
c00277fb:	89 f1                	mov    ecx,esi
c00277fd:	d3 e2                	shl    edx,cl
c00277ff:	85 d2                	test   edx,edx
c0027801:	0f 95 c2             	setne  dl
c0027804:	0f b6 d2             	movzx  edx,dl
c0027807:	09 d7                	or     edi,edx
c0027809:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002780c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002780f:	01 fa                	add    edx,edi
c0027811:	11 c6                	adc    esi,eax
c0027813:	89 f0                	mov    eax,esi
c0027815:	eb 77                	jmp    c002788e <__adddf3+0x297>
c0027817:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002781a:	46                   	inc    esi
c002781b:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002781e:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027824:	75 41                	jne    c0027867 <__adddf3+0x270>
c0027826:	89 d3                	mov    ebx,edx
c0027828:	09 c3                	or     ebx,eax
c002782a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027831:	75 27                	jne    c002785a <__adddf3+0x263>
c0027833:	85 db                	test   ebx,ebx
c0027835:	0f 84 fb 03 00 00    	je     c0027c36 <__adddf3+0x63f>
c002783b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002783e:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027841:	0f 84 f5 03 00 00    	je     c0027c3c <__adddf3+0x645>
c0027847:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002784a:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002784d:	85 c0                	test   eax,eax
c002784f:	0f 89 91 03 00 00    	jns    c0027be6 <__adddf3+0x5ef>
c0027855:	e9 85 03 00 00       	jmp    c0027bdf <__adddf3+0x5e8>
c002785a:	85 db                	test   ebx,ebx
c002785c:	0f 85 da 03 00 00    	jne    c0027c3c <__adddf3+0x645>
c0027862:	e9 cf 03 00 00       	jmp    c0027c36 <__adddf3+0x63f>
c0027867:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002786a:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002786d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027870:	f7 d1                	not    ecx
c0027872:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027878:	0f 84 70 03 00 00    	je     c0027bee <__adddf3+0x5f7>
c002787e:	d1 ea                	shr    edx,1
c0027880:	89 c1                	mov    ecx,eax
c0027882:	c1 e1 1f             	shl    ecx,0x1f
c0027885:	09 ca                	or     edx,ecx
c0027887:	d1 e8                	shr    eax,1
c0027889:	e9 6f 03 00 00       	jmp    c0027bfd <__adddf3+0x606>
c002788e:	85 c0                	test   eax,eax
c0027890:	0f 89 67 03 00 00    	jns    c0027bfd <__adddf3+0x606>
c0027896:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027899:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002789c:	f7 d1                	not    ecx
c002789e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278a4:	0f 84 44 03 00 00    	je     c0027bee <__adddf3+0x5f7>
c00278aa:	89 d1                	mov    ecx,edx
c00278ac:	d1 e9                	shr    ecx,1
c00278ae:	83 e2 01             	and    edx,0x1
c00278b1:	09 ca                	or     edx,ecx
c00278b3:	89 c1                	mov    ecx,eax
c00278b5:	c1 e1 1f             	shl    ecx,0x1f
c00278b8:	09 ca                	or     edx,ecx
c00278ba:	d1 e8                	shr    eax,1
c00278bc:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00278c1:	e9 37 03 00 00       	jmp    c0027bfd <__adddf3+0x606>
c00278c6:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278c9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278cf:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00278d2:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278d5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278db:	29 de                	sub    esi,ebx
c00278dd:	85 f6                	test   esi,esi
c00278df:	0f 8e bd 00 00 00    	jle    c00279a2 <__adddf3+0x3ab>
c00278e5:	85 db                	test   ebx,ebx
c00278e7:	75 17                	jne    c0027900 <__adddf3+0x309>
c00278e9:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278ec:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278ef:	0f 84 47 03 00 00    	je     c0027c3c <__adddf3+0x645>
c00278f5:	4e                   	dec    esi
c00278f6:	75 20                	jne    c0027918 <__adddf3+0x321>
c00278f8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278fb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278fe:	eb 5b                	jmp    c002795b <__adddf3+0x364>
c0027900:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027903:	f7 d3                	not    ebx
c0027905:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002790b:	0f 84 2b 03 00 00    	je     c0027c3c <__adddf3+0x645>
c0027911:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027918:	83 fe 1f             	cmp    esi,0x1f
c002791b:	7e 49                	jle    c0027966 <__adddf3+0x36f>
c002791d:	83 fe 3f             	cmp    esi,0x3f
c0027920:	0f 8f 16 03 00 00    	jg     c0027c3c <__adddf3+0x645>
c0027926:	83 e6 1f             	and    esi,0x1f
c0027929:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002792c:	89 f1                	mov    ecx,esi
c002792e:	d3 ef                	shr    edi,cl
c0027930:	31 db                	xor    ebx,ebx
c0027932:	85 f6                	test   esi,esi
c0027934:	74 13                	je     c0027949 <__adddf3+0x352>
c0027936:	b9 20 00 00 00       	mov    ecx,0x20
c002793b:	29 f1                	sub    ecx,esi
c002793d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027940:	d3 e6                	shl    esi,cl
c0027942:	31 db                	xor    ebx,ebx
c0027944:	85 f6                	test   esi,esi
c0027946:	0f 95 c3             	setne  bl
c0027949:	31 c9                	xor    ecx,ecx
c002794b:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002794f:	0f 95 c1             	setne  cl
c0027952:	09 cf                	or     edi,ecx
c0027954:	09 fb                	or     ebx,edi
c0027956:	29 da                	sub    edx,ebx
c0027958:	83 d8 00             	sbb    eax,0x0
c002795b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002795e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027961:	e9 aa 01 00 00       	jmp    c0027b10 <__adddf3+0x519>
c0027966:	bf 20 00 00 00       	mov    edi,0x20
c002796b:	29 f7                	sub    edi,esi
c002796d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027970:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027973:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027976:	d3 e3                	shl    ebx,cl
c0027978:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002797b:	89 f1                	mov    ecx,esi
c002797d:	d3 ef                	shr    edi,cl
c002797f:	09 fb                	or     ebx,edi
c0027981:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027984:	89 f1                	mov    ecx,esi
c0027986:	d3 ef                	shr    edi,cl
c0027988:	89 fe                	mov    esi,edi
c002798a:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002798d:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027990:	d3 e7                	shl    edi,cl
c0027992:	85 ff                	test   edi,edi
c0027994:	0f 95 c1             	setne  cl
c0027997:	0f b6 c9             	movzx  ecx,cl
c002799a:	09 cb                	or     ebx,ecx
c002799c:	29 da                	sub    edx,ebx
c002799e:	19 f0                	sbb    eax,esi
c00279a0:	eb b9                	jmp    c002795b <__adddf3+0x364>
c00279a2:	0f 84 cd 00 00 00    	je     c0027a75 <__adddf3+0x47e>
c00279a8:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279ab:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279ae:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279b1:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279b5:	75 1b                	jne    c00279d2 <__adddf3+0x3db>
c00279b7:	89 d6                	mov    esi,edx
c00279b9:	09 c6                	or     esi,eax
c00279bb:	0f 84 7b 02 00 00    	je     c0027c3c <__adddf3+0x645>
c00279c1:	4b                   	dec    ebx
c00279c2:	75 24                	jne    c00279e8 <__adddf3+0x3f1>
c00279c4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279c7:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279ca:	29 d1                	sub    ecx,edx
c00279cc:	19 c6                	sbb    esi,eax
c00279ce:	89 ca                	mov    edx,ecx
c00279d0:	eb 61                	jmp    c0027a33 <__adddf3+0x43c>
c00279d2:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00279d5:	f7 d6                	not    esi
c00279d7:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279dd:	0f 84 59 02 00 00    	je     c0027c3c <__adddf3+0x645>
c00279e3:	0d 00 00 00 80       	or     eax,0x80000000
c00279e8:	83 fb 1f             	cmp    ebx,0x1f
c00279eb:	7e 4d                	jle    c0027a3a <__adddf3+0x443>
c00279ed:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279f0:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279f3:	83 fb 3f             	cmp    ebx,0x3f
c00279f6:	0f 8f 40 02 00 00    	jg     c0027c3c <__adddf3+0x645>
c00279fc:	83 e3 1f             	and    ebx,0x1f
c00279ff:	89 d9                	mov    ecx,ebx
c0027a01:	89 c7                	mov    edi,eax
c0027a03:	d3 ef                	shr    edi,cl
c0027a05:	31 db                	xor    ebx,ebx
c0027a07:	85 c9                	test   ecx,ecx
c0027a09:	74 12                	je     c0027a1d <__adddf3+0x426>
c0027a0b:	be 20 00 00 00       	mov    esi,0x20
c0027a10:	29 ce                	sub    esi,ecx
c0027a12:	89 f1                	mov    ecx,esi
c0027a14:	d3 e0                	shl    eax,cl
c0027a16:	31 db                	xor    ebx,ebx
c0027a18:	85 c0                	test   eax,eax
c0027a1a:	0f 95 c3             	setne  bl
c0027a1d:	31 c0                	xor    eax,eax
c0027a1f:	85 d2                	test   edx,edx
c0027a21:	0f 95 c0             	setne  al
c0027a24:	09 c7                	or     edi,eax
c0027a26:	09 fb                	or     ebx,edi
c0027a28:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a2b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a2e:	29 da                	sub    edx,ebx
c0027a30:	83 de 00             	sbb    esi,0x0
c0027a33:	89 f0                	mov    eax,esi
c0027a35:	e9 d6 00 00 00       	jmp    c0027b10 <__adddf3+0x519>
c0027a3a:	be 20 00 00 00       	mov    esi,0x20
c0027a3f:	29 de                	sub    esi,ebx
c0027a41:	89 c7                	mov    edi,eax
c0027a43:	89 f1                	mov    ecx,esi
c0027a45:	d3 e7                	shl    edi,cl
c0027a47:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a4a:	89 d7                	mov    edi,edx
c0027a4c:	88 d9                	mov    cl,bl
c0027a4e:	d3 ef                	shr    edi,cl
c0027a50:	89 f9                	mov    ecx,edi
c0027a52:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a55:	09 cf                	or     edi,ecx
c0027a57:	88 d9                	mov    cl,bl
c0027a59:	d3 e8                	shr    eax,cl
c0027a5b:	89 f1                	mov    ecx,esi
c0027a5d:	d3 e2                	shl    edx,cl
c0027a5f:	85 d2                	test   edx,edx
c0027a61:	0f 95 c2             	setne  dl
c0027a64:	0f b6 d2             	movzx  edx,dl
c0027a67:	09 d7                	or     edi,edx
c0027a69:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a6c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a6f:	29 fa                	sub    edx,edi
c0027a71:	19 c6                	sbb    esi,eax
c0027a73:	eb be                	jmp    c0027a33 <__adddf3+0x43c>
c0027a75:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a78:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a7b:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a81:	75 6a                	jne    c0027aed <__adddf3+0x4f6>
c0027a83:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a87:	75 58                	jne    c0027ae1 <__adddf3+0x4ea>
c0027a89:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a8c:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a8f:	89 d6                	mov    esi,edx
c0027a91:	09 c6                	or     esi,eax
c0027a93:	75 17                	jne    c0027aac <__adddf3+0x4b5>
c0027a95:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a98:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a9b:	85 db                	test   ebx,ebx
c0027a9d:	0f 85 99 01 00 00    	jne    c0027c3c <__adddf3+0x645>
c0027aa3:	31 ff                	xor    edi,edi
c0027aa5:	31 c9                	xor    ecx,ecx
c0027aa7:	e9 90 01 00 00       	jmp    c0027c3c <__adddf3+0x645>
c0027aac:	85 db                	test   ebx,ebx
c0027aae:	0f 84 88 01 00 00    	je     c0027c3c <__adddf3+0x645>
c0027ab4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027ab7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027aba:	85 c0                	test   eax,eax
c0027abc:	79 10                	jns    c0027ace <__adddf3+0x4d7>
c0027abe:	31 c9                	xor    ecx,ecx
c0027ac0:	f7 da                	neg    edx
c0027ac2:	0f 95 c1             	setne  cl
c0027ac5:	01 c8                	add    eax,ecx
c0027ac7:	f7 d8                	neg    eax
c0027ac9:	e9 2f 01 00 00       	jmp    c0027bfd <__adddf3+0x606>
c0027ace:	31 ff                	xor    edi,edi
c0027ad0:	31 c9                	xor    ecx,ecx
c0027ad2:	89 c3                	mov    ebx,eax
c0027ad4:	09 d3                	or     ebx,edx
c0027ad6:	0f 84 60 01 00 00    	je     c0027c3c <__adddf3+0x645>
c0027adc:	e9 05 01 00 00       	jmp    c0027be6 <__adddf3+0x5ef>
c0027ae1:	31 ff                	xor    edi,edi
c0027ae3:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ae8:	e9 4f 01 00 00       	jmp    c0027c3c <__adddf3+0x645>
c0027aed:	89 c1                	mov    ecx,eax
c0027aef:	89 d0                	mov    eax,edx
c0027af1:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027af4:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027af7:	89 ca                	mov    edx,ecx
c0027af9:	85 c9                	test   ecx,ecx
c0027afb:	79 2c                	jns    c0027b29 <__adddf3+0x532>
c0027afd:	31 c9                	xor    ecx,ecx
c0027aff:	f7 d8                	neg    eax
c0027b01:	0f 95 c1             	setne  cl
c0027b04:	01 ca                	add    edx,ecx
c0027b06:	f7 da                	neg    edx
c0027b08:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b0b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b0e:	eb 19                	jmp    c0027b29 <__adddf3+0x532>
c0027b10:	85 c0                	test   eax,eax
c0027b12:	0f 89 e5 00 00 00    	jns    c0027bfd <__adddf3+0x606>
c0027b18:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b1d:	89 c1                	mov    ecx,eax
c0027b1f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b22:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b25:	89 d0                	mov    eax,edx
c0027b27:	89 ca                	mov    edx,ecx
c0027b29:	85 d2                	test   edx,edx
c0027b2b:	74 59                	je     c0027b86 <__adddf3+0x58f>
c0027b2d:	0f bd da             	bsr    ebx,edx
c0027b30:	83 f3 1f             	xor    ebx,0x1f
c0027b33:	88 d9                	mov    cl,bl
c0027b35:	d3 e2                	shl    edx,cl
c0027b37:	bf 20 00 00 00       	mov    edi,0x20
c0027b3c:	89 f9                	mov    ecx,edi
c0027b3e:	29 d9                	sub    ecx,ebx
c0027b40:	89 c6                	mov    esi,eax
c0027b42:	d3 ee                	shr    esi,cl
c0027b44:	09 d6                	or     esi,edx
c0027b46:	88 d9                	mov    cl,bl
c0027b48:	d3 e0                	shl    eax,cl
c0027b4a:	89 c2                	mov    edx,eax
c0027b4c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b4f:	25 ff 07 00 00       	and    eax,0x7ff
c0027b54:	39 d8                	cmp    eax,ebx
c0027b56:	7f 22                	jg     c0027b7a <__adddf3+0x583>
c0027b58:	29 c3                	sub    ebx,eax
c0027b5a:	43                   	inc    ebx
c0027b5b:	88 d9                	mov    cl,bl
c0027b5d:	d3 ea                	shr    edx,cl
c0027b5f:	29 df                	sub    edi,ebx
c0027b61:	89 f9                	mov    ecx,edi
c0027b63:	89 f0                	mov    eax,esi
c0027b65:	d3 e0                	shl    eax,cl
c0027b67:	09 c2                	or     edx,eax
c0027b69:	89 f0                	mov    eax,esi
c0027b6b:	88 d9                	mov    cl,bl
c0027b6d:	d3 e8                	shr    eax,cl
c0027b6f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b72:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b78:	eb 6f                	jmp    c0027be9 <__adddf3+0x5f2>
c0027b7a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b7d:	29 d8                	sub    eax,ebx
c0027b7f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b82:	89 f0                	mov    eax,esi
c0027b84:	eb 59                	jmp    c0027bdf <__adddf3+0x5e8>
c0027b86:	85 c0                	test   eax,eax
c0027b88:	74 6a                	je     c0027bf4 <__adddf3+0x5fd>
c0027b8a:	0f bd c8             	bsr    ecx,eax
c0027b8d:	83 f1 1f             	xor    ecx,0x1f
c0027b90:	d3 e0                	shl    eax,cl
c0027b92:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b95:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b9b:	83 c1 20             	add    ecx,0x20
c0027b9e:	39 cb                	cmp    ebx,ecx
c0027ba0:	7f 35                	jg     c0027bd7 <__adddf3+0x5e0>
c0027ba2:	29 d9                	sub    ecx,ebx
c0027ba4:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ba7:	83 fe 1f             	cmp    esi,0x1f
c0027baa:	7e 09                	jle    c0027bb5 <__adddf3+0x5be>
c0027bac:	83 e9 1f             	sub    ecx,0x1f
c0027baf:	d3 e8                	shr    eax,cl
c0027bb1:	89 c3                	mov    ebx,eax
c0027bb3:	eb 11                	jmp    c0027bc6 <__adddf3+0x5cf>
c0027bb5:	b9 20 00 00 00       	mov    ecx,0x20
c0027bba:	29 f1                	sub    ecx,esi
c0027bbc:	89 c3                	mov    ebx,eax
c0027bbe:	d3 e3                	shl    ebx,cl
c0027bc0:	89 f1                	mov    ecx,esi
c0027bc2:	d3 e8                	shr    eax,cl
c0027bc4:	89 c2                	mov    edx,eax
c0027bc6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bc9:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd1:	89 d0                	mov    eax,edx
c0027bd3:	89 da                	mov    edx,ebx
c0027bd5:	eb 26                	jmp    c0027bfd <__adddf3+0x606>
c0027bd7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bda:	29 cf                	sub    edi,ecx
c0027bdc:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bdf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027be4:	eb 17                	jmp    c0027bfd <__adddf3+0x606>
c0027be6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027be9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bec:	eb 0f                	jmp    c0027bfd <__adddf3+0x606>
c0027bee:	31 d2                	xor    edx,edx
c0027bf0:	31 c0                	xor    eax,eax
c0027bf2:	eb 09                	jmp    c0027bfd <__adddf3+0x606>
c0027bf4:	89 c2                	mov    edx,eax
c0027bf6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027bfd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c00:	c1 e1 14             	shl    ecx,0x14
c0027c03:	89 c3                	mov    ebx,eax
c0027c05:	c1 eb 0b             	shr    ebx,0xb
c0027c08:	09 d9                	or     ecx,ebx
c0027c0a:	89 d3                	mov    ebx,edx
c0027c0c:	c1 eb 0b             	shr    ebx,0xb
c0027c0f:	c1 e0 15             	shl    eax,0x15
c0027c12:	09 d8                	or     eax,ebx
c0027c14:	89 c7                	mov    edi,eax
c0027c16:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c1c:	0f 95 c0             	setne  al
c0027c1f:	89 c6                	mov    esi,eax
c0027c21:	09 f3                	or     ebx,esi
c0027c23:	83 e3 01             	and    ebx,0x1
c0027c26:	c1 ea 0a             	shr    edx,0xa
c0027c29:	21 da                	and    edx,ebx
c0027c2b:	89 f8                	mov    eax,edi
c0027c2d:	01 d0                	add    eax,edx
c0027c2f:	83 d1 00             	adc    ecx,0x0
c0027c32:	89 c7                	mov    edi,eax
c0027c34:	eb 06                	jmp    c0027c3c <__adddf3+0x645>
c0027c36:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c39:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c3c:	89 f8                	mov    eax,edi
c0027c3e:	89 ca                	mov    edx,ecx
c0027c40:	83 c4 24             	add    esp,0x24
c0027c43:	5b                   	pop    ebx
c0027c44:	5e                   	pop    esi
c0027c45:	5f                   	pop    edi
c0027c46:	5d                   	pop    ebp
c0027c47:	c3                   	ret    

c0027c48 <__subdf3>:
c0027c48:	55                   	push   ebp
c0027c49:	89 e5                	mov    ebp,esp
c0027c4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c4e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c51:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c57:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c5a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c5d:	5d                   	pop    ebp
c0027c5e:	e9 94 f9 ff ff       	jmp    c00275f7 <__adddf3>

c0027c63 <__negdf2>:
c0027c63:	55                   	push   ebp
c0027c64:	89 e5                	mov    ebp,esp
c0027c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c69:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c6c:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c72:	5d                   	pop    ebp
c0027c73:	c3                   	ret    

c0027c74 <__muldf3>:
c0027c74:	55                   	push   ebp
c0027c75:	89 e5                	mov    ebp,esp
c0027c77:	57                   	push   edi
c0027c78:	56                   	push   esi
c0027c79:	53                   	push   ebx
c0027c7a:	83 ec 24             	sub    esp,0x24
c0027c7d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c83:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c86:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c89:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c8c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c8f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c92:	89 c8                	mov    eax,ecx
c0027c94:	c1 f8 14             	sar    eax,0x14
c0027c97:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c9a:	89 f8                	mov    eax,edi
c0027c9c:	89 fb                	mov    ebx,edi
c0027c9e:	c1 e3 0b             	shl    ebx,0xb
c0027ca1:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ca4:	c1 e1 0b             	shl    ecx,0xb
c0027ca7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027cad:	c1 e8 15             	shr    eax,0x15
c0027cb0:	09 c1                	or     ecx,eax
c0027cb2:	89 d6                	mov    esi,edx
c0027cb4:	89 d0                	mov    eax,edx
c0027cb6:	c1 f8 14             	sar    eax,0x14
c0027cb9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027cbc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027cbf:	89 c3                	mov    ebx,eax
c0027cc1:	c1 e3 0b             	shl    ebx,0xb
c0027cc4:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027cc7:	c1 e6 0b             	shl    esi,0xb
c0027cca:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cd0:	c1 e8 15             	shr    eax,0x15
c0027cd3:	09 c6                	or     esi,eax
c0027cd5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cd8:	25 ff 07 00 00       	and    eax,0x7ff
c0027cdd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ce0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ce3:	25 ff 07 00 00       	and    eax,0x7ff
c0027ce8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ceb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027cee:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027cf1:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027cf8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cfb:	40                   	inc    eax
c0027cfc:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d01:	0f 85 8d 00 00 00    	jne    c0027d94 <__muldf3+0x120>
c0027d07:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d0a:	09 c8                	or     eax,ecx
c0027d0c:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d10:	74 44                	je     c0027d56 <__muldf3+0xe2>
c0027d12:	85 c0                	test   eax,eax
c0027d14:	0f 85 31 02 00 00    	jne    c0027f4b <__muldf3+0x2d7>
c0027d1a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d1d:	40                   	inc    eax
c0027d1e:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d23:	75 13                	jne    c0027d38 <__muldf3+0xc4>
c0027d25:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d28:	09 f1                	or     ecx,esi
c0027d2a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d2e:	74 22                	je     c0027d52 <__muldf3+0xde>
c0027d30:	85 c9                	test   ecx,ecx
c0027d32:	0f 85 0d 02 00 00    	jne    c0027f45 <__muldf3+0x2d1>
c0027d38:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d3c:	0f 89 09 02 00 00    	jns    c0027f4b <__muldf3+0x2d7>
c0027d42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d45:	05 00 00 00 80       	add    eax,0x80000000
c0027d4a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d4d:	e9 f9 01 00 00       	jmp    c0027f4b <__muldf3+0x2d7>
c0027d52:	85 c9                	test   ecx,ecx
c0027d54:	eb 2e                	jmp    c0027d84 <__muldf3+0x110>
c0027d56:	85 c0                	test   eax,eax
c0027d58:	74 20                	je     c0027d7a <__muldf3+0x106>
c0027d5a:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d5d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d60:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d63:	c1 ef 1f             	shr    edi,0x1f
c0027d66:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d69:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d6c:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d72:	09 f9                	or     ecx,edi
c0027d74:	78 1e                	js     c0027d94 <__muldf3+0x120>
c0027d76:	89 c3                	mov    ebx,eax
c0027d78:	eb e0                	jmp    c0027d5a <__muldf3+0xe6>
c0027d7a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d7d:	f7 d0                	not    eax
c0027d7f:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d84:	75 b2                	jne    c0027d38 <__muldf3+0xc4>
c0027d86:	31 ff                	xor    edi,edi
c0027d88:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d8f:	e9 b7 01 00 00       	jmp    c0027f4b <__muldf3+0x2d7>
c0027d94:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d97:	40                   	inc    eax
c0027d98:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d9d:	75 57                	jne    c0027df6 <__muldf3+0x182>
c0027d9f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027da2:	09 f0                	or     eax,esi
c0027da4:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027da8:	74 23                	je     c0027dcd <__muldf3+0x159>
c0027daa:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dae:	0f 89 91 01 00 00    	jns    c0027f45 <__muldf3+0x2d1>
c0027db4:	85 c0                	test   eax,eax
c0027db6:	0f 85 89 01 00 00    	jne    c0027f45 <__muldf3+0x2d1>
c0027dbc:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027dbf:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027dc5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dc8:	e9 7e 01 00 00       	jmp    c0027f4b <__muldf3+0x2d7>
c0027dcd:	85 c0                	test   eax,eax
c0027dcf:	75 0c                	jne    c0027ddd <__muldf3+0x169>
c0027dd1:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dd5:	0f 89 6a 01 00 00    	jns    c0027f45 <__muldf3+0x2d1>
c0027ddb:	eb df                	jmp    c0027dbc <__muldf3+0x148>
c0027ddd:	01 f6                	add    esi,esi
c0027ddf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027de2:	c1 ea 1f             	shr    edx,0x1f
c0027de5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027de8:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027deb:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dee:	09 d6                	or     esi,edx
c0027df0:	78 04                	js     c0027df6 <__muldf3+0x182>
c0027df2:	89 c3                	mov    ebx,eax
c0027df4:	eb e7                	jmp    c0027ddd <__muldf3+0x169>
c0027df6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027dfc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e02:	89 c8                	mov    eax,ecx
c0027e04:	f7 e6                	mul    esi
c0027e06:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e09:	89 c7                	mov    edi,eax
c0027e0b:	89 c8                	mov    eax,ecx
c0027e0d:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e10:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e13:	89 c1                	mov    ecx,eax
c0027e15:	89 f0                	mov    eax,esi
c0027e17:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e1a:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e1d:	89 c6                	mov    esi,eax
c0027e1f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e22:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e25:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e28:	31 c0                	xor    eax,eax
c0027e2a:	01 f1                	add    ecx,esi
c0027e2c:	0f 92 c0             	setb   al
c0027e2f:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e32:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e35:	83 d6 00             	adc    esi,0x0
c0027e38:	01 c7                	add    edi,eax
c0027e3a:	83 d6 00             	adc    esi,0x0
c0027e3d:	01 ca                	add    edx,ecx
c0027e3f:	0f 92 c1             	setb   cl
c0027e42:	0f b6 c9             	movzx  ecx,cl
c0027e45:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e48:	83 d6 00             	adc    esi,0x0
c0027e4b:	01 cf                	add    edi,ecx
c0027e4d:	83 d6 00             	adc    esi,0x0
c0027e50:	31 c9                	xor    ecx,ecx
c0027e52:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e55:	0f 95 c1             	setne  cl
c0027e58:	09 cf                	or     edi,ecx
c0027e5a:	85 f6                	test   esi,esi
c0027e5c:	78 0c                	js     c0027e6a <__muldf3+0x1f6>
c0027e5e:	01 f6                	add    esi,esi
c0027e60:	89 f8                	mov    eax,edi
c0027e62:	c1 e8 1f             	shr    eax,0x1f
c0027e65:	09 c6                	or     esi,eax
c0027e67:	01 ff                	add    edi,edi
c0027e69:	4b                   	dec    ebx
c0027e6a:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e70:	0f 8f 85 00 00 00    	jg     c0027efb <__muldf3+0x287>
c0027e76:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e7c:	85 db                	test   ebx,ebx
c0027e7e:	0f 8f 84 00 00 00    	jg     c0027f08 <__muldf3+0x294>
c0027e84:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e87:	7c 79                	jl     c0027f02 <__muldf3+0x28e>
c0027e89:	ba 01 00 00 00       	mov    edx,0x1
c0027e8e:	29 da                	sub    edx,ebx
c0027e90:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e96:	83 fa 1f             	cmp    edx,0x1f
c0027e99:	7e 30                	jle    c0027ecb <__muldf3+0x257>
c0027e9b:	83 fa 20             	cmp    edx,0x20
c0027e9e:	75 0b                	jne    c0027eab <__muldf3+0x237>
c0027ea0:	31 c0                	xor    eax,eax
c0027ea2:	85 ff                	test   edi,edi
c0027ea4:	0f 95 c0             	setne  al
c0027ea7:	89 c7                	mov    edi,eax
c0027ea9:	eb 1a                	jmp    c0027ec5 <__muldf3+0x251>
c0027eab:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027eae:	89 f0                	mov    eax,esi
c0027eb0:	d3 e0                	shl    eax,cl
c0027eb2:	09 f8                	or     eax,edi
c0027eb4:	0f 95 c0             	setne  al
c0027eb7:	0f b6 c0             	movzx  eax,al
c0027eba:	89 c7                	mov    edi,eax
c0027ebc:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ec1:	29 d9                	sub    ecx,ebx
c0027ec3:	d3 ee                	shr    esi,cl
c0027ec5:	09 f7                	or     edi,esi
c0027ec7:	31 db                	xor    ebx,ebx
c0027ec9:	eb 3b                	jmp    c0027f06 <__muldf3+0x292>
c0027ecb:	83 c3 1f             	add    ebx,0x1f
c0027ece:	89 f0                	mov    eax,esi
c0027ed0:	88 d9                	mov    cl,bl
c0027ed2:	d3 e0                	shl    eax,cl
c0027ed4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ed7:	89 f8                	mov    eax,edi
c0027ed9:	88 d1                	mov    cl,dl
c0027edb:	d3 e8                	shr    eax,cl
c0027edd:	89 c1                	mov    ecx,eax
c0027edf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ee2:	09 c8                	or     eax,ecx
c0027ee4:	88 d9                	mov    cl,bl
c0027ee6:	d3 e7                	shl    edi,cl
c0027ee8:	31 db                	xor    ebx,ebx
c0027eea:	85 ff                	test   edi,edi
c0027eec:	0f 95 c3             	setne  bl
c0027eef:	89 df                	mov    edi,ebx
c0027ef1:	09 c7                	or     edi,eax
c0027ef3:	88 d1                	mov    cl,dl
c0027ef5:	d3 ee                	shr    esi,cl
c0027ef7:	31 db                	xor    ebx,ebx
c0027ef9:	eb 0d                	jmp    c0027f08 <__muldf3+0x294>
c0027efb:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f00:	eb 02                	jmp    c0027f04 <__muldf3+0x290>
c0027f02:	31 db                	xor    ebx,ebx
c0027f04:	31 ff                	xor    edi,edi
c0027f06:	31 f6                	xor    esi,esi
c0027f08:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f0b:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f0e:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f13:	09 c3                	or     ebx,eax
c0027f15:	c1 e3 14             	shl    ebx,0x14
c0027f18:	89 f0                	mov    eax,esi
c0027f1a:	c1 e8 0b             	shr    eax,0xb
c0027f1d:	09 c3                	or     ebx,eax
c0027f1f:	89 f8                	mov    eax,edi
c0027f21:	c1 e8 0b             	shr    eax,0xb
c0027f24:	c1 e6 15             	shl    esi,0x15
c0027f27:	09 c6                	or     esi,eax
c0027f29:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f2f:	0f 95 c1             	setne  cl
c0027f32:	09 c8                	or     eax,ecx
c0027f34:	83 e0 01             	and    eax,0x1
c0027f37:	c1 ef 0a             	shr    edi,0xa
c0027f3a:	21 c7                	and    edi,eax
c0027f3c:	01 f7                	add    edi,esi
c0027f3e:	83 d3 00             	adc    ebx,0x0
c0027f41:	89 da                	mov    edx,ebx
c0027f43:	eb 03                	jmp    c0027f48 <__muldf3+0x2d4>
c0027f45:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f48:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f4b:	89 f8                	mov    eax,edi
c0027f4d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f50:	83 c4 24             	add    esp,0x24
c0027f53:	5b                   	pop    ebx
c0027f54:	5e                   	pop    esi
c0027f55:	5f                   	pop    edi
c0027f56:	5d                   	pop    ebp
c0027f57:	c3                   	ret    

c0027f58 <__divdf3>:
c0027f58:	55                   	push   ebp
c0027f59:	89 e5                	mov    ebp,esp
c0027f5b:	57                   	push   edi
c0027f5c:	56                   	push   esi
c0027f5d:	53                   	push   ebx
c0027f5e:	83 ec 2c             	sub    esp,0x2c
c0027f61:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f64:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f67:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f6a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f6d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f70:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f73:	89 ce                	mov    esi,ecx
c0027f75:	89 c8                	mov    eax,ecx
c0027f77:	c1 f8 14             	sar    eax,0x14
c0027f7a:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f7d:	89 f8                	mov    eax,edi
c0027f7f:	89 fb                	mov    ebx,edi
c0027f81:	c1 e3 0b             	shl    ebx,0xb
c0027f84:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f87:	c1 e6 0b             	shl    esi,0xb
c0027f8a:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f90:	c1 e8 15             	shr    eax,0x15
c0027f93:	09 c6                	or     esi,eax
c0027f95:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f98:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f9b:	89 c2                	mov    edx,eax
c0027f9d:	c1 fa 14             	sar    edx,0x14
c0027fa0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027fa3:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027fa6:	89 de                	mov    esi,ebx
c0027fa8:	c1 e6 0b             	shl    esi,0xb
c0027fab:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027fae:	c1 e0 0b             	shl    eax,0xb
c0027fb1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fb6:	c1 eb 15             	shr    ebx,0x15
c0027fb9:	09 d8                	or     eax,ebx
c0027fbb:	89 c2                	mov    edx,eax
c0027fbd:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fc0:	25 ff 07 00 00       	and    eax,0x7ff
c0027fc5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027fc8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027fcb:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027fd1:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027fd4:	29 d8                	sub    eax,ebx
c0027fd6:	05 ff 03 00 00       	add    eax,0x3ff
c0027fdb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027fde:	46                   	inc    esi
c0027fdf:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fe5:	0f 85 a5 00 00 00    	jne    c0028090 <__divdf3+0x138>
c0027feb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027fee:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ff1:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ff5:	74 2a                	je     c0028021 <__divdf3+0xc9>
c0027ff7:	85 f6                	test   esi,esi
c0027ff9:	0f 85 cc 02 00 00    	jne    c00282cb <__divdf3+0x373>
c0027fff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028002:	40                   	inc    eax
c0028003:	a9 fe 07 00 00       	test   eax,0x7fe
c0028008:	75 26                	jne    c0028030 <__divdf3+0xd8>
c002800a:	85 db                	test   ebx,ebx
c002800c:	74 22                	je     c0028030 <__divdf3+0xd8>
c002800e:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028011:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028014:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028017:	09 d0                	or     eax,edx
c0028019:	0f 85 ac 02 00 00    	jne    c00282cb <__divdf3+0x373>
c002801f:	eb 63                	jmp    c0028084 <__divdf3+0x12c>
c0028021:	85 f6                	test   esi,esi
c0028023:	75 22                	jne    c0028047 <__divdf3+0xef>
c0028025:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028028:	40                   	inc    eax
c0028029:	a9 fe 07 00 00       	test   eax,0x7fe
c002802e:	74 36                	je     c0028066 <__divdf3+0x10e>
c0028030:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028034:	0f 89 91 02 00 00    	jns    c00282cb <__divdf3+0x373>
c002803a:	89 f8                	mov    eax,edi
c002803c:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028042:	e9 80 02 00 00       	jmp    c00282c7 <__divdf3+0x36f>
c0028047:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002804a:	01 f6                	add    esi,esi
c002804c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002804f:	c1 ef 1f             	shr    edi,0x1f
c0028052:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028055:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028058:	8d 48 ff             	lea    ecx,[eax-0x1]
c002805b:	09 f7                	or     edi,esi
c002805d:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028060:	78 2e                	js     c0028090 <__divdf3+0x138>
c0028062:	89 c8                	mov    eax,ecx
c0028064:	eb e1                	jmp    c0028047 <__divdf3+0xef>
c0028066:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028069:	09 d0                	or     eax,edx
c002806b:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002806f:	74 0f                	je     c0028080 <__divdf3+0x128>
c0028071:	85 c0                	test   eax,eax
c0028073:	74 bb                	je     c0028030 <__divdf3+0xd8>
c0028075:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028078:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002807b:	e9 4b 02 00 00       	jmp    c00282cb <__divdf3+0x373>
c0028080:	85 c0                	test   eax,eax
c0028082:	75 ac                	jne    c0028030 <__divdf3+0xd8>
c0028084:	31 ff                	xor    edi,edi
c0028086:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002808b:	e9 3b 02 00 00       	jmp    c00282cb <__divdf3+0x373>
c0028090:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028093:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028096:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c002809c:	75 6b                	jne    c0028109 <__divdf3+0x1b1>
c002809e:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280a1:	09 d6                	or     esi,edx
c00280a3:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280a7:	74 28                	je     c00280d1 <__divdf3+0x179>
c00280a9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280ac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280af:	85 f6                	test   esi,esi
c00280b1:	0f 85 14 02 00 00    	jne    c00282cb <__divdf3+0x373>
c00280b7:	31 ff                	xor    edi,edi
c00280b9:	31 c9                	xor    ecx,ecx
c00280bb:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280be:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280c1:	0f 89 04 02 00 00    	jns    c00282cb <__divdf3+0x373>
c00280c7:	b9 00 00 00 80       	mov    ecx,0x80000000
c00280cc:	e9 fa 01 00 00       	jmp    c00282cb <__divdf3+0x373>
c00280d1:	85 f6                	test   esi,esi
c00280d3:	75 1b                	jne    c00280f0 <__divdf3+0x198>
c00280d5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280d8:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280db:	25 00 00 00 80       	and    eax,0x80000000
c00280e0:	31 c9                	xor    ecx,ecx
c00280e2:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00280e7:	89 cf                	mov    edi,ecx
c00280e9:	89 c1                	mov    ecx,eax
c00280eb:	e9 db 01 00 00       	jmp    c00282cb <__divdf3+0x373>
c00280f0:	01 d2                	add    edx,edx
c00280f2:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280f5:	c1 eb 1f             	shr    ebx,0x1f
c00280f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280fb:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00280fe:	8d 48 01             	lea    ecx,[eax+0x1]
c0028101:	09 da                	or     edx,ebx
c0028103:	78 04                	js     c0028109 <__divdf3+0x1b1>
c0028105:	89 c8                	mov    eax,ecx
c0028107:	eb e7                	jmp    c00280f0 <__divdf3+0x198>
c0028109:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002810c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028112:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028118:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002811b:	39 d6                	cmp    esi,edx
c002811d:	77 0d                	ja     c002812c <__divdf3+0x1d4>
c002811f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028122:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028125:	72 1b                	jb     c0028142 <__divdf3+0x1ea>
c0028127:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002812a:	75 16                	jne    c0028142 <__divdf3+0x1ea>
c002812c:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002812f:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028132:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028135:	83 de 00             	sbb    esi,0x0
c0028138:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002813b:	ba 01 00 00 00       	mov    edx,0x1
c0028140:	eb 02                	jmp    c0028144 <__divdf3+0x1ec>
c0028142:	31 d2                	xor    edx,edx
c0028144:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002814b:	31 ff                	xor    edi,edi
c002814d:	01 ff                	add    edi,edi
c002814f:	89 d1                	mov    ecx,edx
c0028151:	c1 e9 1f             	shr    ecx,0x1f
c0028154:	09 cf                	or     edi,ecx
c0028156:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028159:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c002815c:	89 da                	mov    edx,ebx
c002815e:	89 f3                	mov    ebx,esi
c0028160:	8d 34 36             	lea    esi,[esi+esi*1]
c0028163:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028166:	c1 e9 1f             	shr    ecx,0x1f
c0028169:	09 ce                	or     esi,ecx
c002816b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002816e:	01 c9                	add    ecx,ecx
c0028170:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028173:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028176:	85 db                	test   ebx,ebx
c0028178:	78 29                	js     c00281a3 <__divdf3+0x24b>
c002817a:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c002817d:	72 07                	jb     c0028186 <__divdf3+0x22e>
c002817f:	75 3c                	jne    c00281bd <__divdf3+0x265>
c0028181:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028184:	77 37                	ja     c00281bd <__divdf3+0x265>
c0028186:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028189:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c002818c:	31 d2                	xor    edx,edx
c002818e:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028191:	0f 97 c2             	seta   dl
c0028194:	29 d6                	sub    esi,edx
c0028196:	89 d9                	mov    ecx,ebx
c0028198:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002819b:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002819e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00281a1:	eb 17                	jmp    c00281ba <__divdf3+0x262>
c00281a3:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281a6:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281a9:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281ac:	0f 97 c1             	seta   cl
c00281af:	0f b6 c9             	movzx  ecx,cl
c00281b2:	29 ce                	sub    esi,ecx
c00281b4:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00281b7:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00281ba:	83 ca 01             	or     edx,0x1
c00281bd:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00281c0:	75 8b                	jne    c002814d <__divdf3+0x1f5>
c00281c2:	c1 e7 09             	shl    edi,0x9
c00281c5:	89 d1                	mov    ecx,edx
c00281c7:	c1 e9 17             	shr    ecx,0x17
c00281ca:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281cd:	09 f3                	or     ebx,esi
c00281cf:	0f 95 c3             	setne  bl
c00281d2:	0f b6 db             	movzx  ebx,bl
c00281d5:	c1 e2 09             	shl    edx,0x9
c00281d8:	09 d3                	or     ebx,edx
c00281da:	89 ca                	mov    edx,ecx
c00281dc:	09 fa                	or     edx,edi
c00281de:	78 0c                	js     c00281ec <__divdf3+0x294>
c00281e0:	01 d2                	add    edx,edx
c00281e2:	89 d9                	mov    ecx,ebx
c00281e4:	c1 e9 1f             	shr    ecx,0x1f
c00281e7:	09 ca                	or     edx,ecx
c00281e9:	01 db                	add    ebx,ebx
c00281eb:	48                   	dec    eax
c00281ec:	3d fe 07 00 00       	cmp    eax,0x7fe
c00281f1:	0f 8f 83 00 00 00    	jg     c002827a <__divdf3+0x322>
c00281f7:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00281fd:	85 c0                	test   eax,eax
c00281ff:	0f 8f 82 00 00 00    	jg     c0028287 <__divdf3+0x32f>
c0028205:	83 f8 cc             	cmp    eax,0xffffffcc
c0028208:	7c 77                	jl     c0028281 <__divdf3+0x329>
c002820a:	be 01 00 00 00       	mov    esi,0x1
c002820f:	29 c6                	sub    esi,eax
c0028211:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028217:	83 fe 1f             	cmp    esi,0x1f
c002821a:	7e 2f                	jle    c002824b <__divdf3+0x2f3>
c002821c:	83 fe 20             	cmp    esi,0x20
c002821f:	75 0a                	jne    c002822b <__divdf3+0x2d3>
c0028221:	85 db                	test   ebx,ebx
c0028223:	0f 95 c3             	setne  bl
c0028226:	0f b6 db             	movzx  ebx,bl
c0028229:	eb 1a                	jmp    c0028245 <__divdf3+0x2ed>
c002822b:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002822e:	89 d7                	mov    edi,edx
c0028230:	d3 e7                	shl    edi,cl
c0028232:	89 f9                	mov    ecx,edi
c0028234:	09 d9                	or     ecx,ebx
c0028236:	0f 95 c3             	setne  bl
c0028239:	0f b6 db             	movzx  ebx,bl
c002823c:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028241:	29 c1                	sub    ecx,eax
c0028243:	d3 ea                	shr    edx,cl
c0028245:	09 d3                	or     ebx,edx
c0028247:	31 c0                	xor    eax,eax
c0028249:	eb 3a                	jmp    c0028285 <__divdf3+0x32d>
c002824b:	83 c0 1f             	add    eax,0x1f
c002824e:	89 d7                	mov    edi,edx
c0028250:	88 c1                	mov    cl,al
c0028252:	d3 e7                	shl    edi,cl
c0028254:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028257:	89 df                	mov    edi,ebx
c0028259:	89 f1                	mov    ecx,esi
c002825b:	d3 ef                	shr    edi,cl
c002825d:	89 f9                	mov    ecx,edi
c002825f:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028262:	09 cf                	or     edi,ecx
c0028264:	88 c1                	mov    cl,al
c0028266:	d3 e3                	shl    ebx,cl
c0028268:	85 db                	test   ebx,ebx
c002826a:	0f 95 c3             	setne  bl
c002826d:	0f b6 db             	movzx  ebx,bl
c0028270:	09 fb                	or     ebx,edi
c0028272:	89 f1                	mov    ecx,esi
c0028274:	d3 ea                	shr    edx,cl
c0028276:	31 c0                	xor    eax,eax
c0028278:	eb 0d                	jmp    c0028287 <__divdf3+0x32f>
c002827a:	b8 ff 07 00 00       	mov    eax,0x7ff
c002827f:	eb 02                	jmp    c0028283 <__divdf3+0x32b>
c0028281:	31 c0                	xor    eax,eax
c0028283:	31 db                	xor    ebx,ebx
c0028285:	31 d2                	xor    edx,edx
c0028287:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002828a:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c002828d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028293:	09 c8                	or     eax,ecx
c0028295:	c1 e0 14             	shl    eax,0x14
c0028298:	89 d1                	mov    ecx,edx
c002829a:	c1 e9 0b             	shr    ecx,0xb
c002829d:	09 c8                	or     eax,ecx
c002829f:	89 c6                	mov    esi,eax
c00282a1:	89 d9                	mov    ecx,ebx
c00282a3:	c1 e9 0b             	shr    ecx,0xb
c00282a6:	c1 e2 15             	shl    edx,0x15
c00282a9:	09 ca                	or     edx,ecx
c00282ab:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00282b1:	0f 95 c0             	setne  al
c00282b4:	09 c1                	or     ecx,eax
c00282b6:	83 e1 01             	and    ecx,0x1
c00282b9:	c1 eb 0a             	shr    ebx,0xa
c00282bc:	21 cb                	and    ebx,ecx
c00282be:	01 d3                	add    ebx,edx
c00282c0:	89 d8                	mov    eax,ebx
c00282c2:	83 d6 00             	adc    esi,0x0
c00282c5:	89 f2                	mov    edx,esi
c00282c7:	89 c7                	mov    edi,eax
c00282c9:	89 d1                	mov    ecx,edx
c00282cb:	89 f8                	mov    eax,edi
c00282cd:	89 ca                	mov    edx,ecx
c00282cf:	83 c4 2c             	add    esp,0x2c
c00282d2:	5b                   	pop    ebx
c00282d3:	5e                   	pop    esi
c00282d4:	5f                   	pop    edi
c00282d5:	5d                   	pop    ebp
c00282d6:	c3                   	ret    

c00282d7 <__floatsidf>:
c00282d7:	55                   	push   ebp
c00282d8:	89 e5                	mov    ebp,esp
c00282da:	56                   	push   esi
c00282db:	53                   	push   ebx
c00282dc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282df:	85 db                	test   ebx,ebx
c00282e1:	7e 15                	jle    c00282f8 <__floatsidf+0x21>
c00282e3:	0f bd cb             	bsr    ecx,ebx
c00282e6:	83 f1 1f             	xor    ecx,0x1f
c00282e9:	d3 e3                	shl    ebx,cl
c00282eb:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282f1:	b8 1e 04 00 00       	mov    eax,0x41e
c00282f6:	eb 21                	jmp    c0028319 <__floatsidf+0x42>
c00282f8:	b8 00 00 00 00       	mov    eax,0x0
c00282fd:	ba 00 00 00 00       	mov    edx,0x0
c0028302:	74 2a                	je     c002832e <__floatsidf+0x57>
c0028304:	f7 db                	neg    ebx
c0028306:	0f bd cb             	bsr    ecx,ebx
c0028309:	83 f1 1f             	xor    ecx,0x1f
c002830c:	d3 e3                	shl    ebx,cl
c002830e:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028314:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028319:	29 c8                	sub    eax,ecx
c002831b:	c1 e0 14             	shl    eax,0x14
c002831e:	89 c1                	mov    ecx,eax
c0028320:	89 de                	mov    esi,ebx
c0028322:	c1 ee 0b             	shr    esi,0xb
c0028325:	09 f1                	or     ecx,esi
c0028327:	89 ca                	mov    edx,ecx
c0028329:	c1 e3 15             	shl    ebx,0x15
c002832c:	89 d8                	mov    eax,ebx
c002832e:	5b                   	pop    ebx
c002832f:	5e                   	pop    esi
c0028330:	5d                   	pop    ebp
c0028331:	c3                   	ret    

c0028332 <__floatunsidf>:
c0028332:	55                   	push   ebp
c0028333:	89 e5                	mov    ebp,esp
c0028335:	56                   	push   esi
c0028336:	53                   	push   ebx
c0028337:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002833a:	85 db                	test   ebx,ebx
c002833c:	74 2a                	je     c0028368 <__floatunsidf+0x36>
c002833e:	0f bd cb             	bsr    ecx,ebx
c0028341:	83 f1 1f             	xor    ecx,0x1f
c0028344:	d3 e3                	shl    ebx,cl
c0028346:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002834c:	b8 1e 04 00 00       	mov    eax,0x41e
c0028351:	29 c8                	sub    eax,ecx
c0028353:	c1 e0 14             	shl    eax,0x14
c0028356:	89 c1                	mov    ecx,eax
c0028358:	89 de                	mov    esi,ebx
c002835a:	c1 ee 0b             	shr    esi,0xb
c002835d:	09 f1                	or     ecx,esi
c002835f:	89 ca                	mov    edx,ecx
c0028361:	c1 e3 15             	shl    ebx,0x15
c0028364:	89 d8                	mov    eax,ebx
c0028366:	eb 04                	jmp    c002836c <__floatunsidf+0x3a>
c0028368:	31 c0                	xor    eax,eax
c002836a:	31 d2                	xor    edx,edx
c002836c:	5b                   	pop    ebx
c002836d:	5e                   	pop    esi
c002836e:	5d                   	pop    ebp
c002836f:	c3                   	ret    

c0028370 <__fixdfsi>:
c0028370:	55                   	push   ebp
c0028371:	89 e5                	mov    ebp,esp
c0028373:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028376:	89 d1                	mov    ecx,edx
c0028378:	c1 e1 0b             	shl    ecx,0xb
c002837b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028384:	c1 e8 15             	shr    eax,0x15
c0028387:	09 c1                	or     ecx,eax
c0028389:	c1 fa 14             	sar    edx,0x14
c002838c:	78 1f                	js     c00283ad <__fixdfsi+0x3d>
c002838e:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028394:	31 c0                	xor    eax,eax
c0028396:	83 fa 1e             	cmp    edx,0x1e
c0028399:	77 40                	ja     c00283db <__fixdfsi+0x6b>
c002839b:	89 c8                	mov    eax,ecx
c002839d:	0d 00 00 00 80       	or     eax,0x80000000
c00283a2:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283a7:	29 d1                	sub    ecx,edx
c00283a9:	d3 e8                	shr    eax,cl
c00283ab:	eb 2e                	jmp    c00283db <__fixdfsi+0x6b>
c00283ad:	31 c0                	xor    eax,eax
c00283af:	81 c2 01 04 00 00    	add    edx,0x401
c00283b5:	78 24                	js     c00283db <__fixdfsi+0x6b>
c00283b7:	83 fa 1e             	cmp    edx,0x1e
c00283ba:	7e 09                	jle    c00283c5 <__fixdfsi+0x55>
c00283bc:	83 fa 1f             	cmp    edx,0x1f
c00283bf:	75 18                	jne    c00283d9 <__fixdfsi+0x69>
c00283c1:	85 c9                	test   ecx,ecx
c00283c3:	75 14                	jne    c00283d9 <__fixdfsi+0x69>
c00283c5:	89 c8                	mov    eax,ecx
c00283c7:	0d 00 00 00 80       	or     eax,0x80000000
c00283cc:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283d1:	29 d1                	sub    ecx,edx
c00283d3:	d3 e8                	shr    eax,cl
c00283d5:	f7 d8                	neg    eax
c00283d7:	eb 02                	jmp    c00283db <__fixdfsi+0x6b>
c00283d9:	31 c0                	xor    eax,eax
c00283db:	5d                   	pop    ebp
c00283dc:	c3                   	ret    

c00283dd <__fixunsdfsi>:
c00283dd:	55                   	push   ebp
c00283de:	89 e5                	mov    ebp,esp
c00283e0:	53                   	push   ebx
c00283e1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00283e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283e7:	89 d3                	mov    ebx,edx
c00283e9:	c1 fb 14             	sar    ebx,0x14
c00283ec:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00283f2:	31 c0                	xor    eax,eax
c00283f4:	83 fb 1f             	cmp    ebx,0x1f
c00283f7:	77 1d                	ja     c0028416 <__fixunsdfsi+0x39>
c00283f9:	89 d0                	mov    eax,edx
c00283fb:	c1 e0 0b             	shl    eax,0xb
c00283fe:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028403:	c1 e9 15             	shr    ecx,0x15
c0028406:	09 c8                	or     eax,ecx
c0028408:	0d 00 00 00 80       	or     eax,0x80000000
c002840d:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028412:	29 d9                	sub    ecx,ebx
c0028414:	d3 e8                	shr    eax,cl
c0028416:	5b                   	pop    ebx
c0028417:	5d                   	pop    ebp
c0028418:	c3                   	ret    

c0028419 <__cmpdf2>:
c0028419:	55                   	push   ebp
c002841a:	89 e5                	mov    ebp,esp
c002841c:	57                   	push   edi
c002841d:	56                   	push   esi
c002841e:	53                   	push   ebx
c002841f:	83 ec 0c             	sub    esp,0xc
c0028422:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028425:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028428:	89 ca                	mov    edx,ecx
c002842a:	c1 ea 14             	shr    edx,0x14
c002842d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028433:	89 cb                	mov    ebx,ecx
c0028435:	c1 fb 1f             	sar    ebx,0x1f
c0028438:	31 da                	xor    edx,ebx
c002843a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002843d:	89 df                	mov    edi,ebx
c002843f:	c1 e7 0b             	shl    edi,0xb
c0028442:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028445:	c1 e1 0b             	shl    ecx,0xb
c0028448:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002844e:	c1 eb 15             	shr    ebx,0x15
c0028451:	09 d9                	or     ecx,ebx
c0028453:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028456:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028459:	89 ce                	mov    esi,ecx
c002845b:	c1 ee 14             	shr    esi,0x14
c002845e:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028464:	89 cb                	mov    ebx,ecx
c0028466:	c1 fb 1f             	sar    ebx,0x1f
c0028469:	31 de                	xor    esi,ebx
c002846b:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002846e:	89 df                	mov    edi,ebx
c0028470:	c1 e7 0b             	shl    edi,0xb
c0028473:	c1 e1 0b             	shl    ecx,0xb
c0028476:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002847c:	c1 eb 15             	shr    ebx,0x15
c002847f:	09 d9                	or     ecx,ebx
c0028481:	89 d3                	mov    ebx,edx
c0028483:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028489:	43                   	inc    ebx
c002848a:	83 fb 01             	cmp    ebx,0x1
c002848d:	77 08                	ja     c0028497 <__cmpdf2+0x7e>
c002848f:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028492:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028495:	75 68                	jne    c00284ff <__cmpdf2+0xe6>
c0028497:	89 f3                	mov    ebx,esi
c0028499:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002849f:	43                   	inc    ebx
c00284a0:	83 fb 01             	cmp    ebx,0x1
c00284a3:	77 06                	ja     c00284ab <__cmpdf2+0x92>
c00284a5:	89 fb                	mov    ebx,edi
c00284a7:	09 cb                	or     ebx,ecx
c00284a9:	75 54                	jne    c00284ff <__cmpdf2+0xe6>
c00284ab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284ae:	09 f8                	or     eax,edi
c00284b0:	09 c8                	or     eax,ecx
c00284b2:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00284b5:	75 12                	jne    c00284c9 <__cmpdf2+0xb0>
c00284b7:	8d 42 01             	lea    eax,[edx+0x1]
c00284ba:	83 f8 01             	cmp    eax,0x1
c00284bd:	77 0a                	ja     c00284c9 <__cmpdf2+0xb0>
c00284bf:	8d 5e 01             	lea    ebx,[esi+0x1]
c00284c2:	31 c0                	xor    eax,eax
c00284c4:	83 fb 01             	cmp    ebx,0x1
c00284c7:	76 36                	jbe    c00284ff <__cmpdf2+0xe6>
c00284c9:	b8 01 00 00 00       	mov    eax,0x1
c00284ce:	39 f2                	cmp    edx,esi
c00284d0:	7f 2d                	jg     c00284ff <__cmpdf2+0xe6>
c00284d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00284d7:	7c 26                	jl     c00284ff <__cmpdf2+0xe6>
c00284d9:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284dc:	77 07                	ja     c00284e5 <__cmpdf2+0xcc>
c00284de:	72 16                	jb     c00284f6 <__cmpdf2+0xdd>
c00284e0:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00284e3:	76 0a                	jbe    c00284ef <__cmpdf2+0xd6>
c00284e5:	89 d0                	mov    eax,edx
c00284e7:	c1 f8 1f             	sar    eax,0x1f
c00284ea:	83 c8 01             	or     eax,0x1
c00284ed:	eb 10                	jmp    c00284ff <__cmpdf2+0xe6>
c00284ef:	b8 00 00 00 00       	mov    eax,0x0
c00284f4:	73 09                	jae    c00284ff <__cmpdf2+0xe6>
c00284f6:	89 d0                	mov    eax,edx
c00284f8:	c1 f8 1f             	sar    eax,0x1f
c00284fb:	83 e0 02             	and    eax,0x2
c00284fe:	48                   	dec    eax
c00284ff:	83 c4 0c             	add    esp,0xc
c0028502:	5b                   	pop    ebx
c0028503:	5e                   	pop    esi
c0028504:	5f                   	pop    edi
c0028505:	5d                   	pop    ebp
c0028506:	c3                   	ret    

c0028507 <__eqdf2>:
c0028507:	55                   	push   ebp
c0028508:	89 e5                	mov    ebp,esp
c002850a:	50                   	push   eax
c002850b:	6a 01                	push   0x1
c002850d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028510:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028513:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028516:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028519:	e8 fb fe ff ff       	call   c0028419 <__cmpdf2>
c002851e:	83 c4 18             	add    esp,0x18
c0028521:	c9                   	leave  
c0028522:	c3                   	ret    

c0028523 <__nedf2>:
c0028523:	eb e2                	jmp    c0028507 <__eqdf2>

c0028525 <__gtdf2>:
c0028525:	55                   	push   ebp
c0028526:	89 e5                	mov    ebp,esp
c0028528:	50                   	push   eax
c0028529:	6a ff                	push   0xffffffff
c002852b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002852e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028531:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028534:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028537:	e8 dd fe ff ff       	call   c0028419 <__cmpdf2>
c002853c:	83 c4 18             	add    esp,0x18
c002853f:	c9                   	leave  
c0028540:	c3                   	ret    

c0028541 <__gedf2>:
c0028541:	eb e2                	jmp    c0028525 <__gtdf2>

c0028543 <__ltdf2>:
c0028543:	eb c2                	jmp    c0028507 <__eqdf2>

c0028545 <__ledf2>:
c0028545:	eb c0                	jmp    c0028507 <__eqdf2>

c0028547 <__truncdfsf2>:
c0028547:	55                   	push   ebp
c0028548:	89 e5                	mov    ebp,esp
c002854a:	57                   	push   edi
c002854b:	56                   	push   esi
c002854c:	53                   	push   ebx
c002854d:	83 ec 0c             	sub    esp,0xc
c0028550:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028553:	89 d1                	mov    ecx,edx
c0028555:	c1 f9 14             	sar    ecx,0x14
c0028558:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002855b:	89 df                	mov    edi,ebx
c002855d:	c1 e7 0b             	shl    edi,0xb
c0028560:	89 d0                	mov    eax,edx
c0028562:	c1 e0 0b             	shl    eax,0xb
c0028565:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002856a:	c1 eb 15             	shr    ebx,0x15
c002856d:	09 d8                	or     eax,ebx
c002856f:	89 cb                	mov    ebx,ecx
c0028571:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028577:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c002857d:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028583:	0f 86 9e 00 00 00    	jbe    c0028627 <__truncdfsf2+0xe0>
c0028589:	85 db                	test   ebx,ebx
c002858b:	75 0a                	jne    c0028597 <__truncdfsf2+0x50>
c002858d:	c1 fa 17             	sar    edx,0x17
c0028590:	30 d2                	xor    dl,dl
c0028592:	e9 84 00 00 00       	jmp    c002861b <__truncdfsf2+0xd4>
c0028597:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c002859d:	83 fe 83             	cmp    esi,0xffffff83
c00285a0:	7d 4b                	jge    c00285ed <__truncdfsf2+0xa6>
c00285a2:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285a7:	29 f1                	sub    ecx,esi
c00285a9:	83 f9 1f             	cmp    ecx,0x1f
c00285ac:	7f 6b                	jg     c0028619 <__truncdfsf2+0xd2>
c00285ae:	0d 00 00 00 80       	or     eax,0x80000000
c00285b3:	89 c3                	mov    ebx,eax
c00285b5:	d3 eb                	shr    ebx,cl
c00285b7:	be 01 00 00 00       	mov    esi,0x1
c00285bc:	d3 e6                	shl    esi,cl
c00285be:	4e                   	dec    esi
c00285bf:	21 f0                	and    eax,esi
c00285c1:	09 f8                	or     eax,edi
c00285c3:	0f 95 c0             	setne  al
c00285c6:	0f b6 c0             	movzx  eax,al
c00285c9:	09 c3                	or     ebx,eax
c00285cb:	89 d9                	mov    ecx,ebx
c00285cd:	c1 e9 08             	shr    ecx,0x8
c00285d0:	f6 c3 7f             	test   bl,0x7f
c00285d3:	0f 95 c0             	setne  al
c00285d6:	09 c8                	or     eax,ecx
c00285d8:	83 e0 01             	and    eax,0x1
c00285db:	c1 eb 07             	shr    ebx,0x7
c00285de:	21 c3                	and    ebx,eax
c00285e0:	81 e2 00 00 00 80    	and    edx,0x80000000
c00285e6:	09 d1                	or     ecx,edx
c00285e8:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00285eb:	eb 76                	jmp    c0028663 <__truncdfsf2+0x11c>
c00285ed:	83 c6 80             	add    esi,0xffffff80
c00285f0:	7e 1d                	jle    c002860f <__truncdfsf2+0xc8>
c00285f2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00285f8:	75 0b                	jne    c0028605 <__truncdfsf2+0xbe>
c00285fa:	09 f8                	or     eax,edi
c00285fc:	74 09                	je     c0028607 <__truncdfsf2+0xc0>
c00285fe:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028603:	eb 02                	jmp    c0028607 <__truncdfsf2+0xc0>
c0028605:	31 c0                	xor    eax,eax
c0028607:	c1 fa 17             	sar    edx,0x17
c002860a:	80 ca ff             	or     dl,0xff
c002860d:	eb 0e                	jmp    c002861d <__truncdfsf2+0xd6>
c002860f:	c1 fa 1f             	sar    edx,0x1f
c0028612:	c1 e2 08             	shl    edx,0x8
c0028615:	09 ca                	or     edx,ecx
c0028617:	eb 04                	jmp    c002861d <__truncdfsf2+0xd6>
c0028619:	31 d2                	xor    edx,edx
c002861b:	31 c0                	xor    eax,eax
c002861d:	c1 e2 17             	shl    edx,0x17
c0028620:	c1 e8 08             	shr    eax,0x8
c0028623:	09 d0                	or     eax,edx
c0028625:	eb 3c                	jmp    c0028663 <__truncdfsf2+0x11c>
c0028627:	81 e9 80 03 00 00    	sub    ecx,0x380
c002862d:	89 ca                	mov    edx,ecx
c002862f:	c1 fa 0b             	sar    edx,0xb
c0028632:	c1 e2 08             	shl    edx,0x8
c0028635:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028638:	31 db                	xor    ebx,ebx
c002863a:	85 ff                	test   edi,edi
c002863c:	0f 95 c3             	setne  bl
c002863f:	09 d8                	or     eax,ebx
c0028641:	89 c3                	mov    ebx,eax
c0028643:	c1 eb 08             	shr    ebx,0x8
c0028646:	a8 7f                	test   al,0x7f
c0028648:	0f 95 c2             	setne  dl
c002864b:	89 d6                	mov    esi,edx
c002864d:	09 de                	or     esi,ebx
c002864f:	83 e6 01             	and    esi,0x1
c0028652:	c1 e8 07             	shr    eax,0x7
c0028655:	21 f0                	and    eax,esi
c0028657:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002865a:	09 ca                	or     edx,ecx
c002865c:	c1 e2 17             	shl    edx,0x17
c002865f:	09 da                	or     edx,ebx
c0028661:	01 d0                	add    eax,edx
c0028663:	83 c4 0c             	add    esp,0xc
c0028666:	5b                   	pop    ebx
c0028667:	5e                   	pop    esi
c0028668:	5f                   	pop    edi
c0028669:	5d                   	pop    ebp
c002866a:	c3                   	ret    

c002866b <__extendsfdf2>:
c002866b:	55                   	push   ebp
c002866c:	89 e5                	mov    ebp,esp
c002866e:	57                   	push   edi
c002866f:	56                   	push   esi
c0028670:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028673:	89 d1                	mov    ecx,edx
c0028675:	c1 f9 17             	sar    ecx,0x17
c0028678:	c1 e2 08             	shl    edx,0x8
c002867b:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028681:	89 c8                	mov    eax,ecx
c0028683:	80 e4 f8             	and    ah,0xf8
c0028686:	8d 71 01             	lea    esi,[ecx+0x1]
c0028689:	81 e6 fe 00 00 00    	and    esi,0xfe
c002868f:	75 27                	jne    c00286b8 <__extendsfdf2+0x4d>
c0028691:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028697:	75 18                	jne    c00286b1 <__extendsfdf2+0x46>
c0028699:	85 d2                	test   edx,edx
c002869b:	74 20                	je     c00286bd <__extendsfdf2+0x52>
c002869d:	41                   	inc    ecx
c002869e:	01 d2                	add    edx,edx
c00286a0:	79 fb                	jns    c002869d <__extendsfdf2+0x32>
c00286a2:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286a8:	29 c8                	sub    eax,ecx
c00286aa:	05 81 03 00 00       	add    eax,0x381
c00286af:	eb 0c                	jmp    c00286bd <__extendsfdf2+0x52>
c00286b1:	05 00 07 00 00       	add    eax,0x700
c00286b6:	eb 05                	jmp    c00286bd <__extendsfdf2+0x52>
c00286b8:	05 80 03 00 00       	add    eax,0x380
c00286bd:	c1 e0 14             	shl    eax,0x14
c00286c0:	89 c1                	mov    ecx,eax
c00286c2:	89 d0                	mov    eax,edx
c00286c4:	c1 e8 0b             	shr    eax,0xb
c00286c7:	09 c1                	or     ecx,eax
c00286c9:	c1 e2 15             	shl    edx,0x15
c00286cc:	89 d0                	mov    eax,edx
c00286ce:	89 ca                	mov    edx,ecx
c00286d0:	5e                   	pop    esi
c00286d1:	5f                   	pop    edi
c00286d2:	5d                   	pop    ebp
c00286d3:	c3                   	ret    
c00286d4:	66 90                	xchg   ax,ax
c00286d6:	66 90                	xchg   ax,ax
c00286d8:	66 90                	xchg   ax,ax
c00286da:	66 90                	xchg   ax,ax
c00286dc:	66 90                	xchg   ax,ax
c00286de:	66 90                	xchg   ax,ax

c00286e0 <fabs>:
c00286e0:	83 ec 0c             	sub    esp,0xc
c00286e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00286ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00286ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00286f7:	dd 04 24             	fld    QWORD PTR [esp]
c00286fa:	83 c4 0c             	add    esp,0xc
c00286fd:	c3                   	ret    
c00286fe:	66 90                	xchg   ax,ax

c0028700 <lrint>:
c0028700:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028704:	83 ec 04             	sub    esp,0x4
c0028707:	db 1c 24             	fistp  DWORD PTR [esp]
c002870a:	58                   	pop    eax
c002870b:	c3                   	ret    

c002870c <lrintf>:
c002870c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028710:	83 ec 04             	sub    esp,0x4
c0028713:	db 1c 24             	fistp  DWORD PTR [esp]
c0028716:	58                   	pop    eax
c0028717:	c3                   	ret    

Disassembly of section .init:

c0028718 <_init>:
c0028718:	55                   	push   ebp
c0028719:	89 e5                	mov    ebp,esp
c002871b:	e8 f8 79 fd ff       	call   c0000118 <frame_dummy>
c0028720:	e8 57 e0 ff ff       	call   c002677c <__do_global_ctors_aux>
c0028725:	5d                   	pop    ebp
c0028726:	c3                   	ret    

Disassembly of section .fini:

c0028727 <_fini>:
c0028727:	55                   	push   ebp
c0028728:	89 e5                	mov    ebp,esp
c002872a:	e8 79 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002872f:	5d                   	pop    ebp
c0028730:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028732 <Computer::~Computer()>:
c0028732:	83 ec 0c             	sub    esp,0xc
c0028735:	ba 88 a2 02 c0       	mov    edx,0xc002a288
c002873a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873e:	89 10                	mov    DWORD PTR [eax],edx
c0028740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028744:	83 ec 0c             	sub    esp,0xc
c0028747:	50                   	push   eax
c0028748:	e8 51 ba fe ff       	call   c001419e <Device::~Device()>
c002874d:	83 c4 10             	add    esp,0x10
c0028750:	90                   	nop
c0028751:	83 c4 0c             	add    esp,0xc
c0028754:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028756 <Computer::~Computer()>:
c0028756:	83 ec 0c             	sub    esp,0xc
c0028759:	83 ec 0c             	sub    esp,0xc
c002875c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028760:	e8 cd ff ff ff       	call   c0028732 <Computer::~Computer()>
c0028765:	83 c4 10             	add    esp,0x10
c0028768:	83 ec 08             	sub    esp,0x8
c002876b:	68 ec 01 00 00       	push   0x1ec
c0028770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028774:	e8 4c a6 fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0028779:	83 c4 10             	add    esp,0x10
c002877c:	83 c4 0c             	add    esp,0xc
c002877f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028780 <idleCommon()>:
c0028780:	83 ec 0c             	sub    esp,0xc
c0028783:	e8 d2 56 ff ff       	call   c001de5a <lockScheduler()>
c0028788:	e8 43 5a ff ff       	call   c001e1d0 <schedule()>
c002878d:	83 c4 0c             	add    esp,0xc
c0028790:	e9 c7 56 ff ff       	jmp    c001de5c <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028796 <LinkedList<UnixFile>::~LinkedList()>:
c0028796:	90                   	nop
c0028797:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028798 <LinkedList<UnixFile>::LinkedList()>:
c0028798:	83 ec 0c             	sub    esp,0xc
c002879b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287db:	83 ec 0c             	sub    esp,0xc
c00287de:	68 46 a5 02 c0       	push   0xc002a546
c00287e3:	e8 bd a6 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c00287e8:	83 c4 10             	add    esp,0x10
c00287eb:	90                   	nop
c00287ec:	83 c4 0c             	add    esp,0xc
c00287ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00287f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00287f0:	83 ec 0c             	sub    esp,0xc
c00287f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287f8:	75 10                	jne    c002880a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00287fa:	83 ec 0c             	sub    esp,0xc
c00287fd:	68 60 a5 02 c0       	push   0xc002a560
c0028802:	e8 78 1e ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028807:	83 c4 10             	add    esp,0x10
c002880a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028810:	85 c0                	test   eax,eax
c0028812:	74 34                	je     c0028848 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028818:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002881b:	85 c0                	test   eax,eax
c002881d:	74 29                	je     c0028848 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002881f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028823:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028826:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002882a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028835:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028846:	eb 65                	jmp    c00288ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884c:	8b 00                	mov    eax,DWORD PTR [eax]
c002884e:	85 c0                	test   eax,eax
c0028850:	75 4b                	jne    c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028859:	85 c0                	test   eax,eax
c002885b:	75 40                	jne    c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002885d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028861:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028865:	89 10                	mov    DWORD PTR [eax],edx
c0028867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002886f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028879:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028887:	85 c0                	test   eax,eax
c0028889:	74 22                	je     c00288ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002888b:	83 ec 0c             	sub    esp,0xc
c002888e:	68 82 a5 02 c0       	push   0xc002a582
c0028893:	e8 e7 1d ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028898:	83 c4 10             	add    esp,0x10
c002889b:	eb 10                	jmp    c00288ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002889d:	83 ec 0c             	sub    esp,0xc
c00288a0:	68 8c a5 02 c0       	push   0xc002a58c
c00288a5:	e8 d5 1d ff ff       	call   c001a67f <Krnl::panic(char const*)>
c00288aa:	83 c4 10             	add    esp,0x10
c00288ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b4:	8d 50 01             	lea    edx,[eax+0x1]
c00288b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288be:	90                   	nop
c00288bf:	83 c4 0c             	add    esp,0xc
c00288c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00288c4 <LinkedList<UnixFile>::getFirstElement()>:
c00288c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00288cc <LinkedList<UnixFile>::removeFirst()>:
c00288cc:	83 ec 0c             	sub    esp,0xc
c00288cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00288d5:	85 c0                	test   eax,eax
c00288d7:	75 12                	jne    c00288eb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00288d9:	83 ec 0c             	sub    esp,0xc
c00288dc:	68 98 a5 02 c0       	push   0xc002a598
c00288e1:	e8 99 1d ff ff       	call   c001a67f <Krnl::panic(char const*)>
c00288e6:	83 c4 10             	add    esp,0x10
c00288e9:	eb 7e                	jmp    c0028969 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00288eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f5:	85 c0                	test   eax,eax
c00288f7:	74 10                	je     c0028909 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00288f9:	83 ec 0c             	sub    esp,0xc
c00288fc:	68 e3 a5 02 c0       	push   0xc002a5e3
c0028901:	e8 79 1d ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028906:	83 c4 10             	add    esp,0x10
c0028909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890d:	8b 00                	mov    eax,DWORD PTR [eax]
c002890f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028912:	85 c0                	test   eax,eax
c0028914:	75 33                	jne    c0028949 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028924:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002892b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028932:	83 f8 01             	cmp    eax,0x1
c0028935:	74 21                	je     c0028958 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028937:	83 ec 0c             	sub    esp,0xc
c002893a:	68 bc a5 02 c0       	push   0xc002a5bc
c002893f:	e8 3b 1d ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028944:	83 c4 10             	add    esp,0x10
c0028947:	eb 0f                	jmp    c0028958 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894d:	8b 00                	mov    eax,DWORD PTR [eax]
c002894f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028956:	89 10                	mov    DWORD PTR [eax],edx
c0028958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002895f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028966:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028969:	83 c4 0c             	add    esp,0xc
c002896c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002896e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002896e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028972:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028975:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028976 <DriverlessDevice::~DriverlessDevice()>:
c0028976:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c002897b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002897f:	89 10                	mov    DWORD PTR [eax],edx
c0028981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028985:	50                   	push   eax
c0028986:	e8 13 b8 fe ff       	call   c001419e <Device::~Device()>
c002898b:	83 c4 04             	add    esp,0x4
c002898e:	90                   	nop
c002898f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028990 <DriverlessDevice::~DriverlessDevice()>:
c0028990:	83 ec 0c             	sub    esp,0xc
c0028993:	83 ec 0c             	sub    esp,0xc
c0028996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002899a:	e8 d7 ff ff ff       	call   c0028976 <DriverlessDevice::~DriverlessDevice()>
c002899f:	83 c4 10             	add    esp,0x10
c00289a2:	83 ec 08             	sub    esp,0x8
c00289a5:	68 58 01 00 00       	push   0x158
c00289aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ae:	e8 12 a4 fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00289b3:	83 c4 10             	add    esp,0x10
c00289b6:	83 c4 0c             	add    esp,0xc
c00289b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289ba <LinkedList<Device>::addElement(Device*)>:
c00289ba:	83 ec 0c             	sub    esp,0xc
c00289bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289c2:	75 10                	jne    c00289d4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00289c4:	83 ec 0c             	sub    esp,0xc
c00289c7:	68 60 a5 02 c0       	push   0xc002a560
c00289cc:	e8 ae 1c ff ff       	call   c001a67f <Krnl::panic(char const*)>
c00289d1:	83 c4 10             	add    esp,0x10
c00289d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289da:	85 c0                	test   eax,eax
c00289dc:	74 3a                	je     c0028a18 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e5:	85 c0                	test   eax,eax
c00289e7:	74 2f                	je     c0028a18 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289f4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a02:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a0c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a16:	eb 68                	jmp    c0028a80 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1e:	85 c0                	test   eax,eax
c0028a20:	75 4e                	jne    c0028a70 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a29:	85 c0                	test   eax,eax
c0028a2b:	75 43                	jne    c0028a70 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a35:	89 10                	mov    DWORD PTR [eax],edx
c0028a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a49:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a5a:	85 c0                	test   eax,eax
c0028a5c:	74 22                	je     c0028a80 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a5e:	83 ec 0c             	sub    esp,0xc
c0028a61:	68 82 a5 02 c0       	push   0xc002a582
c0028a66:	e8 14 1c ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028a6b:	83 c4 10             	add    esp,0x10
c0028a6e:	eb 10                	jmp    c0028a80 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a70:	83 ec 0c             	sub    esp,0xc
c0028a73:	68 8c a5 02 c0       	push   0xc002a58c
c0028a78:	e8 02 1c ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028a7d:	83 c4 10             	add    esp,0x10
c0028a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a87:	8d 50 01             	lea    edx,[eax+0x1]
c0028a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a91:	90                   	nop
c0028a92:	83 c4 0c             	add    esp,0xc
c0028a95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a96 <LinkedList<Device>::LinkedList()>:
c0028a96:	83 ec 0c             	sub    esp,0xc
c0028a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ad9:	83 ec 0c             	sub    esp,0xc
c0028adc:	68 46 a5 02 c0       	push   0xc002a546
c0028ae1:	e8 bf a3 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0028ae6:	83 c4 10             	add    esp,0x10
c0028ae9:	90                   	nop
c0028aea:	83 c4 0c             	add    esp,0xc
c0028aed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028aee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028af4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028af6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0028afc:	85 c0                	test   eax,eax
c0028afe:	75 0e                	jne    c0028b0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b07:	85 c0                	test   eax,eax
c0028b09:	75 03                	jne    c0028b0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b0b:	b0 01                	mov    al,0x1
c0028b0d:	c3                   	ret    
c0028b0e:	b0 00                	mov    al,0x0
c0028b10:	90                   	nop
c0028b11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b12:	83 ec 0c             	sub    esp,0xc
c0028b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b19:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b1b:	85 c0                	test   eax,eax
c0028b1d:	75 15                	jne    c0028b34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b1f:	83 ec 0c             	sub    esp,0xc
c0028b22:	68 98 a5 02 c0       	push   0xc002a598
c0028b27:	e8 53 1b ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028b2c:	83 c4 10             	add    esp,0x10
c0028b2f:	e9 88 00 00 00       	jmp    c0028bbc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b3e:	85 c0                	test   eax,eax
c0028b40:	0f 95 c0             	setne  al
c0028b43:	84 c0                	test   al,al
c0028b45:	74 10                	je     c0028b57 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b47:	83 ec 0c             	sub    esp,0xc
c0028b4a:	68 e3 a5 02 c0       	push   0xc002a5e3
c0028b4f:	e8 2b 1b ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028b54:	83 c4 10             	add    esp,0x10
c0028b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b60:	85 c0                	test   eax,eax
c0028b62:	0f 94 c0             	sete   al
c0028b65:	84 c0                	test   al,al
c0028b67:	74 33                	je     c0028b9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b85:	83 f8 01             	cmp    eax,0x1
c0028b88:	74 21                	je     c0028bab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b8a:	83 ec 0c             	sub    esp,0xc
c0028b8d:	68 bc a5 02 c0       	push   0xc002a5bc
c0028b92:	e8 e8 1a ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028b97:	83 c4 10             	add    esp,0x10
c0028b9a:	eb 0f                	jmp    c0028bab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ba2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba9:	89 10                	mov    DWORD PTR [eax],edx
c0028bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bbc:	83 c4 0c             	add    esp,0xc
c0028bbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028bc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028bc0:	83 ec 0c             	sub    esp,0xc
c0028bc3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028bc8:	75 10                	jne    c0028bda <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028bca:	83 ec 0c             	sub    esp,0xc
c0028bcd:	68 60 a5 02 c0       	push   0xc002a560
c0028bd2:	e8 a8 1a ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028bd7:	83 c4 10             	add    esp,0x10
c0028bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0028be0:	85 c0                	test   eax,eax
c0028be2:	74 34                	je     c0028c18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028beb:	85 c0                	test   eax,eax
c0028bed:	74 29                	je     c0028c18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bfa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c16:	eb 65                	jmp    c0028c7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c1e:	85 c0                	test   eax,eax
c0028c20:	75 4b                	jne    c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c29:	85 c0                	test   eax,eax
c0028c2b:	75 40                	jne    c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c35:	89 10                	mov    DWORD PTR [eax],edx
c0028c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c57:	85 c0                	test   eax,eax
c0028c59:	74 22                	je     c0028c7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c5b:	83 ec 0c             	sub    esp,0xc
c0028c5e:	68 82 a5 02 c0       	push   0xc002a582
c0028c63:	e8 17 1a ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028c68:	83 c4 10             	add    esp,0x10
c0028c6b:	eb 10                	jmp    c0028c7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c6d:	83 ec 0c             	sub    esp,0xc
c0028c70:	68 8c a5 02 c0       	push   0xc002a58c
c0028c75:	e8 05 1a ff ff       	call   c001a67f <Krnl::panic(char const*)>
c0028c7a:	83 c4 10             	add    esp,0x10
c0028c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c84:	8d 50 01             	lea    edx,[eax+0x1]
c0028c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c8e:	90                   	nop
c0028c8f:	83 c4 0c             	add    esp,0xc
c0028c92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c94 <ACPI::~ACPI()>:
c0028c94:	83 ec 0c             	sub    esp,0xc
c0028c97:	ba 28 b7 02 c0       	mov    edx,0xc002b728
c0028c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca0:	89 10                	mov    DWORD PTR [eax],edx
c0028ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca6:	83 ec 0c             	sub    esp,0xc
c0028ca9:	50                   	push   eax
c0028caa:	e8 ef b4 fe ff       	call   c001419e <Device::~Device()>
c0028caf:	83 c4 10             	add    esp,0x10
c0028cb2:	90                   	nop
c0028cb3:	83 c4 0c             	add    esp,0xc
c0028cb6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028cb8 <ACPI::~ACPI()>:
c0028cb8:	83 ec 0c             	sub    esp,0xc
c0028cbb:	83 ec 0c             	sub    esp,0xc
c0028cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc2:	e8 cd ff ff ff       	call   c0028c94 <ACPI::~ACPI()>
c0028cc7:	83 c4 10             	add    esp,0x10
c0028cca:	83 ec 08             	sub    esp,0x8
c0028ccd:	68 68 12 00 00       	push   0x1268
c0028cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd6:	e8 ea a0 fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0028cdb:	83 c4 10             	add    esp,0x10
c0028cde:	83 c4 0c             	add    esp,0xc
c0028ce1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028ce2 <CPU::~CPU()>:
c0028ce2:	83 ec 0c             	sub    esp,0xc
c0028ce5:	ba 18 bb 02 c0       	mov    edx,0xc002bb18
c0028cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cee:	89 10                	mov    DWORD PTR [eax],edx
c0028cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf4:	83 ec 0c             	sub    esp,0xc
c0028cf7:	50                   	push   eax
c0028cf8:	e8 a1 b4 fe ff       	call   c001419e <Device::~Device()>
c0028cfd:	83 c4 10             	add    esp,0x10
c0028d00:	90                   	nop
c0028d01:	83 c4 0c             	add    esp,0xc
c0028d04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028d06 <CPU::~CPU()>:
c0028d06:	83 ec 0c             	sub    esp,0xc
c0028d09:	83 ec 0c             	sub    esp,0xc
c0028d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d10:	e8 cd ff ff ff       	call   c0028ce2 <CPU::~CPU()>
c0028d15:	83 c4 10             	add    esp,0x10
c0028d18:	83 ec 08             	sub    esp,0x8
c0028d1b:	68 98 11 00 00       	push   0x1198
c0028d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d24:	e8 9c a0 fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0028d29:	83 c4 10             	add    esp,0x10
c0028d2c:	83 c4 0c             	add    esp,0xc
c0028d2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d30:	90                   	nop
c0028d31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d32 <ThreadControlBlock::ThreadControlBlock()>:
c0028d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d4c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d57:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d62:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028d69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d6d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d75:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d79:	90                   	nop
c0028d7a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d7c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d7c:	83 ec 0c             	sub    esp,0xc
c0028d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d83:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d98:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dbf:	83 ec 0c             	sub    esp,0xc
c0028dc2:	68 46 a5 02 c0       	push   0xc002a546
c0028dc7:	e8 d9 a0 fe ff       	call   c0012ea5 <Dbg::kprintf(char const*, ...)>
c0028dcc:	83 c4 10             	add    esp,0x10
c0028dcf:	90                   	nop
c0028dd0:	83 c4 0c             	add    esp,0xc
c0028dd3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028dd4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028dd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dd8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ddb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028ddc <Vm::_FPUState::_FPUState()>:
c0028ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028de0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028de7:	90                   	nop
c0028de8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028dea <PCI::~PCI()>:
c0028dea:	83 ec 0c             	sub    esp,0xc
c0028ded:	ba b0 cb 02 c0       	mov    edx,0xc002cbb0
c0028df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df6:	89 10                	mov    DWORD PTR [eax],edx
c0028df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfc:	83 ec 0c             	sub    esp,0xc
c0028dff:	50                   	push   eax
c0028e00:	e8 71 ad fe ff       	call   c0013b76 <Bus::~Bus()>
c0028e05:	83 c4 10             	add    esp,0x10
c0028e08:	90                   	nop
c0028e09:	83 c4 0c             	add    esp,0xc
c0028e0c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028e0e <PCI::~PCI()>:
c0028e0e:	83 ec 0c             	sub    esp,0xc
c0028e11:	83 ec 0c             	sub    esp,0xc
c0028e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e18:	e8 cd ff ff ff       	call   c0028dea <PCI::~PCI()>
c0028e1d:	83 c4 10             	add    esp,0x10
c0028e20:	83 ec 08             	sub    esp,0x8
c0028e23:	68 58 01 00 00       	push   0x158
c0028e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2c:	e8 94 9f fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	83 c4 0c             	add    esp,0xc
c0028e37:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e38 <IDE::~IDE()>:
c0028e38:	83 ec 0c             	sub    esp,0xc
c0028e3b:	ba 14 ce 02 c0       	mov    edx,0xc002ce14
c0028e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e44:	89 10                	mov    DWORD PTR [eax],edx
c0028e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4a:	83 ec 0c             	sub    esp,0xc
c0028e4d:	50                   	push   eax
c0028e4e:	e8 3b b8 fe ff       	call   c001468e <HardDiskController::~HardDiskController()>
c0028e53:	83 c4 10             	add    esp,0x10
c0028e56:	90                   	nop
c0028e57:	83 c4 0c             	add    esp,0xc
c0028e5a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e5c <IDE::~IDE()>:
c0028e5c:	83 ec 0c             	sub    esp,0xc
c0028e5f:	83 ec 0c             	sub    esp,0xc
c0028e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e66:	e8 cd ff ff ff       	call   c0028e38 <IDE::~IDE()>
c0028e6b:	83 c4 10             	add    esp,0x10
c0028e6e:	83 ec 08             	sub    esp,0x8
c0028e71:	68 70 02 00 00       	push   0x270
c0028e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7a:	e8 46 9f fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	83 c4 0c             	add    esp,0xc
c0028e85:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e86 <SATABus::~SATABus()>:
c0028e86:	83 ec 0c             	sub    esp,0xc
c0028e89:	ba f4 ce 02 c0       	mov    edx,0xc002cef4
c0028e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e92:	89 10                	mov    DWORD PTR [eax],edx
c0028e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e98:	83 ec 0c             	sub    esp,0xc
c0028e9b:	50                   	push   eax
c0028e9c:	e8 ed b7 fe ff       	call   c001468e <HardDiskController::~HardDiskController()>
c0028ea1:	83 c4 10             	add    esp,0x10
c0028ea4:	90                   	nop
c0028ea5:	83 c4 0c             	add    esp,0xc
c0028ea8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028eaa <SATABus::~SATABus()>:
c0028eaa:	83 ec 0c             	sub    esp,0xc
c0028ead:	83 ec 0c             	sub    esp,0xc
c0028eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb4:	e8 cd ff ff ff       	call   c0028e86 <SATABus::~SATABus()>
c0028eb9:	83 c4 10             	add    esp,0x10
c0028ebc:	83 ec 08             	sub    esp,0x8
c0028ebf:	68 64 01 00 00       	push   0x164
c0028ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec8:	e8 f8 9e fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	83 c4 0c             	add    esp,0xc
c0028ed3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ed4 <ATA::~ATA()>:
c0028ed4:	83 ec 0c             	sub    esp,0xc
c0028ed7:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0028edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee0:	89 10                	mov    DWORD PTR [eax],edx
c0028ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee6:	83 ec 0c             	sub    esp,0xc
c0028ee9:	50                   	push   eax
c0028eea:	e8 91 b8 fe ff       	call   c0014780 <PhysicalDisk::~PhysicalDisk()>
c0028eef:	83 c4 10             	add    esp,0x10
c0028ef2:	90                   	nop
c0028ef3:	83 c4 0c             	add    esp,0xc
c0028ef6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028ef8 <ATA::~ATA()>:
c0028ef8:	83 ec 0c             	sub    esp,0xc
c0028efb:	83 ec 0c             	sub    esp,0xc
c0028efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f02:	e8 cd ff ff ff       	call   c0028ed4 <ATA::~ATA()>
c0028f07:	83 c4 10             	add    esp,0x10
c0028f0a:	83 ec 08             	sub    esp,0x8
c0028f0d:	68 7c 01 00 00       	push   0x17c
c0028f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f16:	e8 aa 9e fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	83 c4 0c             	add    esp,0xc
c0028f21:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f22 <ATAPI::~ATAPI()>:
c0028f22:	83 ec 0c             	sub    esp,0xc
c0028f25:	ba 78 cf 02 c0       	mov    edx,0xc002cf78
c0028f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2e:	89 10                	mov    DWORD PTR [eax],edx
c0028f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f34:	83 ec 0c             	sub    esp,0xc
c0028f37:	50                   	push   eax
c0028f38:	e8 43 b8 fe ff       	call   c0014780 <PhysicalDisk::~PhysicalDisk()>
c0028f3d:	83 c4 10             	add    esp,0x10
c0028f40:	90                   	nop
c0028f41:	83 c4 0c             	add    esp,0xc
c0028f44:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f46 <ATAPI::~ATAPI()>:
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	83 ec 0c             	sub    esp,0xc
c0028f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f50:	e8 cd ff ff ff       	call   c0028f22 <ATAPI::~ATAPI()>
c0028f55:	83 c4 10             	add    esp,0x10
c0028f58:	83 ec 08             	sub    esp,0x8
c0028f5b:	68 80 01 00 00       	push   0x180
c0028f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f64:	e8 5c 9e fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	83 c4 0c             	add    esp,0xc
c0028f6f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f70 <SATA::~SATA()>:
c0028f70:	83 ec 0c             	sub    esp,0xc
c0028f73:	ba 2c d0 02 c0       	mov    edx,0xc002d02c
c0028f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7c:	89 10                	mov    DWORD PTR [eax],edx
c0028f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f82:	83 ec 0c             	sub    esp,0xc
c0028f85:	50                   	push   eax
c0028f86:	e8 f5 b7 fe ff       	call   c0014780 <PhysicalDisk::~PhysicalDisk()>
c0028f8b:	83 c4 10             	add    esp,0x10
c0028f8e:	90                   	nop
c0028f8f:	83 c4 0c             	add    esp,0xc
c0028f92:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f94 <SATA::~SATA()>:
c0028f94:	83 ec 0c             	sub    esp,0xc
c0028f97:	83 ec 0c             	sub    esp,0xc
c0028f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9e:	e8 cd ff ff ff       	call   c0028f70 <SATA::~SATA()>
c0028fa3:	83 c4 10             	add    esp,0x10
c0028fa6:	83 ec 08             	sub    esp,0x8
c0028fa9:	68 7c 01 00 00       	push   0x17c
c0028fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb2:	e8 0e 9e fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	83 c4 0c             	add    esp,0xc
c0028fbd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028fbe <SATAPI::~SATAPI()>:
c0028fbe:	83 ec 0c             	sub    esp,0xc
c0028fc1:	ba 08 d1 02 c0       	mov    edx,0xc002d108
c0028fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fca:	89 10                	mov    DWORD PTR [eax],edx
c0028fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd0:	83 ec 0c             	sub    esp,0xc
c0028fd3:	50                   	push   eax
c0028fd4:	e8 a7 b7 fe ff       	call   c0014780 <PhysicalDisk::~PhysicalDisk()>
c0028fd9:	83 c4 10             	add    esp,0x10
c0028fdc:	90                   	nop
c0028fdd:	83 c4 0c             	add    esp,0xc
c0028fe0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028fe2 <SATAPI::~SATAPI()>:
c0028fe2:	83 ec 0c             	sub    esp,0xc
c0028fe5:	83 ec 0c             	sub    esp,0xc
c0028fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fec:	e8 cd ff ff ff       	call   c0028fbe <SATAPI::~SATAPI()>
c0028ff1:	83 c4 10             	add    esp,0x10
c0028ff4:	83 ec 08             	sub    esp,0x8
c0028ff7:	68 80 01 00 00       	push   0x180
c0028ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029000:	e8 c0 9d fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	83 c4 0c             	add    esp,0xc
c002900b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002900c <AVX::~AVX()>:
c002900c:	83 ec 0c             	sub    esp,0xc
c002900f:	ba 48 d1 02 c0       	mov    edx,0xc002d148
c0029014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029018:	89 10                	mov    DWORD PTR [eax],edx
c002901a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901e:	83 ec 0c             	sub    esp,0xc
c0029021:	50                   	push   eax
c0029022:	e8 dd b7 fe ff       	call   c0014804 <FPU::~FPU()>
c0029027:	83 c4 10             	add    esp,0x10
c002902a:	90                   	nop
c002902b:	83 c4 0c             	add    esp,0xc
c002902e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029030 <AVX::~AVX()>:
c0029030:	83 ec 0c             	sub    esp,0xc
c0029033:	83 ec 0c             	sub    esp,0xc
c0029036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903a:	e8 cd ff ff ff       	call   c002900c <AVX::~AVX()>
c002903f:	83 c4 10             	add    esp,0x10
c0029042:	83 ec 08             	sub    esp,0x8
c0029045:	68 58 01 00 00       	push   0x158
c002904a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904e:	e8 72 9d fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	83 c4 0c             	add    esp,0xc
c0029059:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002905a <MMX::~MMX()>:
c002905a:	83 ec 0c             	sub    esp,0xc
c002905d:	ba 88 d1 02 c0       	mov    edx,0xc002d188
c0029062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029066:	89 10                	mov    DWORD PTR [eax],edx
c0029068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906c:	83 ec 0c             	sub    esp,0xc
c002906f:	50                   	push   eax
c0029070:	e8 8f b7 fe ff       	call   c0014804 <FPU::~FPU()>
c0029075:	83 c4 10             	add    esp,0x10
c0029078:	90                   	nop
c0029079:	83 c4 0c             	add    esp,0xc
c002907c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002907e <MMX::~MMX()>:
c002907e:	83 ec 0c             	sub    esp,0xc
c0029081:	83 ec 0c             	sub    esp,0xc
c0029084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029088:	e8 cd ff ff ff       	call   c002905a <MMX::~MMX()>
c002908d:	83 c4 10             	add    esp,0x10
c0029090:	83 ec 08             	sub    esp,0x8
c0029093:	68 58 01 00 00       	push   0x158
c0029098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909c:	e8 24 9d fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	83 c4 0c             	add    esp,0xc
c00290a7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00290a8 <SSE::~SSE()>:
c00290a8:	83 ec 0c             	sub    esp,0xc
c00290ab:	ba c8 d1 02 c0       	mov    edx,0xc002d1c8
c00290b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b4:	89 10                	mov    DWORD PTR [eax],edx
c00290b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ba:	83 ec 0c             	sub    esp,0xc
c00290bd:	50                   	push   eax
c00290be:	e8 41 b7 fe ff       	call   c0014804 <FPU::~FPU()>
c00290c3:	83 c4 10             	add    esp,0x10
c00290c6:	90                   	nop
c00290c7:	83 c4 0c             	add    esp,0xc
c00290ca:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00290cc <SSE::~SSE()>:
c00290cc:	83 ec 0c             	sub    esp,0xc
c00290cf:	83 ec 0c             	sub    esp,0xc
c00290d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d6:	e8 cd ff ff ff       	call   c00290a8 <SSE::~SSE()>
c00290db:	83 c4 10             	add    esp,0x10
c00290de:	83 ec 08             	sub    esp,0x8
c00290e1:	68 58 01 00 00       	push   0x158
c00290e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ea:	e8 d6 9c fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	83 c4 0c             	add    esp,0xc
c00290f5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00290f6 <x87::~x87()>:
c00290f6:	83 ec 0c             	sub    esp,0xc
c00290f9:	ba 08 d2 02 c0       	mov    edx,0xc002d208
c00290fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029102:	89 10                	mov    DWORD PTR [eax],edx
c0029104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029108:	83 ec 0c             	sub    esp,0xc
c002910b:	50                   	push   eax
c002910c:	e8 f3 b6 fe ff       	call   c0014804 <FPU::~FPU()>
c0029111:	83 c4 10             	add    esp,0x10
c0029114:	90                   	nop
c0029115:	83 c4 0c             	add    esp,0xc
c0029118:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002911a <x87::~x87()>:
c002911a:	83 ec 0c             	sub    esp,0xc
c002911d:	83 ec 0c             	sub    esp,0xc
c0029120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029124:	e8 cd ff ff ff       	call   c00290f6 <x87::~x87()>
c0029129:	83 c4 10             	add    esp,0x10
c002912c:	83 ec 08             	sub    esp,0x8
c002912f:	68 58 01 00 00       	push   0x158
c0029134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029138:	e8 88 9c fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	83 c4 0c             	add    esp,0xc
c0029143:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029144 <IOAPIC::~IOAPIC()>:
c0029144:	83 ec 0c             	sub    esp,0xc
c0029147:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c002914c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029150:	89 10                	mov    DWORD PTR [eax],edx
c0029152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029156:	83 ec 0c             	sub    esp,0xc
c0029159:	50                   	push   eax
c002915a:	e8 3f b0 fe ff       	call   c001419e <Device::~Device()>
c002915f:	83 c4 10             	add    esp,0x10
c0029162:	90                   	nop
c0029163:	83 c4 0c             	add    esp,0xc
c0029166:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029168 <IOAPIC::~IOAPIC()>:
c0029168:	83 ec 0c             	sub    esp,0xc
c002916b:	83 ec 0c             	sub    esp,0xc
c002916e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029172:	e8 cd ff ff ff       	call   c0029144 <IOAPIC::~IOAPIC()>
c0029177:	83 c4 10             	add    esp,0x10
c002917a:	83 ec 08             	sub    esp,0x8
c002917d:	68 68 01 00 00       	push   0x168
c0029182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029186:	e8 3a 9c fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	83 c4 0c             	add    esp,0xc
c0029191:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029192 <APIC::~APIC()>:
c0029192:	83 ec 0c             	sub    esp,0xc
c0029195:	ba 18 d3 02 c0       	mov    edx,0xc002d318
c002919a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919e:	89 10                	mov    DWORD PTR [eax],edx
c00291a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a4:	83 ec 0c             	sub    esp,0xc
c00291a7:	50                   	push   eax
c00291a8:	e8 21 bb fe ff       	call   c0014cce <InterruptController::~InterruptController()>
c00291ad:	83 c4 10             	add    esp,0x10
c00291b0:	90                   	nop
c00291b1:	83 c4 0c             	add    esp,0xc
c00291b4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00291b6 <APIC::~APIC()>:
c00291b6:	83 ec 0c             	sub    esp,0xc
c00291b9:	83 ec 0c             	sub    esp,0xc
c00291bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c0:	e8 cd ff ff ff       	call   c0029192 <APIC::~APIC()>
c00291c5:	83 c4 10             	add    esp,0x10
c00291c8:	83 ec 08             	sub    esp,0x8
c00291cb:	68 58 21 00 00       	push   0x2158
c00291d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d4:	e8 ec 9b fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	83 c4 0c             	add    esp,0xc
c00291df:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00291e0 <PIC::~PIC()>:
c00291e0:	83 ec 0c             	sub    esp,0xc
c00291e3:	ba b0 d3 02 c0       	mov    edx,0xc002d3b0
c00291e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ec:	89 10                	mov    DWORD PTR [eax],edx
c00291ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f2:	83 ec 0c             	sub    esp,0xc
c00291f5:	50                   	push   eax
c00291f6:	e8 d3 ba fe ff       	call   c0014cce <InterruptController::~InterruptController()>
c00291fb:	83 c4 10             	add    esp,0x10
c00291fe:	90                   	nop
c00291ff:	83 c4 0c             	add    esp,0xc
c0029202:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029204 <PIC::~PIC()>:
c0029204:	83 ec 0c             	sub    esp,0xc
c0029207:	83 ec 0c             	sub    esp,0xc
c002920a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002920e:	e8 cd ff ff ff       	call   c00291e0 <PIC::~PIC()>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	83 ec 08             	sub    esp,0x8
c0029219:	68 58 21 00 00       	push   0x2158
c002921e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029222:	e8 9e 9b fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0029227:	83 c4 10             	add    esp,0x10
c002922a:	83 c4 0c             	add    esp,0xc
c002922d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002922e <APICTimer::~APICTimer()>:
c002922e:	83 ec 0c             	sub    esp,0xc
c0029231:	ba 04 d4 02 c0       	mov    edx,0xc002d404
c0029236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923a:	89 10                	mov    DWORD PTR [eax],edx
c002923c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029240:	83 ec 0c             	sub    esp,0xc
c0029243:	50                   	push   eax
c0029244:	e8 f9 da fe ff       	call   c0016d42 <Timer::~Timer()>
c0029249:	83 c4 10             	add    esp,0x10
c002924c:	90                   	nop
c002924d:	83 c4 0c             	add    esp,0xc
c0029250:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029252 <APICTimer::~APICTimer()>:
c0029252:	83 ec 0c             	sub    esp,0xc
c0029255:	83 ec 0c             	sub    esp,0xc
c0029258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002925c:	e8 cd ff ff ff       	call   c002922e <APICTimer::~APICTimer()>
c0029261:	83 c4 10             	add    esp,0x10
c0029264:	83 ec 08             	sub    esp,0x8
c0029267:	68 60 01 00 00       	push   0x160
c002926c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029270:	e8 50 9b fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c0029275:	83 c4 10             	add    esp,0x10
c0029278:	83 c4 0c             	add    esp,0xc
c002927b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002927c <PIT::~PIT()>:
c002927c:	83 ec 0c             	sub    esp,0xc
c002927f:	ba 54 d4 02 c0       	mov    edx,0xc002d454
c0029284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029288:	89 10                	mov    DWORD PTR [eax],edx
c002928a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002928e:	83 ec 0c             	sub    esp,0xc
c0029291:	50                   	push   eax
c0029292:	e8 ab da fe ff       	call   c0016d42 <Timer::~Timer()>
c0029297:	83 c4 10             	add    esp,0x10
c002929a:	90                   	nop
c002929b:	83 c4 0c             	add    esp,0xc
c002929e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00292a0 <PIT::~PIT()>:
c00292a0:	83 ec 0c             	sub    esp,0xc
c00292a3:	83 ec 0c             	sub    esp,0xc
c00292a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292aa:	e8 cd ff ff ff       	call   c002927c <PIT::~PIT()>
c00292af:	83 c4 10             	add    esp,0x10
c00292b2:	83 ec 08             	sub    esp,0x8
c00292b5:	68 5c 01 00 00       	push   0x15c
c00292ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292be:	e8 02 9b fe ff       	call   c0012dc5 <operator delete(void*, unsigned long)>
c00292c3:	83 c4 10             	add    esp,0x10
c00292c6:	83 c4 0c             	add    esp,0xc
c00292c9:	c3                   	ret    
