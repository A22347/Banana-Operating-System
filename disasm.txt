
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 87 02 00       	call   c0028738 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 92 02 c0       	mov    ebx,0xc00292e2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 92 02 c0    	cmp    ebx,0xc00292f0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 db 02 c0       	mov    eax,0xc002db18
c0000049:	3d 18 db 02 c0       	cmp    eax,0xc002db18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 db 02 c0       	push   0xc002db18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 db 02 c0       	mov    eax,0xc002db18
c0000075:	2d 18 db 02 c0       	sub    eax,0xc002db18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 db 02 c0       	push   0xc002db18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e148,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 92 02 c0       	mov    ebx,0xc00292f8
c00000bb:	81 eb f4 92 02 c0    	sub    ebx,0xc00292f4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 92 02 c0       	mov    esi,0xc00292f4
c00000ca:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c e1 02 c0       	mov    ds:0xc002e14c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 db 02 c0       	push   0xc002db18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e148,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 e1 02 c0       	push   0xc002e150
c000012c:	68 18 db 02 c0       	push   0xc002db18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 ed d6 01 00       	call   c001da88 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 61 2a 01 00       	call   c0012e14 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 cb d6 01 00       	call   c001da88 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 19 db 01 00       	call   c001def5 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 c7 e0 01 00       	call   c001e4ac <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e5 02 c0 	lgdtd  ds:0xc002e590
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 3e 47 01 00       	call   c0014d17 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 e1 02 c0       	mov    ds:0xc002e168,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 e1 02 c0    	mov    DWORD PTR ds:0xc002e168,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e168
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 00 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d00],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 00 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d00],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 00 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d00],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 00 93 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d00],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 00 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d00],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e180
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 e1 02 c0    	mov    DWORD PTR ds:0xc002e180,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e7c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e7c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 e1 02 c0    	mov    DWORD PTR ds:0xc002e180,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1bc
c0000e60:	c7 42 0c b4 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e1b4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc e1 02 c0    	mov    DWORD PTR ds:0xc002e1bc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 e1 02 c0 02 	test   BYTE PTR ds:0xc002e180,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e180
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e7c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e7c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 e1 02 c0 	lea    edx,[eax*8-0x3ffd1e4c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1c0
c00011e2:	81 fb b4 e1 02 c0    	cmp    ebx,0xc002e1b4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 e1 02 c0       	cmp    eax,0xc002e1b4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc e1 02 c0       	mov    ds:0xc002e1bc,eax
c000121e:	a3 c0 e1 02 c0       	mov    ds:0xc002e1c0,eax
c0001223:	a3 b0 e1 02 c0       	mov    ds:0xc002e1b0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1b4
c0001231:	c7 40 0c b4 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e1b4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 e1 02 c0       	mov    ds:0xc002e1c0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1b4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e88]
c0001282:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1e80]
c000129d:	8b 14 95 80 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e80]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1b4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 e1 02 c0 	lea    eax,[eax*8-0x3ffd1e4c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc e1 02 c0    	mov    DWORD PTR ds:0xc002e1bc,ecx
c0001357:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c000135d:	c7 41 08 b4 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e1b4
c0001364:	c7 41 0c b4 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e1b4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac e1 02 c0 	lea    edx,[ecx*8-0x3ffd1e54]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac e1 02 c0 	lea    edx,[eax*4-0x3ffd1e54]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1b4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc e1 02 c0    	mov    DWORD PTR ds:0xc002e1bc,edi
c000142a:	89 3d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,edi
c0001430:	c7 47 08 b4 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e1b4
c0001437:	c7 47 0c b4 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e1b4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac e1 02 c0       	mov    eax,ds:0xc002e1ac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 e1 02 c0       	mov    edx,0xc002e180
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e180,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e180,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e4 02 c0    	push   DWORD PTR ds:0xc002e4dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e180,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e4 02 c0       	mov    eax,ds:0xc002e4dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1ac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac e1 02 c0       	mov    eax,ds:0xc002e1ac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e7c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 e1 02 c0       	mov    eax,0xc002e1b4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e4 02 c0       	cmp    eax,0xc002e4ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 04 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6bfc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 e1 02 c0       	mov    ds:0xc002e180,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e4 02 c0    	mov    DWORD PTR ds:0xc002e4cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 80 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce380]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 78 f2 01 00       	jmp    c0020ea4 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 80 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce380]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 a9 f2 01 00       	jmp    c0020eeb <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 80 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce380]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 d1 f2 01 00       	jmp    c0020f32 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 58 4b 02 00       	call   c0026a9c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 20 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ae0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 20 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ae0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 40 95 02 c0       	mov    edx,0xc0029540
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 98 c9 02 c0       	mov    edx,0xc002c998
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 4c 95 02 c0       	mov    edx,0xc002954c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 30 95 02 c0       	mov    edx,0xc0029530
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ae0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e5 02 c0    	mov    ax,ds:0xc002e500
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e5 02 c0    	mov    ds:0xc002e500,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 55 39 02 00       	call   c0026a9c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 52 95 02 c0       	mov    eax,0xc0029552
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad a0 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6b60]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 5b 95 02 c0       	mov    eax,0xc002955b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 20 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ae0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 20 23 02 00       	call   c0026a9c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 30 95 02 c0       	mov    edx,0xc0029530
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ae0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ae0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 e7 0c 02 00       	call   c0026a9c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 cd 0c 02 00       	call   c0026a9c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 77 94 02 c0       	mov    eax,0xc0029477
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 70 94 02 c0       	mov    eax,0xc0029470
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ae0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 60 94 02 c0       	mov    esi,0xc0029460
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 10 f4 01 00       	call   c0026a9c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 40 95 02 c0       	mov    edx,0xc0029540
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 40 94 02 c0       	mov    edx,0xc0029440
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 62 95 02 c0       	mov    edx,0xc0029562
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 6e 95 02 c0       	mov    edx,0xc002956e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 82 95 02 c0       	mov    edx,0xc0029582
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c a0 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc00298a0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 a0 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc00298a0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 a0 96 02 c0       	mov    eax,0xc00296a0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 e0 95 02 c0       	mov    eax,0xc00295e0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 64 fd 01 00       	call   c002856f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 27 fd 01 00       	call   c0028551 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 fb fc 01 00       	call   c002856f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ae f3 01 00       	call   c0027c74 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 28 fe 01 00       	call   c0028700 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 75 fc 01 00       	call   c002856f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 b7 fb 01 00       	call   c002856f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 84 fb 01 00       	call   c0028551 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 71 fa 01 00       	call   c002856f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 39 fa 01 00       	call   c0028551 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 45 f8 01 00       	call   c002856f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 0a f8 01 00       	call   c0028551 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 00 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6200]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 1a f5 01 00       	call   c0028303 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 98 ee 01 00       	call   c0027ca0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 54 f7 01 00       	call   c0028573 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 42 f8 01 00       	call   c0028697 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 2c ee 01 00       	call   c0027ca0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 d7 f6 01 00       	call   c002856d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 b8 f6 01 00       	call   c0028571 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 46 f8 01 00       	call   c0028720 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 f8 f3 01 00       	call   c0028303 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 76 ed 01 00       	call   c0027ca0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 32 f6 01 00       	call   c0028573 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 20 f7 01 00       	call   c0028697 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 0a ed 01 00       	call   c0027ca0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 b5 f5 01 00       	call   c002856d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 95 f5 01 00       	call   c0028571 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 22 f7 01 00       	call   c0028720 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 d0 f4 01 00       	call   c002856f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 8e f4 01 00       	call   c0028551 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 76 f4 01 00       	call   c002856f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 e8 f1 01 00       	call   c0028303 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ea e4 01 00       	call   c0027623 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 4d eb 01 00       	call   c0027ca0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 9f f1 01 00       	call   c0028303 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 a5 e4 01 00       	call   c0027623 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 74 f1 01 00       	call   c0028303 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 c4 f3 01 00       	call   c002856d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 a1 ea 01 00       	call   c0027c74 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 1b f5 01 00       	call   c0028700 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 4a f3 01 00       	call   c0028551 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 45 ea 01 00       	call   c0027c74 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 c3 f0 01 00       	call   c0028303 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 46 ea 01 00       	call   c0027ca0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 98 f0 01 00       	call   c0028303 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 ff ec 01 00       	call   c0027f84 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 7e e3 01 00       	call   c0027623 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 de dc 01 00       	call   c0026fb8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 b5 f3 01 00       	call   c0028697 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 9e e9 01 00       	call   c0027ca0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 85 f3 01 00       	call   c0028697 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 f7 e2 01 00       	call   c0027623 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 30 f2 01 00       	call   c0028573 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 18 ec 01 00       	call   c0027f84 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 9e e2 01 00       	call   c0027623 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 84 f3 01 00       	call   c0028720 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 5e ef 01 00       	call   c0028303 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 b5 e8 01 00       	call   c0027c74 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 94 f1 01 00       	call   c002856f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 2d e2 01 00       	call   c0027623 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 59 e8 01 00       	call   c0027c74 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 f3 f2 01 00       	call   c0028720 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 ac ee 01 00       	call   c0028303 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 29 e8 01 00       	call   c0027ca0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 7c ee 01 00       	call   c0028303 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 82 e1 01 00       	call   c0027623 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 52 ee 01 00       	call   c0028303 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 a4 f0 01 00       	call   c002856f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 7b e7 01 00       	call   c0027c74 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 f5 f1 01 00       	call   c0028700 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 24 f0 01 00       	call   c0028551 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 1e e7 01 00       	call   c0027c74 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 9c ed 01 00       	call   c0028303 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 1f e7 01 00       	call   c0027ca0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 71 ed 01 00       	call   c0028303 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 d8 e9 01 00       	call   c0027f84 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 57 e0 01 00       	call   c0027623 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 a7 d9 01 00       	call   c0026fb8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 7e f0 01 00       	call   c0028697 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 67 e6 01 00       	call   c0027ca0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 4e f0 01 00       	call   c0028697 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 c0 df 01 00       	call   c0027623 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 f9 ee 01 00       	call   c0028573 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 e0 e8 01 00       	call   c0027f84 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 5f df 01 00       	call   c0027623 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 45 f0 01 00       	call   c0028720 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 1f ec 01 00       	call   c0028303 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 76 e5 01 00       	call   c0027c74 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 55 ee 01 00       	call   c002856f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ee de 01 00       	call   c0027623 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 1a e5 01 00       	call   c0027c74 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 8f eb 01 00       	call   c0028303 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 95 de 01 00       	call   c0027623 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 74 9e 02 c0       	mov    eax,0xc0029e74
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 0a ea 01 00       	call   c0028303 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 88 e3 01 00       	call   c0027ca0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 1a d6 01 00       	call   c0026fb8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 f1 ec 01 00       	call   c0028697 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 da e2 01 00       	call   c0027ca0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 bd ec 01 00       	call   c0028697 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 2f dc 01 00       	call   c0027623 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 8f ec 01 00       	call   c0028697 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 7e e2 01 00       	call   c0027ca0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 e7 db 01 00       	call   c0027623 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 08 d5 01 00       	call   c0026fb8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 df eb 01 00       	call   c0028697 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 c8 e1 01 00       	call   c0027ca0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 ab eb 01 00       	call   c0028697 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 1d db 01 00       	call   c0027623 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 7d eb 01 00       	call   c0028697 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 6c e1 01 00       	call   c0027ca0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 d5 da 01 00       	call   c0027623 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 b3 da 01 00       	call   c0027623 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 8f d3 01 00       	call   c0026fb8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 66 ea 01 00       	call   c0028697 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 4f e0 01 00       	call   c0027ca0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 32 ea 01 00       	call   c0028697 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 a4 d9 01 00       	call   c0027623 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 04 ea 01 00       	call   c0028697 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ed df 01 00       	call   c0027ca0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 56 d9 01 00       	call   c0027623 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 b6 e9 01 00       	call   c0028697 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 9f df 01 00       	call   c0027ca0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 08 d9 01 00       	call   c0027623 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 1d d2 01 00       	call   c0026fb8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 f4 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 dd de 01 00       	call   c0027ca0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 c4 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 36 d8 01 00       	call   c0027623 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 96 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 7f de 01 00       	call   c0027ca0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 e8 d7 01 00       	call   c0027623 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 48 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 31 de 01 00       	call   c0027ca0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 9a d7 01 00       	call   c0027623 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 6e d7 01 00       	call   c0027623 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 cb dd 01 00       	call   c0027ca0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 87 e6 01 00       	call   c0028573 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 16 d7 01 00       	call   c0027623 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 73 dd 01 00       	call   c0027ca0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 2f e6 01 00       	call   c0028573 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 a9 cf 01 00       	call   c0026fb8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 80 e6 01 00       	call   c0028697 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 69 dc 01 00       	call   c0027ca0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 4c e6 01 00       	call   c0028697 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 be d5 01 00       	call   c0027623 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 1e e6 01 00       	call   c0028697 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 07 dc 01 00       	call   c0027ca0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 70 d5 01 00       	call   c0027623 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 d0 e5 01 00       	call   c0028697 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 b9 db 01 00       	call   c0027ca0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 22 d5 01 00       	call   c0027623 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 82 e5 01 00       	call   c0028697 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 6b db 01 00       	call   c0027ca0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 d4 d4 01 00       	call   c0027623 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 34 e5 01 00       	call   c0028697 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 1d db 01 00       	call   c0027ca0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 86 d4 01 00       	call   c0027623 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 88 cd 01 00       	call   c0026fb8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 5f e4 01 00       	call   c0028697 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 48 da 01 00       	call   c0027ca0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 2f e4 01 00       	call   c0028697 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 a1 d3 01 00       	call   c0027623 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 01 e4 01 00       	call   c0028697 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ea d9 01 00       	call   c0027ca0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 53 d3 01 00       	call   c0027623 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 b3 e3 01 00       	call   c0028697 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 9c d9 01 00       	call   c0027ca0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 05 d3 01 00       	call   c0027623 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 65 e3 01 00       	call   c0028697 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 4e d9 01 00       	call   c0027ca0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 b7 d2 01 00       	call   c0027623 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 17 e3 01 00       	call   c0028697 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 00 d9 01 00       	call   c0027ca0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 69 d2 01 00       	call   c0027623 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 3d d2 01 00       	call   c0027623 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 9a d8 01 00       	call   c0027ca0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 56 e1 01 00       	call   c0028573 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 e5 d1 01 00       	call   c0027623 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 42 d8 01 00       	call   c0027ca0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 fe e0 01 00       	call   c0028573 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 8c d1 01 00       	call   c0027623 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 e9 d7 01 00       	call   c0027ca0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 a5 e0 01 00       	call   c0028573 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 33 d1 01 00       	call   c0027623 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 90 d7 01 00       	call   c0027ca0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 4c e0 01 00       	call   c0028573 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 aa c9 01 00       	call   c0026fb8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 81 e0 01 00       	call   c0028697 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 6a d6 01 00       	call   c0027ca0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 4d e0 01 00       	call   c0028697 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 bf cf 01 00       	call   c0027623 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 1f e0 01 00       	call   c0028697 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 08 d6 01 00       	call   c0027ca0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 71 cf 01 00       	call   c0027623 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 d1 df 01 00       	call   c0028697 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ba d5 01 00       	call   c0027ca0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 23 cf 01 00       	call   c0027623 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 83 df 01 00       	call   c0028697 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 6c d5 01 00       	call   c0027ca0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 d5 ce 01 00       	call   c0027623 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 35 df 01 00       	call   c0028697 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 1e d5 01 00       	call   c0027ca0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 87 ce 01 00       	call   c0027623 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 e7 de 01 00       	call   c0028697 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 d0 d4 01 00       	call   c0027ca0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 36 ce 01 00       	call   c0027623 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 96 de 01 00       	call   c0028697 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 7f d4 01 00       	call   c0027ca0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 e8 cd 01 00       	call   c0027623 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 e2 c6 01 00       	call   c0026fb8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 b9 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 a2 d3 01 00       	call   c0027ca0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 82 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 f4 cc 01 00       	call   c0027623 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 54 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 3d d3 01 00       	call   c0027ca0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 a6 cc 01 00       	call   c0027623 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 06 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ef d2 01 00       	call   c0027ca0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 58 cc 01 00       	call   c0027623 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 b8 dc 01 00       	call   c0028697 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 a1 d2 01 00       	call   c0027ca0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 0a cc 01 00       	call   c0027623 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 6a dc 01 00       	call   c0028697 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 53 d2 01 00       	call   c0027ca0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 bc cb 01 00       	call   c0027623 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 1c dc 01 00       	call   c0028697 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 05 d2 01 00       	call   c0027ca0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 6b cb 01 00       	call   c0027623 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 cb db 01 00       	call   c0028697 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 b4 d1 01 00       	call   c0027ca0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 23 cb 01 00       	call   c0027623 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 fc ca 01 00       	call   c0027623 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 5a d1 01 00       	call   c0027ca0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 16 da 01 00       	call   c0028573 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 a5 ca 01 00       	call   c0027623 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 03 d1 01 00       	call   c0027ca0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 bf d9 01 00       	call   c0028573 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 4d ca 01 00       	call   c0027623 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 ab d0 01 00       	call   c0027ca0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 67 d9 01 00       	call   c0028573 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 f5 c9 01 00       	call   c0027623 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 53 d0 01 00       	call   c0027ca0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 0f d9 01 00       	call   c0028573 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 9d c9 01 00       	call   c0027623 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 fb cf 01 00       	call   c0027ca0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 b7 d8 01 00       	call   c0028573 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 4b c9 01 00       	call   c0027623 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 a9 cf 01 00       	call   c0027ca0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 65 d8 01 00       	call   c0028573 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 79 c1 01 00       	call   c0026fb8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 50 d8 01 00       	call   c0028697 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 39 ce 01 00       	call   c0027ca0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 20 d8 01 00       	call   c0028697 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 92 c7 01 00       	call   c0027623 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 a4 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd615c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 c6 d7 01 00       	call   c0028697 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 af cd 01 00       	call   c0027ca0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 1a c7 01 00       	call   c0027623 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 67 d7 01 00       	call   c0028697 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 50 cd 01 00       	call   c0027ca0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 bb c6 01 00       	call   c0027623 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 08 d7 01 00       	call   c0028697 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 f1 cc 01 00       	call   c0027ca0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 5c c6 01 00       	call   c0027623 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 a9 d6 01 00       	call   c0028697 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 92 cc 01 00       	call   c0027ca0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 fd c5 01 00       	call   c0027623 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 4a d6 01 00       	call   c0028697 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 33 cc 01 00       	call   c0027ca0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 9e c5 01 00       	call   c0027623 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 eb d5 01 00       	call   c0028697 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 d4 cb 01 00       	call   c0027ca0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 3f c5 01 00       	call   c0027623 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 8c d5 01 00       	call   c0028697 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 75 cb 01 00       	call   c0027ca0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 e0 c4 01 00       	call   c0027623 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 2d d5 01 00       	call   c0028697 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 16 cb 01 00       	call   c0027ca0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 81 c4 01 00       	call   c0027623 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 8b bd 01 00       	call   c0026fb8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 62 d4 01 00       	call   c0028697 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 4b ca 01 00       	call   c0027ca0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 32 d4 01 00       	call   c0028697 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 a4 c3 01 00       	call   c0027623 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 c0 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6140]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 d7 d3 01 00       	call   c0028697 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 c0 c9 01 00       	call   c0027ca0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 2b c3 01 00       	call   c0027623 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 77 d3 01 00       	call   c0028697 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 60 c9 01 00       	call   c0027ca0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 cb c2 01 00       	call   c0027623 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 17 d3 01 00       	call   c0028697 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 00 c9 01 00       	call   c0027ca0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 6b c2 01 00       	call   c0027623 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 b7 d2 01 00       	call   c0028697 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 a0 c8 01 00       	call   c0027ca0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 0b c2 01 00       	call   c0027623 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 57 d2 01 00       	call   c0028697 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 40 c8 01 00       	call   c0027ca0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 ab c1 01 00       	call   c0027623 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 f7 d1 01 00       	call   c0028697 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 e0 c7 01 00       	call   c0027ca0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 4b c1 01 00       	call   c0027623 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 97 d1 01 00       	call   c0028697 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 80 c7 01 00       	call   c0027ca0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 eb c0 01 00       	call   c0027623 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 37 d1 01 00       	call   c0028697 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 20 c7 01 00       	call   c0027ca0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 8b c0 01 00       	call   c0027623 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 dc 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6124]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 30 c0 01 00       	call   c0027623 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 8d c6 01 00       	call   c0027ca0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 49 cf 01 00       	call   c0028573 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 d3 bf 01 00       	call   c0027623 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 30 c6 01 00       	call   c0027ca0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ec ce 01 00       	call   c0028573 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 76 bf 01 00       	call   c0027623 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 d3 c5 01 00       	call   c0027ca0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 8f ce 01 00       	call   c0028573 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 19 bf 01 00       	call   c0027623 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 76 c5 01 00       	call   c0027ca0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 32 ce 01 00       	call   c0028573 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 bc be 01 00       	call   c0027623 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 19 c5 01 00       	call   c0027ca0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 d5 cd 01 00       	call   c0028573 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 5f be 01 00       	call   c0027623 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 bc c4 01 00       	call   c0027ca0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 78 cd 01 00       	call   c0028573 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 02 be 01 00       	call   c0027623 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 5f c4 01 00       	call   c0027ca0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 1b cd 01 00       	call   c0028573 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 a5 bd 01 00       	call   c0027623 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 02 c4 01 00       	call   c0027ca0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 be cc 01 00       	call   c0028573 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ba c3 01 00       	call   c0027ca0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 2a ce 01 00       	jmp    c0028720 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 9c ca 01 00       	call   c002856f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 5a ca 01 00       	call   c0028551 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 f1 c7 01 00       	call   c0028303 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 f2 ba 01 00       	call   c0027623 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 c1 c7 01 00       	call   c0028303 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 28 c4 01 00       	call   c0027f84 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 c7 c9 01 00       	call   c0028551 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ca c9 01 00       	call   c002856f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 9d c9 01 00       	call   c002856f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 96 c3 01 00       	call   c0027f84 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 18 cb 01 00       	call   c0028720 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 f3 ca 01 00       	call   c0028720 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 cd c6 01 00       	call   c0028303 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 24 c0 01 00       	call   c0027c74 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 03 c9 01 00       	call   c002856f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 9c b9 01 00       	call   c0027623 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 c0 bf 01 00       	call   c0027c74 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 5a ca 01 00       	call   c0028720 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 9a c2 01 00       	call   c0027f84 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 17 b9 01 00       	call   c0027623 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 43 c5 01 00       	call   c0028303 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 43 b8 01 00       	call   c0027623 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 23 b8 01 00       	call   c0027623 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 f3 c4 01 00       	call   c0028303 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 43 c7 01 00       	call   c002856d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 22 be 01 00       	call   c0027c74 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 9c c8 01 00       	call   c0028700 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 cb c6 01 00       	call   c0028551 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 c9 bd 01 00       	call   c0027c74 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 47 c4 01 00       	call   c0028303 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ca bd 01 00       	call   c0027ca0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 1c c4 01 00       	call   c0028303 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 83 c0 01 00       	call   c0027f84 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 02 b7 01 00       	call   c0027623 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 cc c3 01 00       	call   c0028303 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 18 c6 01 00       	call   c002856f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 0d bd 01 00       	call   c0027ca0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 df bc 01 00       	call   c0027ca0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 18 c3 01 00       	call   c0028303 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 7c bf 01 00       	call   c0027f84 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 44 bf 01 00       	call   c0027f84 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 c3 b5 01 00       	call   c0027623 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 a8 c6 01 00       	call   c0028720 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 82 c2 01 00       	call   c0028303 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 d9 bb 01 00       	call   c0027c74 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 b8 c4 01 00       	call   c002856f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 50 b5 01 00       	call   c0027623 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 74 bb 01 00       	call   c0027c74 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 0e c6 01 00       	call   c0028720 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 d7 c3 01 00       	call   c002856f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 95 c3 01 00       	call   c0028551 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 2c c1 01 00       	call   c0028303 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 2d b4 01 00       	call   c0027623 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 fc c0 01 00       	call   c0028303 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 63 bd 01 00       	call   c0027f84 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 02 c3 01 00       	call   c0028551 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 05 c3 01 00       	call   c002856f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 d8 c2 01 00       	call   c002856f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 d1 bc 01 00       	call   c0027f84 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 53 c4 01 00       	call   c0028720 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 2e c4 01 00       	call   c0028720 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 08 c0 01 00       	call   c0028303 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 5f b9 01 00       	call   c0027c74 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 3e c2 01 00       	call   c002856f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 d7 b2 01 00       	call   c0027623 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 fb b8 01 00       	call   c0027c74 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 95 c3 01 00       	call   c0028720 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 d5 bb 01 00       	call   c0027f84 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 52 b2 01 00       	call   c0027623 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 7d be 01 00       	call   c0028303 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 7d b1 01 00       	call   c0027623 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 5d b1 01 00       	call   c0027623 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 2d be 01 00       	call   c0028303 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 7d c0 01 00       	call   c002856d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 5b b7 01 00       	call   c0027c74 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 d5 c1 01 00       	call   c0028700 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 04 c0 01 00       	call   c0028551 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 01 b7 01 00       	call   c0027c74 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 7f bd 01 00       	call   c0028303 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 02 b7 01 00       	call   c0027ca0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 54 bd 01 00       	call   c0028303 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 bb b9 01 00       	call   c0027f84 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 3a b0 01 00       	call   c0027623 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 04 bd 01 00       	call   c0028303 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 50 bf 01 00       	call   c002856f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 45 b6 01 00       	call   c0027ca0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 17 b6 01 00       	call   c0027ca0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 4e bc 01 00       	call   c0028303 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 b2 b8 01 00       	call   c0027f84 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 7f b8 01 00       	call   c0027f84 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 fe ae 01 00       	call   c0027623 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 e3 bf 01 00       	call   c0028720 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 bd bb 01 00       	call   c0028303 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 14 b5 01 00       	call   c0027c74 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 f3 bd 01 00       	call   c002856f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 8b ae 01 00       	call   c0027623 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 af b4 01 00       	call   c0027c74 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 49 bf 01 00       	call   c0028720 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 12 bd 01 00       	call   c002856f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 d0 bc 01 00       	call   c0028551 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 67 ba 01 00       	call   c0028303 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 68 ad 01 00       	call   c0027623 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 37 ba 01 00       	call   c0028303 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 9e b6 01 00       	call   c0027f84 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 3d bc 01 00       	call   c0028551 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 40 bc 01 00       	call   c002856f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 13 bc 01 00       	call   c002856f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 0c b6 01 00       	call   c0027f84 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 8e bd 01 00       	call   c0028720 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 69 bd 01 00       	call   c0028720 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 43 b9 01 00       	call   c0028303 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 9a b2 01 00       	call   c0027c74 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 79 bb 01 00       	call   c002856f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 12 ac 01 00       	call   c0027623 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 36 b2 01 00       	call   c0027c74 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 d0 bc 01 00       	call   c0028720 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 10 b5 01 00       	call   c0027f84 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 8d ab 01 00       	call   c0027623 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 b8 b7 01 00       	call   c0028303 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 b8 aa 01 00       	call   c0027623 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 98 aa 01 00       	call   c0027623 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 68 b7 01 00       	call   c0028303 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 b8 b9 01 00       	call   c002856d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 96 b0 01 00       	call   c0027c74 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 10 bb 01 00       	call   c0028700 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 3f b9 01 00       	call   c0028551 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 3c b0 01 00       	call   c0027c74 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ba b6 01 00       	call   c0028303 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 3d b0 01 00       	call   c0027ca0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 8f b6 01 00       	call   c0028303 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 f6 b2 01 00       	call   c0027f84 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 75 a9 01 00       	call   c0027623 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 3f b6 01 00       	call   c0028303 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 8b b8 01 00       	call   c002856f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 80 af 01 00       	call   c0027ca0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 52 af 01 00       	call   c0027ca0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 89 b5 01 00       	call   c0028303 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ed b1 01 00       	call   c0027f84 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ba b1 01 00       	call   c0027f84 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 39 a8 01 00       	call   c0027623 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 1e b9 01 00       	call   c0028720 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 f8 b4 01 00       	call   c0028303 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 4f ae 01 00       	call   c0027c74 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 2e b7 01 00       	call   c002856f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 c6 a7 01 00       	call   c0027623 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ea ad 01 00       	call   c0027c74 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 84 b8 01 00       	call   c0028720 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 4d b6 01 00       	call   c002856f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 0b b6 01 00       	call   c0028551 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 a2 b3 01 00       	call   c0028303 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 a3 a6 01 00       	call   c0027623 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 72 b3 01 00       	call   c0028303 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 d9 af 01 00       	call   c0027f84 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 78 b5 01 00       	call   c0028551 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 7b b5 01 00       	call   c002856f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 4e b5 01 00       	call   c002856f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 47 af 01 00       	call   c0027f84 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 c9 b6 01 00       	call   c0028720 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 a4 b6 01 00       	call   c0028720 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 7e b2 01 00       	call   c0028303 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 d5 ab 01 00       	call   c0027c74 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 b4 b4 01 00       	call   c002856f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 4d a5 01 00       	call   c0027623 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 71 ab 01 00       	call   c0027c74 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 0b b6 01 00       	call   c0028720 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 4b ae 01 00       	call   c0027f84 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 c8 a4 01 00       	call   c0027623 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 f3 b0 01 00       	call   c0028303 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 f3 a3 01 00       	call   c0027623 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 d3 a3 01 00       	call   c0027623 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 a3 b0 01 00       	call   c0028303 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 f3 b2 01 00       	call   c002856d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 d1 a9 01 00       	call   c0027c74 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 4b b4 01 00       	call   c0028700 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 7a b2 01 00       	call   c0028551 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 77 a9 01 00       	call   c0027c74 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 f5 af 01 00       	call   c0028303 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 78 a9 01 00       	call   c0027ca0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ca af 01 00       	call   c0028303 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 31 ac 01 00       	call   c0027f84 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 b0 a2 01 00       	call   c0027623 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 7a af 01 00       	call   c0028303 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 c6 b1 01 00       	call   c002856f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 bb a8 01 00       	call   c0027ca0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 8d a8 01 00       	call   c0027ca0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 c4 ae 01 00       	call   c0028303 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 28 ab 01 00       	call   c0027f84 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 f5 aa 01 00       	call   c0027f84 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 74 a1 01 00       	call   c0027623 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 59 b2 01 00       	call   c0028720 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 33 ae 01 00       	call   c0028303 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 8a a7 01 00       	call   c0027c74 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 69 b0 01 00       	call   c002856f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 01 a1 01 00       	call   c0027623 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 25 a7 01 00       	call   c0027c74 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 bf b1 01 00       	call   c0028720 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 85 af 01 00       	call   c002856f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 43 af 01 00       	call   c0028551 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 da ac 01 00       	call   c0028303 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 db 9f 01 00       	call   c0027623 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 aa ac 01 00       	call   c0028303 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 11 a9 01 00       	call   c0027f84 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 b0 ae 01 00       	call   c0028551 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 b3 ae 01 00       	call   c002856f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 86 ae 01 00       	call   c002856f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 7f a8 01 00       	call   c0027f84 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 01 b0 01 00       	call   c0028720 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 d8 af 01 00       	call   c0028720 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 b2 ab 01 00       	call   c0028303 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 09 a5 01 00       	call   c0027c74 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 e8 ad 01 00       	call   c002856f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 81 9e 01 00       	call   c0027623 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 a9 a4 01 00       	call   c0027c74 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 43 af 01 00       	call   c0028720 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 84 a7 01 00       	call   c0027f84 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 01 9e 01 00       	call   c0027623 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 2d aa 01 00       	call   c0028303 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 2d 9d 01 00       	call   c0027623 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 0d 9d 01 00       	call   c0027623 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 dd a9 01 00       	call   c0028303 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 11 ac 01 00       	call   c0028551 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 08 a3 01 00       	call   c0027c74 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 82 ad 01 00       	call   c0028700 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 b1 ab 01 00       	call   c0028551 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 ab a2 01 00       	call   c0027c74 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 29 a9 01 00       	call   c0028303 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 ac a2 01 00       	call   c0027ca0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 fe a8 01 00       	call   c0028303 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 65 a5 01 00       	call   c0027f84 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 e4 9b 01 00       	call   c0027623 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ae a8 01 00       	call   c0028303 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 fa aa 01 00       	call   c002856f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ef a1 01 00       	call   c0027ca0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 c1 a1 01 00       	call   c0027ca0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 05 a8 01 00       	call   c0028303 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 6c a4 01 00       	call   c0027f84 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 55 a1 01 00       	call   c0027ca0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 11 aa 01 00       	call   c0028573 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 04 a4 01 00       	call   c0027f84 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 83 9a 01 00       	call   c0027623 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 68 ab 01 00       	call   c0028720 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 42 a7 01 00       	call   c0028303 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 99 a0 01 00       	call   c0027c74 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 78 a9 01 00       	call   c002856f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 10 9a 01 00       	call   c0027623 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 38 a0 01 00       	call   c0027c74 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 d2 aa 01 00       	call   c0028720 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 04 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60fc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 f8 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6108]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 8d a7 01 00       	call   c002856f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 4b a7 01 00       	call   c0028551 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 37 a7 01 00       	call   c002856f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 a9 a4 01 00       	call   c0028303 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 27 9e 01 00       	call   c0027ca0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 79 a4 01 00       	call   c0028303 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 7f 97 01 00       	call   c0027623 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 4e a4 01 00       	call   c0028303 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 9e a6 01 00       	call   c002856d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 7f 9d 01 00       	call   c0027c74 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 f9 a7 01 00       	call   c0028700 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 28 a6 01 00       	call   c0028551 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 27 9d 01 00       	call   c0027c74 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 a5 a3 01 00       	call   c0028303 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 28 9d 01 00       	call   c0027ca0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 7a a3 01 00       	call   c0028303 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 e1 9f 01 00       	call   c0027f84 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 60 96 01 00       	call   c0027623 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 88 9f 01 00       	call   c0027f84 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 0e 96 01 00       	call   c0027623 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 f4 a6 01 00       	call   c0028720 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ce a2 01 00       	call   c0028303 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 25 9c 01 00       	call   c0027c74 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 04 a5 01 00       	call   c002856f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 9d 95 01 00       	call   c0027623 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 c9 9b 01 00       	call   c0027c74 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 63 a6 01 00       	call   c0028720 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 18 a2 01 00       	call   c0028303 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 95 9b 01 00       	call   c0027ca0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 e6 a1 01 00       	call   c0028303 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ec 94 01 00       	call   c0027623 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 bc a1 01 00       	call   c0028303 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 10 a4 01 00       	call   c0028571 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 e9 9a 01 00       	call   c0027c74 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 63 a5 01 00       	call   c0028700 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 92 a3 01 00       	call   c0028551 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 90 9a 01 00       	call   c0027c74 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 0e a1 01 00       	call   c0028303 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 91 9a 01 00       	call   c0027ca0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 e3 a0 01 00       	call   c0028303 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 4a 9d 01 00       	call   c0027f84 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 c9 93 01 00       	call   c0027623 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 e5 9c 01 00       	call   c0027f84 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 64 93 01 00       	call   c0027623 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 4a a4 01 00       	call   c0028720 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 24 a0 01 00       	call   c0028303 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 7b 99 01 00       	call   c0027c74 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 5a a2 01 00       	call   c002856f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 f3 92 01 00       	call   c0027623 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 1f 99 01 00       	call   c0027c74 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 90 9f 01 00       	call   c0028303 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 96 92 01 00       	call   c0027623 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 1e a0 02 c0       	mov    eax,0xc002a01e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 2f a0 02 c0       	mov    eax,0xc002a02f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 66 a0 02 c0       	push   0xc002a066
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e5 02 c0       	mov    eax,0xc002e588
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 6f a0 02 c0       	push   0xc002a06f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 9c 6a 02 c0       	mov    eax,0xc0026a9c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 79 a0 02 c0       	push   0xc002a079
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 d0 67 02 c0       	mov    eax,0xc00267d0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 82 a0 02 c0       	push   0xc002a082
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 8c a0 02 c0       	push   0xc002a08c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 1c 69 02 c0       	mov    eax,0xc002691c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 95 a0 02 c0       	push   0xc002a095
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e5 02 c0       	mov    eax,0xc002e58c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 a2 a0 02 c0       	push   0xc002a0a2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e5 02 c0       	mov    eax,0xc002e58d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 af 5f 00 00       	call   c00145d2 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c000e668:	68 af a0 02 c0       	push   0xc002a0af
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 81 f6 00 00       	call   c001dcf6 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 6a f9 00 00       	call   c001dff4 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 52 e8 01 c0       	push   0xc001e852
c000e693:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c000e699:	e8 56 f9 00 00       	call   c001dff4 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 c8 1a 03 c0       	mov    ds:0xc0031ac8,eax
c000e6a6:	c6 05 8d e5 02 c0 01 	mov    BYTE PTR ds:0xc002e58d,0x1
c000e6ad:	e8 21 05 01 00       	call   c001ebd3 <Vm::initialise8086()>
c000e6b2:	e8 03 4d 00 00       	call   c00133ba <Fs::initVFS()>
c000e6b7:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 b3 df 00 00       	call   c001c686 <Sys::loadSyscalls()>
c000e6d3:	e8 d6 be 00 00       	call   c001a5ae <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 bc a0 02 c0       	push   0xc002a0bc
c000e6e2:	68 c5 a0 02 c0       	push   0xc002a0c5
c000e6e7:	e8 e8 cb 00 00       	call   c001b2d4 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 ae 57 00 00       	call   c0013ea2 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 a1 5e 00 00       	call   c00145a6 <Device::loadDriversForAll()>
c000e705:	e8 ea b9 00 00       	call   c001a0f4 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 cd a0 02 c0       	push   0xc002a0cd
c000e719:	e8 fc f0 00 00       	call   c001d81a <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 27 f3 00 00       	call   c001da4e <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 24 fc 00 00       	call   c001e358 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 e9 a0 02 c0       	push   0xc002a0e9
c000e749:	50                   	push   eax
c000e74a:	e8 fd 5e 00 00       	call   c001464c <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 88 a2 02 c0       	mov    edx,0xc002a288
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 a1 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5a1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 83 7e 01 00       	call   c0026766 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 e8 a4 00 00       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 c1 a4 00 00       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 9f a4 00 00       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 7d a4 00 00       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 a0 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e5a0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 8b a3 00 00       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 66 a3 00 00       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 ed 7c 01 00       	call   c0026720 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 aa 7c 01 00       	call   c0026700 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 82 a3 00 00       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 f9 a0 02 c0       	push   0xc002a0f9
c000eaaf:	e8 82 45 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 0c a1 02 c0       	push   0xc002a10c
c000ead2:	e8 5f 45 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 1d a1 02 c0       	push   0xc002a11d
c000eaf5:	e8 3c 45 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 2e a1 02 c0       	push   0xc002a12e
c000eb18:	e8 19 45 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 3f a1 02 c0       	push   0xc002a13f
c000eb3b:	e8 f6 44 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 50 a1 02 c0       	push   0xc002a150
c000eb5e:	e8 d3 44 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 61 a1 02 c0       	push   0xc002a161
c000eb81:	e8 b0 44 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 72 a1 02 c0       	push   0xc002a172
c000eba4:	e8 8d 44 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 83 a1 02 c0       	push   0xc002a183
c000ebc7:	e8 6a 44 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 94 a1 02 c0       	push   0xc002a194
c000ebea:	e8 47 44 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 a5 a1 02 c0       	push   0xc002a1a5
c000ec0d:	e8 24 44 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 b6 a1 02 c0       	push   0xc002a1b6
c000ec30:	e8 01 44 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 c7 a1 02 c0       	push   0xc002a1c7
c000ec53:	e8 de 43 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 d8 a1 02 c0       	push   0xc002a1d8
c000ec76:	e8 bb 43 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 e9 a1 02 c0       	push   0xc002a1e9
c000ec99:	e8 98 43 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 fa a1 02 c0       	push   0xc002a1fa
c000ecbc:	e8 75 43 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 0b a2 02 c0       	push   0xc002a20b
c000ecdf:	e8 52 43 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 1c a2 02 c0       	push   0xc002a21c
c000ed02:	e8 2f 43 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 2d a2 02 c0       	push   0xc002a22d
c000ed21:	e8 10 43 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 7c bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc7c
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 ff 42 00 00       	jmp    c0013036 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 3e a2 02 c0       	push   0xc002a23e
c000ee0a:	e8 d8 b8 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 44 a2 02 c0       	push   0xc002a244
c000ee42:	e8 a0 b8 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 a0 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5a0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 c4 d4 02 c0 	sete   BYTE PTR ds:0xc002d4c4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 21 94 00 00       	call   c00182d6 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 98 55 00 00       	call   c001445c <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 ca 9f 00 00       	call   c0018ebe <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 59 55 00 00       	call   c001445c <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 c3 5a 00 00       	call   c00149e2 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 29 55 00 00       	call   c001445c <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 9f f1 00 00       	call   c001e0f4 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 4a a2 02 c0       	push   0xc002a24a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 93 40 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 5b a2 02 c0       	push   0xc002a25b
c000efc0:	e8 22 b7 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 68 a2 02 c0       	push   0xc002a268
c000efd5:	e8 0d b7 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 72 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a272
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 f6 b6 00 00       	jmp    c001a6e7 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 ac a2 02 c0       	push   0xc002a2ac
c000f086:	e8 ab 3f 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 92 e5 02 c0       	mov    ds:0xc002e592,eax
c000f0c7:	66 89 15 90 e5 02 c0 	mov    WORD PTR ds:0xc002e590,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 e6 ec 00 00       	call   c001dec4 <unlockScheduler()>
c000f1de:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 74 95 01 00       	call   c00287a0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 6b 95 01 00       	call   c00287a0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 98 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e598,0x7ff
c000f323:	a3 9a e5 02 c0       	mov    ds:0xc002e59a,eax
c000f328:	0f 01 1d 98 e5 02 c0 	lidtd  ds:0xc002e598
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 69 28 00 00       	call   c0011e7e <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 9a 2e 00 00       	call   c00124ba <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 d6 1e 00 00       	call   c0011514 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 07 1f 00 00       	call   c0011554 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d ac d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4ac
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 c8 a2 02 c0       	push   0xc002a2c8
c000f6f4:	e8 3d 39 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 ac d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d4ac,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 5f 27 00 00       	call   c0011e7e <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d ac d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d4ac
c000f727:	e8 d5 07 00 00       	call   c000ff01 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 81 2c 00 00       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d ac d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4ac
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 f8 a2 02 c0       	push   0xc002a2f8
c000f7ad:	e8 35 af 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 fd a2 02 c0       	push   0xc002a2fd
c000f7c3:	e8 1f af 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 e9 e6 00 00       	call   c001dec2 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 da e6 00 00       	call   c001dec4 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 83 26 00 00       	call   c0011e7e <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 b0 2c 00 00       	call   c00124ba <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 68 26 00 00       	call   c0011e7e <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 53 29 00 00       	call   c0012176 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 c0 d4 02 c0       	mov    eax,ds:0xc002d4c0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 c0 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4c0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 c0 d4 02 c0       	mov    eax,ds:0xc002d4c0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 f6 0c 00 00       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 b8 0c 00 00       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 4f 0d 00 00       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 c0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4c0
c000fb46:	80 3d 20 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e620,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d c0 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d4c0,0x8000
c000fba0:	c6 05 20 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e620,0x1
c000fba7:	c7 05 58 e6 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e658,0xc000fa13
c000fbb1:	c7 05 44 e6 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e644,0xc000f89a
c000fbbb:	c7 05 40 e6 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e640,0xc000f8e5
c000fbc5:	c7 05 4c e6 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e64c,0xc000fa59
c000fbcf:	c7 05 54 e6 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e654,0xc000f963
c000fbd9:	c7 05 48 e6 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e648,0xc000f9c1
c000fbe3:	c7 05 50 e6 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e650,0xc000f9c2
c000fbed:	c7 05 5c e6 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e65c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 36 0a 00 00       	call   c0010640 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 04 a3 02 c0       	push   0xc002a304
c000fc4a:	e8 e7 33 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 95 04 00 00       	call   c00100fb <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 37 21 00 00       	call   c0011da2 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 7d bc 02 c0       	push   0xc002bc7d
c000fc92:	e8 50 aa 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d a0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a0,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 07 23 00 00       	call   c0011fb4 <VAS::VAS()>
c000fcad:	89 1d 0c e7 02 c0    	mov    DWORD PTR ds:0xc002e70c,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 1b a3 02 c0 	mov    DWORD PTR [esp],0xc002a31b
c000fcbf:	e8 72 33 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 58 21 00 00       	call   c0011e21 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 88 e5 02 c0    	mov    DWORD PTR ds:0xc002e588,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 38 a3 02 c0       	push   0xc002a338
c000fced:	e8 44 33 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 42 25 00 00       	call   c001224e <VAS::~VAS()>
c000fd0c:	c7 04 24 4b a3 02 c0 	mov    DWORD PTR [esp],0xc002a34b
c000fd13:	e8 cf a9 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba e0 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1a20],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be e0 e5 02 c0       	mov    esi,0xc002e5e0
c000fd89:	8d 90 e0 e5 02 c0    	lea    edx,[eax-0x3ffd1a20]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 e0 e5 02 c0    	lea    eax,[edx-0x3ffd1a20]
c000fdef:	8d 94 11 e0 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1a20]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 b0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4b0
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 b0 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4b0
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 b0 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4b0
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 76                	jbe    c000fede <Phys::freePage(unsigned long)+0x86>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 7a                	je     c000fef0 <Phys::freePage(unsigned long)+0x98>
c000fe76:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 d0 e5 02 c0       	mov    ds:0xc002e5d0,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d d4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5d4
c000fe91:	39 05 cc e5 02 c0    	cmp    DWORD PTR ds:0xc002e5cc,eax
c000fe97:	75 32                	jne    c000fecb <Phys::freePage(unsigned long)+0x73>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 0c             	add    esp,0xc
c000fea7:	a1 d4 e5 02 c0       	mov    eax,ds:0xc002e5d4
c000feac:	c1 e0 02             	shl    eax,0x2
c000feaf:	50                   	push   eax
c000feb0:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c000feb5:	c1 e0 02             	shl    eax,0x2
c000feb8:	50                   	push   eax
c000feb9:	68 c8 a3 02 c0       	push   0xc002a3c8
c000febe:	e8 73 31 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000fec3:	83 c4 10             	add    esp,0x10
c000fec6:	83 c4 08             	add    esp,0x8
c000fec9:	5b                   	pop    ebx
c000feca:	c3                   	ret    
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	a3 cc e5 02 c0       	mov    ds:0xc002e5cc,eax
c000fed3:	50                   	push   eax
c000fed4:	e8 fb 0a 00 00       	call   c00109d4 <VgaText::updateRAMUsageDisplay(int)>
c000fed9:	83 c4 10             	add    esp,0x10
c000fedc:	eb bb                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000fede:	68 00 10 00 00       	push   0x1000
c000fee3:	53                   	push   ebx
c000fee4:	e8 d9 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000fee9:	59                   	pop    ecx
c000feea:	5b                   	pop    ebx
c000feeb:	83 c4 08             	add    esp,0x8
c000feee:	5b                   	pop    ebx
c000feef:	c3                   	ret    
c000fef0:	c7 44 24 10 66 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a366
c000fef8:	83 c4 08             	add    esp,0x8
c000fefb:	5b                   	pop    ebx
c000fefc:	e9 e6 a7 00 00       	jmp    c001a6e7 <Krnl::panic(char const*)>

c000ff01 <Phys::allocatePage()>:
c000ff01:	56                   	push   esi
c000ff02:	53                   	push   ebx
c000ff03:	83 ec 14             	sub    esp,0x14
c000ff06:	8b 35 c4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5c4
c000ff0c:	89 f3                	mov    ebx,esi
c000ff0e:	eb 0a                	jmp    c000ff1a <Phys::allocatePage()+0x19>
c000ff10:	89 1d c4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c4,ebx
c000ff16:	39 de                	cmp    esi,ebx
c000ff18:	74 24                	je     c000ff3e <Phys::allocatePage()+0x3d>
c000ff1a:	53                   	push   ebx
c000ff1b:	e8 1c ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff20:	59                   	pop    ecx
c000ff21:	84 c0                	test   al,al
c000ff23:	74 5e                	je     c000ff83 <Phys::allocatePage()+0x82>
c000ff25:	43                   	inc    ebx
c000ff26:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff2c:	75 e2                	jne    c000ff10 <Phys::allocatePage()+0xf>
c000ff2e:	31 db                	xor    ebx,ebx
c000ff30:	c7 05 c4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5c4,0x0
c000ff3a:	39 de                	cmp    esi,ebx
c000ff3c:	75 dc                	jne    c000ff1a <Phys::allocatePage()+0x19>
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	68 7c a3 02 c0       	push   0xc002a37c
c000ff46:	e8 eb 30 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ff4b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff52:	e8 c8 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff57:	83 c4 10             	add    esp,0x10
c000ff5a:	85 c0                	test   eax,eax
c000ff5c:	0f 85 ce 00 00 00    	jne    c0010030 <Phys::allocatePage()+0x12f>
c000ff62:	83 ec 0c             	sub    esp,0xc
c000ff65:	68 8d a3 02 c0       	push   0xc002a38d
c000ff6a:	e8 78 a7 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c000ff6f:	83 c4 10             	add    esp,0x10
c000ff72:	8b 1d c4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c4
c000ff78:	53                   	push   ebx
c000ff79:	e8 be fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff7e:	59                   	pop    ecx
c000ff7f:	84 c0                	test   al,al
c000ff81:	75 a2                	jne    c000ff25 <Phys::allocatePage()+0x24>
c000ff83:	6a 01                	push   0x1
c000ff85:	53                   	push   ebx
c000ff86:	e8 7f fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff8b:	83 ec 0c             	sub    esp,0xc
c000ff8e:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c000ff93:	8b 0d d4 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5d4
c000ff99:	40                   	inc    eax
c000ff9a:	8d 14 8d 00 00 00 00 	lea    edx,[ecx*4+0x0]
c000ffa1:	a3 d0 e5 02 c0       	mov    ds:0xc002e5d0,eax
c000ffa6:	52                   	push   edx
c000ffa7:	c1 e0 02             	shl    eax,0x2
c000ffaa:	50                   	push   eax
c000ffab:	68 f0 a3 02 c0       	push   0xc002a3f0
c000ffb0:	e8 81 30 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c000ffb5:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c000ffba:	83 c4 20             	add    esp,0x20
c000ffbd:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc0:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc3:	c1 e0 02             	shl    eax,0x2
c000ffc6:	99                   	cdq    
c000ffc7:	f7 3d d4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5d4
c000ffcd:	39 05 cc e5 02 c0    	cmp    DWORD PTR ds:0xc002e5cc,eax
c000ffd3:	75 61                	jne    c0010036 <Phys::allocatePage()+0x135>
c000ffd5:	83 f8 32             	cmp    eax,0x32
c000ffd8:	7e 4e                	jle    c0010028 <Phys::allocatePage()+0x127>
c000ffda:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000ffe1:	75 45                	jne    c0010028 <Phys::allocatePage()+0x127>
c000ffe3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffe8:	85 c0                	test   eax,eax
c000ffea:	74 1f                	je     c001000b <Phys::allocatePage()+0x10a>
c000ffec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffef:	85 c0                	test   eax,eax
c000fff1:	74 18                	je     c001000b <Phys::allocatePage()+0x10a>
c000fff3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000fff9:	85 c0                	test   eax,eax
c000fffb:	74 0e                	je     c001000b <Phys::allocatePage()+0x10a>
c000fffd:	52                   	push   edx
c000fffe:	6a 10                	push   0x10
c0010000:	6a 04                	push   0x4
c0010002:	50                   	push   eax
c0010003:	e8 98 2b 00 00       	call   c0012ba0 <VAS::scanForEviction(int, int)>
c0010008:	83 c4 10             	add    esp,0x10
c001000b:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c0010010:	8d 04 80             	lea    eax,[eax+eax*4]
c0010013:	8d 04 80             	lea    eax,[eax+eax*4]
c0010016:	c1 e0 02             	shl    eax,0x2
c0010019:	99                   	cdq    
c001001a:	f7 3d d4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5d4
c0010020:	39 05 cc e5 02 c0    	cmp    DWORD PTR ds:0xc002e5cc,eax
c0010026:	75 2e                	jne    c0010056 <Phys::allocatePage()+0x155>
c0010028:	a1 c4 e5 02 c0       	mov    eax,ds:0xc002e5c4
c001002d:	c1 e0 0c             	shl    eax,0xc
c0010030:	83 c4 14             	add    esp,0x14
c0010033:	5b                   	pop    ebx
c0010034:	5e                   	pop    esi
c0010035:	c3                   	ret    
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	a3 cc e5 02 c0       	mov    ds:0xc002e5cc,eax
c001003e:	50                   	push   eax
c001003f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010043:	e8 8c 09 00 00       	call   c00109d4 <VgaText::updateRAMUsageDisplay(int)>
c0010048:	83 c4 10             	add    esp,0x10
c001004b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001004f:	83 f8 32             	cmp    eax,0x32
c0010052:	7e d4                	jle    c0010028 <Phys::allocatePage()+0x127>
c0010054:	eb 84                	jmp    c000ffda <Phys::allocatePage()+0xd9>
c0010056:	83 ec 0c             	sub    esp,0xc
c0010059:	a3 cc e5 02 c0       	mov    ds:0xc002e5cc,eax
c001005e:	50                   	push   eax
c001005f:	e8 70 09 00 00       	call   c00109d4 <VgaText::updateRAMUsageDisplay(int)>
c0010064:	83 c4 10             	add    esp,0x10
c0010067:	eb bf                	jmp    c0010028 <Phys::allocatePage()+0x127>

c0010069 <Phys::allocateContiguousPages(int)>:
c0010069:	57                   	push   edi
c001006a:	56                   	push   esi
c001006b:	53                   	push   ebx
c001006c:	31 db                	xor    ebx,ebx
c001006e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010072:	e8 4b de 00 00       	call   c001dec2 <lockScheduler()>
c0010077:	85 db                	test   ebx,ebx
c0010079:	75 11                	jne    c001008c <Phys::allocateContiguousPages(int)+0x23>
c001007b:	e8 81 fe ff ff       	call   c000ff01 <Phys::allocatePage()>
c0010080:	83 ff 01             	cmp    edi,0x1
c0010083:	89 c6                	mov    esi,eax
c0010085:	74 21                	je     c00100a8 <Phys::allocateContiguousPages(int)+0x3f>
c0010087:	bb 01 00 00 00       	mov    ebx,0x1
c001008c:	e8 70 fe ff ff       	call   c000ff01 <Phys::allocatePage()>
c0010091:	89 da                	mov    edx,ebx
c0010093:	c1 e2 0c             	shl    edx,0xc
c0010096:	01 f2                	add    edx,esi
c0010098:	39 c2                	cmp    edx,eax
c001009a:	74 17                	je     c00100b3 <Phys::allocateContiguousPages(int)+0x4a>
c001009c:	bb 01 00 00 00       	mov    ebx,0x1
c00100a1:	89 c6                	mov    esi,eax
c00100a3:	83 ff 01             	cmp    edi,0x1
c00100a6:	75 e4                	jne    c001008c <Phys::allocateContiguousPages(int)+0x23>
c00100a8:	e8 17 de 00 00       	call   c001dec4 <unlockScheduler()>
c00100ad:	89 f0                	mov    eax,esi
c00100af:	5b                   	pop    ebx
c00100b0:	5e                   	pop    esi
c00100b1:	5f                   	pop    edi
c00100b2:	c3                   	ret    
c00100b3:	43                   	inc    ebx
c00100b4:	39 fb                	cmp    ebx,edi
c00100b6:	75 bf                	jne    c0010077 <Phys::allocateContiguousPages(int)+0xe>
c00100b8:	e8 07 de 00 00       	call   c001dec4 <unlockScheduler()>
c00100bd:	89 f0                	mov    eax,esi
c00100bf:	5b                   	pop    ebx
c00100c0:	5e                   	pop    esi
c00100c1:	5f                   	pop    edi
c00100c2:	c3                   	ret    

c00100c3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100c3:	56                   	push   esi
c00100c4:	53                   	push   ebx
c00100c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100c9:	39 1d c8 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c8,ebx
c00100cf:	73 06                	jae    c00100d7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100d1:	89 1d c8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c8,ebx
c00100d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100db:	c1 eb 0c             	shr    ebx,0xc
c00100de:	c1 e8 0c             	shr    eax,0xc
c00100e1:	39 d8                	cmp    eax,ebx
c00100e3:	73 13                	jae    c00100f8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100e5:	6a 00                	push   0x0
c00100e7:	8d 70 01             	lea    esi,[eax+0x1]
c00100ea:	50                   	push   eax
c00100eb:	e8 1a fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100f0:	5a                   	pop    edx
c00100f1:	89 f0                	mov    eax,esi
c00100f3:	59                   	pop    ecx
c00100f4:	39 f3                	cmp    ebx,esi
c00100f6:	75 ed                	jne    c00100e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100f8:	5b                   	pop    ebx
c00100f9:	5e                   	pop    esi
c00100fa:	c3                   	ret    

c00100fb <Phys::physicalMemorySetup(unsigned int)>:
c00100fb:	55                   	push   ebp
c00100fc:	57                   	push   edi
c00100fd:	56                   	push   esi
c00100fe:	53                   	push   ebx
c00100ff:	31 db                	xor    ebx,ebx
c0010101:	83 ec 40             	sub    esp,0x40
c0010104:	6a 30                	push   0x30
c0010106:	6a 00                	push   0x0
c0010108:	68 e0 e5 02 c0       	push   0xc002e5e0
c001010d:	e8 66 06 ff ff       	call   c0000778 <memset>
c0010112:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010116:	25 00 f0 ff ff       	and    eax,0xfffff000
c001011b:	05 00 10 00 00       	add    eax,0x1000
c0010120:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010124:	83 c4 10             	add    esp,0x10
c0010127:	83 ec 08             	sub    esp,0x8
c001012a:	6a 01                	push   0x1
c001012c:	53                   	push   ebx
c001012d:	43                   	inc    ebx
c001012e:	e8 d7 fc ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c0010133:	83 c4 10             	add    esp,0x10
c0010136:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001013c:	75 e9                	jne    c0010127 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001013e:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010145:	66 85 c0             	test   ax,ax
c0010148:	0f 84 8e 01 00 00    	je     c00102dc <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001014e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010152:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001015a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001015e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010163:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010167:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001016f:	eb 15                	jmp    c0010186 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010171:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010175:	83 c3 18             	add    ebx,0x18
c0010178:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001017c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010180:	0f 84 66 01 00 00    	je     c00102ec <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010186:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010189:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001018c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001018f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010193:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010197:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010199:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001019c:	01 f0                	add    eax,esi
c001019e:	55                   	push   ebp
c001019f:	11 fa                	adc    edx,edi
c00101a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00101a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101ad:	56                   	push   esi
c00101ae:	68 18 a4 02 c0       	push   0xc002a418
c00101b3:	e8 7e 2e 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00101b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101bc:	83 c4 10             	add    esp,0x10
c00101bf:	09 f8                	or     eax,edi
c00101c1:	0f 85 25 01 00 00    	jne    c00102ec <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101c7:	4d                   	dec    ebp
c00101c8:	75 a7                	jne    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ca:	ba 00 00 08 00       	mov    edx,0x80000
c00101cf:	89 c1                	mov    ecx,eax
c00101d1:	39 f2                	cmp    edx,esi
c00101d3:	19 f9                	sbb    ecx,edi
c00101d5:	0f 82 a7 00 00 00    	jb     c0010282 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101db:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101df:	89 c1                	mov    ecx,eax
c00101e1:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101e5:	0f 83 97 00 00 00    	jae    c0010282 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101eb:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101f4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101f8:	39 fa                	cmp    edx,edi
c00101fa:	19 e8                	sbb    eax,ebp
c00101fc:	0f 82 14 01 00 00    	jb     c0010316 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010202:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010206:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001020a:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010210:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010215:	83 d5 ff             	adc    ebp,0xffffffff
c0010218:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001021c:	31 c0                	xor    eax,eax
c001021e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010222:	39 fa                	cmp    edx,edi
c0010224:	89 c1                	mov    ecx,eax
c0010226:	19 e9                	sbb    ecx,ebp
c0010228:	0f 83 43 ff ff ff    	jae    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022e:	be 00 00 08 00       	mov    esi,0x80000
c0010233:	50                   	push   eax
c0010234:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010238:	57                   	push   edi
c0010239:	56                   	push   esi
c001023a:	68 3c a4 02 c0       	push   0xc002a43c
c001023f:	e8 f2 2d 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0010244:	5a                   	pop    edx
c0010245:	59                   	pop    ecx
c0010246:	57                   	push   edi
c0010247:	56                   	push   esi
c0010248:	e8 76 fe ff ff       	call   c00100c3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001024d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010251:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010255:	83 c4 0c             	add    esp,0xc
c0010258:	0f ac d0 0c          	shrd   eax,edx,0xc
c001025c:	03 05 d4 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e5d4
c0010262:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010269:	a3 d4 e5 02 c0       	mov    ds:0xc002e5d4,eax
c001026e:	52                   	push   edx
c001026f:	50                   	push   eax
c0010270:	68 a9 a3 02 c0       	push   0xc002a3a9
c0010275:	e8 bc 2d 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001027a:	83 c4 10             	add    esp,0x10
c001027d:	e9 ef fe ff ff       	jmp    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010282:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010286:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001028a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001028e:	39 ea                	cmp    edx,ebp
c0010290:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010294:	0f 82 d7 fe ff ff    	jb     c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001029a:	ba ff 1f 00 00       	mov    edx,0x1fff
c001029f:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00102a3:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00102a7:	0f 83 c4 fe ff ff    	jae    c0010171 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102ad:	39 ee                	cmp    esi,ebp
c00102af:	89 f8                	mov    eax,edi
c00102b1:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102b5:	0f 83 78 ff ff ff    	jae    c0010233 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102c3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102c7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102cb:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102d7:	e9 57 ff ff ff       	jmp    c0010233 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102dc:	83 ec 0c             	sub    esp,0xc
c00102df:	68 9b a3 02 c0       	push   0xc002a39b
c00102e4:	e8 fe a3 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	bb 40 01 00 00       	mov    ebx,0x140
c00102f1:	83 ec 08             	sub    esp,0x8
c00102f4:	6a 00                	push   0x0
c00102f6:	53                   	push   ebx
c00102f7:	43                   	inc    ebx
c00102f8:	e8 0d fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102fd:	ff 05 d4 e5 02 c0    	inc    DWORD PTR ds:0xc002e5d4
c0010303:	83 c4 10             	add    esp,0x10
c0010306:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001030c:	75 e3                	jne    c00102f1 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001030e:	83 c4 3c             	add    esp,0x3c
c0010311:	5b                   	pop    ebx
c0010312:	5e                   	pop    esi
c0010313:	5f                   	pop    edi
c0010314:	5d                   	pop    ebp
c0010315:	c3                   	ret    
c0010316:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001031e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010326:	e9 d7 fe ff ff       	jmp    c0010202 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001032b:	90                   	nop

c001032c <Pipe::isAtty()>:
c001032c:	31 c0                	xor    eax,eax
c001032e:	c3                   	ret    
c001032f:	90                   	nop

c0010330 <Pipe::~Pipe()>:
c0010330:	83 ec 0c             	sub    esp,0xc
c0010333:	ba a8 a4 02 c0       	mov    edx,0xc002a4a8
c0010338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033c:	89 10                	mov    DWORD PTR [eax],edx
c001033e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010342:	83 ec 0c             	sub    esp,0xc
c0010345:	50                   	push   eax
c0010346:	e8 37 16 00 00       	call   c0011982 <UnixFile::~UnixFile()>
c001034b:	83 c4 10             	add    esp,0x10
c001034e:	90                   	nop
c001034f:	83 c4 0c             	add    esp,0xc
c0010352:	c3                   	ret    
c0010353:	90                   	nop

c0010354 <Pipe::~Pipe()>:
c0010354:	83 ec 0c             	sub    esp,0xc
c0010357:	83 ec 0c             	sub    esp,0xc
c001035a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001035e:	e8 cd ff ff ff       	call   c0010330 <Pipe::~Pipe()>
c0010363:	83 c4 10             	add    esp,0x10
c0010366:	83 ec 08             	sub    esp,0x8
c0010369:	6a 20                	push   0x20
c001036b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001036f:	e8 e2 2b 00 00       	call   c0012f56 <operator delete(void*, unsigned long)>
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	83 c4 0c             	add    esp,0xc
c001037a:	c3                   	ret    
c001037b:	90                   	nop

c001037c <Pipe::read(unsigned long long, void*, int*)>:
c001037c:	55                   	push   ebp
c001037d:	57                   	push   edi
c001037e:	56                   	push   esi
c001037f:	53                   	push   ebx
c0010380:	83 ec 1c             	sub    esp,0x1c
c0010383:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010387:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001038b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001038f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010392:	89 c8                	mov    eax,ecx
c0010394:	99                   	cdq    
c0010395:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010399:	74 19                	je     c00103b4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001039b:	39 f9                	cmp    ecx,edi
c001039d:	89 d1                	mov    ecx,edx
c001039f:	19 f1                	sbb    ecx,esi
c00103a1:	73 11                	jae    c00103b4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00103a3:	e8 1a db 00 00       	call   c001dec2 <lockScheduler()>
c00103a8:	e8 51 de 00 00       	call   c001e1fe <schedule()>
c00103ad:	e8 12 db 00 00       	call   c001dec4 <unlockScheduler()>
c00103b2:	eb db                	jmp    c001038f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103b4:	39 f8                	cmp    eax,edi
c00103b6:	89 d1                	mov    ecx,edx
c00103b8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103bc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103c0:	19 f1                	sbb    ecx,esi
c00103c2:	73 08                	jae    c00103cc <Pipe::read(unsigned long long, void*, int*)+0x50>
c00103c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103cf:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103d2:	29 c6                	sub    esi,eax
c00103d4:	89 f1                	mov    ecx,esi
c00103d6:	c1 f9 1f             	sar    ecx,0x1f
c00103d9:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00103dd:	89 ca                	mov    edx,ecx
c00103df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103e3:	19 d1                	sbb    ecx,edx
c00103e5:	73 04                	jae    c00103eb <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103e7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103eb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103ef:	89 fd                	mov    ebp,edi
c00103f1:	29 f5                	sub    ebp,esi
c00103f3:	85 f6                	test   esi,esi
c00103f5:	74 12                	je     c0010409 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103f7:	52                   	push   edx
c00103f8:	56                   	push   esi
c00103f9:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103fc:	50                   	push   eax
c00103fd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010401:	e8 3e 03 ff ff       	call   c0000744 <memcpy>
c0010406:	83 c4 10             	add    esp,0x10
c0010409:	85 ed                	test   ebp,ebp
c001040b:	74 12                	je     c001041f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001040d:	50                   	push   eax
c001040e:	55                   	push   ebp
c001040f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010412:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010416:	56                   	push   esi
c0010417:	e8 28 03 ff ff       	call   c0000744 <memcpy>
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010422:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010425:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010428:	99                   	cdq    
c0010429:	89 f7                	mov    edi,esi
c001042b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001042f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010433:	c1 ff 1f             	sar    edi,0x1f
c0010436:	57                   	push   edi
c0010437:	56                   	push   esi
c0010438:	52                   	push   edx
c0010439:	50                   	push   eax
c001043a:	e8 5d 67 01 00       	call   c0026b9c <__umoddi3>
c001043f:	83 c4 10             	add    esp,0x10
c0010442:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010445:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001044a:	75 10                	jne    c001045c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001044c:	83 ec 0c             	sub    esp,0xc
c001044f:	68 65 a4 02 c0       	push   0xc002a465
c0010454:	e8 8e a2 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010460:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010464:	89 10                	mov    DWORD PTR [eax],edx
c0010466:	83 c4 1c             	add    esp,0x1c
c0010469:	31 c0                	xor    eax,eax
c001046b:	5b                   	pop    ebx
c001046c:	5e                   	pop    esi
c001046d:	5f                   	pop    edi
c001046e:	5d                   	pop    ebp
c001046f:	c3                   	ret    

c0010470 <Pipe::write(unsigned long long, void*, int*)>:
c0010470:	55                   	push   ebp
c0010471:	57                   	push   edi
c0010472:	56                   	push   esi
c0010473:	53                   	push   ebx
c0010474:	83 ec 1c             	sub    esp,0x1c
c0010477:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001047b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001047f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010483:	89 04 24             	mov    DWORD PTR [esp],eax
c0010486:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010489:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001048c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010490:	89 de                	mov    esi,ebx
c0010492:	89 df                	mov    edi,ebx
c0010494:	c1 ff 1f             	sar    edi,0x1f
c0010497:	01 c6                	add    esi,eax
c0010499:	89 c8                	mov    eax,ecx
c001049b:	11 d7                	adc    edi,edx
c001049d:	99                   	cdq    
c001049e:	39 f1                	cmp    ecx,esi
c00104a0:	89 d0                	mov    eax,edx
c00104a2:	19 f8                	sbb    eax,edi
c00104a4:	b8 01 00 00 00       	mov    eax,0x1
c00104a9:	0f 82 80 00 00 00    	jb     c001052f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00104af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00104b5:	01 d8                	add    eax,ebx
c00104b7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00104bb:	99                   	cdq    
c00104bc:	f7 f9                	idiv   ecx
c00104be:	29 d1                	sub    ecx,edx
c00104c0:	89 d7                	mov    edi,edx
c00104c2:	89 c8                	mov    eax,ecx
c00104c4:	99                   	cdq    
c00104c5:	39 ce                	cmp    esi,ecx
c00104c7:	19 d3                	sbb    ebx,edx
c00104c9:	bb 00 00 00 00       	mov    ebx,0x0
c00104ce:	72 04                	jb     c00104d4 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00104d0:	89 f3                	mov    ebx,esi
c00104d2:	29 cb                	sub    ebx,ecx
c00104d4:	89 f1                	mov    ecx,esi
c00104d6:	29 d9                	sub    ecx,ebx
c00104d8:	74 1a                	je     c00104f4 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00104da:	52                   	push   edx
c00104db:	51                   	push   ecx
c00104dc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104e4:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104e7:	57                   	push   edi
c00104e8:	e8 57 02 ff ff       	call   c0000744 <memcpy>
c00104ed:	83 c4 10             	add    esp,0x10
c00104f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104f4:	85 db                	test   ebx,ebx
c00104f6:	74 12                	je     c001050a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104f8:	50                   	push   eax
c00104f9:	53                   	push   ebx
c00104fa:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104fe:	51                   	push   ecx
c00104ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010502:	e8 3d 02 ff ff       	call   c0000744 <memcpy>
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001050d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010512:	75 10                	jne    c0010524 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010514:	83 ec 0c             	sub    esp,0xc
c0010517:	68 81 a4 02 c0       	push   0xc002a481
c001051c:	e8 c6 a1 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0010521:	83 c4 10             	add    esp,0x10
c0010524:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010528:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001052b:	89 38                	mov    DWORD PTR [eax],edi
c001052d:	31 c0                	xor    eax,eax
c001052f:	83 c4 1c             	add    esp,0x1c
c0010532:	5b                   	pop    ebx
c0010533:	5e                   	pop    esi
c0010534:	5f                   	pop    edi
c0010535:	5d                   	pop    ebp
c0010536:	c3                   	ret    
c0010537:	90                   	nop

c0010538 <Pipe::Pipe(int)>:
c0010538:	83 ec 0c             	sub    esp,0xc
c001053b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053f:	83 ec 08             	sub    esp,0x8
c0010542:	6a 00                	push   0x0
c0010544:	50                   	push   eax
c0010545:	e8 56 12 00 00       	call   c00117a0 <UnixFile::UnixFile(int)>
c001054a:	83 c4 10             	add    esp,0x10
c001054d:	ba a8 a4 02 c0       	mov    edx,0xc002a4a8
c0010552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010556:	89 10                	mov    DWORD PTR [eax],edx
c0010558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010560:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010567:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010579:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001057d:	83 ec 0c             	sub    esp,0xc
c0010580:	50                   	push   eax
c0010581:	e8 ba f2 ff ff       	call   c000f840 <malloc>
c0010586:	83 c4 10             	add    esp,0x10
c0010589:	89 c2                	mov    edx,eax
c001058b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010596:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001059a:	90                   	nop
c001059b:	83 c4 0c             	add    esp,0xc
c001059e:	c3                   	ret    
c001059f:	90                   	nop

c00105a0 <VgaText::isAtty()>:
c00105a0:	b0 01                	mov    al,0x1
c00105a2:	c3                   	ret    
c00105a3:	90                   	nop

c00105a4 <VgaText::~VgaText()>:
c00105a4:	83 ec 0c             	sub    esp,0xc
c00105a7:	ba 64 a5 02 c0       	mov    edx,0xc002a564
c00105ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b0:	89 10                	mov    DWORD PTR [eax],edx
c00105b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b6:	83 ec 0c             	sub    esp,0xc
c00105b9:	50                   	push   eax
c00105ba:	e8 c3 13 00 00       	call   c0011982 <UnixFile::~UnixFile()>
c00105bf:	83 c4 10             	add    esp,0x10
c00105c2:	90                   	nop
c00105c3:	83 c4 0c             	add    esp,0xc
c00105c6:	c3                   	ret    
c00105c7:	90                   	nop

c00105c8 <VgaText::~VgaText()>:
c00105c8:	83 ec 0c             	sub    esp,0xc
c00105cb:	83 ec 0c             	sub    esp,0xc
c00105ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d2:	e8 cd ff ff ff       	call   c00105a4 <VgaText::~VgaText()>
c00105d7:	83 c4 10             	add    esp,0x10
c00105da:	83 ec 08             	sub    esp,0x8
c00105dd:	68 60 12 00 00       	push   0x1260
c00105e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105e6:	e8 6b 29 00 00       	call   c0012f56 <operator delete(void*, unsigned long)>
c00105eb:	83 c4 10             	add    esp,0x10
c00105ee:	83 c4 0c             	add    esp,0xc
c00105f1:	c3                   	ret    

c00105f2 <VgaText::read(unsigned long long, void*, int*)>:
c00105f2:	83 ec 10             	sub    esp,0x10
c00105f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010601:	e8 e2 5d 00 00       	call   c00163e8 <readKeyboard(VgaText*, char*, unsigned long)>
c0010606:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001060a:	89 02                	mov    DWORD PTR [edx],eax
c001060c:	31 c0                	xor    eax,eax
c001060e:	83 c4 1c             	add    esp,0x1c
c0010611:	c3                   	ret    

c0010612 <setTerminalScrollLock(bool)>:
c0010612:	c3                   	ret    

c0010613 <addToTerminalCycle(VgaText*)>:
c0010613:	8b 15 60 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e660
c0010619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061d:	85 d2                	test   edx,edx
c001061f:	75 0c                	jne    c001062d <addToTerminalCycle(VgaText*)+0x1a>
c0010621:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010627:	a3 60 e6 02 c0       	mov    ds:0xc002e660,eax
c001062c:	c3                   	ret    
c001062d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010633:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010639:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001063f:	c3                   	ret    

c0010640 <installVgaTextImplementation()>:
c0010640:	83 ec 10             	sub    esp,0x10
c0010643:	6a 20                	push   0x20
c0010645:	6a 00                	push   0x0
c0010647:	68 40 e6 02 c0       	push   0xc002e640
c001064c:	e8 27 01 ff ff       	call   c0000778 <memset>
c0010651:	83 c4 1c             	add    esp,0x1c
c0010654:	c3                   	ret    

c0010655 <scrollTerminalScrollLock(int)>:
c0010655:	c3                   	ret    

c0010656 <VgaText::load()>:
c0010656:	53                   	push   ebx
c0010657:	31 c0                	xor    eax,eax
c0010659:	83 ec 58             	sub    esp,0x58
c001065c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010660:	89 e2                	mov    edx,esp
c0010662:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010666:	40                   	inc    eax
c0010667:	83 f8 50             	cmp    eax,0x50
c001066a:	75 f6                	jne    c0010662 <VgaText::load()+0xc>
c001066c:	31 c0                	xor    eax,eax
c001066e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010675:	84 c9                	test   cl,cl
c0010677:	74 06                	je     c001067f <VgaText::load()+0x29>
c0010679:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001067c:	40                   	inc    eax
c001067d:	eb ef                	jmp    c001066e <VgaText::load()+0x18>
c001067f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010685:	85 c0                	test   eax,eax
c0010687:	74 09                	je     c0010692 <VgaText::load()+0x3c>
c0010689:	51                   	push   ecx
c001068a:	51                   	push   ecx
c001068b:	52                   	push   edx
c001068c:	53                   	push   ebx
c001068d:	ff d0                	call   eax
c001068f:	83 c4 10             	add    esp,0x10
c0010692:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010698:	85 c0                	test   eax,eax
c001069a:	74 09                	je     c00106a5 <VgaText::load()+0x4f>
c001069c:	83 ec 0c             	sub    esp,0xc
c001069f:	53                   	push   ebx
c00106a0:	ff d0                	call   eax
c00106a2:	83 c4 10             	add    esp,0x10
c00106a5:	83 c4 58             	add    esp,0x58
c00106a8:	5b                   	pop    ebx
c00106a9:	c3                   	ret    

c00106aa <VgaText::updateCursor()>:
c00106aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ae:	39 05 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,eax
c00106b4:	75 0c                	jne    c00106c2 <VgaText::updateCursor()+0x18>
c00106b6:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00106bc:	85 c0                	test   eax,eax
c00106be:	74 02                	je     c00106c2 <VgaText::updateCursor()+0x18>
c00106c0:	ff e0                	jmp    eax
c00106c2:	c3                   	ret    
c00106c3:	90                   	nop

c00106c4 <VgaText::showCursor(bool)>:
c00106c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106cc:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::disableBlink(bool)>:
c00106d4:	56                   	push   esi
c00106d5:	53                   	push   ebx
c00106d6:	51                   	push   ecx
c00106d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106df:	39 1d 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,ebx
c00106e5:	75 18                	jne    c00106ff <VgaText::disableBlink(bool)+0x2b>
c00106e7:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106ed:	85 c0                	test   eax,eax
c00106ef:	74 0e                	je     c00106ff <VgaText::disableBlink(bool)+0x2b>
c00106f1:	89 f1                	mov    ecx,esi
c00106f3:	52                   	push   edx
c00106f4:	52                   	push   edx
c00106f5:	0f b6 d1             	movzx  edx,cl
c00106f8:	52                   	push   edx
c00106f9:	53                   	push   ebx
c00106fa:	ff d0                	call   eax
c00106fc:	83 c4 10             	add    esp,0x10
c00106ff:	89 f0                	mov    eax,esi
c0010701:	83 f0 01             	xor    eax,0x1
c0010704:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001070a:	58                   	pop    eax
c001070b:	5b                   	pop    ebx
c001070c:	5e                   	pop    esi
c001070d:	c3                   	ret    

c001070e <VgaText::doANSI_SGR(int)>:
c001070e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010716:	85 d2                	test   edx,edx
c0010718:	75 14                	jne    c001072e <VgaText::doANSI_SGR(int)+0x20>
c001071a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010720:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010726:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001072c:	eb 65                	jmp    c0010793 <VgaText::doANSI_SGR(int)+0x85>
c001072e:	83 fa 07             	cmp    edx,0x7
c0010731:	75 14                	jne    c0010747 <VgaText::doANSI_SGR(int)+0x39>
c0010733:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010739:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001073f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010745:	eb 4c                	jmp    c0010793 <VgaText::doANSI_SGR(int)+0x85>
c0010747:	83 fa 1b             	cmp    edx,0x1b
c001074a:	74 ce                	je     c001071a <VgaText::doANSI_SGR(int)+0xc>
c001074c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001074f:	83 f9 07             	cmp    ecx,0x7
c0010752:	77 09                	ja     c001075d <VgaText::doANSI_SGR(int)+0x4f>
c0010754:	8b 14 8d e0 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b20]
c001075b:	eb 20                	jmp    c001077d <VgaText::doANSI_SGR(int)+0x6f>
c001075d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010760:	83 f9 07             	cmp    ecx,0x7
c0010763:	77 09                	ja     c001076e <VgaText::doANSI_SGR(int)+0x60>
c0010765:	8b 14 8d e0 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b20]
c001076c:	eb 25                	jmp    c0010793 <VgaText::doANSI_SGR(int)+0x85>
c001076e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010771:	83 f9 07             	cmp    ecx,0x7
c0010774:	77 0e                	ja     c0010784 <VgaText::doANSI_SGR(int)+0x76>
c0010776:	8b 14 95 98 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c68]
c001077d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010783:	c3                   	ret    
c0010784:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010787:	83 f9 07             	cmp    ecx,0x7
c001078a:	77 0d                	ja     c0010799 <VgaText::doANSI_SGR(int)+0x8b>
c001078c:	8b 14 95 70 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c90]
c0010793:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010799:	c3                   	ret    

c001079a <VgaText::setDefaultBgColour(VgaColour)>:
c001079a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001079e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107a2:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00107a8:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00107ae:	c3                   	ret    
c00107af:	90                   	nop

c00107b0 <VgaText::setDefaultFgColour(VgaColour)>:
c00107b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107b8:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00107be:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00107c4:	c3                   	ret    
c00107c5:	90                   	nop

c00107c6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00107c6:	53                   	push   ebx
c00107c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00107cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107d3:	51                   	push   ecx
c00107d4:	e8 c1 ff ff ff       	call   c001079a <VgaText::setDefaultBgColour(VgaColour)>
c00107d9:	58                   	pop    eax
c00107da:	5a                   	pop    edx
c00107db:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107df:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107e3:	5b                   	pop    ebx
c00107e4:	eb ca                	jmp    c00107b0 <VgaText::setDefaultFgColour(VgaColour)>

c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107e6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107ea:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107ef:	83 e0 0f             	and    eax,0xf
c00107f2:	c1 e2 04             	shl    edx,0x4
c00107f5:	09 d0                	or     eax,edx
c00107f7:	c3                   	ret    

c00107f8 <VgaText::scrollScreen()>:
c00107f8:	57                   	push   edi
c00107f9:	56                   	push   esi
c00107fa:	be 01 00 00 00       	mov    esi,0x1
c00107ff:	53                   	push   ebx
c0010800:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010804:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001080a:	31 ff                	xor    edi,edi
c001080c:	01 d9                	add    ecx,ebx
c001080e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010811:	83 fe 17             	cmp    esi,0x17
c0010814:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001081a:	75 28                	jne    c0010844 <VgaText::scrollScreen()+0x4c>
c001081c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010822:	74 1c                	je     c0010840 <VgaText::scrollScreen()+0x48>
c0010824:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001082b:	50                   	push   eax
c001082c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010833:	50                   	push   eax
c0010834:	e8 ad ff ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010839:	5a                   	pop    edx
c001083a:	5a                   	pop    edx
c001083b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001083e:	eb 04                	jmp    c0010844 <VgaText::scrollScreen()+0x4c>
c0010840:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010844:	47                   	inc    edi
c0010845:	41                   	inc    ecx
c0010846:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001084c:	75 c0                	jne    c001080e <VgaText::scrollScreen()+0x16>
c001084e:	46                   	inc    esi
c001084f:	83 fe 18             	cmp    esi,0x18
c0010852:	75 b0                	jne    c0010804 <VgaText::scrollScreen()+0xc>
c0010854:	39 1d 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,ebx
c001085a:	75 24                	jne    c0010880 <VgaText::scrollScreen()+0x88>
c001085c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010863:	74 08                	je     c001086d <VgaText::scrollScreen()+0x75>
c0010865:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001086b:	eb 13                	jmp    c0010880 <VgaText::scrollScreen()+0x88>
c001086d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010873:	85 c0                	test   eax,eax
c0010875:	74 09                	je     c0010880 <VgaText::scrollScreen()+0x88>
c0010877:	83 ec 0c             	sub    esp,0xc
c001087a:	53                   	push   ebx
c001087b:	ff d0                	call   eax
c001087d:	83 c4 10             	add    esp,0x10
c0010880:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010884:	5b                   	pop    ebx
c0010885:	5e                   	pop    esi
c0010886:	5f                   	pop    edi
c0010887:	e9 1e fe ff ff       	jmp    c00106aa <VgaText::updateCursor()>

c001088c <VgaText::combineCharAndColour(char, unsigned char)>:
c001088c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010891:	c1 e0 08             	shl    eax,0x8
c0010894:	89 c2                	mov    edx,eax
c0010896:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001089b:	09 d0                	or     eax,edx
c001089d:	c3                   	ret    

c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001089e:	53                   	push   ebx
c001089f:	83 ec 08             	sub    esp,0x8
c00108a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00108a6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00108ab:	50                   	push   eax
c00108ac:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00108b1:	50                   	push   eax
c00108b2:	e8 2f ff ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c00108b7:	5a                   	pop    edx
c00108b8:	0f b6 c0             	movzx  eax,al
c00108bb:	5b                   	pop    ebx
c00108bc:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00108c1:	50                   	push   eax
c00108c2:	53                   	push   ebx
c00108c3:	e8 c4 ff ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c00108c8:	5a                   	pop    edx
c00108c9:	5a                   	pop    edx
c00108ca:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00108d0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00108d4:	0f b7 d2             	movzx  edx,dx
c00108d7:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00108dc:	39 0d 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,ecx
c00108e2:	75 14                	jne    c00108f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108e4:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108ea:	85 c0                	test   eax,eax
c00108ec:	74 0a                	je     c00108f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108ee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108f2:	83 c4 08             	add    esp,0x8
c00108f5:	5b                   	pop    ebx
c00108f6:	ff e0                	jmp    eax
c00108f8:	83 c4 08             	add    esp,0x8
c00108fb:	5b                   	pop    ebx
c00108fc:	c3                   	ret    
c00108fd:	90                   	nop

c00108fe <VgaText::getCursorX()>:
c00108fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010902:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010908:	c3                   	ret    
c0010909:	90                   	nop

c001090a <VgaText::getCursorY()>:
c001090a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010914:	c3                   	ret    
c0010915:	90                   	nop

c0010916 <VgaText::setCursor(int, int)>:
c0010916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001091e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010928:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001092e:	e9 77 fd ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c0010933:	90                   	nop

c0010934 <VgaText::setCursorX(int)>:
c0010934:	83 ec 10             	sub    esp,0x10
c0010937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001093b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010945:	50                   	push   eax
c0010946:	e8 cb ff ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c001094b:	83 c4 1c             	add    esp,0x1c
c001094e:	c3                   	ret    
c001094f:	90                   	nop

c0010950 <VgaText::setCursorY(int)>:
c0010950:	83 ec 10             	sub    esp,0x10
c0010953:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010957:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001095b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010961:	50                   	push   eax
c0010962:	e8 af ff ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c0010967:	83 c4 1c             	add    esp,0x1c
c001096a:	c3                   	ret    
c001096b:	90                   	nop

c001096c <VgaText::incrementCursor(bool)>:
c001096c:	56                   	push   esi
c001096d:	53                   	push   ebx
c001096e:	51                   	push   ecx
c001096f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010973:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010977:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001097d:	40                   	inc    eax
c001097e:	83 f8 50             	cmp    eax,0x50
c0010981:	74 08                	je     c001098b <VgaText::incrementCursor(bool)+0x1f>
c0010983:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010989:	eb 33                	jmp    c00109be <VgaText::incrementCursor(bool)+0x52>
c001098b:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010991:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001099b:	8d 50 01             	lea    edx,[eax+0x1]
c001099e:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109a4:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109aa:	75 12                	jne    c00109be <VgaText::incrementCursor(bool)+0x52>
c00109ac:	83 ec 0c             	sub    esp,0xc
c00109af:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109b5:	53                   	push   ebx
c00109b6:	e8 3d fe ff ff       	call   c00107f8 <VgaText::scrollScreen()>
c00109bb:	83 c4 10             	add    esp,0x10
c00109be:	89 f0                	mov    eax,esi
c00109c0:	84 c0                	test   al,al
c00109c2:	74 0c                	je     c00109d0 <VgaText::incrementCursor(bool)+0x64>
c00109c4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109c8:	5a                   	pop    edx
c00109c9:	5b                   	pop    ebx
c00109ca:	5e                   	pop    esi
c00109cb:	e9 da fc ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c00109d0:	58                   	pop    eax
c00109d1:	5b                   	pop    ebx
c00109d2:	5e                   	pop    esi
c00109d3:	c3                   	ret    

c00109d4 <VgaText::updateRAMUsageDisplay(int)>:
c00109d4:	56                   	push   esi
c00109d5:	8b 35 c0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4c0
c00109db:	53                   	push   ebx
c00109dc:	bb 0a 00 00 00       	mov    ebx,0xa
c00109e1:	6a 0f                	push   0xf
c00109e3:	6a 00                	push   0x0
c00109e5:	e8 fc fd ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ea:	5a                   	pop    edx
c00109eb:	59                   	pop    ecx
c00109ec:	0f b6 c8             	movzx  ecx,al
c00109ef:	51                   	push   ecx
c00109f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f4:	99                   	cdq    
c00109f5:	f7 fb                	idiv   ebx
c00109f7:	89 d3                	mov    ebx,edx
c00109f9:	83 c0 30             	add    eax,0x30
c00109fc:	83 c3 30             	add    ebx,0x30
c00109ff:	0f be c0             	movsx  eax,al
c0010a02:	0f b6 db             	movzx  ebx,bl
c0010a05:	50                   	push   eax
c0010a06:	e8 81 fe ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0b:	5a                   	pop    edx
c0010a0c:	5a                   	pop    edx
c0010a0d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010a14:	51                   	push   ecx
c0010a15:	53                   	push   ebx
c0010a16:	e8 71 fe ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1b:	5b                   	pop    ebx
c0010a1c:	5a                   	pop    edx
c0010a1d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010a24:	51                   	push   ecx
c0010a25:	6a 25                	push   0x25
c0010a27:	e8 60 fe ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2c:	59                   	pop    ecx
c0010a2d:	5b                   	pop    ebx
c0010a2e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010a35:	5b                   	pop    ebx
c0010a36:	5e                   	pop    esi
c0010a37:	c3                   	ret    

c0010a38 <VgaText::updateDiskUsage()>:
c0010a38:	55                   	push   ebp
c0010a39:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a3e:	57                   	push   edi
c0010a3f:	8b 3d c0 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4c0
c0010a45:	56                   	push   esi
c0010a46:	53                   	push   ebx
c0010a47:	6a 0f                	push   0xf
c0010a49:	6a 00                	push   0x0
c0010a4b:	e8 96 fd ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a50:	5a                   	pop    edx
c0010a51:	0f b6 d8             	movzx  ebx,al
c0010a54:	59                   	pop    ecx
c0010a55:	8b 35 08 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032908
c0010a5b:	53                   	push   ebx
c0010a5c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a61:	89 f0                	mov    eax,esi
c0010a63:	99                   	cdq    
c0010a64:	f7 fd                	idiv   ebp
c0010a66:	99                   	cdq    
c0010a67:	f7 f9                	idiv   ecx
c0010a69:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6c:	0f b6 c0             	movzx  eax,al
c0010a6f:	50                   	push   eax
c0010a70:	e8 17 fe ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a75:	5d                   	pop    ebp
c0010a76:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a7b:	5a                   	pop    edx
c0010a7c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a80:	53                   	push   ebx
c0010a81:	89 f0                	mov    eax,esi
c0010a83:	99                   	cdq    
c0010a84:	f7 fd                	idiv   ebp
c0010a86:	99                   	cdq    
c0010a87:	f7 f9                	idiv   ecx
c0010a89:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8c:	0f b6 c0             	movzx  eax,al
c0010a8f:	50                   	push   eax
c0010a90:	e8 f7 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a95:	5d                   	pop    ebp
c0010a96:	bd 64 00 00 00       	mov    ebp,0x64
c0010a9b:	5a                   	pop    edx
c0010a9c:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010aa3:	53                   	push   ebx
c0010aa4:	89 f0                	mov    eax,esi
c0010aa6:	99                   	cdq    
c0010aa7:	f7 fd                	idiv   ebp
c0010aa9:	99                   	cdq    
c0010aaa:	f7 f9                	idiv   ecx
c0010aac:	8d 42 30             	lea    eax,[edx+0x30]
c0010aaf:	0f b6 c0             	movzx  eax,al
c0010ab2:	50                   	push   eax
c0010ab3:	e8 d4 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab8:	5d                   	pop    ebp
c0010ab9:	5a                   	pop    edx
c0010aba:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010ac1:	53                   	push   ebx
c0010ac2:	89 f0                	mov    eax,esi
c0010ac4:	99                   	cdq    
c0010ac5:	f7 f9                	idiv   ecx
c0010ac7:	89 d6                	mov    esi,edx
c0010ac9:	99                   	cdq    
c0010aca:	f7 f9                	idiv   ecx
c0010acc:	8d 42 30             	lea    eax,[edx+0x30]
c0010acf:	0f b6 c0             	movzx  eax,al
c0010ad2:	50                   	push   eax
c0010ad3:	e8 b4 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad8:	5d                   	pop    ebp
c0010ad9:	5a                   	pop    edx
c0010ada:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010ae1:	53                   	push   ebx
c0010ae2:	8d 46 30             	lea    eax,[esi+0x30]
c0010ae5:	0f b6 f0             	movzx  esi,al
c0010ae8:	56                   	push   esi
c0010ae9:	e8 9e fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010aee:	5e                   	pop    esi
c0010aef:	8b 35 04 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032904
c0010af5:	5d                   	pop    ebp
c0010af6:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010afd:	bd 10 27 00 00       	mov    ebp,0x2710
c0010b02:	53                   	push   ebx
c0010b03:	89 f0                	mov    eax,esi
c0010b05:	99                   	cdq    
c0010b06:	f7 fd                	idiv   ebp
c0010b08:	99                   	cdq    
c0010b09:	f7 f9                	idiv   ecx
c0010b0b:	8d 42 30             	lea    eax,[edx+0x30]
c0010b0e:	0f b6 c0             	movzx  eax,al
c0010b11:	50                   	push   eax
c0010b12:	e8 75 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b17:	5a                   	pop    edx
c0010b18:	5d                   	pop    ebp
c0010b19:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010b20:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010b25:	53                   	push   ebx
c0010b26:	89 f0                	mov    eax,esi
c0010b28:	99                   	cdq    
c0010b29:	f7 fd                	idiv   ebp
c0010b2b:	99                   	cdq    
c0010b2c:	f7 f9                	idiv   ecx
c0010b2e:	8d 42 30             	lea    eax,[edx+0x30]
c0010b31:	0f b6 c0             	movzx  eax,al
c0010b34:	50                   	push   eax
c0010b35:	e8 52 fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3a:	5a                   	pop    edx
c0010b3b:	5d                   	pop    ebp
c0010b3c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b43:	bd 64 00 00 00       	mov    ebp,0x64
c0010b48:	53                   	push   ebx
c0010b49:	89 f0                	mov    eax,esi
c0010b4b:	99                   	cdq    
c0010b4c:	f7 fd                	idiv   ebp
c0010b4e:	99                   	cdq    
c0010b4f:	f7 f9                	idiv   ecx
c0010b51:	83 c2 30             	add    edx,0x30
c0010b54:	0f b6 d2             	movzx  edx,dl
c0010b57:	52                   	push   edx
c0010b58:	e8 2f fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b5d:	5a                   	pop    edx
c0010b5e:	5d                   	pop    ebp
c0010b5f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b66:	53                   	push   ebx
c0010b67:	89 f0                	mov    eax,esi
c0010b69:	99                   	cdq    
c0010b6a:	f7 f9                	idiv   ecx
c0010b6c:	89 d6                	mov    esi,edx
c0010b6e:	99                   	cdq    
c0010b6f:	f7 f9                	idiv   ecx
c0010b71:	8d 42 30             	lea    eax,[edx+0x30]
c0010b74:	0f b6 c0             	movzx  eax,al
c0010b77:	50                   	push   eax
c0010b78:	e8 0f fd ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b7d:	5a                   	pop    edx
c0010b7e:	59                   	pop    ecx
c0010b7f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b86:	53                   	push   ebx
c0010b87:	8d 46 30             	lea    eax,[esi+0x30]
c0010b8a:	0f b6 f0             	movzx  esi,al
c0010b8d:	56                   	push   esi
c0010b8e:	e8 f9 fc ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b93:	5b                   	pop    ebx
c0010b94:	5e                   	pop    esi
c0010b95:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b9c:	5b                   	pop    ebx
c0010b9d:	5e                   	pop    esi
c0010b9e:	5f                   	pop    edi
c0010b9f:	5d                   	pop    ebp
c0010ba0:	c3                   	ret    
c0010ba1:	90                   	nop

c0010ba2 <VgaText::updateTitle()>:
c0010ba2:	53                   	push   ebx
c0010ba3:	31 c0                	xor    eax,eax
c0010ba5:	83 ec 58             	sub    esp,0x58
c0010ba8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010bac:	89 e1                	mov    ecx,esp
c0010bae:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010bb2:	40                   	inc    eax
c0010bb3:	83 f8 50             	cmp    eax,0x50
c0010bb6:	75 f6                	jne    c0010bae <VgaText::updateTitle()+0xc>
c0010bb8:	31 c0                	xor    eax,eax
c0010bba:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010bc1:	84 db                	test   bl,bl
c0010bc3:	74 06                	je     c0010bcb <VgaText::updateTitle()+0x29>
c0010bc5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010bc8:	40                   	inc    eax
c0010bc9:	eb ef                	jmp    c0010bba <VgaText::updateTitle()+0x18>
c0010bcb:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010bd1:	85 c0                	test   eax,eax
c0010bd3:	74 09                	je     c0010bde <VgaText::updateTitle()+0x3c>
c0010bd5:	53                   	push   ebx
c0010bd6:	53                   	push   ebx
c0010bd7:	51                   	push   ecx
c0010bd8:	52                   	push   edx
c0010bd9:	ff d0                	call   eax
c0010bdb:	83 c4 10             	add    esp,0x10
c0010bde:	e8 55 fe ff ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c0010be3:	83 c4 58             	add    esp,0x58
c0010be6:	5b                   	pop    ebx
c0010be7:	c3                   	ret    

c0010be8 <VgaText::setTitleTextColour(VgaColour)>:
c0010be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bf0:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bf6:	eb aa                	jmp    c0010ba2 <VgaText::updateTitle()>

c0010bf8 <VgaText::setTitleColour(VgaColour)>:
c0010bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c00:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010c06:	eb 9a                	jmp    c0010ba2 <VgaText::updateTitle()>

c0010c08 <VgaText::setTitle(char*)>:
c0010c08:	53                   	push   ebx
c0010c09:	83 ec 10             	sub    esp,0x10
c0010c0c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c14:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010c1a:	50                   	push   eax
c0010c1b:	e8 14 fc fe ff       	call   c0000834 <strcpy>
c0010c20:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010c24:	83 c4 18             	add    esp,0x18
c0010c27:	5b                   	pop    ebx
c0010c28:	e9 75 ff ff ff       	jmp    c0010ba2 <VgaText::updateTitle()>
c0010c2d:	90                   	nop

c0010c2e <VgaText::decrementCursor(bool)>:
c0010c2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010c32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010c36:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010c3c:	85 c0                	test   eax,eax
c0010c3e:	74 07                	je     c0010c47 <VgaText::decrementCursor(bool)+0x19>
c0010c40:	48                   	dec    eax
c0010c41:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c47:	84 c9                	test   cl,cl
c0010c49:	74 09                	je     c0010c54 <VgaText::decrementCursor(bool)+0x26>
c0010c4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c4f:	e9 56 fa ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c0010c54:	c3                   	ret    
c0010c55:	90                   	nop

c0010c56 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c56:	53                   	push   ebx
c0010c57:	83 ec 08             	sub    esp,0x8
c0010c5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c6a:	3c 07                	cmp    al,0x7
c0010c6c:	75 2a                	jne    c0010c98 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c6e:	a1 1c e7 02 c0       	mov    eax,ds:0xc002e71c
c0010c73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c7b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c83:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c8f:	83 c4 08             	add    esp,0x8
c0010c92:	5b                   	pop    ebx
c0010c93:	e9 9c 31 00 00       	jmp    c0013e34 <Buzzer::beep(int, int, bool)>
c0010c98:	3c 0d                	cmp    al,0xd
c0010c9a:	75 0c                	jne    c0010ca8 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c9c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010ca6:	eb 3b                	jmp    c0010ce3 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010ca8:	3c 0a                	cmp    al,0xa
c0010caa:	75 40                	jne    c0010cec <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010cac:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010cb2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010cbc:	8d 50 01             	lea    edx,[eax+0x1]
c0010cbf:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010cc5:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010ccb:	75 12                	jne    c0010cdf <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010ccd:	83 ec 0c             	sub    esp,0xc
c0010cd0:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010cd6:	53                   	push   ebx
c0010cd7:	e8 1c fb ff ff       	call   c00107f8 <VgaText::scrollScreen()>
c0010cdc:	83 c4 10             	add    esp,0x10
c0010cdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ce3:	83 c4 08             	add    esp,0x8
c0010ce6:	5b                   	pop    ebx
c0010ce7:	e9 be f9 ff ff       	jmp    c00106aa <VgaText::updateCursor()>
c0010cec:	3c 08                	cmp    al,0x8
c0010cee:	75 31                	jne    c0010d21 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cf0:	50                   	push   eax
c0010cf1:	50                   	push   eax
c0010cf2:	6a 01                	push   0x1
c0010cf4:	53                   	push   ebx
c0010cf5:	e8 34 ff ff ff       	call   c0010c2e <VgaText::decrementCursor(bool)>
c0010cfa:	5a                   	pop    edx
c0010cfb:	59                   	pop    ecx
c0010cfc:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d02:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d08:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d0e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d14:	6a 20                	push   0x20
c0010d16:	53                   	push   ebx
c0010d17:	e8 82 fb ff ff       	call   c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d1c:	83 c4 28             	add    esp,0x28
c0010d1f:	5b                   	pop    ebx
c0010d20:	c3                   	ret    
c0010d21:	83 ec 08             	sub    esp,0x8
c0010d24:	0f be c0             	movsx  eax,al
c0010d27:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d2d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d33:	51                   	push   ecx
c0010d34:	52                   	push   edx
c0010d35:	50                   	push   eax
c0010d36:	53                   	push   ebx
c0010d37:	e8 62 fb ff ff       	call   c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d3c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d40:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d48:	83 c4 28             	add    esp,0x28
c0010d4b:	5b                   	pop    ebx
c0010d4c:	e9 1b fc ff ff       	jmp    c001096c <VgaText::incrementCursor(bool)>
c0010d51:	90                   	nop

c0010d52 <VgaText::isShowingCursor()>:
c0010d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d56:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d5c:	c3                   	ret    
c0010d5d:	90                   	nop

c0010d5e <VgaText::isBlinkDisabled()>:
c0010d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d62:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d68:	83 f0 01             	xor    eax,0x1
c0010d6b:	c3                   	ret    

c0010d6c <VgaText::setCursorHeight(int)>:
c0010d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d74:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d7a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d85:	e9 3a f9 ff ff       	jmp    c00106c4 <VgaText::showCursor(bool)>

c0010d8a <VgaText::getCursorHeight()>:
c0010d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d8e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d94:	c3                   	ret    

c0010d95 <setActiveTerminal(VgaText*)>:
c0010d95:	53                   	push   ebx
c0010d96:	83 ec 08             	sub    esp,0x8
c0010d99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d9d:	85 db                	test   ebx,ebx
c0010d9f:	75 11                	jne    c0010db2 <setActiveTerminal(VgaText*)+0x1d>
c0010da1:	c7 44 24 10 bc a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a4bc
c0010da9:	83 c4 08             	add    esp,0x8
c0010dac:	5b                   	pop    ebx
c0010dad:	e9 35 99 00 00       	jmp    c001a6e7 <Krnl::panic(char const*)>
c0010db2:	50                   	push   eax
c0010db3:	50                   	push   eax
c0010db4:	53                   	push   ebx
c0010db5:	68 ca a4 02 c0       	push   0xc002a4ca
c0010dba:	e8 77 22 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0010dbf:	a1 64 e6 02 c0       	mov    eax,ds:0xc002e664
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	85 c0                	test   eax,eax
c0010dc9:	74 0c                	je     c0010dd7 <setActiveTerminal(VgaText*)+0x42>
c0010dcb:	83 ec 0c             	sub    esp,0xc
c0010dce:	50                   	push   eax
c0010dcf:	e8 d6 f8 ff ff       	call   c00106aa <VgaText::updateCursor()>
c0010dd4:	83 c4 10             	add    esp,0x10
c0010dd7:	89 1d 64 e6 02 c0    	mov    DWORD PTR ds:0xc002e664,ebx
c0010ddd:	51                   	push   ecx
c0010dde:	51                   	push   ecx
c0010ddf:	53                   	push   ebx
c0010de0:	68 e2 a4 02 c0       	push   0xc002a4e2
c0010de5:	e8 4c 22 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0010dea:	83 c4 0c             	add    esp,0xc
c0010ded:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010df3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010df9:	53                   	push   ebx
c0010dfa:	e8 17 fb ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c0010dff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e02:	e8 57 ff ff ff       	call   c0010d5e <VgaText::isBlinkDisabled()>
c0010e07:	5a                   	pop    edx
c0010e08:	0f b6 c0             	movzx  eax,al
c0010e0b:	59                   	pop    ecx
c0010e0c:	50                   	push   eax
c0010e0d:	53                   	push   ebx
c0010e0e:	e8 c1 f8 ff ff       	call   c00106d4 <VgaText::disableBlink(bool)>
c0010e13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e16:	e8 6f ff ff ff       	call   c0010d8a <VgaText::getCursorHeight()>
c0010e1b:	5a                   	pop    edx
c0010e1c:	59                   	pop    ecx
c0010e1d:	50                   	push   eax
c0010e1e:	53                   	push   ebx
c0010e1f:	e8 48 ff ff ff       	call   c0010d6c <VgaText::setCursorHeight(int)>
c0010e24:	83 c4 10             	add    esp,0x10
c0010e27:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010e2e:	75 0a                	jne    c0010e3a <setActiveTerminal(VgaText*)+0xa5>
c0010e30:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010e3a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010e3e:	83 c4 08             	add    esp,0x8
c0010e41:	5b                   	pop    ebx
c0010e42:	e9 0f f8 ff ff       	jmp    c0010656 <VgaText::load()>

c0010e47 <doTerminalCycle()>:
c0010e47:	83 ec 18             	sub    esp,0x18
c0010e4a:	a1 60 e6 02 c0       	mov    eax,ds:0xc002e660
c0010e4f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e55:	50                   	push   eax
c0010e56:	a3 60 e6 02 c0       	mov    ds:0xc002e660,eax
c0010e5b:	e8 35 ff ff ff       	call   c0010d95 <setActiveTerminal(VgaText*)>
c0010e60:	83 c4 1c             	add    esp,0x1c
c0010e63:	c3                   	ret    

c0010e64 <VgaText::doUpdate()>:
c0010e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e68:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e6e:	85 c0                	test   eax,eax
c0010e70:	74 02                	je     c0010e74 <VgaText::doUpdate()+0x10>
c0010e72:	ff e0                	jmp    eax
c0010e74:	c3                   	ret    
c0010e75:	90                   	nop

c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e76:	55                   	push   ebp
c0010e77:	57                   	push   edi
c0010e78:	56                   	push   esi
c0010e79:	53                   	push   ebx
c0010e7a:	83 ec 1c             	sub    esp,0x1c
c0010e7d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e81:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e86:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e8d:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e90:	50                   	push   eax
c0010e91:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e96:	50                   	push   eax
c0010e97:	e8 4a f9 ff ff       	call   c00107e6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e9c:	59                   	pop    ecx
c0010e9d:	0f b6 c0             	movzx  eax,al
c0010ea0:	5b                   	pop    ebx
c0010ea1:	31 c9                	xor    ecx,ecx
c0010ea3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010eaf:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eb9:	0f b7 db             	movzx  ebx,bx
c0010ebc:	01 db                	add    ebx,ebx
c0010ebe:	01 fb                	add    ebx,edi
c0010ec0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010ec3:	84 c0                	test   al,al
c0010ec5:	0f 84 38 01 00 00    	je     c0011003 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010ecb:	3c 0d                	cmp    al,0xd
c0010ecd:	75 0f                	jne    c0010ede <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010ecf:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ed9:	e9 1f 01 00 00       	jmp    c0010ffd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ede:	3c 0a                	cmp    al,0xa
c0010ee0:	75 5b                	jne    c0010f3d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ee2:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ee8:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ef2:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ef5:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010efb:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010f01:	75 12                	jne    c0010f15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010f03:	83 ec 0c             	sub    esp,0xc
c0010f06:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010f0c:	55                   	push   ebp
c0010f0d:	e8 e6 f8 ff ff       	call   c00107f8 <VgaText::scrollScreen()>
c0010f12:	83 c4 10             	add    esp,0x10
c0010f15:	83 ec 0c             	sub    esp,0xc
c0010f18:	55                   	push   ebp
c0010f19:	e8 8c f7 ff ff       	call   c00106aa <VgaText::updateCursor()>
c0010f1e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f26:	83 c4 10             	add    esp,0x10
c0010f29:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f2f:	31 c9                	xor    ecx,ecx
c0010f31:	0f b7 db             	movzx  ebx,bx
c0010f34:	01 db                	add    ebx,ebx
c0010f36:	01 fb                	add    ebx,edi
c0010f38:	e9 c0 00 00 00       	jmp    c0010ffd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f3d:	3c 08                	cmp    al,0x8
c0010f3f:	75 4e                	jne    c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f41:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f45:	53                   	push   ebx
c0010f46:	53                   	push   ebx
c0010f47:	6a 01                	push   0x1
c0010f49:	55                   	push   ebp
c0010f4a:	e8 df fc ff ff       	call   c0010c2e <VgaText::decrementCursor(bool)>
c0010f4f:	58                   	pop    eax
c0010f50:	5a                   	pop    edx
c0010f51:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f57:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f5d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f63:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f69:	6a 20                	push   0x20
c0010f6b:	55                   	push   ebp
c0010f6c:	e8 2d f9 ff ff       	call   c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f71:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f79:	83 c4 20             	add    esp,0x20
c0010f7c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f82:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f86:	0f b7 db             	movzx  ebx,bx
c0010f89:	01 db                	add    ebx,ebx
c0010f8b:	01 fb                	add    ebx,edi
c0010f8d:	eb 6e                	jmp    c0010ffd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f8f:	51                   	push   ecx
c0010f90:	51                   	push   ecx
c0010f91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f95:	50                   	push   eax
c0010f96:	e8 f1 f8 ff ff       	call   c001088c <VgaText::combineCharAndColour(char, unsigned char)>
c0010f9b:	83 c4 10             	add    esp,0x10
c0010f9e:	66 89 03             	mov    WORD PTR [ebx],ax
c0010fa1:	39 2d 64 e6 02 c0    	cmp    DWORD PTR ds:0xc002e664,ebp
c0010fa7:	75 2a                	jne    c0010fd3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010fa9:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010faf:	85 c0                	test   eax,eax
c0010fb1:	74 20                	je     c0010fd3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010fb3:	52                   	push   edx
c0010fb4:	52                   	push   edx
c0010fb5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010fbb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010fc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fc9:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010fcc:	51                   	push   ecx
c0010fcd:	55                   	push   ebp
c0010fce:	ff d0                	call   eax
c0010fd0:	83 c4 20             	add    esp,0x20
c0010fd3:	83 c3 02             	add    ebx,0x2
c0010fd6:	50                   	push   eax
c0010fd7:	50                   	push   eax
c0010fd8:	6a 00                	push   0x0
c0010fda:	55                   	push   ebp
c0010fdb:	e8 8c f9 ff ff       	call   c001096c <VgaText::incrementCursor(bool)>
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fea:	75 0f                	jne    c0010ffb <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fec:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ff4:	0f b7 db             	movzx  ebx,bx
c0010ff7:	01 db                	add    ebx,ebx
c0010ff9:	01 fb                	add    ebx,edi
c0010ffb:	b1 01                	mov    cl,0x1
c0010ffd:	46                   	inc    esi
c0010ffe:	e9 bd fe ff ff       	jmp    c0010ec0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0011003:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0011007:	83 ec 0c             	sub    esp,0xc
c001100a:	55                   	push   ebp
c001100b:	e8 9a f6 ff ff       	call   c00106aa <VgaText::updateCursor()>
c0011010:	83 c4 10             	add    esp,0x10
c0011013:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0011017:	84 c9                	test   cl,cl
c0011019:	74 0c                	je     c0011027 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c001101b:	83 ec 0c             	sub    esp,0xc
c001101e:	55                   	push   ebp
c001101f:	e8 40 fe ff ff       	call   c0010e64 <VgaText::doUpdate()>
c0011024:	83 c4 10             	add    esp,0x10
c0011027:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001102e:	83 c4 1c             	add    esp,0x1c
c0011031:	5b                   	pop    ebx
c0011032:	5e                   	pop    esi
c0011033:	5f                   	pop    edi
c0011034:	5d                   	pop    ebp
c0011035:	c3                   	ret    

c0011036 <VgaText::clearScreen()>:
c0011036:	57                   	push   edi
c0011037:	56                   	push   esi
c0011038:	31 f6                	xor    esi,esi
c001103a:	53                   	push   ebx
c001103b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001103f:	52                   	push   edx
c0011040:	6a 00                	push   0x0
c0011042:	6a 00                	push   0x0
c0011044:	53                   	push   ebx
c0011045:	e8 cc f8 ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c001104a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001105a:	7e 26                	jle    c0011082 <VgaText::clearScreen()+0x4c>
c001105c:	31 ff                	xor    edi,edi
c001105e:	50                   	push   eax
c001105f:	50                   	push   eax
c0011060:	56                   	push   esi
c0011061:	57                   	push   edi
c0011062:	47                   	inc    edi
c0011063:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011069:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001106f:	6a 20                	push   0x20
c0011071:	53                   	push   ebx
c0011072:	e8 27 f8 ff ff       	call   c001089e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011077:	83 c4 20             	add    esp,0x20
c001107a:	83 ff 50             	cmp    edi,0x50
c001107d:	75 df                	jne    c001105e <VgaText::clearScreen()+0x28>
c001107f:	46                   	inc    esi
c0011080:	eb d2                	jmp    c0011054 <VgaText::clearScreen()+0x1e>
c0011082:	83 ec 0c             	sub    esp,0xc
c0011085:	53                   	push   ebx
c0011086:	e8 d9 fd ff ff       	call   c0010e64 <VgaText::doUpdate()>
c001108b:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011092:	83 c4 10             	add    esp,0x10
c0011095:	5b                   	pop    ebx
c0011096:	5e                   	pop    esi
c0011097:	5f                   	pop    edi
c0011098:	c3                   	ret    
c0011099:	90                   	nop

c001109a <VgaText::putchar(char)>:
c001109a:	56                   	push   esi
c001109b:	53                   	push   ebx
c001109c:	83 ec 14             	sub    esp,0x14
c001109f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00110a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110a7:	3c 5b                	cmp    al,0x5b
c00110a9:	75 21                	jne    c00110cc <VgaText::putchar(char)+0x32>
c00110ab:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00110b2:	74 28                	je     c00110dc <VgaText::putchar(char)+0x42>
c00110b4:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00110bd:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00110c7:	e9 e2 00 00 00       	jmp    c00111ae <VgaText::putchar(char)+0x114>
c00110cc:	3c 1b                	cmp    al,0x1b
c00110ce:	75 0c                	jne    c00110dc <VgaText::putchar(char)+0x42>
c00110d0:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00110d7:	e9 d2 00 00 00       	jmp    c00111ae <VgaText::putchar(char)+0x114>
c00110dc:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00110e2:	84 c9                	test   cl,cl
c00110e4:	0f 84 ab 00 00 00    	je     c0011195 <VgaText::putchar(char)+0xfb>
c00110ea:	8d 50 c0             	lea    edx,[eax-0x40]
c00110ed:	80 fa 3e             	cmp    dl,0x3e
c00110f0:	0f 87 82 00 00 00    	ja     c0011178 <VgaText::putchar(char)+0xde>
c00110f6:	3c 6d                	cmp    al,0x6d
c00110f8:	75 4d                	jne    c0011147 <VgaText::putchar(char)+0xad>
c00110fa:	31 f6                	xor    esi,esi
c00110fc:	31 d2                	xor    edx,edx
c00110fe:	31 c0                	xor    eax,eax
c0011100:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011106:	7e 30                	jle    c0011138 <VgaText::putchar(char)+0x9e>
c0011108:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011110:	80 fa 3b             	cmp    dl,0x3b
c0011113:	75 17                	jne    c001112c <VgaText::putchar(char)+0x92>
c0011115:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011119:	50                   	push   eax
c001111a:	53                   	push   ebx
c001111b:	e8 ee f5 ff ff       	call   c001070e <VgaText::doANSI_SGR(int)>
c0011120:	59                   	pop    ecx
c0011121:	31 d2                	xor    edx,edx
c0011123:	58                   	pop    eax
c0011124:	31 c0                	xor    eax,eax
c0011126:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001112a:	eb 09                	jmp    c0011135 <VgaText::putchar(char)+0x9b>
c001112c:	6b c0 0a             	imul   eax,eax,0xa
c001112f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011133:	88 ca                	mov    dl,cl
c0011135:	46                   	inc    esi
c0011136:	eb c8                	jmp    c0011100 <VgaText::putchar(char)+0x66>
c0011138:	84 d2                	test   dl,dl
c001113a:	74 31                	je     c001116d <VgaText::putchar(char)+0xd3>
c001113c:	50                   	push   eax
c001113d:	53                   	push   ebx
c001113e:	e8 cb f5 ff ff       	call   c001070e <VgaText::doANSI_SGR(int)>
c0011143:	58                   	pop    eax
c0011144:	5a                   	pop    edx
c0011145:	eb 26                	jmp    c001116d <VgaText::putchar(char)+0xd3>
c0011147:	3c 4a                	cmp    al,0x4a
c0011149:	75 22                	jne    c001116d <VgaText::putchar(char)+0xd3>
c001114b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011152:	75 19                	jne    c001116d <VgaText::putchar(char)+0xd3>
c0011154:	83 ec 0c             	sub    esp,0xc
c0011157:	53                   	push   ebx
c0011158:	e8 d9 fe ff ff       	call   c0011036 <VgaText::clearScreen()>
c001115d:	83 c4 0c             	add    esp,0xc
c0011160:	6a 00                	push   0x0
c0011162:	6a 00                	push   0x0
c0011164:	53                   	push   ebx
c0011165:	e8 ac f7 ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011176:	eb 36                	jmp    c00111ae <VgaText::putchar(char)+0x114>
c0011178:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001117e:	83 fa 0e             	cmp    edx,0xe
c0011181:	7f 2b                	jg     c00111ae <VgaText::putchar(char)+0x114>
c0011183:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011186:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001118c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011193:	eb 19                	jmp    c00111ae <VgaText::putchar(char)+0x114>
c0011195:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001119b:	0f be c0             	movsx  eax,al
c001119e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00111a4:	50                   	push   eax
c00111a5:	53                   	push   ebx
c00111a6:	e8 ab fa ff ff       	call   c0010c56 <VgaText::putchar(char, VgaColour, VgaColour)>
c00111ab:	83 c4 10             	add    esp,0x10
c00111ae:	83 c4 14             	add    esp,0x14
c00111b1:	5b                   	pop    ebx
c00111b2:	5e                   	pop    esi
c00111b3:	c3                   	ret    

c00111b4 <VgaText::puts(char const*)>:
c00111b4:	53                   	push   ebx
c00111b5:	83 ec 08             	sub    esp,0x8
c00111b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00111bc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00111bf:	84 c0                	test   al,al
c00111c1:	74 12                	je     c00111d5 <VgaText::puts(char const*)+0x21>
c00111c3:	43                   	inc    ebx
c00111c4:	51                   	push   ecx
c00111c5:	51                   	push   ecx
c00111c6:	50                   	push   eax
c00111c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111cb:	e8 ca fe ff ff       	call   c001109a <VgaText::putchar(char)>
c00111d0:	83 c4 10             	add    esp,0x10
c00111d3:	eb e7                	jmp    c00111bc <VgaText::puts(char const*)+0x8>
c00111d5:	83 c4 08             	add    esp,0x8
c00111d8:	5b                   	pop    ebx
c00111d9:	c3                   	ret    

c00111da <VgaText::putx(unsigned int)>:
c00111da:	57                   	push   edi
c00111db:	b9 11 00 00 00       	mov    ecx,0x11
c00111e0:	56                   	push   esi
c00111e1:	be fe a4 02 c0       	mov    esi,0xc002a4fe
c00111e6:	53                   	push   ebx
c00111e7:	83 ec 20             	sub    esp,0x20
c00111ea:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111ee:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111f2:	fc                   	cld    
c00111f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111f5:	be 08 00 00 00       	mov    esi,0x8
c00111fa:	50                   	push   eax
c00111fb:	50                   	push   eax
c00111fc:	89 d8                	mov    eax,ebx
c00111fe:	c1 e3 04             	shl    ebx,0x4
c0011201:	c1 e8 1c             	shr    eax,0x1c
c0011204:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011209:	50                   	push   eax
c001120a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001120e:	e8 87 fe ff ff       	call   c001109a <VgaText::putchar(char)>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	4e                   	dec    esi
c0011217:	75 e1                	jne    c00111fa <VgaText::putx(unsigned int)+0x20>
c0011219:	83 c4 20             	add    esp,0x20
c001121c:	5b                   	pop    ebx
c001121d:	5e                   	pop    esi
c001121e:	5f                   	pop    edi
c001121f:	c3                   	ret    

c0011220 <VgaText::VgaText(char const*)>:
c0011220:	57                   	push   edi
c0011221:	56                   	push   esi
c0011222:	53                   	push   ebx
c0011223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011227:	83 ec 08             	sub    esp,0x8
c001122a:	6a 00                	push   0x0
c001122c:	50                   	push   eax
c001122d:	e8 6e 05 00 00       	call   c00117a0 <UnixFile::UnixFile(int)>
c0011232:	83 c4 10             	add    esp,0x10
c0011235:	ba 64 a5 02 c0       	mov    edx,0xc002a564
c001123a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123e:	89 10                	mov    DWORD PTR [eax],edx
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001124e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011252:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001125c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011260:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011276:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011284:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001128e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011292:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00112a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a8:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00112ae:	bb 40 e6 02 c0       	mov    ebx,0xc002e640
c00112b3:	b8 08 00 00 00       	mov    eax,0x8
c00112b8:	fc                   	cld    
c00112b9:	89 d7                	mov    edi,edx
c00112bb:	89 de                	mov    esi,ebx
c00112bd:	89 c1                	mov    ecx,eax
c00112bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c5:	05 1e 10 00 00       	add    eax,0x101e
c00112ca:	83 ec 08             	sub    esp,0x8
c00112cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d1:	50                   	push   eax
c00112d2:	e8 5d f5 fe ff       	call   c0000834 <strcpy>
c00112d7:	83 c4 10             	add    esp,0x10
c00112da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112de:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ec:	83 c0 0c             	add    eax,0xc
c00112ef:	83 ec 04             	sub    esp,0x4
c00112f2:	68 00 0f 00 00       	push   0xf00
c00112f7:	6a 00                	push   0x0
c00112f9:	50                   	push   eax
c00112fa:	e8 79 f4 fe ff       	call   c0000778 <memset>
c00112ff:	83 c4 10             	add    esp,0x10
c0011302:	83 ec 04             	sub    esp,0x4
c0011305:	6a 00                	push   0x0
c0011307:	6a 07                	push   0x7
c0011309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130d:	e8 b4 f4 ff ff       	call   c00107c6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	83 ec 08             	sub    esp,0x8
c0011318:	6a 02                	push   0x2
c001131a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131e:	e8 49 fa ff ff       	call   c0010d6c <VgaText::setCursorHeight(int)>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	83 ec 04             	sub    esp,0x4
c0011329:	6a 00                	push   0x0
c001132b:	6a 00                	push   0x0
c001132d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011331:	e8 e0 f5 ff ff       	call   c0010916 <VgaText::setCursor(int, int)>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	83 ec 08             	sub    esp,0x8
c001133c:	6a 01                	push   0x1
c001133e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011342:	e8 7d f3 ff ff       	call   c00106c4 <VgaText::showCursor(bool)>
c0011347:	83 c4 10             	add    esp,0x10
c001134a:	83 ec 08             	sub    esp,0x8
c001134d:	6a 01                	push   0x1
c001134f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011353:	e8 7c f3 ff ff       	call   c00106d4 <VgaText::disableBlink(bool)>
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	83 ec 0c             	sub    esp,0xc
c001135e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011362:	e8 cf fc ff ff       	call   c0011036 <VgaText::clearScreen()>
c0011367:	83 c4 10             	add    esp,0x10
c001136a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011379:	05 9e 10 00 00       	add    eax,0x109e
c001137e:	83 ec 04             	sub    esp,0x4
c0011381:	68 96 00 00 00       	push   0x96
c0011386:	6a 00                	push   0x0
c0011388:	50                   	push   eax
c0011389:	e8 ea f3 fe ff       	call   c0000778 <memset>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011395:	05 34 11 00 00       	add    eax,0x1134
c001139a:	83 ec 04             	sub    esp,0x4
c001139d:	68 2c 01 00 00       	push   0x12c
c00113a2:	6a 00                	push   0x0
c00113a4:	50                   	push   eax
c00113a5:	e8 ce f3 fe ff       	call   c0000778 <memset>
c00113aa:	83 c4 10             	add    esp,0x10
c00113ad:	90                   	nop
c00113ae:	5b                   	pop    ebx
c00113af:	5e                   	pop    esi
c00113b0:	5f                   	pop    edi
c00113b1:	c3                   	ret    

c00113b2 <VgaText::receiveKey(unsigned char)>:
c00113b2:	55                   	push   ebp
c00113b3:	57                   	push   edi
c00113b4:	56                   	push   esi
c00113b5:	53                   	push   ebx
c00113b6:	83 ec 1c             	sub    esp,0x1c
c00113b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00113bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113c1:	84 db                	test   bl,bl
c00113c3:	0f 84 c9 00 00 00    	je     c0011492 <VgaText::receiveKey(unsigned char)+0xe0>
c00113c9:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00113cf:	80 fb 08             	cmp    bl,0x8
c00113d2:	75 2c                	jne    c0011400 <VgaText::receiveKey(unsigned char)+0x4e>
c00113d4:	83 ec 0c             	sub    esp,0xc
c00113d7:	57                   	push   edi
c00113d8:	e8 b7 f3 fe ff       	call   c0000794 <strlen>
c00113dd:	83 c4 10             	add    esp,0x10
c00113e0:	85 c0                	test   eax,eax
c00113e2:	74 41                	je     c0011425 <VgaText::receiveKey(unsigned char)+0x73>
c00113e4:	50                   	push   eax
c00113e5:	50                   	push   eax
c00113e6:	6a 08                	push   0x8
c00113e8:	56                   	push   esi
c00113e9:	e8 ac fc ff ff       	call   c001109a <VgaText::putchar(char)>
c00113ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113f1:	e8 9e f3 fe ff       	call   c0000794 <strlen>
c00113f6:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113fe:	eb 22                	jmp    c0011422 <VgaText::receiveKey(unsigned char)+0x70>
c0011400:	0f be c3             	movsx  eax,bl
c0011403:	52                   	push   edx
c0011404:	52                   	push   edx
c0011405:	50                   	push   eax
c0011406:	56                   	push   esi
c0011407:	e8 8e fc ff ff       	call   c001109a <VgaText::putchar(char)>
c001140c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011410:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011415:	59                   	pop    ecx
c0011416:	5d                   	pop    ebp
c0011417:	8d 44 24 16          	lea    eax,[esp+0x16]
c001141b:	50                   	push   eax
c001141c:	57                   	push   edi
c001141d:	e8 52 f5 fe ff       	call   c0000974 <strcat>
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001142c:	75 05                	jne    c0011433 <VgaText::receiveKey(unsigned char)+0x81>
c001142e:	80 fb 0a             	cmp    bl,0xa
c0011431:	75 53                	jne    c0011486 <VgaText::receiveKey(unsigned char)+0xd4>
c0011433:	83 ec 0c             	sub    esp,0xc
c0011436:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001143c:	53                   	push   ebx
c001143d:	e8 52 f3 fe ff       	call   c0000794 <strlen>
c0011442:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011445:	89 c5                	mov    ebp,eax
c0011447:	e8 48 f3 fe ff       	call   c0000794 <strlen>
c001144c:	83 c4 10             	add    esp,0x10
c001144f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011453:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011458:	76 10                	jbe    c001146a <VgaText::receiveKey(unsigned char)+0xb8>
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	68 0f a5 02 c0       	push   0xc002a50f
c0011462:	e8 80 92 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	50                   	push   eax
c001146b:	50                   	push   eax
c001146c:	57                   	push   edi
c001146d:	53                   	push   ebx
c001146e:	e8 01 f5 fe ff       	call   c0000974 <strcat>
c0011473:	83 c4 0c             	add    esp,0xc
c0011476:	68 96 00 00 00       	push   0x96
c001147b:	6a 00                	push   0x0
c001147d:	57                   	push   edi
c001147e:	e8 f5 f2 fe ff       	call   c0000778 <memset>
c0011483:	83 c4 10             	add    esp,0x10
c0011486:	83 ec 0c             	sub    esp,0xc
c0011489:	56                   	push   esi
c001148a:	e8 d5 f9 ff ff       	call   c0010e64 <VgaText::doUpdate()>
c001148f:	83 c4 10             	add    esp,0x10
c0011492:	83 c4 1c             	add    esp,0x1c
c0011495:	5b                   	pop    ebx
c0011496:	5e                   	pop    esi
c0011497:	5f                   	pop    edi
c0011498:	5d                   	pop    ebp
c0011499:	c3                   	ret    

c001149a <VgaText::write(unsigned long long, void*, int*)>:
c001149a:	55                   	push   ebp
c001149b:	57                   	push   edi
c001149c:	56                   	push   esi
c001149d:	53                   	push   ebx
c001149e:	83 ec 0c             	sub    esp,0xc
c00114a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00114a5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00114a9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00114ad:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00114b4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00114b7:	39 eb                	cmp    ebx,ebp
c00114b9:	74 13                	je     c00114ce <VgaText::write(unsigned long long, void*, int*)+0x34>
c00114bb:	43                   	inc    ebx
c00114bc:	50                   	push   eax
c00114bd:	50                   	push   eax
c00114be:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00114c2:	50                   	push   eax
c00114c3:	56                   	push   esi
c00114c4:	e8 d1 fb ff ff       	call   c001109a <VgaText::putchar(char)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	eb e9                	jmp    c00114b7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114ce:	83 ec 0c             	sub    esp,0xc
c00114d1:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00114d8:	56                   	push   esi
c00114d9:	e8 86 f9 ff ff       	call   c0010e64 <VgaText::doUpdate()>
c00114de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114e2:	89 38                	mov    DWORD PTR [eax],edi
c00114e4:	83 c4 1c             	add    esp,0x1c
c00114e7:	31 c0                	xor    eax,eax
c00114e9:	5b                   	pop    ebx
c00114ea:	5e                   	pop    esi
c00114eb:	5f                   	pop    edi
c00114ec:	5d                   	pop    ebp
c00114ed:	c3                   	ret    

c00114ee <newTerminal(char*)>:
c00114ee:	83 ec 28             	sub    esp,0x28
c00114f1:	68 60 12 00 00       	push   0x1260
c00114f6:	e8 45 e3 ff ff       	call   c000f840 <malloc>
c00114fb:	5a                   	pop    edx
c00114fc:	59                   	pop    ecx
c00114fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011501:	50                   	push   eax
c0011502:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011506:	e8 15 fd ff ff       	call   c0011220 <VgaText::VgaText(char const*)>
c001150b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001150f:	83 c4 2c             	add    esp,0x2c
c0011512:	c3                   	ret    
c0011513:	90                   	nop

c0011514 <TSS::TSS()>:
c0011514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011518:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001151f:	90                   	nop
c0011520:	c3                   	ret    
c0011521:	90                   	nop

c0011522 <TSS::setESP(unsigned long)>:
c0011522:	55                   	push   ebp
c0011523:	89 e5                	mov    ebp,esp
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001152e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011531:	90                   	nop
c0011532:	5d                   	pop    ebp
c0011533:	c3                   	ret    

c0011534 <TSS::flush()>:
c0011534:	55                   	push   ebp
c0011535:	89 e5                	mov    ebp,esp
c0011537:	83 ec 10             	sub    esp,0x10
c001153a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153d:	8b 00                	mov    eax,DWORD PTR [eax]
c001153f:	83 c8 03             	or     eax,0x3
c0011542:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011546:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001154a:	66 89 d0             	mov    ax,dx
c001154d:	0f 00 d8             	ltr    ax
c0011550:	90                   	nop
c0011551:	c9                   	leave  
c0011552:	c3                   	ret    
c0011553:	90                   	nop

c0011554 <TSS::setup(unsigned long, unsigned long)>:
c0011554:	55                   	push   ebp
c0011555:	89 e5                	mov    ebp,esp
c0011557:	83 ec 18             	sub    esp,0x18
c001155a:	83 ec 0c             	sub    esp,0xc
c001155d:	6a 68                	push   0x68
c001155f:	e8 dc e2 ff ff       	call   c000f840 <malloc>
c0011564:	83 c4 10             	add    esp,0x10
c0011567:	89 c2                	mov    edx,eax
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001156f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011572:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011575:	83 ec 04             	sub    esp,0x4
c0011578:	6a 68                	push   0x68
c001157a:	6a 00                	push   0x0
c001157c:	50                   	push   eax
c001157d:	e8 f6 f1 fe ff       	call   c0000778 <memset>
c0011582:	83 c4 10             	add    esp,0x10
c0011585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011588:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011594:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011597:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001159d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115a6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00115a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115af:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00115b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115bb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00115c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00115cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00115d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115df:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115eb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115fa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011600:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011603:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011606:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001160f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011619:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001161c:	0f 20 da             	mov    edx,cr3
c001161f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011622:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011625:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162e:	83 ec 08             	sub    esp,0x8
c0011631:	50                   	push   eax
c0011632:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011635:	50                   	push   eax
c0011636:	e8 e3 d9 ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c001163b:	83 c4 10             	add    esp,0x10
c001163e:	83 ec 08             	sub    esp,0x8
c0011641:	6a 68                	push   0x68
c0011643:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011646:	50                   	push   eax
c0011647:	e8 ee d9 ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001164c:	83 c4 10             	add    esp,0x10
c001164f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011653:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011656:	83 e0 0f             	and    eax,0xf
c0011659:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001165c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001165f:	83 c8 40             	or     eax,0x40
c0011662:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011665:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001166a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011670:	05 78 01 00 00       	add    eax,0x178
c0011675:	83 ec 04             	sub    esp,0x4
c0011678:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001167b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001167e:	50                   	push   eax
c001167f:	e8 ea d9 ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011684:	83 c4 10             	add    esp,0x10
c0011687:	89 c2                	mov    edx,eax
c0011689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168c:	89 10                	mov    DWORD PTR [eax],edx
c001168e:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0011693:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011699:	05 78 01 00 00       	add    eax,0x178
c001169e:	83 ec 0c             	sub    esp,0xc
c00116a1:	50                   	push   eax
c00116a2:	e8 0b da ff ff       	call   c000f0b2 <GDT::flush()>
c00116a7:	83 c4 10             	add    esp,0x10
c00116aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00116af:	83 ec 08             	sub    esp,0x8
c00116b2:	50                   	push   eax
c00116b3:	68 78 a5 02 c0       	push   0xc002a578
c00116b8:	e8 79 19 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00116c5:	c9                   	leave  
c00116c6:	c3                   	ret    
c00116c7:	90                   	nop

c00116c8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00116c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116d3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116d8:	75 08                	jne    c00116e2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00116da:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116e0:	eb 38                	jmp    c001171a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00116e2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116e7:	75 17                	jne    c0011700 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116f1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00116f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116fd:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011700:	89 c1                	mov    ecx,eax
c0011702:	83 e1 fd             	and    ecx,0xfffffffd
c0011705:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001170b:	74 cd                	je     c00116da <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001170d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011712:	83 e0 ef             	and    eax,0xffffffef
c0011715:	83 f8 08             	cmp    eax,0x8
c0011718:	76 c0                	jbe    c00116da <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001171a:	31 c0                	xor    eax,eax
c001171c:	c3                   	ret    
c001171d:	90                   	nop

c001171e <ReservedFilename::isAtty()>:
c001171e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011722:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011725:	31 c0                	xor    eax,eax
c0011727:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001172d:	74 09                	je     c0011738 <ReservedFilename::isAtty()+0x1a>
c001172f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011735:	0f 94 c0             	sete   al
c0011738:	c3                   	ret    
c0011739:	90                   	nop

c001173a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001173a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001173e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011742:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011745:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011749:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001174e:	75 08                	jne    c0011758 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011750:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011756:	eb 3d                	jmp    c0011795 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011758:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001175d:	75 17                	jne    c0011776 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001175f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011764:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011767:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001176d:	8b 10                	mov    edx,DWORD PTR [eax]
c001176f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011773:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011776:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001177b:	75 04                	jne    c0011781 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001177d:	89 0a                	mov    DWORD PTR [edx],ecx
c001177f:	eb 14                	jmp    c0011795 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011781:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011786:	74 c8                	je     c0011750 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011788:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001178d:	83 e0 ef             	and    eax,0xffffffef
c0011790:	83 f8 08             	cmp    eax,0x8
c0011793:	76 bb                	jbe    c0011750 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011795:	31 c0                	xor    eax,eax
c0011797:	c3                   	ret    

c0011798 <UnixFile::getFileDescriptor()>:
c0011798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001179c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001179f:	c3                   	ret    

c00117a0 <UnixFile::UnixFile(int)>:
c00117a0:	53                   	push   ebx
c00117a1:	83 ec 28             	sub    esp,0x28
c00117a4:	ba 64 a6 02 c0       	mov    edx,0xc002a664
c00117a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117ad:	89 10                	mov    DWORD PTR [eax],edx
c00117af:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00117b7:	0f 8f 8c 01 00 00    	jg     c0011949 <UnixFile::UnixFile(int)+0x1a9>
c00117bd:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c00117c2:	8d 50 01             	lea    edx,[eax+0x1]
c00117c5:	89 15 20 d5 02 c0    	mov    DWORD PTR ds:0xc002d520,edx
c00117cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00117cf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00117d9:	68 f8 e6 02 c0       	push   0xc002e6f8
c00117de:	e8 2d 70 01 00       	call   c0028810 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	a0 f4 e6 02 c0       	mov    al,ds:0xc002e6f4
c00117eb:	83 f0 01             	xor    eax,0x1
c00117ee:	84 c0                	test   al,al
c00117f0:	0f 84 54 01 00 00    	je     c001194a <UnixFile::UnixFile(int)+0x1aa>
c00117f6:	c6 05 f4 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6f4,0x1
c00117fd:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011805:	83 ec 0c             	sub    esp,0xc
c0011808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001180c:	e8 2f e0 ff ff       	call   c000f840 <malloc>
c0011811:	83 c4 10             	add    esp,0x10
c0011814:	89 c3                	mov    ebx,eax
c0011816:	83 ec 08             	sub    esp,0x8
c0011819:	68 03 ff ff 0f       	push   0xfffff03
c001181e:	53                   	push   ebx
c001181f:	e8 2c 01 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c0011824:	83 c4 10             	add    esp,0x10
c0011827:	89 1d ec e6 02 c0    	mov    DWORD PTR ds:0xc002e6ec,ebx
c001182d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011835:	83 ec 0c             	sub    esp,0xc
c0011838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183c:	e8 ff df ff ff       	call   c000f840 <malloc>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	89 c3                	mov    ebx,eax
c0011846:	83 ec 08             	sub    esp,0x8
c0011849:	68 01 ff ff 0f       	push   0xfffff01
c001184e:	53                   	push   ebx
c001184f:	e8 fc 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c0011854:	83 c4 10             	add    esp,0x10
c0011857:	89 1d f0 e6 02 c0    	mov    DWORD PTR ds:0xc002e6f0,ebx
c001185d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011865:	83 ec 0c             	sub    esp,0xc
c0011868:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001186c:	e8 cf df ff ff       	call   c000f840 <malloc>
c0011871:	83 c4 10             	add    esp,0x10
c0011874:	89 c3                	mov    ebx,eax
c0011876:	83 ec 08             	sub    esp,0x8
c0011879:	68 00 ff ff 0f       	push   0xfffff00
c001187e:	53                   	push   ebx
c001187f:	e8 cc 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c0011884:	83 c4 10             	add    esp,0x10
c0011887:	89 1d e4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6e4,ebx
c001188d:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011895:	83 ec 0c             	sub    esp,0xc
c0011898:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001189c:	e8 9f df ff ff       	call   c000f840 <malloc>
c00118a1:	83 c4 10             	add    esp,0x10
c00118a4:	89 c3                	mov    ebx,eax
c00118a6:	83 ec 08             	sub    esp,0x8
c00118a9:	68 02 ff ff 0f       	push   0xfffff02
c00118ae:	53                   	push   ebx
c00118af:	e8 9c 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c00118b4:	83 c4 10             	add    esp,0x10
c00118b7:	89 1d e8 e6 02 c0    	mov    DWORD PTR ds:0xc002e6e8,ebx
c00118bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00118c5:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00118ca:	7f 7e                	jg     c001194a <UnixFile::UnixFile(int)+0x1aa>
c00118cc:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00118d4:	83 ec 0c             	sub    esp,0xc
c00118d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118db:	e8 60 df ff ff       	call   c000f840 <malloc>
c00118e0:	83 c4 10             	add    esp,0x10
c00118e3:	89 c3                	mov    ebx,eax
c00118e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e9:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118ee:	83 ec 08             	sub    esp,0x8
c00118f1:	50                   	push   eax
c00118f2:	53                   	push   ebx
c00118f3:	e8 58 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c00118f8:	83 c4 10             	add    esp,0x10
c00118fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118ff:	89 1c 85 c0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1940],ebx
c0011906:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011915:	e8 26 df ff ff       	call   c000f840 <malloc>
c001191a:	83 c4 10             	add    esp,0x10
c001191d:	89 c3                	mov    ebx,eax
c001191f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011923:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011928:	83 ec 08             	sub    esp,0x8
c001192b:	50                   	push   eax
c001192c:	53                   	push   ebx
c001192d:	e8 1e 00 00 00       	call   c0011950 <ReservedFilename::ReservedFilename(int)>
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011939:	89 1c 85 80 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1980],ebx
c0011940:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011944:	e9 7c ff ff ff       	jmp    c00118c5 <UnixFile::UnixFile(int)+0x125>
c0011949:	90                   	nop
c001194a:	83 c4 28             	add    esp,0x28
c001194d:	5b                   	pop    ebx
c001194e:	c3                   	ret    
c001194f:	90                   	nop

c0011950 <ReservedFilename::ReservedFilename(int)>:
c0011950:	83 ec 0c             	sub    esp,0xc
c0011953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011957:	83 ec 08             	sub    esp,0x8
c001195a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001195e:	50                   	push   eax
c001195f:	e8 3c fe ff ff       	call   c00117a0 <UnixFile::UnixFile(int)>
c0011964:	83 c4 10             	add    esp,0x10
c0011967:	ba 80 a6 02 c0       	mov    edx,0xc002a680
c001196c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011970:	89 10                	mov    DWORD PTR [eax],edx
c0011972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011976:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001197a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001197d:	90                   	nop
c001197e:	83 c4 0c             	add    esp,0xc
c0011981:	c3                   	ret    

c0011982 <UnixFile::~UnixFile()>:
c0011982:	83 ec 1c             	sub    esp,0x1c
c0011985:	ba 64 a6 02 c0       	mov    edx,0xc002a664
c001198a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001198e:	89 10                	mov    DWORD PTR [eax],edx
c0011990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011997:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001199c:	7f 73                	jg     c0011a11 <UnixFile::~UnixFile()+0x8f>
c001199e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00119a6:	83 ec 0c             	sub    esp,0xc
c00119a9:	68 f8 e6 02 c0       	push   0xc002e6f8
c00119ae:	e8 31 6f 01 00       	call   c00288e4 <LinkedList<UnixFile>::getFirstElement()>
c00119b3:	83 c4 10             	add    esp,0x10
c00119b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119ba:	83 ec 0c             	sub    esp,0xc
c00119bd:	68 f8 e6 02 c0       	push   0xc002e6f8
c00119c2:	e8 25 6f 01 00       	call   c00288ec <LinkedList<UnixFile>::removeFirst()>
c00119c7:	83 c4 10             	add    esp,0x10
c00119ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119ce:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00119d2:	74 40                	je     c0011a14 <UnixFile::~UnixFile()+0x92>
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00119db:	68 f8 e6 02 c0       	push   0xc002e6f8
c00119e0:	e8 2b 6e 01 00       	call   c0028810 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ec:	8d 50 01             	lea    edx,[eax+0x1]
c00119ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f3:	3d 88 13 00 00       	cmp    eax,0x1388
c00119f8:	0f 94 c0             	sete   al
c00119fb:	84 c0                	test   al,al
c00119fd:	74 a7                	je     c00119a6 <UnixFile::~UnixFile()+0x24>
c00119ff:	83 ec 0c             	sub    esp,0xc
c0011a02:	68 3c a6 02 c0       	push   0xc002a63c
c0011a07:	e8 db 8c 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0011a0c:	83 c4 10             	add    esp,0x10
c0011a0f:	eb 95                	jmp    c00119a6 <UnixFile::~UnixFile()+0x24>
c0011a11:	90                   	nop
c0011a12:	eb 01                	jmp    c0011a15 <UnixFile::~UnixFile()+0x93>
c0011a14:	90                   	nop
c0011a15:	90                   	nop
c0011a16:	83 c4 1c             	add    esp,0x1c
c0011a19:	c3                   	ret    

c0011a1a <UnixFile::~UnixFile()>:
c0011a1a:	83 ec 0c             	sub    esp,0xc
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a24:	e8 59 ff ff ff       	call   c0011982 <UnixFile::~UnixFile()>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	83 ec 08             	sub    esp,0x8
c0011a2f:	6a 0c                	push   0xc
c0011a31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a35:	e8 1c 15 00 00       	call   c0012f56 <operator delete(void*, unsigned long)>
c0011a3a:	83 c4 10             	add    esp,0x10
c0011a3d:	83 c4 0c             	add    esp,0xc
c0011a40:	c3                   	ret    
c0011a41:	90                   	nop

c0011a42 <ReservedFilename::~ReservedFilename()>:
c0011a42:	83 ec 0c             	sub    esp,0xc
c0011a45:	ba 80 a6 02 c0       	mov    edx,0xc002a680
c0011a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a4e:	89 10                	mov    DWORD PTR [eax],edx
c0011a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a54:	83 ec 0c             	sub    esp,0xc
c0011a57:	50                   	push   eax
c0011a58:	e8 25 ff ff ff       	call   c0011982 <UnixFile::~UnixFile()>
c0011a5d:	83 c4 10             	add    esp,0x10
c0011a60:	90                   	nop
c0011a61:	83 c4 0c             	add    esp,0xc
c0011a64:	c3                   	ret    
c0011a65:	90                   	nop

c0011a66 <ReservedFilename::~ReservedFilename()>:
c0011a66:	83 ec 0c             	sub    esp,0xc
c0011a69:	83 ec 0c             	sub    esp,0xc
c0011a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a70:	e8 cd ff ff ff       	call   c0011a42 <ReservedFilename::~ReservedFilename()>
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	83 ec 08             	sub    esp,0x8
c0011a7b:	6a 0c                	push   0xc
c0011a7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a81:	e8 d0 14 00 00       	call   c0012f56 <operator delete(void*, unsigned long)>
c0011a86:	83 c4 10             	add    esp,0x10
c0011a89:	83 c4 0c             	add    esp,0xc
c0011a8c:	c3                   	ret    

c0011a8d <getFromFileDescriptor(int)>:
c0011a8d:	53                   	push   ebx
c0011a8e:	83 ec 08             	sub    esp,0x8
c0011a91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a95:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a9b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011aa1:	7f 2c                	jg     c0011acf <getFromFileDescriptor(int)+0x42>
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	68 f8 e6 02 c0       	push   0xc002e6f8
c0011aab:	e8 34 6e 01 00       	call   c00288e4 <LinkedList<UnixFile>::getFirstElement()>
c0011ab0:	83 c4 10             	add    esp,0x10
c0011ab3:	85 c0                	test   eax,eax
c0011ab5:	75 04                	jne    c0011abb <getFromFileDescriptor(int)+0x2e>
c0011ab7:	31 c0                	xor    eax,eax
c0011ab9:	eb 6e                	jmp    c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011abb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011abe:	74 69                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011ac0:	52                   	push   edx
c0011ac1:	52                   	push   edx
c0011ac2:	50                   	push   eax
c0011ac3:	68 f8 e6 02 c0       	push   0xc002e6f8
c0011ac8:	e8 c1 6e 01 00       	call   c002898e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011acd:	eb e1                	jmp    c0011ab0 <getFromFileDescriptor(int)+0x23>
c0011acf:	a1 ec e6 02 c0       	mov    eax,ds:0xc002e6ec
c0011ad4:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011ada:	74 4d                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011adc:	a1 f0 e6 02 c0       	mov    eax,ds:0xc002e6f0
c0011ae1:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011ae7:	74 40                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011ae9:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0011aee:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011af4:	74 33                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011af6:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0011afb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011b01:	74 26                	je     c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011b03:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011b09:	83 f8 08             	cmp    eax,0x8
c0011b0c:	77 09                	ja     c0011b17 <getFromFileDescriptor(int)+0x8a>
c0011b0e:	8b 04 85 c0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1940]
c0011b15:	eb 12                	jmp    c0011b29 <getFromFileDescriptor(int)+0x9c>
c0011b17:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011b1d:	83 fb 08             	cmp    ebx,0x8
c0011b20:	77 95                	ja     c0011ab7 <getFromFileDescriptor(int)+0x2a>
c0011b22:	8b 04 9d 80 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1980]
c0011b29:	83 c4 08             	add    esp,0x8
c0011b2c:	5b                   	pop    ebx
c0011b2d:	c3                   	ret    

c0011b2e <__static_initialization_and_destruction_0(int, int)>:
c0011b2e:	83 ec 0c             	sub    esp,0xc
c0011b31:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011b36:	75 34                	jne    c0011b6c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b38:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b40:	75 2a                	jne    c0011b6c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	68 f8 e6 02 c0       	push   0xc002e6f8
c0011b4a:	e8 69 6c 01 00       	call   c00287b8 <LinkedList<UnixFile>::LinkedList()>
c0011b4f:	83 c4 10             	add    esp,0x10
c0011b52:	83 ec 04             	sub    esp,0x4
c0011b55:	68 a8 d4 02 c0       	push   0xc002d4a8
c0011b5a:	68 f8 e6 02 c0       	push   0xc002e6f8
c0011b5f:	68 b6 87 02 c0       	push   0xc00287b6
c0011b64:	e8 67 13 00 00       	call   c0012ed0 <__cxa_atexit>
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	90                   	nop
c0011b6d:	83 c4 0c             	add    esp,0xc
c0011b70:	c3                   	ret    

c0011b71 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b71:	83 ec 0c             	sub    esp,0xc
c0011b74:	83 ec 08             	sub    esp,0x8
c0011b77:	68 ff ff 00 00       	push   0xffff
c0011b7c:	6a 01                	push   0x1
c0011b7e:	e8 ab ff ff ff       	call   c0011b2e <__static_initialization_and_destruction_0(int, int)>
c0011b83:	83 c4 10             	add    esp,0x10
c0011b86:	83 c4 0c             	add    esp,0xc
c0011b89:	c3                   	ret    

c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b8a:	53                   	push   ebx
c0011b8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b93:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b99:	89 c8                	mov    eax,ecx
c0011b9b:	d1 e8                	shr    eax,1
c0011b9d:	03 05 28 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d528
c0011ba3:	83 e1 01             	and    ecx,0x1
c0011ba6:	8a 10                	mov    dl,BYTE PTR [eax]
c0011ba8:	75 09                	jne    c0011bb3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011baa:	83 e2 f0             	and    edx,0xfffffff0
c0011bad:	09 da                	or     edx,ebx
c0011baf:	88 10                	mov    BYTE PTR [eax],dl
c0011bb1:	5b                   	pop    ebx
c0011bb2:	c3                   	ret    
c0011bb3:	c1 e3 04             	shl    ebx,0x4
c0011bb6:	83 e2 0f             	and    edx,0xf
c0011bb9:	09 da                	or     edx,ebx
c0011bbb:	88 10                	mov    BYTE PTR [eax],dl
c0011bbd:	5b                   	pop    ebx
c0011bbe:	c3                   	ret    

c0011bbf <Virt::getPageState(unsigned long)>:
c0011bbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc3:	8b 0d 28 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d528
c0011bc9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011bcf:	89 d0                	mov    eax,edx
c0011bd1:	d1 e8                	shr    eax,1
c0011bd3:	83 e2 01             	and    edx,0x1
c0011bd6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011bd9:	75 04                	jne    c0011bdf <Virt::getPageState(unsigned long)+0x20>
c0011bdb:	83 e0 0f             	and    eax,0xf
c0011bde:	c3                   	ret    
c0011bdf:	c0 e8 04             	shr    al,0x4
c0011be2:	c3                   	ret    

c0011be3 <Virt::allocateKernelVirtualPages(int)>:
c0011be3:	55                   	push   ebp
c0011be4:	31 ed                	xor    ebp,ebp
c0011be6:	57                   	push   edi
c0011be7:	56                   	push   esi
c0011be8:	53                   	push   ebx
c0011be9:	31 db                	xor    ebx,ebx
c0011beb:	83 ec 1c             	sub    esp,0x1c
c0011bee:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bf2:	8b 3d 24 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d524
c0011bf8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bfd:	57                   	push   edi
c0011bfe:	e8 bc ff ff ff       	call   c0011bbf <Virt::getPageState(unsigned long)>
c0011c03:	5a                   	pop    edx
c0011c04:	84 c0                	test   al,al
c0011c06:	75 3a                	jne    c0011c42 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011c08:	85 db                	test   ebx,ebx
c0011c0a:	75 02                	jne    c0011c0e <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011c0c:	89 fd                	mov    ebp,edi
c0011c0e:	43                   	inc    ebx
c0011c0f:	39 f3                	cmp    ebx,esi
c0011c11:	74 5a                	je     c0011c6d <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011c13:	47                   	inc    edi
c0011c14:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c1a:	76 31                	jbe    c0011c4d <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011c1c:	c7 05 24 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d524,0xc8000
c0011c26:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011c2b:	75 28                	jne    c0011c55 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011c2d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011c32:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011c37:	57                   	push   edi
c0011c38:	e8 82 ff ff ff       	call   c0011bbf <Virt::getPageState(unsigned long)>
c0011c3d:	5a                   	pop    edx
c0011c3e:	84 c0                	test   al,al
c0011c40:	74 c6                	je     c0011c08 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c42:	31 db                	xor    ebx,ebx
c0011c44:	47                   	inc    edi
c0011c45:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c4b:	77 cf                	ja     c0011c1c <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c4d:	89 3d 24 d5 02 c0    	mov    DWORD PTR ds:0xc002d524,edi
c0011c53:	eb a8                	jmp    c0011bfd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c55:	83 ec 0c             	sub    esp,0xc
c0011c58:	68 94 a6 02 c0       	push   0xc002a694
c0011c5d:	e8 85 8a 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0011c62:	8b 3d 24 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d524
c0011c68:	83 c4 10             	add    esp,0x10
c0011c6b:	eb 90                	jmp    c0011bfd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c6d:	89 2d 24 d5 02 c0    	mov    DWORD PTR ds:0xc002d524,ebp
c0011c73:	4b                   	dec    ebx
c0011c74:	74 5f                	je     c0011cd5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c76:	85 f6                	test   esi,esi
c0011c78:	74 3d                	je     c0011cb7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c7a:	89 e8                	mov    eax,ebp
c0011c7c:	31 db                	xor    ebx,ebx
c0011c7e:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c81:	eb 14                	jmp    c0011c97 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c83:	6a 01                	push   0x1
c0011c85:	43                   	inc    ebx
c0011c86:	50                   	push   eax
c0011c87:	e8 fe fe ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8c:	58                   	pop    eax
c0011c8d:	39 f3                	cmp    ebx,esi
c0011c8f:	5a                   	pop    edx
c0011c90:	74 25                	je     c0011cb7 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c92:	a1 24 d5 02 c0       	mov    eax,ds:0xc002d524
c0011c97:	8d 50 01             	lea    edx,[eax+0x1]
c0011c9a:	85 db                	test   ebx,ebx
c0011c9c:	89 15 24 d5 02 c0    	mov    DWORD PTR ds:0xc002d524,edx
c0011ca2:	74 20                	je     c0011cc4 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011ca4:	39 df                	cmp    edi,ebx
c0011ca6:	75 db                	jne    c0011c83 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011ca8:	6a 03                	push   0x3
c0011caa:	43                   	inc    ebx
c0011cab:	50                   	push   eax
c0011cac:	e8 d9 fe ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cb1:	59                   	pop    ecx
c0011cb2:	39 f3                	cmp    ebx,esi
c0011cb4:	58                   	pop    eax
c0011cb5:	75 db                	jne    c0011c92 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011cb7:	83 c4 1c             	add    esp,0x1c
c0011cba:	89 e8                	mov    eax,ebp
c0011cbc:	5b                   	pop    ebx
c0011cbd:	c1 e0 0c             	shl    eax,0xc
c0011cc0:	5e                   	pop    esi
c0011cc1:	5f                   	pop    edi
c0011cc2:	5d                   	pop    ebp
c0011cc3:	c3                   	ret    
c0011cc4:	6a 02                	push   0x2
c0011cc6:	bb 01 00 00 00       	mov    ebx,0x1
c0011ccb:	50                   	push   eax
c0011ccc:	e8 b9 fe ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cd1:	58                   	pop    eax
c0011cd2:	5a                   	pop    edx
c0011cd3:	eb bd                	jmp    c0011c92 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011cd5:	6a 04                	push   0x4
c0011cd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0011cda:	55                   	push   ebp
c0011cdb:	a3 24 d5 02 c0       	mov    ds:0xc002d524,eax
c0011ce0:	e8 a5 fe ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ce5:	59                   	pop    ecx
c0011ce6:	89 e8                	mov    eax,ebp
c0011ce8:	5b                   	pop    ebx
c0011ce9:	c1 e0 0c             	shl    eax,0xc
c0011cec:	83 c4 1c             	add    esp,0x1c
c0011cef:	5b                   	pop    ebx
c0011cf0:	5e                   	pop    esi
c0011cf1:	5f                   	pop    edi
c0011cf2:	5d                   	pop    ebp
c0011cf3:	c3                   	ret    

c0011cf4 <Virt::freeSwapfilePage(unsigned long)>:
c0011cf4:	53                   	push   ebx
c0011cf5:	8b 15 08 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e708
c0011cfb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cff:	b8 01 00 00 00       	mov    eax,0x1
c0011d04:	89 cb                	mov    ebx,ecx
c0011d06:	d3 e0                	shl    eax,cl
c0011d08:	c1 eb 05             	shr    ebx,0x5
c0011d0b:	f7 d0                	not    eax
c0011d0d:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011d10:	5b                   	pop    ebx
c0011d11:	c3                   	ret    

c0011d12 <Virt::swapIDToSector(unsigned long)>:
c0011d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d16:	0f af 05 2c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d52c
c0011d1d:	03 05 34 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d534
c0011d23:	c3                   	ret    

c0011d24 <Virt::allocateSwapfilePage()>:
c0011d24:	55                   	push   ebp
c0011d25:	31 d2                	xor    edx,edx
c0011d27:	57                   	push   edi
c0011d28:	56                   	push   esi
c0011d29:	53                   	push   ebx
c0011d2a:	83 ec 0c             	sub    esp,0xc
c0011d2d:	8b 0d 2c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d52c
c0011d33:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0011d38:	f7 f1                	div    ecx
c0011d3a:	39 0d 30 d5 02 c0    	cmp    DWORD PTR ds:0xc002d530,ecx
c0011d40:	72 2d                	jb     c0011d6f <Virt::allocateSwapfilePage()+0x4b>
c0011d42:	8b 35 08 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e708
c0011d48:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d4a:	f6 c2 01             	test   dl,0x1
c0011d4d:	74 3c                	je     c0011d8b <Virt::allocateSwapfilePage()+0x67>
c0011d4f:	31 c9                	xor    ecx,ecx
c0011d51:	bf 01 00 00 00       	mov    edi,0x1
c0011d56:	eb 12                	jmp    c0011d6a <Virt::allocateSwapfilePage()+0x46>
c0011d58:	89 fd                	mov    ebp,edi
c0011d5a:	89 ca                	mov    edx,ecx
c0011d5c:	d3 e5                	shl    ebp,cl
c0011d5e:	c1 ea 05             	shr    edx,0x5
c0011d61:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d64:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d66:	85 ea                	test   edx,ebp
c0011d68:	74 2a                	je     c0011d94 <Virt::allocateSwapfilePage()+0x70>
c0011d6a:	41                   	inc    ecx
c0011d6b:	39 c8                	cmp    eax,ecx
c0011d6d:	77 e9                	ja     c0011d58 <Virt::allocateSwapfilePage()+0x34>
c0011d6f:	83 ec 0c             	sub    esp,0xc
c0011d72:	68 5b a8 02 c0       	push   0xc002a85b
c0011d77:	e8 6b 89 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0011d7c:	83 c4 10             	add    esp,0x10
c0011d7f:	31 c9                	xor    ecx,ecx
c0011d81:	83 c4 0c             	add    esp,0xc
c0011d84:	89 c8                	mov    eax,ecx
c0011d86:	5b                   	pop    ebx
c0011d87:	5e                   	pop    esi
c0011d88:	5f                   	pop    edi
c0011d89:	5d                   	pop    ebp
c0011d8a:	c3                   	ret    
c0011d8b:	89 f3                	mov    ebx,esi
c0011d8d:	bd 01 00 00 00       	mov    ebp,0x1
c0011d92:	31 c9                	xor    ecx,ecx
c0011d94:	09 ea                	or     edx,ebp
c0011d96:	89 c8                	mov    eax,ecx
c0011d98:	89 13                	mov    DWORD PTR [ebx],edx
c0011d9a:	83 c4 0c             	add    esp,0xc
c0011d9d:	5b                   	pop    ebx
c0011d9e:	5e                   	pop    esi
c0011d9f:	5f                   	pop    edi
c0011da0:	5d                   	pop    ebp
c0011da1:	c3                   	ret    

c0011da2 <Virt::virtualMemorySetup()>:
c0011da2:	53                   	push   ebx
c0011da3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011da8:	83 ec 08             	sub    esp,0x8
c0011dab:	6a 0f                	push   0xf
c0011dad:	53                   	push   ebx
c0011dae:	43                   	inc    ebx
c0011daf:	e8 d6 fd ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db4:	59                   	pop    ecx
c0011db5:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dbb:	58                   	pop    eax
c0011dbc:	75 ed                	jne    c0011dab <Virt::virtualMemorySetup()+0x9>
c0011dbe:	83 ec 08             	sub    esp,0x8
c0011dc1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011dc6:	68 00 00 00 c8       	push   0xc8000000
c0011dcb:	68 72 a8 02 c0       	push   0xc002a872
c0011dd0:	e8 61 12 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0011dd5:	58                   	pop    eax
c0011dd6:	5a                   	pop    edx
c0011dd7:	68 00 f0 ff ef       	push   0xeffff000
c0011ddc:	68 86 a8 02 c0       	push   0xc002a886
c0011de1:	e8 50 12 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	83 ec 08             	sub    esp,0x8
c0011dec:	6a 00                	push   0x0
c0011dee:	53                   	push   ebx
c0011def:	43                   	inc    ebx
c0011df0:	e8 95 fd ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011df5:	83 c4 10             	add    esp,0x10
c0011df8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dfe:	75 e9                	jne    c0011de9 <Virt::virtualMemorySetup()+0x47>
c0011e00:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011e05:	83 ec 08             	sub    esp,0x8
c0011e08:	6a 0f                	push   0xf
c0011e0a:	53                   	push   ebx
c0011e0b:	43                   	inc    ebx
c0011e0c:	e8 79 fd ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e11:	83 c4 10             	add    esp,0x10
c0011e14:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011e1a:	75 e9                	jne    c0011e05 <Virt::virtualMemorySetup()+0x63>
c0011e1c:	83 c4 08             	add    esp,0x8
c0011e1f:	5b                   	pop    ebx
c0011e20:	c3                   	ret    

c0011e21 <Virt::swappingSetup()>:
c0011e21:	83 ec 14             	sub    esp,0x14
c0011e24:	31 d2                	xor    edx,edx
c0011e26:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0011e2b:	f7 35 2c d5 02 c0    	div    DWORD PTR ds:0xc002d52c
c0011e31:	c1 e8 05             	shr    eax,0x5
c0011e34:	50                   	push   eax
c0011e35:	68 9a a8 02 c0       	push   0xc002a89a
c0011e3a:	e8 f7 11 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0011e3f:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0011e44:	31 d2                	xor    edx,edx
c0011e46:	f7 35 2c d5 02 c0    	div    DWORD PTR ds:0xc002d52c
c0011e4c:	c1 e8 05             	shr    eax,0x5
c0011e4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e52:	e8 e9 d9 ff ff       	call   c000f840 <malloc>
c0011e57:	83 c4 0c             	add    esp,0xc
c0011e5a:	89 c1                	mov    ecx,eax
c0011e5c:	a3 08 e7 02 c0       	mov    ds:0xc002e708,eax
c0011e61:	31 d2                	xor    edx,edx
c0011e63:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0011e68:	f7 35 2c d5 02 c0    	div    DWORD PTR ds:0xc002d52c
c0011e6e:	c1 e8 05             	shr    eax,0x5
c0011e71:	50                   	push   eax
c0011e72:	6a 00                	push   0x0
c0011e74:	51                   	push   ecx
c0011e75:	e8 fe e8 fe ff       	call   c0000778 <memset>
c0011e7a:	83 c4 1c             	add    esp,0x1c
c0011e7d:	c3                   	ret    

c0011e7e <Virt::getAKernelVAS()>:
c0011e7e:	a1 0c e7 02 c0       	mov    eax,ds:0xc002e70c
c0011e83:	c3                   	ret    

c0011e84 <Virt::setupPageSwapping(int)>:
c0011e84:	57                   	push   edi
c0011e85:	56                   	push   esi
c0011e86:	53                   	push   ebx
c0011e87:	83 ec 1c             	sub    esp,0x1c
c0011e8a:	68 14 01 00 00       	push   0x114
c0011e8f:	e8 ac d9 ff ff       	call   c000f840 <malloc>
c0011e94:	83 c4 0c             	add    esp,0xc
c0011e97:	89 c6                	mov    esi,eax
c0011e99:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c0011e9f:	68 b5 a8 02 c0       	push   0xc002a8b5
c0011ea4:	50                   	push   eax
c0011ea5:	e8 e4 16 00 00       	call   c001358e <File::File(char const*, Process*)>
c0011eaa:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ead:	e8 b8 18 00 00       	call   c001376a <File::unlink()>
c0011eb2:	58                   	pop    eax
c0011eb3:	5a                   	pop    edx
c0011eb4:	6a 12                	push   0x12
c0011eb6:	56                   	push   esi
c0011eb7:	e8 36 17 00 00       	call   c00135f2 <File::open(FileOpenMode)>
c0011ebc:	83 c4 10             	add    esp,0x10
c0011ebf:	85 c0                	test   eax,eax
c0011ec1:	0f 85 ca 00 00 00    	jne    c0011f91 <Virt::setupPageSwapping(int)+0x10d>
c0011ec7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ecb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ed3:	c1 e3 08             	shl    ebx,0x8
c0011ed6:	83 ec 0c             	sub    esp,0xc
c0011ed9:	68 00 00 01 00       	push   0x10000
c0011ede:	e8 5d d9 ff ff       	call   c000f840 <malloc>
c0011ee3:	83 c4 0c             	add    esp,0xc
c0011ee6:	89 c7                	mov    edi,eax
c0011ee8:	68 00 00 01 00       	push   0x10000
c0011eed:	6a 00                	push   0x0
c0011eef:	50                   	push   eax
c0011ef0:	e8 83 e8 fe ff       	call   c0000778 <memset>
c0011ef5:	83 c4 10             	add    esp,0x10
c0011ef8:	85 db                	test   ebx,ebx
c0011efa:	79 03                	jns    c0011eff <Virt::setupPageSwapping(int)+0x7b>
c0011efc:	83 c3 0f             	add    ebx,0xf
c0011eff:	c1 fb 04             	sar    ebx,0x4
c0011f02:	4b                   	dec    ebx
c0011f03:	83 fb ff             	cmp    ebx,0xffffffff
c0011f06:	74 4b                	je     c0011f53 <Virt::setupPageSwapping(int)+0xcf>
c0011f08:	83 ec 0c             	sub    esp,0xc
c0011f0b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f0d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011f11:	52                   	push   edx
c0011f12:	57                   	push   edi
c0011f13:	6a 00                	push   0x0
c0011f15:	68 00 00 01 00       	push   0x10000
c0011f1a:	56                   	push   esi
c0011f1b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011f1e:	83 c4 20             	add    esp,0x20
c0011f21:	85 c0                	test   eax,eax
c0011f23:	75 59                	jne    c0011f7e <Virt::setupPageSwapping(int)+0xfa>
c0011f25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f29:	3d 00 00 01 00       	cmp    eax,0x10000
c0011f2e:	74 d2                	je     c0011f02 <Virt::setupPageSwapping(int)+0x7e>
c0011f30:	83 ec 08             	sub    esp,0x8
c0011f33:	4b                   	dec    ebx
c0011f34:	50                   	push   eax
c0011f35:	68 08 a9 02 c0       	push   0xc002a908
c0011f3a:	e8 f7 10 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0011f3f:	c7 04 24 11 a9 02 c0 	mov    DWORD PTR [esp],0xc002a911
c0011f46:	e8 9c 87 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0011f4b:	83 c4 10             	add    esp,0x10
c0011f4e:	83 fb ff             	cmp    ebx,0xffffffff
c0011f51:	75 b5                	jne    c0011f08 <Virt::setupPageSwapping(int)+0x84>
c0011f53:	83 ec 0c             	sub    esp,0xc
c0011f56:	56                   	push   esi
c0011f57:	e8 f4 16 00 00       	call   c0013650 <File::close()>
c0011f5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f5f:	e8 fc d8 ff ff       	call   c000f860 <rfree>
c0011f64:	83 c4 10             	add    esp,0x10
c0011f67:	85 f6                	test   esi,esi
c0011f69:	74 0c                	je     c0011f77 <Virt::setupPageSwapping(int)+0xf3>
c0011f6b:	83 ec 0c             	sub    esp,0xc
c0011f6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f70:	56                   	push   esi
c0011f71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f74:	83 c4 10             	add    esp,0x10
c0011f77:	83 c4 10             	add    esp,0x10
c0011f7a:	5b                   	pop    ebx
c0011f7b:	5e                   	pop    esi
c0011f7c:	5f                   	pop    edi
c0011f7d:	c3                   	ret    
c0011f7e:	83 ec 08             	sub    esp,0x8
c0011f81:	50                   	push   eax
c0011f82:	68 f0 a8 02 c0       	push   0xc002a8f0
c0011f87:	e8 aa 10 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	eb 94                	jmp    c0011f25 <Virt::setupPageSwapping(int)+0xa1>
c0011f91:	83 ec 08             	sub    esp,0x8
c0011f94:	50                   	push   eax
c0011f95:	68 cc a8 02 c0       	push   0xc002a8cc
c0011f9a:	e8 97 10 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0011f9f:	c7 04 24 d5 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8d5
c0011fa6:	e8 3c 87 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0011fab:	83 c4 10             	add    esp,0x10
c0011fae:	e9 14 ff ff ff       	jmp    c0011ec7 <Virt::setupPageSwapping(int)+0x43>
c0011fb3:	90                   	nop

c0011fb4 <VAS::VAS()>:
c0011fb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fc3:	a3 0c e7 02 c0       	mov    ds:0xc002e70c,eax
c0011fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fcc:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fd4:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011fd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fdb:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011fe2:	90                   	nop
c0011fe3:	c3                   	ret    

c0011fe4 <VAS::VAS(VAS*)>:
c0011fe4:	83 ec 0c             	sub    esp,0xc
c0011fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011feb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ff2:	83 ec 0c             	sub    esp,0xc
c0011ff5:	68 b4 a6 02 c0       	push   0xc002a6b4
c0011ffa:	e8 e8 86 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	90                   	nop
c0012003:	83 c4 0c             	add    esp,0xc
c0012006:	c3                   	ret    
c0012007:	90                   	nop

c0012008 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012008:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001200c:	89 c2                	mov    edx,eax
c001200e:	c1 e8 0a             	shr    eax,0xa
c0012011:	c1 ea 16             	shr    edx,0x16
c0012014:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012019:	19 c9                	sbb    ecx,ecx
c001201b:	c1 e2 0c             	shl    edx,0xc
c001201e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012024:	25 fc 0f 00 00       	and    eax,0xffc
c0012029:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012030:	01 d0                	add    eax,edx
c0012032:	c3                   	ret    
c0012033:	90                   	nop

c0012034 <VAS::getPageTableEntry(unsigned long)>:
c0012034:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012038:	89 ca                	mov    edx,ecx
c001203a:	c1 e9 0a             	shr    ecx,0xa
c001203d:	c1 ea 16             	shr    edx,0x16
c0012040:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012046:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001204c:	c1 e0 0c             	shl    eax,0xc
c001204f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012052:	c3                   	ret    

c0012053 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012053:	57                   	push   edi
c0012054:	56                   	push   esi
c0012055:	be 01 00 00 00       	mov    esi,0x1
c001205a:	53                   	push   ebx
c001205b:	83 ec 10             	sub    esp,0x10
c001205e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012062:	c1 eb 0c             	shr    ebx,0xc
c0012065:	eb 3f                	jmp    c00120a6 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012067:	e8 12 fe ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c001206c:	83 ec 08             	sub    esp,0x8
c001206f:	57                   	push   edi
c0012070:	50                   	push   eax
c0012071:	e8 be ff ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012076:	83 c4 10             	add    esp,0x10
c0012079:	8b 00                	mov    eax,DWORD PTR [eax]
c001207b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001207f:	f6 c4 04             	test   ah,0x4
c0012082:	75 5f                	jne    c00120e3 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012084:	80 fa 04             	cmp    dl,0x4
c0012087:	74 78                	je     c0012101 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012089:	80 fa 02             	cmp    dl,0x2
c001208c:	0f 84 88 00 00 00    	je     c001211a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012092:	80 fa 03             	cmp    dl,0x3
c0012095:	0f 84 ad 00 00 00    	je     c0012148 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001209b:	fe ca                	dec    dl
c001209d:	0f 84 92 00 00 00    	je     c0012135 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120a3:	43                   	inc    ebx
c00120a4:	31 f6                	xor    esi,esi
c00120a6:	53                   	push   ebx
c00120a7:	e8 13 fb ff ff       	call   c0011bbf <Virt::getPageState(unsigned long)>
c00120ac:	5f                   	pop    edi
c00120ad:	89 df                	mov    edi,ebx
c00120af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00120b3:	c1 e7 0c             	shl    edi,0xc
c00120b6:	84 c0                	test   al,al
c00120b8:	75 ad                	jne    c0012067 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00120ba:	83 ec 0c             	sub    esp,0xc
c00120bd:	68 17 a9 02 c0       	push   0xc002a917
c00120c2:	e8 20 86 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c00120c7:	e8 b2 fd ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c00120cc:	5a                   	pop    edx
c00120cd:	59                   	pop    ecx
c00120ce:	57                   	push   edi
c00120cf:	50                   	push   eax
c00120d0:	e8 5f ff ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00120da:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120de:	f6 c4 04             	test   ah,0x4
c00120e1:	74 c0                	je     c00120a3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120e3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ec:	83 ec 0c             	sub    esp,0xc
c00120ef:	50                   	push   eax
c00120f0:	e8 63 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120f5:	83 c4 10             	add    esp,0x10
c00120f8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120fc:	80 fa 04             	cmp    dl,0x4
c00120ff:	75 88                	jne    c0012089 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012101:	89 f0                	mov    eax,esi
c0012103:	84 c0                	test   al,al
c0012105:	75 47                	jne    c001214e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012107:	c7 44 24 20 d8 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a6d8
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	5b                   	pop    ebx
c0012113:	5e                   	pop    esi
c0012114:	5f                   	pop    edi
c0012115:	e9 cd 85 00 00       	jmp    c001a6e7 <Krnl::panic(char const*)>
c001211a:	89 f0                	mov    eax,esi
c001211c:	84 c0                	test   al,al
c001211e:	75 15                	jne    c0012135 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012120:	83 ec 0c             	sub    esp,0xc
c0012123:	68 33 a9 02 c0       	push   0xc002a933
c0012128:	e8 ba 85 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	e9 6e ff ff ff       	jmp    c00120a3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012135:	83 ec 08             	sub    esp,0x8
c0012138:	6a 00                	push   0x0
c001213a:	53                   	push   ebx
c001213b:	e8 4a fa ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012140:	83 c4 10             	add    esp,0x10
c0012143:	e9 5b ff ff ff       	jmp    c00120a3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012148:	89 f0                	mov    eax,esi
c001214a:	84 c0                	test   al,al
c001214c:	75 15                	jne    c0012163 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001214e:	83 ec 08             	sub    esp,0x8
c0012151:	6a 00                	push   0x0
c0012153:	53                   	push   ebx
c0012154:	e8 31 fa ff ff       	call   c0011b8a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	83 c4 10             	add    esp,0x10
c001215f:	5b                   	pop    ebx
c0012160:	5e                   	pop    esi
c0012161:	5f                   	pop    edi
c0012162:	c3                   	ret    
c0012163:	c7 44 24 20 4f a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a94f
c001216b:	83 c4 10             	add    esp,0x10
c001216e:	5b                   	pop    ebx
c001216f:	5e                   	pop    esi
c0012170:	5f                   	pop    edi
c0012171:	e9 71 85 00 00       	jmp    c001a6e7 <Krnl::panic(char const*)>

c0012176 <VAS::freeAllocatedPages(unsigned long)>:
c0012176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001217a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001217e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012182:	74 09                	je     c001218d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012184:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012188:	e9 c6 fe ff ff       	jmp    c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001218d:	c7 44 24 04 fc a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6fc
c0012195:	e9 9c 0e 00 00       	jmp    c0013036 <Dbg::kprintf(char const*, ...)>

c001219a <VAS::virtualToPhysical(unsigned long)>:
c001219a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001219e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00121a2:	e8 8d fe ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c00121a7:	5a                   	pop    edx
c00121a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00121aa:	59                   	pop    ecx
c00121ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121b0:	c3                   	ret    
c00121b1:	90                   	nop

c00121b2 <VAS::reflagRange(unsigned long, int, int, int)>:
c00121b2:	55                   	push   ebp
c00121b3:	57                   	push   edi
c00121b4:	56                   	push   esi
c00121b5:	53                   	push   ebx
c00121b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00121ba:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00121be:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00121c2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00121c6:	85 db                	test   ebx,ebx
c00121c8:	7e 22                	jle    c00121ec <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00121ca:	c1 e3 0c             	shl    ebx,0xc
c00121cd:	01 f3                	add    ebx,esi
c00121cf:	56                   	push   esi
c00121d0:	81 c6 00 10 00 00    	add    esi,0x1000
c00121d6:	55                   	push   ebp
c00121d7:	e8 58 fe ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c00121dc:	5a                   	pop    edx
c00121dd:	59                   	pop    ecx
c00121de:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121e0:	21 f9                	and    ecx,edi
c00121e2:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121e6:	39 f3                	cmp    ebx,esi
c00121e8:	89 08                	mov    DWORD PTR [eax],ecx
c00121ea:	75 e3                	jne    c00121cf <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121ec:	5b                   	pop    ebx
c00121ed:	5e                   	pop    esi
c00121ee:	5f                   	pop    edi
c00121ef:	5d                   	pop    ebp
c00121f0:	c3                   	ret    
c00121f1:	90                   	nop

c00121f2 <VAS::setToWriteCombining(unsigned long, int)>:
c00121f2:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00121f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121fd:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012204:	75 01                	jne    c0012207 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012206:	c3                   	ret    
c0012207:	68 80 00 00 00       	push   0x80
c001220c:	6a ff                	push   0xffffffff
c001220e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012216:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001221a:	e8 93 ff ff ff       	call   c00121b2 <VAS::reflagRange(unsigned long, int, int, int)>
c001221f:	83 c4 14             	add    esp,0x14
c0012222:	c3                   	ret    
c0012223:	90                   	nop

c0012224 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012224:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012229:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001222d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012234:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012237:	19 c0                	sbb    eax,eax
c0012239:	83 ca 03             	or     edx,0x3
c001223c:	83 e0 fc             	and    eax,0xfffffffc
c001223f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012246:	0f 20 d8             	mov    eax,cr3
c0012249:	0f 22 d8             	mov    cr3,eax
c001224c:	c3                   	ret    
c001224d:	90                   	nop

c001224e <VAS::~VAS()>:
c001224e:	83 ec 2c             	sub    esp,0x2c
c0012251:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012259:	e8 64 bc 00 00       	call   c001dec2 <lockScheduler()>
c001225e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012263:	8b 00                	mov    eax,DWORD PTR [eax]
c0012265:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012268:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001226e:	83 ec 04             	sub    esp,0x4
c0012271:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012275:	6a 01                	push   0x1
c0012277:	50                   	push   eax
c0012278:	e8 a7 ff ff ff       	call   c0012224 <VAS::mapOtherVASIn(bool, VAS*)>
c001227d:	83 c4 10             	add    esp,0x10
c0012280:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012288:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012290:	0f 8f d7 00 00 00    	jg     c001236d <VAS::~VAS()+0x11f>
c0012296:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001229a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001229d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122a1:	c1 e2 02             	shl    edx,0x2
c00122a4:	01 d0                	add    eax,edx
c00122a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122b0:	83 e0 01             	and    eax,0x1
c00122b3:	0f 84 ab 00 00 00    	je     c0012364 <VAS::~VAS()+0x116>
c00122b9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00122c1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00122c9:	7f 75                	jg     c0012340 <VAS::~VAS()+0xf2>
c00122cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122cf:	c1 e0 0a             	shl    eax,0xa
c00122d2:	89 c2                	mov    edx,eax
c00122d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122d8:	01 d0                	add    eax,edx
c00122da:	c1 e0 0c             	shl    eax,0xc
c00122dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122e1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00122e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122eb:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122f1:	83 ec 04             	sub    esp,0x4
c00122f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122f8:	6a 01                	push   0x1
c00122fa:	50                   	push   eax
c00122fb:	e8 08 fd ff ff       	call   c0012008 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012300:	83 c4 10             	add    esp,0x10
c0012303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012307:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001230b:	8b 00                	mov    eax,DWORD PTR [eax]
c001230d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012315:	25 01 04 00 00       	and    eax,0x401
c001231a:	3d 01 04 00 00       	cmp    eax,0x401
c001231f:	75 19                	jne    c001233a <VAS::~VAS()+0xec>
c0012321:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012325:	25 00 f0 ff ff       	and    eax,0xfffff000
c001232a:	83 ec 0c             	sub    esp,0xc
c001232d:	50                   	push   eax
c001232e:	e8 25 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001233e:	eb 81                	jmp    c00122c1 <VAS::~VAS()+0x73>
c0012340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012344:	25 00 04 00 00       	and    eax,0x400
c0012349:	74 19                	je     c0012364 <VAS::~VAS()+0x116>
c001234b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001234f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012354:	83 ec 0c             	sub    esp,0xc
c0012357:	50                   	push   eax
c0012358:	e8 fb da ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001235d:	83 c4 10             	add    esp,0x10
c0012360:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012364:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012368:	e9 1b ff ff ff       	jmp    c0012288 <VAS::~VAS()+0x3a>
c001236d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012371:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012374:	83 ec 0c             	sub    esp,0xc
c0012377:	50                   	push   eax
c0012378:	e8 d6 fc ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012384:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012387:	83 ec 0c             	sub    esp,0xc
c001238a:	50                   	push   eax
c001238b:	e8 c8 da ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012390:	83 c4 10             	add    esp,0x10
c0012393:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001239b:	c1 e0 02             	shl    eax,0x2
c001239e:	83 ec 08             	sub    esp,0x8
c00123a1:	50                   	push   eax
c00123a2:	68 20 a7 02 c0       	push   0xc002a720
c00123a7:	e8 8a 0c 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00123ac:	83 c4 10             	add    esp,0x10
c00123af:	e8 10 bb 00 00       	call   c001dec4 <unlockScheduler()>
c00123b4:	90                   	nop
c00123b5:	83 c4 2c             	add    esp,0x2c
c00123b8:	c3                   	ret    
c00123b9:	90                   	nop

c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>:
c00123ba:	55                   	push   ebp
c00123bb:	57                   	push   edi
c00123bc:	56                   	push   esi
c00123bd:	53                   	push   ebx
c00123be:	83 ec 1c             	sub    esp,0x1c
c00123c1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00123c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123c9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00123cf:	77 08                	ja     c00123d9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00123d1:	0f 20 d8             	mov    eax,cr3
c00123d4:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c00123d7:	75 47                	jne    c0012420 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00123d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123dd:	09 d8                	or     eax,ebx
c00123df:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e4:	75 57                	jne    c001243d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123e6:	89 de                	mov    esi,ebx
c00123e8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123eb:	c1 ee 16             	shr    esi,0x16
c00123ee:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123f5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123f9:	74 54                	je     c001244f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123ff:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012405:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012409:	c1 e6 0c             	shl    esi,0xc
c001240c:	c1 eb 0a             	shr    ebx,0xa
c001240f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012415:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012418:	83 c4 1c             	add    esp,0x1c
c001241b:	5b                   	pop    ebx
c001241c:	5e                   	pop    esi
c001241d:	5f                   	pop    edi
c001241e:	5d                   	pop    ebp
c001241f:	c3                   	ret    
c0012420:	83 ec 0c             	sub    esp,0xc
c0012423:	68 40 a7 02 c0       	push   0xc002a740
c0012428:	e8 09 0c 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001242d:	83 c4 10             	add    esp,0x10
c0012430:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012434:	09 d8                	or     eax,ebx
c0012436:	a9 ff 0f 00 00       	test   eax,0xfff
c001243b:	74 a9                	je     c00123e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001243d:	83 ec 0c             	sub    esp,0xc
c0012440:	68 a8 a7 02 c0       	push   0xc002a7a8
c0012445:	e8 9d 82 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	eb 97                	jmp    c00123e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001244f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012453:	e8 a9 da ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012458:	89 c5                	mov    ebp,eax
c001245a:	e8 1f fa ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c001245f:	83 ec 0c             	sub    esp,0xc
c0012462:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012466:	6a 01                	push   0x1
c0012468:	e8 76 f7 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c001246d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012474:	6a 01                	push   0x1
c0012476:	50                   	push   eax
c0012477:	55                   	push   ebp
c0012478:	81 cd 07 04 00 00    	or     ebp,0x407
c001247e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012482:	51                   	push   ecx
c0012483:	e8 26 02 00 00       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012488:	83 c4 1c             	add    esp,0x1c
c001248b:	68 00 10 00 00       	push   0x1000
c0012490:	6a 00                	push   0x0
c0012492:	50                   	push   eax
c0012493:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012497:	e8 dc e2 fe ff       	call   c0000778 <memset>
c001249c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00124a0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00124a3:	e8 ab fb ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c00124a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124ac:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00124af:	83 c4 10             	add    esp,0x10
c00124b2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00124b5:	e9 41 ff ff ff       	jmp    c00123fb <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00124ba <VAS::allocatePages(int, int)>:
c00124ba:	55                   	push   ebp
c00124bb:	57                   	push   edi
c00124bc:	56                   	push   esi
c00124bd:	53                   	push   ebx
c00124be:	83 ec 1c             	sub    esp,0x1c
c00124c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124c5:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00124ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124d0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00124d6:	83 e0 01             	and    eax,0x1
c00124d9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00124dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00124e1:	0f 85 cc 00 00 00    	jne    c00125b3 <VAS::allocatePages(int, int)+0xf9>
c00124e7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124ee:	85 c0                	test   eax,eax
c00124f0:	0f 84 a1 00 00 00    	je     c0012597 <VAS::allocatePages(int, int)+0xdd>
c00124f6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124fe:	c1 e6 0c             	shl    esi,0xc
c0012501:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012505:	85 c0                	test   eax,eax
c0012507:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001250a:	7e 33                	jle    c001253f <VAS::allocatePages(int, int)+0x85>
c001250c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012510:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012514:	81 cd 00 04 00 00    	or     ebp,0x400
c001251a:	e8 e2 d9 ff ff       	call   c000ff01 <Phys::allocatePage()>
c001251f:	55                   	push   ebp
c0012520:	53                   	push   ebx
c0012521:	50                   	push   eax
c0012522:	57                   	push   edi
c0012523:	e8 92 fe ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0012528:	83 c4 10             	add    esp,0x10
c001252b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012530:	74 03                	je     c0012535 <VAS::allocatePages(int, int)+0x7b>
c0012532:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012535:	81 c3 00 10 00 00    	add    ebx,0x1000
c001253b:	39 de                	cmp    esi,ebx
c001253d:	75 db                	jne    c001251a <VAS::allocatePages(int, int)+0x60>
c001253f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012544:	75 12                	jne    c0012558 <VAS::allocatePages(int, int)+0x9e>
c0012546:	0f 20 d8             	mov    eax,cr3
c0012549:	0f 22 d8             	mov    cr3,eax
c001254c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012550:	83 c4 1c             	add    esp,0x1c
c0012553:	5b                   	pop    ebx
c0012554:	5e                   	pop    esi
c0012555:	5f                   	pop    edi
c0012556:	5d                   	pop    ebp
c0012557:	c3                   	ret    
c0012558:	c1 ee 0a             	shr    esi,0xa
c001255b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001255f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012565:	c1 eb 0a             	shr    ebx,0xa
c0012568:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001256e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012574:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001257a:	39 c3                	cmp    ebx,eax
c001257c:	77 ce                	ja     c001254c <VAS::allocatePages(int, int)+0x92>
c001257e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012581:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012587:	39 d8                	cmp    eax,ebx
c0012589:	73 f3                	jae    c001257e <VAS::allocatePages(int, int)+0xc4>
c001258b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001258f:	83 c4 1c             	add    esp,0x1c
c0012592:	5b                   	pop    ebx
c0012593:	5e                   	pop    esi
c0012594:	5f                   	pop    edi
c0012595:	5d                   	pop    ebp
c0012596:	c3                   	ret    
c0012597:	83 ec 0c             	sub    esp,0xc
c001259a:	68 cc a7 02 c0       	push   0xc002a7cc
c001259f:	e8 43 81 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c00125a4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00125a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125ab:	83 c4 10             	add    esp,0x10
c00125ae:	e9 43 ff ff ff       	jmp    c00124f6 <VAS::allocatePages(int, int)+0x3c>
c00125b3:	83 ec 0c             	sub    esp,0xc
c00125b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125ba:	e8 24 f6 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c00125bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00125cb:	0f 87 9b 00 00 00    	ja     c001266c <VAS::allocatePages(int, int)+0x1b2>
c00125d1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125d5:	85 d2                	test   edx,edx
c00125d7:	7e 3c                	jle    c0012615 <VAS::allocatePages(int, int)+0x15b>
c00125d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125dd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125e5:	c1 e5 0c             	shl    ebp,0xc
c00125e8:	81 ce 00 04 00 00    	or     esi,0x400
c00125ee:	01 dd                	add    ebp,ebx
c00125f0:	e8 0c d9 ff ff       	call   c000ff01 <Phys::allocatePage()>
c00125f5:	56                   	push   esi
c00125f6:	53                   	push   ebx
c00125f7:	50                   	push   eax
c00125f8:	57                   	push   edi
c00125f9:	e8 bc fd ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c00125fe:	83 c4 10             	add    esp,0x10
c0012601:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012606:	74 03                	je     c001260b <VAS::allocatePages(int, int)+0x151>
c0012608:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001260b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012611:	39 dd                	cmp    ebp,ebx
c0012613:	75 db                	jne    c00125f0 <VAS::allocatePages(int, int)+0x136>
c0012615:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001261a:	0f 84 26 ff ff ff    	je     c0012546 <VAS::allocatePages(int, int)+0x8c>
c0012620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012624:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012628:	89 d3                	mov    ebx,edx
c001262a:	c1 e0 0c             	shl    eax,0xc
c001262d:	c1 eb 0a             	shr    ebx,0xa
c0012630:	01 d0                	add    eax,edx
c0012632:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012638:	c1 e8 0a             	shr    eax,0xa
c001263b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012641:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012646:	2d 00 00 40 00       	sub    eax,0x400000
c001264b:	39 c3                	cmp    ebx,eax
c001264d:	0f 87 f9 fe ff ff    	ja     c001254c <VAS::allocatePages(int, int)+0x92>
c0012653:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012656:	81 c3 00 10 00 00    	add    ebx,0x1000
c001265c:	39 d8                	cmp    eax,ebx
c001265e:	73 f3                	jae    c0012653 <VAS::allocatePages(int, int)+0x199>
c0012660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012664:	83 c4 1c             	add    esp,0x1c
c0012667:	5b                   	pop    ebx
c0012668:	5e                   	pop    esi
c0012669:	5f                   	pop    edi
c001266a:	5d                   	pop    ebp
c001266b:	c3                   	ret    
c001266c:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012671:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012677:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001267e:	0f 84 4d ff ff ff    	je     c00125d1 <VAS::allocatePages(int, int)+0x117>
c0012684:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001268c:	e9 40 ff ff ff       	jmp    c00125d1 <VAS::allocatePages(int, int)+0x117>
c0012691:	90                   	nop

c0012692 <VAS::setCPUSpecific(unsigned long)>:
c0012692:	83 ec 0c             	sub    esp,0xc
c0012695:	6a 05                	push   0x5
c0012697:	68 00 00 40 c2       	push   0xc2400000
c001269c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126a4:	e8 11 fd ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a9:	83 c4 1c             	add    esp,0x1c
c00126ac:	c3                   	ret    
c00126ad:	90                   	nop

c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00126ae:	55                   	push   ebp
c00126af:	57                   	push   edi
c00126b0:	56                   	push   esi
c00126b1:	53                   	push   ebx
c00126b2:	83 ec 1c             	sub    esp,0x1c
c00126b5:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00126ba:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00126be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126c4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00126c8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00126ce:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00126d2:	83 e0 01             	and    eax,0x1
c00126d5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00126d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126dd:	85 c0                	test   eax,eax
c00126df:	7e 39                	jle    c001271a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00126e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126e5:	89 f3                	mov    ebx,esi
c00126e7:	c1 e0 0c             	shl    eax,0xc
c00126ea:	01 f0                	add    eax,esi
c00126ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126f0:	55                   	push   ebp
c00126f1:	53                   	push   ebx
c00126f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f6:	29 f0                	sub    eax,esi
c00126f8:	01 d8                	add    eax,ebx
c00126fa:	50                   	push   eax
c00126fb:	57                   	push   edi
c00126fc:	e8 b9 fc ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0012701:	83 c4 10             	add    esp,0x10
c0012704:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012709:	74 03                	je     c001270e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001270b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001270e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012714:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012718:	75 d6                	jne    c00126f0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001271a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001271f:	75 10                	jne    c0012731 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012721:	0f 20 d8             	mov    eax,cr3
c0012724:	0f 22 d8             	mov    cr3,eax
c0012727:	83 c4 1c             	add    esp,0x1c
c001272a:	89 f0                	mov    eax,esi
c001272c:	5b                   	pop    ebx
c001272d:	5e                   	pop    esi
c001272e:	5f                   	pop    edi
c001272f:	5d                   	pop    ebp
c0012730:	c3                   	ret    
c0012731:	89 f3                	mov    ebx,esi
c0012733:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012737:	c1 eb 0a             	shr    ebx,0xa
c001273a:	c1 e0 0c             	shl    eax,0xc
c001273d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012743:	01 f0                	add    eax,esi
c0012745:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001274b:	c1 e8 0a             	shr    eax,0xa
c001274e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012753:	2d 00 00 40 00       	sub    eax,0x400000
c0012758:	39 c3                	cmp    ebx,eax
c001275a:	77 cb                	ja     c0012727 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001275c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001275f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012765:	39 d8                	cmp    eax,ebx
c0012767:	73 f3                	jae    c001275c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012769:	83 c4 1c             	add    esp,0x1c
c001276c:	89 f0                	mov    eax,esi
c001276e:	5b                   	pop    ebx
c001276f:	5e                   	pop    esi
c0012770:	5f                   	pop    edi
c0012771:	5d                   	pop    ebp
c0012772:	c3                   	ret    
c0012773:	90                   	nop

c0012774 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012774:	55                   	push   ebp
c0012775:	57                   	push   edi
c0012776:	56                   	push   esi
c0012777:	53                   	push   ebx
c0012778:	83 ec 1c             	sub    esp,0x1c
c001277b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001277f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012783:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012787:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001278b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012790:	75 4a                	jne    c00127dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012792:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012796:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012799:	c1 eb 16             	shr    ebx,0x16
c001279c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00127a3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00127a7:	74 4d                	je     c00127f6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00127a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00127ad:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00127b1:	c1 e8 0a             	shr    eax,0xa
c00127b4:	80 fa 01             	cmp    dl,0x1
c00127b7:	19 d2                	sbb    edx,edx
c00127b9:	c1 e3 0c             	shl    ebx,0xc
c00127bc:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00127c0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00127c6:	25 fc 0f 00 00       	and    eax,0xffc
c00127cb:	01 d8                	add    eax,ebx
c00127cd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00127d4:	83 c4 1c             	add    esp,0x1c
c00127d7:	5b                   	pop    ebx
c00127d8:	5e                   	pop    esi
c00127d9:	5f                   	pop    edi
c00127da:	5d                   	pop    ebp
c00127db:	c3                   	ret    
c00127dc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00127e0:	83 ec 0c             	sub    esp,0xc
c00127e3:	68 f8 a7 02 c0       	push   0xc002a7f8
c00127e8:	e8 fa 7e 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c00127ed:	83 c4 10             	add    esp,0x10
c00127f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127f4:	eb 9c                	jmp    c0012792 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127fa:	e8 02 d7 ff ff       	call   c000ff01 <Phys::allocatePage()>
c00127ff:	89 c5                	mov    ebp,eax
c0012801:	e8 78 f6 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0012806:	83 ec 0c             	sub    esp,0xc
c0012809:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001280d:	6a 01                	push   0x1
c001280f:	e8 cf f3 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0012814:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001281b:	6a 01                	push   0x1
c001281d:	50                   	push   eax
c001281e:	55                   	push   ebp
c001281f:	81 cd 07 04 00 00    	or     ebp,0x407
c0012825:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012829:	51                   	push   ecx
c001282a:	e8 7f fe ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001282f:	83 c4 1c             	add    esp,0x1c
c0012832:	68 00 10 00 00       	push   0x1000
c0012837:	6a 00                	push   0x0
c0012839:	50                   	push   eax
c001283a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001283e:	e8 35 df fe ff       	call   c0000778 <memset>
c0012843:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012847:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001284a:	e8 04 f8 ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001284f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012852:	83 c4 10             	add    esp,0x10
c0012855:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012858:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001285c:	e9 48 ff ff ff       	jmp    c00127a9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012861:	90                   	nop

c0012862 <VAS::VAS(bool)>:
c0012862:	53                   	push   ebx
c0012863:	83 ec 28             	sub    esp,0x28
c0012866:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001286a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001286e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012872:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012879:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001287d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012881:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012884:	e8 78 d6 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012889:	89 c2                	mov    edx,eax
c001288b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001288f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012892:	e8 e7 f5 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0012897:	89 c3                	mov    ebx,eax
c0012899:	83 ec 0c             	sub    esp,0xc
c001289c:	6a 01                	push   0x1
c001289e:	e8 40 f3 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c00128a3:	83 c4 10             	add    esp,0x10
c00128a6:	89 c2                	mov    edx,eax
c00128a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128af:	83 ec 0c             	sub    esp,0xc
c00128b2:	6a 03                	push   0x3
c00128b4:	6a 01                	push   0x1
c00128b6:	52                   	push   edx
c00128b7:	50                   	push   eax
c00128b8:	53                   	push   ebx
c00128b9:	e8 f0 fd ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00128be:	83 c4 20             	add    esp,0x20
c00128c1:	89 c2                	mov    edx,eax
c00128c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00128ca:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00128d2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00128da:	7f 1c                	jg     c00128f8 <VAS::VAS(bool)+0x96>
c00128dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128e7:	c1 e2 02             	shl    edx,0x2
c00128ea:	01 d0                	add    eax,edx
c00128ec:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128f6:	eb da                	jmp    c00128d2 <VAS::VAS(bool)+0x70>
c00128f8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012900:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012908:	7f 7a                	jg     c0012984 <VAS::VAS(bool)+0x122>
c001290a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290e:	2d 00 02 00 00       	sub    eax,0x200
c0012913:	c1 e0 0c             	shl    eax,0xc
c0012916:	83 c8 03             	or     eax,0x3
c0012919:	89 c2                	mov    edx,eax
c001291b:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012920:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012926:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001292c:	83 e0 10             	and    eax,0x10
c001292f:	84 c0                	test   al,al
c0012931:	74 07                	je     c001293a <VAS::VAS(bool)+0xd8>
c0012933:	b8 00 01 00 00       	mov    eax,0x100
c0012938:	eb 05                	jmp    c001293f <VAS::VAS(bool)+0xdd>
c001293a:	b8 00 00 00 00       	mov    eax,0x0
c001293f:	09 d0                	or     eax,edx
c0012941:	89 c1                	mov    ecx,eax
c0012943:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012947:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001294a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001294e:	c1 e2 02             	shl    edx,0x2
c0012951:	01 d0                	add    eax,edx
c0012953:	89 ca                	mov    edx,ecx
c0012955:	89 10                	mov    DWORD PTR [eax],edx
c0012957:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001295b:	2d 40 03 00 00       	sub    eax,0x340
c0012960:	83 f8 7f             	cmp    eax,0x7f
c0012963:	77 16                	ja     c001297b <VAS::VAS(bool)+0x119>
c0012965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012969:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001296c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012970:	c1 e2 02             	shl    edx,0x2
c0012973:	01 d0                	add    eax,edx
c0012975:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001297b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001297f:	e9 7c ff ff ff       	jmp    c0012900 <VAS::VAS(bool)+0x9e>
c0012984:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012989:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001298f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012995:	83 e0 10             	and    eax,0x10
c0012998:	84 c0                	test   al,al
c001299a:	74 07                	je     c00129a3 <VAS::VAS(bool)+0x141>
c001299c:	b8 03 41 00 00       	mov    eax,0x4103
c00129a1:	eb 05                	jmp    c00129a8 <VAS::VAS(bool)+0x146>
c00129a3:	b8 03 40 00 00       	mov    eax,0x4003
c00129a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00129ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00129af:	81 c2 20 0c 00 00    	add    edx,0xc20
c00129b5:	89 02                	mov    DWORD PTR [edx],eax
c00129b7:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00129bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00129c8:	83 ec 08             	sub    esp,0x8
c00129cb:	50                   	push   eax
c00129cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129d0:	e8 bd fc ff ff       	call   c0012692 <VAS::setCPUSpecific(unsigned long)>
c00129d5:	83 c4 10             	add    esp,0x10
c00129d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129dc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00129df:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00129e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ea:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129f0:	83 e0 10             	and    eax,0x10
c00129f3:	84 c0                	test   al,al
c00129f5:	74 07                	je     c00129fe <VAS::VAS(bool)+0x19c>
c00129f7:	b8 00 01 00 00       	mov    eax,0x100
c00129fc:	eb 05                	jmp    c0012a03 <VAS::VAS(bool)+0x1a1>
c00129fe:	b8 00 00 00 00       	mov    eax,0x0
c0012a03:	09 c2                	or     edx,eax
c0012a05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a0c:	05 fc 0f 00 00       	add    eax,0xffc
c0012a11:	83 ca 03             	or     edx,0x3
c0012a14:	89 10                	mov    DWORD PTR [eax],edx
c0012a16:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012a1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a21:	83 ec 0c             	sub    esp,0xc
c0012a24:	50                   	push   eax
c0012a25:	e8 1e 1d 00 00       	call   c0014748 <Device::getName()>
c0012a2a:	83 c4 10             	add    esp,0x10
c0012a2d:	83 ec 08             	sub    esp,0x8
c0012a30:	68 69 a9 02 c0       	push   0xc002a969
c0012a35:	50                   	push   eax
c0012a36:	e8 85 de fe ff       	call   c00008c0 <strcmp>
c0012a3b:	83 c4 10             	add    esp,0x10
c0012a3e:	85 c0                	test   eax,eax
c0012a40:	0f 94 c0             	sete   al
c0012a43:	84 c0                	test   al,al
c0012a45:	74 70                	je     c0012ab7 <VAS::VAS(bool)+0x255>
c0012a47:	e8 59 b4 00 00       	call   c001dea5 <disableIRQs()>
c0012a4c:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012a51:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a57:	05 7c 09 00 00       	add    eax,0x97c
c0012a5c:	83 ec 0c             	sub    esp,0xc
c0012a5f:	50                   	push   eax
c0012a60:	e8 57 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a65:	83 c4 10             	add    esp,0x10
c0012a68:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a6d:	89 c3                	mov    ebx,eax
c0012a6f:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0012a74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a7a:	05 7c 09 00 00       	add    eax,0x97c
c0012a7f:	83 ec 0c             	sub    esp,0xc
c0012a82:	50                   	push   eax
c0012a83:	e8 34 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	83 ec 08             	sub    esp,0x8
c0012a8e:	50                   	push   eax
c0012a8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a93:	e8 9c f5 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012a98:	83 c4 10             	add    esp,0x10
c0012a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012aa2:	6a 11                	push   0x11
c0012aa4:	53                   	push   ebx
c0012aa5:	50                   	push   eax
c0012aa6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012aaa:	e8 0b f9 ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0012aaf:	83 c4 10             	add    esp,0x10
c0012ab2:	e8 fc b3 00 00       	call   c001deb3 <enableIRQs()>
c0012ab7:	90                   	nop
c0012ab8:	83 c4 28             	add    esp,0x28
c0012abb:	5b                   	pop    ebx
c0012abc:	c3                   	ret    
c0012abd:	90                   	nop

c0012abe <VAS::evict(unsigned long)>:
c0012abe:	55                   	push   ebp
c0012abf:	57                   	push   edi
c0012ac0:	56                   	push   esi
c0012ac1:	53                   	push   ebx
c0012ac2:	83 ec 1c             	sub    esp,0x1c
c0012ac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ac9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012acd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ad1:	e8 ec b3 00 00       	call   c001dec2 <lockScheduler()>
c0012ad6:	83 ec 08             	sub    esp,0x8
c0012ad9:	55                   	push   ebp
c0012ada:	68 1c a8 02 c0       	push   0xc002a81c
c0012adf:	e8 52 05 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012ae4:	e8 3b f2 ff ff       	call   c0011d24 <Virt::allocateSwapfilePage()>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	89 c7                	mov    edi,eax
c0012aee:	a1 2c d5 02 c0       	mov    eax,ds:0xc002d52c
c0012af3:	85 c0                	test   eax,eax
c0012af5:	7e 3d                	jle    c0012b34 <VAS::evict(unsigned long)+0x76>
c0012af7:	89 ee                	mov    esi,ebp
c0012af9:	31 db                	xor    ebx,ebx
c0012afb:	83 ec 0c             	sub    esp,0xc
c0012afe:	57                   	push   edi
c0012aff:	e8 0e f2 ff ff       	call   c0011d12 <Virt::swapIDToSector(unsigned long)>
c0012b04:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b07:	01 d8                	add    eax,ebx
c0012b09:	6a 01                	push   0x1
c0012b0b:	31 d2                	xor    edx,edx
c0012b0d:	43                   	inc    ebx
c0012b0e:	52                   	push   edx
c0012b0f:	81 c6 00 02 00 00    	add    esi,0x200
c0012b15:	50                   	push   eax
c0012b16:	0f be 05 38 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d538
c0012b1d:	ff 34 85 bc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1544]
c0012b24:	e8 99 3d 00 00       	call   c00168c2 <LogicalDisk::write(unsigned long long, int, void*)>
c0012b29:	83 c4 20             	add    esp,0x20
c0012b2c:	39 1d 2c d5 02 c0    	cmp    DWORD PTR ds:0xc002d52c,ebx
c0012b32:	7f c7                	jg     c0012afb <VAS::evict(unsigned long)+0x3d>
c0012b34:	83 ec 08             	sub    esp,0x8
c0012b37:	c1 e7 0b             	shl    edi,0xb
c0012b3a:	55                   	push   ebp
c0012b3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b3f:	e8 f0 f4 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012b44:	5a                   	pop    edx
c0012b45:	89 c3                	mov    ebx,eax
c0012b47:	59                   	pop    ecx
c0012b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b4f:	50                   	push   eax
c0012b50:	68 77 a9 02 c0       	push   0xc002a977
c0012b55:	e8 dc 04 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012b5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b61:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b64:	e8 ef d2 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b69:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b6b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b71:	09 d7                	or     edi,edx
c0012b73:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b75:	5b                   	pop    ebx
c0012b76:	a1 04 e7 02 c0       	mov    eax,ds:0xc002e704
c0012b7b:	5e                   	pop    esi
c0012b7c:	40                   	inc    eax
c0012b7d:	50                   	push   eax
c0012b7e:	a3 04 e7 02 c0       	mov    ds:0xc002e704,eax
c0012b83:	68 8f a9 02 c0       	push   0xc002a98f
c0012b88:	e8 a9 04 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012b8d:	0f 20 d8             	mov    eax,cr3
c0012b90:	0f 22 d8             	mov    cr3,eax
c0012b93:	83 c4 2c             	add    esp,0x2c
c0012b96:	5b                   	pop    ebx
c0012b97:	5e                   	pop    esi
c0012b98:	5f                   	pop    edi
c0012b99:	5d                   	pop    ebp
c0012b9a:	e9 25 b3 00 00       	jmp    c001dec4 <unlockScheduler()>
c0012b9f:	90                   	nop

c0012ba0 <VAS::scanForEviction(int, int)>:
c0012ba0:	55                   	push   ebp
c0012ba1:	57                   	push   edi
c0012ba2:	56                   	push   esi
c0012ba3:	53                   	push   ebx
c0012ba4:	83 ec 1c             	sub    esp,0x1c
c0012ba7:	a1 10 e7 02 c0       	mov    eax,ds:0xc002e710
c0012bac:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012bb0:	40                   	inc    eax
c0012bb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012bb5:	a3 10 e7 02 c0       	mov    ds:0xc002e710,eax
c0012bba:	85 c9                	test   ecx,ecx
c0012bbc:	75 08                	jne    c0012bc6 <VAS::scanForEviction(int, int)+0x26>
c0012bbe:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012bc6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012bce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012bd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012bde:	eb 18                	jmp    c0012bf8 <VAS::scanForEviction(int, int)+0x58>
c0012be0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012be4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012be8:	3d 00 03 00 00       	cmp    eax,0x300
c0012bed:	0f 84 a7 00 00 00    	je     c0012c9a <VAS::scanForEviction(int, int)+0xfa>
c0012bf3:	a1 10 e7 02 c0       	mov    eax,ds:0xc002e710
c0012bf8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0012bfc:	b9 00 03 00 00       	mov    ecx,0x300
c0012c01:	99                   	cdq    
c0012c02:	f7 f9                	idiv   ecx
c0012c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c07:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c0b:	74 d3                	je     c0012be0 <VAS::scanForEviction(int, int)+0x40>
c0012c0d:	89 d7                	mov    edi,edx
c0012c0f:	31 f6                	xor    esi,esi
c0012c11:	c1 e7 0a             	shl    edi,0xa
c0012c14:	eb 09                	jmp    c0012c1f <VAS::scanForEviction(int, int)+0x7f>
c0012c16:	46                   	inc    esi
c0012c17:	81 fe 00 04 00 00    	cmp    esi,0x400
c0012c1d:	74 c1                	je     c0012be0 <VAS::scanForEviction(int, int)+0x40>
c0012c1f:	8b 1d 14 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e714
c0012c25:	01 f3                	add    ebx,esi
c0012c27:	81 e3 ff 03 00 80    	and    ebx,0x800003ff
c0012c2d:	79 08                	jns    c0012c37 <VAS::scanForEviction(int, int)+0x97>
c0012c2f:	4b                   	dec    ebx
c0012c30:	81 cb 00 fc ff ff    	or     ebx,0xfffffc00
c0012c36:	43                   	inc    ebx
c0012c37:	83 ec 08             	sub    esp,0x8
c0012c3a:	53                   	push   ebx
c0012c3b:	01 fb                	add    ebx,edi
c0012c3d:	68 ad a9 02 c0       	push   0xc002a9ad
c0012c42:	c1 e3 0c             	shl    ebx,0xc
c0012c45:	e8 ec 03 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012c4a:	58                   	pop    eax
c0012c4b:	5a                   	pop    edx
c0012c4c:	53                   	push   ebx
c0012c4d:	55                   	push   ebp
c0012c4e:	e8 e1 f3 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012c53:	83 c4 10             	add    esp,0x10
c0012c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c58:	89 c2                	mov    edx,eax
c0012c5a:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c60:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c66:	75 ae                	jne    c0012c16 <VAS::scanForEviction(int, int)+0x76>
c0012c68:	a8 01                	test   al,0x1
c0012c6a:	74 aa                	je     c0012c16 <VAS::scanForEviction(int, int)+0x76>
c0012c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c70:	99                   	cdq    
c0012c71:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012c75:	85 d2                	test   edx,edx
c0012c77:	74 06                	je     c0012c7f <VAS::scanForEviction(int, int)+0xdf>
c0012c79:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0012c7d:	eb 97                	jmp    c0012c16 <VAS::scanForEviction(int, int)+0x76>
c0012c7f:	83 ec 08             	sub    esp,0x8
c0012c82:	53                   	push   ebx
c0012c83:	55                   	push   ebp
c0012c84:	e8 35 fe ff ff       	call   c0012abe <VAS::evict(unsigned long)>
c0012c89:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012c8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012c98:	75 df                	jne    c0012c79 <VAS::scanForEviction(int, int)+0xd9>
c0012c9a:	83 c4 1c             	add    esp,0x1c
c0012c9d:	5b                   	pop    ebx
c0012c9e:	5e                   	pop    esi
c0012c9f:	5f                   	pop    edi
c0012ca0:	5d                   	pop    ebp
c0012ca1:	c3                   	ret    

c0012ca2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012ca2:	55                   	push   ebp
c0012ca3:	57                   	push   edi
c0012ca4:	56                   	push   esi
c0012ca5:	53                   	push   ebx
c0012ca6:	83 ec 14             	sub    esp,0x14
c0012ca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012cad:	68 bd a9 02 c0       	push   0xc002a9bd
c0012cb2:	e8 7f 03 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012cb7:	e8 06 b2 00 00       	call   c001dec2 <lockScheduler()>
c0012cbc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012cc0:	5f                   	pop    edi
c0012cc1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012cc7:	5d                   	pop    ebp
c0012cc8:	53                   	push   ebx
c0012cc9:	68 d1 a9 02 c0       	push   0xc002a9d1
c0012cce:	e8 63 03 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012cd3:	83 c4 10             	add    esp,0x10
c0012cd6:	85 db                	test   ebx,ebx
c0012cd8:	74 33                	je     c0012d0d <VAS::tryLoadBackOffDisk(unsigned long)+0x6b>
c0012cda:	83 ec 08             	sub    esp,0x8
c0012cdd:	53                   	push   ebx
c0012cde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ce2:	e8 4d f3 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c0012ce7:	83 c4 10             	add    esp,0x10
c0012cea:	89 c6                	mov    esi,eax
c0012cec:	85 c0                	test   eax,eax
c0012cee:	74 0e                	je     c0012cfe <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c0012cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cf2:	25 01 04 00 00       	and    eax,0x401
c0012cf7:	3d 00 04 00 00       	cmp    eax,0x400
c0012cfc:	74 19                	je     c0012d17 <VAS::tryLoadBackOffDisk(unsigned long)+0x75>
c0012cfe:	e8 c1 b1 00 00       	call   c001dec4 <unlockScheduler()>
c0012d03:	31 c0                	xor    eax,eax
c0012d05:	83 c4 0c             	add    esp,0xc
c0012d08:	5b                   	pop    ebx
c0012d09:	5e                   	pop    esi
c0012d0a:	5f                   	pop    edi
c0012d0b:	5d                   	pop    ebp
c0012d0c:	c3                   	ret    
c0012d0d:	83 c4 0c             	add    esp,0xc
c0012d10:	31 c0                	xor    eax,eax
c0012d12:	5b                   	pop    ebx
c0012d13:	5e                   	pop    esi
c0012d14:	5f                   	pop    edi
c0012d15:	5d                   	pop    ebp
c0012d16:	c3                   	ret    
c0012d17:	83 ec 08             	sub    esp,0x8
c0012d1a:	53                   	push   ebx
c0012d1b:	68 e5 a9 02 c0       	push   0xc002a9e5
c0012d20:	e8 11 03 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012d25:	c6 05 c0 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5c0,0x1
c0012d2c:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012d2e:	e8 ce d1 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012d33:	c1 ed 0b             	shr    ebp,0xb
c0012d36:	c6 05 c0 e5 02 c0 00 	mov    BYTE PTR ds:0xc002e5c0,0x0
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	8b 16                	mov    edx,DWORD PTR [esi]
c0012d42:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012d48:	09 c2                	or     edx,eax
c0012d4a:	81 ca 01 08 00 00    	or     edx,0x801
c0012d50:	89 16                	mov    DWORD PTR [esi],edx
c0012d52:	8b 35 2c d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d52c
c0012d58:	85 f6                	test   esi,esi
c0012d5a:	7e 3d                	jle    c0012d99 <VAS::tryLoadBackOffDisk(unsigned long)+0xf7>
c0012d5c:	89 df                	mov    edi,ebx
c0012d5e:	31 f6                	xor    esi,esi
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	55                   	push   ebp
c0012d64:	e8 a9 ef ff ff       	call   c0011d12 <Virt::swapIDToSector(unsigned long)>
c0012d69:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d6c:	01 f0                	add    eax,esi
c0012d6e:	6a 01                	push   0x1
c0012d70:	31 d2                	xor    edx,edx
c0012d72:	46                   	inc    esi
c0012d73:	52                   	push   edx
c0012d74:	81 c7 00 02 00 00    	add    edi,0x200
c0012d7a:	50                   	push   eax
c0012d7b:	0f be 05 38 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d538
c0012d82:	ff 34 85 bc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1544]
c0012d89:	e8 c8 3a 00 00       	call   c0016856 <LogicalDisk::read(unsigned long long, int, void*)>
c0012d8e:	83 c4 20             	add    esp,0x20
c0012d91:	39 35 2c d5 02 c0    	cmp    DWORD PTR ds:0xc002d52c,esi
c0012d97:	7f c7                	jg     c0012d60 <VAS::tryLoadBackOffDisk(unsigned long)+0xbe>
c0012d99:	83 ec 08             	sub    esp,0x8
c0012d9c:	a1 04 e7 02 c0       	mov    eax,ds:0xc002e704
c0012da1:	48                   	dec    eax
c0012da2:	50                   	push   eax
c0012da3:	a3 04 e7 02 c0       	mov    ds:0xc002e704,eax
c0012da8:	68 3c a8 02 c0       	push   0xc002a83c
c0012dad:	e8 84 02 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012db2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012db5:	e8 3a ef ff ff       	call   c0011cf4 <Virt::freeSwapfilePage(unsigned long)>
c0012dba:	e8 05 b1 00 00       	call   c001dec4 <unlockScheduler()>
c0012dbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012dc3:	83 c4 10             	add    esp,0x10
c0012dc6:	25 ff 0f 00 00       	and    eax,0xfff
c0012dcb:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012dd0:	77 1e                	ja     c0012df0 <VAS::tryLoadBackOffDisk(unsigned long)+0x14e>
c0012dd2:	50                   	push   eax
c0012dd3:	6a 01                	push   0x1
c0012dd5:	6a 01                	push   0x1
c0012dd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ddb:	e8 c0 fd ff ff       	call   c0012ba0 <VAS::scanForEviction(int, int)>
c0012de0:	0f 20 d8             	mov    eax,cr3
c0012de3:	0f 22 d8             	mov    cr3,eax
c0012de6:	b0 01                	mov    al,0x1
c0012de8:	83 c4 10             	add    esp,0x10
c0012deb:	e9 15 ff ff ff       	jmp    c0012d05 <VAS::tryLoadBackOffDisk(unsigned long)+0x63>
c0012df0:	83 ec 0c             	sub    esp,0xc
c0012df3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012df9:	68 fb a9 02 c0       	push   0xc002a9fb
c0012dfe:	e8 33 02 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012e03:	5a                   	pop    edx
c0012e04:	59                   	pop    ecx
c0012e05:	53                   	push   ebx
c0012e06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e0a:	e8 93 fe ff ff       	call   c0012ca2 <VAS::tryLoadBackOffDisk(unsigned long)>
c0012e0f:	83 c4 10             	add    esp,0x10
c0012e12:	eb be                	jmp    c0012dd2 <VAS::tryLoadBackOffDisk(unsigned long)+0x130>

c0012e14 <mapVASFirstTime>:
c0012e14:	55                   	push   ebp
c0012e15:	57                   	push   edi
c0012e16:	56                   	push   esi
c0012e17:	53                   	push   ebx
c0012e18:	83 ec 0c             	sub    esp,0xc
c0012e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e20:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012e23:	4a                   	dec    edx
c0012e24:	0f 84 8e 00 00 00    	je     c0012eb8 <mapVASFirstTime+0xa4>
c0012e2a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012e2d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012e30:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012e35:	c1 e5 15             	shl    ebp,0x15
c0012e38:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012e3d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012e43:	29 eb                	sub    ebx,ebp
c0012e45:	29 ee                	sub    esi,ebp
c0012e47:	e8 b5 d0 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	68 03 04 00 00       	push   0x403
c0012e54:	6a 01                	push   0x1
c0012e56:	53                   	push   ebx
c0012e57:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012e5d:	50                   	push   eax
c0012e5e:	57                   	push   edi
c0012e5f:	e8 4a f8 ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e64:	83 c4 20             	add    esp,0x20
c0012e67:	39 f3                	cmp    ebx,esi
c0012e69:	75 dc                	jne    c0012e47 <mapVASFirstTime+0x33>
c0012e6b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012e70:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e75:	29 ee                	sub    esi,ebp
c0012e77:	29 e8                	sub    eax,ebp
c0012e79:	89 c5                	mov    ebp,eax
c0012e7b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e7f:	19 db                	sbb    ebx,ebx
c0012e81:	e8 7b d0 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0012e86:	83 e3 04             	and    ebx,0x4
c0012e89:	83 ec 0c             	sub    esp,0xc
c0012e8c:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e92:	53                   	push   ebx
c0012e93:	6a 01                	push   0x1
c0012e95:	56                   	push   esi
c0012e96:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e9c:	50                   	push   eax
c0012e9d:	57                   	push   edi
c0012e9e:	e8 0b f8 ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ea3:	83 c4 20             	add    esp,0x20
c0012ea6:	39 f5                	cmp    ebp,esi
c0012ea8:	75 d1                	jne    c0012e7b <mapVASFirstTime+0x67>
c0012eaa:	0f 20 d8             	mov    eax,cr3
c0012ead:	0f 22 d8             	mov    cr3,eax
c0012eb0:	83 c4 0c             	add    esp,0xc
c0012eb3:	5b                   	pop    ebx
c0012eb4:	5e                   	pop    esi
c0012eb5:	5f                   	pop    edi
c0012eb6:	5d                   	pop    ebp
c0012eb7:	c3                   	ret    
c0012eb8:	83 ec 0c             	sub    esp,0xc
c0012ebb:	68 0f aa 02 c0       	push   0xc002aa0f
c0012ec0:	e8 71 01 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012ec5:	83 c4 10             	add    esp,0x10
c0012ec8:	83 c4 0c             	add    esp,0xc
c0012ecb:	5b                   	pop    ebx
c0012ecc:	5e                   	pop    esi
c0012ecd:	5f                   	pop    edi
c0012ece:	5d                   	pop    ebp
c0012ecf:	c3                   	ret    

c0012ed0 <__cxa_atexit>:
c0012ed0:	31 c0                	xor    eax,eax
c0012ed2:	c3                   	ret    

c0012ed3 <__cxa_finalize>:
c0012ed3:	c3                   	ret    

c0012ed4 <__stack_chk_fail>:
c0012ed4:	55                   	push   ebp
c0012ed5:	89 e5                	mov    ebp,esp
c0012ed7:	83 ec 14             	sub    esp,0x14
c0012eda:	68 28 aa 02 c0       	push   0xc002aa28
c0012edf:	e8 52 01 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012ee4:	58                   	pop    eax
c0012ee5:	5a                   	pop    edx
c0012ee6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012ee9:	68 78 aa 02 c0       	push   0xc002aa78
c0012eee:	e8 43 01 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012ef3:	59                   	pop    ecx
c0012ef4:	58                   	pop    eax
c0012ef5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ef8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012efb:	68 78 aa 02 c0       	push   0xc002aa78
c0012f00:	e8 31 01 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012f05:	5a                   	pop    edx
c0012f06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f09:	59                   	pop    ecx
c0012f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f0c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012f0f:	68 78 aa 02 c0       	push   0xc002aa78
c0012f14:	e8 1d 01 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012f19:	5a                   	pop    edx
c0012f1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f1d:	59                   	pop    ecx
c0012f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f22:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012f25:	68 78 aa 02 c0       	push   0xc002aa78
c0012f2a:	e8 07 01 00 00       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0012f2f:	c7 04 24 80 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa80
c0012f36:	e8 ac 77 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0012f3b:	83 c4 10             	add    esp,0x10
c0012f3e:	c9                   	leave  
c0012f3f:	c3                   	ret    

c0012f40 <__cxa_pure_virtual>:
c0012f40:	83 ec 18             	sub    esp,0x18
c0012f43:	68 98 aa 02 c0       	push   0xc002aa98
c0012f48:	e8 9a 77 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0012f4d:	83 c4 1c             	add    esp,0x1c
c0012f50:	c3                   	ret    

c0012f51 <operator new[](unsigned long)>:
c0012f51:	e9 ea c8 ff ff       	jmp    c000f840 <malloc>

c0012f56 <operator delete(void*, unsigned long)>:
c0012f56:	e9 05 c9 ff ff       	jmp    c000f860 <rfree>

c0012f5b <operator delete[](void*)>:
c0012f5b:	e9 00 c9 ff ff       	jmp    c000f860 <rfree>

c0012f60 <operator delete[](void*, unsigned long)>:
c0012f60:	e9 fb c8 ff ff       	jmp    c000f860 <rfree>

c0012f65 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012f65:	57                   	push   edi
c0012f66:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012f6b:	56                   	push   esi
c0012f6c:	be ac aa 02 c0       	mov    esi,0xc002aaac
c0012f71:	53                   	push   ebx
c0012f72:	83 ec 40             	sub    esp,0x40
c0012f75:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f79:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f7d:	fc                   	cld    
c0012f7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f80:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f84:	83 f9 3e             	cmp    ecx,0x3e
c0012f87:	7e 05                	jle    c0012f8e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f89:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f8e:	89 df                	mov    edi,ebx
c0012f90:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f94:	eb 02                	jmp    c0012f98 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f96:	89 c7                	mov    edi,eax
c0012f98:	31 d2                	xor    edx,edx
c0012f9a:	46                   	inc    esi
c0012f9b:	89 f8                	mov    eax,edi
c0012f9d:	f7 f1                	div    ecx
c0012f9f:	39 cf                	cmp    edi,ecx
c0012fa1:	73 f3                	jae    c0012f96 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012fa3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012fa6:	eb 02                	jmp    c0012faa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012fa8:	89 c3                	mov    ebx,eax
c0012faa:	31 d2                	xor    edx,edx
c0012fac:	4e                   	dec    esi
c0012fad:	89 d8                	mov    eax,ebx
c0012faf:	f7 f1                	div    ecx
c0012fb1:	39 cb                	cmp    ebx,ecx
c0012fb3:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012fb7:	88 16                	mov    BYTE PTR [esi],dl
c0012fb9:	73 ed                	jae    c0012fa8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012fbb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012fbf:	83 c4 40             	add    esp,0x40
c0012fc2:	5b                   	pop    ebx
c0012fc3:	5e                   	pop    esi
c0012fc4:	5f                   	pop    edi
c0012fc5:	c3                   	ret    

c0012fc6 <Dbg::logc(char)>:
c0012fc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fca:	ba fd 03 00 00       	mov    edx,0x3fd
c0012fcf:	ec                   	in     al,dx
c0012fd0:	a8 20                	test   al,0x20
c0012fd2:	74 fb                	je     c0012fcf <Dbg::logc(char)+0x9>
c0012fd4:	ba f8 03 00 00       	mov    edx,0x3f8
c0012fd9:	88 c8                	mov    al,cl
c0012fdb:	ee                   	out    dx,al
c0012fdc:	c3                   	ret    

c0012fdd <Dbg::logs(char*)>:
c0012fdd:	53                   	push   ebx
c0012fde:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012fe2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fe5:	84 c0                	test   al,al
c0012fe7:	74 0f                	je     c0012ff8 <Dbg::logs(char*)+0x1b>
c0012fe9:	50                   	push   eax
c0012fea:	43                   	inc    ebx
c0012feb:	e8 d6 ff ff ff       	call   c0012fc6 <Dbg::logc(char)>
c0012ff0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ff3:	5a                   	pop    edx
c0012ff4:	84 c0                	test   al,al
c0012ff6:	75 f1                	jne    c0012fe9 <Dbg::logs(char*)+0xc>
c0012ff8:	5b                   	pop    ebx
c0012ff9:	c3                   	ret    

c0012ffa <Dbg::logWriteInt(unsigned int)>:
c0012ffa:	83 ec 10             	sub    esp,0x10
c0012ffd:	6a 0a                	push   0xa
c0012fff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013003:	50                   	push   eax
c0013004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013008:	e8 58 ff ff ff       	call   c0012f65 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001300d:	50                   	push   eax
c001300e:	e8 ca ff ff ff       	call   c0012fdd <Dbg::logs(char*)>
c0013013:	83 c4 20             	add    esp,0x20
c0013016:	c3                   	ret    

c0013017 <Dbg::logWriteIntBase(unsigned int, int)>:
c0013017:	83 ec 10             	sub    esp,0x10
c001301a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001301e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013022:	50                   	push   eax
c0013023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013027:	e8 39 ff ff ff       	call   c0012f65 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001302c:	50                   	push   eax
c001302d:	e8 ab ff ff ff       	call   c0012fdd <Dbg::logs(char*)>
c0013032:	83 c4 20             	add    esp,0x20
c0013035:	c3                   	ret    

c0013036 <Dbg::kprintf(char const*, ...)>:
c0013036:	55                   	push   ebp
c0013037:	57                   	push   edi
c0013038:	56                   	push   esi
c0013039:	53                   	push   ebx
c001303a:	83 ec 0c             	sub    esp,0xc
c001303d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013041:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013045:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013049:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001304c:	84 c0                	test   al,al
c001304e:	74 4a                	je     c001309a <Dbg::kprintf(char const*, ...)+0x64>
c0013050:	31 db                	xor    ebx,ebx
c0013052:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013055:	3c 25                	cmp    al,0x25
c0013057:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001305a:	0f 85 e4 00 00 00    	jne    c0013144 <Dbg::kprintf(char const*, ...)+0x10e>
c0013060:	83 c3 02             	add    ebx,0x2
c0013063:	8a 07                	mov    al,BYTE PTR [edi]
c0013065:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0013068:	83 e8 25             	sub    eax,0x25
c001306b:	3c 53                	cmp    al,0x53
c001306d:	0f 87 ba 00 00 00    	ja     c001312d <Dbg::kprintf(char const*, ...)+0xf7>
c0013073:	0f b6 c0             	movzx  eax,al
c0013076:	ff 24 85 ec aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5514]
c001307d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013081:	89 c8                	mov    eax,ecx
c0013083:	83 c1 04             	add    ecx,0x4
c0013086:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001308a:	ff 30                	push   DWORD PTR [eax]
c001308c:	e8 4c ff ff ff       	call   c0012fdd <Dbg::logs(char*)>
c0013091:	58                   	pop    eax
c0013092:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0013096:	84 c0                	test   al,al
c0013098:	75 b8                	jne    c0013052 <Dbg::kprintf(char const*, ...)+0x1c>
c001309a:	83 c4 0c             	add    esp,0xc
c001309d:	5b                   	pop    ebx
c001309e:	5e                   	pop    esi
c001309f:	5f                   	pop    edi
c00130a0:	5d                   	pop    ebp
c00130a1:	c3                   	ret    
c00130a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130a6:	89 d0                	mov    eax,edx
c00130a8:	83 c2 04             	add    edx,0x4
c00130ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130af:	ff 30                	push   DWORD PTR [eax]
c00130b1:	e8 44 ff ff ff       	call   c0012ffa <Dbg::logWriteInt(unsigned int)>
c00130b6:	58                   	pop    eax
c00130b7:	eb d9                	jmp    c0013092 <Dbg::kprintf(char const*, ...)+0x5c>
c00130b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130bd:	89 d0                	mov    eax,edx
c00130bf:	83 c2 04             	add    edx,0x4
c00130c2:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00130c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130c9:	50                   	push   eax
c00130ca:	e8 f7 fe ff ff       	call   c0012fc6 <Dbg::logc(char)>
c00130cf:	58                   	pop    eax
c00130d0:	eb c0                	jmp    c0013092 <Dbg::kprintf(char const*, ...)+0x5c>
c00130d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130d6:	89 c8                	mov    eax,ecx
c00130d8:	83 c1 04             	add    ecx,0x4
c00130db:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130df:	ff 30                	push   DWORD PTR [eax]
c00130e1:	e8 14 ff ff ff       	call   c0012ffa <Dbg::logWriteInt(unsigned int)>
c00130e6:	5f                   	pop    edi
c00130e7:	eb a9                	jmp    c0013092 <Dbg::kprintf(char const*, ...)+0x5c>
c00130e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130ed:	89 c8                	mov    eax,ecx
c00130ef:	83 c1 04             	add    ecx,0x4
c00130f2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130f6:	6a 10                	push   0x10
c00130f8:	ff 30                	push   DWORD PTR [eax]
c00130fa:	e8 18 ff ff ff       	call   c0013017 <Dbg::logWriteIntBase(unsigned int, int)>
c00130ff:	59                   	pop    ecx
c0013100:	5f                   	pop    edi
c0013101:	eb 8f                	jmp    c0013092 <Dbg::kprintf(char const*, ...)+0x5c>
c0013103:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013107:	89 d0                	mov    eax,edx
c0013109:	83 c2 08             	add    edx,0x8
c001310c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013110:	6a 10                	push   0x10
c0013112:	ff 30                	push   DWORD PTR [eax]
c0013114:	e8 fe fe ff ff       	call   c0013017 <Dbg::logWriteIntBase(unsigned int, int)>
c0013119:	58                   	pop    eax
c001311a:	5a                   	pop    edx
c001311b:	e9 72 ff ff ff       	jmp    c0013092 <Dbg::kprintf(char const*, ...)+0x5c>
c0013120:	6a 25                	push   0x25
c0013122:	e8 9f fe ff ff       	call   c0012fc6 <Dbg::logc(char)>
c0013127:	58                   	pop    eax
c0013128:	e9 65 ff ff ff       	jmp    c0013092 <Dbg::kprintf(char const*, ...)+0x5c>
c001312d:	6a 25                	push   0x25
c001312f:	e8 92 fe ff ff       	call   c0012fc6 <Dbg::logc(char)>
c0013134:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013137:	50                   	push   eax
c0013138:	e8 89 fe ff ff       	call   c0012fc6 <Dbg::logc(char)>
c001313d:	5a                   	pop    edx
c001313e:	59                   	pop    ecx
c001313f:	e9 4e ff ff ff       	jmp    c0013092 <Dbg::kprintf(char const*, ...)+0x5c>
c0013144:	50                   	push   eax
c0013145:	89 eb                	mov    ebx,ebp
c0013147:	e8 7a fe ff ff       	call   c0012fc6 <Dbg::logc(char)>
c001314c:	89 fd                	mov    ebp,edi
c001314e:	58                   	pop    eax
c001314f:	e9 3e ff ff ff       	jmp    c0013092 <Dbg::kprintf(char const*, ...)+0x5c>

c0013154 <File::read(unsigned long long, void*, int*)>:
c0013154:	53                   	push   ebx
c0013155:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013159:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001315d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013164:	3c 19                	cmp    al,0x19
c0013166:	77 35                	ja     c001319d <File::read(unsigned long long, void*, int*)+0x49>
c0013168:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c001316f:	85 c0                	test   eax,eax
c0013171:	74 2a                	je     c001319d <File::read(unsigned long long, void*, int*)+0x49>
c0013173:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013179:	85 c0                	test   eax,eax
c001317b:	74 20                	je     c001319d <File::read(unsigned long long, void*, int*)+0x49>
c001317d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013181:	74 21                	je     c00131a4 <File::read(unsigned long long, void*, int*)+0x50>
c0013183:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013185:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013189:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001318f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013193:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013197:	5b                   	pop    ebx
c0013198:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001319b:	ff e0                	jmp    eax
c001319d:	b8 0b 00 00 00       	mov    eax,0xb
c00131a2:	eb 05                	jmp    c00131a9 <File::read(unsigned long long, void*, int*)+0x55>
c00131a4:	b8 05 00 00 00       	mov    eax,0x5
c00131a9:	5b                   	pop    ebx
c00131aa:	c3                   	ret    
c00131ab:	90                   	nop

c00131ac <File::write(unsigned long long, void*, int*)>:
c00131ac:	53                   	push   ebx
c00131ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131bc:	3c 19                	cmp    al,0x19
c00131be:	77 35                	ja     c00131f5 <File::write(unsigned long long, void*, int*)+0x49>
c00131c0:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c00131c7:	85 c0                	test   eax,eax
c00131c9:	74 2a                	je     c00131f5 <File::write(unsigned long long, void*, int*)+0x49>
c00131cb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131d1:	85 c0                	test   eax,eax
c00131d3:	74 20                	je     c00131f5 <File::write(unsigned long long, void*, int*)+0x49>
c00131d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131d9:	74 21                	je     c00131fc <File::write(unsigned long long, void*, int*)+0x50>
c00131db:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131dd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131e1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131ef:	5b                   	pop    ebx
c00131f0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00131f3:	ff e0                	jmp    eax
c00131f5:	b8 0b 00 00 00       	mov    eax,0xb
c00131fa:	eb 05                	jmp    c0013201 <File::write(unsigned long long, void*, int*)+0x55>
c00131fc:	b8 05 00 00 00       	mov    eax,0x5
c0013201:	5b                   	pop    ebx
c0013202:	c3                   	ret    
c0013203:	90                   	nop

c0013204 <Directory::read(unsigned long long, void*, int*)>:
c0013204:	53                   	push   ebx
c0013205:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013209:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001320d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013214:	3c 19                	cmp    al,0x19
c0013216:	77 35                	ja     c001324d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013218:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c001321f:	85 c0                	test   eax,eax
c0013221:	74 2a                	je     c001324d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013223:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013229:	85 c0                	test   eax,eax
c001322b:	74 20                	je     c001324d <Directory::read(unsigned long long, void*, int*)+0x49>
c001322d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013231:	74 21                	je     c0013254 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013233:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013235:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013239:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001323f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013247:	5b                   	pop    ebx
c0013248:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001324b:	ff e0                	jmp    eax
c001324d:	b8 0b 00 00 00       	mov    eax,0xb
c0013252:	eb 05                	jmp    c0013259 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013254:	b8 05 00 00 00       	mov    eax,0x5
c0013259:	5b                   	pop    ebx
c001325a:	c3                   	ret    
c001325b:	90                   	nop

c001325c <Directory::write(unsigned long long, void*, int*)>:
c001325c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013260:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013267:	b8 0b 00 00 00       	mov    eax,0xb
c001326c:	80 fa 19             	cmp    dl,0x19
c001326f:	77 18                	ja     c0013289 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013271:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c0013278:	85 d2                	test   edx,edx
c001327a:	74 0d                	je     c0013289 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001327c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013283:	19 c0                	sbb    eax,eax
c0013285:	83 e0 0a             	and    eax,0xa
c0013288:	40                   	inc    eax
c0013289:	c3                   	ret    

c001328a <File::isAtty()>:
c001328a:	31 c0                	xor    eax,eax
c001328c:	c3                   	ret    
c001328d:	90                   	nop

c001328e <Directory::isAtty()>:
c001328e:	31 c0                	xor    eax,eax
c0013290:	c3                   	ret    
c0013291:	90                   	nop

c0013292 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013292:	b8 0a 00 00 00       	mov    eax,0xa
c0013297:	c3                   	ret    

c0013298 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013298:	b8 0a 00 00 00       	mov    eax,0xa
c001329d:	c3                   	ret    

c001329e <File::~File()>:
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c00132a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132aa:	89 10                	mov    DWORD PTR [eax],edx
c00132ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b0:	83 ec 0c             	sub    esp,0xc
c00132b3:	50                   	push   eax
c00132b4:	e8 c9 e6 ff ff       	call   c0011982 <UnixFile::~UnixFile()>
c00132b9:	83 c4 10             	add    esp,0x10
c00132bc:	90                   	nop
c00132bd:	83 c4 0c             	add    esp,0xc
c00132c0:	c3                   	ret    
c00132c1:	90                   	nop

c00132c2 <File::~File()>:
c00132c2:	83 ec 0c             	sub    esp,0xc
c00132c5:	83 ec 0c             	sub    esp,0xc
c00132c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132cc:	e8 cd ff ff ff       	call   c001329e <File::~File()>
c00132d1:	83 c4 10             	add    esp,0x10
c00132d4:	83 ec 08             	sub    esp,0x8
c00132d7:	68 14 01 00 00       	push   0x114
c00132dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e0:	e8 71 fc ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c00132e5:	83 c4 10             	add    esp,0x10
c00132e8:	83 c4 0c             	add    esp,0xc
c00132eb:	c3                   	ret    

c00132ec <Directory::~Directory()>:
c00132ec:	83 ec 0c             	sub    esp,0xc
c00132ef:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c00132f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f8:	89 10                	mov    DWORD PTR [eax],edx
c00132fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fe:	83 ec 0c             	sub    esp,0xc
c0013301:	50                   	push   eax
c0013302:	e8 7b e6 ff ff       	call   c0011982 <UnixFile::~UnixFile()>
c0013307:	83 c4 10             	add    esp,0x10
c001330a:	90                   	nop
c001330b:	83 c4 0c             	add    esp,0xc
c001330e:	c3                   	ret    
c001330f:	90                   	nop

c0013310 <Directory::~Directory()>:
c0013310:	83 ec 0c             	sub    esp,0xc
c0013313:	83 ec 0c             	sub    esp,0xc
c0013316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001331a:	e8 cd ff ff ff       	call   c00132ec <Directory::~Directory()>
c001331f:	83 c4 10             	add    esp,0x10
c0013322:	83 ec 08             	sub    esp,0x8
c0013325:	68 14 01 00 00       	push   0x114
c001332a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001332e:	e8 23 fc ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0013333:	83 c4 10             	add    esp,0x10
c0013336:	83 c4 0c             	add    esp,0xc
c0013339:	c3                   	ret    

c001333a <Filesystem::Filesystem()>:
c001333a:	ba 44 ac 02 c0       	mov    edx,0xc002ac44
c001333f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013343:	89 10                	mov    DWORD PTR [eax],edx
c0013345:	8b 15 18 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e718
c001334b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001334f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013356:	a3 18 e7 02 c0       	mov    ds:0xc002e718,eax
c001335b:	90                   	nop
c001335c:	c3                   	ret    
c001335d:	90                   	nop

c001335e <Filesystem::~Filesystem()>:
c001335e:	ba 44 ac 02 c0       	mov    edx,0xc002ac44
c0013363:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013367:	89 10                	mov    DWORD PTR [eax],edx
c0013369:	90                   	nop
c001336a:	c3                   	ret    
c001336b:	90                   	nop

c001336c <Filesystem::~Filesystem()>:
c001336c:	83 ec 0c             	sub    esp,0xc
c001336f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013373:	e8 e6 ff ff ff       	call   c001335e <Filesystem::~Filesystem()>
c0013378:	83 c4 04             	add    esp,0x4
c001337b:	83 ec 08             	sub    esp,0x8
c001337e:	6a 08                	push   0x8
c0013380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013384:	e8 cd fb ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	83 c4 0c             	add    esp,0xc
c001338f:	c3                   	ret    

c0013390 <Fs::getcwd(Process*, char*, int)>:
c0013390:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013394:	31 c0                	xor    eax,eax
c0013396:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013399:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001339d:	7d 15                	jge    c00133b4 <Fs::getcwd(Process*, char*, int)+0x24>
c001339f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00133a3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00133aa:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00133ad:	84 c9                	test   cl,cl
c00133af:	74 06                	je     c00133b7 <Fs::getcwd(Process*, char*, int)+0x27>
c00133b1:	40                   	inc    eax
c00133b2:	eb e2                	jmp    c0013396 <Fs::getcwd(Process*, char*, int)+0x6>
c00133b4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00133b7:	31 c0                	xor    eax,eax
c00133b9:	c3                   	ret    

c00133ba <Fs::initVFS()>:
c00133ba:	83 ec 18             	sub    esp,0x18
c00133bd:	6a 08                	push   0x8
c00133bf:	e8 7c c4 ff ff       	call   c000f840 <malloc>
c00133c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00133c7:	e8 6a dc 00 00       	call   c0021036 <FAT::FAT()>
c00133cc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00133d3:	e8 68 c4 ff ff       	call   c000f840 <malloc>
c00133d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00133db:	e8 ae ee 00 00       	call   c002228e <ISO9660::ISO9660()>
c00133e0:	83 c4 1c             	add    esp,0x1c
c00133e3:	c3                   	ret    

c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00133e4:	55                   	push   ebp
c00133e5:	57                   	push   edi
c00133e6:	56                   	push   esi
c00133e7:	53                   	push   ebx
c00133e8:	81 ec 10 04 00 00    	sub    esp,0x410
c00133ee:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00133f5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00133fc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013403:	68 00 04 00 00       	push   0x400
c0013408:	6a 00                	push   0x0
c001340a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001340e:	56                   	push   esi
c001340f:	e8 64 d3 fe ff       	call   c0000778 <memset>
c0013414:	83 c4 10             	add    esp,0x10
c0013417:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001341b:	75 0b                	jne    c0013428 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001341d:	50                   	push   eax
c001341e:	50                   	push   eax
c001341f:	57                   	push   edi
c0013420:	56                   	push   esi
c0013421:	e8 0e d4 fe ff       	call   c0000834 <strcpy>
c0013426:	eb 41                	jmp    c0013469 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013428:	8a 07                	mov    al,BYTE PTR [edi]
c001342a:	3c 5c                	cmp    al,0x5c
c001342c:	74 04                	je     c0013432 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001342e:	3c 2f                	cmp    al,0x2f
c0013430:	75 18                	jne    c001344a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013432:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013435:	3c 60                	cmp    al,0x60
c0013437:	7e 03                	jle    c001343c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013439:	83 e8 20             	sub    eax,0x20
c001343c:	88 04 24             	mov    BYTE PTR [esp],al
c001343f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013446:	50                   	push   eax
c0013447:	50                   	push   eax
c0013448:	eb 18                	jmp    c0013462 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001344a:	50                   	push   eax
c001344b:	50                   	push   eax
c001344c:	55                   	push   ebp
c001344d:	56                   	push   esi
c001344e:	e8 e1 d3 fe ff       	call   c0000834 <strcpy>
c0013453:	5a                   	pop    edx
c0013454:	59                   	pop    ecx
c0013455:	68 6d c3 02 c0       	push   0xc002c36d
c001345a:	56                   	push   esi
c001345b:	e8 14 d5 fe ff       	call   c0000974 <strcat>
c0013460:	5d                   	pop    ebp
c0013461:	58                   	pop    eax
c0013462:	57                   	push   edi
c0013463:	56                   	push   esi
c0013464:	e8 0b d5 fe ff       	call   c0000974 <strcat>
c0013469:	83 c4 10             	add    esp,0x10
c001346c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001346f:	3c 60                	cmp    al,0x60
c0013471:	7e 03                	jle    c0013476 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013473:	83 e8 20             	sub    eax,0x20
c0013476:	88 04 24             	mov    BYTE PTR [esp],al
c0013479:	88 03                	mov    BYTE PTR [ebx],al
c001347b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013482:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013488:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001348c:	bf 03 00 00 00       	mov    edi,0x3
c0013491:	b8 03 00 00 00       	mov    eax,0x3
c0013496:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013499:	84 d2                	test   dl,dl
c001349b:	0f 84 91 00 00 00    	je     c0013532 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00134a1:	8d 4f 01             	lea    ecx,[edi+0x1]
c00134a4:	80 fa 5c             	cmp    dl,0x5c
c00134a7:	74 05                	je     c00134ae <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00134a9:	80 fa 2f             	cmp    dl,0x2f
c00134ac:	75 12                	jne    c00134c0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00134ae:	89 c5                	mov    ebp,eax
c00134b0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134b5:	74 09                	je     c00134c0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00134b7:	40                   	inc    eax
c00134b8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00134bc:	89 cf                	mov    edi,ecx
c00134be:	eb d6                	jmp    c0013496 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00134c0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00134c5:	75 5b                	jne    c0013522 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00134c7:	80 fa 2e             	cmp    dl,0x2e
c00134ca:	75 56                	jne    c0013522 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00134cc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00134d0:	74 19                	je     c00134eb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00134d2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134d7:	74 53                	je     c001352c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134d9:	89 f9                	mov    ecx,edi
c00134db:	41                   	inc    ecx
c00134dc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134df:	80 fa 2f             	cmp    dl,0x2f
c00134e2:	74 f7                	je     c00134db <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00134e4:	80 fa 5c             	cmp    dl,0x5c
c00134e7:	74 f2                	je     c00134db <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00134e9:	eb d1                	jmp    c00134bc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134eb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134f0:	74 3a                	je     c001352c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134f2:	83 f8 03             	cmp    eax,0x3
c00134f5:	74 c5                	je     c00134bc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134f7:	41                   	inc    ecx
c00134f8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134fb:	80 fa 2f             	cmp    dl,0x2f
c00134fe:	74 f7                	je     c00134f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013500:	80 fa 5c             	cmp    dl,0x5c
c0013503:	74 f2                	je     c00134f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013505:	48                   	dec    eax
c0013506:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001350a:	75 06                	jne    c0013512 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001350c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013510:	eb f3                	jmp    c0013505 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013512:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013516:	74 07                	je     c001351f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013518:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001351c:	48                   	dec    eax
c001351d:	eb f3                	jmp    c0013512 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001351f:	40                   	inc    eax
c0013520:	eb 9a                	jmp    c00134bc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013522:	80 fa 2f             	cmp    dl,0x2f
c0013525:	74 95                	je     c00134bc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013527:	80 fa 5c             	cmp    dl,0x5c
c001352a:	74 90                	je     c00134bc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001352c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001352f:	40                   	inc    eax
c0013530:	eb 8a                	jmp    c00134bc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013532:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013536:	83 ec 0c             	sub    esp,0xc
c0013539:	53                   	push   ebx
c001353a:	e8 55 d2 fe ff       	call   c0000794 <strlen>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013547:	75 26                	jne    c001356f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013549:	83 ec 0c             	sub    esp,0xc
c001354c:	53                   	push   ebx
c001354d:	e8 42 d2 fe ff       	call   c0000794 <strlen>
c0013552:	83 c4 10             	add    esp,0x10
c0013555:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001355a:	74 26                	je     c0013582 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001355c:	83 ec 0c             	sub    esp,0xc
c001355f:	53                   	push   ebx
c0013560:	e8 2f d2 fe ff       	call   c0000794 <strlen>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001356d:	eb c7                	jmp    c0013536 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001356f:	83 ec 0c             	sub    esp,0xc
c0013572:	53                   	push   ebx
c0013573:	e8 1c d2 fe ff       	call   c0000794 <strlen>
c0013578:	83 c4 10             	add    esp,0x10
c001357b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013580:	74 c7                	je     c0013549 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013582:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013588:	5b                   	pop    ebx
c0013589:	5e                   	pop    esi
c001358a:	5f                   	pop    edi
c001358b:	5d                   	pop    ebp
c001358c:	c3                   	ret    
c001358d:	90                   	nop

c001358e <File::File(char const*, Process*)>:
c001358e:	83 ec 0c             	sub    esp,0xc
c0013591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013595:	83 ec 08             	sub    esp,0x8
c0013598:	6a 00                	push   0x0
c001359a:	50                   	push   eax
c001359b:	e8 00 e2 ff ff       	call   c00117a0 <UnixFile::UnixFile(int)>
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c00135a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ac:	89 10                	mov    DWORD PTR [eax],edx
c00135ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135b2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135bc:	83 c0 0d             	add    eax,0xd
c00135bf:	83 ec 04             	sub    esp,0x4
c00135c2:	52                   	push   edx
c00135c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135c7:	50                   	push   eax
c00135c8:	e8 17 fe ff ff       	call   c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00135cd:	83 c4 10             	add    esp,0x10
c00135d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00135d7:	8d 50 bf             	lea    edx,[eax-0x41]
c00135da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135de:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00135e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00135ec:	90                   	nop
c00135ed:	83 c4 0c             	add    esp,0xc
c00135f0:	c3                   	ret    
c00135f1:	90                   	nop

c00135f2 <File::open(FileOpenMode)>:
c00135f2:	53                   	push   ebx
c00135f3:	b8 0b 00 00 00       	mov    eax,0xb
c00135f8:	83 ec 08             	sub    esp,0x8
c00135fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135ff:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013606:	80 fa 19             	cmp    dl,0x19
c0013609:	77 40                	ja     c001364b <File::open(FileOpenMode)+0x59>
c001360b:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c0013612:	85 d2                	test   edx,edx
c0013614:	74 35                	je     c001364b <File::open(FileOpenMode)+0x59>
c0013616:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001361c:	85 d2                	test   edx,edx
c001361e:	74 2b                	je     c001364b <File::open(FileOpenMode)+0x59>
c0013620:	b8 06 00 00 00       	mov    eax,0x6
c0013625:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013629:	75 20                	jne    c001364b <File::open(FileOpenMode)+0x59>
c001362b:	8b 02                	mov    eax,DWORD PTR [edx]
c001362d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013633:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013637:	51                   	push   ecx
c0013638:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001363b:	51                   	push   ecx
c001363c:	52                   	push   edx
c001363d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013640:	83 c4 10             	add    esp,0x10
c0013643:	85 c0                	test   eax,eax
c0013645:	75 04                	jne    c001364b <File::open(FileOpenMode)+0x59>
c0013647:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001364b:	83 c4 08             	add    esp,0x8
c001364e:	5b                   	pop    ebx
c001364f:	c3                   	ret    

c0013650 <File::close()>:
c0013650:	53                   	push   ebx
c0013651:	b8 0b 00 00 00       	mov    eax,0xb
c0013656:	83 ec 08             	sub    esp,0x8
c0013659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001365d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013664:	80 fa 19             	cmp    dl,0x19
c0013667:	77 41                	ja     c00136aa <File::close()+0x5a>
c0013669:	8b 1c 95 c0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1440]
c0013670:	85 db                	test   ebx,ebx
c0013672:	74 36                	je     c00136aa <File::close()+0x5a>
c0013674:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001367b:	74 2d                	je     c00136aa <File::close()+0x5a>
c001367d:	b8 05 00 00 00       	mov    eax,0x5
c0013682:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013686:	74 22                	je     c00136aa <File::close()+0x5a>
c0013688:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001368c:	8b 04 95 c0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1440]
c0013693:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013699:	53                   	push   ebx
c001369a:	53                   	push   ebx
c001369b:	8b 10                	mov    edx,DWORD PTR [eax]
c001369d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136a3:	50                   	push   eax
c00136a4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	83 c4 08             	add    esp,0x8
c00136ad:	5b                   	pop    ebx
c00136ae:	c3                   	ret    
c00136af:	90                   	nop

c00136b0 <File::seek(unsigned long long)>:
c00136b0:	56                   	push   esi
c00136b1:	53                   	push   ebx
c00136b2:	b8 0b 00 00 00       	mov    eax,0xb
c00136b7:	51                   	push   ecx
c00136b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00136c0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00136c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136cb:	80 fa 19             	cmp    dl,0x19
c00136ce:	77 31                	ja     c0013701 <File::seek(unsigned long long)+0x51>
c00136d0:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c00136d7:	85 d2                	test   edx,edx
c00136d9:	74 26                	je     c0013701 <File::seek(unsigned long long)+0x51>
c00136db:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136e1:	85 d2                	test   edx,edx
c00136e3:	74 1c                	je     c0013701 <File::seek(unsigned long long)+0x51>
c00136e5:	b8 05 00 00 00       	mov    eax,0x5
c00136ea:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00136ee:	74 11                	je     c0013701 <File::seek(unsigned long long)+0x51>
c00136f0:	8b 02                	mov    eax,DWORD PTR [edx]
c00136f2:	53                   	push   ebx
c00136f3:	51                   	push   ecx
c00136f4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00136fa:	52                   	push   edx
c00136fb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136fe:	83 c4 10             	add    esp,0x10
c0013701:	5a                   	pop    edx
c0013702:	5b                   	pop    ebx
c0013703:	5e                   	pop    esi
c0013704:	c3                   	ret    
c0013705:	90                   	nop

c0013706 <File::tell(unsigned long long*)>:
c0013706:	83 ec 0c             	sub    esp,0xc
c0013709:	b8 0b 00 00 00       	mov    eax,0xb
c001370e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013712:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013719:	80 fa 19             	cmp    dl,0x19
c001371c:	77 34                	ja     c0013752 <File::tell(unsigned long long*)+0x4c>
c001371e:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c0013725:	85 d2                	test   edx,edx
c0013727:	74 29                	je     c0013752 <File::tell(unsigned long long*)+0x4c>
c0013729:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001372f:	85 d2                	test   edx,edx
c0013731:	74 1f                	je     c0013752 <File::tell(unsigned long long*)+0x4c>
c0013733:	b8 05 00 00 00       	mov    eax,0x5
c0013738:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001373c:	74 14                	je     c0013752 <File::tell(unsigned long long*)+0x4c>
c001373e:	50                   	push   eax
c001373f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013741:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013745:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001374b:	52                   	push   edx
c001374c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001374f:	83 c4 10             	add    esp,0x10
c0013752:	83 c4 0c             	add    esp,0xc
c0013755:	c3                   	ret    

c0013756 <File::rewind()>:
c0013756:	83 ec 10             	sub    esp,0x10
c0013759:	6a 00                	push   0x0
c001375b:	6a 00                	push   0x0
c001375d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013761:	e8 4a ff ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c0013766:	83 c4 1c             	add    esp,0x1c
c0013769:	c3                   	ret    

c001376a <File::unlink()>:
c001376a:	83 ec 0c             	sub    esp,0xc
c001376d:	b8 0b 00 00 00       	mov    eax,0xb
c0013772:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013776:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001377d:	80 f9 19             	cmp    cl,0x19
c0013780:	77 2f                	ja     c00137b1 <File::unlink()+0x47>
c0013782:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013789:	85 c9                	test   ecx,ecx
c001378b:	74 24                	je     c00137b1 <File::unlink()+0x47>
c001378d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013793:	85 c9                	test   ecx,ecx
c0013795:	74 1a                	je     c00137b1 <File::unlink()+0x47>
c0013797:	b8 06 00 00 00       	mov    eax,0x6
c001379c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137a0:	75 0f                	jne    c00137b1 <File::unlink()+0x47>
c00137a2:	83 c2 0d             	add    edx,0xd
c00137a5:	50                   	push   eax
c00137a6:	50                   	push   eax
c00137a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137a9:	52                   	push   edx
c00137aa:	51                   	push   ecx
c00137ab:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00137ae:	83 c4 10             	add    esp,0x10
c00137b1:	83 c4 0c             	add    esp,0xc
c00137b4:	c3                   	ret    
c00137b5:	90                   	nop

c00137b6 <File::rename(char const*)>:
c00137b6:	83 ec 0c             	sub    esp,0xc
c00137b9:	b8 0b 00 00 00       	mov    eax,0xb
c00137be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137c9:	80 f9 19             	cmp    cl,0x19
c00137cc:	77 32                	ja     c0013800 <File::rename(char const*)+0x4a>
c00137ce:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c00137d5:	85 c9                	test   ecx,ecx
c00137d7:	74 27                	je     c0013800 <File::rename(char const*)+0x4a>
c00137d9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137df:	85 c9                	test   ecx,ecx
c00137e1:	74 1d                	je     c0013800 <File::rename(char const*)+0x4a>
c00137e3:	b8 06 00 00 00       	mov    eax,0x6
c00137e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137ec:	75 12                	jne    c0013800 <File::rename(char const*)+0x4a>
c00137ee:	83 c2 0d             	add    edx,0xd
c00137f1:	50                   	push   eax
c00137f2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f8:	52                   	push   edx
c00137f9:	51                   	push   ecx
c00137fa:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00137fd:	83 c4 10             	add    esp,0x10
c0013800:	83 c4 0c             	add    esp,0xc
c0013803:	c3                   	ret    

c0013804 <File::chfatattr(unsigned char, unsigned char)>:
c0013804:	57                   	push   edi
c0013805:	b8 0b 00 00 00       	mov    eax,0xb
c001380a:	56                   	push   esi
c001380b:	53                   	push   ebx
c001380c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013810:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013814:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001381b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001381f:	80 f9 19             	cmp    cl,0x19
c0013822:	77 37                	ja     c001385b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013824:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001382b:	85 c9                	test   ecx,ecx
c001382d:	74 2c                	je     c001385b <File::chfatattr(unsigned char, unsigned char)+0x57>
c001382f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013835:	85 c9                	test   ecx,ecx
c0013837:	74 22                	je     c001385b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013839:	b8 06 00 00 00       	mov    eax,0x6
c001383e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013842:	75 17                	jne    c001385b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013844:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013846:	89 f0                	mov    eax,esi
c0013848:	83 c2 0d             	add    edx,0xd
c001384b:	0f b6 f0             	movzx  esi,al
c001384e:	0f b6 db             	movzx  ebx,bl
c0013851:	56                   	push   esi
c0013852:	53                   	push   ebx
c0013853:	52                   	push   edx
c0013854:	51                   	push   ecx
c0013855:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013858:	83 c4 10             	add    esp,0x10
c001385b:	5b                   	pop    ebx
c001385c:	5e                   	pop    esi
c001385d:	5f                   	pop    edi
c001385e:	c3                   	ret    
c001385f:	90                   	nop

c0013860 <File::exists()>:
c0013860:	83 ec 0c             	sub    esp,0xc
c0013863:	31 c0                	xor    eax,eax
c0013865:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013869:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013870:	80 f9 19             	cmp    cl,0x19
c0013873:	77 24                	ja     c0013899 <File::exists()+0x39>
c0013875:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001387c:	85 c9                	test   ecx,ecx
c001387e:	74 19                	je     c0013899 <File::exists()+0x39>
c0013880:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013886:	85 c9                	test   ecx,ecx
c0013888:	74 0f                	je     c0013899 <File::exists()+0x39>
c001388a:	83 c2 0d             	add    edx,0xd
c001388d:	50                   	push   eax
c001388e:	50                   	push   eax
c001388f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013891:	52                   	push   edx
c0013892:	51                   	push   ecx
c0013893:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	83 c4 0c             	add    esp,0xc
c001389c:	c3                   	ret    
c001389d:	90                   	nop

c001389e <File::stat(unsigned long long*, bool*)>:
c001389e:	56                   	push   esi
c001389f:	53                   	push   ebx
c00138a0:	50                   	push   eax
c00138a1:	b8 0b 00 00 00       	mov    eax,0xb
c00138a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00138b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00138b9:	80 f9 19             	cmp    cl,0x19
c00138bc:	77 3d                	ja     c00138fb <File::stat(unsigned long long*, bool*)+0x5d>
c00138be:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c00138c5:	85 c9                	test   ecx,ecx
c00138c7:	74 32                	je     c00138fb <File::stat(unsigned long long*, bool*)+0x5d>
c00138c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00138cf:	85 c9                	test   ecx,ecx
c00138d1:	74 28                	je     c00138fb <File::stat(unsigned long long*, bool*)+0x5d>
c00138d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00138d9:	74 13                	je     c00138ee <File::stat(unsigned long long*, bool*)+0x50>
c00138db:	83 ec 04             	sub    esp,0x4
c00138de:	56                   	push   esi
c00138df:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00138e5:	51                   	push   ecx
c00138e6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00138e9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00138ec:	eb 0a                	jmp    c00138f8 <File::stat(unsigned long long*, bool*)+0x5a>
c00138ee:	53                   	push   ebx
c00138ef:	83 c2 0d             	add    edx,0xd
c00138f2:	56                   	push   esi
c00138f3:	52                   	push   edx
c00138f4:	51                   	push   ecx
c00138f5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00138f8:	83 c4 10             	add    esp,0x10
c00138fb:	5a                   	pop    edx
c00138fc:	5b                   	pop    ebx
c00138fd:	5e                   	pop    esi
c00138fe:	c3                   	ret    

c00138ff <Fs::setcwd(Process*, char*)>:
c00138ff:	55                   	push   ebp
c0013900:	57                   	push   edi
c0013901:	56                   	push   esi
c0013902:	53                   	push   ebx
c0013903:	81 ec 20 02 00 00    	sub    esp,0x220
c0013909:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013910:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013916:	57                   	push   edi
c0013917:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001391e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013922:	56                   	push   esi
c0013923:	e8 bc fa ff ff       	call   c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013928:	89 34 24             	mov    DWORD PTR [esp],esi
c001392b:	e8 64 ce fe ff       	call   c0000794 <strlen>
c0013930:	83 c4 10             	add    esp,0x10
c0013933:	83 f8 02             	cmp    eax,0x2
c0013936:	77 17                	ja     c001394f <Fs::setcwd(Process*, char*)+0x50>
c0013938:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001393d:	83 e8 41             	sub    eax,0x41
c0013940:	83 f8 19             	cmp    eax,0x19
c0013943:	76 24                	jbe    c0013969 <Fs::setcwd(Process*, char*)+0x6a>
c0013945:	b8 03 00 00 00       	mov    eax,0x3
c001394a:	e9 e0 00 00 00       	jmp    c0013a2f <Fs::setcwd(Process*, char*)+0x130>
c001394f:	83 ec 0c             	sub    esp,0xc
c0013952:	56                   	push   esi
c0013953:	e8 3c ce fe ff       	call   c0000794 <strlen>
c0013958:	83 c4 10             	add    esp,0x10
c001395b:	83 f8 03             	cmp    eax,0x3
c001395e:	75 34                	jne    c0013994 <Fs::setcwd(Process*, char*)+0x95>
c0013960:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013965:	75 2d                	jne    c0013994 <Fs::setcwd(Process*, char*)+0x95>
c0013967:	eb cf                	jmp    c0013938 <Fs::setcwd(Process*, char*)+0x39>
c0013969:	8b 14 85 c0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1440]
c0013970:	b8 05 00 00 00       	mov    eax,0x5
c0013975:	85 d2                	test   edx,edx
c0013977:	0f 84 b2 00 00 00    	je     c0013a2f <Fs::setcwd(Process*, char*)+0x130>
c001397d:	b8 06 00 00 00       	mov    eax,0x6
c0013982:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013989:	0f 85 92 00 00 00    	jne    c0013a21 <Fs::setcwd(Process*, char*)+0x122>
c001398f:	e9 9b 00 00 00       	jmp    c0013a2f <Fs::setcwd(Process*, char*)+0x130>
c0013994:	83 ec 0c             	sub    esp,0xc
c0013997:	68 14 01 00 00       	push   0x114
c001399c:	e8 9f be ff ff       	call   c000f840 <malloc>
c00139a1:	83 c4 0c             	add    esp,0xc
c00139a4:	89 c3                	mov    ebx,eax
c00139a6:	55                   	push   ebp
c00139a7:	56                   	push   esi
c00139a8:	50                   	push   eax
c00139a9:	e8 e0 fb ff ff       	call   c001358e <File::File(char const*, Process*)>
c00139ae:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00139b3:	83 c4 0c             	add    esp,0xc
c00139b6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00139ba:	50                   	push   eax
c00139bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139bf:	50                   	push   eax
c00139c0:	53                   	push   ebx
c00139c1:	e8 d8 fe ff ff       	call   c001389e <File::stat(unsigned long long*, bool*)>
c00139c6:	83 c4 10             	add    esp,0x10
c00139c9:	83 f8 02             	cmp    eax,0x2
c00139cc:	74 04                	je     c00139d2 <Fs::setcwd(Process*, char*)+0xd3>
c00139ce:	85 c0                	test   eax,eax
c00139d0:	74 1c                	je     c00139ee <Fs::setcwd(Process*, char*)+0xef>
c00139d2:	b8 01 00 00 00       	mov    eax,0x1
c00139d7:	85 db                	test   ebx,ebx
c00139d9:	74 54                	je     c0013a2f <Fs::setcwd(Process*, char*)+0x130>
c00139db:	83 ec 0c             	sub    esp,0xc
c00139de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139e0:	53                   	push   ebx
c00139e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139e4:	83 c4 10             	add    esp,0x10
c00139e7:	b8 01 00 00 00       	mov    eax,0x1
c00139ec:	eb 41                	jmp    c0013a2f <Fs::setcwd(Process*, char*)+0x130>
c00139ee:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00139f3:	75 1c                	jne    c0013a11 <Fs::setcwd(Process*, char*)+0x112>
c00139f5:	b8 02 00 00 00       	mov    eax,0x2
c00139fa:	85 db                	test   ebx,ebx
c00139fc:	74 31                	je     c0013a2f <Fs::setcwd(Process*, char*)+0x130>
c00139fe:	83 ec 0c             	sub    esp,0xc
c0013a01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a03:	53                   	push   ebx
c0013a04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a07:	83 c4 10             	add    esp,0x10
c0013a0a:	b8 02 00 00 00       	mov    eax,0x2
c0013a0f:	eb 1e                	jmp    c0013a2f <Fs::setcwd(Process*, char*)+0x130>
c0013a11:	85 db                	test   ebx,ebx
c0013a13:	74 0c                	je     c0013a21 <Fs::setcwd(Process*, char*)+0x122>
c0013a15:	83 ec 0c             	sub    esp,0xc
c0013a18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a1a:	53                   	push   ebx
c0013a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a1e:	83 c4 10             	add    esp,0x10
c0013a21:	50                   	push   eax
c0013a22:	50                   	push   eax
c0013a23:	56                   	push   esi
c0013a24:	57                   	push   edi
c0013a25:	e8 0a ce fe ff       	call   c0000834 <strcpy>
c0013a2a:	83 c4 10             	add    esp,0x10
c0013a2d:	31 c0                	xor    eax,eax
c0013a2f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013a35:	5b                   	pop    ebx
c0013a36:	5e                   	pop    esi
c0013a37:	5f                   	pop    edi
c0013a38:	5d                   	pop    ebp
c0013a39:	c3                   	ret    

c0013a3a <Directory::Directory(char const*, Process*)>:
c0013a3a:	83 ec 0c             	sub    esp,0xc
c0013a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a41:	83 ec 08             	sub    esp,0x8
c0013a44:	6a 00                	push   0x0
c0013a46:	50                   	push   eax
c0013a47:	e8 54 dd ff ff       	call   c00117a0 <UnixFile::UnixFile(int)>
c0013a4c:	83 c4 10             	add    esp,0x10
c0013a4f:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c0013a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a58:	89 10                	mov    DWORD PTR [eax],edx
c0013a5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a5e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a68:	83 c0 0d             	add    eax,0xd
c0013a6b:	83 ec 04             	sub    esp,0x4
c0013a6e:	52                   	push   edx
c0013a6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a73:	50                   	push   eax
c0013a74:	e8 6b f9 ff ff       	call   c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a79:	83 c4 10             	add    esp,0x10
c0013a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a80:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a83:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a94:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a98:	90                   	nop
c0013a99:	83 c4 0c             	add    esp,0xc
c0013a9c:	c3                   	ret    
c0013a9d:	90                   	nop

c0013a9e <Directory::open()>:
c0013a9e:	53                   	push   ebx
c0013a9f:	b8 0b 00 00 00       	mov    eax,0xb
c0013aa4:	83 ec 08             	sub    esp,0x8
c0013aa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013aab:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013ab2:	80 fa 19             	cmp    dl,0x19
c0013ab5:	77 3d                	ja     c0013af4 <Directory::open()+0x56>
c0013ab7:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c0013abe:	85 d2                	test   edx,edx
c0013ac0:	74 32                	je     c0013af4 <Directory::open()+0x56>
c0013ac2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013ac8:	85 d2                	test   edx,edx
c0013aca:	74 28                	je     c0013af4 <Directory::open()+0x56>
c0013acc:	b8 06 00 00 00       	mov    eax,0x6
c0013ad1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013ad5:	75 1d                	jne    c0013af4 <Directory::open()+0x56>
c0013ad7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013add:	50                   	push   eax
c0013ade:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ae0:	51                   	push   ecx
c0013ae1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013ae4:	51                   	push   ecx
c0013ae5:	52                   	push   edx
c0013ae6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013ae9:	83 c4 10             	add    esp,0x10
c0013aec:	85 c0                	test   eax,eax
c0013aee:	75 04                	jne    c0013af4 <Directory::open()+0x56>
c0013af0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013af4:	83 c4 08             	add    esp,0x8
c0013af7:	5b                   	pop    ebx
c0013af8:	c3                   	ret    
c0013af9:	90                   	nop

c0013afa <Directory::close()>:
c0013afa:	53                   	push   ebx
c0013afb:	b8 0b 00 00 00       	mov    eax,0xb
c0013b00:	83 ec 08             	sub    esp,0x8
c0013b03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b07:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b0e:	80 fa 19             	cmp    dl,0x19
c0013b11:	77 41                	ja     c0013b54 <Directory::close()+0x5a>
c0013b13:	8b 1c 95 c0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1440]
c0013b1a:	85 db                	test   ebx,ebx
c0013b1c:	74 36                	je     c0013b54 <Directory::close()+0x5a>
c0013b1e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013b25:	74 2d                	je     c0013b54 <Directory::close()+0x5a>
c0013b27:	b8 05 00 00 00       	mov    eax,0x5
c0013b2c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013b30:	74 22                	je     c0013b54 <Directory::close()+0x5a>
c0013b32:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013b36:	8b 04 95 c0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1440]
c0013b3d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013b43:	53                   	push   ebx
c0013b44:	53                   	push   ebx
c0013b45:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b47:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013b4d:	50                   	push   eax
c0013b4e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013b51:	83 c4 10             	add    esp,0x10
c0013b54:	83 c4 08             	add    esp,0x8
c0013b57:	5b                   	pop    ebx
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Directory::unlink()>:
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b6d:	80 f9 19             	cmp    cl,0x19
c0013b70:	77 2f                	ja     c0013ba1 <Directory::unlink()+0x47>
c0013b72:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013b79:	85 c9                	test   ecx,ecx
c0013b7b:	74 24                	je     c0013ba1 <Directory::unlink()+0x47>
c0013b7d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b83:	85 c9                	test   ecx,ecx
c0013b85:	74 1a                	je     c0013ba1 <Directory::unlink()+0x47>
c0013b87:	b8 06 00 00 00       	mov    eax,0x6
c0013b8c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b90:	75 0f                	jne    c0013ba1 <Directory::unlink()+0x47>
c0013b92:	83 c2 0d             	add    edx,0xd
c0013b95:	50                   	push   eax
c0013b96:	50                   	push   eax
c0013b97:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b99:	52                   	push   edx
c0013b9a:	51                   	push   ecx
c0013b9b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b9e:	83 c4 10             	add    esp,0x10
c0013ba1:	83 c4 0c             	add    esp,0xc
c0013ba4:	c3                   	ret    
c0013ba5:	90                   	nop

c0013ba6 <Directory::rename(char const*)>:
c0013ba6:	83 ec 0c             	sub    esp,0xc
c0013ba9:	b8 0b 00 00 00       	mov    eax,0xb
c0013bae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bb2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bb9:	80 f9 19             	cmp    cl,0x19
c0013bbc:	77 32                	ja     c0013bf0 <Directory::rename(char const*)+0x4a>
c0013bbe:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013bc5:	85 c9                	test   ecx,ecx
c0013bc7:	74 27                	je     c0013bf0 <Directory::rename(char const*)+0x4a>
c0013bc9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bcf:	85 c9                	test   ecx,ecx
c0013bd1:	74 1d                	je     c0013bf0 <Directory::rename(char const*)+0x4a>
c0013bd3:	b8 06 00 00 00       	mov    eax,0x6
c0013bd8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bdc:	75 12                	jne    c0013bf0 <Directory::rename(char const*)+0x4a>
c0013bde:	83 c2 0d             	add    edx,0xd
c0013be1:	50                   	push   eax
c0013be2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013be4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013be8:	52                   	push   edx
c0013be9:	51                   	push   ecx
c0013bea:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013bed:	83 c4 10             	add    esp,0x10
c0013bf0:	83 c4 0c             	add    esp,0xc
c0013bf3:	c3                   	ret    

c0013bf4 <Directory::exists()>:
c0013bf4:	83 ec 0c             	sub    esp,0xc
c0013bf7:	31 c0                	xor    eax,eax
c0013bf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bfd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c04:	80 f9 19             	cmp    cl,0x19
c0013c07:	77 24                	ja     c0013c2d <Directory::exists()+0x39>
c0013c09:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013c10:	85 c9                	test   ecx,ecx
c0013c12:	74 19                	je     c0013c2d <Directory::exists()+0x39>
c0013c14:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c1a:	85 c9                	test   ecx,ecx
c0013c1c:	74 0f                	je     c0013c2d <Directory::exists()+0x39>
c0013c1e:	83 c2 0d             	add    edx,0xd
c0013c21:	50                   	push   eax
c0013c22:	50                   	push   eax
c0013c23:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c25:	52                   	push   edx
c0013c26:	51                   	push   ecx
c0013c27:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013c2a:	83 c4 10             	add    esp,0x10
c0013c2d:	83 c4 0c             	add    esp,0xc
c0013c30:	c3                   	ret    
c0013c31:	90                   	nop

c0013c32 <Directory::read(dirent*)>:
c0013c32:	83 ec 1c             	sub    esp,0x1c
c0013c35:	b8 0b 00 00 00       	mov    eax,0xb
c0013c3a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013c3e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013c45:	80 fa 19             	cmp    dl,0x19
c0013c48:	77 30                	ja     c0013c7a <Directory::read(dirent*)+0x48>
c0013c4a:	8b 14 95 c0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1440]
c0013c51:	85 d2                	test   edx,edx
c0013c53:	74 25                	je     c0013c7a <Directory::read(dirent*)+0x48>
c0013c55:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013c5c:	74 1c                	je     c0013c7a <Directory::read(dirent*)+0x48>
c0013c5e:	83 ec 0c             	sub    esp,0xc
c0013c61:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c63:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c67:	52                   	push   edx
c0013c68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013c6c:	6a 00                	push   0x0
c0013c6e:	68 10 01 00 00       	push   0x110
c0013c73:	51                   	push   ecx
c0013c74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c77:	83 c4 20             	add    esp,0x20
c0013c7a:	83 c4 1c             	add    esp,0x1c
c0013c7d:	c3                   	ret    

c0013c7e <Directory::create()>:
c0013c7e:	83 ec 0c             	sub    esp,0xc
c0013c81:	b8 0b 00 00 00       	mov    eax,0xb
c0013c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c8a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c91:	80 f9 19             	cmp    cl,0x19
c0013c94:	77 2f                	ja     c0013cc5 <Directory::create()+0x47>
c0013c96:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0013c9d:	85 c9                	test   ecx,ecx
c0013c9f:	74 24                	je     c0013cc5 <Directory::create()+0x47>
c0013ca1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ca7:	85 c9                	test   ecx,ecx
c0013ca9:	74 1a                	je     c0013cc5 <Directory::create()+0x47>
c0013cab:	b8 06 00 00 00       	mov    eax,0x6
c0013cb0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013cb4:	75 0f                	jne    c0013cc5 <Directory::create()+0x47>
c0013cb6:	83 c2 0d             	add    edx,0xd
c0013cb9:	50                   	push   eax
c0013cba:	50                   	push   eax
c0013cbb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013cbd:	52                   	push   edx
c0013cbe:	51                   	push   ecx
c0013cbf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013cc2:	83 c4 10             	add    esp,0x10
c0013cc5:	83 c4 0c             	add    esp,0xc
c0013cc8:	c3                   	ret    
c0013cc9:	90                   	nop

c0013cca <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013cca:	b8 0a 00 00 00       	mov    eax,0xa
c0013ccf:	c3                   	ret    

c0013cd0 <Bus::Bus(char const*)>:
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd7:	83 ec 08             	sub    esp,0x8
c0013cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cde:	50                   	push   eax
c0013cdf:	e8 68 09 00 00       	call   c001464c <Device::Device(char const*)>
c0013ce4:	83 c4 10             	add    esp,0x10
c0013ce7:	ba e0 ac 02 c0       	mov    edx,0xc002ace0
c0013cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf0:	89 10                	mov    DWORD PTR [eax],edx
c0013cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013d00:	90                   	nop
c0013d01:	83 c4 0c             	add    esp,0xc
c0013d04:	c3                   	ret    
c0013d05:	90                   	nop

c0013d06 <Bus::~Bus()>:
c0013d06:	83 ec 0c             	sub    esp,0xc
c0013d09:	ba e0 ac 02 c0       	mov    edx,0xc002ace0
c0013d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d12:	89 10                	mov    DWORD PTR [eax],edx
c0013d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d18:	83 ec 0c             	sub    esp,0xc
c0013d1b:	50                   	push   eax
c0013d1c:	e8 0d 06 00 00       	call   c001432e <Device::~Device()>
c0013d21:	83 c4 10             	add    esp,0x10
c0013d24:	90                   	nop
c0013d25:	83 c4 0c             	add    esp,0xc
c0013d28:	c3                   	ret    
c0013d29:	90                   	nop

c0013d2a <Bus::~Bus()>:
c0013d2a:	83 ec 0c             	sub    esp,0xc
c0013d2d:	83 ec 0c             	sub    esp,0xc
c0013d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d34:	e8 cd ff ff ff       	call   c0013d06 <Bus::~Bus()>
c0013d39:	83 c4 10             	add    esp,0x10
c0013d3c:	83 ec 08             	sub    esp,0x8
c0013d3f:	68 58 01 00 00       	push   0x158
c0013d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d48:	e8 09 f2 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0013d4d:	83 c4 10             	add    esp,0x10
c0013d50:	83 c4 0c             	add    esp,0xc
c0013d53:	c3                   	ret    

c0013d54 <Buzzer::Buzzer(char const*)>:
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5b:	83 ec 08             	sub    esp,0x8
c0013d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d62:	50                   	push   eax
c0013d63:	e8 e4 08 00 00       	call   c001464c <Device::Device(char const*)>
c0013d68:	83 c4 10             	add    esp,0x10
c0013d6b:	ba 0c ad 02 c0       	mov    edx,0xc002ad0c
c0013d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d74:	89 10                	mov    DWORD PTR [eax],edx
c0013d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d7a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d88:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d92:	90                   	nop
c0013d93:	83 c4 0c             	add    esp,0xc
c0013d96:	c3                   	ret    
c0013d97:	90                   	nop

c0013d98 <Buzzer::~Buzzer()>:
c0013d98:	83 ec 0c             	sub    esp,0xc
c0013d9b:	ba 0c ad 02 c0       	mov    edx,0xc002ad0c
c0013da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da4:	89 10                	mov    DWORD PTR [eax],edx
c0013da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013daa:	83 ec 0c             	sub    esp,0xc
c0013dad:	50                   	push   eax
c0013dae:	e8 7b 05 00 00       	call   c001432e <Device::~Device()>
c0013db3:	83 c4 10             	add    esp,0x10
c0013db6:	90                   	nop
c0013db7:	83 c4 0c             	add    esp,0xc
c0013dba:	c3                   	ret    
c0013dbb:	90                   	nop

c0013dbc <Buzzer::~Buzzer()>:
c0013dbc:	83 ec 0c             	sub    esp,0xc
c0013dbf:	83 ec 0c             	sub    esp,0xc
c0013dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc6:	e8 cd ff ff ff       	call   c0013d98 <Buzzer::~Buzzer()>
c0013dcb:	83 c4 10             	add    esp,0x10
c0013dce:	83 ec 08             	sub    esp,0x8
c0013dd1:	68 5c 01 00 00       	push   0x15c
c0013dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dda:	e8 77 f1 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0013ddf:	83 c4 10             	add    esp,0x10
c0013de2:	83 c4 0c             	add    esp,0xc
c0013de5:	c3                   	ret    

c0013de6 <Buzzer::stop()>:
c0013de6:	83 ec 14             	sub    esp,0x14
c0013de9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ded:	8b 10                	mov    edx,DWORD PTR [eax]
c0013def:	6a 00                	push   0x0
c0013df1:	50                   	push   eax
c0013df2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013df5:	83 c4 1c             	add    esp,0x1c
c0013df8:	c3                   	ret    

c0013df9 <beepThread(void*)>:
c0013df9:	53                   	push   ebx
c0013dfa:	83 ec 08             	sub    esp,0x8
c0013dfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e01:	e8 be a0 00 00       	call   c001dec4 <unlockScheduler()>
c0013e06:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013e0b:	52                   	push   edx
c0013e0c:	52                   	push   edx
c0013e0d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013e13:	52                   	push   edx
c0013e14:	50                   	push   eax
c0013e15:	e8 f8 a5 00 00       	call   c001e412 <nanoSleep(unsigned long long)>
c0013e1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e1d:	e8 c4 ff ff ff       	call   c0013de6 <Buzzer::stop()>
c0013e22:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013e2a:	83 c4 18             	add    esp,0x18
c0013e2d:	5b                   	pop    ebx
c0013e2e:	e9 25 a5 00 00       	jmp    c001e358 <blockTask(TaskState)>
c0013e33:	90                   	nop

c0013e34 <Buzzer::beep(int, int, bool)>:
c0013e34:	57                   	push   edi
c0013e35:	56                   	push   esi
c0013e36:	53                   	push   ebx
c0013e37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e43:	52                   	push   edx
c0013e44:	52                   	push   edx
c0013e45:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e4b:	56                   	push   esi
c0013e4c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013e4f:	83 c4 10             	add    esp,0x10
c0013e52:	89 f8                	mov    eax,edi
c0013e54:	84 c0                	test   al,al
c0013e56:	74 1f                	je     c0013e77 <Buzzer::beep(int, int, bool)+0x43>
c0013e58:	50                   	push   eax
c0013e59:	50                   	push   eax
c0013e5a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013e60:	99                   	cdq    
c0013e61:	52                   	push   edx
c0013e62:	50                   	push   eax
c0013e63:	e8 aa a5 00 00       	call   c001e412 <nanoSleep(unsigned long long)>
c0013e68:	83 c4 10             	add    esp,0x10
c0013e6b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013e6f:	5b                   	pop    ebx
c0013e70:	5e                   	pop    esi
c0013e71:	5f                   	pop    edi
c0013e72:	e9 6f ff ff ff       	jmp    c0013de6 <Buzzer::stop()>
c0013e77:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e7d:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0013e82:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e8a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e8e:	c7 44 24 14 f9 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013df9
c0013e96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e9a:	5b                   	pop    ebx
c0013e9b:	5e                   	pop    esi
c0013e9c:	5f                   	pop    edi
c0013e9d:	e9 52 a1 00 00       	jmp    c001dff4 <Process::createThread(void (*)(void*), void*, int)>

c0013ea2 <User::loadClockSettings(int)>:
c0013ea2:	53                   	push   ebx
c0013ea3:	83 ec 14             	sub    esp,0x14
c0013ea6:	68 14 01 00 00       	push   0x114
c0013eab:	e8 90 b9 ff ff       	call   c000f840 <malloc>
c0013eb0:	83 c4 0c             	add    esp,0xc
c0013eb3:	89 c3                	mov    ebx,eax
c0013eb5:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c0013ebb:	68 34 ad 02 c0       	push   0xc002ad34
c0013ec0:	50                   	push   eax
c0013ec1:	e8 c8 f6 ff ff       	call   c001358e <File::File(char const*, Process*)>
c0013ec6:	58                   	pop    eax
c0013ec7:	5a                   	pop    edx
c0013ec8:	6a 01                	push   0x1
c0013eca:	53                   	push   ebx
c0013ecb:	e8 22 f7 ff ff       	call   c00135f2 <File::open(FileOpenMode)>
c0013ed0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ed3:	e8 78 f7 ff ff       	call   c0013650 <File::close()>
c0013ed8:	83 c4 10             	add    esp,0x10
c0013edb:	85 db                	test   ebx,ebx
c0013edd:	74 0f                	je     c0013eee <User::loadClockSettings(int)+0x4c>
c0013edf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ee1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013ee5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ee8:	83 c4 08             	add    esp,0x8
c0013eeb:	5b                   	pop    ebx
c0013eec:	ff e0                	jmp    eax
c0013eee:	83 c4 08             	add    esp,0x8
c0013ef1:	5b                   	pop    ebx
c0013ef2:	c3                   	ret    
c0013ef3:	90                   	nop

c0013ef4 <Clock::Clock(char const*)>:
c0013ef4:	83 ec 0c             	sub    esp,0xc
c0013ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efb:	83 ec 08             	sub    esp,0x8
c0013efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f02:	50                   	push   eax
c0013f03:	e8 44 07 00 00       	call   c001464c <Device::Device(char const*)>
c0013f08:	83 c4 10             	add    esp,0x10
c0013f0b:	ba 5c ad 02 c0       	mov    edx,0xc002ad5c
c0013f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f14:	89 10                	mov    DWORD PTR [eax],edx
c0013f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f1a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013f24:	90                   	nop
c0013f25:	83 c4 0c             	add    esp,0xc
c0013f28:	c3                   	ret    
c0013f29:	90                   	nop

c0013f2a <Clock::~Clock()>:
c0013f2a:	83 ec 0c             	sub    esp,0xc
c0013f2d:	ba 5c ad 02 c0       	mov    edx,0xc002ad5c
c0013f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f36:	89 10                	mov    DWORD PTR [eax],edx
c0013f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3c:	83 ec 0c             	sub    esp,0xc
c0013f3f:	50                   	push   eax
c0013f40:	e8 e9 03 00 00       	call   c001432e <Device::~Device()>
c0013f45:	83 c4 10             	add    esp,0x10
c0013f48:	90                   	nop
c0013f49:	83 c4 0c             	add    esp,0xc
c0013f4c:	c3                   	ret    
c0013f4d:	90                   	nop

c0013f4e <Clock::~Clock()>:
c0013f4e:	83 ec 0c             	sub    esp,0xc
c0013f51:	83 ec 0c             	sub    esp,0xc
c0013f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f58:	e8 cd ff ff ff       	call   c0013f2a <Clock::~Clock()>
c0013f5d:	83 c4 10             	add    esp,0x10
c0013f60:	83 ec 08             	sub    esp,0x8
c0013f63:	68 58 01 00 00       	push   0x158
c0013f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f6c:	e8 e5 ef ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0013f71:	83 c4 10             	add    esp,0x10
c0013f74:	83 c4 0c             	add    esp,0xc
c0013f77:	c3                   	ret    

c0013f78 <Clock::timeInSecondsLocal()>:
c0013f78:	53                   	push   ebx
c0013f79:	83 ec 14             	sub    esp,0x14
c0013f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f80:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f82:	50                   	push   eax
c0013f83:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f86:	0f b6 0d 20 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e720
c0013f8d:	03 0d 24 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e724
c0013f93:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f99:	89 cb                	mov    ebx,ecx
c0013f9b:	c1 fb 1f             	sar    ebx,0x1f
c0013f9e:	01 c8                	add    eax,ecx
c0013fa0:	11 da                	adc    edx,ebx
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	31 c9                	xor    ecx,ecx
c0013fa7:	80 3d 21 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e721,0x0
c0013fae:	74 05                	je     c0013fb5 <Clock::timeInSecondsLocal()+0x3d>
c0013fb0:	b9 08 07 00 00       	mov    ecx,0x708
c0013fb5:	31 db                	xor    ebx,ebx
c0013fb7:	01 c8                	add    eax,ecx
c0013fb9:	11 da                	adc    edx,ebx
c0013fbb:	83 c4 08             	add    esp,0x8
c0013fbe:	5b                   	pop    ebx
c0013fbf:	c3                   	ret    

c0013fc0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013fc0:	57                   	push   edi
c0013fc1:	56                   	push   esi
c0013fc2:	53                   	push   ebx
c0013fc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013fc7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013fcb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013fcd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013fd1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013fd4:	0f b6 05 20 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e720
c0013fdb:	03 05 24 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e724
c0013fe1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013fe7:	99                   	cdq    
c0013fe8:	29 c6                	sub    esi,eax
c0013fea:	19 d7                	sbb    edi,edx
c0013fec:	89 f0                	mov    eax,esi
c0013fee:	89 fa                	mov    edx,edi
c0013ff0:	31 f6                	xor    esi,esi
c0013ff2:	80 3d 21 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e721,0x0
c0013ff9:	74 05                	je     c0014000 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ffb:	be 08 07 00 00       	mov    esi,0x708
c0014000:	31 ff                	xor    edi,edi
c0014002:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0014006:	29 f0                	sub    eax,esi
c0014008:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001400c:	19 fa                	sbb    edx,edi
c001400e:	89 d8                	mov    eax,ebx
c0014010:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014014:	5b                   	pop    ebx
c0014015:	5e                   	pop    esi
c0014016:	5f                   	pop    edi
c0014017:	ff e0                	jmp    eax

c0014019 <datetimeToSeconds(datetime_t)>:
c0014019:	55                   	push   ebp
c001401a:	57                   	push   edi
c001401b:	56                   	push   esi
c001401c:	53                   	push   ebx
c001401d:	83 ec 14             	sub    esp,0x14
c0014020:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014024:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014028:	89 d3                	mov    ebx,edx
c001402a:	0f b6 c6             	movzx  eax,dh
c001402d:	c1 eb 10             	shr    ebx,0x10
c0014030:	48                   	dec    eax
c0014031:	66 81 eb 6c 07       	sub    bx,0x76c
c0014036:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001403a:	0f b6 f5             	movzx  esi,ch
c001403d:	89 cf                	mov    edi,ecx
c001403f:	6b f6 3c             	imul   esi,esi,0x3c
c0014042:	c1 ef 10             	shr    edi,0x10
c0014045:	0f b6 c9             	movzx  ecx,cl
c0014048:	89 f8                	mov    eax,edi
c001404a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014050:	0f b6 f8             	movzx  edi,al
c0014053:	0f b6 d2             	movzx  edx,dl
c0014056:	01 fe                	add    esi,edi
c0014058:	01 f1                	add    ecx,esi
c001405a:	0f b7 f3             	movzx  esi,bx
c001405d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014061:	c1 f9 1f             	sar    ecx,0x1f
c0014064:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0014069:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001406d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0014072:	8b 0c 8d a0 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5260]
c0014079:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001407d:	76 29                	jbe    c00140a8 <datetimeToSeconds(datetime_t)+0x8f>
c001407f:	f6 c3 03             	test   bl,0x3
c0014082:	75 24                	jne    c00140a8 <datetimeToSeconds(datetime_t)+0x8f>
c0014084:	31 d2                	xor    edx,edx
c0014086:	bf 64 00 00 00       	mov    edi,0x64
c001408b:	89 d8                	mov    eax,ebx
c001408d:	66 f7 f7             	div    di
c0014090:	66 85 d2             	test   dx,dx
c0014093:	75 12                	jne    c00140a7 <datetimeToSeconds(datetime_t)+0x8e>
c0014095:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001409b:	bf 90 01 00 00       	mov    edi,0x190
c00140a0:	99                   	cdq    
c00140a1:	f7 ff                	idiv   edi
c00140a3:	85 d2                	test   edx,edx
c00140a5:	75 01                	jne    c00140a8 <datetimeToSeconds(datetime_t)+0x8f>
c00140a7:	41                   	inc    ecx
c00140a8:	66 83 fb 46          	cmp    bx,0x46
c00140ac:	76 45                	jbe    c00140f3 <datetimeToSeconds(datetime_t)+0xda>
c00140ae:	bb 46 00 00 00       	mov    ebx,0x46
c00140b3:	bf 64 00 00 00       	mov    edi,0x64
c00140b8:	bd 90 01 00 00       	mov    ebp,0x190
c00140bd:	b8 6d 01 00 00       	mov    eax,0x16d
c00140c2:	f6 c3 03             	test   bl,0x3
c00140c5:	75 23                	jne    c00140ea <datetimeToSeconds(datetime_t)+0xd1>
c00140c7:	89 d8                	mov    eax,ebx
c00140c9:	99                   	cdq    
c00140ca:	f7 ff                	idiv   edi
c00140cc:	b8 6e 01 00 00       	mov    eax,0x16e
c00140d1:	85 d2                	test   edx,edx
c00140d3:	75 15                	jne    c00140ea <datetimeToSeconds(datetime_t)+0xd1>
c00140d5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00140db:	99                   	cdq    
c00140dc:	f7 fd                	idiv   ebp
c00140de:	83 fa 01             	cmp    edx,0x1
c00140e1:	19 c0                	sbb    eax,eax
c00140e3:	f7 d0                	not    eax
c00140e5:	05 6e 01 00 00       	add    eax,0x16e
c00140ea:	01 c1                	add    ecx,eax
c00140ec:	43                   	inc    ebx
c00140ed:	39 f3                	cmp    ebx,esi
c00140ef:	7c cc                	jl     c00140bd <datetimeToSeconds(datetime_t)+0xa4>
c00140f1:	eb 35                	jmp    c0014128 <datetimeToSeconds(datetime_t)+0x10f>
c00140f3:	74 33                	je     c0014128 <datetimeToSeconds(datetime_t)+0x10f>
c00140f5:	b8 45 00 00 00       	mov    eax,0x45
c00140fa:	89 c2                	mov    edx,eax
c00140fc:	83 e2 03             	and    edx,0x3
c00140ff:	39 f0                	cmp    eax,esi
c0014101:	7e 0f                	jle    c0014112 <datetimeToSeconds(datetime_t)+0xf9>
c0014103:	83 fa 01             	cmp    edx,0x1
c0014106:	19 d2                	sbb    edx,edx
c0014108:	48                   	dec    eax
c0014109:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014110:	eb e8                	jmp    c00140fa <datetimeToSeconds(datetime_t)+0xe1>
c0014112:	b8 6d 01 00 00       	mov    eax,0x16d
c0014117:	85 d2                	test   edx,edx
c0014119:	75 0b                	jne    c0014126 <datetimeToSeconds(datetime_t)+0x10d>
c001411b:	66 83 fb 01          	cmp    bx,0x1
c001411f:	19 c0                	sbb    eax,eax
c0014121:	05 6e 01 00 00       	add    eax,0x16e
c0014126:	29 c1                	sub    ecx,eax
c0014128:	b8 80 51 01 00       	mov    eax,0x15180
c001412d:	f7 e9                	imul   ecx
c001412f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014133:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014137:	83 c4 14             	add    esp,0x14
c001413a:	5b                   	pop    ebx
c001413b:	5e                   	pop    esi
c001413c:	5f                   	pop    edi
c001413d:	5d                   	pop    ebp
c001413e:	c3                   	ret    
c001413f:	90                   	nop

c0014140 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014140:	57                   	push   edi
c0014141:	56                   	push   esi
c0014142:	53                   	push   ebx
c0014143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014147:	8b 06                	mov    eax,DWORD PTR [esi]
c0014149:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001414c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014150:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014154:	e8 c0 fe ff ff       	call   c0014019 <datetimeToSeconds(datetime_t)>
c0014159:	59                   	pop    ecx
c001415a:	0f b6 0d 20 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e720
c0014161:	5b                   	pop    ebx
c0014162:	03 0d 24 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e724
c0014168:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001416e:	89 cb                	mov    ebx,ecx
c0014170:	c1 fb 1f             	sar    ebx,0x1f
c0014173:	29 c8                	sub    eax,ecx
c0014175:	19 da                	sbb    edx,ebx
c0014177:	31 c9                	xor    ecx,ecx
c0014179:	80 3d 21 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e721,0x0
c0014180:	74 05                	je     c0014187 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014182:	b9 08 07 00 00       	mov    ecx,0x708
c0014187:	31 db                	xor    ebx,ebx
c0014189:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001418d:	29 c8                	sub    eax,ecx
c001418f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014193:	19 da                	sbb    edx,ebx
c0014195:	89 f8                	mov    eax,edi
c0014197:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001419b:	5b                   	pop    ebx
c001419c:	5e                   	pop    esi
c001419d:	5f                   	pop    edi
c001419e:	ff e0                	jmp    eax

c00141a0 <secondsToDatetime(unsigned long long)>:
c00141a0:	55                   	push   ebp
c00141a1:	57                   	push   edi
c00141a2:	56                   	push   esi
c00141a3:	53                   	push   ebx
c00141a4:	83 ec 1c             	sub    esp,0x1c
c00141a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00141ab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00141af:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00141b3:	6a 00                	push   0x0
c00141b5:	68 80 51 01 00       	push   0x15180
c00141ba:	55                   	push   ebp
c00141bb:	57                   	push   edi
c00141bc:	e8 db 28 01 00       	call   c0026a9c <__udivdi3>
c00141c1:	83 c4 10             	add    esp,0x10
c00141c4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00141ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141ce:	6a 00                	push   0x0
c00141d0:	68 80 51 01 00       	push   0x15180
c00141d5:	55                   	push   ebp
c00141d6:	57                   	push   edi
c00141d7:	bf 10 0e 00 00       	mov    edi,0xe10
c00141dc:	e8 bb 29 01 00       	call   c0026b9c <__umoddi3>
c00141e1:	83 c4 10             	add    esp,0x10
c00141e4:	99                   	cdq    
c00141e5:	f7 ff                	idiv   edi
c00141e7:	bf 3c 00 00 00       	mov    edi,0x3c
c00141ec:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00141ef:	89 d0                	mov    eax,edx
c00141f1:	99                   	cdq    
c00141f2:	f7 ff                	idiv   edi
c00141f4:	85 db                	test   ebx,ebx
c00141f6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00141f9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00141fc:	79 11                	jns    c001420f <secondsToDatetime(unsigned long long)+0x6f>
c00141fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014202:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014208:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001420d:	eb 07                	jmp    c0014216 <secondsToDatetime(unsigned long long)+0x76>
c001420f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014214:	89 d8                	mov    eax,ebx
c0014216:	bf b4 05 00 00       	mov    edi,0x5b4
c001421b:	99                   	cdq    
c001421c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014221:	f7 f9                	idiv   ecx
c0014223:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014228:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001422c:	31 d2                	xor    edx,edx
c001422e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014236:	01 c3                	add    ebx,eax
c0014238:	89 d8                	mov    eax,ebx
c001423a:	f7 f1                	div    ecx
c001423c:	31 d2                	xor    edx,edx
c001423e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014241:	89 d8                	mov    eax,ebx
c0014243:	f7 f7                	div    edi
c0014245:	31 d2                	xor    edx,edx
c0014247:	29 c1                	sub    ecx,eax
c0014249:	89 d8                	mov    eax,ebx
c001424b:	f7 f5                	div    ebp
c001424d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014252:	29 c1                	sub    ecx,eax
c0014254:	31 d2                	xor    edx,edx
c0014256:	89 c8                	mov    eax,ecx
c0014258:	f7 f5                	div    ebp
c001425a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001425f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014263:	31 d2                	xor    edx,edx
c0014265:	89 c8                	mov    eax,ecx
c0014267:	f7 f5                	div    ebp
c0014269:	31 d2                	xor    edx,edx
c001426b:	01 c3                	add    ebx,eax
c001426d:	89 c8                	mov    eax,ecx
c001426f:	f7 f7                	div    edi
c0014271:	bf 99 00 00 00       	mov    edi,0x99
c0014276:	29 c3                	sub    ebx,eax
c0014278:	31 d2                	xor    edx,edx
c001427a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014282:	29 c3                	sub    ebx,eax
c0014284:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014287:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001428a:	bb 05 00 00 00       	mov    ebx,0x5
c001428f:	83 c1 02             	add    ecx,0x2
c0014292:	89 c8                	mov    eax,ecx
c0014294:	f7 f7                	div    edi
c0014296:	31 d2                	xor    edx,edx
c0014298:	89 c7                	mov    edi,eax
c001429a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00142a0:	83 c0 02             	add    eax,0x2
c00142a3:	f7 f3                	div    ebx
c00142a5:	89 eb                	mov    ebx,ebp
c00142a7:	29 c3                	sub    ebx,eax
c00142a9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00142af:	88 1e                	mov    BYTE PTR [esi],bl
c00142b1:	19 c0                	sbb    eax,eax
c00142b3:	31 d2                	xor    edx,edx
c00142b5:	83 e0 0c             	and    eax,0xc
c00142b8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00142bc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00142c4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00142c8:	83 f9 01             	cmp    ecx,0x1
c00142cb:	0f 96 c2             	setbe  dl
c00142ce:	41                   	inc    ecx
c00142cf:	01 d0                	add    eax,edx
c00142d1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00142d4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00142d8:	83 c4 1c             	add    esp,0x1c
c00142db:	89 f0                	mov    eax,esi
c00142dd:	5b                   	pop    ebx
c00142de:	5e                   	pop    esi
c00142df:	5f                   	pop    edi
c00142e0:	5d                   	pop    ebp
c00142e1:	c2 04 00             	ret    0x4

c00142e4 <Clock::timeInDatetimeLocal()>:
c00142e4:	53                   	push   ebx
c00142e5:	83 ec 14             	sub    esp,0x14
c00142e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142f0:	e8 83 fc ff ff       	call   c0013f78 <Clock::timeInSecondsLocal()>
c00142f5:	83 c4 0c             	add    esp,0xc
c00142f8:	52                   	push   edx
c00142f9:	50                   	push   eax
c00142fa:	53                   	push   ebx
c00142fb:	e8 a0 fe ff ff       	call   c00141a0 <secondsToDatetime(unsigned long long)>
c0014300:	89 d8                	mov    eax,ebx
c0014302:	83 c4 14             	add    esp,0x14
c0014305:	5b                   	pop    ebx
c0014306:	c2 04 00             	ret    0x4
c0014309:	90                   	nop

c001430a <Device::hibernate()>:
c001430a:	c3                   	ret    
c001430b:	90                   	nop

c001430c <Device::wake()>:
c001430c:	c3                   	ret    
c001430d:	90                   	nop

c001430e <Device::detect()>:
c001430e:	c3                   	ret    
c001430f:	90                   	nop

c0014310 <Device::disableLegacy()>:
c0014310:	c3                   	ret    
c0014311:	90                   	nop

c0014312 <Device::powerSaving(PowerSavingLevel)>:
c0014312:	c3                   	ret    
c0014313:	90                   	nop

c0014314 <DriverlessDevice::close(int, int, void*)>:
c0014314:	31 c0                	xor    eax,eax
c0014316:	c3                   	ret    
c0014317:	90                   	nop

c0014318 <DriverlessDevice::detect()>:
c0014318:	c3                   	ret    
c0014319:	90                   	nop

c001431a <DriverlessDevice::open(int, int, void*)>:
c001431a:	83 ec 18             	sub    esp,0x18
c001431d:	68 d0 ad 02 c0       	push   0xc002add0
c0014322:	e8 c0 63 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0014327:	83 c8 ff             	or     eax,0xffffffff
c001432a:	83 c4 1c             	add    esp,0x1c
c001432d:	c3                   	ret    

c001432e <Device::~Device()>:
c001432e:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c0014333:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014337:	89 10                	mov    DWORD PTR [eax],edx
c0014339:	90                   	nop
c001433a:	c3                   	ret    
c001433b:	90                   	nop

c001433c <Device::~Device()>:
c001433c:	83 ec 0c             	sub    esp,0xc
c001433f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014343:	e8 e6 ff ff ff       	call   c001432e <Device::~Device()>
c0014348:	83 c4 04             	add    esp,0x4
c001434b:	83 ec 08             	sub    esp,0x8
c001434e:	68 58 01 00 00       	push   0x158
c0014353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014357:	e8 fa eb ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c001435c:	83 c4 10             	add    esp,0x10
c001435f:	83 c4 0c             	add    esp,0xc
c0014362:	c3                   	ret    
c0014363:	90                   	nop

c0014364 <Device::findAndLoadDriver()>:
c0014364:	c3                   	ret    
c0014365:	90                   	nop

c0014366 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014366:	57                   	push   edi
c0014367:	b9 09 00 00 00       	mov    ecx,0x9
c001436c:	56                   	push   esi
c001436d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014371:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014375:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001437f:	81 c7 18 01 00 00    	add    edi,0x118
c0014385:	fc                   	cld    
c0014386:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014388:	5e                   	pop    esi
c0014389:	5f                   	pop    edi
c001438a:	c3                   	ret    
c001438b:	90                   	nop

c001438c <Device::preOpenACPI(void*, char*, char*)>:
c001438c:	56                   	push   esi
c001438d:	53                   	push   ebx
c001438e:	83 ec 08             	sub    esp,0x8
c0014391:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014395:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014399:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00143a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143a7:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00143ad:	6a 1e                	push   0x1e
c00143af:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00143b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143b9:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00143bf:	50                   	push   eax
c00143c0:	e8 7f c3 fe ff       	call   c0000744 <memcpy>
c00143c5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00143c9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00143cd:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00143d5:	83 c4 14             	add    esp,0x14
c00143d8:	5b                   	pop    ebx
c00143d9:	5e                   	pop    esi
c00143da:	e9 65 c3 fe ff       	jmp    c0000744 <memcpy>
c00143df:	90                   	nop

c00143e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143e4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143e9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143f0:	75 0b                	jne    c00143fd <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00143f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00143f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143f8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00143fb:	eb 1e                	jmp    c001441b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00143fd:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0014402:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014408:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001440e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014410:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014414:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014418:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001441b:	ff e0                	jmp    eax
c001441d:	90                   	nop

c001441e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001441e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014422:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014427:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001442e:	75 0b                	jne    c001443b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014430:	8b 00                	mov    eax,DWORD PTR [eax]
c0014432:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014436:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014439:	eb 1e                	jmp    c0014459 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001443b:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0014440:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014446:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001444c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001444e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014452:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014456:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014459:	ff e0                	jmp    eax
c001445b:	90                   	nop

c001445c <Device::addChild(Device*)>:
c001445c:	53                   	push   ebx
c001445d:	83 ec 08             	sub    esp,0x8
c0014460:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014464:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014468:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001446e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014474:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014476:	85 d2                	test   edx,edx
c0014478:	74 04                	je     c001447e <Device::addChild(Device*)+0x22>
c001447a:	89 d3                	mov    ebx,edx
c001447c:	eb f6                	jmp    c0014474 <Device::addChild(Device*)+0x18>
c001447e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014481:	83 ec 0c             	sub    esp,0xc
c0014484:	6a 08                	push   0x8
c0014486:	e8 b5 b3 ff ff       	call   c000f840 <malloc>
c001448b:	89 03                	mov    DWORD PTR [ebx],eax
c001448d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014493:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001449a:	83 c4 18             	add    esp,0x18
c001449d:	5b                   	pop    ebx
c001449e:	c3                   	ret    
c001449f:	90                   	nop

c00144a0 <Device::removeAllChildren()>:
c00144a0:	56                   	push   esi
c00144a1:	53                   	push   ebx
c00144a2:	52                   	push   edx
c00144a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144a7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00144ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b0:	74 17                	je     c00144c9 <Device::removeAllChildren()+0x29>
c00144b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00144b5:	85 c0                	test   eax,eax
c00144b7:	74 0c                	je     c00144c5 <Device::removeAllChildren()+0x25>
c00144b9:	83 ec 0c             	sub    esp,0xc
c00144bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00144be:	50                   	push   eax
c00144bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00144c2:	83 c4 10             	add    esp,0x10
c00144c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c7:	eb e4                	jmp    c00144ad <Device::removeAllChildren()+0xd>
c00144c9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00144cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144d5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00144db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144e2:	58                   	pop    eax
c00144e3:	5b                   	pop    ebx
c00144e4:	5e                   	pop    esi
c00144e5:	c3                   	ret    

c00144e6 <Device::hibernateAll()>:
c00144e6:	53                   	push   ebx
c00144e7:	83 ec 14             	sub    esp,0x14
c00144ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144f0:	53                   	push   ebx
c00144f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00144f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144fa:	83 c4 10             	add    esp,0x10
c00144fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014500:	74 0f                	je     c0014511 <Device::hibernateAll()+0x2b>
c0014502:	83 ec 0c             	sub    esp,0xc
c0014505:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014508:	e8 d9 ff ff ff       	call   c00144e6 <Device::hibernateAll()>
c001450d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001450f:	eb e9                	jmp    c00144fa <Device::hibernateAll()+0x14>
c0014511:	83 c4 08             	add    esp,0x8
c0014514:	5b                   	pop    ebx
c0014515:	c3                   	ret    

c0014516 <Device::wakeAll()>:
c0014516:	53                   	push   ebx
c0014517:	83 ec 14             	sub    esp,0x14
c001451a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001451e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014520:	53                   	push   ebx
c0014521:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014524:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014530:	74 0f                	je     c0014541 <Device::wakeAll()+0x2b>
c0014532:	83 ec 0c             	sub    esp,0xc
c0014535:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014538:	e8 d9 ff ff ff       	call   c0014516 <Device::wakeAll()>
c001453d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001453f:	eb e9                	jmp    c001452a <Device::wakeAll()+0x14>
c0014541:	83 c4 08             	add    esp,0x8
c0014544:	5b                   	pop    ebx
c0014545:	c3                   	ret    

c0014546 <Device::detectAll()>:
c0014546:	53                   	push   ebx
c0014547:	83 ec 14             	sub    esp,0x14
c001454a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001454e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014550:	53                   	push   ebx
c0014551:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014554:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001455a:	83 c4 10             	add    esp,0x10
c001455d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014560:	74 0f                	je     c0014571 <Device::detectAll()+0x2b>
c0014562:	83 ec 0c             	sub    esp,0xc
c0014565:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014568:	e8 d9 ff ff ff       	call   c0014546 <Device::detectAll()>
c001456d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001456f:	eb e9                	jmp    c001455a <Device::detectAll()+0x14>
c0014571:	83 c4 08             	add    esp,0x8
c0014574:	5b                   	pop    ebx
c0014575:	c3                   	ret    

c0014576 <Device::disableLegacyAll()>:
c0014576:	53                   	push   ebx
c0014577:	83 ec 14             	sub    esp,0x14
c001457a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001457e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014580:	53                   	push   ebx
c0014581:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014584:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001458a:	83 c4 10             	add    esp,0x10
c001458d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014590:	74 0f                	je     c00145a1 <Device::disableLegacyAll()+0x2b>
c0014592:	83 ec 0c             	sub    esp,0xc
c0014595:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014598:	e8 d9 ff ff ff       	call   c0014576 <Device::disableLegacyAll()>
c001459d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001459f:	eb e9                	jmp    c001458a <Device::disableLegacyAll()+0x14>
c00145a1:	83 c4 08             	add    esp,0x8
c00145a4:	5b                   	pop    ebx
c00145a5:	c3                   	ret    

c00145a6 <Device::loadDriversForAll()>:
c00145a6:	53                   	push   ebx
c00145a7:	83 ec 08             	sub    esp,0x8
c00145aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ae:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00145b6:	85 db                	test   ebx,ebx
c00145b8:	74 12                	je     c00145cc <Device::loadDriversForAll()+0x26>
c00145ba:	83 ec 0c             	sub    esp,0xc
c00145bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00145c0:	e8 e1 ff ff ff       	call   c00145a6 <Device::loadDriversForAll()>
c00145c5:	83 c4 10             	add    esp,0x10
c00145c8:	89 d8                	mov    eax,ebx
c00145ca:	eb e8                	jmp    c00145b4 <Device::loadDriversForAll()+0xe>
c00145cc:	83 c4 08             	add    esp,0x8
c00145cf:	5b                   	pop    ebx
c00145d0:	c3                   	ret    
c00145d1:	90                   	nop

c00145d2 <Device::closeAll()>:
c00145d2:	53                   	push   ebx
c00145d3:	83 ec 08             	sub    esp,0x8
c00145d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145dc:	6a 00                	push   0x0
c00145de:	6a 00                	push   0x0
c00145e0:	6a 00                	push   0x0
c00145e2:	53                   	push   ebx
c00145e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145ec:	83 c4 10             	add    esp,0x10
c00145ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145f2:	74 0f                	je     c0014603 <Device::closeAll()+0x31>
c00145f4:	83 ec 0c             	sub    esp,0xc
c00145f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145fa:	e8 d3 ff ff ff       	call   c00145d2 <Device::closeAll()>
c00145ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014601:	eb e9                	jmp    c00145ec <Device::closeAll()+0x1a>
c0014603:	83 c4 08             	add    esp,0x8
c0014606:	5b                   	pop    ebx
c0014607:	c3                   	ret    

c0014608 <Device::powerSavingAll(PowerSavingLevel)>:
c0014608:	56                   	push   esi
c0014609:	53                   	push   ebx
c001460a:	83 ec 0c             	sub    esp,0xc
c001460d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014611:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014615:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014617:	56                   	push   esi
c0014618:	53                   	push   ebx
c0014619:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001461c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014622:	83 c4 10             	add    esp,0x10
c0014625:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014628:	74 0f                	je     c0014639 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001462a:	52                   	push   edx
c001462b:	52                   	push   edx
c001462c:	56                   	push   esi
c001462d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014630:	e8 d3 ff ff ff       	call   c0014608 <Device::powerSavingAll(PowerSavingLevel)>
c0014635:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014637:	eb e9                	jmp    c0014622 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014639:	58                   	pop    eax
c001463a:	5b                   	pop    ebx
c001463b:	5e                   	pop    esi
c001463c:	c3                   	ret    
c001463d:	90                   	nop

c001463e <Device::setName(char const*)>:
c001463e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014646:	e9 e9 c1 fe ff       	jmp    c0000834 <strcpy>
c001464b:	90                   	nop

c001464c <Device::Device(char const*)>:
c001464c:	83 ec 1c             	sub    esp,0x1c
c001464f:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c0014654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014658:	89 10                	mov    DWORD PTR [eax],edx
c001465a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001465e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001466c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014688:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014692:	83 ec 08             	sub    esp,0x8
c0014695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001469d:	e8 9c ff ff ff       	call   c001463e <Device::setName(char const*)>
c00146a2:	83 c4 10             	add    esp,0x10
c00146a5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00146ad:	83 ec 0c             	sub    esp,0xc
c00146b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146b4:	e8 87 b1 ff ff       	call   c000f840 <malloc>
c00146b9:	83 c4 10             	add    esp,0x10
c00146bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00146c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00146cd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00146d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00146e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146e7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146f8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00146ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014703:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001470a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001470e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001471c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001472a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014738:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014742:	90                   	nop
c0014743:	83 c4 1c             	add    esp,0x1c
c0014746:	c3                   	ret    
c0014747:	90                   	nop

c0014748 <Device::getName()>:
c0014748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001474c:	05 d0 00 00 00       	add    eax,0xd0
c0014751:	c3                   	ret    

c0014752 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014752:	83 ec 0c             	sub    esp,0xc
c0014755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014759:	83 ec 08             	sub    esp,0x8
c001475c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014760:	50                   	push   eax
c0014761:	e8 e6 fe ff ff       	call   c001464c <Device::Device(char const*)>
c0014766:	83 c4 10             	add    esp,0x10
c0014769:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c001476e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014772:	89 10                	mov    DWORD PTR [eax],edx
c0014774:	90                   	nop
c0014775:	83 c4 0c             	add    esp,0xc
c0014778:	c3                   	ret    
c0014779:	90                   	nop

c001477a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001477a:	57                   	push   edi
c001477b:	56                   	push   esi
c001477c:	53                   	push   ebx
c001477d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014781:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014785:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014789:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001478f:	75 0c                	jne    c001479d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014791:	52                   	push   edx
c0014792:	52                   	push   edx
c0014793:	53                   	push   ebx
c0014794:	56                   	push   esi
c0014795:	e8 40 42 01 00       	call   c00289da <LinkedList<Device>::addElement(Device*)>
c001479a:	83 c4 10             	add    esp,0x10
c001479d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00147a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00147a6:	74 12                	je     c00147ba <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00147a8:	50                   	push   eax
c00147a9:	57                   	push   edi
c00147aa:	56                   	push   esi
c00147ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00147ae:	e8 c7 ff ff ff       	call   c001477a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00147b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00147b5:	83 c4 10             	add    esp,0x10
c00147b8:	eb e9                	jmp    c00147a3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00147ba:	5b                   	pop    ebx
c00147bb:	5e                   	pop    esi
c00147bc:	5f                   	pop    edi
c00147bd:	c3                   	ret    

c00147be <getDevicesOfType(DeviceType)>:
c00147be:	53                   	push   ebx
c00147bf:	83 ec 14             	sub    esp,0x14
c00147c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147c6:	53                   	push   ebx
c00147c7:	e8 ea 42 01 00       	call   c0028ab6 <LinkedList<Device>::LinkedList()>
c00147cc:	83 c4 0c             	add    esp,0xc
c00147cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147d3:	53                   	push   ebx
c00147d4:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c00147da:	e8 9b ff ff ff       	call   c001477a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00147df:	89 d8                	mov    eax,ebx
c00147e1:	83 c4 18             	add    esp,0x18
c00147e4:	5b                   	pop    ebx
c00147e5:	c2 04 00             	ret    0x4

c00147e8 <HardDiskController::HardDiskController(char const*)>:
c00147e8:	83 ec 0c             	sub    esp,0xc
c00147eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ef:	83 ec 08             	sub    esp,0x8
c00147f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f6:	50                   	push   eax
c00147f7:	e8 50 fe ff ff       	call   c001464c <Device::Device(char const*)>
c00147fc:	83 c4 10             	add    esp,0x10
c00147ff:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c0014804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014808:	89 10                	mov    DWORD PTR [eax],edx
c001480a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001480e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014818:	90                   	nop
c0014819:	83 c4 0c             	add    esp,0xc
c001481c:	c3                   	ret    
c001481d:	90                   	nop

c001481e <HardDiskController::~HardDiskController()>:
c001481e:	83 ec 0c             	sub    esp,0xc
c0014821:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c0014826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001482a:	89 10                	mov    DWORD PTR [eax],edx
c001482c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014830:	83 ec 0c             	sub    esp,0xc
c0014833:	50                   	push   eax
c0014834:	e8 f5 fa ff ff       	call   c001432e <Device::~Device()>
c0014839:	83 c4 10             	add    esp,0x10
c001483c:	90                   	nop
c001483d:	83 c4 0c             	add    esp,0xc
c0014840:	c3                   	ret    
c0014841:	90                   	nop

c0014842 <HardDiskController::~HardDiskController()>:
c0014842:	83 ec 0c             	sub    esp,0xc
c0014845:	83 ec 0c             	sub    esp,0xc
c0014848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001484c:	e8 cd ff ff ff       	call   c001481e <HardDiskController::~HardDiskController()>
c0014851:	83 c4 10             	add    esp,0x10
c0014854:	83 ec 08             	sub    esp,0x8
c0014857:	68 58 01 00 00       	push   0x158
c001485c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014860:	e8 f1 e6 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0014865:	83 c4 10             	add    esp,0x10
c0014868:	83 c4 0c             	add    esp,0xc
c001486b:	c3                   	ret    

c001486c <PhysicalDisk::eject()>:
c001486c:	83 ec 18             	sub    esp,0x18
c001486f:	68 74 ae 02 c0       	push   0xc002ae74
c0014874:	e8 bd e7 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014879:	83 c8 ff             	or     eax,0xffffffff
c001487c:	83 c4 1c             	add    esp,0x1c
c001487f:	c3                   	ret    

c0014880 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014880:	83 ec 0c             	sub    esp,0xc
c0014883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014887:	83 ec 08             	sub    esp,0x8
c001488a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001488e:	50                   	push   eax
c001488f:	e8 b8 fd ff ff       	call   c001464c <Device::Device(char const*)>
c0014894:	83 c4 10             	add    esp,0x10
c0014897:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c001489c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a0:	89 10                	mov    DWORD PTR [eax],edx
c00148a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00148ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148b1:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00148b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148bc:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00148c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00148ce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00148d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148e2:	90                   	nop
c00148e3:	83 c4 0c             	add    esp,0xc
c00148e6:	c3                   	ret    
c00148e7:	90                   	nop

c00148e8 <PhysicalDisk::startCache()>:
c00148e8:	56                   	push   esi
c00148e9:	53                   	push   ebx
c00148ea:	83 ec 10             	sub    esp,0x10
c00148ed:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148f1:	6a 44                	push   0x44
c00148f3:	e8 48 af ff ff       	call   c000f840 <malloc>
c00148f8:	89 c6                	mov    esi,eax
c00148fa:	58                   	pop    eax
c00148fb:	5a                   	pop    edx
c00148fc:	53                   	push   ebx
c00148fd:	56                   	push   esi
c00148fe:	e8 39 27 00 00       	call   c001703c <VCache::VCache(PhysicalDisk*)>
c0014903:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014909:	83 c4 14             	add    esp,0x14
c001490c:	5b                   	pop    ebx
c001490d:	5e                   	pop    esi
c001490e:	c3                   	ret    
c001490f:	90                   	nop

c0014910 <PhysicalDisk::~PhysicalDisk()>:
c0014910:	83 ec 0c             	sub    esp,0xc
c0014913:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c0014918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491c:	89 10                	mov    DWORD PTR [eax],edx
c001491e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014922:	83 ec 0c             	sub    esp,0xc
c0014925:	50                   	push   eax
c0014926:	e8 03 fa ff ff       	call   c001432e <Device::~Device()>
c001492b:	83 c4 10             	add    esp,0x10
c001492e:	90                   	nop
c001492f:	83 c4 0c             	add    esp,0xc
c0014932:	c3                   	ret    
c0014933:	90                   	nop

c0014934 <PhysicalDisk::~PhysicalDisk()>:
c0014934:	83 ec 0c             	sub    esp,0xc
c0014937:	83 ec 0c             	sub    esp,0xc
c001493a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001493e:	e8 cd ff ff ff       	call   c0014910 <PhysicalDisk::~PhysicalDisk()>
c0014943:	83 c4 10             	add    esp,0x10
c0014946:	83 ec 08             	sub    esp,0x8
c0014949:	68 6c 01 00 00       	push   0x16c
c001494e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014952:	e8 ff e5 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0014957:	83 c4 10             	add    esp,0x10
c001495a:	83 c4 0c             	add    esp,0xc
c001495d:	c3                   	ret    

c001495e <FPU::FPU(char const*)>:
c001495e:	83 ec 0c             	sub    esp,0xc
c0014961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014965:	83 ec 08             	sub    esp,0x8
c0014968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001496c:	50                   	push   eax
c001496d:	e8 da fc ff ff       	call   c001464c <Device::Device(char const*)>
c0014972:	83 c4 10             	add    esp,0x10
c0014975:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c001497a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001497e:	89 10                	mov    DWORD PTR [eax],edx
c0014980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014984:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001498e:	90                   	nop
c001498f:	83 c4 0c             	add    esp,0xc
c0014992:	c3                   	ret    
c0014993:	90                   	nop

c0014994 <FPU::~FPU()>:
c0014994:	83 ec 0c             	sub    esp,0xc
c0014997:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c001499c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149a0:	89 10                	mov    DWORD PTR [eax],edx
c00149a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149a6:	83 ec 0c             	sub    esp,0xc
c00149a9:	50                   	push   eax
c00149aa:	e8 7f f9 ff ff       	call   c001432e <Device::~Device()>
c00149af:	83 c4 10             	add    esp,0x10
c00149b2:	90                   	nop
c00149b3:	83 c4 0c             	add    esp,0xc
c00149b6:	c3                   	ret    
c00149b7:	90                   	nop

c00149b8 <FPU::~FPU()>:
c00149b8:	83 ec 0c             	sub    esp,0xc
c00149bb:	83 ec 0c             	sub    esp,0xc
c00149be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149c2:	e8 cd ff ff ff       	call   c0014994 <FPU::~FPU()>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	83 ec 08             	sub    esp,0x8
c00149cd:	68 58 01 00 00       	push   0x158
c00149d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149d6:	e8 7b e5 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c00149db:	83 c4 10             	add    esp,0x10
c00149de:	83 c4 0c             	add    esp,0xc
c00149e1:	c3                   	ret    

c00149e2 <setupFPU()>:
c00149e2:	53                   	push   ebx
c00149e3:	83 ec 08             	sub    esp,0x8
c00149e6:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c00149ec:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00149f3:	74 19                	je     c0014a0e <setupFPU()+0x2c>
c00149f5:	83 ec 0c             	sub    esp,0xc
c00149f8:	68 58 01 00 00       	push   0x158
c00149fd:	e8 3e ae ff ff       	call   c000f840 <malloc>
c0014a02:	89 c3                	mov    ebx,eax
c0014a04:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a07:	e8 1c 0c 01 00       	call   c0025628 <AVX::AVX()>
c0014a0c:	eb 5b                	jmp    c0014a69 <setupFPU()+0x87>
c0014a0e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014a14:	84 c0                	test   al,al
c0014a16:	79 19                	jns    c0014a31 <setupFPU()+0x4f>
c0014a18:	83 ec 0c             	sub    esp,0xc
c0014a1b:	68 58 01 00 00       	push   0x158
c0014a20:	e8 1b ae ff ff       	call   c000f840 <malloc>
c0014a25:	89 c3                	mov    ebx,eax
c0014a27:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a2a:	e8 1f 0d 01 00       	call   c002574e <SSE::SSE()>
c0014a2f:	eb 38                	jmp    c0014a69 <setupFPU()+0x87>
c0014a31:	a8 20                	test   al,0x20
c0014a33:	74 19                	je     c0014a4e <setupFPU()+0x6c>
c0014a35:	83 ec 0c             	sub    esp,0xc
c0014a38:	68 58 01 00 00       	push   0x158
c0014a3d:	e8 fe ad ff ff       	call   c000f840 <malloc>
c0014a42:	89 c3                	mov    ebx,eax
c0014a44:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a47:	e8 6c 0c 01 00       	call   c00256b8 <MMX::MMX()>
c0014a4c:	eb 1b                	jmp    c0014a69 <setupFPU()+0x87>
c0014a4e:	a8 10                	test   al,0x10
c0014a50:	74 1c                	je     c0014a6e <setupFPU()+0x8c>
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	68 58 01 00 00       	push   0x158
c0014a5a:	e8 e1 ad ff ff       	call   c000f840 <malloc>
c0014a5f:	89 c3                	mov    ebx,eax
c0014a61:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a64:	e8 73 0d 01 00       	call   c00257dc <x87::x87()>
c0014a69:	83 c4 10             	add    esp,0x10
c0014a6c:	eb 24                	jmp    c0014a92 <setupFPU()+0xb0>
c0014a6e:	83 e0 ef             	and    eax,0xffffffef
c0014a71:	83 ec 0c             	sub    esp,0xc
c0014a74:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a7a:	68 d4 ae 02 c0       	push   0xc002aed4
c0014a7f:	e8 b2 e5 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014a84:	0f 20 c0             	mov    eax,cr0
c0014a87:	83 c8 04             	or     eax,0x4
c0014a8a:	0f 22 c0             	mov    cr0,eax
c0014a8d:	31 db                	xor    ebx,ebx
c0014a8f:	83 c4 10             	add    esp,0x10
c0014a92:	89 d8                	mov    eax,ebx
c0014a94:	83 c4 08             	add    esp,0x8
c0014a97:	5b                   	pop    ebx
c0014a98:	c3                   	ret    
c0014a99:	90                   	nop

c0014a9a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014aa2:	c1 e0 04             	shl    eax,0x4
c0014aa5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014aa9:	8d 50 10             	lea    edx,[eax+0x10]
c0014aac:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014ab2:	74 08                	je     c0014abc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014ab4:	83 c0 04             	add    eax,0x4
c0014ab7:	39 d0                	cmp    eax,edx
c0014ab9:	75 f1                	jne    c0014aac <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014abb:	c3                   	ret    
c0014abc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014ac6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ad0:	eb e2                	jmp    c0014ab4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014ad2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014ad2:	57                   	push   edi
c0014ad3:	31 c0                	xor    eax,eax
c0014ad5:	56                   	push   esi
c0014ad6:	53                   	push   ebx
c0014ad7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014adb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014adf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014ae3:	89 da                	mov    edx,ebx
c0014ae5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014ae9:	c1 e2 04             	shl    edx,0x4
c0014aec:	01 ca                	add    edx,ecx
c0014aee:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014af6:	74 16                	je     c0014b0e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014af8:	40                   	inc    eax
c0014af9:	83 f8 04             	cmp    eax,0x4
c0014afc:	75 f0                	jne    c0014aee <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014afe:	c7 44 24 10 18 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af18
c0014b06:	5b                   	pop    ebx
c0014b07:	5e                   	pop    esi
c0014b08:	5f                   	pop    edi
c0014b09:	e9 d9 5b 00 00       	jmp    c001a6e7 <Krnl::panic(char const*)>
c0014b0e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014b11:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014b14:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014b1a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014b20:	5b                   	pop    ebx
c0014b21:	5e                   	pop    esi
c0014b22:	5f                   	pop    edi
c0014b23:	c3                   	ret    

c0014b24 <doubleFault(regs*, void*)>:
c0014b24:	55                   	push   ebp
c0014b25:	89 e5                	mov    ebp,esp
c0014b27:	83 ec 08             	sub    esp,0x8
c0014b2a:	83 ec 0c             	sub    esp,0xc
c0014b2d:	68 53 af 02 c0       	push   0xc002af53
c0014b32:	e8 b0 5b 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0014b37:	83 c4 10             	add    esp,0x10
c0014b3a:	90                   	nop
c0014b3b:	c9                   	leave  
c0014b3c:	c3                   	ret    
c0014b3d:	90                   	nop

c0014b3e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014b3e:	56                   	push   esi
c0014b3f:	53                   	push   ebx
c0014b40:	50                   	push   eax
c0014b41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b45:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b49:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b4e:	75 35                	jne    c0014b85 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014b50:	8d 43 20             	lea    eax,[ebx+0x20]
c0014b53:	31 d2                	xor    edx,edx
c0014b55:	89 c1                	mov    ecx,eax
c0014b57:	c1 e1 04             	shl    ecx,0x4
c0014b5a:	01 f1                	add    ecx,esi
c0014b5c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014b64:	74 3e                	je     c0014ba4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014b66:	42                   	inc    edx
c0014b67:	83 fa 04             	cmp    edx,0x4
c0014b6a:	75 f0                	jne    c0014b5c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014b6c:	83 ec 0c             	sub    esp,0xc
c0014b6f:	68 98 af 02 c0       	push   0xc002af98
c0014b74:	e8 6e 5b 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0014b79:	83 c4 10             	add    esp,0x10
c0014b7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b81:	5a                   	pop    edx
c0014b82:	5b                   	pop    ebx
c0014b83:	5e                   	pop    esi
c0014b84:	c3                   	ret    
c0014b85:	83 ec 0c             	sub    esp,0xc
c0014b88:	56                   	push   esi
c0014b89:	e8 ba fb ff ff       	call   c0014748 <Device::getName()>
c0014b8e:	83 c4 10             	add    esp,0x10
c0014b91:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b94:	75 ba                	jne    c0014b50 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b96:	83 fb 0f             	cmp    ebx,0xf
c0014b99:	7f 29                	jg     c0014bc4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b9b:	0f b6 9b e0 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2820]
c0014ba2:	eb ac                	jmp    c0014b50 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ba4:	8d 04 82             	lea    eax,[edx+eax*4]
c0014ba7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014bab:	8d 04 86             	lea    eax,[esi+eax*4]
c0014bae:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014bb4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bb8:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014bbe:	89 d8                	mov    eax,ebx
c0014bc0:	5a                   	pop    edx
c0014bc1:	5b                   	pop    ebx
c0014bc2:	5e                   	pop    esi
c0014bc3:	c3                   	ret    
c0014bc4:	83 ec 0c             	sub    esp,0xc
c0014bc7:	68 60 af 02 c0       	push   0xc002af60
c0014bcc:	e8 16 5b 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0014bd1:	83 c4 10             	add    esp,0x10
c0014bd4:	e9 77 ff ff ff       	jmp    c0014b50 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014bd9:	90                   	nop

c0014bda <InterruptController::clearAllHandlers(int, bool)>:
c0014bda:	56                   	push   esi
c0014bdb:	53                   	push   ebx
c0014bdc:	52                   	push   edx
c0014bdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014be1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014be5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014bea:	75 61                	jne    c0014c4d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014bec:	8d 46 20             	lea    eax,[esi+0x20]
c0014bef:	c1 e6 04             	shl    esi,0x4
c0014bf2:	c1 e0 04             	shl    eax,0x4
c0014bf5:	01 de                	add    esi,ebx
c0014bf7:	01 d8                	add    eax,ebx
c0014bf9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014c03:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014c0d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014c17:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014c21:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014c2b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014c35:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014c3f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014c49:	58                   	pop    eax
c0014c4a:	5b                   	pop    ebx
c0014c4b:	5e                   	pop    esi
c0014c4c:	c3                   	ret    
c0014c4d:	83 ec 0c             	sub    esp,0xc
c0014c50:	53                   	push   ebx
c0014c51:	e8 f2 fa ff ff       	call   c0014748 <Device::getName()>
c0014c56:	83 c4 10             	add    esp,0x10
c0014c59:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c5c:	75 8e                	jne    c0014bec <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c5e:	83 fe 0f             	cmp    esi,0xf
c0014c61:	7f 09                	jg     c0014c6c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014c63:	0f b6 b6 e0 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2820]
c0014c6a:	eb 80                	jmp    c0014bec <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c6c:	83 ec 0c             	sub    esp,0xc
c0014c6f:	68 d4 af 02 c0       	push   0xc002afd4
c0014c74:	e8 6e 5a 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0014c79:	83 c4 10             	add    esp,0x10
c0014c7c:	e9 6b ff ff ff       	jmp    c0014bec <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c81:	90                   	nop

c0014c82 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c82:	56                   	push   esi
c0014c83:	53                   	push   ebx
c0014c84:	52                   	push   edx
c0014c85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c8d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c92:	75 3a                	jne    c0014cce <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c98:	8d 50 20             	lea    edx,[eax+0x20]
c0014c9b:	c1 e2 04             	shl    edx,0x4
c0014c9e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014ca1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014ca5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014cab:	74 0b                	je     c0014cb8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014cad:	83 c0 04             	add    eax,0x4
c0014cb0:	39 d0                	cmp    eax,edx
c0014cb2:	75 f1                	jne    c0014ca5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014cb4:	58                   	pop    eax
c0014cb5:	5b                   	pop    ebx
c0014cb6:	5e                   	pop    esi
c0014cb7:	c3                   	ret    
c0014cb8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014cc2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ccc:	eb df                	jmp    c0014cad <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014cce:	83 ec 0c             	sub    esp,0xc
c0014cd1:	56                   	push   esi
c0014cd2:	e8 71 fa ff ff       	call   c0014748 <Device::getName()>
c0014cd7:	83 c4 10             	add    esp,0x10
c0014cda:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014cdd:	75 b5                	jne    c0014c94 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014cdf:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014ce4:	7f 11                	jg     c0014cf7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014ce6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014cea:	0f b6 80 e0 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2820]
c0014cf1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cf5:	eb 9d                	jmp    c0014c94 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014cf7:	83 ec 0c             	sub    esp,0xc
c0014cfa:	68 d4 af 02 c0       	push   0xc002afd4
c0014cff:	e8 e3 59 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0014d04:	83 c4 10             	add    esp,0x10
c0014d07:	eb 8b                	jmp    c0014c94 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014d09 <nmiHandler(regs*, void*)>:
c0014d09:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0014d0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d12:	e9 75 a2 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014d17 <int_handler>:
c0014d17:	55                   	push   ebp
c0014d18:	57                   	push   edi
c0014d19:	56                   	push   esi
c0014d1a:	53                   	push   ebx
c0014d1b:	83 ec 0c             	sub    esp,0xc
c0014d1e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014d22:	80 3d 04 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031104,0x0
c0014d29:	74 0b                	je     c0014d36 <int_handler+0x1f>
c0014d2b:	fa                   	cli    
c0014d2c:	f4                   	hlt    
c0014d2d:	80 3d 04 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031104,0x0
c0014d34:	75 f5                	jne    c0014d2b <int_handler+0x14>
c0014d36:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0014d3b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014d3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d44:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014d4a:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d4d:	83 f8 17             	cmp    eax,0x17
c0014d50:	77 13                	ja     c0014d65 <int_handler+0x4e>
c0014d52:	83 ec 08             	sub    esp,0x8
c0014d55:	8b 17                	mov    edx,DWORD PTR [edi]
c0014d57:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d5a:	0f b6 c0             	movzx  eax,al
c0014d5d:	50                   	push   eax
c0014d5e:	57                   	push   edi
c0014d5f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	83 c3 15             	add    ebx,0x15
c0014d68:	c1 e3 04             	shl    ebx,0x4
c0014d6b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d6f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d76:	31 db                	xor    ebx,ebx
c0014d78:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d7c:	85 c0                	test   eax,eax
c0014d7e:	74 13                	je     c0014d93 <int_handler+0x7c>
c0014d80:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d83:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d87:	74 1c                	je     c0014da5 <int_handler+0x8e>
c0014d89:	83 ec 08             	sub    esp,0x8
c0014d8c:	52                   	push   edx
c0014d8d:	56                   	push   esi
c0014d8e:	ff d0                	call   eax
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	43                   	inc    ebx
c0014d94:	83 fb 04             	cmp    ebx,0x4
c0014d97:	75 df                	jne    c0014d78 <int_handler+0x61>
c0014d99:	83 c4 0c             	add    esp,0xc
c0014d9c:	31 c0                	xor    eax,eax
c0014d9e:	5b                   	pop    ebx
c0014d9f:	31 d2                	xor    edx,edx
c0014da1:	5e                   	pop    esi
c0014da2:	5f                   	pop    edi
c0014da3:	5d                   	pop    ebp
c0014da4:	c3                   	ret    
c0014da5:	83 ec 08             	sub    esp,0x8
c0014da8:	52                   	push   edx
c0014da9:	56                   	push   esi
c0014daa:	ff d0                	call   eax
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	83 c4 0c             	add    esp,0xc
c0014db2:	5b                   	pop    ebx
c0014db3:	5e                   	pop    esi
c0014db4:	5f                   	pop    edi
c0014db5:	5d                   	pop    ebp
c0014db6:	c3                   	ret    
c0014db7:	90                   	nop

c0014db8 <InterruptController::InterruptController(char const*)>:
c0014db8:	83 ec 1c             	sub    esp,0x1c
c0014dbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dbf:	83 ec 08             	sub    esp,0x8
c0014dc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014dc6:	50                   	push   eax
c0014dc7:	e8 80 f8 ff ff       	call   c001464c <Device::Device(char const*)>
c0014dcc:	83 c4 10             	add    esp,0x10
c0014dcf:	ba 7c b2 02 c0       	mov    edx,0xc002b27c
c0014dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd8:	89 10                	mov    DWORD PTR [eax],edx
c0014dda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dde:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014de8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014df0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014df8:	7f 5e                	jg     c0014e58 <InterruptController::InterruptController(char const*)+0xa0>
c0014dfa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014e02:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014e07:	7f 49                	jg     c0014e52 <InterruptController::InterruptController(char const*)+0x9a>
c0014e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e11:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014e18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e1c:	01 ca                	add    edx,ecx
c0014e1e:	83 c2 54             	add    edx,0x54
c0014e21:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e31:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014e38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e3c:	01 ca                	add    edx,ecx
c0014e3e:	81 c2 54 04 00 00    	add    edx,0x454
c0014e44:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e4c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014e50:	eb b0                	jmp    c0014e02 <InterruptController::InterruptController(char const*)+0x4a>
c0014e52:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e56:	eb 98                	jmp    c0014df0 <InterruptController::InterruptController(char const*)+0x38>
c0014e58:	90                   	nop
c0014e59:	83 c4 1c             	add    esp,0x1c
c0014e5c:	c3                   	ret    
c0014e5d:	90                   	nop

c0014e5e <InterruptController::~InterruptController()>:
c0014e5e:	83 ec 0c             	sub    esp,0xc
c0014e61:	ba 7c b2 02 c0       	mov    edx,0xc002b27c
c0014e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e6a:	89 10                	mov    DWORD PTR [eax],edx
c0014e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e70:	83 ec 0c             	sub    esp,0xc
c0014e73:	50                   	push   eax
c0014e74:	e8 b5 f4 ff ff       	call   c001432e <Device::~Device()>
c0014e79:	83 c4 10             	add    esp,0x10
c0014e7c:	90                   	nop
c0014e7d:	83 c4 0c             	add    esp,0xc
c0014e80:	c3                   	ret    
c0014e81:	90                   	nop

c0014e82 <InterruptController::~InterruptController()>:
c0014e82:	83 ec 0c             	sub    esp,0xc
c0014e85:	83 ec 0c             	sub    esp,0xc
c0014e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e8c:	e8 cd ff ff ff       	call   c0014e5e <InterruptController::~InterruptController()>
c0014e91:	83 c4 10             	add    esp,0x10
c0014e94:	83 ec 08             	sub    esp,0x8
c0014e97:	68 58 21 00 00       	push   0x2158
c0014e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ea0:	e8 b1 e0 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0014ea5:	83 c4 10             	add    esp,0x10
c0014ea8:	83 c4 0c             	add    esp,0xc
c0014eab:	c3                   	ret    

c0014eac <displayDebugInfo(regs*)>:
c0014eac:	55                   	push   ebp
c0014ead:	57                   	push   edi
c0014eae:	56                   	push   esi
c0014eaf:	53                   	push   ebx
c0014eb0:	83 ec 24             	sub    esp,0x24
c0014eb3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014eb7:	0f 20 c2             	mov    edx,cr0
c0014eba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014ebe:	0f 20 d7             	mov    edi,cr2
c0014ec1:	0f 20 de             	mov    esi,cr3
c0014ec4:	0f 20 e5             	mov    ebp,cr4
c0014ec7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014eca:	68 0e b0 02 c0       	push   0xc002b00e
c0014ecf:	e8 62 e1 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014ed4:	59                   	pop    ecx
c0014ed5:	58                   	pop    eax
c0014ed6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014ed9:	68 19 b0 02 c0       	push   0xc002b019
c0014ede:	e8 53 e1 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014ee3:	58                   	pop    eax
c0014ee4:	5a                   	pop    edx
c0014ee5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014ee8:	68 24 b0 02 c0       	push   0xc002b024
c0014eed:	e8 44 e1 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014ef2:	59                   	pop    ecx
c0014ef3:	58                   	pop    eax
c0014ef4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ef7:	68 2f b0 02 c0       	push   0xc002b02f
c0014efc:	e8 35 e1 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f01:	58                   	pop    eax
c0014f02:	5a                   	pop    edx
c0014f03:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014f06:	68 3a b0 02 c0       	push   0xc002b03a
c0014f0b:	e8 26 e1 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f10:	59                   	pop    ecx
c0014f11:	58                   	pop    eax
c0014f12:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014f15:	68 45 b0 02 c0       	push   0xc002b045
c0014f1a:	e8 17 e1 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f1f:	58                   	pop    eax
c0014f20:	5a                   	pop    edx
c0014f21:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f24:	68 50 b0 02 c0       	push   0xc002b050
c0014f29:	e8 08 e1 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f2e:	59                   	pop    ecx
c0014f2f:	58                   	pop    eax
c0014f30:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014f33:	68 5b b0 02 c0       	push   0xc002b05b
c0014f38:	e8 f9 e0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f3d:	58                   	pop    eax
c0014f3e:	5a                   	pop    edx
c0014f3f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f42:	68 66 b0 02 c0       	push   0xc002b066
c0014f47:	e8 ea e0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f4c:	59                   	pop    ecx
c0014f4d:	58                   	pop    eax
c0014f4e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f51:	68 75 b0 02 c0       	push   0xc002b075
c0014f56:	e8 db e0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f5b:	58                   	pop    eax
c0014f5c:	5a                   	pop    edx
c0014f5d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f60:	68 80 b0 02 c0       	push   0xc002b080
c0014f65:	e8 cc e0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f6a:	59                   	pop    ecx
c0014f6b:	58                   	pop    eax
c0014f6c:	57                   	push   edi
c0014f6d:	68 8b b0 02 c0       	push   0xc002b08b
c0014f72:	e8 bf e0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f77:	58                   	pop    eax
c0014f78:	5a                   	pop    edx
c0014f79:	56                   	push   esi
c0014f7a:	68 96 b0 02 c0       	push   0xc002b096
c0014f7f:	e8 b2 e0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0014f84:	59                   	pop    ecx
c0014f85:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014f8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f90:	e8 00 be ff ff       	call   c0010d95 <setActiveTerminal(VgaText*)>
c0014f95:	58                   	pop    eax
c0014f96:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f99:	5a                   	pop    edx
c0014f9a:	c1 e0 05             	shl    eax,0x5
c0014f9d:	05 40 d5 02 c0       	add    eax,0xc002d540
c0014fa2:	50                   	push   eax
c0014fa3:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014fa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fae:	e8 01 c2 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0014fb3:	59                   	pop    ecx
c0014fb4:	58                   	pop    eax
c0014fb5:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014fba:	68 a1 b0 02 c0       	push   0xc002b0a1
c0014fbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc5:	e8 ea c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0014fca:	58                   	pop    eax
c0014fcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fd0:	5a                   	pop    edx
c0014fd1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fd4:	83 c0 0c             	add    eax,0xc
c0014fd7:	50                   	push   eax
c0014fd8:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014fdd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe3:	e8 cc c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0014fe8:	59                   	pop    ecx
c0014fe9:	58                   	pop    eax
c0014fea:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0014fef:	68 aa b0 02 c0       	push   0xc002b0aa
c0014ff4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffa:	e8 b5 c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0014fff:	58                   	pop    eax
c0015000:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015005:	5a                   	pop    edx
c0015006:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015009:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500f:	e8 c6 c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015014:	59                   	pop    ecx
c0015015:	58                   	pop    eax
c0015016:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001501b:	68 b2 b0 02 c0       	push   0xc002b0b2
c0015020:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015026:	e8 89 c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001502b:	58                   	pop    eax
c001502c:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015031:	5a                   	pop    edx
c0015032:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0015035:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503b:	e8 9a c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015040:	59                   	pop    ecx
c0015041:	58                   	pop    eax
c0015042:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015047:	68 ba b0 02 c0       	push   0xc002b0ba
c001504c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015052:	e8 5d c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015057:	58                   	pop    eax
c0015058:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001505d:	5a                   	pop    edx
c001505e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0015061:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015067:	e8 6e c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001506c:	59                   	pop    ecx
c001506d:	58                   	pop    eax
c001506e:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015073:	68 c2 b0 02 c0       	push   0xc002b0c2
c0015078:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507e:	e8 31 c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015083:	58                   	pop    eax
c0015084:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015089:	5a                   	pop    edx
c001508a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001508d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015093:	e8 42 c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015098:	59                   	pop    ecx
c0015099:	58                   	pop    eax
c001509a:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001509f:	68 ca b0 02 c0       	push   0xc002b0ca
c00150a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150aa:	e8 05 c1 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00150af:	58                   	pop    eax
c00150b0:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00150b5:	5a                   	pop    edx
c00150b6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00150b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bf:	e8 16 c1 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00150c4:	59                   	pop    ecx
c00150c5:	58                   	pop    eax
c00150c6:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00150cb:	68 d2 b0 02 c0       	push   0xc002b0d2
c00150d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d6:	e8 d9 c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00150db:	58                   	pop    eax
c00150dc:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00150e1:	5a                   	pop    edx
c00150e2:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00150e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150eb:	e8 ea c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00150f0:	59                   	pop    ecx
c00150f1:	58                   	pop    eax
c00150f2:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00150f7:	68 da b0 02 c0       	push   0xc002b0da
c00150fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015102:	e8 ad c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015107:	58                   	pop    eax
c0015108:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001510d:	5a                   	pop    edx
c001510e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015112:	52                   	push   edx
c0015113:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015119:	e8 bc c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001511e:	59                   	pop    ecx
c001511f:	58                   	pop    eax
c0015120:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015125:	68 e3 b0 02 c0       	push   0xc002b0e3
c001512a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015130:	e8 7f c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015135:	58                   	pop    eax
c0015136:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001513b:	5a                   	pop    edx
c001513c:	57                   	push   edi
c001513d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015143:	e8 92 c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015148:	59                   	pop    ecx
c0015149:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001514e:	5f                   	pop    edi
c001514f:	68 eb b0 02 c0       	push   0xc002b0eb
c0015154:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515a:	e8 55 c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001515f:	58                   	pop    eax
c0015160:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015165:	5a                   	pop    edx
c0015166:	56                   	push   esi
c0015167:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516d:	e8 68 c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015172:	59                   	pop    ecx
c0015173:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015178:	5e                   	pop    esi
c0015179:	68 f3 b0 02 c0       	push   0xc002b0f3
c001517e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015184:	e8 2b c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015189:	5f                   	pop    edi
c001518a:	58                   	pop    eax
c001518b:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015190:	55                   	push   ebp
c0015191:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015197:	e8 3e c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001519c:	58                   	pop    eax
c001519d:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00151a2:	5a                   	pop    edx
c00151a3:	68 fb b0 02 c0       	push   0xc002b0fb
c00151a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ae:	e8 01 c0 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00151b3:	0f 21 c0             	mov    eax,db0
c00151b6:	59                   	pop    ecx
c00151b7:	5e                   	pop    esi
c00151b8:	50                   	push   eax
c00151b9:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00151be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c4:	e8 11 c0 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00151c9:	5f                   	pop    edi
c00151ca:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00151cf:	5d                   	pop    ebp
c00151d0:	68 04 b1 02 c0       	push   0xc002b104
c00151d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151db:	e8 d4 bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00151e0:	0f 21 c8             	mov    eax,db1
c00151e3:	5a                   	pop    edx
c00151e4:	59                   	pop    ecx
c00151e5:	50                   	push   eax
c00151e6:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00151eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151f1:	e8 e4 bf ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00151f6:	5e                   	pop    esi
c00151f7:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00151fc:	5f                   	pop    edi
c00151fd:	68 0c b1 02 c0       	push   0xc002b10c
c0015202:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015208:	e8 a7 bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001520d:	0f 21 d0             	mov    eax,db2
c0015210:	5d                   	pop    ebp
c0015211:	5a                   	pop    edx
c0015212:	50                   	push   eax
c0015213:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015218:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001521e:	e8 b7 bf ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015223:	59                   	pop    ecx
c0015224:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015229:	5e                   	pop    esi
c001522a:	68 14 b1 02 c0       	push   0xc002b114
c001522f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015235:	e8 7a bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001523a:	0f 21 d8             	mov    eax,db3
c001523d:	5f                   	pop    edi
c001523e:	5d                   	pop    ebp
c001523f:	50                   	push   eax
c0015240:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015245:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001524b:	e8 8a bf ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015250:	58                   	pop    eax
c0015251:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015256:	5a                   	pop    edx
c0015257:	68 1c b1 02 c0       	push   0xc002b11c
c001525c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015262:	e8 4d bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015267:	0f 21 f0             	mov    eax,db6
c001526a:	59                   	pop    ecx
c001526b:	5e                   	pop    esi
c001526c:	50                   	push   eax
c001526d:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015272:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015278:	e8 5d bf ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001527d:	5f                   	pop    edi
c001527e:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015283:	5d                   	pop    ebp
c0015284:	68 24 b1 02 c0       	push   0xc002b124
c0015289:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001528f:	e8 20 bf ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c0015294:	0f 21 f8             	mov    eax,db7
c0015297:	5a                   	pop    edx
c0015298:	59                   	pop    ecx
c0015299:	50                   	push   eax
c001529a:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001529f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152a5:	e8 30 bf ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c00152aa:	5e                   	pop    esi
c00152ab:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00152ae:	e8 16 85 00 00       	call   c001d7c9 <Thr::getDriverNameFromAddress(unsigned long)>
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	85 c0                	test   eax,eax
c00152b8:	74 7d                	je     c0015337 <displayDebugInfo(regs*)+0x48b>
c00152ba:	89 c6                	mov    esi,eax
c00152bc:	50                   	push   eax
c00152bd:	50                   	push   eax
c00152be:	56                   	push   esi
c00152bf:	68 2c b1 02 c0       	push   0xc002b12c
c00152c4:	e8 6d dd ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00152c9:	5a                   	pop    edx
c00152ca:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00152cf:	59                   	pop    ecx
c00152d0:	68 3a b1 02 c0       	push   0xc002b13a
c00152d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152db:	e8 d4 be ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00152e0:	5f                   	pop    edi
c00152e1:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00152e6:	5d                   	pop    ebp
c00152e7:	56                   	push   esi
c00152e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152ee:	e8 c1 be ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c00152f3:	58                   	pop    eax
c00152f4:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00152f9:	5a                   	pop    edx
c00152fa:	68 46 b1 02 c0       	push   0xc002b146
c00152ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015305:	e8 aa be ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001530a:	59                   	pop    ecx
c001530b:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0015310:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015316:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015319:	e8 e2 84 00 00       	call   c001d800 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001531e:	5b                   	pop    ebx
c001531f:	5d                   	pop    ebp
c0015320:	50                   	push   eax
c0015321:	57                   	push   edi
c0015322:	e8 b3 be ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c0015327:	58                   	pop    eax
c0015328:	5a                   	pop    edx
c0015329:	56                   	push   esi
c001532a:	68 52 b1 02 c0       	push   0xc002b152
c001532f:	e8 02 dd ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0015334:	83 c4 10             	add    esp,0x10
c0015337:	fa                   	cli    
c0015338:	f4                   	hlt    
c0015339:	eb fe                	jmp    c0015339 <displayDebugInfo(regs*)+0x48d>

c001533b <x87EmulHandler(regs*, void*)>:
c001533b:	53                   	push   ebx
c001533c:	83 ec 14             	sub    esp,0x14
c001533f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015343:	53                   	push   ebx
c0015344:	e8 0d a8 00 00       	call   c001fb56 <Vm::x87Handler(regs*)>
c0015349:	83 c4 10             	add    esp,0x10
c001534c:	84 c0                	test   al,al
c001534e:	74 05                	je     c0015355 <x87EmulHandler(regs*, void*)+0x1a>
c0015350:	83 c4 08             	add    esp,0x8
c0015353:	5b                   	pop    ebx
c0015354:	c3                   	ret    
c0015355:	83 ec 0c             	sub    esp,0xc
c0015358:	68 62 b1 02 c0       	push   0xc002b162
c001535d:	e8 d4 dc ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0015362:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015365:	e8 42 fb ff ff       	call   c0014eac <displayDebugInfo(regs*)>

c001536a <gpFault(regs*, void*)>:
c001536a:	53                   	push   ebx
c001536b:	83 ec 14             	sub    esp,0x14
c001536e:	c7 05 40 e7 02 c0 d3 ee 01 c0 	mov    DWORD PTR ds:0xc002e740,0xc001eed3
c0015378:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001537c:	53                   	push   ebx
c001537d:	e8 51 9b 00 00       	call   c001eed3 <Vm::faultHandler(regs*)>
c0015382:	83 c4 10             	add    esp,0x10
c0015385:	84 c0                	test   al,al
c0015387:	74 05                	je     c001538e <gpFault(regs*, void*)+0x24>
c0015389:	83 c4 08             	add    esp,0x8
c001538c:	5b                   	pop    ebx
c001538d:	c3                   	ret    
c001538e:	83 ec 0c             	sub    esp,0xc
c0015391:	68 78 b1 02 c0       	push   0xc002b178
c0015396:	e8 9b dc ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001539b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001539e:	e8 09 fb ff ff       	call   c0014eac <displayDebugInfo(regs*)>

c00153a3 <pgFault(regs*, void*)>:
c00153a3:	53                   	push   ebx
c00153a4:	83 ec 14             	sub    esp,0x14
c00153a7:	68 93 b1 02 c0       	push   0xc002b193
c00153ac:	e8 85 dc ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00153b1:	0f 20 d3             	mov    ebx,cr2
c00153b4:	58                   	pop    eax
c00153b5:	5a                   	pop    edx
c00153b6:	53                   	push   ebx
c00153b7:	68 a0 b1 02 c0       	push   0xc002b1a0
c00153bc:	e8 75 dc ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00153c1:	59                   	pop    ecx
c00153c2:	58                   	pop    eax
c00153c3:	53                   	push   ebx
c00153c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153cc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00153d2:	e8 cb d8 ff ff       	call   c0012ca2 <VAS::tryLoadBackOffDisk(unsigned long)>
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	84 c0                	test   al,al
c00153dc:	74 05                	je     c00153e3 <pgFault(regs*, void*)+0x40>
c00153de:	83 c4 08             	add    esp,0x8
c00153e1:	5b                   	pop    ebx
c00153e2:	c3                   	ret    
c00153e3:	83 ec 0c             	sub    esp,0xc
c00153e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153ea:	e8 bd fa ff ff       	call   c0014eac <displayDebugInfo(regs*)>

c00153ef <otherISRHandler(regs*, void*)>:
c00153ef:	53                   	push   ebx
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153f7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00153fa:	50                   	push   eax
c00153fb:	50                   	push   eax
c00153fc:	68 ac b1 02 c0       	push   0xc002b1ac
c0015401:	e8 30 dc ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0015406:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015409:	e8 9e fa ff ff       	call   c0014eac <displayDebugInfo(regs*)>

c001540e <opcodeFault(regs*, void*)>:
c001540e:	55                   	push   ebp
c001540f:	89 e5                	mov    ebp,esp
c0015411:	56                   	push   esi
c0015412:	53                   	push   ebx
c0015413:	83 ec 40             	sub    esp,0x40
c0015416:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001541b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015421:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015427:	84 c0                	test   al,al
c0015429:	74 24                	je     c001544f <opcodeFault(regs*, void*)+0x41>
c001542b:	83 ec 0c             	sub    esp,0xc
c001542e:	68 cc b1 02 c0       	push   0xc002b1cc
c0015433:	e8 fe db ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0015438:	83 c4 10             	add    esp,0x10
c001543b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015441:	8d 50 19             	lea    edx,[eax+0x19]
c0015444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015447:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001544a:	e9 be 05 00 00       	jmp    c0015a0d <opcodeFault(regs*, void*)+0x5ff>
c001544f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015452:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015455:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015458:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001545c:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015466:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015469:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546c:	8a 00                	mov    al,BYTE PTR [eax]
c001546e:	3c f0                	cmp    al,0xf0
c0015470:	75 17                	jne    c0015489 <opcodeFault(regs*, void*)+0x7b>
c0015472:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015478:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547b:	8d 50 01             	lea    edx,[eax+0x1]
c001547e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015481:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015484:	e9 da 00 00 00       	jmp    c0015563 <opcodeFault(regs*, void*)+0x155>
c0015489:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548c:	8a 00                	mov    al,BYTE PTR [eax]
c001548e:	3c f2                	cmp    al,0xf2
c0015490:	74 09                	je     c001549b <opcodeFault(regs*, void*)+0x8d>
c0015492:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015495:	8a 00                	mov    al,BYTE PTR [eax]
c0015497:	3c f3                	cmp    al,0xf3
c0015499:	75 1b                	jne    c00154b6 <opcodeFault(regs*, void*)+0xa8>
c001549b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001549f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a8:	8d 50 01             	lea    edx,[eax+0x1]
c00154ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b1:	e9 ad 00 00 00       	jmp    c0015563 <opcodeFault(regs*, void*)+0x155>
c00154b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b9:	8a 00                	mov    al,BYTE PTR [eax]
c00154bb:	3c 66                	cmp    al,0x66
c00154bd:	75 1f                	jne    c00154de <opcodeFault(regs*, void*)+0xd0>
c00154bf:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154c3:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00154c7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d0:	8d 50 01             	lea    edx,[eax+0x1]
c00154d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154d9:	e9 85 00 00 00       	jmp    c0015563 <opcodeFault(regs*, void*)+0x155>
c00154de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e1:	8a 00                	mov    al,BYTE PTR [eax]
c00154e3:	3c 67                	cmp    al,0x67
c00154e5:	75 18                	jne    c00154ff <opcodeFault(regs*, void*)+0xf1>
c00154e7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f4:	8d 50 01             	lea    edx,[eax+0x1]
c00154f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154fd:	eb 64                	jmp    c0015563 <opcodeFault(regs*, void*)+0x155>
c00154ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015502:	8a 00                	mov    al,BYTE PTR [eax]
c0015504:	3c 2e                	cmp    al,0x2e
c0015506:	74 09                	je     c0015511 <opcodeFault(regs*, void*)+0x103>
c0015508:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550b:	8a 00                	mov    al,BYTE PTR [eax]
c001550d:	3c 3e                	cmp    al,0x3e
c001550f:	75 18                	jne    c0015529 <opcodeFault(regs*, void*)+0x11b>
c0015511:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015515:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001551e:	8d 50 01             	lea    edx,[eax+0x1]
c0015521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015524:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015527:	eb 3a                	jmp    c0015563 <opcodeFault(regs*, void*)+0x155>
c0015529:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552c:	8a 00                	mov    al,BYTE PTR [eax]
c001552e:	3c 36                	cmp    al,0x36
c0015530:	74 1b                	je     c001554d <opcodeFault(regs*, void*)+0x13f>
c0015532:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015535:	8a 00                	mov    al,BYTE PTR [eax]
c0015537:	3c 26                	cmp    al,0x26
c0015539:	74 12                	je     c001554d <opcodeFault(regs*, void*)+0x13f>
c001553b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553e:	8a 00                	mov    al,BYTE PTR [eax]
c0015540:	3c 64                	cmp    al,0x64
c0015542:	74 09                	je     c001554d <opcodeFault(regs*, void*)+0x13f>
c0015544:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015547:	8a 00                	mov    al,BYTE PTR [eax]
c0015549:	3c 65                	cmp    al,0x65
c001554b:	75 16                	jne    c0015563 <opcodeFault(regs*, void*)+0x155>
c001554d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015551:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015557:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001555a:	8d 50 01             	lea    edx,[eax+0x1]
c001555d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015560:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015563:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015566:	8a 00                	mov    al,BYTE PTR [eax]
c0015568:	3c 0f                	cmp    al,0xf
c001556a:	0f 85 ad 00 00 00    	jne    c001561d <opcodeFault(regs*, void*)+0x20f>
c0015570:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015573:	40                   	inc    eax
c0015574:	8a 00                	mov    al,BYTE PTR [eax]
c0015576:	3c c2                	cmp    al,0xc2
c0015578:	74 0e                	je     c0015588 <opcodeFault(regs*, void*)+0x17a>
c001557a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001557d:	40                   	inc    eax
c001557e:	8a 00                	mov    al,BYTE PTR [eax]
c0015580:	3c c3                	cmp    al,0xc3
c0015582:	0f 85 95 00 00 00    	jne    c001561d <opcodeFault(regs*, void*)+0x20f>
c0015588:	83 ec 0c             	sub    esp,0xc
c001558b:	68 ef b1 02 c0       	push   0xc002b1ef
c0015590:	e8 a1 da ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0015595:	83 c4 10             	add    esp,0x10
c0015598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001559e:	8d 50 01             	lea    edx,[eax+0x1]
c00155a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00155aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ad:	8a 00                	mov    al,BYTE PTR [eax]
c00155af:	8d 50 fe             	lea    edx,[eax-0x2]
c00155b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b5:	88 10                	mov    BYTE PTR [eax],dl
c00155b7:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00155ba:	50                   	push   eax
c00155bb:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00155be:	50                   	push   eax
c00155bf:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00155c2:	50                   	push   eax
c00155c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00155c6:	e8 e3 47 00 00       	call   c0019dae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00155cb:	83 c4 10             	add    esp,0x10
c00155ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155d4:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00155d7:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00155da:	01 d0                	add    eax,edx
c00155dc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00155df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155e5:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00155e8:	48                   	dec    eax
c00155e9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00155ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ef:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00155f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f8:	83 ec 04             	sub    esp,0x4
c00155fb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155fe:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015601:	50                   	push   eax
c0015602:	e8 ad ab fe ff       	call   c00001b4 <voodooXADD>
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001560d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015610:	01 c2                	add    edx,eax
c0015612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015615:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015618:	e9 f0 03 00 00       	jmp    c0015a0d <opcodeFault(regs*, void*)+0x5ff>
c001561d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015620:	8a 00                	mov    al,BYTE PTR [eax]
c0015622:	3c 0f                	cmp    al,0xf
c0015624:	0f 85 8b 01 00 00    	jne    c00157b5 <opcodeFault(regs*, void*)+0x3a7>
c001562a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562d:	40                   	inc    eax
c001562e:	8a 00                	mov    al,BYTE PTR [eax]
c0015630:	3c c7                	cmp    al,0xc7
c0015632:	0f 86 7d 01 00 00    	jbe    c00157b5 <opcodeFault(regs*, void*)+0x3a7>
c0015638:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001563b:	40                   	inc    eax
c001563c:	8a 00                	mov    al,BYTE PTR [eax]
c001563e:	3c cf                	cmp    al,0xcf
c0015640:	0f 87 6f 01 00 00    	ja     c00157b5 <opcodeFault(regs*, void*)+0x3a7>
c0015646:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015649:	40                   	inc    eax
c001564a:	8a 00                	mov    al,BYTE PTR [eax]
c001564c:	83 c0 38             	add    eax,0x38
c001564f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015652:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015656:	75 0b                	jne    c0015663 <opcodeFault(regs*, void*)+0x255>
c0015658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001565e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015661:	eb 75                	jmp    c00156d8 <opcodeFault(regs*, void*)+0x2ca>
c0015663:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015667:	75 0b                	jne    c0015674 <opcodeFault(regs*, void*)+0x266>
c0015669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001566f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015672:	eb 64                	jmp    c00156d8 <opcodeFault(regs*, void*)+0x2ca>
c0015674:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015678:	75 0b                	jne    c0015685 <opcodeFault(regs*, void*)+0x277>
c001567a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015680:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015683:	eb 53                	jmp    c00156d8 <opcodeFault(regs*, void*)+0x2ca>
c0015685:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015689:	75 0b                	jne    c0015696 <opcodeFault(regs*, void*)+0x288>
c001568b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015691:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015694:	eb 42                	jmp    c00156d8 <opcodeFault(regs*, void*)+0x2ca>
c0015696:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001569a:	75 0b                	jne    c00156a7 <opcodeFault(regs*, void*)+0x299>
c001569c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00156a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156a5:	eb 31                	jmp    c00156d8 <opcodeFault(regs*, void*)+0x2ca>
c00156a7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00156ab:	75 0b                	jne    c00156b8 <opcodeFault(regs*, void*)+0x2aa>
c00156ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00156b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156b6:	eb 20                	jmp    c00156d8 <opcodeFault(regs*, void*)+0x2ca>
c00156b8:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156bc:	75 0b                	jne    c00156c9 <opcodeFault(regs*, void*)+0x2bb>
c00156be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00156c4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156c7:	eb 0f                	jmp    c00156d8 <opcodeFault(regs*, void*)+0x2ca>
c00156c9:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156cd:	75 09                	jne    c00156d8 <opcodeFault(regs*, void*)+0x2ca>
c00156cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00156d5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156d8:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00156dc:	74 10                	je     c00156ee <opcodeFault(regs*, void*)+0x2e0>
c00156de:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00156e5:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00156ec:	eb 2d                	jmp    c001571b <opcodeFault(regs*, void*)+0x30d>
c00156ee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156f1:	c1 e0 18             	shl    eax,0x18
c00156f4:	89 c2                	mov    edx,eax
c00156f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156f9:	c1 e0 08             	shl    eax,0x8
c00156fc:	25 00 00 ff 00       	and    eax,0xff0000
c0015701:	09 c2                	or     edx,eax
c0015703:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015706:	c1 e8 08             	shr    eax,0x8
c0015709:	25 00 ff 00 00       	and    eax,0xff00
c001570e:	09 c2                	or     edx,eax
c0015710:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015713:	c1 e8 18             	shr    eax,0x18
c0015716:	09 d0                	or     eax,edx
c0015718:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001571b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001571f:	75 0b                	jne    c001572c <opcodeFault(regs*, void*)+0x31e>
c0015721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015724:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015727:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001572a:	eb 75                	jmp    c00157a1 <opcodeFault(regs*, void*)+0x393>
c001572c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015730:	75 0b                	jne    c001573d <opcodeFault(regs*, void*)+0x32f>
c0015732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015735:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015738:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001573b:	eb 64                	jmp    c00157a1 <opcodeFault(regs*, void*)+0x393>
c001573d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015741:	75 0b                	jne    c001574e <opcodeFault(regs*, void*)+0x340>
c0015743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015746:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015749:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001574c:	eb 53                	jmp    c00157a1 <opcodeFault(regs*, void*)+0x393>
c001574e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015752:	75 0b                	jne    c001575f <opcodeFault(regs*, void*)+0x351>
c0015754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015757:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001575a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001575d:	eb 42                	jmp    c00157a1 <opcodeFault(regs*, void*)+0x393>
c001575f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015763:	75 0b                	jne    c0015770 <opcodeFault(regs*, void*)+0x362>
c0015765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015768:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001576b:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001576e:	eb 31                	jmp    c00157a1 <opcodeFault(regs*, void*)+0x393>
c0015770:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015774:	75 0b                	jne    c0015781 <opcodeFault(regs*, void*)+0x373>
c0015776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015779:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001577c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001577f:	eb 20                	jmp    c00157a1 <opcodeFault(regs*, void*)+0x393>
c0015781:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015785:	75 0b                	jne    c0015792 <opcodeFault(regs*, void*)+0x384>
c0015787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001578d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015790:	eb 0f                	jmp    c00157a1 <opcodeFault(regs*, void*)+0x393>
c0015792:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015796:	75 09                	jne    c00157a1 <opcodeFault(regs*, void*)+0x393>
c0015798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001579e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00157a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157a7:	8d 50 02             	lea    edx,[eax+0x2]
c00157aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157b0:	e9 58 02 00 00       	jmp    c0015a0d <opcodeFault(regs*, void*)+0x5ff>
c00157b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b8:	8a 00                	mov    al,BYTE PTR [eax]
c00157ba:	3c 0f                	cmp    al,0xf
c00157bc:	0f 85 76 01 00 00    	jne    c0015938 <opcodeFault(regs*, void*)+0x52a>
c00157c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157c5:	40                   	inc    eax
c00157c6:	8a 00                	mov    al,BYTE PTR [eax]
c00157c8:	3c c7                	cmp    al,0xc7
c00157ca:	0f 85 68 01 00 00    	jne    c0015938 <opcodeFault(regs*, void*)+0x52a>
c00157d0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00157d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157d9:	8d 50 01             	lea    edx,[eax+0x1]
c00157dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157df:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157e2:	8d 45 ba             	lea    eax,[ebp-0x46]
c00157e5:	50                   	push   eax
c00157e6:	8d 45 bb             	lea    eax,[ebp-0x45]
c00157e9:	50                   	push   eax
c00157ea:	8d 45 bc             	lea    eax,[ebp-0x44]
c00157ed:	50                   	push   eax
c00157ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157f1:	e8 b8 45 00 00       	call   c0019dae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00157f6:	83 c4 10             	add    esp,0x10
c00157f9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00157fc:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00157ff:	83 f0 01             	xor    eax,0x1
c0015802:	84 c0                	test   al,al
c0015804:	0f 84 2e 01 00 00    	je     c0015938 <opcodeFault(regs*, void*)+0x52a>
c001580a:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001580d:	3c 01                	cmp    al,0x1
c001580f:	0f 85 23 01 00 00    	jne    c0015938 <opcodeFault(regs*, void*)+0x52a>
c0015815:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015818:	83 f0 01             	xor    eax,0x1
c001581b:	84 c0                	test   al,al
c001581d:	0f 84 15 01 00 00    	je     c0015938 <opcodeFault(regs*, void*)+0x52a>
c0015823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015826:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015829:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001582c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015833:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015836:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015839:	89 c2                	mov    edx,eax
c001583b:	b8 00 00 00 00       	mov    eax,0x0
c0015840:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015843:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015849:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001584c:	ba 00 00 00 00       	mov    edx,0x0
c0015851:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015854:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001585d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015860:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015867:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001586a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001586d:	89 c2                	mov    edx,eax
c001586f:	b8 00 00 00 00       	mov    eax,0x0
c0015874:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015877:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001587a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015880:	ba 00 00 00 00       	mov    edx,0x0
c0015885:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015888:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001588b:	e8 32 86 00 00       	call   c001dec2 <lockScheduler()>
c0015890:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015893:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015896:	8b 00                	mov    eax,DWORD PTR [eax]
c0015898:	89 c1                	mov    ecx,eax
c001589a:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001589d:	89 cb                	mov    ebx,ecx
c001589f:	89 d0                	mov    eax,edx
c00158a1:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00158a4:	89 c6                	mov    esi,eax
c00158a6:	89 f0                	mov    eax,esi
c00158a8:	09 d8                	or     eax,ebx
c00158aa:	85 c0                	test   eax,eax
c00158ac:	75 21                	jne    c00158cf <opcodeFault(regs*, void*)+0x4c1>
c00158ae:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00158b1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00158b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00158b7:	89 01                	mov    DWORD PTR [ecx],eax
c00158b9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00158bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158c2:	83 c8 40             	or     eax,0x40
c00158c5:	89 c2                	mov    edx,eax
c00158c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ca:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00158cd:	eb 3e                	jmp    c001590d <opcodeFault(regs*, void*)+0x4ff>
c00158cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00158d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00158d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00158da:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00158dd:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00158e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00158e6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00158e9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00158ec:	89 d0                	mov    eax,edx
c00158ee:	31 d2                	xor    edx,edx
c00158f0:	89 c3                	mov    ebx,eax
c00158f2:	89 d6                	mov    esi,edx
c00158f4:	89 da                	mov    edx,ebx
c00158f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f9:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00158fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015902:	83 e0 bf             	and    eax,0xffffffbf
c0015905:	89 c2                	mov    edx,eax
c0015907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001590d:	e8 b2 85 00 00       	call   c001dec4 <unlockScheduler()>
c0015912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015915:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015918:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001591b:	01 c2                	add    edx,eax
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015923:	83 ec 0c             	sub    esp,0xc
c0015926:	68 fe b1 02 c0       	push   0xc002b1fe
c001592b:	e8 06 d7 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	e9 d5 00 00 00       	jmp    c0015a0d <opcodeFault(regs*, void*)+0x5ff>
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	68 11 b2 02 c0       	push   0xc002b211
c0015940:	e8 f1 d6 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001594e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015951:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015954:	c1 e0 04             	shl    eax,0x4
c0015957:	01 d0                	add    eax,edx
c0015959:	83 c0 03             	add    eax,0x3
c001595c:	8a 00                	mov    al,BYTE PTR [eax]
c001595e:	0f b6 d8             	movzx  ebx,al
c0015961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015964:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001596d:	c1 e0 04             	shl    eax,0x4
c0015970:	01 d0                	add    eax,edx
c0015972:	83 c0 02             	add    eax,0x2
c0015975:	8a 00                	mov    al,BYTE PTR [eax]
c0015977:	0f b6 c8             	movzx  ecx,al
c001597a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015983:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015986:	c1 e0 04             	shl    eax,0x4
c0015989:	01 d0                	add    eax,edx
c001598b:	40                   	inc    eax
c001598c:	8a 00                	mov    al,BYTE PTR [eax]
c001598e:	0f b6 d0             	movzx  edx,al
c0015991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015994:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001599d:	c1 e0 04             	shl    eax,0x4
c00159a0:	01 f0                	add    eax,esi
c00159a2:	8a 00                	mov    al,BYTE PTR [eax]
c00159a4:	0f b6 c0             	movzx  eax,al
c00159a7:	83 ec 0c             	sub    esp,0xc
c00159aa:	53                   	push   ebx
c00159ab:	51                   	push   ecx
c00159ac:	52                   	push   edx
c00159ad:	50                   	push   eax
c00159ae:	68 24 b2 02 c0       	push   0xc002b224
c00159b3:	e8 7e d6 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00159b8:	83 c4 20             	add    esp,0x20
c00159bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159c1:	83 c0 03             	add    eax,0x3
c00159c4:	8a 00                	mov    al,BYTE PTR [eax]
c00159c6:	0f b6 d8             	movzx  ebx,al
c00159c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159cf:	83 c0 02             	add    eax,0x2
c00159d2:	8a 00                	mov    al,BYTE PTR [eax]
c00159d4:	0f b6 c8             	movzx  ecx,al
c00159d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159dd:	40                   	inc    eax
c00159de:	8a 00                	mov    al,BYTE PTR [eax]
c00159e0:	0f b6 d0             	movzx  edx,al
c00159e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159e9:	8a 00                	mov    al,BYTE PTR [eax]
c00159eb:	0f b6 c0             	movzx  eax,al
c00159ee:	83 ec 0c             	sub    esp,0xc
c00159f1:	53                   	push   ebx
c00159f2:	51                   	push   ecx
c00159f3:	52                   	push   edx
c00159f4:	50                   	push   eax
c00159f5:	68 4c b2 02 c0       	push   0xc002b24c
c00159fa:	e8 37 d6 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00159ff:	83 c4 20             	add    esp,0x20
c0015a02:	83 ec 0c             	sub    esp,0xc
c0015a05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015a08:	e8 9f f4 ff ff       	call   c0014eac <displayDebugInfo(regs*)>
c0015a0d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015a10:	5b                   	pop    ebx
c0015a11:	5e                   	pop    esi
c0015a12:	5d                   	pop    ebp
c0015a13:	c3                   	ret    

c0015a14 <displayProgramFault(char const*)>:
c0015a14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a19:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a1c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a22:	85 c0                	test   eax,eax
c0015a24:	74 15                	je     c0015a3b <displayProgramFault(char const*)+0x27>
c0015a26:	83 ec 0c             	sub    esp,0xc
c0015a29:	6a 04                	push   0x4
c0015a2b:	6a 0f                	push   0xf
c0015a2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a31:	50                   	push   eax
c0015a32:	e8 3f b4 ff ff       	call   c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015a37:	83 c4 1c             	add    esp,0x1c
c0015a3a:	c3                   	ret    
c0015a3b:	c3                   	ret    

c0015a3c <setupInterruptController()>:
c0015a3c:	55                   	push   ebp
c0015a3d:	89 e5                	mov    ebp,esp
c0015a3f:	53                   	push   ebx
c0015a40:	83 ec 24             	sub    esp,0x24
c0015a43:	b8 00 00 00 00       	mov    eax,0x0
c0015a48:	85 c0                	test   eax,eax
c0015a4a:	0f 95 c0             	setne  al
c0015a4d:	84 c0                	test   al,al
c0015a4f:	74 5b                	je     c0015aac <setupInterruptController()+0x70>
c0015a51:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015a58:	83 ec 0c             	sub    esp,0xc
c0015a5b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015a5e:	e8 dd 9d ff ff       	call   c000f840 <malloc>
c0015a63:	83 c4 10             	add    esp,0x10
c0015a66:	89 c3                	mov    ebx,eax
c0015a68:	83 ec 0c             	sub    esp,0xc
c0015a6b:	53                   	push   ebx
c0015a6c:	e8 a9 ff 00 00       	call   c0025a1a <APIC::APIC()>
c0015a71:	83 c4 10             	add    esp,0x10
c0015a74:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a77:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7f:	83 c0 08             	add    eax,0x8
c0015a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a84:	6a 00                	push   0x0
c0015a86:	6a 00                	push   0x0
c0015a88:	6a 00                	push   0x0
c0015a8a:	52                   	push   edx
c0015a8b:	ff d0                	call   eax
c0015a8d:	83 c4 10             	add    esp,0x10
c0015a90:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0015a95:	83 ec 08             	sub    esp,0x8
c0015a98:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a9b:	50                   	push   eax
c0015a9c:	e8 bb e9 ff ff       	call   c001445c <Device::addChild(Device*)>
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015aa7:	e9 52 03 00 00       	jmp    c0015dfe <setupInterruptController()+0x3c2>
c0015aac:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0015ab1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015ab7:	83 e0 01             	and    eax,0x1
c0015aba:	84 c0                	test   al,al
c0015abc:	0f 95 c0             	setne  al
c0015abf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015ac2:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015ac9:	83 ec 0c             	sub    esp,0xc
c0015acc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015acf:	e8 6c 9d ff ff       	call   c000f840 <malloc>
c0015ad4:	83 c4 10             	add    esp,0x10
c0015ad7:	89 c3                	mov    ebx,eax
c0015ad9:	83 ec 0c             	sub    esp,0xc
c0015adc:	53                   	push   ebx
c0015add:	e8 90 04 01 00       	call   c0025f72 <PIC::PIC()>
c0015ae2:	83 c4 10             	add    esp,0x10
c0015ae5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015ae8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015aeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af0:	83 c0 08             	add    eax,0x8
c0015af3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af5:	6a 00                	push   0x0
c0015af7:	6a 00                	push   0x0
c0015af9:	6a 00                	push   0x0
c0015afb:	52                   	push   edx
c0015afc:	ff d0                	call   eax
c0015afe:	83 c4 10             	add    esp,0x10
c0015b01:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015b05:	74 73                	je     c0015b7a <setupInterruptController()+0x13e>
c0015b07:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0f:	83 c0 0c             	add    eax,0xc
c0015b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b14:	6a 00                	push   0x0
c0015b16:	6a 00                	push   0x0
c0015b18:	6a 00                	push   0x0
c0015b1a:	52                   	push   edx
c0015b1b:	ff d0                	call   eax
c0015b1d:	83 c4 10             	add    esp,0x10
c0015b20:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015b24:	74 15                	je     c0015b3b <setupInterruptController()+0xff>
c0015b26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2b:	83 c0 04             	add    eax,0x4
c0015b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b30:	83 ec 0c             	sub    esp,0xc
c0015b33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b36:	ff d0                	call   eax
c0015b38:	83 c4 10             	add    esp,0x10
c0015b3b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015b42:	83 ec 0c             	sub    esp,0xc
c0015b45:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015b48:	e8 f3 9c ff ff       	call   c000f840 <malloc>
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	89 c3                	mov    ebx,eax
c0015b52:	83 ec 0c             	sub    esp,0xc
c0015b55:	53                   	push   ebx
c0015b56:	e8 bf fe 00 00       	call   c0025a1a <APIC::APIC()>
c0015b5b:	83 c4 10             	add    esp,0x10
c0015b5e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015b61:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b69:	83 c0 08             	add    eax,0x8
c0015b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6e:	6a 00                	push   0x0
c0015b70:	6a 00                	push   0x0
c0015b72:	6a 00                	push   0x0
c0015b74:	52                   	push   edx
c0015b75:	ff d0                	call   eax
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0015b7f:	83 ec 08             	sub    esp,0x8
c0015b82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b85:	50                   	push   eax
c0015b86:	e8 d1 e8 ff ff       	call   c001445c <Device::addChild(Device*)>
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b93:	83 c0 24             	add    eax,0x24
c0015b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b98:	6a 00                	push   0x0
c0015b9a:	68 ef 53 01 c0       	push   0xc00153ef
c0015b9f:	6a 00                	push   0x0
c0015ba1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba4:	ff d0                	call   eax
c0015ba6:	83 c4 10             	add    esp,0x10
c0015ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bae:	83 c0 24             	add    eax,0x24
c0015bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb3:	6a 00                	push   0x0
c0015bb5:	68 ef 53 01 c0       	push   0xc00153ef
c0015bba:	6a 01                	push   0x1
c0015bbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbf:	ff d0                	call   eax
c0015bc1:	83 c4 10             	add    esp,0x10
c0015bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc9:	83 c0 24             	add    eax,0x24
c0015bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bce:	6a 00                	push   0x0
c0015bd0:	68 09 4d 01 c0       	push   0xc0014d09
c0015bd5:	6a 02                	push   0x2
c0015bd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bda:	ff d0                	call   eax
c0015bdc:	83 c4 10             	add    esp,0x10
c0015bdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be4:	83 c0 24             	add    eax,0x24
c0015be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be9:	6a 00                	push   0x0
c0015beb:	68 ef 53 01 c0       	push   0xc00153ef
c0015bf0:	6a 03                	push   0x3
c0015bf2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf5:	ff d0                	call   eax
c0015bf7:	83 c4 10             	add    esp,0x10
c0015bfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bff:	83 c0 24             	add    eax,0x24
c0015c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c04:	6a 00                	push   0x0
c0015c06:	68 ef 53 01 c0       	push   0xc00153ef
c0015c0b:	6a 04                	push   0x4
c0015c0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c10:	ff d0                	call   eax
c0015c12:	83 c4 10             	add    esp,0x10
c0015c15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1a:	83 c0 24             	add    eax,0x24
c0015c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1f:	6a 00                	push   0x0
c0015c21:	68 ef 53 01 c0       	push   0xc00153ef
c0015c26:	6a 05                	push   0x5
c0015c28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2b:	ff d0                	call   eax
c0015c2d:	83 c4 10             	add    esp,0x10
c0015c30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c35:	83 c0 24             	add    eax,0x24
c0015c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3a:	6a 00                	push   0x0
c0015c3c:	68 0e 54 01 c0       	push   0xc001540e
c0015c41:	6a 06                	push   0x6
c0015c43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c46:	ff d0                	call   eax
c0015c48:	83 c4 10             	add    esp,0x10
c0015c4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c50:	83 c0 24             	add    eax,0x24
c0015c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c55:	6a 00                	push   0x0
c0015c57:	68 3b 53 01 c0       	push   0xc001533b
c0015c5c:	6a 07                	push   0x7
c0015c5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c61:	ff d0                	call   eax
c0015c63:	83 c4 10             	add    esp,0x10
c0015c66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6b:	83 c0 24             	add    eax,0x24
c0015c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c70:	6a 00                	push   0x0
c0015c72:	68 24 4b 01 c0       	push   0xc0014b24
c0015c77:	6a 08                	push   0x8
c0015c79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7c:	ff d0                	call   eax
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c86:	83 c0 24             	add    eax,0x24
c0015c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8b:	6a 00                	push   0x0
c0015c8d:	68 ef 53 01 c0       	push   0xc00153ef
c0015c92:	6a 09                	push   0x9
c0015c94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c97:	ff d0                	call   eax
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca1:	83 c0 24             	add    eax,0x24
c0015ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca6:	6a 00                	push   0x0
c0015ca8:	68 ef 53 01 c0       	push   0xc00153ef
c0015cad:	6a 0a                	push   0xa
c0015caf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb2:	ff d0                	call   eax
c0015cb4:	83 c4 10             	add    esp,0x10
c0015cb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbc:	83 c0 24             	add    eax,0x24
c0015cbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc1:	6a 00                	push   0x0
c0015cc3:	68 ef 53 01 c0       	push   0xc00153ef
c0015cc8:	6a 0b                	push   0xb
c0015cca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ccd:	ff d0                	call   eax
c0015ccf:	83 c4 10             	add    esp,0x10
c0015cd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd7:	83 c0 24             	add    eax,0x24
c0015cda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdc:	6a 00                	push   0x0
c0015cde:	68 ef 53 01 c0       	push   0xc00153ef
c0015ce3:	6a 0c                	push   0xc
c0015ce5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce8:	ff d0                	call   eax
c0015cea:	83 c4 10             	add    esp,0x10
c0015ced:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf2:	83 c0 24             	add    eax,0x24
c0015cf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf7:	6a 00                	push   0x0
c0015cf9:	68 6a 53 01 c0       	push   0xc001536a
c0015cfe:	6a 0d                	push   0xd
c0015d00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d03:	ff d0                	call   eax
c0015d05:	83 c4 10             	add    esp,0x10
c0015d08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0d:	83 c0 24             	add    eax,0x24
c0015d10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d12:	6a 00                	push   0x0
c0015d14:	68 a3 53 01 c0       	push   0xc00153a3
c0015d19:	6a 0e                	push   0xe
c0015d1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d1e:	ff d0                	call   eax
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d28:	83 c0 24             	add    eax,0x24
c0015d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2d:	6a 00                	push   0x0
c0015d2f:	68 ef 53 01 c0       	push   0xc00153ef
c0015d34:	6a 0f                	push   0xf
c0015d36:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d39:	ff d0                	call   eax
c0015d3b:	83 c4 10             	add    esp,0x10
c0015d3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d43:	83 c0 24             	add    eax,0x24
c0015d46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d48:	6a 00                	push   0x0
c0015d4a:	68 ef 53 01 c0       	push   0xc00153ef
c0015d4f:	6a 10                	push   0x10
c0015d51:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d54:	ff d0                	call   eax
c0015d56:	83 c4 10             	add    esp,0x10
c0015d59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d5e:	83 c0 24             	add    eax,0x24
c0015d61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d63:	6a 00                	push   0x0
c0015d65:	68 ef 53 01 c0       	push   0xc00153ef
c0015d6a:	6a 11                	push   0x11
c0015d6c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d6f:	ff d0                	call   eax
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d79:	83 c0 24             	add    eax,0x24
c0015d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d7e:	6a 00                	push   0x0
c0015d80:	68 ef 53 01 c0       	push   0xc00153ef
c0015d85:	6a 12                	push   0x12
c0015d87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d8a:	ff d0                	call   eax
c0015d8c:	83 c4 10             	add    esp,0x10
c0015d8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d94:	83 c0 24             	add    eax,0x24
c0015d97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d99:	6a 00                	push   0x0
c0015d9b:	68 ef 53 01 c0       	push   0xc00153ef
c0015da0:	6a 13                	push   0x13
c0015da2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015da5:	ff d0                	call   eax
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015daf:	83 c0 24             	add    eax,0x24
c0015db2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015db4:	6a 00                	push   0x0
c0015db6:	68 ef 53 01 c0       	push   0xc00153ef
c0015dbb:	6a 14                	push   0x14
c0015dbd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015dc0:	ff d0                	call   eax
c0015dc2:	83 c4 10             	add    esp,0x10
c0015dc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dca:	83 c0 24             	add    eax,0x24
c0015dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dcf:	6a 00                	push   0x0
c0015dd1:	68 ef 53 01 c0       	push   0xc00153ef
c0015dd6:	6a 1e                	push   0x1e
c0015dd8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ddb:	ff d0                	call   eax
c0015ddd:	83 c4 10             	add    esp,0x10
c0015de0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015de5:	83 c0 24             	add    eax,0x24
c0015de8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dea:	6a 00                	push   0x0
c0015dec:	68 71 c8 01 c0       	push   0xc001c871
c0015df1:	6a 60                	push   0x60
c0015df3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015df6:	ff d0                	call   eax
c0015df8:	83 c4 10             	add    esp,0x10
c0015dfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dfe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e01:	c9                   	leave  
c0015e02:	c3                   	ret    
c0015e03:	90                   	nop

c0015e04 <InterruptController::convertLegacyIRQNumber(int)>:
c0015e04:	55                   	push   ebp
c0015e05:	89 e5                	mov    ebp,esp
c0015e07:	83 ec 08             	sub    esp,0x8
c0015e0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0d:	83 ec 0c             	sub    esp,0xc
c0015e10:	50                   	push   eax
c0015e11:	e8 32 e9 ff ff       	call   c0014748 <Device::getName()>
c0015e16:	83 c4 10             	add    esp,0x10
c0015e19:	8a 00                	mov    al,BYTE PTR [eax]
c0015e1b:	3c 41                	cmp    al,0x41
c0015e1d:	0f 94 c0             	sete   al
c0015e20:	84 c0                	test   al,al
c0015e22:	74 28                	je     c0015e4c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015e24:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015e28:	7f 12                	jg     c0015e3c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015e2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e2d:	05 e0 d7 02 c0       	add    eax,0xc002d7e0
c0015e32:	8a 00                	mov    al,BYTE PTR [eax]
c0015e34:	0f b6 c0             	movzx  eax,al
c0015e37:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015e3a:	eb 10                	jmp    c0015e4c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	68 60 af 02 c0       	push   0xc002af60
c0015e44:	e8 9e 48 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e4f:	c9                   	leave  
c0015e50:	c3                   	ret    
c0015e51:	90                   	nop

c0015e52 <startGUI(void*)>:
c0015e52:	55                   	push   ebp
c0015e53:	89 e5                	mov    ebp,esp
c0015e55:	53                   	push   ebx
c0015e56:	83 ec 04             	sub    esp,0x4
c0015e59:	e8 66 80 00 00       	call   c001dec4 <unlockScheduler()>
c0015e5e:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0015e64:	83 ec 08             	sub    esp,0x8
c0015e67:	6a 01                	push   0x1
c0015e69:	68 bc b2 02 c0       	push   0xc002b2bc
c0015e6e:	e8 a7 79 00 00       	call   c001d81a <Thr::loadDLL(char const*, bool)>
c0015e73:	83 c4 10             	add    esp,0x10
c0015e76:	83 ec 08             	sub    esp,0x8
c0015e79:	53                   	push   ebx
c0015e7a:	50                   	push   eax
c0015e7b:	e8 ce 7b 00 00       	call   c001da4e <Thr::executeDLL(unsigned long, void*)>
c0015e80:	83 c4 10             	add    esp,0x10
c0015e83:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0015e89:	83 ec 08             	sub    esp,0x8
c0015e8c:	6a 01                	push   0x1
c0015e8e:	68 d6 b2 02 c0       	push   0xc002b2d6
c0015e93:	e8 82 79 00 00       	call   c001d81a <Thr::loadDLL(char const*, bool)>
c0015e98:	83 c4 10             	add    esp,0x10
c0015e9b:	83 ec 08             	sub    esp,0x8
c0015e9e:	53                   	push   ebx
c0015e9f:	50                   	push   eax
c0015ea0:	e8 a9 7b 00 00       	call   c001da4e <Thr::executeDLL(unsigned long, void*)>
c0015ea5:	83 c4 10             	add    esp,0x10
c0015ea8:	90                   	nop
c0015ea9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015eac:	c9                   	leave  
c0015ead:	c3                   	ret    

c0015eae <startGUIVESA(void*)>:
c0015eae:	55                   	push   ebp
c0015eaf:	89 e5                	mov    ebp,esp
c0015eb1:	53                   	push   ebx
c0015eb2:	83 ec 04             	sub    esp,0x4
c0015eb5:	e8 0a 80 00 00       	call   c001dec4 <unlockScheduler()>
c0015eba:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0015ec0:	83 ec 08             	sub    esp,0x8
c0015ec3:	6a 01                	push   0x1
c0015ec5:	68 f0 b2 02 c0       	push   0xc002b2f0
c0015eca:	e8 4b 79 00 00       	call   c001d81a <Thr::loadDLL(char const*, bool)>
c0015ecf:	83 c4 10             	add    esp,0x10
c0015ed2:	83 ec 08             	sub    esp,0x8
c0015ed5:	53                   	push   ebx
c0015ed6:	50                   	push   eax
c0015ed7:	e8 72 7b 00 00       	call   c001da4e <Thr::executeDLL(unsigned long, void*)>
c0015edc:	83 c4 10             	add    esp,0x10
c0015edf:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0015ee5:	83 ec 08             	sub    esp,0x8
c0015ee8:	6a 01                	push   0x1
c0015eea:	68 d6 b2 02 c0       	push   0xc002b2d6
c0015eef:	e8 26 79 00 00       	call   c001d81a <Thr::loadDLL(char const*, bool)>
c0015ef4:	83 c4 10             	add    esp,0x10
c0015ef7:	83 ec 08             	sub    esp,0x8
c0015efa:	53                   	push   ebx
c0015efb:	50                   	push   eax
c0015efc:	e8 4d 7b 00 00       	call   c001da4e <Thr::executeDLL(unsigned long, void*)>
c0015f01:	83 c4 10             	add    esp,0x10
c0015f04:	90                   	nop
c0015f05:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015f08:	c9                   	leave  
c0015f09:	c3                   	ret    

c0015f0a <sendKeyToTerminal(unsigned char)>:
c0015f0a:	55                   	push   ebp
c0015f0b:	89 e5                	mov    ebp,esp
c0015f0d:	83 ec 28             	sub    esp,0x28
c0015f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f13:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015f16:	a1 64 e6 02 c0       	mov    eax,ds:0xc002e664
c0015f1b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015f1f:	83 ec 08             	sub    esp,0x8
c0015f22:	52                   	push   edx
c0015f23:	50                   	push   eax
c0015f24:	e8 89 b4 ff ff       	call   c00113b2 <VgaText::receiveKey(unsigned char)>
c0015f29:	83 c4 10             	add    esp,0x10
c0015f2c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015f30:	75 41                	jne    c0015f73 <sendKeyToTerminal(unsigned char)+0x69>
c0015f32:	e8 b2 7f 00 00       	call   c001dee9 <lockStuff()>
c0015f37:	a1 60 e7 02 c0       	mov    eax,ds:0xc002e760
c0015f3c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f3f:	c7 05 60 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e760,0x0
c0015f49:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015f4d:	74 1f                	je     c0015f6e <sendKeyToTerminal(unsigned char)+0x64>
c0015f4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f52:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f5b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f5e:	83 ec 0c             	sub    esp,0xc
c0015f61:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015f64:	e8 71 85 00 00       	call   c001e4da <unblockTask(ThreadControlBlock*)>
c0015f69:	83 c4 10             	add    esp,0x10
c0015f6c:	eb db                	jmp    c0015f49 <sendKeyToTerminal(unsigned char)+0x3f>
c0015f6e:	e8 10 83 00 00       	call   c001e283 <unlockStuff()>
c0015f73:	90                   	nop
c0015f74:	c9                   	leave  
c0015f75:	c3                   	ret    

c0015f76 <sendKeyboardToken(KeyboardToken)>:
c0015f76:	55                   	push   ebp
c0015f77:	89 e5                	mov    ebp,esp
c0015f79:	83 ec 18             	sub    esp,0x18
c0015f7c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f82:	0f b7 c0             	movzx  eax,ax
c0015f85:	83 f2 01             	xor    edx,0x1
c0015f88:	88 90 80 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1880],dl
c0015f8e:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0015f93:	85 c0                	test   eax,eax
c0015f95:	74 24                	je     c0015fbb <sendKeyboardToken(KeyboardToken)+0x45>
c0015f97:	8b 0d 68 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e768
c0015f9d:	83 ec 04             	sub    esp,0x4
c0015fa0:	68 80 e7 02 c0       	push   0xc002e780
c0015fa5:	83 ec 08             	sub    esp,0x8
c0015fa8:	89 e2                	mov    edx,esp
c0015faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fad:	89 02                	mov    DWORD PTR [edx],eax
c0015faf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015fb2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015fb6:	ff d1                	call   ecx
c0015fb8:	83 c4 10             	add    esp,0x10
c0015fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbe:	66 3d 03 02          	cmp    ax,0x203
c0015fc2:	75 07                	jne    c0015fcb <sendKeyboardToken(KeyboardToken)+0x55>
c0015fc4:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0015fc9:	84 c0                	test   al,al
c0015fcb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015fcf:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015fd2:	a0 88 eb 02 c0       	mov    al,ds:0xc002eb88
c0015fd7:	38 c2                	cmp    dl,al
c0015fd9:	74 1c                	je     c0015ff7 <sendKeyboardToken(KeyboardToken)+0x81>
c0015fdb:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015fde:	a2 88 eb 02 c0       	mov    ds:0xc002eb88,al
c0015fe3:	a0 88 eb 02 c0       	mov    al,ds:0xc002eb88
c0015fe8:	0f b6 c0             	movzx  eax,al
c0015feb:	83 ec 0c             	sub    esp,0xc
c0015fee:	50                   	push   eax
c0015fef:	e8 1e a6 ff ff       	call   c0010612 <setTerminalScrollLock(bool)>
c0015ff4:	83 c4 10             	add    esp,0x10
c0015ff7:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ffa:	84 c0                	test   al,al
c0015ffc:	0f 84 ae 00 00 00    	je     c00160b0 <sendKeyboardToken(KeyboardToken)+0x13a>
c0016002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016005:	66 3d 10 03          	cmp    ax,0x310
c0016009:	75 06                	jne    c0016011 <sendKeyboardToken(KeyboardToken)+0x9b>
c001600b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0016011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016014:	66 3d 11 03          	cmp    ax,0x311
c0016018:	75 06                	jne    c0016020 <sendKeyboardToken(KeyboardToken)+0xaa>
c001601a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0016020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016023:	66 3d 12 03          	cmp    ax,0x312
c0016027:	75 06                	jne    c001602f <sendKeyboardToken(KeyboardToken)+0xb9>
c0016029:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001602f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016032:	66 3d 13 03          	cmp    ax,0x313
c0016036:	75 06                	jne    c001603e <sendKeyboardToken(KeyboardToken)+0xc8>
c0016038:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001603e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016041:	66 3d 14 03          	cmp    ax,0x314
c0016045:	75 06                	jne    c001604d <sendKeyboardToken(KeyboardToken)+0xd7>
c0016047:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001604d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016050:	66 3d 15 03          	cmp    ax,0x315
c0016054:	75 06                	jne    c001605c <sendKeyboardToken(KeyboardToken)+0xe6>
c0016056:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001605c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605f:	66 3d 16 03          	cmp    ax,0x316
c0016063:	75 06                	jne    c001606b <sendKeyboardToken(KeyboardToken)+0xf5>
c0016065:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001606b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606e:	66 3d 17 03          	cmp    ax,0x317
c0016072:	75 06                	jne    c001607a <sendKeyboardToken(KeyboardToken)+0x104>
c0016074:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001607a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607d:	66 3d 18 03          	cmp    ax,0x318
c0016081:	75 06                	jne    c0016089 <sendKeyboardToken(KeyboardToken)+0x113>
c0016083:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608c:	66 3d 19 03          	cmp    ax,0x319
c0016090:	75 06                	jne    c0016098 <sendKeyboardToken(KeyboardToken)+0x122>
c0016092:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609b:	66 3d 1a 03          	cmp    ax,0x31a
c001609f:	0f 85 c9 00 00 00    	jne    c001616e <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160a5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00160ab:	e9 be 00 00 00       	jmp    c001616e <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b3:	66 3d 10 03          	cmp    ax,0x310
c00160b7:	75 0a                	jne    c00160c3 <sendKeyboardToken(KeyboardToken)+0x14d>
c00160b9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00160bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c6:	66 3d 11 03          	cmp    ax,0x311
c00160ca:	75 0a                	jne    c00160d6 <sendKeyboardToken(KeyboardToken)+0x160>
c00160cc:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00160d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d9:	66 3d 12 03          	cmp    ax,0x312
c00160dd:	75 0a                	jne    c00160e9 <sendKeyboardToken(KeyboardToken)+0x173>
c00160df:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00160e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ec:	66 3d 13 03          	cmp    ax,0x313
c00160f0:	75 0a                	jne    c00160fc <sendKeyboardToken(KeyboardToken)+0x186>
c00160f2:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ff:	66 3d 14 03          	cmp    ax,0x314
c0016103:	75 0a                	jne    c001610f <sendKeyboardToken(KeyboardToken)+0x199>
c0016105:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001610b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001610f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016112:	66 3d 15 03          	cmp    ax,0x315
c0016116:	75 0a                	jne    c0016122 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016118:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001611e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016125:	66 3d 16 03          	cmp    ax,0x316
c0016129:	75 0a                	jne    c0016135 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001612b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016131:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016138:	66 3d 17 03          	cmp    ax,0x317
c001613c:	75 0a                	jne    c0016148 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001613e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016144:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614b:	66 3d 18 03          	cmp    ax,0x318
c001614f:	75 0a                	jne    c001615b <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016151:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016157:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001615b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615e:	66 3d 19 03          	cmp    ax,0x319
c0016162:	75 0a                	jne    c001616e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016164:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001616a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001616e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016171:	66 3d 00 02          	cmp    ax,0x200
c0016175:	75 2c                	jne    c00161a3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016177:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c001617c:	83 f0 01             	xor    eax,0x1
c001617f:	84 c0                	test   al,al
c0016181:	74 20                	je     c00161a3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016183:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c0016188:	6a 01                	push   0x1
c001618a:	6a 00                	push   0x0
c001618c:	68 52 5e 01 c0       	push   0xc0015e52
c0016191:	50                   	push   eax
c0016192:	e8 5d 7e 00 00       	call   c001dff4 <Process::createThread(void (*)(void*), void*, int)>
c0016197:	83 c4 10             	add    esp,0x10
c001619a:	c6 05 80 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb80,0x1
c00161a1:	eb 33                	jmp    c00161d6 <sendKeyboardToken(KeyboardToken)+0x260>
c00161a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a6:	66 3d 01 02          	cmp    ax,0x201
c00161aa:	75 2a                	jne    c00161d6 <sendKeyboardToken(KeyboardToken)+0x260>
c00161ac:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c00161b1:	83 f0 01             	xor    eax,0x1
c00161b4:	84 c0                	test   al,al
c00161b6:	74 1e                	je     c00161d6 <sendKeyboardToken(KeyboardToken)+0x260>
c00161b8:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00161bd:	6a 01                	push   0x1
c00161bf:	6a 00                	push   0x0
c00161c1:	68 ae 5e 01 c0       	push   0xc0015eae
c00161c6:	50                   	push   eax
c00161c7:	e8 28 7e 00 00       	call   c001dff4 <Process::createThread(void (*)(void*), void*, int)>
c00161cc:	83 c4 10             	add    esp,0x10
c00161cf:	c6 05 80 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb80,0x1
c00161d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d9:	66 3d 1d 03          	cmp    ax,0x31d
c00161dd:	75 06                	jne    c00161e5 <sendKeyboardToken(KeyboardToken)+0x26f>
c00161df:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00161e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e8:	66 3d 1c 03          	cmp    ax,0x31c
c00161ec:	75 06                	jne    c00161f4 <sendKeyboardToken(KeyboardToken)+0x27e>
c00161ee:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f7:	66 3d 1b 03          	cmp    ax,0x31b
c00161fb:	75 06                	jne    c0016203 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161fd:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016206:	66 3d 1e 03          	cmp    ax,0x31e
c001620a:	75 06                	jne    c0016212 <sendKeyboardToken(KeyboardToken)+0x29c>
c001620c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016215:	66 3d 1f 03          	cmp    ax,0x31f
c0016219:	75 06                	jne    c0016221 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001621b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016224:	66 3d 1a 03          	cmp    ax,0x31a
c0016228:	75 06                	jne    c0016230 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001622a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016230:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016234:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016237:	83 f0 01             	xor    eax,0x1
c001623a:	84 c0                	test   al,al
c001623c:	74 77                	je     c00162b5 <sendKeyboardToken(KeyboardToken)+0x33f>
c001623e:	a0 81 e8 02 c0       	mov    al,ds:0xc002e881
c0016243:	84 c0                	test   al,al
c0016245:	74 41                	je     c0016288 <sendKeyboardToken(KeyboardToken)+0x312>
c0016247:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001624b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001624f:	74 2b                	je     c001627c <sendKeyboardToken(KeyboardToken)+0x306>
c0016251:	8b 15 84 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb84
c0016257:	89 d0                	mov    eax,edx
c0016259:	c1 e0 02             	shl    eax,0x2
c001625c:	01 d0                	add    eax,edx
c001625e:	01 c0                	add    eax,eax
c0016260:	a3 84 eb 02 c0       	mov    ds:0xc002eb84,eax
c0016265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016268:	0f b7 c0             	movzx  eax,ax
c001626b:	8d 50 d0             	lea    edx,[eax-0x30]
c001626e:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0016273:	01 d0                	add    eax,edx
c0016275:	a3 84 eb 02 c0       	mov    ds:0xc002eb84,eax
c001627a:	eb 6d                	jmp    c00162e9 <sendKeyboardToken(KeyboardToken)+0x373>
c001627c:	c7 05 84 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb84,0x0
c0016286:	eb 61                	jmp    c00162e9 <sendKeyboardToken(KeyboardToken)+0x373>
c0016288:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c001628d:	85 c0                	test   eax,eax
c001628f:	74 18                	je     c00162a9 <sendKeyboardToken(KeyboardToken)+0x333>
c0016291:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c0016296:	0f b6 c0             	movzx  eax,al
c0016299:	83 ec 0c             	sub    esp,0xc
c001629c:	50                   	push   eax
c001629d:	e8 68 fc ff ff       	call   c0015f0a <sendKeyToTerminal(unsigned char)>
c00162a2:	83 c4 10             	add    esp,0x10
c00162a5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00162a9:	c7 05 84 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb84,0x0
c00162b3:	eb 34                	jmp    c00162e9 <sendKeyboardToken(KeyboardToken)+0x373>
c00162b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b8:	66 3d 01 01          	cmp    ax,0x101
c00162bc:	75 2b                	jne    c00162e9 <sendKeyboardToken(KeyboardToken)+0x373>
c00162be:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c00162c3:	85 c0                	test   eax,eax
c00162c5:	74 18                	je     c00162df <sendKeyboardToken(KeyboardToken)+0x369>
c00162c7:	a1 84 eb 02 c0       	mov    eax,ds:0xc002eb84
c00162cc:	0f b6 c0             	movzx  eax,al
c00162cf:	83 ec 0c             	sub    esp,0xc
c00162d2:	50                   	push   eax
c00162d3:	e8 32 fc ff ff       	call   c0015f0a <sendKeyToTerminal(unsigned char)>
c00162d8:	83 c4 10             	add    esp,0x10
c00162db:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00162df:	c7 05 84 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb84,0x0
c00162e9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162ec:	83 f0 01             	xor    eax,0x1
c00162ef:	84 c0                	test   al,al
c00162f1:	74 4c                	je     c001633f <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162f3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162f6:	83 f0 01             	xor    eax,0x1
c00162f9:	84 c0                	test   al,al
c00162fb:	74 42                	je     c001633f <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162fd:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0016302:	83 f0 01             	xor    eax,0x1
c0016305:	84 c0                	test   al,al
c0016307:	74 36                	je     c001633f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630c:	66 83 f8 1f          	cmp    ax,0x1f
c0016310:	76 09                	jbe    c001631b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016315:	66 83 f8 7e          	cmp    ax,0x7e
c0016319:	76 12                	jbe    c001632d <sendKeyboardToken(KeyboardToken)+0x3b7>
c001631b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631e:	66 83 f8 0a          	cmp    ax,0xa
c0016322:	74 09                	je     c001632d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016327:	66 83 f8 08          	cmp    ax,0x8
c001632b:	75 12                	jne    c001633f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001632d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016330:	0f b6 c0             	movzx  eax,al
c0016333:	83 ec 0c             	sub    esp,0xc
c0016336:	50                   	push   eax
c0016337:	e8 ce fb ff ff       	call   c0015f0a <sendKeyToTerminal(unsigned char)>
c001633c:	83 c4 10             	add    esp,0x10
c001633f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016342:	83 f0 01             	xor    eax,0x1
c0016345:	84 c0                	test   al,al
c0016347:	74 4f                	je     c0016398 <sendKeyboardToken(KeyboardToken)+0x422>
c0016349:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001634c:	83 f0 01             	xor    eax,0x1
c001634f:	84 c0                	test   al,al
c0016351:	74 45                	je     c0016398 <sendKeyboardToken(KeyboardToken)+0x422>
c0016353:	a0 80 e8 02 c0       	mov    al,ds:0xc002e880
c0016358:	84 c0                	test   al,al
c001635a:	74 3c                	je     c0016398 <sendKeyboardToken(KeyboardToken)+0x422>
c001635c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001635f:	66 83 f8 3f          	cmp    ax,0x3f
c0016363:	76 33                	jbe    c0016398 <sendKeyboardToken(KeyboardToken)+0x422>
c0016365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016368:	66 83 f8 7f          	cmp    ax,0x7f
c001636c:	77 2a                	ja     c0016398 <sendKeyboardToken(KeyboardToken)+0x422>
c001636e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016371:	88 c2                	mov    dl,al
c0016373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016376:	66 83 f8 5f          	cmp    ax,0x5f
c001637a:	76 04                	jbe    c0016380 <sendKeyboardToken(KeyboardToken)+0x40a>
c001637c:	b0 20                	mov    al,0x20
c001637e:	eb 02                	jmp    c0016382 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016380:	b0 00                	mov    al,0x0
c0016382:	29 c2                	sub    edx,eax
c0016384:	88 d0                	mov    al,dl
c0016386:	83 e8 40             	sub    eax,0x40
c0016389:	0f b6 c0             	movzx  eax,al
c001638c:	83 ec 0c             	sub    esp,0xc
c001638f:	50                   	push   eax
c0016390:	e8 75 fb ff ff       	call   c0015f0a <sendKeyToTerminal(unsigned char)>
c0016395:	83 c4 10             	add    esp,0x10
c0016398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001639b:	66 3d 00 03          	cmp    ax,0x300
c001639f:	75 0f                	jne    c00163b0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00163a1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00163a4:	83 f0 01             	xor    eax,0x1
c00163a7:	84 c0                	test   al,al
c00163a9:	74 05                	je     c00163b0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00163ab:	e8 97 aa ff ff       	call   c0010e47 <doTerminalCycle()>
c00163b0:	90                   	nop
c00163b1:	c9                   	leave  
c00163b2:	c3                   	ret    

c00163b3 <clearInternalKeybuffer(VgaText*)>:
c00163b3:	55                   	push   ebp
c00163b4:	89 e5                	mov    ebp,esp
c00163b6:	83 ec 08             	sub    esp,0x8
c00163b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163bc:	05 34 11 00 00       	add    eax,0x1134
c00163c1:	83 ec 0c             	sub    esp,0xc
c00163c4:	50                   	push   eax
c00163c5:	e8 ca a3 fe ff       	call   c0000794 <strlen>
c00163ca:	83 c4 10             	add    esp,0x10
c00163cd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163d0:	81 c2 34 11 00 00    	add    edx,0x1134
c00163d6:	83 ec 04             	sub    esp,0x4
c00163d9:	50                   	push   eax
c00163da:	6a 00                	push   0x0
c00163dc:	52                   	push   edx
c00163dd:	e8 96 a3 fe ff       	call   c0000778 <memset>
c00163e2:	83 c4 10             	add    esp,0x10
c00163e5:	90                   	nop
c00163e6:	c9                   	leave  
c00163e7:	c3                   	ret    

c00163e8 <readKeyboard(VgaText*, char*, unsigned long)>:
c00163e8:	55                   	push   ebp
c00163e9:	89 e5                	mov    ebp,esp
c00163eb:	83 ec 18             	sub    esp,0x18
c00163ee:	fb                   	sti    
c00163ef:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163fa:	0f 84 8a 00 00 00    	je     c001648a <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016403:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016409:	84 c0                	test   al,al
c001640b:	75 11                	jne    c001641e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001640d:	e8 b0 7a 00 00       	call   c001dec2 <lockScheduler()>
c0016412:	e8 e7 7d 00 00       	call   c001e1fe <schedule()>
c0016417:	e8 a8 7a 00 00       	call   c001dec4 <unlockScheduler()>
c001641c:	eb e2                	jmp    c0016400 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001641e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016421:	8d 50 01             	lea    edx,[eax+0x1]
c0016424:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016427:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001642a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016430:	88 10                	mov    BYTE PTR [eax],dl
c0016432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016435:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001643b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001643e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016441:	05 34 11 00 00       	add    eax,0x1134
c0016446:	83 ec 0c             	sub    esp,0xc
c0016449:	50                   	push   eax
c001644a:	e8 45 a3 fe ff       	call   c0000794 <strlen>
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016455:	81 c2 34 11 00 00    	add    edx,0x1134
c001645b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001645e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016461:	81 c2 34 11 00 00    	add    edx,0x1134
c0016467:	83 ec 04             	sub    esp,0x4
c001646a:	50                   	push   eax
c001646b:	51                   	push   ecx
c001646c:	52                   	push   edx
c001646d:	e8 0a a2 fe ff       	call   c000067c <memmove>
c0016472:	83 c4 10             	add    esp,0x10
c0016475:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016478:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001647b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001647f:	0f 85 71 ff ff ff    	jne    c00163f6 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016485:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016488:	eb 03                	jmp    c001648d <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001648a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001648d:	c9                   	leave  
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <Keyboard::Keyboard(char const*)>:
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016497:	83 ec 08             	sub    esp,0x8
c001649a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649e:	50                   	push   eax
c001649f:	e8 a8 e1 ff ff       	call   c001464c <Device::Device(char const*)>
c00164a4:	83 c4 10             	add    esp,0x10
c00164a7:	ba 14 b3 02 c0       	mov    edx,0xc002b314
c00164ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b0:	89 10                	mov    DWORD PTR [eax],edx
c00164b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00164c0:	c6 05 64 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e764,0x1
c00164c7:	90                   	nop
c00164c8:	83 c4 0c             	add    esp,0xc
c00164cb:	c3                   	ret    

c00164cc <Keyboard::~Keyboard()>:
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	ba 14 b3 02 c0       	mov    edx,0xc002b314
c00164d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d8:	89 10                	mov    DWORD PTR [eax],edx
c00164da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164de:	83 ec 0c             	sub    esp,0xc
c00164e1:	50                   	push   eax
c00164e2:	e8 47 de ff ff       	call   c001432e <Device::~Device()>
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	90                   	nop
c00164eb:	83 c4 0c             	add    esp,0xc
c00164ee:	c3                   	ret    
c00164ef:	90                   	nop

c00164f0 <Keyboard::~Keyboard()>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	83 ec 0c             	sub    esp,0xc
c00164f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164fa:	e8 cd ff ff ff       	call   c00164cc <Keyboard::~Keyboard()>
c00164ff:	83 c4 10             	add    esp,0x10
c0016502:	83 ec 08             	sub    esp,0x8
c0016505:	68 5c 01 00 00       	push   0x15c
c001650a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001650e:	e8 43 ca ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0016513:	83 c4 10             	add    esp,0x10
c0016516:	83 c4 0c             	add    esp,0xc
c0016519:	c3                   	ret    

c001651a <LogicalDisk::close(int, int, void*)>:
c001651a:	83 c8 ff             	or     eax,0xffffffff
c001651d:	c3                   	ret    

c001651e <LogicalDisk::~LogicalDisk()>:
c001651e:	83 ec 0c             	sub    esp,0xc
c0016521:	ba c4 b3 02 c0       	mov    edx,0xc002b3c4
c0016526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001652a:	89 10                	mov    DWORD PTR [eax],edx
c001652c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016530:	83 ec 0c             	sub    esp,0xc
c0016533:	50                   	push   eax
c0016534:	e8 f5 dd ff ff       	call   c001432e <Device::~Device()>
c0016539:	83 c4 10             	add    esp,0x10
c001653c:	90                   	nop
c001653d:	83 c4 0c             	add    esp,0xc
c0016540:	c3                   	ret    
c0016541:	90                   	nop

c0016542 <LogicalDisk::~LogicalDisk()>:
c0016542:	83 ec 0c             	sub    esp,0xc
c0016545:	83 ec 0c             	sub    esp,0xc
c0016548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001654c:	e8 cd ff ff ff       	call   c001651e <LogicalDisk::~LogicalDisk()>
c0016551:	83 c4 10             	add    esp,0x10
c0016554:	83 ec 08             	sub    esp,0x8
c0016557:	68 74 01 00 00       	push   0x174
c001655c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016560:	e8 f1 c9 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0016565:	83 c4 10             	add    esp,0x10
c0016568:	83 c4 0c             	add    esp,0xc
c001656b:	c3                   	ret    

c001656c <LogicalDisk::open(int, int, void*)>:
c001656c:	83 ec 18             	sub    esp,0x18
c001656f:	68 40 b3 02 c0       	push   0xc002b340
c0016574:	e8 6e 41 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c0016579:	83 c8 ff             	or     eax,0xffffffff
c001657c:	83 c4 1c             	add    esp,0x1c
c001657f:	c3                   	ret    

c0016580 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016580:	53                   	push   ebx
c0016581:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016589:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001658d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016593:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016599:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001659f:	77 10                	ja     c00165b1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00165a1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00165a7:	89 d3                	mov    ebx,edx
c00165a9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00165af:	72 05                	jb     c00165b6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00165b1:	83 c8 ff             	or     eax,0xffffffff
c00165b4:	89 c2                	mov    edx,eax
c00165b6:	5b                   	pop    ebx
c00165b7:	c3                   	ret    

c00165b8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00165b8:	56                   	push   esi
c00165b9:	83 c8 ff             	or     eax,0xffffffff
c00165bc:	53                   	push   ebx
c00165bd:	89 c2                	mov    edx,eax
c00165bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00165c3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00165c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165cb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165d1:	77 27                	ja     c00165fa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165d3:	89 d8                	mov    eax,ebx
c00165d5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00165db:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00165e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165e6:	89 c2                	mov    edx,eax
c00165e8:	73 10                	jae    c00165fa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165ea:	89 c8                	mov    eax,ecx
c00165ec:	89 da                	mov    edx,ebx
c00165ee:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165f4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165fa:	5b                   	pop    ebx
c00165fb:	5e                   	pop    esi
c00165fc:	c3                   	ret    
c00165fd:	90                   	nop

c00165fe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165fe:	83 ec 1c             	sub    esp,0x1c
c0016601:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016605:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016609:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001660d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016611:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016615:	89 04 24             	mov    DWORD PTR [esp],eax
c0016618:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001661c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016624:	83 ec 08             	sub    esp,0x8
c0016627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001662b:	50                   	push   eax
c001662c:	e8 1b e0 ff ff       	call   c001464c <Device::Device(char const*)>
c0016631:	83 c4 10             	add    esp,0x10
c0016634:	ba c4 b3 02 c0       	mov    edx,0xc002b3c4
c0016639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663d:	89 10                	mov    DWORD PTR [eax],edx
c001663f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016643:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001664a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016659:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016663:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016667:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001666b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001666f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016675:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001667b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001667f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016682:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016686:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001668c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001669a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00166a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166ae:	90                   	nop
c00166af:	83 c4 1c             	add    esp,0x1c
c00166b2:	c3                   	ret    
c00166b3:	90                   	nop

c00166b4 <LogicalDisk::assignDriveLetter()>:
c00166b4:	55                   	push   ebp
c00166b5:	57                   	push   edi
c00166b6:	56                   	push   esi
c00166b7:	53                   	push   ebx
c00166b8:	83 ec 14             	sub    esp,0x14
c00166bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166bf:	8b 3d a0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eba0
c00166c5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00166cb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00166cf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00166d5:	8b 3d a4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eba4
c00166db:	3c 01                	cmp    al,0x1
c00166dd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00166e1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00166e5:	19 c0                	sbb    eax,eax
c00166e7:	83 e0 02             	and    eax,0x2
c00166ea:	83 c0 41             	add    eax,0x41
c00166ed:	0f be e8             	movsx  ebp,al
c00166f0:	3c 43                	cmp    al,0x43
c00166f2:	75 10                	jne    c0016704 <LogicalDisk::assignDriveLetter()+0x50>
c00166f4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166fb:	75 5d                	jne    c001675a <LogicalDisk::assignDriveLetter()+0xa6>
c00166fd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016702:	75 56                	jne    c001675a <LogicalDisk::assignDriveLetter()+0xa6>
c0016704:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016707:	ba 01 00 00 00       	mov    edx,0x1
c001670c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016710:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016714:	d3 e2                	shl    edx,cl
c0016716:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001671a:	89 d7                	mov    edi,edx
c001671c:	89 d6                	mov    esi,edx
c001671e:	c1 ff 1f             	sar    edi,0x1f
c0016721:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016725:	21 f9                	and    ecx,edi
c0016727:	09 d1                	or     ecx,edx
c0016729:	75 2f                	jne    c001675a <LogicalDisk::assignDriveLetter()+0xa6>
c001672b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001672f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016733:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016739:	09 f2                	or     edx,esi
c001673b:	89 15 a0 eb 02 c0    	mov    DWORD PTR ds:0xc002eba0,edx
c0016741:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016745:	09 fa                	or     edx,edi
c0016747:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001674b:	89 15 a4 eb 02 c0    	mov    DWORD PTR ds:0xc002eba4,edx
c0016751:	89 1c bd c0 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1440],ebx
c0016758:	eb 08                	jmp    c0016762 <LogicalDisk::assignDriveLetter()+0xae>
c001675a:	45                   	inc    ebp
c001675b:	40                   	inc    eax
c001675c:	3c 5b                	cmp    al,0x5b
c001675e:	75 90                	jne    c00166f0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016760:	31 c0                	xor    eax,eax
c0016762:	83 c4 14             	add    esp,0x14
c0016765:	5b                   	pop    ebx
c0016766:	5e                   	pop    esi
c0016767:	5f                   	pop    edi
c0016768:	5d                   	pop    ebp
c0016769:	c3                   	ret    

c001676a <LogicalDisk::mount()>:
c001676a:	56                   	push   esi
c001676b:	53                   	push   ebx
c001676c:	51                   	push   ecx
c001676d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016771:	8b 1d 18 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e718
c0016777:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016781:	85 db                	test   ebx,ebx
c0016783:	74 50                	je     c00167d5 <LogicalDisk::mount()+0x6b>
c0016785:	e8 23 77 00 00       	call   c001dead <getIRQNestingLevel()>
c001678a:	52                   	push   edx
c001678b:	52                   	push   edx
c001678c:	50                   	push   eax
c001678d:	68 64 b3 02 c0       	push   0xc002b364
c0016792:	e8 9f c8 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0016797:	83 c4 0c             	add    esp,0xc
c001679a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00167a1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00167a3:	83 e8 41             	sub    eax,0x41
c00167a6:	50                   	push   eax
c00167a7:	56                   	push   esi
c00167a8:	53                   	push   ebx
c00167a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00167ac:	83 c4 10             	add    esp,0x10
c00167af:	84 c0                	test   al,al
c00167b1:	74 08                	je     c00167bb <LogicalDisk::mount()+0x51>
c00167b3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00167b9:	eb 1c                	jmp    c00167d7 <LogicalDisk::mount()+0x6d>
c00167bb:	e8 ed 76 00 00       	call   c001dead <getIRQNestingLevel()>
c00167c0:	51                   	push   ecx
c00167c1:	51                   	push   ecx
c00167c2:	50                   	push   eax
c00167c3:	68 7f b3 02 c0       	push   0xc002b37f
c00167c8:	e8 69 c8 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00167cd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00167d0:	83 c4 10             	add    esp,0x10
c00167d3:	eb ac                	jmp    c0016781 <LogicalDisk::mount()+0x17>
c00167d5:	31 c0                	xor    eax,eax
c00167d7:	5a                   	pop    edx
c00167d8:	5b                   	pop    ebx
c00167d9:	5e                   	pop    esi
c00167da:	c3                   	ret    
c00167db:	90                   	nop

c00167dc <LogicalDisk::unmount()>:
c00167dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167e0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167ea:	c3                   	ret    
c00167eb:	90                   	nop

c00167ec <LogicalDisk::eject()>:
c00167ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00167f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167fc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167ff:	90                   	nop

c0016800 <LogicalDisk::unassignDriveLetter()>:
c0016800:	57                   	push   edi
c0016801:	56                   	push   esi
c0016802:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016806:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001680d:	84 c9                	test   cl,cl
c001680f:	75 0f                	jne    c0016820 <LogicalDisk::unassignDriveLetter()+0x20>
c0016811:	c7 44 24 0c 9a b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b39a
c0016819:	5e                   	pop    esi
c001681a:	5f                   	pop    edi
c001681b:	e9 c7 3e 00 00       	jmp    c001a6e7 <Krnl::panic(char const*)>
c0016820:	83 e9 41             	sub    ecx,0x41
c0016823:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001682a:	b8 01 00 00 00       	mov    eax,0x1
c001682f:	c7 04 8d c0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1440],0x0
c001683a:	d3 e0                	shl    eax,cl
c001683c:	89 c7                	mov    edi,eax
c001683e:	f7 d0                	not    eax
c0016840:	c1 ff 1f             	sar    edi,0x1f
c0016843:	21 05 a0 eb 02 c0    	and    DWORD PTR ds:0xc002eba0,eax
c0016849:	89 fe                	mov    esi,edi
c001684b:	f7 d6                	not    esi
c001684d:	21 35 a4 eb 02 c0    	and    DWORD PTR ds:0xc002eba4,esi
c0016853:	5e                   	pop    esi
c0016854:	5f                   	pop    edi
c0016855:	c3                   	ret    

c0016856 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016856:	57                   	push   edi
c0016857:	56                   	push   esi
c0016858:	53                   	push   ebx
c0016859:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001685d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016861:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016865:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016869:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001686f:	77 41                	ja     c00168b2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016871:	99                   	cdq    
c0016872:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016878:	01 c8                	add    eax,ecx
c001687a:	11 da                	adc    edx,ebx
c001687c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016882:	19 d7                	sbb    edi,edx
c0016884:	72 33                	jb     c00168b9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016886:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001688c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016892:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016896:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001689a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168a0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168aa:	5b                   	pop    ebx
c00168ab:	5e                   	pop    esi
c00168ac:	5f                   	pop    edi
c00168ad:	e9 b0 0a 00 00       	jmp    c0017362 <VCache::read(unsigned long long, int, void*)>
c00168b2:	b8 05 00 00 00       	mov    eax,0x5
c00168b7:	eb 05                	jmp    c00168be <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00168b9:	b8 07 00 00 00       	mov    eax,0x7
c00168be:	5b                   	pop    ebx
c00168bf:	5e                   	pop    esi
c00168c0:	5f                   	pop    edi
c00168c1:	c3                   	ret    

c00168c2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00168c2:	57                   	push   edi
c00168c3:	56                   	push   esi
c00168c4:	53                   	push   ebx
c00168c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00168c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00168d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168d5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00168db:	77 41                	ja     c001691e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00168dd:	99                   	cdq    
c00168de:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00168e4:	01 c8                	add    eax,ecx
c00168e6:	11 da                	adc    edx,ebx
c00168e8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168ee:	19 d7                	sbb    edi,edx
c00168f0:	72 33                	jb     c0016925 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168f2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168f8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016902:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016906:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001690c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016912:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016916:	5b                   	pop    ebx
c0016917:	5e                   	pop    esi
c0016918:	5f                   	pop    edi
c0016919:	e9 4e 09 00 00       	jmp    c001726c <VCache::write(unsigned long long, int, void*)>
c001691e:	b8 05 00 00 00       	mov    eax,0x5
c0016923:	eb 05                	jmp    c001692a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016925:	b8 07 00 00 00       	mov    eax,0x7
c001692a:	5b                   	pop    ebx
c001692b:	5e                   	pop    esi
c001692c:	5f                   	pop    edi
c001692d:	c3                   	ret    

c001692e <Mouse::Mouse(char const*)>:
c001692e:	83 ec 0c             	sub    esp,0xc
c0016931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016935:	83 ec 08             	sub    esp,0x8
c0016938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001693c:	50                   	push   eax
c001693d:	e8 0a dd ff ff       	call   c001464c <Device::Device(char const*)>
c0016942:	83 c4 10             	add    esp,0x10
c0016945:	ba f0 b3 02 c0       	mov    edx,0xc002b3f0
c001694a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001694e:	89 10                	mov    DWORD PTR [eax],edx
c0016950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016954:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001695e:	90                   	nop
c001695f:	83 c4 0c             	add    esp,0xc
c0016962:	c3                   	ret    
c0016963:	90                   	nop

c0016964 <Mouse::~Mouse()>:
c0016964:	83 ec 0c             	sub    esp,0xc
c0016967:	ba f0 b3 02 c0       	mov    edx,0xc002b3f0
c001696c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016970:	89 10                	mov    DWORD PTR [eax],edx
c0016972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016976:	83 ec 0c             	sub    esp,0xc
c0016979:	50                   	push   eax
c001697a:	e8 af d9 ff ff       	call   c001432e <Device::~Device()>
c001697f:	83 c4 10             	add    esp,0x10
c0016982:	90                   	nop
c0016983:	83 c4 0c             	add    esp,0xc
c0016986:	c3                   	ret    
c0016987:	90                   	nop

c0016988 <Mouse::~Mouse()>:
c0016988:	83 ec 0c             	sub    esp,0xc
c001698b:	83 ec 0c             	sub    esp,0xc
c001698e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016992:	e8 cd ff ff ff       	call   c0016964 <Mouse::~Mouse()>
c0016997:	83 c4 10             	add    esp,0x10
c001699a:	83 ec 08             	sub    esp,0x8
c001699d:	68 58 01 00 00       	push   0x158
c00169a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169a6:	e8 ab c5 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	83 c4 0c             	add    esp,0xc
c00169b1:	c3                   	ret    

c00169b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00169b2:	55                   	push   ebp
c00169b3:	57                   	push   edi
c00169b4:	56                   	push   esi
c00169b5:	53                   	push   ebx
c00169b6:	81 ec 28 01 00 00    	sub    esp,0x128
c00169bc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00169c3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00169ca:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00169d1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00169d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169dc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00169e0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169e7:	e8 5c dd ff ff       	call   c0014748 <Device::getName()>
c00169ec:	5a                   	pop    edx
c00169ed:	59                   	pop    ecx
c00169ee:	50                   	push   eax
c00169ef:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00169f3:	55                   	push   ebp
c00169f4:	e8 3b 9e fe ff       	call   c0000834 <strcpy>
c00169f9:	5b                   	pop    ebx
c00169fa:	58                   	pop    eax
c00169fb:	68 14 b4 02 c0       	push   0xc002b414
c0016a00:	55                   	push   ebp
c0016a01:	e8 6e 9f fe ff       	call   c0000974 <strcat>
c0016a06:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016a0d:	e8 2e 8e ff ff       	call   c000f840 <malloc>
c0016a12:	83 c4 0c             	add    esp,0xc
c0016a15:	89 c3                	mov    ebx,eax
c0016a17:	57                   	push   edi
c0016a18:	56                   	push   esi
c0016a19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a21:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016a28:	55                   	push   ebp
c0016a29:	50                   	push   eax
c0016a2a:	e8 cf fb ff ff       	call   c00165fe <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a2f:	83 c4 14             	add    esp,0x14
c0016a32:	53                   	push   ebx
c0016a33:	e8 7c fc ff ff       	call   c00166b4 <LogicalDisk::assignDriveLetter()>
c0016a38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a3b:	89 c6                	mov    esi,eax
c0016a3d:	e8 28 fd ff ff       	call   c001676a <LogicalDisk::mount()>
c0016a42:	58                   	pop    eax
c0016a43:	5a                   	pop    edx
c0016a44:	53                   	push   ebx
c0016a45:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a4c:	e8 0b da ff ff       	call   c001445c <Device::addChild(Device*)>
c0016a51:	59                   	pop    ecx
c0016a52:	89 f0                	mov    eax,esi
c0016a54:	5b                   	pop    ebx
c0016a55:	0f be f0             	movsx  esi,al
c0016a58:	56                   	push   esi
c0016a59:	68 1f b4 02 c0       	push   0xc002b41f
c0016a5e:	e8 d3 c5 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0016a63:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a69:	5b                   	pop    ebx
c0016a6a:	5e                   	pop    esi
c0016a6b:	5f                   	pop    edi
c0016a6c:	5d                   	pop    ebp
c0016a6d:	c3                   	ret    

c0016a6e <createPartitionsForDisk(PhysicalDisk*)>:
c0016a6e:	55                   	push   ebp
c0016a6f:	57                   	push   edi
c0016a70:	56                   	push   esi
c0016a71:	53                   	push   ebx
c0016a72:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a78:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a7f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a85:	3d 00 02 00 00       	cmp    eax,0x200
c0016a8a:	74 27                	je     c0016ab3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a8c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a92:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a98:	83 ec 10             	sub    esp,0x10
c0016a9b:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a9f:	99                   	cdq    
c0016aa0:	c1 e6 0a             	shl    esi,0xa
c0016aa3:	52                   	push   edx
c0016aa4:	89 fd                	mov    ebp,edi
c0016aa6:	50                   	push   eax
c0016aa7:	55                   	push   ebp
c0016aa8:	56                   	push   esi
c0016aa9:	e8 ee ff 00 00       	call   c0026a9c <__udivdi3>
c0016aae:	e9 b1 00 00 00       	jmp    c0016b64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ab3:	83 ec 0c             	sub    esp,0xc
c0016ab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ab8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016abc:	56                   	push   esi
c0016abd:	6a 01                	push   0x1
c0016abf:	6a 00                	push   0x0
c0016ac1:	6a 00                	push   0x0
c0016ac3:	53                   	push   ebx
c0016ac4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016ac7:	83 c4 20             	add    esp,0x20
c0016aca:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016ad2:	75 0a                	jne    c0016ade <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016ad4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016adc:	74 2c                	je     c0016b0a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016ade:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ae4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016aea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016af0:	83 ec 10             	sub    esp,0x10
c0016af3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016af7:	89 f7                	mov    edi,esi
c0016af9:	c1 e0 0a             	shl    eax,0xa
c0016afc:	c1 ff 1f             	sar    edi,0x1f
c0016aff:	57                   	push   edi
c0016b00:	56                   	push   esi
c0016b01:	52                   	push   edx
c0016b02:	50                   	push   eax
c0016b03:	e8 94 ff 00 00       	call   c0026a9c <__udivdi3>
c0016b08:	eb 5a                	jmp    c0016b64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016b0a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016b11:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016b18:	83 e1 7f             	and    ecx,0x7f
c0016b1b:	83 e0 7f             	and    eax,0x7f
c0016b1e:	01 c1                	add    ecx,eax
c0016b20:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016b27:	83 e0 7f             	and    eax,0x7f
c0016b2a:	01 c1                	add    ecx,eax
c0016b2c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016b33:	83 e0 7f             	and    eax,0x7f
c0016b36:	00 c1                	add    cl,al
c0016b38:	74 41                	je     c0016b7b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b3a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b40:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b46:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b4c:	83 ec 10             	sub    esp,0x10
c0016b4f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b53:	89 f7                	mov    edi,esi
c0016b55:	c1 e0 0a             	shl    eax,0xa
c0016b58:	c1 ff 1f             	sar    edi,0x1f
c0016b5b:	57                   	push   edi
c0016b5c:	56                   	push   esi
c0016b5d:	52                   	push   edx
c0016b5e:	50                   	push   eax
c0016b5f:	e8 38 ff 00 00       	call   c0026a9c <__udivdi3>
c0016b64:	83 c4 14             	add    esp,0x14
c0016b67:	52                   	push   edx
c0016b68:	50                   	push   eax
c0016b69:	6a 00                	push   0x0
c0016b6b:	6a 00                	push   0x0
c0016b6d:	53                   	push   ebx
c0016b6e:	e8 3f fe ff ff       	call   c00169b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b73:	83 c4 20             	add    esp,0x20
c0016b76:	e9 79 01 00 00       	jmp    c0016cf4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b7b:	89 f0                	mov    eax,esi
c0016b7d:	31 f6                	xor    esi,esi
c0016b7f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b86:	75 02                	jne    c0016b8a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b88:	89 f1                	mov    ecx,esi
c0016b8a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b91:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b98:	c1 e2 08             	shl    edx,0x8
c0016b9b:	c1 e7 10             	shl    edi,0x10
c0016b9e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ba6:	09 fa                	or     edx,edi
c0016ba8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016bb0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016bb7:	83 c0 10             	add    eax,0x10
c0016bba:	09 fa                	or     edx,edi
c0016bbc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016bc3:	c1 e7 18             	shl    edi,0x18
c0016bc6:	09 fa                	or     edx,edi
c0016bc8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016bcf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016bd3:	c1 e7 10             	shl    edi,0x10
c0016bd6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016bdd:	c1 e2 08             	shl    edx,0x8
c0016be0:	09 fa                	or     edx,edi
c0016be2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016be9:	09 fa                	or     edx,edi
c0016beb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016bf2:	c1 e7 18             	shl    edi,0x18
c0016bf5:	09 fa                	or     edx,edi
c0016bf7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016bfb:	46                   	inc    esi
c0016bfc:	83 fe 04             	cmp    esi,0x4
c0016bff:	0f 85 7a ff ff ff    	jne    c0016b7f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c09:	83 f0 01             	xor    eax,0x1
c0016c0c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016c10:	75 57                	jne    c0016c69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c16:	83 f0 01             	xor    eax,0x1
c0016c19:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016c1d:	75 4a                	jne    c0016c69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c1f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016c23:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c33:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c39:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c3f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c45:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c49:	89 f7                	mov    edi,esi
c0016c4b:	c1 e0 0a             	shl    eax,0xa
c0016c4e:	c1 ff 1f             	sar    edi,0x1f
c0016c51:	57                   	push   edi
c0016c52:	56                   	push   esi
c0016c53:	52                   	push   edx
c0016c54:	50                   	push   eax
c0016c55:	e8 42 fe 00 00       	call   c0026a9c <__udivdi3>
c0016c5a:	83 c4 10             	add    esp,0x10
c0016c5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c65:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c69:	84 c9                	test   cl,cl
c0016c6b:	74 53                	je     c0016cc0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c6d:	0f b6 c9             	movzx  ecx,cl
c0016c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c78:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c7c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c88:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c8c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ca0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016ca4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016ca8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016cac:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016cb0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016cb4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cb8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016cbc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016cc0:	31 ed                	xor    ebp,ebp
c0016cc2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016cc6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016cca:	89 f8                	mov    eax,edi
c0016ccc:	09 f0                	or     eax,esi
c0016cce:	74 1e                	je     c0016cee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cd0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016cd4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016cd8:	89 d1                	mov    ecx,edx
c0016cda:	09 c1                	or     ecx,eax
c0016cdc:	74 10                	je     c0016cee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cde:	83 ec 0c             	sub    esp,0xc
c0016ce1:	57                   	push   edi
c0016ce2:	56                   	push   esi
c0016ce3:	52                   	push   edx
c0016ce4:	50                   	push   eax
c0016ce5:	53                   	push   ebx
c0016ce6:	e8 c7 fc ff ff       	call   c00169b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ceb:	83 c4 20             	add    esp,0x20
c0016cee:	45                   	inc    ebp
c0016cef:	83 fd 04             	cmp    ebp,0x4
c0016cf2:	75 ce                	jne    c0016cc2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016cf4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016cfa:	5b                   	pop    ebx
c0016cfb:	5e                   	pop    esi
c0016cfc:	5f                   	pop    edi
c0016cfd:	5d                   	pop    ebp
c0016cfe:	c3                   	ret    
c0016cff:	90                   	nop

c0016d00 <Serial::Serial(char const*)>:
c0016d00:	83 ec 0c             	sub    esp,0xc
c0016d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d07:	83 ec 08             	sub    esp,0x8
c0016d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d0e:	50                   	push   eax
c0016d0f:	e8 38 d9 ff ff       	call   c001464c <Device::Device(char const*)>
c0016d14:	83 c4 10             	add    esp,0x10
c0016d17:	ba 4c b4 02 c0       	mov    edx,0xc002b44c
c0016d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d20:	89 10                	mov    DWORD PTR [eax],edx
c0016d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d26:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016d30:	90                   	nop
c0016d31:	83 c4 0c             	add    esp,0xc
c0016d34:	c3                   	ret    
c0016d35:	90                   	nop

c0016d36 <Serial::~Serial()>:
c0016d36:	83 ec 0c             	sub    esp,0xc
c0016d39:	ba 4c b4 02 c0       	mov    edx,0xc002b44c
c0016d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d42:	89 10                	mov    DWORD PTR [eax],edx
c0016d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d48:	83 ec 0c             	sub    esp,0xc
c0016d4b:	50                   	push   eax
c0016d4c:	e8 dd d5 ff ff       	call   c001432e <Device::~Device()>
c0016d51:	83 c4 10             	add    esp,0x10
c0016d54:	90                   	nop
c0016d55:	83 c4 0c             	add    esp,0xc
c0016d58:	c3                   	ret    
c0016d59:	90                   	nop

c0016d5a <Serial::~Serial()>:
c0016d5a:	83 ec 0c             	sub    esp,0xc
c0016d5d:	83 ec 0c             	sub    esp,0xc
c0016d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d64:	e8 cd ff ff ff       	call   c0016d36 <Serial::~Serial()>
c0016d69:	83 c4 10             	add    esp,0x10
c0016d6c:	83 ec 08             	sub    esp,0x8
c0016d6f:	68 58 01 00 00       	push   0x158
c0016d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d78:	e8 d9 c1 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	83 c4 0c             	add    esp,0xc
c0016d83:	c3                   	ret    

c0016d84 <Timer::Timer(char const*)>:
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d8b:	83 ec 08             	sub    esp,0x8
c0016d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d92:	50                   	push   eax
c0016d93:	e8 b4 d8 ff ff       	call   c001464c <Device::Device(char const*)>
c0016d98:	83 c4 10             	add    esp,0x10
c0016d9b:	ba 90 b4 02 c0       	mov    edx,0xc002b490
c0016da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da4:	89 10                	mov    DWORD PTR [eax],edx
c0016da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016daa:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016db4:	90                   	nop
c0016db5:	83 c4 0c             	add    esp,0xc
c0016db8:	c3                   	ret    
c0016db9:	90                   	nop

c0016dba <Timer::~Timer()>:
c0016dba:	83 ec 0c             	sub    esp,0xc
c0016dbd:	ba 90 b4 02 c0       	mov    edx,0xc002b490
c0016dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc6:	89 10                	mov    DWORD PTR [eax],edx
c0016dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	50                   	push   eax
c0016dd0:	e8 59 d5 ff ff       	call   c001432e <Device::~Device()>
c0016dd5:	83 c4 10             	add    esp,0x10
c0016dd8:	90                   	nop
c0016dd9:	83 c4 0c             	add    esp,0xc
c0016ddc:	c3                   	ret    
c0016ddd:	90                   	nop

c0016dde <Timer::~Timer()>:
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	83 ec 0c             	sub    esp,0xc
c0016de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016de8:	e8 cd ff ff ff       	call   c0016dba <Timer::~Timer()>
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	83 ec 08             	sub    esp,0x8
c0016df3:	68 5c 01 00 00       	push   0x15c
c0016df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dfc:	e8 55 c1 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	83 c4 0c             	add    esp,0xc
c0016e07:	c3                   	ret    

c0016e08 <Timer::read()>:
c0016e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e12:	c3                   	ret    

c0016e13 <timerHandler(unsigned long long)>:
c0016e13:	55                   	push   ebp
c0016e14:	57                   	push   edi
c0016e15:	56                   	push   esi
c0016e16:	53                   	push   ebx
c0016e17:	83 ec 0c             	sub    esp,0xc
c0016e1a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e1e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016e22:	01 35 30 ec 02 c0    	add    DWORD PTR ds:0xc002ec30,esi
c0016e28:	11 3d 34 ec 02 c0    	adc    DWORD PTR ds:0xc002ec34,edi
c0016e2e:	80 3d 8d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e58d,0x0
c0016e35:	0f 84 07 01 00 00    	je     c0016f42 <timerHandler(unsigned long long)+0x12f>
c0016e3b:	e8 a9 70 00 00       	call   c001dee9 <lockStuff()>
c0016e40:	83 ec 0c             	sub    esp,0xc
c0016e43:	68 fc 1a 03 c0       	push   0xc0031afc
c0016e48:	e8 c1 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e4d:	c7 04 24 fc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031afc
c0016e54:	89 c3                	mov    ebx,eax
c0016e56:	e8 bb 1c 01 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e5b:	83 c4 10             	add    esp,0x10
c0016e5e:	84 c0                	test   al,al
c0016e60:	74 60                	je     c0016ec2 <timerHandler(unsigned long long)+0xaf>
c0016e62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e68:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016e6b:	85 c0                	test   eax,eax
c0016e6d:	0f 85 91 00 00 00    	jne    c0016f04 <timerHandler(unsigned long long)+0xf1>
c0016e73:	e9 be 00 00 00       	jmp    c0016f36 <timerHandler(unsigned long long)+0x123>
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	55                   	push   ebp
c0016e7c:	e8 59 76 00 00       	call   c001e4da <unblockTask(ThreadControlBlock*)>
c0016e81:	83 c4 10             	add    esp,0x10
c0016e84:	39 eb                	cmp    ebx,ebp
c0016e86:	75 12                	jne    c0016e9a <timerHandler(unsigned long long)+0x87>
c0016e88:	83 ec 0c             	sub    esp,0xc
c0016e8b:	68 fc 1a 03 c0       	push   0xc0031afc
c0016e90:	e8 79 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e95:	89 c3                	mov    ebx,eax
c0016e97:	83 c4 10             	add    esp,0x10
c0016e9a:	83 ec 0c             	sub    esp,0xc
c0016e9d:	68 fc 1a 03 c0       	push   0xc0031afc
c0016ea2:	e8 6f 1c 01 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ea7:	83 c4 10             	add    esp,0x10
c0016eaa:	84 c0                	test   al,al
c0016eac:	75 b4                	jne    c0016e62 <timerHandler(unsigned long long)+0x4f>
c0016eae:	83 ec 0c             	sub    esp,0xc
c0016eb1:	68 fc 1a 03 c0       	push   0xc0031afc
c0016eb6:	e8 53 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ebb:	83 c4 10             	add    esp,0x10
c0016ebe:	39 d8                	cmp    eax,ebx
c0016ec0:	74 a0                	je     c0016e62 <timerHandler(unsigned long long)+0x4f>
c0016ec2:	83 ec 0c             	sub    esp,0xc
c0016ec5:	68 fc 1a 03 c0       	push   0xc0031afc
c0016eca:	e8 3f 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ecf:	c7 04 24 fc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031afc
c0016ed6:	89 c5                	mov    ebp,eax
c0016ed8:	e8 55 1c 01 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016edd:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016ee0:	83 c4 10             	add    esp,0x10
c0016ee3:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016ee6:	39 15 30 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec30,edx
c0016eec:	a1 34 ec 02 c0       	mov    eax,ds:0xc002ec34
c0016ef1:	19 c8                	sbb    eax,ecx
c0016ef3:	73 83                	jae    c0016e78 <timerHandler(unsigned long long)+0x65>
c0016ef5:	50                   	push   eax
c0016ef6:	50                   	push   eax
c0016ef7:	55                   	push   ebp
c0016ef8:	68 fc 1a 03 c0       	push   0xc0031afc
c0016efd:	e8 de 1c 01 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f02:	eb 93                	jmp    c0016e97 <timerHandler(unsigned long long)+0x84>
c0016f04:	80 3d 8c e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e58c,0x0
c0016f0b:	74 29                	je     c0016f36 <timerHandler(unsigned long long)+0x123>
c0016f0d:	39 c6                	cmp    esi,eax
c0016f0f:	bb 00 00 00 00       	mov    ebx,0x0
c0016f14:	19 df                	sbb    edi,ebx
c0016f16:	72 19                	jb     c0016f31 <timerHandler(unsigned long long)+0x11e>
c0016f18:	e8 a5 6f 00 00       	call   c001dec2 <lockScheduler()>
c0016f1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f22:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016f25:	e8 d4 72 00 00       	call   c001e1fe <schedule()>
c0016f2a:	e8 95 6f 00 00       	call   c001dec4 <unlockScheduler()>
c0016f2f:	eb 05                	jmp    c0016f36 <timerHandler(unsigned long long)+0x123>
c0016f31:	29 f0                	sub    eax,esi
c0016f33:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016f36:	83 c4 0c             	add    esp,0xc
c0016f39:	5b                   	pop    ebx
c0016f3a:	5e                   	pop    esi
c0016f3b:	5f                   	pop    edi
c0016f3c:	5d                   	pop    ebp
c0016f3d:	e9 41 73 00 00       	jmp    c001e283 <unlockStuff()>
c0016f42:	83 c4 0c             	add    esp,0xc
c0016f45:	5b                   	pop    ebx
c0016f46:	5e                   	pop    esi
c0016f47:	5f                   	pop    edi
c0016f48:	5d                   	pop    ebp
c0016f49:	c3                   	ret    

c0016f4a <setupTimer(int)>:
c0016f4a:	57                   	push   edi
c0016f4b:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0016f50:	56                   	push   esi
c0016f51:	53                   	push   ebx
c0016f52:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f5c:	83 ec 0c             	sub    esp,0xc
c0016f5f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f65:	e8 de d7 ff ff       	call   c0014748 <Device::getName()>
c0016f6a:	83 c4 10             	add    esp,0x10
c0016f6d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f70:	0f 85 8d 00 00 00    	jne    c0017003 <setupTimer(int)+0xb9>
c0016f76:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0016f7b:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f82:	74 7f                	je     c0017003 <setupTimer(int)+0xb9>
c0016f84:	83 ec 0c             	sub    esp,0xc
c0016f87:	68 5c 01 00 00       	push   0x15c
c0016f8c:	e8 af 88 ff ff       	call   c000f840 <malloc>
c0016f91:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f94:	89 c3                	mov    ebx,eax
c0016f96:	e8 e1 f6 00 00       	call   c002667c <PIT::PIT()>
c0016f9b:	59                   	pop    ecx
c0016f9c:	5f                   	pop    edi
c0016f9d:	53                   	push   ebx
c0016f9e:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c0016fa4:	e8 b3 d4 ff ff       	call   c001445c <Device::addChild(Device*)>
c0016fa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fab:	6a 00                	push   0x0
c0016fad:	6a 00                	push   0x0
c0016faf:	56                   	push   esi
c0016fb0:	53                   	push   ebx
c0016fb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fb4:	83 c4 14             	add    esp,0x14
c0016fb7:	68 60 01 00 00       	push   0x160
c0016fbc:	e8 7f 88 ff ff       	call   c000f840 <malloc>
c0016fc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fc4:	89 c7                	mov    edi,eax
c0016fc6:	e8 61 f5 00 00       	call   c002652c <APICTimer::APICTimer()>
c0016fcb:	6a 00                	push   0x0
c0016fcd:	6a 00                	push   0x0
c0016fcf:	56                   	push   esi
c0016fd0:	57                   	push   edi
c0016fd1:	e8 58 f4 00 00       	call   c002642e <APICTimer::open(int, int, void*)>
c0016fd6:	83 c4 20             	add    esp,0x20
c0016fd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fdb:	6a 00                	push   0x0
c0016fdd:	6a 00                	push   0x0
c0016fdf:	6a 00                	push   0x0
c0016fe1:	53                   	push   ebx
c0016fe2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fe5:	58                   	pop    eax
c0016fe6:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0016feb:	5a                   	pop    edx
c0016fec:	57                   	push   edi
c0016fed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ff3:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ff9:	e8 5e d4 ff ff       	call   c001445c <Device::addChild(Device*)>
c0016ffe:	83 c4 10             	add    esp,0x10
c0017001:	eb 33                	jmp    c0017036 <setupTimer(int)+0xec>
c0017003:	83 ec 0c             	sub    esp,0xc
c0017006:	68 5c 01 00 00       	push   0x15c
c001700b:	e8 30 88 ff ff       	call   c000f840 <malloc>
c0017010:	89 04 24             	mov    DWORD PTR [esp],eax
c0017013:	89 c3                	mov    ebx,eax
c0017015:	e8 62 f6 00 00       	call   c002667c <PIT::PIT()>
c001701a:	58                   	pop    eax
c001701b:	5a                   	pop    edx
c001701c:	53                   	push   ebx
c001701d:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c0017023:	e8 34 d4 ff ff       	call   c001445c <Device::addChild(Device*)>
c0017028:	8b 03                	mov    eax,DWORD PTR [ebx]
c001702a:	6a 00                	push   0x0
c001702c:	6a 00                	push   0x0
c001702e:	56                   	push   esi
c001702f:	53                   	push   ebx
c0017030:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017033:	83 c4 20             	add    esp,0x20
c0017036:	89 d8                	mov    eax,ebx
c0017038:	5b                   	pop    ebx
c0017039:	5e                   	pop    esi
c001703a:	5f                   	pop    edi
c001703b:	c3                   	ret    

c001703c <VCache::VCache(PhysicalDisk*)>:
c001703c:	53                   	push   ebx
c001703d:	83 ec 18             	sub    esp,0x18
c0017040:	ba c0 b4 02 c0       	mov    edx,0xc002b4c0
c0017045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017049:	89 10                	mov    DWORD PTR [eax],edx
c001704b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017065:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001706c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017077:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001707e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017089:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017094:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00170a3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00170aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00170ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170be:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170cd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00170d5:	83 ec 0c             	sub    esp,0xc
c00170d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170dc:	e8 5f 87 ff ff       	call   c000f840 <malloc>
c00170e1:	83 c4 10             	add    esp,0x10
c00170e4:	89 c3                	mov    ebx,eax
c00170e6:	83 ec 0c             	sub    esp,0xc
c00170e9:	53                   	push   ebx
c00170ea:	e8 f3 6e 00 00       	call   c001dfe2 <Mutex::Mutex()>
c00170ef:	83 c4 10             	add    esp,0x10
c00170f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017101:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017108:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001710f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017113:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017119:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017120:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017124:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001712a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017130:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017134:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017137:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001713a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001713e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017142:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017146:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001714c:	05 00 01 00 00       	add    eax,0x100
c0017151:	c1 e0 04             	shl    eax,0x4
c0017154:	83 ec 0c             	sub    esp,0xc
c0017157:	50                   	push   eax
c0017158:	e8 e3 86 ff ff       	call   c000f840 <malloc>
c001715d:	83 c4 10             	add    esp,0x10
c0017160:	89 c2                	mov    edx,eax
c0017162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017166:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001716d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017178:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001717c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017180:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017186:	c1 e0 07             	shl    eax,0x7
c0017189:	83 ec 0c             	sub    esp,0xc
c001718c:	50                   	push   eax
c001718d:	e8 ae 86 ff ff       	call   c000f840 <malloc>
c0017192:	83 c4 10             	add    esp,0x10
c0017195:	89 c2                	mov    edx,eax
c0017197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001719b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001719e:	90                   	nop
c001719f:	83 c4 18             	add    esp,0x18
c00171a2:	5b                   	pop    ebx
c00171a3:	c3                   	ret    

c00171a4 <VCache::invalidateReadBuffer()>:
c00171a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171a8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00171ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00171b2:	c3                   	ret    
c00171b3:	90                   	nop

c00171b4 <VCache::writeWriteBuffer()>:
c00171b4:	53                   	push   ebx
c00171b5:	83 ec 14             	sub    esp,0x14
c00171b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00171bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00171c1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00171ca:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00171cd:	50                   	push   eax
c00171ce:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171d1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171d8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171df:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171e3:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171ea:	83 c4 28             	add    esp,0x28
c00171ed:	5b                   	pop    ebx
c00171ee:	c3                   	ret    
c00171ef:	90                   	nop

c00171f0 <VCache::~VCache()>:
c00171f0:	83 ec 0c             	sub    esp,0xc
c00171f3:	ba c0 b4 02 c0       	mov    edx,0xc002b4c0
c00171f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171fc:	89 10                	mov    DWORD PTR [eax],edx
c00171fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017202:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017205:	84 c0                	test   al,al
c0017207:	74 0f                	je     c0017218 <VCache::~VCache()+0x28>
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017210:	e8 9f ff ff ff       	call   c00171b4 <VCache::writeWriteBuffer()>
c0017215:	83 c4 10             	add    esp,0x10
c0017218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001721c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001721f:	83 ec 0c             	sub    esp,0xc
c0017222:	50                   	push   eax
c0017223:	e8 28 86 ff ff       	call   c000f850 <free>
c0017228:	83 c4 10             	add    esp,0x10
c001722b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001722f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017232:	83 ec 0c             	sub    esp,0xc
c0017235:	50                   	push   eax
c0017236:	e8 15 86 ff ff       	call   c000f850 <free>
c001723b:	83 c4 10             	add    esp,0x10
c001723e:	90                   	nop
c001723f:	83 c4 0c             	add    esp,0xc
c0017242:	c3                   	ret    
c0017243:	90                   	nop

c0017244 <VCache::~VCache()>:
c0017244:	83 ec 0c             	sub    esp,0xc
c0017247:	83 ec 0c             	sub    esp,0xc
c001724a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001724e:	e8 9d ff ff ff       	call   c00171f0 <VCache::~VCache()>
c0017253:	83 c4 10             	add    esp,0x10
c0017256:	83 ec 08             	sub    esp,0x8
c0017259:	6a 44                	push   0x44
c001725b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001725f:	e8 f2 bc ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0017264:	83 c4 10             	add    esp,0x10
c0017267:	83 c4 0c             	add    esp,0xc
c001726a:	c3                   	ret    
c001726b:	90                   	nop

c001726c <VCache::write(unsigned long long, int, void*)>:
c001726c:	55                   	push   ebp
c001726d:	57                   	push   edi
c001726e:	56                   	push   esi
c001726f:	53                   	push   ebx
c0017270:	83 ec 28             	sub    esp,0x28
c0017273:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017277:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001727b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001727f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017283:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017286:	e8 b9 71 00 00       	call   c001e444 <Semaphore::acquire()>
c001728b:	83 c4 10             	add    esp,0x10
c001728e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017292:	74 0c                	je     c00172a0 <VCache::write(unsigned long long, int, void*)+0x34>
c0017294:	83 ec 0c             	sub    esp,0xc
c0017297:	53                   	push   ebx
c0017298:	e8 07 ff ff ff       	call   c00171a4 <VCache::invalidateReadBuffer()>
c001729d:	83 c4 10             	add    esp,0x10
c00172a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172a4:	74 66                	je     c001730c <VCache::write(unsigned long long, int, void*)+0xa0>
c00172a6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172a9:	99                   	cdq    
c00172aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172ae:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00172b1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00172b4:	89 c1                	mov    ecx,eax
c00172b6:	89 d0                	mov    eax,edx
c00172b8:	31 f1                	xor    ecx,esi
c00172ba:	31 f8                	xor    eax,edi
c00172bc:	89 ca                	mov    edx,ecx
c00172be:	09 c2                	or     edx,eax
c00172c0:	75 3e                	jne    c0017300 <VCache::write(unsigned long long, int, void*)+0x94>
c00172c2:	83 fd 01             	cmp    ebp,0x1
c00172c5:	75 39                	jne    c0017300 <VCache::write(unsigned long long, int, void*)+0x94>
c00172c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00172d0:	51                   	push   ecx
c00172d1:	50                   	push   eax
c00172d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172d6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00172da:	0f af c8             	imul   ecx,eax
c00172dd:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00172e0:	51                   	push   ecx
c00172e1:	e8 5e 94 fe ff       	call   c0000744 <memcpy>
c00172e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172e9:	83 c4 10             	add    esp,0x10
c00172ec:	40                   	inc    eax
c00172ed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172f0:	83 c0 80             	add    eax,0xffffff80
c00172f3:	75 57                	jne    c001734c <VCache::write(unsigned long long, int, void*)+0xe0>
c00172f5:	83 ec 0c             	sub    esp,0xc
c00172f8:	53                   	push   ebx
c00172f9:	e8 b6 fe ff ff       	call   c00171b4 <VCache::writeWriteBuffer()>
c00172fe:	eb 34                	jmp    c0017334 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017300:	83 ec 0c             	sub    esp,0xc
c0017303:	53                   	push   ebx
c0017304:	e8 ab fe ff ff       	call   c00171b4 <VCache::writeWriteBuffer()>
c0017309:	83 c4 10             	add    esp,0x10
c001730c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001730f:	83 fd 7f             	cmp    ebp,0x7f
c0017312:	7f 25                	jg     c0017339 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017314:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017317:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001731a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001731d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017321:	52                   	push   edx
c0017322:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017328:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001732c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001732f:	e8 10 94 fe ff       	call   c0000744 <memcpy>
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	eb 13                	jmp    c001734c <VCache::write(unsigned long long, int, void*)+0xe0>
c0017339:	83 ec 0c             	sub    esp,0xc
c001733c:	8b 10                	mov    edx,DWORD PTR [eax]
c001733e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017342:	55                   	push   ebp
c0017343:	57                   	push   edi
c0017344:	56                   	push   esi
c0017345:	50                   	push   eax
c0017346:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017349:	83 c4 20             	add    esp,0x20
c001734c:	83 ec 0c             	sub    esp,0xc
c001734f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017352:	e8 9b 76 00 00       	call   c001e9f2 <Semaphore::release()>
c0017357:	83 c4 2c             	add    esp,0x2c
c001735a:	31 c0                	xor    eax,eax
c001735c:	5b                   	pop    ebx
c001735d:	5e                   	pop    esi
c001735e:	5f                   	pop    edi
c001735f:	5d                   	pop    ebp
c0017360:	c3                   	ret    
c0017361:	90                   	nop

c0017362 <VCache::read(unsigned long long, int, void*)>:
c0017362:	55                   	push   ebp
c0017363:	57                   	push   edi
c0017364:	56                   	push   esi
c0017365:	53                   	push   ebx
c0017366:	83 ec 28             	sub    esp,0x28
c0017369:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001736d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017371:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017375:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017379:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001737d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017381:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017385:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017388:	e8 b7 70 00 00       	call   c001e444 <Semaphore::acquire()>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017394:	74 0c                	je     c00173a2 <VCache::read(unsigned long long, int, void*)+0x40>
c0017396:	83 ec 0c             	sub    esp,0xc
c0017399:	53                   	push   ebx
c001739a:	e8 15 fe ff ff       	call   c00171b4 <VCache::writeWriteBuffer()>
c001739f:	83 c4 10             	add    esp,0x10
c00173a2:	83 fe 01             	cmp    esi,0x1
c00173a5:	0f 85 80 00 00 00    	jne    c001742b <VCache::read(unsigned long long, int, void*)+0xc9>
c00173ab:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173ae:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00173b5:	75 74                	jne    c001742b <VCache::read(unsigned long long, int, void*)+0xc9>
c00173b7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173ba:	89 d1                	mov    ecx,edx
c00173bc:	f7 d9                	neg    ecx
c00173be:	89 cf                	mov    edi,ecx
c00173c0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00173c4:	c1 ff 1f             	sar    edi,0x1f
c00173c7:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00173ca:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00173ce:	89 ce                	mov    esi,ecx
c00173d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173d4:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00173d8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00173dc:	89 cf                	mov    edi,ecx
c00173de:	74 0a                	je     c00173ea <VCache::read(unsigned long long, int, void*)+0x88>
c00173e0:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00173e3:	75 05                	jne    c00173ea <VCache::read(unsigned long long, int, void*)+0x88>
c00173e5:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00173e8:	74 1c                	je     c0017406 <VCache::read(unsigned long long, int, void*)+0xa4>
c00173ea:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173ee:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00173f1:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00173f4:	83 ec 0c             	sub    esp,0xc
c00173f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173f9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173fc:	52                   	push   edx
c00173fd:	57                   	push   edi
c00173fe:	56                   	push   esi
c00173ff:	50                   	push   eax
c0017400:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017403:	83 c4 20             	add    esp,0x20
c0017406:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017409:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001740f:	50                   	push   eax
c0017410:	52                   	push   edx
c0017411:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017414:	48                   	dec    eax
c0017415:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017419:	0f af c2             	imul   eax,edx
c001741c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001741f:	50                   	push   eax
c0017420:	55                   	push   ebp
c0017421:	e8 1e 93 fe ff       	call   c0000744 <memcpy>
c0017426:	83 c4 10             	add    esp,0x10
c0017429:	eb 21                	jmp    c001744c <VCache::read(unsigned long long, int, void*)+0xea>
c001742b:	83 ec 0c             	sub    esp,0xc
c001742e:	53                   	push   ebx
c001742f:	e8 70 fd ff ff       	call   c00171a4 <VCache::invalidateReadBuffer()>
c0017434:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017437:	8b 10                	mov    edx,DWORD PTR [eax]
c0017439:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001743c:	56                   	push   esi
c001743d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017441:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017445:	50                   	push   eax
c0017446:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017449:	83 c4 20             	add    esp,0x20
c001744c:	83 ec 0c             	sub    esp,0xc
c001744f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017452:	e8 9b 75 00 00       	call   c001e9f2 <Semaphore::release()>
c0017457:	83 c4 2c             	add    esp,0x2c
c001745a:	31 c0                	xor    eax,eax
c001745c:	5b                   	pop    ebx
c001745d:	5e                   	pop    esi
c001745e:	5f                   	pop    edi
c001745f:	5d                   	pop    ebp
c0017460:	c3                   	ret    
c0017461:	90                   	nop

c0017462 <Video::putrect(int, int, int, int, unsigned int)>:
c0017462:	55                   	push   ebp
c0017463:	57                   	push   edi
c0017464:	56                   	push   esi
c0017465:	53                   	push   ebx
c0017466:	83 ec 1c             	sub    esp,0x1c
c0017469:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001746d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017471:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017475:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017479:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001747d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017481:	01 df                	add    edi,ebx
c0017483:	39 fb                	cmp    ebx,edi
c0017485:	7d 1f                	jge    c00174a6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017487:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001748b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001748f:	7d 12                	jge    c00174a3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017491:	8b 16                	mov    edx,DWORD PTR [esi]
c0017493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017497:	53                   	push   ebx
c0017498:	55                   	push   ebp
c0017499:	45                   	inc    ebp
c001749a:	56                   	push   esi
c001749b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001749e:	83 c4 10             	add    esp,0x10
c00174a1:	eb e8                	jmp    c001748b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00174a3:	43                   	inc    ebx
c00174a4:	eb dd                	jmp    c0017483 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00174a6:	83 c4 1c             	add    esp,0x1c
c00174a9:	5b                   	pop    ebx
c00174aa:	5e                   	pop    esi
c00174ab:	5f                   	pop    edi
c00174ac:	5d                   	pop    ebp
c00174ad:	c3                   	ret    

c00174ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00174ae:	55                   	push   ebp
c00174af:	57                   	push   edi
c00174b0:	31 ff                	xor    edi,edi
c00174b2:	56                   	push   esi
c00174b3:	53                   	push   ebx
c00174b4:	83 ec 1c             	sub    esp,0x1c
c00174b7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00174bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00174bf:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00174c6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00174cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174cf:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00174d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174d7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00174da:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174de:	01 f9                	add    ecx,edi
c00174e0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00174e4:	7d 2f                	jge    c0017515 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00174e6:	31 f6                	xor    esi,esi
c00174e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174ec:	01 f2                	add    edx,esi
c00174ee:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174f2:	7d 1a                	jge    c001750e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174f7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174fa:	46                   	inc    esi
c00174fb:	51                   	push   ecx
c00174fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017500:	52                   	push   edx
c0017501:	55                   	push   ebp
c0017502:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017505:	83 c4 10             	add    esp,0x10
c0017508:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001750c:	eb da                	jmp    c00174e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001750e:	47                   	inc    edi
c001750f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017513:	eb c5                	jmp    c00174da <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017515:	83 c4 1c             	add    esp,0x1c
c0017518:	5b                   	pop    ebx
c0017519:	5e                   	pop    esi
c001751a:	5f                   	pop    edi
c001751b:	5d                   	pop    ebp
c001751c:	c3                   	ret    
c001751d:	90                   	nop

c001751e <Video::blit(unsigned int*, int, int, int, int)>:
c001751e:	55                   	push   ebp
c001751f:	57                   	push   edi
c0017520:	56                   	push   esi
c0017521:	53                   	push   ebx
c0017522:	83 ec 1c             	sub    esp,0x1c
c0017525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017529:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001752d:	85 c0                	test   eax,eax
c001752f:	79 02                	jns    c0017533 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017531:	31 c0                	xor    eax,eax
c0017533:	c1 e0 02             	shl    eax,0x2
c0017536:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001753a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001753e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017542:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017546:	39 d8                	cmp    eax,ebx
c0017548:	7e 49                	jle    c0017593 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001754a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017550:	7c 41                	jl     c0017593 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017552:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017556:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001755a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001755e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017562:	39 f9                	cmp    ecx,edi
c0017564:	7e 22                	jle    c0017588 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017566:	83 c5 04             	add    ebp,0x4
c0017569:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001756f:	7c 14                	jl     c0017585 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017571:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017573:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017576:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001757a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001757e:	56                   	push   esi
c001757f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017582:	83 c4 10             	add    esp,0x10
c0017585:	47                   	inc    edi
c0017586:	eb d2                	jmp    c001755a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001758c:	43                   	inc    ebx
c001758d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017591:	eb ab                	jmp    c001753e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017593:	83 c4 1c             	add    esp,0x1c
c0017596:	5b                   	pop    ebx
c0017597:	5e                   	pop    esi
c0017598:	5f                   	pop    edi
c0017599:	5d                   	pop    ebp
c001759a:	c3                   	ret    
c001759b:	90                   	nop

c001759c <Video::clearScreen(unsigned int)>:
c001759c:	57                   	push   edi
c001759d:	56                   	push   esi
c001759e:	53                   	push   ebx
c001759f:	31 db                	xor    ebx,ebx
c00175a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00175a5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00175ab:	7e 1f                	jle    c00175cc <Video::clearScreen(unsigned int)+0x30>
c00175ad:	31 ff                	xor    edi,edi
c00175af:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175b5:	7e 12                	jle    c00175c9 <Video::clearScreen(unsigned int)+0x2d>
c00175b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00175b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175bd:	53                   	push   ebx
c00175be:	57                   	push   edi
c00175bf:	47                   	inc    edi
c00175c0:	56                   	push   esi
c00175c1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175c4:	83 c4 10             	add    esp,0x10
c00175c7:	eb e6                	jmp    c00175af <Video::clearScreen(unsigned int)+0x13>
c00175c9:	43                   	inc    ebx
c00175ca:	eb d9                	jmp    c00175a5 <Video::clearScreen(unsigned int)+0x9>
c00175cc:	5b                   	pop    ebx
c00175cd:	5e                   	pop    esi
c00175ce:	5f                   	pop    edi
c00175cf:	c3                   	ret    

c00175d0 <Video::putpixel(int, int, unsigned int)>:
c00175d0:	c7 44 24 04 c8 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b4c8
c00175d8:	e9 0a 31 00 00       	jmp    c001a6e7 <Krnl::panic(char const*)>
c00175dd:	90                   	nop

c00175de <Video::Video(char const*)>:
c00175de:	83 ec 0c             	sub    esp,0xc
c00175e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e5:	83 ec 08             	sub    esp,0x8
c00175e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ec:	50                   	push   eax
c00175ed:	e8 5a d0 ff ff       	call   c001464c <Device::Device(char const*)>
c00175f2:	83 c4 10             	add    esp,0x10
c00175f5:	ba 4c b5 02 c0       	mov    edx,0xc002b54c
c00175fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175fe:	89 10                	mov    DWORD PTR [eax],edx
c0017600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017604:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001760e:	90                   	nop
c001760f:	83 c4 0c             	add    esp,0xc
c0017612:	c3                   	ret    
c0017613:	90                   	nop

c0017614 <Video::~Video()>:
c0017614:	83 ec 0c             	sub    esp,0xc
c0017617:	ba 4c b5 02 c0       	mov    edx,0xc002b54c
c001761c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017620:	89 10                	mov    DWORD PTR [eax],edx
c0017622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	50                   	push   eax
c001762a:	e8 ff cc ff ff       	call   c001432e <Device::~Device()>
c001762f:	83 c4 10             	add    esp,0x10
c0017632:	90                   	nop
c0017633:	83 c4 0c             	add    esp,0xc
c0017636:	c3                   	ret    
c0017637:	90                   	nop

c0017638 <Video::~Video()>:
c0017638:	83 ec 0c             	sub    esp,0xc
c001763b:	83 ec 0c             	sub    esp,0xc
c001763e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017642:	e8 cd ff ff ff       	call   c0017614 <Video::~Video()>
c0017647:	83 c4 10             	add    esp,0x10
c001764a:	83 ec 08             	sub    esp,0x8
c001764d:	68 64 01 00 00       	push   0x164
c0017652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017656:	e8 fb b8 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c001765b:	83 c4 10             	add    esp,0x10
c001765e:	83 c4 0c             	add    esp,0xc
c0017661:	c3                   	ret    

c0017662 <Video::isMonochrome()>:
c0017662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017666:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001766c:	c3                   	ret    
c001766d:	90                   	nop

c001766e <Video::getWidth()>:
c001766e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017672:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017678:	c3                   	ret    
c0017679:	90                   	nop

c001767a <Video::getHeight()>:
c001767a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001767e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017684:	c3                   	ret    
c0017685:	90                   	nop

c0017686 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017686:	55                   	push   ebp
c0017687:	57                   	push   edi
c0017688:	56                   	push   esi
c0017689:	53                   	push   ebx
c001768a:	83 ec 2c             	sub    esp,0x2c
c001768d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017691:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017695:	83 f8 01             	cmp    eax,0x1
c0017698:	19 c9                	sbb    ecx,ecx
c001769a:	31 db                	xor    ebx,ebx
c001769c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00176a0:	89 cd                	mov    ebp,ecx
c00176a2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00176aa:	f7 d5                	not    ebp
c00176ac:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00176b2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00176b6:	01 d8                	add    eax,ebx
c00176b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176bc:	56                   	push   esi
c00176bd:	e8 b8 ff ff ff       	call   c001767a <Video::getHeight()>
c00176c2:	59                   	pop    ecx
c00176c3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00176c7:	7e 70                	jle    c0017739 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00176c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176cd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176d1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00176d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176dc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00176e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176e7:	89 f8                	mov    eax,edi
c00176e9:	83 c0 20             	add    eax,0x20
c00176ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176f0:	56                   	push   esi
c00176f1:	e8 78 ff ff ff       	call   c001766e <Video::getWidth()>
c00176f6:	5a                   	pop    edx
c00176f7:	39 c7                	cmp    edi,eax
c00176f9:	7d 34                	jge    c001772f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176fb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017700:	74 05                	je     c0017707 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017702:	8b 06                	mov    eax,DWORD PTR [esi]
c0017704:	55                   	push   ebp
c0017705:	eb 0d                	jmp    c0017714 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017707:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001770c:	74 12                	je     c0017720 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001770e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017710:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017714:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017718:	57                   	push   edi
c0017719:	56                   	push   esi
c001771a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001771d:	83 c4 10             	add    esp,0x10
c0017720:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017724:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017728:	47                   	inc    edi
c0017729:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001772d:	75 c1                	jne    c00176f0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001772f:	43                   	inc    ebx
c0017730:	83 fb 20             	cmp    ebx,0x20
c0017733:	0f 85 79 ff ff ff    	jne    c00176b2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017739:	83 c4 2c             	add    esp,0x2c
c001773c:	5b                   	pop    ebx
c001773d:	5e                   	pop    esi
c001773e:	5f                   	pop    edi
c001773f:	5d                   	pop    ebp
c0017740:	c3                   	ret    
c0017741:	90                   	nop

c0017742 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017742:	55                   	push   ebp
c0017743:	57                   	push   edi
c0017744:	56                   	push   esi
c0017745:	53                   	push   ebx
c0017746:	83 ec 28             	sub    esp,0x28
c0017749:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001774d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017751:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017755:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017759:	c1 e7 08             	shl    edi,0x8
c001775c:	01 c7                	add    edi,eax
c001775e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017762:	c1 e0 08             	shl    eax,0x8
c0017765:	01 d0                	add    eax,edx
c0017767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001776b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001776f:	0f af c7             	imul   eax,edi
c0017772:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017779:	50                   	push   eax
c001777a:	e8 c1 80 ff ff       	call   c000f840 <malloc>
c001777f:	83 c4 10             	add    esp,0x10
c0017782:	89 c5                	mov    ebp,eax
c0017784:	85 c0                	test   eax,eax
c0017786:	75 15                	jne    c001779d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017788:	83 ec 0c             	sub    esp,0xc
c001778b:	68 e9 b4 02 c0       	push   0xc002b4e9
c0017790:	e8 a1 b8 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0017795:	83 c4 10             	add    esp,0x10
c0017798:	e9 1c 01 00 00       	jmp    c00178b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001779d:	be 12 00 00 00       	mov    esi,0x12
c00177a2:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177a6:	74 11                	je     c00177b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00177a8:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00177ac:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00177b0:	c1 fe 03             	sar    esi,0x3
c00177b3:	0f af f0             	imul   esi,eax
c00177b6:	83 c6 12             	add    esi,0x12
c00177b9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00177bd:	74 04                	je     c00177c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00177bf:	85 ff                	test   edi,edi
c00177c1:	75 12                	jne    c00177d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00177c3:	83 ec 0c             	sub    esp,0xc
c00177c6:	68 00 b5 02 c0       	push   0xc002b500
c00177cb:	e8 66 b8 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00177d0:	e9 ce 00 00 00       	jmp    c00178a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00177d5:	52                   	push   edx
c00177d6:	52                   	push   edx
c00177d7:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00177db:	50                   	push   eax
c00177dc:	68 15 b5 02 c0       	push   0xc002b515
c00177e1:	e8 50 b8 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00177e6:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177ea:	83 c4 10             	add    esp,0x10
c00177ed:	80 fa 02             	cmp    dl,0x2
c00177f0:	0f 85 98 00 00 00    	jne    c001788e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177f6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177fb:	75 10                	jne    c001780d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177fd:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017801:	75 0a                	jne    c001780d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017803:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017806:	83 e8 18             	sub    eax,0x18
c0017809:	a8 f7                	test   al,0xf7
c001780b:	74 0a                	je     c0017817 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001780d:	83 ec 0c             	sub    esp,0xc
c0017810:	68 22 b5 02 c0       	push   0xc002b522
c0017815:	eb 7f                	jmp    c0017896 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017817:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001781f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017827:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001782b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017833:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017837:	75 0c                	jne    c0017845 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017839:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001783e:	c1 e0 18             	shl    eax,0x18
c0017841:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017845:	41                   	inc    ecx
c0017846:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001784b:	c1 e2 10             	shl    edx,0x10
c001784e:	89 d0                	mov    eax,edx
c0017850:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017855:	c1 e2 08             	shl    edx,0x8
c0017858:	09 c2                	or     edx,eax
c001785a:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001785e:	09 c2                	or     edx,eax
c0017860:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017864:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017868:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001786c:	c1 f8 03             	sar    eax,0x3
c001786f:	01 c6                	add    esi,eax
c0017871:	89 c8                	mov    eax,ecx
c0017873:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017877:	39 c7                	cmp    edi,eax
c0017879:	7f b0                	jg     c001782b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001787b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001787f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017883:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017886:	7e 22                	jle    c00178aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017888:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001788c:	eb 99                	jmp    c0017827 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001788e:	50                   	push   eax
c001788f:	50                   	push   eax
c0017890:	52                   	push   edx
c0017891:	68 30 b5 02 c0       	push   0xc002b530
c0017896:	e8 9b b7 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001789b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001789e:	e8 ad 7f ff ff       	call   c000f850 <free>
c00178a3:	83 c4 10             	add    esp,0x10
c00178a6:	31 ed                	xor    ebp,ebp
c00178a8:	eb 0f                	jmp    c00178b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00178aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178ae:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00178b1:	89 38                	mov    DWORD PTR [eax],edi
c00178b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178b7:	89 08                	mov    DWORD PTR [eax],ecx
c00178b9:	83 c4 1c             	add    esp,0x1c
c00178bc:	89 e8                	mov    eax,ebp
c00178be:	5b                   	pop    ebx
c00178bf:	5e                   	pop    esi
c00178c0:	5f                   	pop    edi
c00178c1:	5d                   	pop    ebp
c00178c2:	c3                   	ret    
c00178c3:	90                   	nop

c00178c4 <Video::putTGA(int, int, unsigned char*, int)>:
c00178c4:	55                   	push   ebp
c00178c5:	57                   	push   edi
c00178c6:	56                   	push   esi
c00178c7:	53                   	push   ebx
c00178c8:	83 ec 28             	sub    esp,0x28
c00178cb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00178cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178d3:	50                   	push   eax
c00178d4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178d8:	50                   	push   eax
c00178d9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178dd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178e1:	56                   	push   esi
c00178e2:	e8 5b fe ff ff       	call   c0017742 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00178e7:	83 c4 20             	add    esp,0x20
c00178ea:	85 c0                	test   eax,eax
c00178ec:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178f0:	74 35                	je     c0017927 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178f2:	89 c7                	mov    edi,eax
c00178f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178f8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178fc:	39 d8                	cmp    eax,ebx
c00178fe:	7e 27                	jle    c0017927 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017900:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017904:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017908:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001790c:	39 e8                	cmp    eax,ebp
c001790e:	7e 14                	jle    c0017924 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017910:	8b 06                	mov    eax,DWORD PTR [esi]
c0017912:	83 c7 04             	add    edi,0x4
c0017915:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017918:	53                   	push   ebx
c0017919:	55                   	push   ebp
c001791a:	45                   	inc    ebp
c001791b:	56                   	push   esi
c001791c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	eb e0                	jmp    c0017904 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017924:	43                   	inc    ebx
c0017925:	eb cd                	jmp    c00178f4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017927:	83 c4 1c             	add    esp,0x1c
c001792a:	5b                   	pop    ebx
c001792b:	5e                   	pop    esi
c001792c:	5f                   	pop    edi
c001792d:	5d                   	pop    ebp
c001792e:	c3                   	ret    
c001792f:	90                   	nop

c0017930 <ACPI::close(int, int, void*)>:
c0017930:	83 ec 1c             	sub    esp,0x1c
c0017933:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001793b:	74 0a                	je     c0017947 <ACPI::close(int, int, void*)+0x17>
c001793d:	b8 00 00 00 00       	mov    eax,0x0
c0017942:	e9 9a 00 00 00       	jmp    c00179e1 <ACPI::close(int, int, void*)+0xb1>
c0017947:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001794c:	75 37                	jne    c0017985 <ACPI::close(int, int, void*)+0x55>
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	68 8c b5 02 c0       	push   0xc002b58c
c0017956:	e8 db b6 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001795b:	83 c4 10             	add    esp,0x10
c001795e:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017963:	85 c0                	test   eax,eax
c0017965:	74 07                	je     c001796e <ACPI::close(int, int, void*)+0x3e>
c0017967:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001796c:	ff d0                	call   eax
c001796e:	83 ec 0c             	sub    esp,0xc
c0017971:	68 b0 b6 02 c0       	push   0xc002b6b0
c0017976:	e8 6c 2d 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c001797b:	83 c4 10             	add    esp,0x10
c001797e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017983:	eb 5c                	jmp    c00179e1 <ACPI::close(int, int, void*)+0xb1>
c0017985:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001798a:	75 50                	jne    c00179dc <ACPI::close(int, int, void*)+0xac>
c001798c:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c0017991:	85 c0                	test   eax,eax
c0017993:	74 07                	je     c001799c <ACPI::close(int, int, void*)+0x6c>
c0017995:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001799a:	ff d0                	call   eax
c001799c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00179a1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179a6:	83 e0 02             	and    eax,0x2
c00179a9:	74 1c                	je     c00179c7 <ACPI::close(int, int, void*)+0x97>
c00179ab:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00179b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179b6:	89 c2                	mov    edx,eax
c00179b8:	ec                   	in     al,dx
c00179b9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00179bd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00179c1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179c5:	eb da                	jmp    c00179a1 <ACPI::close(int, int, void*)+0x71>
c00179c7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00179ce:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00179d3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00179d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179db:	ee                   	out    dx,al
c00179dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179e1:	83 c4 1c             	add    esp,0x1c
c00179e4:	c3                   	ret    

c00179e5 <findRSDP()>:
c00179e5:	83 ec 1c             	sub    esp,0x1c
c00179e8:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00179ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179f3:	83 e0 04             	and    eax,0x4
c00179f6:	84 c0                	test   al,al
c00179f8:	75 07                	jne    c0017a01 <findRSDP()+0x1c>
c00179fa:	b8 00 00 00 00       	mov    eax,0x0
c00179ff:	eb 6a                	jmp    c0017a6b <findRSDP()+0x86>
c0017a01:	a1 d4 e5 02 c0       	mov    eax,ds:0xc002e5d4
c0017a06:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a0b:	7f 1b                	jg     c0017a28 <findRSDP()+0x43>
c0017a0d:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017a12:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a18:	83 e2 fb             	and    edx,0xfffffffb
c0017a1b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a21:	b8 00 00 00 00       	mov    eax,0x0
c0017a26:	eb 43                	jmp    c0017a6b <findRSDP()+0x86>
c0017a28:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a30:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a38:	77 2c                	ja     c0017a66 <findRSDP()+0x81>
c0017a3a:	83 ec 04             	sub    esp,0x4
c0017a3d:	6a 08                	push   0x8
c0017a3f:	68 99 b5 02 c0       	push   0xc002b599
c0017a44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a48:	e8 f3 8b fe ff       	call   c0000640 <memcmp>
c0017a4d:	83 c4 10             	add    esp,0x10
c0017a50:	85 c0                	test   eax,eax
c0017a52:	0f 94 c0             	sete   al
c0017a55:	84 c0                	test   al,al
c0017a57:	74 06                	je     c0017a5f <findRSDP()+0x7a>
c0017a59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a5d:	eb 0c                	jmp    c0017a6b <findRSDP()+0x86>
c0017a5f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a64:	eb ca                	jmp    c0017a30 <findRSDP()+0x4b>
c0017a66:	b8 00 00 00 00       	mov    eax,0x0
c0017a6b:	83 c4 1c             	add    esp,0x1c
c0017a6e:	c3                   	ret    

c0017a6f <loadACPITables(unsigned char*)>:
c0017a6f:	56                   	push   esi
c0017a70:	53                   	push   ebx
c0017a71:	83 ec 44             	sub    esp,0x44
c0017a74:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017a79:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a7f:	83 e0 04             	and    eax,0x4
c0017a82:	84 c0                	test   al,al
c0017a84:	0f 84 05 02 00 00    	je     c0017c8f <loadACPITables(unsigned char*)+0x220>
c0017a8a:	a0 80 0e 03 c0       	mov    al,ds:0xc0030e80
c0017a8f:	84 c0                	test   al,al
c0017a91:	74 75                	je     c0017b08 <loadACPITables(unsigned char*)+0x99>
c0017a93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aa2:	83 e8 24             	sub    eax,0x24
c0017aa5:	c1 e8 03             	shr    eax,0x3
c0017aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017aac:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017ab4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ab8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017abc:	0f 8d b2 00 00 00    	jge    c0017b74 <loadACPITables(unsigned char*)+0x105>
c0017ac2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ac6:	83 c0 24             	add    eax,0x24
c0017ac9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017acd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ad5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ad9:	c1 e0 03             	shl    eax,0x3
c0017adc:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017ae0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ae4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017ae7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ae9:	89 c1                	mov    ecx,eax
c0017aeb:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017af0:	8d 50 01             	lea    edx,[eax+0x1]
c0017af3:	89 15 6c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c6c,edx
c0017af9:	89 ca                	mov    edx,ecx
c0017afb:	89 14 c5 84 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf37c],edx
c0017b02:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017b06:	eb ac                	jmp    c0017ab4 <loadACPITables(unsigned char*)+0x45>
c0017b08:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b17:	83 e8 24             	sub    eax,0x24
c0017b1a:	c1 e8 02             	shr    eax,0x2
c0017b1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b21:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017b29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b2d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017b31:	7d 41                	jge    c0017b74 <loadACPITables(unsigned char*)+0x105>
c0017b33:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b37:	83 c0 24             	add    eax,0x24
c0017b3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b4a:	c1 e0 02             	shl    eax,0x2
c0017b4d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017b51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b55:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b57:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017b5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017b5f:	89 15 6c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c6c,edx
c0017b65:	89 ca                	mov    edx,ecx
c0017b67:	89 14 c5 84 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf37c],edx
c0017b6e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b72:	eb b5                	jmp    c0017b29 <loadACPITables(unsigned char*)+0xba>
c0017b74:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b7c:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017b81:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b85:	0f 8d 05 01 00 00    	jge    c0017c90 <loadACPITables(unsigned char*)+0x221>
c0017b8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b8f:	8b 04 c5 84 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf37c]
c0017b96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ba6:	25 ff 0f 00 00       	and    eax,0xfff
c0017bab:	89 c6                	mov    esi,eax
c0017bad:	e8 cc a2 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0017bb2:	89 c3                	mov    ebx,eax
c0017bb4:	83 ec 0c             	sub    esp,0xc
c0017bb7:	6a 01                	push   0x1
c0017bb9:	e8 25 a0 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0017bbe:	83 c4 10             	add    esp,0x10
c0017bc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bc5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bcb:	83 ec 0c             	sub    esp,0xc
c0017bce:	6a 01                	push   0x1
c0017bd0:	6a 01                	push   0x1
c0017bd2:	50                   	push   eax
c0017bd3:	52                   	push   edx
c0017bd4:	53                   	push   ebx
c0017bd5:	e8 d4 aa ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bda:	83 c4 20             	add    esp,0x20
c0017bdd:	09 f0                	or     eax,esi
c0017bdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017be3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017be7:	c1 e0 03             	shl    eax,0x3
c0017bea:	05 80 0c 03 c0       	add    eax,0xc0030c80
c0017bef:	83 ec 04             	sub    esp,0x4
c0017bf2:	6a 04                	push   0x4
c0017bf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bf8:	50                   	push   eax
c0017bf9:	e8 46 8b fe ff       	call   c0000744 <memcpy>
c0017bfe:	83 c4 10             	add    esp,0x10
c0017c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c10:	05 00 10 00 00       	add    eax,0x1000
c0017c15:	c1 e8 0c             	shr    eax,0xc
c0017c18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c20:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c27:	25 ff 0f 00 00       	and    eax,0xfff
c0017c2c:	89 c6                	mov    esi,eax
c0017c2e:	e8 4b a2 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0017c33:	89 c3                	mov    ebx,eax
c0017c35:	83 ec 0c             	sub    esp,0xc
c0017c38:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c3c:	e8 a2 9f ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0017c41:	83 c4 10             	add    esp,0x10
c0017c44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c48:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c4e:	83 ec 0c             	sub    esp,0xc
c0017c51:	6a 01                	push   0x1
c0017c53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c57:	50                   	push   eax
c0017c58:	52                   	push   edx
c0017c59:	53                   	push   ebx
c0017c5a:	e8 4f aa ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c5f:	83 c4 20             	add    esp,0x20
c0017c62:	09 f0                	or     eax,esi
c0017c64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c6b:	83 ec 0c             	sub    esp,0xc
c0017c6e:	50                   	push   eax
c0017c6f:	e8 df a3 ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c74:	83 c4 10             	add    esp,0x10
c0017c77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c7f:	89 14 c5 84 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf37c],edx
c0017c86:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c8a:	e9 ed fe ff ff       	jmp    c0017b7c <loadACPITables(unsigned char*)+0x10d>
c0017c8f:	90                   	nop
c0017c90:	83 c4 44             	add    esp,0x44
c0017c93:	5b                   	pop    ebx
c0017c94:	5e                   	pop    esi
c0017c95:	c3                   	ret    

c0017c96 <findRSDT(unsigned char*)>:
c0017c96:	56                   	push   esi
c0017c97:	53                   	push   ebx
c0017c98:	83 ec 44             	sub    esp,0x44
c0017c9b:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017ca0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ca6:	83 e0 04             	and    eax,0x4
c0017ca9:	84 c0                	test   al,al
c0017cab:	75 0a                	jne    c0017cb7 <findRSDT(unsigned char*)+0x21>
c0017cad:	b8 00 00 00 00       	mov    eax,0x0
c0017cb2:	e9 f7 00 00 00       	jmp    c0017dae <findRSDT(unsigned char*)+0x118>
c0017cb7:	83 ec 04             	sub    esp,0x4
c0017cba:	6a 24                	push   0x24
c0017cbc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017cc0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017cc4:	50                   	push   eax
c0017cc5:	e8 7a 8a fe ff       	call   c0000744 <memcpy>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017cd1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017cd5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017cdd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ce1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ce5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ced:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cf5:	25 ff 0f 00 00       	and    eax,0xfff
c0017cfa:	89 c6                	mov    esi,eax
c0017cfc:	e8 7d a1 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0017d01:	89 c3                	mov    ebx,eax
c0017d03:	83 ec 0c             	sub    esp,0xc
c0017d06:	6a 02                	push   0x2
c0017d08:	e8 d6 9e ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0017d0d:	83 c4 10             	add    esp,0x10
c0017d10:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017d14:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d1a:	83 ec 0c             	sub    esp,0xc
c0017d1d:	6a 01                	push   0x1
c0017d1f:	6a 02                	push   0x2
c0017d21:	50                   	push   eax
c0017d22:	52                   	push   edx
c0017d23:	53                   	push   ebx
c0017d24:	e8 85 a9 ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d29:	83 c4 20             	add    esp,0x20
c0017d2c:	09 f0                	or     eax,esi
c0017d2e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d36:	25 ff 0f 00 00       	and    eax,0xfff
c0017d3b:	89 c6                	mov    esi,eax
c0017d3d:	e8 3c a1 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0017d42:	89 c3                	mov    ebx,eax
c0017d44:	83 ec 0c             	sub    esp,0xc
c0017d47:	6a 02                	push   0x2
c0017d49:	e8 95 9e ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0017d4e:	83 c4 10             	add    esp,0x10
c0017d51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d55:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d5b:	83 ec 0c             	sub    esp,0xc
c0017d5e:	6a 01                	push   0x1
c0017d60:	6a 02                	push   0x2
c0017d62:	50                   	push   eax
c0017d63:	52                   	push   edx
c0017d64:	53                   	push   ebx
c0017d65:	e8 44 a9 ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d6a:	83 c4 20             	add    esp,0x20
c0017d6d:	09 f0                	or     eax,esi
c0017d6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d73:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d78:	75 11                	jne    c0017d8b <findRSDT(unsigned char*)+0xf5>
c0017d7a:	c6 05 80 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e80,0x0
c0017d81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d85:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d89:	eb 1f                	jmp    c0017daa <findRSDT(unsigned char*)+0x114>
c0017d8b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d90:	75 11                	jne    c0017da3 <findRSDT(unsigned char*)+0x10d>
c0017d92:	c6 05 80 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e80,0x1
c0017d99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d9d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017da1:	eb 07                	jmp    c0017daa <findRSDT(unsigned char*)+0x114>
c0017da3:	b8 00 00 00 00       	mov    eax,0x0
c0017da8:	eb 04                	jmp    c0017dae <findRSDT(unsigned char*)+0x118>
c0017daa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017dae:	83 c4 44             	add    esp,0x44
c0017db1:	5b                   	pop    ebx
c0017db2:	5e                   	pop    esi
c0017db3:	c3                   	ret    

c0017db4 <findDataTable(unsigned char*, char*)>:
c0017db4:	83 ec 1c             	sub    esp,0x1c
c0017db7:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017dbc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017dc2:	83 e0 04             	and    eax,0x4
c0017dc5:	84 c0                	test   al,al
c0017dc7:	75 07                	jne    c0017dd0 <findDataTable(unsigned char*, char*)+0x1c>
c0017dc9:	b8 00 00 00 00       	mov    eax,0x0
c0017dce:	eb 7c                	jmp    c0017e4c <findDataTable(unsigned char*, char*)+0x98>
c0017dd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017dd8:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017ddd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017de1:	7d 3a                	jge    c0017e1d <findDataTable(unsigned char*, char*)+0x69>
c0017de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de7:	c1 e0 03             	shl    eax,0x3
c0017dea:	05 80 0c 03 c0       	add    eax,0xc0030c80
c0017def:	83 ec 04             	sub    esp,0x4
c0017df2:	6a 04                	push   0x4
c0017df4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017df8:	50                   	push   eax
c0017df9:	e8 42 88 fe ff       	call   c0000640 <memcmp>
c0017dfe:	83 c4 10             	add    esp,0x10
c0017e01:	85 c0                	test   eax,eax
c0017e03:	0f 94 c0             	sete   al
c0017e06:	84 c0                	test   al,al
c0017e08:	74 0d                	je     c0017e17 <findDataTable(unsigned char*, char*)+0x63>
c0017e0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e0e:	8b 04 c5 84 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf37c]
c0017e15:	eb 35                	jmp    c0017e4c <findDataTable(unsigned char*, char*)+0x98>
c0017e17:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e1b:	eb bb                	jmp    c0017dd8 <findDataTable(unsigned char*, char*)+0x24>
c0017e1d:	a0 80 0e 03 c0       	mov    al,ds:0xc0030e80
c0017e22:	84 c0                	test   al,al
c0017e24:	74 07                	je     c0017e2d <findDataTable(unsigned char*, char*)+0x79>
c0017e26:	b8 58 00 00 00       	mov    eax,0x58
c0017e2b:	eb 05                	jmp    c0017e32 <findDataTable(unsigned char*, char*)+0x7e>
c0017e2d:	b8 52 00 00 00       	mov    eax,0x52
c0017e32:	83 ec 04             	sub    esp,0x4
c0017e35:	50                   	push   eax
c0017e36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e3a:	68 d4 b6 02 c0       	push   0xc002b6d4
c0017e3f:	e8 f2 b1 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	b8 00 00 00 00       	mov    eax,0x0
c0017e4c:	83 c4 1c             	add    esp,0x1c
c0017e4f:	c3                   	ret    

c0017e50 <scanMADT()>:
c0017e50:	53                   	push   ebx
c0017e51:	83 ec 38             	sub    esp,0x38
c0017e54:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017e59:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e5f:	83 e0 04             	and    eax,0x4
c0017e62:	84 c0                	test   al,al
c0017e64:	0f 84 63 04 00 00    	je     c00182cd <scanMADT()+0x47d>
c0017e6a:	e8 76 fb ff ff       	call   c00179e5 <findRSDP()>
c0017e6f:	a3 8c 0e 03 c0       	mov    ds:0xc0030e8c,eax
c0017e74:	a1 8c 0e 03 c0       	mov    eax,ds:0xc0030e8c
c0017e79:	85 c0                	test   eax,eax
c0017e7b:	75 19                	jne    c0017e96 <scanMADT()+0x46>
c0017e7d:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017e82:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e88:	83 e2 fb             	and    edx,0xfffffffb
c0017e8b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e91:	e9 3b 04 00 00       	jmp    c00182d1 <scanMADT()+0x481>
c0017e96:	a1 8c 0e 03 c0       	mov    eax,ds:0xc0030e8c
c0017e9b:	83 ec 0c             	sub    esp,0xc
c0017e9e:	50                   	push   eax
c0017e9f:	e8 f2 fd ff ff       	call   c0017c96 <findRSDT(unsigned char*)>
c0017ea4:	83 c4 10             	add    esp,0x10
c0017ea7:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0017eac:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0017eb1:	85 c0                	test   eax,eax
c0017eb3:	75 19                	jne    c0017ece <scanMADT()+0x7e>
c0017eb5:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017eba:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ec0:	83 e2 fb             	and    edx,0xfffffffb
c0017ec3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ec9:	e9 03 04 00 00       	jmp    c00182d1 <scanMADT()+0x481>
c0017ece:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0017ed3:	83 ec 0c             	sub    esp,0xc
c0017ed6:	50                   	push   eax
c0017ed7:	e8 93 fb ff ff       	call   c0017a6f <loadACPITables(unsigned char*)>
c0017edc:	83 c4 10             	add    esp,0x10
c0017edf:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0017ee4:	83 ec 08             	sub    esp,0x8
c0017ee7:	68 a2 b5 02 c0       	push   0xc002b5a2
c0017eec:	50                   	push   eax
c0017eed:	e8 c2 fe ff ff       	call   c0017db4 <findDataTable(unsigned char*, char*)>
c0017ef2:	83 c4 10             	add    esp,0x10
c0017ef5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ef9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017efe:	75 19                	jne    c0017f19 <scanMADT()+0xc9>
c0017f00:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0017f05:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f0b:	83 e2 fe             	and    edx,0xfffffffe
c0017f0e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f14:	e9 b8 03 00 00       	jmp    c00182d1 <scanMADT()+0x481>
c0017f19:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f28:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f2c:	0f 87 9f 03 00 00    	ja     c00182d1 <scanMADT()+0x481>
c0017f32:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f3a:	0f 87 91 03 00 00    	ja     c00182d1 <scanMADT()+0x481>
c0017f40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f4c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f57:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f5b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f63:	8d 50 01             	lea    edx,[eax+0x1]
c0017f66:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f6e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f72:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f76:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f7b:	0f 86 4f 03 00 00    	jbe    c00182d0 <scanMADT()+0x480>
c0017f81:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f86:	75 57                	jne    c0017fdf <scanMADT()+0x18f>
c0017f88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f8f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f93:	8a 15 80 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031080
c0017f99:	0f b6 d2             	movzx  edx,dl
c0017f9c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fa0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fa4:	88 82 c0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef40],al
c0017faa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fae:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fb5:	8a 15 80 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031080
c0017fbb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fbe:	88 0d 80 10 03 c0    	mov    BYTE PTR ds:0xc0031080,cl
c0017fc4:	0f b6 d2             	movzx  edx,dl
c0017fc7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fcb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fcf:	88 82 a0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef60],al
c0017fd5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fda:	e9 da 02 00 00       	jmp    c00182b9 <scanMADT()+0x469>
c0017fdf:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017fe4:	0f 85 14 01 00 00    	jne    c00180fe <scanMADT()+0x2ae>
c0017fea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fee:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ff5:	8a 15 40 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f40
c0017ffb:	0f b6 d2             	movzx  edx,dl
c0017ffe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018002:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018006:	88 82 60 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0a0],al
c001800c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0018010:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018014:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018018:	01 d0                	add    eax,edx
c001801a:	83 c0 2c             	add    eax,0x2c
c001801d:	8a 00                	mov    al,BYTE PTR [eax]
c001801f:	0f b6 d0             	movzx  edx,al
c0018022:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018026:	8d 48 01             	lea    ecx,[eax+0x1]
c0018029:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001802d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018031:	0f b6 c0             	movzx  eax,al
c0018034:	c1 e0 08             	shl    eax,0x8
c0018037:	89 d1                	mov    ecx,edx
c0018039:	09 c1                	or     ecx,eax
c001803b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803f:	8d 50 02             	lea    edx,[eax+0x2]
c0018042:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018046:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001804a:	0f b6 c0             	movzx  eax,al
c001804d:	c1 e0 10             	shl    eax,0x10
c0018050:	09 c1                	or     ecx,eax
c0018052:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018056:	8d 50 03             	lea    edx,[eax+0x3]
c0018059:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001805d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018061:	0f b6 c0             	movzx  eax,al
c0018064:	c1 e0 18             	shl    eax,0x18
c0018067:	09 c1                	or     ecx,eax
c0018069:	89 ca                	mov    edx,ecx
c001806b:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c0018070:	0f b6 c0             	movzx  eax,al
c0018073:	89 14 85 80 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf080],edx
c001807a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001807f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018083:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018087:	01 d0                	add    eax,edx
c0018089:	83 c0 2c             	add    eax,0x2c
c001808c:	8a 00                	mov    al,BYTE PTR [eax]
c001808e:	0f b6 d0             	movzx  edx,al
c0018091:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018095:	8d 48 01             	lea    ecx,[eax+0x1]
c0018098:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180a0:	0f b6 c0             	movzx  eax,al
c00180a3:	c1 e0 08             	shl    eax,0x8
c00180a6:	89 d1                	mov    ecx,edx
c00180a8:	09 c1                	or     ecx,eax
c00180aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ae:	8d 50 02             	lea    edx,[eax+0x2]
c00180b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b9:	0f b6 c0             	movzx  eax,al
c00180bc:	c1 e0 10             	shl    eax,0x10
c00180bf:	09 c1                	or     ecx,eax
c00180c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c5:	8d 50 03             	lea    edx,[eax+0x3]
c00180c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180cc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180d0:	0f b6 c0             	movzx  eax,al
c00180d3:	c1 e0 18             	shl    eax,0x18
c00180d6:	09 c1                	or     ecx,eax
c00180d8:	89 ca                	mov    edx,ecx
c00180da:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c00180df:	0f b6 c0             	movzx  eax,al
c00180e2:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c00180e9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180ee:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c00180f3:	40                   	inc    eax
c00180f4:	a2 40 0f 03 c0       	mov    ds:0xc0030f40,al
c00180f9:	e9 bb 01 00 00       	jmp    c00182b9 <scanMADT()+0x469>
c00180fe:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018103:	0f 85 e9 00 00 00    	jne    c00181f2 <scanMADT()+0x3a2>
c0018109:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001810d:	8d 50 01             	lea    edx,[eax+0x1]
c0018110:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018114:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018118:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001811c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018120:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018124:	8d 50 01             	lea    edx,[eax+0x1]
c0018127:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001812b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001812f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018133:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018137:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001813b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813f:	01 d0                	add    eax,edx
c0018141:	83 c0 2c             	add    eax,0x2c
c0018144:	8a 00                	mov    al,BYTE PTR [eax]
c0018146:	0f b6 d0             	movzx  edx,al
c0018149:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018150:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018154:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018158:	0f b6 c0             	movzx  eax,al
c001815b:	c1 e0 08             	shl    eax,0x8
c001815e:	89 d1                	mov    ecx,edx
c0018160:	09 c1                	or     ecx,eax
c0018162:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018166:	8d 50 02             	lea    edx,[eax+0x2]
c0018169:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001816d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018171:	0f b6 c0             	movzx  eax,al
c0018174:	c1 e0 10             	shl    eax,0x10
c0018177:	09 c1                	or     ecx,eax
c0018179:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001817d:	8d 50 03             	lea    edx,[eax+0x3]
c0018180:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018184:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018188:	0f b6 c0             	movzx  eax,al
c001818b:	c1 e0 18             	shl    eax,0x18
c001818e:	09 c8                	or     eax,ecx
c0018190:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018194:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018199:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001819d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a1:	01 d0                	add    eax,edx
c00181a3:	83 c0 2c             	add    eax,0x2c
c00181a6:	8a 00                	mov    al,BYTE PTR [eax]
c00181a8:	0f b6 c0             	movzx  eax,al
c00181ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181af:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181ba:	0f b6 d2             	movzx  edx,dl
c00181bd:	c1 e2 08             	shl    edx,0x8
c00181c0:	09 d0                	or     eax,edx
c00181c2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181c7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181cc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181d5:	88 90 e0 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd2820],dl
c00181db:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181e0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181e5:	66 89 84 12 20 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf0e0],ax
c00181ed:	e9 c7 00 00 00       	jmp    c00182b9 <scanMADT()+0x469>
c00181f2:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181f7:	0f 85 b0 00 00 00    	jne    c00182ad <scanMADT()+0x45d>
c00181fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018201:	8d 50 01             	lea    edx,[eax+0x1]
c0018204:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018208:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001820c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018210:	0f b6 c0             	movzx  eax,al
c0018213:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018217:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001821b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001821f:	01 d0                	add    eax,edx
c0018221:	83 c0 2c             	add    eax,0x2c
c0018224:	8a 00                	mov    al,BYTE PTR [eax]
c0018226:	0f b6 d0             	movzx  edx,al
c0018229:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001822d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018230:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018234:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018238:	0f b6 c0             	movzx  eax,al
c001823b:	c1 e0 08             	shl    eax,0x8
c001823e:	09 d0                	or     eax,edx
c0018240:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018244:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018249:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001824d:	8d 50 01             	lea    edx,[eax+0x1]
c0018250:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018254:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018258:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001825c:	0f b6 c0             	movzx  eax,al
c001825f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018267:	c1 e0 08             	shl    eax,0x8
c001826a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001826e:	89 c1                	mov    ecx,eax
c0018270:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018274:	c1 e0 18             	shl    eax,0x18
c0018277:	89 c3                	mov    ebx,eax
c0018279:	a1 90 0e 03 c0       	mov    eax,ds:0xc0030e90
c001827e:	8d 50 01             	lea    edx,[eax+0x1]
c0018281:	89 15 90 0e 03 c0    	mov    DWORD PTR ds:0xc0030e90,edx
c0018287:	09 d9                	or     ecx,ebx
c0018289:	89 ca                	mov    edx,ecx
c001828b:	89 14 85 a0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf160],edx
c0018292:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001829a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001829e:	68 04 b7 02 c0       	push   0xc002b704
c00182a3:	e8 8e ad ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00182a8:	83 c4 10             	add    esp,0x10
c00182ab:	eb 0c                	jmp    c00182b9 <scanMADT()+0x469>
c00182ad:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182b2:	75 05                	jne    c00182b9 <scanMADT()+0x469>
c00182b4:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182b9:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182c2:	01 d0                	add    eax,edx
c00182c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182c8:	e9 54 fc ff ff       	jmp    c0017f21 <scanMADT()+0xd1>
c00182cd:	90                   	nop
c00182ce:	eb 01                	jmp    c00182d1 <scanMADT()+0x481>
c00182d0:	90                   	nop
c00182d1:	83 c4 38             	add    esp,0x38
c00182d4:	5b                   	pop    ebx
c00182d5:	c3                   	ret    

c00182d6 <ACPI::ACPI()>:
c00182d6:	83 ec 0c             	sub    esp,0xc
c00182d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182dd:	83 ec 08             	sub    esp,0x8
c00182e0:	68 a7 b5 02 c0       	push   0xc002b5a7
c00182e5:	50                   	push   eax
c00182e6:	e8 61 c3 ff ff       	call   c001464c <Device::Device(char const*)>
c00182eb:	83 c4 10             	add    esp,0x10
c00182ee:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c00182f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182f7:	89 10                	mov    DWORD PTR [eax],edx
c00182f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182fd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018308:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018316:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018324:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001832b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001832f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018336:	e8 15 fb ff ff       	call   c0017e50 <scanMADT()>
c001833b:	90                   	nop
c001833c:	83 c4 0c             	add    esp,0xc
c001833f:	c3                   	ret    

c0018340 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018340:	83 ec 2c             	sub    esp,0x2c
c0018343:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018347:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001834b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001834f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018353:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018358:	88 d0                	mov    al,dl
c001835a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001835e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018363:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001836b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001836f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018375:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018379:	0f 8d 97 00 00 00    	jge    c0018416 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001837f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018383:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018387:	83 c2 2a             	add    edx,0x2a
c001838a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001838e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018393:	75 78                	jne    c001840d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018399:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001839d:	83 c2 2a             	add    edx,0x2a
c00183a0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183a4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00183a8:	75 63                	jne    c001840d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183aa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183af:	74 3a                	je     c00183eb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183b9:	83 c2 2a             	add    edx,0x2a
c00183bc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183c7:	39 c2                	cmp    edx,eax
c00183c9:	74 10                	je     c00183db <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183cb:	83 ec 0c             	sub    esp,0xc
c00183ce:	68 40 b7 02 c0       	push   0xc002b740
c00183d3:	e8 0f 23 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c00183d8:	83 c4 10             	add    esp,0x10
c00183db:	83 ec 0c             	sub    esp,0xc
c00183de:	68 ac b5 02 c0       	push   0xc002b5ac
c00183e3:	e8 ff 22 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c00183e8:	83 c4 10             	add    esp,0x10
c00183eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f7:	83 c2 2a             	add    edx,0x2a
c00183fa:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0018400:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018403:	89 01                	mov    DWORD PTR [ecx],eax
c0018405:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018408:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001840d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018411:	e9 55 ff ff ff       	jmp    c001836b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018416:	90                   	nop
c0018417:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001841b:	83 c4 2c             	add    esp,0x2c
c001841e:	c2 04 00             	ret    0x4
c0018421:	90                   	nop

c0018422 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018422:	83 ec 1c             	sub    esp,0x1c
c0018425:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018429:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001842d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018431:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018436:	88 c8                	mov    al,cl
c0018438:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001843c:	88 d0                	mov    al,dl
c001843e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018446:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001844c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018450:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018453:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018457:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001845b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018465:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018469:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001846c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018470:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018479:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001847f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018483:	8d 48 01             	lea    ecx,[eax+0x1]
c0018486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001848a:	83 c2 2a             	add    edx,0x2a
c001848d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018495:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001849b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001849f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184a2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184a6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00184aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ae:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184b4:	8d 50 01             	lea    edx,[eax+0x1]
c00184b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184bb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184cb:	3d 00 02 00 00       	cmp    eax,0x200
c00184d0:	75 10                	jne    c00184e2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184d2:	83 ec 0c             	sub    esp,0xc
c00184d5:	68 bb b5 02 c0       	push   0xc002b5bb
c00184da:	e8 08 22 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c00184df:	83 c4 10             	add    esp,0x10
c00184e2:	90                   	nop
c00184e3:	83 c4 1c             	add    esp,0x1c
c00184e6:	c3                   	ret    
c00184e7:	90                   	nop

c00184e8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184e8:	b8 00 00 00 00       	mov    eax,0x0
c00184ed:	c3                   	ret    

c00184ee <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184ee:	83 ec 1c             	sub    esp,0x1c
c00184f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184f5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184f8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184fc:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0018501:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018506:	83 ec 08             	sub    esp,0x8
c0018509:	52                   	push   edx
c001850a:	50                   	push   eax
c001850b:	e8 48 69 ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018510:	83 c4 10             	add    esp,0x10
c0018513:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018517:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001851c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018521:	83 ec 04             	sub    esp,0x4
c0018524:	6a 01                	push   0x1
c0018526:	52                   	push   edx
c0018527:	50                   	push   eax
c0018528:	e8 41 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001852d:	83 c4 10             	add    esp,0x10
c0018530:	90                   	nop
c0018531:	83 c4 1c             	add    esp,0x1c
c0018534:	c3                   	ret    
c0018535:	90                   	nop

c0018536 <ACPI::open(int, int, void*)>:
c0018536:	53                   	push   ebx
c0018537:	83 ec 28             	sub    esp,0x28
c001853a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001853e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018545:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018549:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018550:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0018555:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001855b:	83 e0 04             	and    eax,0x4
c001855e:	84 c0                	test   al,al
c0018560:	74 47                	je     c00185a9 <ACPI::open(int, int, void*)+0x73>
c0018562:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0018567:	83 ec 08             	sub    esp,0x8
c001856a:	68 d8 b5 02 c0       	push   0xc002b5d8
c001856f:	50                   	push   eax
c0018570:	e8 3f f8 ff ff       	call   c0017db4 <findDataTable(unsigned char*, char*)>
c0018575:	83 c4 10             	add    esp,0x10
c0018578:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001857c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018581:	74 26                	je     c00185a9 <ACPI::open(int, int, void*)+0x73>
c0018583:	83 ec 0c             	sub    esp,0xc
c0018586:	68 dd b5 02 c0       	push   0xc002b5dd
c001858b:	e8 a6 aa ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018590:	83 c4 10             	add    esp,0x10
c0018593:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018597:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001859e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a2:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185a9:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00185b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185b5:	8a 00                	mov    al,BYTE PTR [eax]
c00185b7:	3c 01                	cmp    al,0x1
c00185b9:	75 28                	jne    c00185e3 <ACPI::open(int, int, void*)+0xad>
c00185bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185bf:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ca:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185d1:	83 ec 0c             	sub    esp,0xc
c00185d4:	68 ee b5 02 c0       	push   0xc002b5ee
c00185d9:	e8 58 aa ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00185de:	83 c4 10             	add    esp,0x10
c00185e1:	eb 25                	jmp    c0018608 <ACPI::open(int, int, void*)+0xd2>
c00185e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185e7:	8a 00                	mov    al,BYTE PTR [eax]
c00185e9:	3c 02                	cmp    al,0x2
c00185eb:	75 1b                	jne    c0018608 <ACPI::open(int, int, void*)+0xd2>
c00185ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185f8:	83 ec 0c             	sub    esp,0xc
c00185fb:	68 f6 b5 02 c0       	push   0xc002b5f6
c0018600:	e8 31 aa ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001860c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018612:	83 f0 01             	xor    eax,0x1
c0018615:	84 c0                	test   al,al
c0018617:	74 6a                	je     c0018683 <ACPI::open(int, int, void*)+0x14d>
c0018619:	83 ec 0c             	sub    esp,0xc
c001861c:	68 fe b5 02 c0       	push   0xc002b5fe
c0018621:	e8 10 aa ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018626:	83 c4 10             	add    esp,0x10
c0018629:	e8 22 7b fe ff       	call   c0000150 <manualPCIProbe>
c001862e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018632:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018637:	75 28                	jne    c0018661 <ACPI::open(int, int, void*)+0x12b>
c0018639:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001863d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018644:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018648:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001864f:	83 ec 0c             	sub    esp,0xc
c0018652:	68 0c b6 02 c0       	push   0xc002b60c
c0018657:	e8 da a9 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001865c:	83 c4 10             	add    esp,0x10
c001865f:	eb 22                	jmp    c0018683 <ACPI::open(int, int, void*)+0x14d>
c0018661:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018666:	75 1b                	jne    c0018683 <ACPI::open(int, int, void*)+0x14d>
c0018668:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001866c:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018673:	83 ec 0c             	sub    esp,0xc
c0018676:	68 16 b6 02 c0       	push   0xc002b616
c001867b:	e8 b6 a9 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018680:	83 c4 10             	add    esp,0x10
c0018683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018687:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001868d:	84 c0                	test   al,al
c001868f:	74 13                	je     c00186a4 <ACPI::open(int, int, void*)+0x16e>
c0018691:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018695:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001869b:	83 f0 01             	xor    eax,0x1
c001869e:	0f b6 c0             	movzx  eax,al
c00186a1:	40                   	inc    eax
c00186a2:	eb 05                	jmp    c00186a9 <ACPI::open(int, int, void*)+0x173>
c00186a4:	b8 00 00 00 00       	mov    eax,0x0
c00186a9:	83 ec 08             	sub    esp,0x8
c00186ac:	50                   	push   eax
c00186ad:	68 20 b6 02 c0       	push   0xc002b620
c00186b2:	e8 7f a9 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00186b7:	83 c4 10             	add    esp,0x10
c00186ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186be:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186c4:	84 c0                	test   al,al
c00186c6:	74 67                	je     c001872f <ACPI::open(int, int, void*)+0x1f9>
c00186c8:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00186d0:	83 ec 0c             	sub    esp,0xc
c00186d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186d7:	e8 64 71 ff ff       	call   c000f840 <malloc>
c00186dc:	83 c4 10             	add    esp,0x10
c00186df:	89 c3                	mov    ebx,eax
c00186e1:	83 ec 0c             	sub    esp,0xc
c00186e4:	53                   	push   ebx
c00186e5:	e8 dc a2 00 00       	call   c00229c6 <PCI::PCI()>
c00186ea:	83 c4 10             	add    esp,0x10
c00186ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186f5:	83 ec 08             	sub    esp,0x8
c00186f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186fc:	50                   	push   eax
c00186fd:	e8 5a bd ff ff       	call   c001445c <Device::addChild(Device*)>
c0018702:	83 c4 10             	add    esp,0x10
c0018705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018709:	8b 00                	mov    eax,DWORD PTR [eax]
c001870b:	83 c0 08             	add    eax,0x8
c001870e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018710:	6a 00                	push   0x0
c0018712:	6a 00                	push   0x0
c0018714:	6a 00                	push   0x0
c0018716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001871a:	ff d0                	call   eax
c001871c:	83 c4 10             	add    esp,0x10
c001871f:	83 ec 0c             	sub    esp,0xc
c0018722:	68 29 b6 02 c0       	push   0xc002b629
c0018727:	e8 0a a9 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001872c:	83 c4 10             	add    esp,0x10
c001872f:	83 ec 0c             	sub    esp,0xc
c0018732:	68 34 b6 02 c0       	push   0xc002b634
c0018737:	e8 81 46 00 00       	call   c001cdbd <Thr::loadKernelSymbolTable(char const*)>
c001873c:	83 c4 10             	add    esp,0x10
c001873f:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c0018745:	83 ec 08             	sub    esp,0x8
c0018748:	6a 01                	push   0x1
c001874a:	68 52 b6 02 c0       	push   0xc002b652
c001874f:	e8 c6 50 00 00       	call   c001d81a <Thr::loadDLL(char const*, bool)>
c0018754:	83 c4 10             	add    esp,0x10
c0018757:	83 ec 08             	sub    esp,0x8
c001875a:	53                   	push   ebx
c001875b:	50                   	push   eax
c001875c:	e8 ed 52 00 00       	call   c001da4e <Thr::executeDLL(unsigned long, void*)>
c0018761:	83 c4 10             	add    esp,0x10
c0018764:	8b 1d 88 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e588
c001876a:	83 ec 08             	sub    esp,0x8
c001876d:	6a 01                	push   0x1
c001876f:	68 6f b6 02 c0       	push   0xc002b66f
c0018774:	e8 a1 50 00 00       	call   c001d81a <Thr::loadDLL(char const*, bool)>
c0018779:	83 c4 10             	add    esp,0x10
c001877c:	83 ec 08             	sub    esp,0x8
c001877f:	53                   	push   ebx
c0018780:	50                   	push   eax
c0018781:	e8 c8 52 00 00       	call   c001da4e <Thr::executeDLL(unsigned long, void*)>
c0018786:	83 c4 10             	add    esp,0x10
c0018789:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001878e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018794:	83 e0 04             	and    eax,0x4
c0018797:	84 c0                	test   al,al
c0018799:	0f 84 d2 00 00 00    	je     c0018871 <ACPI::open(int, int, void*)+0x33b>
c001879f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00187a6:	83 ec 0c             	sub    esp,0xc
c00187a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00187ad:	e8 8e 70 ff ff       	call   c000f840 <malloc>
c00187b2:	83 c4 10             	add    esp,0x10
c00187b5:	89 c3                	mov    ebx,eax
c00187b7:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c00187bc:	83 ec 04             	sub    esp,0x4
c00187bf:	50                   	push   eax
c00187c0:	68 8c b6 02 c0       	push   0xc002b68c
c00187c5:	53                   	push   ebx
c00187c6:	e8 c3 ad ff ff       	call   c001358e <File::File(char const*, Process*)>
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00187d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187d7:	74 17                	je     c00187f0 <ACPI::open(int, int, void*)+0x2ba>
c00187d9:	83 ec 0c             	sub    esp,0xc
c00187dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187e0:	e8 7b b0 ff ff       	call   c0013860 <File::exists()>
c00187e5:	83 c4 10             	add    esp,0x10
c00187e8:	84 c0                	test   al,al
c00187ea:	74 04                	je     c00187f0 <ACPI::open(int, int, void*)+0x2ba>
c00187ec:	b0 01                	mov    al,0x1
c00187ee:	eb 02                	jmp    c00187f2 <ACPI::open(int, int, void*)+0x2bc>
c00187f0:	b0 00                	mov    al,0x0
c00187f2:	84 c0                	test   al,al
c00187f4:	74 22                	je     c0018818 <ACPI::open(int, int, void*)+0x2e2>
c00187f6:	83 ec 08             	sub    esp,0x8
c00187f9:	6a 01                	push   0x1
c00187fb:	68 8c b6 02 c0       	push   0xc002b68c
c0018800:	e8 15 50 00 00       	call   c001d81a <Thr::loadDLL(char const*, bool)>
c0018805:	83 c4 10             	add    esp,0x10
c0018808:	83 ec 08             	sub    esp,0x8
c001880b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001880f:	50                   	push   eax
c0018810:	e8 39 52 00 00       	call   c001da4e <Thr::executeDLL(unsigned long, void*)>
c0018815:	83 c4 10             	add    esp,0x10
c0018818:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001881d:	74 1e                	je     c001883d <ACPI::open(int, int, void*)+0x307>
c001881f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018824:	74 17                	je     c001883d <ACPI::open(int, int, void*)+0x307>
c0018826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001882a:	8b 00                	mov    eax,DWORD PTR [eax]
c001882c:	83 c0 08             	add    eax,0x8
c001882f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018831:	83 ec 0c             	sub    esp,0xc
c0018834:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018838:	ff d0                	call   eax
c001883a:	83 c4 10             	add    esp,0x10
c001883d:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0018842:	83 ec 08             	sub    esp,0x8
c0018845:	68 a9 b6 02 c0       	push   0xc002b6a9
c001884a:	50                   	push   eax
c001884b:	e8 64 f5 ff ff       	call   c0017db4 <findDataTable(unsigned char*, char*)>
c0018850:	83 c4 10             	add    esp,0x10
c0018853:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018857:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001885c:	74 13                	je     c0018871 <ACPI::open(int, int, void*)+0x33b>
c001885e:	83 ec 08             	sub    esp,0x8
c0018861:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018865:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018869:	e8 80 fc ff ff       	call   c00184ee <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001886e:	83 c4 10             	add    esp,0x10
c0018871:	b8 00 00 00 00       	mov    eax,0x0
c0018876:	83 c4 28             	add    esp,0x28
c0018879:	5b                   	pop    ebx
c001887a:	c3                   	ret    
c001887b:	90                   	nop

c001887c <ACPI::sleep()>:
c001887c:	83 ec 0c             	sub    esp,0xc
c001887f:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c0018884:	85 c0                	test   eax,eax
c0018886:	74 07                	je     c001888f <ACPI::sleep()+0x13>
c0018888:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c001888d:	ff d0                	call   eax
c001888f:	90                   	nop
c0018890:	83 c4 0c             	add    esp,0xc
c0018893:	c3                   	ret    

c0018894 <CPU::close(int, int, void*)>:
c0018894:	31 c0                	xor    eax,eax
c0018896:	c3                   	ret    
c0018897:	90                   	nop

c0018898 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018898:	55                   	push   ebp
c0018899:	57                   	push   edi
c001889a:	56                   	push   esi
c001889b:	53                   	push   ebx
c001889c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00188a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188a4:	89 ce                	mov    esi,ecx
c00188a6:	89 d5                	mov    ebp,edx
c00188a8:	80 f9 04             	cmp    cl,0x4
c00188ab:	75 28                	jne    c00188d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00188ad:	8d 42 f9             	lea    eax,[edx-0x7]
c00188b0:	3c 03                	cmp    al,0x3
c00188b2:	0f 86 63 01 00 00    	jbe    c0018a1b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00188b8:	80 fa 03             	cmp    dl,0x3
c00188bb:	0f 84 5a 01 00 00    	je     c0018a1b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00188c1:	8d 7a f2             	lea    edi,[edx-0xe]
c00188c4:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c00188c9:	89 fb                	mov    ebx,edi
c00188cb:	80 fb 01             	cmp    bl,0x1
c00188ce:	77 4e                	ja     c001891e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00188d0:	e9 52 01 00 00       	jmp    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d5:	80 f9 05             	cmp    cl,0x5
c00188d8:	75 4d                	jne    c0018927 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00188da:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00188df:	80 fa 03             	cmp    dl,0x3
c00188e2:	0f 86 3f 01 00 00    	jbe    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e8:	8d 7a fa             	lea    edi,[edx-0x6]
c00188eb:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c00188f0:	89 fb                	mov    ebx,edi
c00188f2:	80 fb 01             	cmp    bl,0x1
c00188f5:	0f 86 2c 01 00 00    	jbe    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fb:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018900:	80 fa 08             	cmp    dl,0x8
c0018903:	0f 84 1e 01 00 00    	je     c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018909:	89 d7                	mov    edi,edx
c001890b:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018910:	83 e7 fb             	and    edi,0xfffffffb
c0018913:	89 fb                	mov    ebx,edi
c0018915:	80 fb 09             	cmp    bl,0x9
c0018918:	0f 84 09 01 00 00    	je     c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891e:	31 c0                	xor    eax,eax
c0018920:	89 eb                	mov    ebx,ebp
c0018922:	0f b6 fb             	movzx  edi,bl
c0018925:	eb 30                	jmp    c0018957 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018927:	31 c0                	xor    eax,eax
c0018929:	80 f9 06             	cmp    cl,0x6
c001892c:	75 f2                	jne    c0018920 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001892e:	80 fa 0a             	cmp    dl,0xa
c0018931:	77 ed                	ja     c0018920 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018933:	bf de 05 00 00       	mov    edi,0x5de
c0018938:	0f a3 d7             	bt     edi,edx
c001893b:	73 e3                	jae    c0018920 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001893d:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018942:	e9 e0 00 00 00       	jmp    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018947:	39 c7                	cmp    edi,eax
c0018949:	0f 84 d3 00 00 00    	je     c0018a22 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001894f:	40                   	inc    eax
c0018950:	3d d0 00 00 00       	cmp    eax,0xd0
c0018955:	74 09                	je     c0018960 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018957:	89 f3                	mov    ebx,esi
c0018959:	80 fb 0f             	cmp    bl,0xf
c001895c:	75 f1                	jne    c001894f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001895e:	eb e7                	jmp    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018960:	80 f9 10             	cmp    cl,0x10
c0018963:	75 14                	jne    c0018979 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018965:	8d 42 fc             	lea    eax,[edx-0x4]
c0018968:	83 e0 fb             	and    eax,0xfffffffb
c001896b:	3c 02                	cmp    al,0x2
c001896d:	76 34                	jbe    c00189a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001896f:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c0018974:	80 fa 02             	cmp    dl,0x2
c0018977:	eb 24                	jmp    c001899d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018979:	80 f9 11             	cmp    cl,0x11
c001897c:	75 13                	jne    c0018991 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001897e:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c0018983:	80 fa 03             	cmp    dl,0x3
c0018986:	0f 85 9b 00 00 00    	jne    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001898c:	e9 91 00 00 00       	jmp    c0018a22 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018991:	80 f9 12             	cmp    cl,0x12
c0018994:	75 14                	jne    c00189aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018996:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c001899b:	fe ca                	dec    dl
c001899d:	0f 85 84 00 00 00    	jne    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a3:	b8 20 da 02 c0       	mov    eax,0xc002da20
c00189a8:	eb 7d                	jmp    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189aa:	80 f9 14             	cmp    cl,0x14
c00189ad:	75 12                	jne    c00189c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00189af:	4a                   	dec    edx
c00189b0:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c00189b5:	80 fa 01             	cmp    dl,0x1
c00189b8:	77 6d                	ja     c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ba:	b8 30 da 02 c0       	mov    eax,0xc002da30
c00189bf:	eb 66                	jmp    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c1:	80 f9 15             	cmp    cl,0x15
c00189c4:	75 31                	jne    c00189f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00189c6:	b8 40 da 02 c0       	mov    eax,0xc002da40
c00189cb:	80 fa 01             	cmp    dl,0x1
c00189ce:	74 57                	je     c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d0:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c00189d5:	80 fa 13             	cmp    dl,0x13
c00189d8:	76 0c                	jbe    c00189e6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00189da:	80 fa 30             	cmp    dl,0x30
c00189dd:	75 48                	jne    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189df:	b8 60 da 02 c0       	mov    eax,0xc002da60
c00189e4:	eb 41                	jmp    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189e6:	b9 04 00 09 00       	mov    ecx,0x90004
c00189eb:	0f a3 d1             	bt     ecx,edx
c00189ee:	73 37                	jae    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189f0:	b8 50 da 02 c0       	mov    eax,0xc002da50
c00189f5:	eb 30                	jmp    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189f7:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c00189fc:	80 f9 16             	cmp    cl,0x16
c00189ff:	75 26                	jne    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a01:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018a06:	84 d2                	test   dl,dl
c0018a08:	74 1d                	je     c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a0a:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c0018a0f:	80 fa 30             	cmp    dl,0x30
c0018a12:	75 13                	jne    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a14:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018a19:	eb 0c                	jmp    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a1b:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a20:	eb 05                	jmp    c0018a27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a22:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018a27:	5b                   	pop    ebx
c0018a28:	5e                   	pop    esi
c0018a29:	5f                   	pop    edi
c0018a2a:	5d                   	pop    ebp
c0018a2b:	c3                   	ret    

c0018a2c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018a2c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a34:	80 f9 04             	cmp    cl,0x4
c0018a37:	75 6b                	jne    c0018aa4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018a39:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a3e:	80 fa 01             	cmp    dl,0x1
c0018a41:	0f 86 92 02 00 00    	jbe    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a47:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a4c:	80 fa 02             	cmp    dl,0x2
c0018a4f:	0f 84 84 02 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a55:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018a5a:	80 fa 03             	cmp    dl,0x3
c0018a5d:	0f 84 76 02 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a63:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018a68:	80 fa 04             	cmp    dl,0x4
c0018a6b:	0f 84 68 02 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a71:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018a76:	80 fa 05             	cmp    dl,0x5
c0018a79:	0f 84 5a 02 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7f:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018a84:	80 fa 07             	cmp    dl,0x7
c0018a87:	0f 84 4c 02 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8d:	83 ea 08             	sub    edx,0x8
c0018a90:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c0018a95:	80 fa 01             	cmp    dl,0x1
c0018a98:	0f 87 3b 02 00 00    	ja     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9e:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018aa3:	c3                   	ret    
c0018aa4:	80 f9 05             	cmp    cl,0x5
c0018aa7:	75 45                	jne    c0018aee <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018aa9:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018aac:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018ab1:	80 f9 02             	cmp    cl,0x2
c0018ab4:	0f 86 1f 02 00 00    	jbe    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aba:	80 fa 04             	cmp    dl,0x4
c0018abd:	0f 84 f3 01 00 00    	je     c0018cb6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018ac3:	80 fa 07             	cmp    dl,0x7
c0018ac6:	0f 84 0d 02 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acc:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018ad1:	80 fa 08             	cmp    dl,0x8
c0018ad4:	0f 84 ff 01 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ada:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c0018adf:	80 fa 09             	cmp    dl,0x9
c0018ae2:	0f 85 f1 01 00 00    	jne    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae8:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018aed:	c3                   	ret    
c0018aee:	80 f9 06             	cmp    cl,0x6
c0018af1:	0f 85 85 01 00 00    	jne    c0018c7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018af7:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018afc:	80 fa 01             	cmp    dl,0x1
c0018aff:	0f 84 d4 01 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b05:	8d 42 fb             	lea    eax,[edx-0x5]
c0018b08:	3c 01                	cmp    al,0x1
c0018b0a:	0f 86 ac 01 00 00    	jbe    c0018cbc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018b10:	80 fa 03             	cmp    dl,0x3
c0018b13:	0f 84 a3 01 00 00    	je     c0018cbc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018b19:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018b1c:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018b21:	80 f9 01             	cmp    cl,0x1
c0018b24:	0f 86 af 01 00 00    	jbe    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2a:	80 fa 09             	cmp    dl,0x9
c0018b2d:	0f 84 8f 01 00 00    	je     c0018cc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018b33:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018b36:	80 f9 01             	cmp    cl,0x1
c0018b39:	0f 86 9a 01 00 00    	jbe    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3f:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b44:	80 fa 0d             	cmp    dl,0xd
c0018b47:	0f 84 8c 01 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4d:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018b52:	80 fa 0e             	cmp    dl,0xe
c0018b55:	0f 84 7e 01 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5b:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018b60:	80 fa 0f             	cmp    dl,0xf
c0018b63:	0f 84 70 01 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b69:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b6e:	80 fa 15             	cmp    dl,0x15
c0018b71:	0f 84 62 01 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b77:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b7a:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018b7f:	80 f9 01             	cmp    cl,0x1
c0018b82:	0f 86 51 01 00 00    	jbe    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b88:	80 fa 1a             	cmp    dl,0x1a
c0018b8b:	0f 84 37 01 00 00    	je     c0018cc8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b91:	80 fa 1c             	cmp    dl,0x1c
c0018b94:	0f 84 34 01 00 00    	je     c0018cce <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b9a:	80 fa 1d             	cmp    dl,0x1d
c0018b9d:	0f 84 36 01 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba3:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018ba8:	80 fa 25             	cmp    dl,0x25
c0018bab:	0f 84 28 01 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb1:	8d 4a da             	lea    ecx,[edx-0x26]
c0018bb4:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018bb9:	80 f9 01             	cmp    cl,0x1
c0018bbc:	0f 86 17 01 00 00    	jbe    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc2:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018bc7:	80 fa 2a             	cmp    dl,0x2a
c0018bca:	0f 84 09 01 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd0:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018bd5:	80 fa 2c             	cmp    dl,0x2c
c0018bd8:	0f 84 fb 00 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bde:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018be3:	80 fa 2d             	cmp    dl,0x2d
c0018be6:	0f 84 ed 00 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bec:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018bf1:	80 fa 2e             	cmp    dl,0x2e
c0018bf4:	0f 84 df 00 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfa:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018bff:	80 fa 2f             	cmp    dl,0x2f
c0018c02:	0f 84 d1 00 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c08:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018c0b:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018c10:	80 f9 01             	cmp    cl,0x1
c0018c13:	0f 86 c0 00 00 00    	jbe    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c19:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018c1e:	80 fa 37             	cmp    dl,0x37
c0018c21:	0f 84 b2 00 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c27:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018c2c:	80 fa 3a             	cmp    dl,0x3a
c0018c2f:	0f 84 a4 00 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c35:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018c3a:	80 fa 3c             	cmp    dl,0x3c
c0018c3d:	0f 84 96 00 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c43:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018c48:	80 fa 3d             	cmp    dl,0x3d
c0018c4b:	0f 84 88 00 00 00    	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c51:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018c56:	80 fa 3e             	cmp    dl,0x3e
c0018c59:	74 7e                	je     c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5b:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c5e:	3c 01                	cmp    al,0x1
c0018c60:	76 72                	jbe    c0018cd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c62:	80 fa 3f             	cmp    dl,0x3f
c0018c65:	74 6d                	je     c0018cd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c67:	80 fa 4a             	cmp    dl,0x4a
c0018c6a:	74 0a                	je     c0018c76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c6c:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c0018c71:	80 fa 4d             	cmp    dl,0x4d
c0018c74:	75 63                	jne    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c76:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018c7b:	c3                   	ret    
c0018c7c:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c0018c81:	80 f9 0b             	cmp    cl,0xb
c0018c84:	75 0a                	jne    c0018c90 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c86:	fe ca                	dec    dl
c0018c88:	75 4f                	jne    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c8a:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018c8f:	c3                   	ret    
c0018c90:	80 f9 0f             	cmp    cl,0xf
c0018c93:	75 44                	jne    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c95:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018c9a:	80 fa 02             	cmp    dl,0x2
c0018c9d:	76 3a                	jbe    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c9f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018ca2:	3c 01                	cmp    al,0x1
c0018ca4:	76 0a                	jbe    c0018cb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018ca6:	b8 8e ba 02 c0       	mov    eax,0xc002ba8e
c0018cab:	80 fa 06             	cmp    dl,0x6
c0018cae:	75 29                	jne    c0018cd9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cb0:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018cb5:	c3                   	ret    
c0018cb6:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018cbb:	c3                   	ret    
c0018cbc:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018cc1:	c3                   	ret    
c0018cc2:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018cc7:	c3                   	ret    
c0018cc8:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018ccd:	c3                   	ret    
c0018cce:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018cd3:	c3                   	ret    
c0018cd4:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018cd9:	c3                   	ret    

c0018cda <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018cda:	60                   	pusha  
c0018cdb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ce3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ce7:	9c                   	pushf  
c0018ce8:	fa                   	cli    
c0018ce9:	0f 09                	wbinvd 
c0018ceb:	0f 30                	wrmsr  
c0018ced:	9d                   	popf   
c0018cee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cf2:	89 02                	mov    DWORD PTR [edx],eax
c0018cf4:	61                   	popa   
c0018cf5:	c3                   	ret    

c0018cf6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018cf6:	60                   	pusha  
c0018cf7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cfb:	9c                   	pushf  
c0018cfc:	fa                   	cli    
c0018cfd:	0f 09                	wbinvd 
c0018cff:	31 c0                	xor    eax,eax
c0018d01:	31 d2                	xor    edx,edx
c0018d03:	0f 32                	rdmsr  
c0018d05:	9d                   	popf   
c0018d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d0a:	89 02                	mov    DWORD PTR [edx],eax
c0018d0c:	61                   	popa   
c0018d0d:	c3                   	ret    

c0018d0e <CPU::AMD_K6_writeback(int, int, int)>:
c0018d0e:	56                   	push   esi
c0018d0f:	53                   	push   ebx
c0018d10:	83 ec 10             	sub    esp,0x10
c0018d13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d17:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018d1c:	75 5d                	jne    c0018d7b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d1e:	83 f8 08             	cmp    eax,0x8
c0018d21:	75 09                	jne    c0018d2c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018d23:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018d28:	7e 13                	jle    c0018d3d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018d2a:	eb 30                	jmp    c0018d5c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018d2c:	83 f8 06             	cmp    eax,0x6
c0018d2f:	7c 4a                	jl     c0018d7b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d31:	83 f8 07             	cmp    eax,0x7
c0018d34:	7e 07                	jle    c0018d3d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018d36:	83 f8 09             	cmp    eax,0x9
c0018d39:	74 21                	je     c0018d5c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018d3b:	eb 3e                	jmp    c0018d7b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d3d:	89 e6                	mov    esi,esp
c0018d3f:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0018d45:	56                   	push   esi
c0018d46:	c1 eb 15             	shr    ebx,0x15
c0018d49:	68 82 00 00 c0       	push   0xc0000082
c0018d4e:	83 e3 7e             	and    ebx,0x7e
c0018d51:	e8 a0 ff ff ff       	call   c0018cf6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d56:	56                   	push   esi
c0018d57:	6a 00                	push   0x0
c0018d59:	53                   	push   ebx
c0018d5a:	eb 12                	jmp    c0018d6e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d5c:	89 e3                	mov    ebx,esp
c0018d5e:	53                   	push   ebx
c0018d5f:	68 82 00 00 c0       	push   0xc0000082
c0018d64:	e8 8d ff ff ff       	call   c0018cf6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d69:	53                   	push   ebx
c0018d6a:	6a 00                	push   0x0
c0018d6c:	6a 00                	push   0x0
c0018d6e:	68 82 00 00 c0       	push   0xc0000082
c0018d73:	e8 62 ff ff ff       	call   c0018cda <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d78:	83 c4 18             	add    esp,0x18
c0018d7b:	83 c4 10             	add    esp,0x10
c0018d7e:	5b                   	pop    ebx
c0018d7f:	5e                   	pop    esi
c0018d80:	c3                   	ret    
c0018d81:	90                   	nop

c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d82:	55                   	push   ebp
c0018d83:	57                   	push   edi
c0018d84:	56                   	push   esi
c0018d85:	53                   	push   ebx
c0018d86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d8a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d8e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d92:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d96:	39 05 a0 da 02 c0    	cmp    DWORD PTR ds:0xc002daa0,eax
c0018d9c:	75 23                	jne    c0018dc1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d9e:	a1 ec 10 03 c0       	mov    eax,ds:0xc00310ec
c0018da3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018da7:	89 06                	mov    DWORD PTR [esi],eax
c0018da9:	a1 e8 10 03 c0       	mov    eax,ds:0xc00310e8
c0018dae:	89 07                	mov    DWORD PTR [edi],eax
c0018db0:	a1 e4 10 03 c0       	mov    eax,ds:0xc00310e4
c0018db5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018db8:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c0018dbd:	89 02                	mov    DWORD PTR [edx],eax
c0018dbf:	eb 3f                	jmp    c0018e00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018dc1:	31 c9                	xor    ecx,ecx
c0018dc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dc7:	0f a2                	cpuid  
c0018dc9:	89 06                	mov    DWORD PTR [esi],eax
c0018dcb:	89 1f                	mov    DWORD PTR [edi],ebx
c0018dcd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dd1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018dd4:	89 10                	mov    DWORD PTR [eax],edx
c0018dd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dda:	a3 a0 da 02 c0       	mov    ds:0xc002daa0,eax
c0018ddf:	8b 06                	mov    eax,DWORD PTR [esi]
c0018de1:	a3 ec 10 03 c0       	mov    ds:0xc00310ec,eax
c0018de6:	8b 07                	mov    eax,DWORD PTR [edi]
c0018de8:	a3 e8 10 03 c0       	mov    ds:0xc00310e8,eax
c0018ded:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018df0:	a3 e4 10 03 c0       	mov    ds:0xc00310e4,eax
c0018df5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dfb:	a3 e0 10 03 c0       	mov    ds:0xc00310e0,eax
c0018e00:	5b                   	pop    ebx
c0018e01:	5e                   	pop    esi
c0018e02:	5f                   	pop    edi
c0018e03:	5d                   	pop    ebp
c0018e04:	c3                   	ret    
c0018e05:	90                   	nop

c0018e06 <CPU::cpuidCheckEDX(unsigned int)>:
c0018e06:	83 ec 10             	sub    esp,0x10
c0018e09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e0d:	50                   	push   eax
c0018e0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e12:	50                   	push   eax
c0018e13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e17:	50                   	push   eax
c0018e18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1c:	50                   	push   eax
c0018e1d:	6a 01                	push   0x1
c0018e1f:	e8 5e ff ff ff       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e28:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018e2c:	0f 95 c0             	setne  al
c0018e2f:	83 c4 24             	add    esp,0x24
c0018e32:	c3                   	ret    
c0018e33:	90                   	nop

c0018e34 <CPU::cpuidCheckECX(unsigned int)>:
c0018e34:	83 ec 10             	sub    esp,0x10
c0018e37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e3b:	50                   	push   eax
c0018e3c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e40:	50                   	push   eax
c0018e41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e45:	50                   	push   eax
c0018e46:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4a:	50                   	push   eax
c0018e4b:	6a 01                	push   0x1
c0018e4d:	e8 30 ff ff ff       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e56:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e5a:	0f 95 c0             	setne  al
c0018e5d:	83 c4 24             	add    esp,0x24
c0018e60:	c3                   	ret    
c0018e61:	90                   	nop

c0018e62 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e62:	83 ec 10             	sub    esp,0x10
c0018e65:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e69:	50                   	push   eax
c0018e6a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e6e:	50                   	push   eax
c0018e6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e73:	50                   	push   eax
c0018e74:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e78:	50                   	push   eax
c0018e79:	6a 07                	push   0x7
c0018e7b:	e8 02 ff ff ff       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e84:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e88:	0f 95 c0             	setne  al
c0018e8b:	83 c4 24             	add    esp,0x24
c0018e8e:	c3                   	ret    
c0018e8f:	90                   	nop

c0018e90 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e90:	83 ec 10             	sub    esp,0x10
c0018e93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e97:	50                   	push   eax
c0018e98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e9c:	50                   	push   eax
c0018e9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ea1:	50                   	push   eax
c0018ea2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ea6:	50                   	push   eax
c0018ea7:	6a 07                	push   0x7
c0018ea9:	e8 d4 fe ff ff       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018eae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018eb2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018eb6:	0f 95 c0             	setne  al
c0018eb9:	83 c4 24             	add    esp,0x24
c0018ebc:	c3                   	ret    
c0018ebd:	90                   	nop

c0018ebe <CPU::CPU()>:
c0018ebe:	83 ec 0c             	sub    esp,0xc
c0018ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec5:	83 ec 08             	sub    esp,0x8
c0018ec8:	68 8e ba 02 c0       	push   0xc002ba8e
c0018ecd:	50                   	push   eax
c0018ece:	e8 79 b7 ff ff       	call   c001464c <Device::Device(char const*)>
c0018ed3:	83 c4 10             	add    esp,0x10
c0018ed6:	ba 68 bb 02 c0       	mov    edx,0xc002bb68
c0018edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018edf:	89 10                	mov    DWORD PTR [eax],edx
c0018ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ee5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ef3:	05 78 01 00 00       	add    eax,0x178
c0018ef8:	83 ec 0c             	sub    esp,0xc
c0018efb:	50                   	push   eax
c0018efc:	e8 57 61 ff ff       	call   c000f058 <GDT::GDT()>
c0018f01:	83 c4 10             	add    esp,0x10
c0018f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f08:	05 7c 09 00 00       	add    eax,0x97c
c0018f0d:	83 ec 0c             	sub    esp,0xc
c0018f10:	50                   	push   eax
c0018f11:	e8 a4 63 ff ff       	call   c000f2ba <IDT::IDT()>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f1d:	05 7c 11 00 00       	add    eax,0x117c
c0018f22:	83 ec 0c             	sub    esp,0xc
c0018f25:	50                   	push   eax
c0018f26:	e8 e9 85 ff ff       	call   c0011514 <TSS::TSS()>
c0018f2b:	83 c4 10             	add    esp,0x10
c0018f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f32:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f3d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018f47:	90                   	nop
c0018f48:	83 c4 0c             	add    esp,0xc
c0018f4b:	c3                   	ret    

c0018f4c <CPU::displayFeatures()>:
c0018f4c:	53                   	push   ebx
c0018f4d:	83 ec 10             	sub    esp,0x10
c0018f50:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018f54:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f5a:	68 9c b7 02 c0       	push   0xc002b79c
c0018f5f:	e8 d2 a0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018f64:	59                   	pop    ecx
c0018f65:	58                   	pop    eax
c0018f66:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f6c:	50                   	push   eax
c0018f6d:	68 ad b7 02 c0       	push   0xc002b7ad
c0018f72:	e8 bf a0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018f77:	58                   	pop    eax
c0018f78:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f7e:	5a                   	pop    edx
c0018f7f:	c1 e8 0e             	shr    eax,0xe
c0018f82:	0f b6 c0             	movzx  eax,al
c0018f85:	50                   	push   eax
c0018f86:	68 be b7 02 c0       	push   0xc002b7be
c0018f8b:	e8 a6 a0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018f90:	59                   	pop    ecx
c0018f91:	58                   	pop    eax
c0018f92:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f98:	66 c1 e8 06          	shr    ax,0x6
c0018f9c:	0f b6 c0             	movzx  eax,al
c0018f9f:	50                   	push   eax
c0018fa0:	68 cf b7 02 c0       	push   0xc002b7cf
c0018fa5:	e8 8c a0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018faa:	c7 04 24 7c bc 02 c0 	mov    DWORD PTR [esp],0xc002bc7c
c0018fb1:	e8 80 a0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018fb6:	83 c4 10             	add    esp,0x10
c0018fb9:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018fbe:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018fc5:	74 05                	je     c0018fcc <CPU::displayFeatures()+0x80>
c0018fc7:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018fcc:	52                   	push   edx
c0018fcd:	52                   	push   edx
c0018fce:	50                   	push   eax
c0018fcf:	68 e0 b7 02 c0       	push   0xc002b7e0
c0018fd4:	e8 5d a0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018fd9:	83 c4 10             	add    esp,0x10
c0018fdc:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018fe1:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018fe8:	78 05                	js     c0018fef <CPU::displayFeatures()+0xa3>
c0018fea:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018fef:	51                   	push   ecx
c0018ff0:	51                   	push   ecx
c0018ff1:	50                   	push   eax
c0018ff2:	68 f7 b7 02 c0       	push   0xc002b7f7
c0018ff7:	e8 3a a0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0018ffc:	83 c4 10             	add    esp,0x10
c0018fff:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019004:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001900b:	75 05                	jne    c0019012 <CPU::displayFeatures()+0xc6>
c001900d:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019012:	52                   	push   edx
c0019013:	52                   	push   edx
c0019014:	50                   	push   eax
c0019015:	68 0e b8 02 c0       	push   0xc002b80e
c001901a:	e8 17 a0 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019027:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001902e:	75 05                	jne    c0019035 <CPU::displayFeatures()+0xe9>
c0019030:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019035:	51                   	push   ecx
c0019036:	51                   	push   ecx
c0019037:	50                   	push   eax
c0019038:	68 25 b8 02 c0       	push   0xc002b825
c001903d:	e8 f4 9f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0019042:	83 c4 10             	add    esp,0x10
c0019045:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001904a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019051:	75 05                	jne    c0019058 <CPU::displayFeatures()+0x10c>
c0019053:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019058:	52                   	push   edx
c0019059:	52                   	push   edx
c001905a:	50                   	push   eax
c001905b:	68 3c b8 02 c0       	push   0xc002b83c
c0019060:	e8 d1 9f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0019065:	83 c4 10             	add    esp,0x10
c0019068:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001906d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019074:	75 05                	jne    c001907b <CPU::displayFeatures()+0x12f>
c0019076:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001907b:	51                   	push   ecx
c001907c:	51                   	push   ecx
c001907d:	50                   	push   eax
c001907e:	68 53 b8 02 c0       	push   0xc002b853
c0019083:	e8 ae 9f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0019088:	83 c4 10             	add    esp,0x10
c001908b:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019090:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019097:	75 05                	jne    c001909e <CPU::displayFeatures()+0x152>
c0019099:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001909e:	52                   	push   edx
c001909f:	52                   	push   edx
c00190a0:	50                   	push   eax
c00190a1:	68 6a b8 02 c0       	push   0xc002b86a
c00190a6:	e8 8b 9f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c00190b3:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00190ba:	75 05                	jne    c00190c1 <CPU::displayFeatures()+0x175>
c00190bc:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c00190c1:	51                   	push   ecx
c00190c2:	51                   	push   ecx
c00190c3:	50                   	push   eax
c00190c4:	68 81 b8 02 c0       	push   0xc002b881
c00190c9:	e8 68 9f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00190ce:	83 c4 10             	add    esp,0x10
c00190d1:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c00190d6:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00190dd:	75 05                	jne    c00190e4 <CPU::displayFeatures()+0x198>
c00190df:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c00190e4:	52                   	push   edx
c00190e5:	52                   	push   edx
c00190e6:	50                   	push   eax
c00190e7:	68 98 b8 02 c0       	push   0xc002b898
c00190ec:	e8 45 9f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00190f1:	83 c4 10             	add    esp,0x10
c00190f4:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c00190f9:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019100:	75 05                	jne    c0019107 <CPU::displayFeatures()+0x1bb>
c0019102:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019107:	51                   	push   ecx
c0019108:	51                   	push   ecx
c0019109:	50                   	push   eax
c001910a:	68 af b8 02 c0       	push   0xc002b8af
c001910f:	e8 22 9f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0019114:	83 c4 10             	add    esp,0x10
c0019117:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001911c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019123:	75 05                	jne    c001912a <CPU::displayFeatures()+0x1de>
c0019125:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001912a:	52                   	push   edx
c001912b:	52                   	push   edx
c001912c:	50                   	push   eax
c001912d:	68 c6 b8 02 c0       	push   0xc002b8c6
c0019132:	e8 ff 9e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0019137:	83 c4 10             	add    esp,0x10
c001913a:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001913f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019146:	75 05                	jne    c001914d <CPU::displayFeatures()+0x201>
c0019148:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001914d:	51                   	push   ecx
c001914e:	51                   	push   ecx
c001914f:	50                   	push   eax
c0019150:	68 dd b8 02 c0       	push   0xc002b8dd
c0019155:	e8 dc 9e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001915a:	83 c4 10             	add    esp,0x10
c001915d:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019162:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019169:	75 05                	jne    c0019170 <CPU::displayFeatures()+0x224>
c001916b:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019170:	52                   	push   edx
c0019171:	52                   	push   edx
c0019172:	50                   	push   eax
c0019173:	68 f4 b8 02 c0       	push   0xc002b8f4
c0019178:	e8 b9 9e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001917d:	83 c4 10             	add    esp,0x10
c0019180:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019185:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001918c:	78 05                	js     c0019193 <CPU::displayFeatures()+0x247>
c001918e:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019193:	51                   	push   ecx
c0019194:	51                   	push   ecx
c0019195:	50                   	push   eax
c0019196:	68 0b b9 02 c0       	push   0xc002b90b
c001919b:	e8 96 9e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00191a0:	83 c4 10             	add    esp,0x10
c00191a3:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c00191a8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00191af:	75 05                	jne    c00191b6 <CPU::displayFeatures()+0x26a>
c00191b1:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c00191b6:	52                   	push   edx
c00191b7:	52                   	push   edx
c00191b8:	50                   	push   eax
c00191b9:	68 22 b9 02 c0       	push   0xc002b922
c00191be:	e8 73 9e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00191c3:	83 c4 18             	add    esp,0x18
c00191c6:	5b                   	pop    ebx
c00191c7:	c3                   	ret    

c00191c8 <CPU::detectFeatures()>:
c00191c8:	55                   	push   ebp
c00191c9:	57                   	push   edi
c00191ca:	56                   	push   esi
c00191cb:	53                   	push   ebx
c00191cc:	83 ec 50             	sub    esp,0x50
c00191cf:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00191d3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00191dd:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00191e4:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00191ea:	6a 0d                	push   0xd
c00191ec:	6a 00                	push   0x0
c00191ee:	57                   	push   edi
c00191ef:	e8 84 75 fe ff       	call   c0000778 <memset>
c00191f4:	83 c4 10             	add    esp,0x10
c00191f7:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c00191fc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019203:	0f 84 20 09 00 00    	je     c0019b29 <CPU::detectFeatures()+0x961>
c0019209:	83 ec 0c             	sub    esp,0xc
c001920c:	6a 10                	push   0x10
c001920e:	e8 f3 fb ff ff       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c0019213:	83 e0 01             	and    eax,0x1
c0019216:	8d 14 00             	lea    edx,[eax+eax*1]
c0019219:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001921f:	83 e0 fd             	and    eax,0xfffffffd
c0019222:	09 d0                	or     eax,edx
c0019224:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001922a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019231:	e8 d0 fb ff ff       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c0019236:	83 e0 01             	and    eax,0x1
c0019239:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019240:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019246:	83 e0 fb             	and    eax,0xfffffffb
c0019249:	09 d0                	or     eax,edx
c001924b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019251:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019258:	e8 a9 fb ff ff       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c001925d:	83 e0 01             	and    eax,0x1
c0019260:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019267:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001926d:	83 e0 f7             	and    eax,0xfffffff7
c0019270:	09 d0                	or     eax,edx
c0019272:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019278:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001927f:	e8 82 fb ff ff       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c0019284:	83 e0 01             	and    eax,0x1
c0019287:	c1 e0 04             	shl    eax,0x4
c001928a:	88 c2                	mov    dl,al
c001928c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019292:	83 e0 ef             	and    eax,0xffffffef
c0019295:	09 d0                	or     eax,edx
c0019297:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001929d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00192a4:	e8 5d fb ff ff       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c00192a9:	83 e0 01             	and    eax,0x1
c00192ac:	c1 e0 05             	shl    eax,0x5
c00192af:	88 c2                	mov    dl,al
c00192b1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00192b7:	83 e0 df             	and    eax,0xffffffdf
c00192ba:	09 d0                	or     eax,edx
c00192bc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00192c2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00192c9:	e8 38 fb ff ff       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c00192ce:	83 e0 01             	and    eax,0x1
c00192d1:	8d 14 00             	lea    edx,[eax+eax*1]
c00192d4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00192da:	83 e0 fd             	and    eax,0xfffffffd
c00192dd:	09 d0                	or     eax,edx
c00192df:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00192e5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00192ec:	e8 15 fb ff ff       	call   c0018e06 <CPU::cpuidCheckEDX(unsigned int)>
c00192f1:	83 e0 01             	and    eax,0x1
c00192f4:	c1 e0 06             	shl    eax,0x6
c00192f7:	88 c2                	mov    dl,al
c00192f9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192ff:	83 e0 bf             	and    eax,0xffffffbf
c0019302:	09 d0                	or     eax,edx
c0019304:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001930a:	58                   	pop    eax
c001930b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001930f:	56                   	push   esi
c0019310:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019314:	55                   	push   ebp
c0019315:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019319:	50                   	push   eax
c001931a:	8d 54 24 28          	lea    edx,[esp+0x28]
c001931e:	52                   	push   edx
c001931f:	6a 00                	push   0x0
c0019321:	e8 5c fa ff ff       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019326:	83 c4 1c             	add    esp,0x1c
c0019329:	6a 04                	push   0x4
c001932b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001932f:	50                   	push   eax
c0019330:	57                   	push   edi
c0019331:	e8 0e 74 fe ff       	call   c0000744 <memcpy>
c0019336:	83 c4 0c             	add    esp,0xc
c0019339:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001933f:	6a 04                	push   0x4
c0019341:	56                   	push   esi
c0019342:	50                   	push   eax
c0019343:	e8 fc 73 fe ff       	call   c0000744 <memcpy>
c0019348:	83 c4 0c             	add    esp,0xc
c001934b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019351:	6a 04                	push   0x4
c0019353:	55                   	push   ebp
c0019354:	50                   	push   eax
c0019355:	e8 ea 73 fe ff       	call   c0000744 <memcpy>
c001935a:	58                   	pop    eax
c001935b:	5a                   	pop    edx
c001935c:	68 39 b9 02 c0       	push   0xc002b939
c0019361:	57                   	push   edi
c0019362:	e8 59 75 fe ff       	call   c00008c0 <strcmp>
c0019367:	83 c4 10             	add    esp,0x10
c001936a:	85 c0                	test   eax,eax
c001936c:	75 0f                	jne    c001937d <CPU::detectFeatures()+0x1b5>
c001936e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019378:	e9 22 02 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c001937d:	50                   	push   eax
c001937e:	50                   	push   eax
c001937f:	68 46 b9 02 c0       	push   0xc002b946
c0019384:	57                   	push   edi
c0019385:	e8 36 75 fe ff       	call   c00008c0 <strcmp>
c001938a:	83 c4 10             	add    esp,0x10
c001938d:	85 c0                	test   eax,eax
c001938f:	74 dd                	je     c001936e <CPU::detectFeatures()+0x1a6>
c0019391:	51                   	push   ecx
c0019392:	51                   	push   ecx
c0019393:	68 53 b9 02 c0       	push   0xc002b953
c0019398:	57                   	push   edi
c0019399:	e8 22 75 fe ff       	call   c00008c0 <strcmp>
c001939e:	83 c4 10             	add    esp,0x10
c00193a1:	85 c0                	test   eax,eax
c00193a3:	74 2a                	je     c00193cf <CPU::detectFeatures()+0x207>
c00193a5:	52                   	push   edx
c00193a6:	52                   	push   edx
c00193a7:	68 60 b9 02 c0       	push   0xc002b960
c00193ac:	57                   	push   edi
c00193ad:	e8 0e 75 fe ff       	call   c00008c0 <strcmp>
c00193b2:	83 c4 10             	add    esp,0x10
c00193b5:	85 c0                	test   eax,eax
c00193b7:	74 16                	je     c00193cf <CPU::detectFeatures()+0x207>
c00193b9:	50                   	push   eax
c00193ba:	50                   	push   eax
c00193bb:	68 6d b9 02 c0       	push   0xc002b96d
c00193c0:	57                   	push   edi
c00193c1:	e8 fa 74 fe ff       	call   c00008c0 <strcmp>
c00193c6:	83 c4 10             	add    esp,0x10
c00193c9:	85 c0                	test   eax,eax
c00193cb:	74 48                	je     c0019415 <CPU::detectFeatures()+0x24d>
c00193cd:	eb 0f                	jmp    c00193de <CPU::detectFeatures()+0x216>
c00193cf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00193d9:	e9 c1 01 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c00193de:	50                   	push   eax
c00193df:	50                   	push   eax
c00193e0:	68 7a b9 02 c0       	push   0xc002b97a
c00193e5:	57                   	push   edi
c00193e6:	e8 d5 74 fe ff       	call   c00008c0 <strcmp>
c00193eb:	83 c4 10             	add    esp,0x10
c00193ee:	85 c0                	test   eax,eax
c00193f0:	74 23                	je     c0019415 <CPU::detectFeatures()+0x24d>
c00193f2:	50                   	push   eax
c00193f3:	50                   	push   eax
c00193f4:	68 87 b9 02 c0       	push   0xc002b987
c00193f9:	57                   	push   edi
c00193fa:	e8 c1 74 fe ff       	call   c00008c0 <strcmp>
c00193ff:	83 c4 10             	add    esp,0x10
c0019402:	85 c0                	test   eax,eax
c0019404:	75 1e                	jne    c0019424 <CPU::detectFeatures()+0x25c>
c0019406:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019410:	e9 8a 01 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c0019415:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001941f:	e9 7b 01 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c0019424:	50                   	push   eax
c0019425:	50                   	push   eax
c0019426:	68 94 b9 02 c0       	push   0xc002b994
c001942b:	57                   	push   edi
c001942c:	e8 8f 74 fe ff       	call   c00008c0 <strcmp>
c0019431:	83 c4 10             	add    esp,0x10
c0019434:	85 c0                	test   eax,eax
c0019436:	75 0f                	jne    c0019447 <CPU::detectFeatures()+0x27f>
c0019438:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019442:	e9 58 01 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c0019447:	50                   	push   eax
c0019448:	50                   	push   eax
c0019449:	68 53 b9 02 c0       	push   0xc002b953
c001944e:	57                   	push   edi
c001944f:	e8 6c 74 fe ff       	call   c00008c0 <strcmp>
c0019454:	83 c4 10             	add    esp,0x10
c0019457:	85 c0                	test   eax,eax
c0019459:	75 0f                	jne    c001946a <CPU::detectFeatures()+0x2a2>
c001945b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019465:	e9 35 01 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c001946a:	50                   	push   eax
c001946b:	50                   	push   eax
c001946c:	68 a1 b9 02 c0       	push   0xc002b9a1
c0019471:	57                   	push   edi
c0019472:	e8 49 74 fe ff       	call   c00008c0 <strcmp>
c0019477:	83 c4 10             	add    esp,0x10
c001947a:	85 c0                	test   eax,eax
c001947c:	75 0f                	jne    c001948d <CPU::detectFeatures()+0x2c5>
c001947e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019488:	e9 12 01 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c001948d:	51                   	push   ecx
c001948e:	51                   	push   ecx
c001948f:	68 ae b9 02 c0       	push   0xc002b9ae
c0019494:	57                   	push   edi
c0019495:	e8 26 74 fe ff       	call   c00008c0 <strcmp>
c001949a:	83 c4 10             	add    esp,0x10
c001949d:	85 c0                	test   eax,eax
c001949f:	75 0f                	jne    c00194b0 <CPU::detectFeatures()+0x2e8>
c00194a1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00194ab:	e9 ef 00 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c00194b0:	52                   	push   edx
c00194b1:	52                   	push   edx
c00194b2:	68 bb b9 02 c0       	push   0xc002b9bb
c00194b7:	57                   	push   edi
c00194b8:	e8 03 74 fe ff       	call   c00008c0 <strcmp>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	85 c0                	test   eax,eax
c00194c2:	75 0f                	jne    c00194d3 <CPU::detectFeatures()+0x30b>
c00194c4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00194ce:	e9 cc 00 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c00194d3:	50                   	push   eax
c00194d4:	50                   	push   eax
c00194d5:	68 c8 b9 02 c0       	push   0xc002b9c8
c00194da:	57                   	push   edi
c00194db:	e8 e0 73 fe ff       	call   c00008c0 <strcmp>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	85 c0                	test   eax,eax
c00194e5:	75 0f                	jne    c00194f6 <CPU::detectFeatures()+0x32e>
c00194e7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00194f1:	e9 a9 00 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c00194f6:	50                   	push   eax
c00194f7:	50                   	push   eax
c00194f8:	68 d5 b9 02 c0       	push   0xc002b9d5
c00194fd:	57                   	push   edi
c00194fe:	e8 bd 73 fe ff       	call   c00008c0 <strcmp>
c0019503:	83 c4 10             	add    esp,0x10
c0019506:	85 c0                	test   eax,eax
c0019508:	75 0f                	jne    c0019519 <CPU::detectFeatures()+0x351>
c001950a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019514:	e9 86 00 00 00       	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c0019519:	50                   	push   eax
c001951a:	50                   	push   eax
c001951b:	68 e2 b9 02 c0       	push   0xc002b9e2
c0019520:	57                   	push   edi
c0019521:	e8 9a 73 fe ff       	call   c00008c0 <strcmp>
c0019526:	83 c4 10             	add    esp,0x10
c0019529:	85 c0                	test   eax,eax
c001952b:	75 0c                	jne    c0019539 <CPU::detectFeatures()+0x371>
c001952d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019537:	eb 66                	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c0019539:	50                   	push   eax
c001953a:	50                   	push   eax
c001953b:	68 ef b9 02 c0       	push   0xc002b9ef
c0019540:	57                   	push   edi
c0019541:	e8 7a 73 fe ff       	call   c00008c0 <strcmp>
c0019546:	83 c4 10             	add    esp,0x10
c0019549:	85 c0                	test   eax,eax
c001954b:	75 0c                	jne    c0019559 <CPU::detectFeatures()+0x391>
c001954d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019557:	eb 46                	jmp    c001959f <CPU::detectFeatures()+0x3d7>
c0019559:	50                   	push   eax
c001955a:	50                   	push   eax
c001955b:	68 fc b9 02 c0       	push   0xc002b9fc
c0019560:	57                   	push   edi
c0019561:	e8 5a 73 fe ff       	call   c00008c0 <strcmp>
c0019566:	83 c4 10             	add    esp,0x10
c0019569:	85 c0                	test   eax,eax
c001956b:	74 e0                	je     c001954d <CPU::detectFeatures()+0x385>
c001956d:	50                   	push   eax
c001956e:	50                   	push   eax
c001956f:	68 09 ba 02 c0       	push   0xc002ba09
c0019574:	57                   	push   edi
c0019575:	e8 46 73 fe ff       	call   c00008c0 <strcmp>
c001957a:	83 c4 10             	add    esp,0x10
c001957d:	85 c0                	test   eax,eax
c001957f:	74 cc                	je     c001954d <CPU::detectFeatures()+0x385>
c0019581:	51                   	push   ecx
c0019582:	51                   	push   ecx
c0019583:	68 16 ba 02 c0       	push   0xc002ba16
c0019588:	57                   	push   edi
c0019589:	e8 32 73 fe ff       	call   c00008c0 <strcmp>
c001958e:	83 c4 10             	add    esp,0x10
c0019591:	85 c0                	test   eax,eax
c0019593:	74 b8                	je     c001954d <CPU::detectFeatures()+0x385>
c0019595:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001959f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00195a4:	0f 86 be 00 00 00    	jbe    c0019668 <CPU::detectFeatures()+0x4a0>
c00195aa:	83 ec 0c             	sub    esp,0xc
c00195ad:	68 80 00 00 00       	push   0x80
c00195b2:	e8 ab f8 ff ff       	call   c0018e62 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195b7:	83 e0 01             	and    eax,0x1
c00195ba:	c1 e0 06             	shl    eax,0x6
c00195bd:	88 c2                	mov    dl,al
c00195bf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195c5:	83 e0 bf             	and    eax,0xffffffbf
c00195c8:	09 d0                	or     eax,edx
c00195ca:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195d0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00195d7:	e8 86 f8 ff ff       	call   c0018e62 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195dc:	83 e0 01             	and    eax,0x1
c00195df:	c1 e0 04             	shl    eax,0x4
c00195e2:	88 c2                	mov    dl,al
c00195e4:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195ea:	83 e0 ef             	and    eax,0xffffffef
c00195ed:	09 d0                	or     eax,edx
c00195ef:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195f5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195fc:	e8 61 f8 ff ff       	call   c0018e62 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019601:	c1 e0 07             	shl    eax,0x7
c0019604:	88 c2                	mov    dl,al
c0019606:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001960c:	83 e0 7f             	and    eax,0x7f
c001960f:	09 d0                	or     eax,edx
c0019611:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019617:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001961e:	e8 6d f8 ff ff       	call   c0018e90 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019623:	83 e0 01             	and    eax,0x1
c0019626:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001962d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019633:	83 e0 f7             	and    eax,0xfffffff7
c0019636:	09 d0                	or     eax,edx
c0019638:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001963e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019645:	e8 46 f8 ff ff       	call   c0018e90 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001964a:	83 c4 10             	add    esp,0x10
c001964d:	83 e0 01             	and    eax,0x1
c0019650:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019657:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001965d:	83 e0 fb             	and    eax,0xfffffffb
c0019660:	09 d0                	or     eax,edx
c0019662:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	56                   	push   esi
c001966c:	55                   	push   ebp
c001966d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019671:	57                   	push   edi
c0019672:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019676:	50                   	push   eax
c0019677:	6a 01                	push   0x1
c0019679:	e8 04 f7 ff ff       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001967e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019682:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019688:	88 ca                	mov    dl,cl
c001968a:	83 e0 f0             	and    eax,0xfffffff0
c001968d:	83 e2 0f             	and    edx,0xf
c0019690:	09 d0                	or     eax,edx
c0019692:	88 ca                	mov    dl,cl
c0019694:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001969a:	c0 ea 04             	shr    dl,0x4
c001969d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00196a1:	0f b6 c2             	movzx  eax,dl
c00196a4:	83 c4 20             	add    esp,0x20
c00196a7:	c1 e0 06             	shl    eax,0x6
c00196aa:	89 c5                	mov    ebp,eax
c00196ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196b2:	66 25 3f c0          	and    ax,0xc03f
c00196b6:	09 e8                	or     eax,ebp
c00196b8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00196bf:	89 c8                	mov    eax,ecx
c00196c1:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00196c7:	c1 e8 08             	shr    eax,0x8
c00196ca:	83 e2 3f             	and    edx,0x3f
c00196cd:	83 e0 0f             	and    eax,0xf
c00196d0:	89 c5                	mov    ebp,eax
c00196d2:	c1 e5 06             	shl    ebp,0x6
c00196d5:	09 d5                	or     ebp,edx
c00196d7:	89 ea                	mov    edx,ebp
c00196d9:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00196df:	88 c2                	mov    dl,al
c00196e1:	c0 ea 02             	shr    dl,0x2
c00196e4:	89 d5                	mov    ebp,edx
c00196e6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00196ec:	83 e2 c0             	and    edx,0xffffffc0
c00196ef:	09 d5                	or     ebp,edx
c00196f1:	89 ea                	mov    edx,ebp
c00196f3:	89 cd                	mov    ebp,ecx
c00196f5:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196fb:	c1 ed 0c             	shr    ebp,0xc
c00196fe:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019704:	83 e5 03             	and    ebp,0x3
c0019707:	83 e2 cf             	and    edx,0xffffffcf
c001970a:	c1 e5 04             	shl    ebp,0x4
c001970d:	09 d5                	or     ebp,edx
c001970f:	3c 06                	cmp    al,0x6
c0019711:	89 ea                	mov    edx,ebp
c0019713:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019719:	74 04                	je     c001971f <CPU::detectFeatures()+0x557>
c001971b:	3c 0f                	cmp    al,0xf
c001971d:	75 5c                	jne    c001977b <CPU::detectFeatures()+0x5b3>
c001971f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019723:	89 cd                	mov    ebp,ecx
c0019725:	c1 ed 10             	shr    ebp,0x10
c0019728:	c1 e5 04             	shl    ebp,0x4
c001972b:	09 ea                	or     edx,ebp
c001972d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019733:	0f b6 d2             	movzx  edx,dl
c0019736:	66 81 e5 3f c0       	and    bp,0xc03f
c001973b:	c1 e2 06             	shl    edx,0x6
c001973e:	09 ea                	or     edx,ebp
c0019740:	3c 0f                	cmp    al,0xf
c0019742:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019749:	75 30                	jne    c001977b <CPU::detectFeatures()+0x5b3>
c001974b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019751:	c1 e9 14             	shr    ecx,0x14
c0019754:	83 e0 3f             	and    eax,0x3f
c0019757:	83 c1 0f             	add    ecx,0xf
c001975a:	88 ca                	mov    dl,cl
c001975c:	c0 e9 02             	shr    cl,0x2
c001975f:	c1 e2 06             	shl    edx,0x6
c0019762:	09 d0                	or     eax,edx
c0019764:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001976a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019770:	83 e0 c0             	and    eax,0xffffffc0
c0019773:	09 c1                	or     ecx,eax
c0019775:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001977b:	83 ec 0c             	sub    esp,0xc
c001977e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019785:	56                   	push   esi
c0019786:	8d 44 24 28          	lea    eax,[esp+0x28]
c001978a:	50                   	push   eax
c001978b:	57                   	push   edi
c001978c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019790:	55                   	push   ebp
c0019791:	68 00 00 00 80       	push   0x80000000
c0019796:	e8 e7 f5 ff ff       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001979b:	83 c4 20             	add    esp,0x20
c001979e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00197a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00197aa:	76 1e                	jbe    c00197ca <CPU::detectFeatures()+0x602>
c00197ac:	83 ec 0c             	sub    esp,0xc
c00197af:	56                   	push   esi
c00197b0:	50                   	push   eax
c00197b1:	57                   	push   edi
c00197b2:	55                   	push   ebp
c00197b3:	68 01 00 00 80       	push   0x80000001
c00197b8:	e8 c5 f5 ff ff       	call   c0018d82 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197bd:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00197c7:	83 c4 20             	add    esp,0x20
c00197ca:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00197d0:	83 f8 01             	cmp    eax,0x1
c00197d3:	75 6f                	jne    c0019844 <CPU::detectFeatures()+0x67c>
c00197d5:	51                   	push   ecx
c00197d6:	51                   	push   ecx
c00197d7:	68 22 ba 02 c0       	push   0xc002ba22
c00197dc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197e0:	56                   	push   esi
c00197e1:	e8 4e 70 fe ff       	call   c0000834 <strcpy>
c00197e6:	5f                   	pop    edi
c00197e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ed:	5d                   	pop    ebp
c00197ee:	66 c1 e8 06          	shr    ax,0x6
c00197f2:	0f b6 c0             	movzx  eax,al
c00197f5:	50                   	push   eax
c00197f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197fc:	c1 e8 0e             	shr    eax,0xe
c00197ff:	0f b6 c0             	movzx  eax,al
c0019802:	50                   	push   eax
c0019803:	e8 24 f2 ff ff       	call   c0018a2c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019808:	5a                   	pop    edx
c0019809:	59                   	pop    ecx
c001980a:	50                   	push   eax
c001980b:	56                   	push   esi
c001980c:	e8 63 71 fe ff       	call   c0000974 <strcat>
c0019811:	5f                   	pop    edi
c0019812:	5d                   	pop    ebp
c0019813:	56                   	push   esi
c0019814:	53                   	push   ebx
c0019815:	e8 24 ae ff ff       	call   c001463e <Device::setName(char const*)>
c001981a:	58                   	pop    eax
c001981b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019821:	5a                   	pop    edx
c0019822:	68 29 ba 02 c0       	push   0xc002ba29
c0019827:	50                   	push   eax
c0019828:	e8 93 70 fe ff       	call   c00008c0 <strcmp>
c001982d:	83 c4 10             	add    esp,0x10
c0019830:	85 c0                	test   eax,eax
c0019832:	0f 85 71 03 00 00    	jne    c0019ba9 <CPU::detectFeatures()+0x9e1>
c0019838:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001983f:	e9 65 03 00 00       	jmp    c0019ba9 <CPU::detectFeatures()+0x9e1>
c0019844:	83 f8 02             	cmp    eax,0x2
c0019847:	0f 85 b5 00 00 00    	jne    c0019902 <CPU::detectFeatures()+0x73a>
c001984d:	57                   	push   edi
c001984e:	57                   	push   edi
c001984f:	68 3b ba 02 c0       	push   0xc002ba3b
c0019854:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019858:	56                   	push   esi
c0019859:	e8 d6 6f fe ff       	call   c0000834 <strcpy>
c001985e:	5d                   	pop    ebp
c001985f:	58                   	pop    eax
c0019860:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019866:	66 c1 e8 06          	shr    ax,0x6
c001986a:	0f b6 c0             	movzx  eax,al
c001986d:	50                   	push   eax
c001986e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019874:	c1 e8 0e             	shr    eax,0xe
c0019877:	0f b6 c0             	movzx  eax,al
c001987a:	50                   	push   eax
c001987b:	e8 18 f0 ff ff       	call   c0018898 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019880:	5a                   	pop    edx
c0019881:	59                   	pop    ecx
c0019882:	50                   	push   eax
c0019883:	56                   	push   esi
c0019884:	e8 eb 70 fe ff       	call   c0000974 <strcat>
c0019889:	5f                   	pop    edi
c001988a:	5d                   	pop    ebp
c001988b:	56                   	push   esi
c001988c:	53                   	push   ebx
c001988d:	e8 ac ad ff ff       	call   c001463e <Device::setName(char const*)>
c0019892:	58                   	pop    eax
c0019893:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019899:	5a                   	pop    edx
c001989a:	68 40 ba 02 c0       	push   0xc002ba40
c001989f:	50                   	push   eax
c00198a0:	e8 1b 70 fe ff       	call   c00008c0 <strcmp>
c00198a5:	83 c4 10             	add    esp,0x10
c00198a8:	85 c0                	test   eax,eax
c00198aa:	75 20                	jne    c00198cc <CPU::detectFeatures()+0x704>
c00198ac:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c00198b2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00198b8:	a8 01                	test   al,0x1
c00198ba:	74 10                	je     c00198cc <CPU::detectFeatures()+0x704>
c00198bc:	83 e0 fe             	and    eax,0xfffffffe
c00198bf:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00198c5:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00198cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198d2:	c1 e8 0e             	shr    eax,0xe
c00198d5:	3c 05                	cmp    al,0x5
c00198d7:	0f 85 cc 02 00 00    	jne    c0019ba9 <CPU::detectFeatures()+0x9e1>
c00198dd:	56                   	push   esi
c00198de:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00198e4:	83 e0 0f             	and    eax,0xf
c00198e7:	50                   	push   eax
c00198e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198ee:	66 c1 e8 06          	shr    ax,0x6
c00198f2:	0f b6 c0             	movzx  eax,al
c00198f5:	50                   	push   eax
c00198f6:	6a 05                	push   0x5
c00198f8:	e8 11 f4 ff ff       	call   c0018d0e <CPU::AMD_K6_writeback(int, int, int)>
c00198fd:	e9 1f 02 00 00       	jmp    c0019b21 <CPU::detectFeatures()+0x959>
c0019902:	8d 50 fd             	lea    edx,[eax-0x3]
c0019905:	83 fa 01             	cmp    edx,0x1
c0019908:	76 09                	jbe    c0019913 <CPU::detectFeatures()+0x74b>
c001990a:	83 f8 06             	cmp    eax,0x6
c001990d:	0f 85 91 01 00 00    	jne    c0019aa4 <CPU::detectFeatures()+0x8dc>
c0019913:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019919:	c1 ea 0e             	shr    edx,0xe
c001991c:	80 fa 05             	cmp    dl,0x5
c001991f:	75 7b                	jne    c001999c <CPU::detectFeatures()+0x7d4>
c0019921:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019927:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001992c:	66 81 fa 00 01       	cmp    dx,0x100
c0019931:	75 0c                	jne    c001993f <CPU::detectFeatures()+0x777>
c0019933:	51                   	push   ecx
c0019934:	51                   	push   ecx
c0019935:	68 47 ba 02 c0       	push   0xc002ba47
c001993a:	e9 dc 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c001993f:	66 81 fa 00 02       	cmp    dx,0x200
c0019944:	75 0c                	jne    c0019952 <CPU::detectFeatures()+0x78a>
c0019946:	52                   	push   edx
c0019947:	52                   	push   edx
c0019948:	68 5a ba 02 c0       	push   0xc002ba5a
c001994d:	e9 c9 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019952:	66 81 fa 40 02       	cmp    dx,0x240
c0019957:	75 0c                	jne    c0019965 <CPU::detectFeatures()+0x79d>
c0019959:	50                   	push   eax
c001995a:	50                   	push   eax
c001995b:	68 6c ba 02 c0       	push   0xc002ba6c
c0019960:	e9 b6 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019965:	83 f8 06             	cmp    eax,0x6
c0019968:	75 0c                	jne    c0019976 <CPU::detectFeatures()+0x7ae>
c001996a:	50                   	push   eax
c001996b:	50                   	push   eax
c001996c:	68 7e ba 02 c0       	push   0xc002ba7e
c0019971:	e9 a5 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019976:	83 f8 04             	cmp    eax,0x4
c0019979:	75 0c                	jne    c0019987 <CPU::detectFeatures()+0x7bf>
c001997b:	50                   	push   eax
c001997c:	50                   	push   eax
c001997d:	68 8a ba 02 c0       	push   0xc002ba8a
c0019982:	e9 94 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019987:	83 f8 03             	cmp    eax,0x3
c001998a:	0f 85 19 02 00 00    	jne    c0019ba9 <CPU::detectFeatures()+0x9e1>
c0019990:	50                   	push   eax
c0019991:	50                   	push   eax
c0019992:	68 92 ba 02 c0       	push   0xc002ba92
c0019997:	e9 7f 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c001999c:	80 fa 06             	cmp    dl,0x6
c001999f:	0f 85 db 00 00 00    	jne    c0019a80 <CPU::detectFeatures()+0x8b8>
c00199a5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00199ab:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00199b0:	66 81 fa 80 01       	cmp    dx,0x180
c00199b5:	75 0c                	jne    c00199c3 <CPU::detectFeatures()+0x7fb>
c00199b7:	50                   	push   eax
c00199b8:	50                   	push   eax
c00199b9:	68 9d ba 02 c0       	push   0xc002ba9d
c00199be:	e9 58 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c00199c3:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00199c9:	66 f7 c1 80 ff       	test   cx,0xff80
c00199ce:	75 0c                	jne    c00199dc <CPU::detectFeatures()+0x814>
c00199d0:	50                   	push   eax
c00199d1:	50                   	push   eax
c00199d2:	68 ad ba 02 c0       	push   0xc002baad
c00199d7:	e9 3f 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c00199dc:	66 81 fa 40 02       	cmp    dx,0x240
c00199e1:	75 0c                	jne    c00199ef <CPU::detectFeatures()+0x827>
c00199e3:	55                   	push   ebp
c00199e4:	55                   	push   ebp
c00199e5:	68 b4 ba 02 c0       	push   0xc002bab4
c00199ea:	e9 2c 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c00199ef:	66 81 fa 80 02       	cmp    dx,0x280
c00199f4:	75 0c                	jne    c0019a02 <CPU::detectFeatures()+0x83a>
c00199f6:	57                   	push   edi
c00199f7:	57                   	push   edi
c00199f8:	68 bd ba 02 c0       	push   0xc002babd
c00199fd:	e9 19 01 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019a02:	66 81 fa 40 03       	cmp    dx,0x340
c0019a07:	74 ed                	je     c00199f6 <CPU::detectFeatures()+0x82e>
c0019a09:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019a0e:	75 0c                	jne    c0019a1c <CPU::detectFeatures()+0x854>
c0019a10:	56                   	push   esi
c0019a11:	56                   	push   esi
c0019a12:	68 c4 ba 02 c0       	push   0xc002bac4
c0019a17:	e9 ff 00 00 00       	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019a1c:	83 f8 06             	cmp    eax,0x6
c0019a1f:	0f 84 45 ff ff ff    	je     c001996a <CPU::detectFeatures()+0x7a2>
c0019a25:	83 f8 04             	cmp    eax,0x4
c0019a28:	0f 84 4d ff ff ff    	je     c001997b <CPU::detectFeatures()+0x7b3>
c0019a2e:	83 f8 03             	cmp    eax,0x3
c0019a31:	0f 85 72 01 00 00    	jne    c0019ba9 <CPU::detectFeatures()+0x9e1>
c0019a37:	51                   	push   ecx
c0019a38:	51                   	push   ecx
c0019a39:	68 cd ba 02 c0       	push   0xc002bacd
c0019a3e:	53                   	push   ebx
c0019a3f:	e8 fa ab ff ff       	call   c001463e <Device::setName(char const*)>
c0019a44:	b1 c1                	mov    cl,0xc1
c0019a46:	88 c8                	mov    al,cl
c0019a48:	e6 22                	out    0x22,al
c0019a4a:	e4 23                	in     al,0x23
c0019a4c:	88 c2                	mov    dl,al
c0019a4e:	88 c8                	mov    al,cl
c0019a50:	e6 22                	out    0x22,al
c0019a52:	88 d0                	mov    al,dl
c0019a54:	83 c8 10             	or     eax,0x10
c0019a57:	e6 23                	out    0x23,al
c0019a59:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a60:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a63:	89 d0                	mov    eax,edx
c0019a65:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a6b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a6f:	40                   	inc    eax
c0019a70:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a76:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a7b:	e9 a1 00 00 00       	jmp    c0019b21 <CPU::detectFeatures()+0x959>
c0019a80:	83 f8 06             	cmp    eax,0x6
c0019a83:	0f 84 e1 fe ff ff    	je     c001996a <CPU::detectFeatures()+0x7a2>
c0019a89:	83 f8 04             	cmp    eax,0x4
c0019a8c:	0f 84 e9 fe ff ff    	je     c001997b <CPU::detectFeatures()+0x7b3>
c0019a92:	83 f8 03             	cmp    eax,0x3
c0019a95:	0f 85 0e 01 00 00    	jne    c0019ba9 <CPU::detectFeatures()+0x9e1>
c0019a9b:	52                   	push   edx
c0019a9c:	52                   	push   edx
c0019a9d:	68 d8 ba 02 c0       	push   0xc002bad8
c0019aa2:	eb 77                	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019aa4:	83 f8 07             	cmp    eax,0x7
c0019aa7:	75 09                	jne    c0019ab2 <CPU::detectFeatures()+0x8ea>
c0019aa9:	50                   	push   eax
c0019aaa:	50                   	push   eax
c0019aab:	68 e2 ba 02 c0       	push   0xc002bae2
c0019ab0:	eb 69                	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019ab2:	83 f8 0a             	cmp    eax,0xa
c0019ab5:	75 09                	jne    c0019ac0 <CPU::detectFeatures()+0x8f8>
c0019ab7:	50                   	push   eax
c0019ab8:	50                   	push   eax
c0019ab9:	68 ed ba 02 c0       	push   0xc002baed
c0019abe:	eb 5b                	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019ac0:	83 f8 0b             	cmp    eax,0xb
c0019ac3:	75 09                	jne    c0019ace <CPU::detectFeatures()+0x906>
c0019ac5:	50                   	push   eax
c0019ac6:	50                   	push   eax
c0019ac7:	68 f5 ba 02 c0       	push   0xc002baf5
c0019acc:	eb 4d                	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019ace:	83 f8 08             	cmp    eax,0x8
c0019ad1:	75 09                	jne    c0019adc <CPU::detectFeatures()+0x914>
c0019ad3:	50                   	push   eax
c0019ad4:	50                   	push   eax
c0019ad5:	68 fe ba 02 c0       	push   0xc002bafe
c0019ada:	eb 3f                	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019adc:	83 f8 09             	cmp    eax,0x9
c0019adf:	75 09                	jne    c0019aea <CPU::detectFeatures()+0x922>
c0019ae1:	50                   	push   eax
c0019ae2:	50                   	push   eax
c0019ae3:	68 06 bb 02 c0       	push   0xc002bb06
c0019ae8:	eb 31                	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019aea:	83 f8 05             	cmp    eax,0x5
c0019aed:	75 09                	jne    c0019af8 <CPU::detectFeatures()+0x930>
c0019aef:	50                   	push   eax
c0019af0:	50                   	push   eax
c0019af1:	68 0e bb 02 c0       	push   0xc002bb0e
c0019af6:	eb 23                	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019af8:	83 f8 0c             	cmp    eax,0xc
c0019afb:	75 09                	jne    c0019b06 <CPU::detectFeatures()+0x93e>
c0019afd:	55                   	push   ebp
c0019afe:	55                   	push   ebp
c0019aff:	68 1c bb 02 c0       	push   0xc002bb1c
c0019b04:	eb 15                	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019b06:	83 f8 0d             	cmp    eax,0xd
c0019b09:	75 09                	jne    c0019b14 <CPU::detectFeatures()+0x94c>
c0019b0b:	57                   	push   edi
c0019b0c:	57                   	push   edi
c0019b0d:	68 27 bb 02 c0       	push   0xc002bb27
c0019b12:	eb 07                	jmp    c0019b1b <CPU::detectFeatures()+0x953>
c0019b14:	56                   	push   esi
c0019b15:	56                   	push   esi
c0019b16:	68 3b bb 02 c0       	push   0xc002bb3b
c0019b1b:	53                   	push   ebx
c0019b1c:	e8 1d ab ff ff       	call   c001463e <Device::setName(char const*)>
c0019b21:	83 c4 10             	add    esp,0x10
c0019b24:	e9 80 00 00 00       	jmp    c0019ba9 <CPU::detectFeatures()+0x9e1>
c0019b29:	51                   	push   ecx
c0019b2a:	51                   	push   ecx
c0019b2b:	68 87 b9 02 c0       	push   0xc002b987
c0019b30:	57                   	push   edi
c0019b31:	e8 fe 6c fe ff       	call   c0000834 <strcpy>
c0019b36:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019b40:	e8 69 67 fe ff       	call   c00002ae <is486>
c0019b45:	83 c4 10             	add    esp,0x10
c0019b48:	85 c0                	test   eax,eax
c0019b4a:	74 2b                	je     c0019b77 <CPU::detectFeatures()+0x9af>
c0019b4c:	52                   	push   edx
c0019b4d:	52                   	push   edx
c0019b4e:	68 47 bb 02 c0       	push   0xc002bb47
c0019b53:	53                   	push   ebx
c0019b54:	e8 e5 aa ff ff       	call   c001463e <Device::setName(char const*)>
c0019b59:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b60:	0f 20 c0             	mov    eax,cr0
c0019b63:	83 e0 14             	and    eax,0x14
c0019b66:	83 c4 10             	add    esp,0x10
c0019b69:	83 f8 04             	cmp    eax,0x4
c0019b6c:	75 1f                	jne    c0019b8d <CPU::detectFeatures()+0x9c5>
c0019b6e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b75:	eb 32                	jmp    c0019ba9 <CPU::detectFeatures()+0x9e1>
c0019b77:	50                   	push   eax
c0019b78:	50                   	push   eax
c0019b79:	68 52 bb 02 c0       	push   0xc002bb52
c0019b7e:	53                   	push   ebx
c0019b7f:	e8 ba aa ff ff       	call   c001463e <Device::setName(char const*)>
c0019b84:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b8b:	eb d3                	jmp    c0019b60 <CPU::detectFeatures()+0x998>
c0019b8d:	e8 f7 66 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b92:	83 e0 01             	and    eax,0x1
c0019b95:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b98:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b9e:	83 e0 fd             	and    eax,0xfffffffd
c0019ba1:	09 d0                	or     eax,edx
c0019ba3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019ba9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019bb0:	83 c4 4c             	add    esp,0x4c
c0019bb3:	5b                   	pop    ebx
c0019bb4:	5e                   	pop    esi
c0019bb5:	5f                   	pop    edi
c0019bb6:	5d                   	pop    ebp
c0019bb7:	c3                   	ret    

c0019bb8 <CPU::setupSMEP()>:
c0019bb8:	0f 20 e0             	mov    eax,cr4
c0019bbb:	0d 00 00 10 00       	or     eax,0x100000
c0019bc0:	0f 22 e0             	mov    cr4,eax
c0019bc3:	c3                   	ret    

c0019bc4 <CPU::setupUMIP()>:
c0019bc4:	0f 20 e0             	mov    eax,cr4
c0019bc7:	80 cc 08             	or     ah,0x8
c0019bca:	0f 22 e0             	mov    cr4,eax
c0019bcd:	c3                   	ret    

c0019bce <CPU::setupTSC()>:
c0019bce:	0f 20 e0             	mov    eax,cr4
c0019bd1:	83 c8 04             	or     eax,0x4
c0019bd4:	0f 22 e0             	mov    cr4,eax
c0019bd7:	c3                   	ret    

c0019bd8 <CPU::setupLargePages()>:
c0019bd8:	0f 20 e0             	mov    eax,cr4
c0019bdb:	83 c8 10             	or     eax,0x10
c0019bde:	0f 22 e0             	mov    cr4,eax
c0019be1:	c3                   	ret    

c0019be2 <CPU::setupPAT()>:
c0019be2:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0019be7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019bee:	74 2c                	je     c0019c1c <CPU::setupPAT()+0x3a>
c0019bf0:	53                   	push   ebx
c0019bf1:	83 ec 10             	sub    esp,0x10
c0019bf4:	68 77 02 00 00       	push   0x277
c0019bf9:	50                   	push   eax
c0019bfa:	e8 e9 51 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019bff:	83 e2 f8             	and    edx,0xfffffff8
c0019c02:	83 ca 01             	or     edx,0x1
c0019c05:	52                   	push   edx
c0019c06:	50                   	push   eax
c0019c07:	68 77 02 00 00       	push   0x277
c0019c0c:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c0019c12:	e8 fd 51 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019c17:	83 c4 28             	add    esp,0x28
c0019c1a:	5b                   	pop    ebx
c0019c1b:	c3                   	ret    
c0019c1c:	c3                   	ret    
c0019c1d:	90                   	nop

c0019c1e <CPU::setupMTRR()>:
c0019c1e:	c3                   	ret    
c0019c1f:	90                   	nop

c0019c20 <CPU::setupGlobalPages()>:
c0019c20:	0f 20 e0             	mov    eax,cr4
c0019c23:	0c 80                	or     al,0x80
c0019c25:	0f 22 e0             	mov    cr4,eax
c0019c28:	c3                   	ret    
c0019c29:	90                   	nop

c0019c2a <CPU::allowUsermodeDataAccess()>:
c0019c2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c2e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019c35:	74 03                	je     c0019c3a <CPU::allowUsermodeDataAccess()+0x10>
c0019c37:	0f 01 cb             	stac   
c0019c3a:	c3                   	ret    
c0019c3b:	90                   	nop

c0019c3c <CPU::prohibitUsermodeDataAccess()>:
c0019c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c40:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019c47:	74 03                	je     c0019c4c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019c49:	0f 01 ca             	clac   
c0019c4c:	c3                   	ret    
c0019c4d:	90                   	nop

c0019c4e <CPU::setupSMAP()>:
c0019c4e:	0f 20 e0             	mov    eax,cr4
c0019c51:	0d 00 00 20 00       	or     eax,0x200000
c0019c56:	0f 22 e0             	mov    cr4,eax
c0019c59:	eb e1                	jmp    c0019c3c <CPU::prohibitUsermodeDataAccess()>
c0019c5b:	90                   	nop

c0019c5c <CPU::setupFeatures()>:
c0019c5c:	83 ec 0c             	sub    esp,0xc
c0019c5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c63:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c6a:	74 07                	je     c0019c73 <CPU::setupFeatures()+0x17>
c0019c6c:	52                   	push   edx
c0019c6d:	e8 46 ff ff ff       	call   c0019bb8 <CPU::setupSMEP()>
c0019c72:	58                   	pop    eax
c0019c73:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c7a:	74 07                	je     c0019c83 <CPU::setupFeatures()+0x27>
c0019c7c:	52                   	push   edx
c0019c7d:	e8 cc ff ff ff       	call   c0019c4e <CPU::setupSMAP()>
c0019c82:	58                   	pop    eax
c0019c83:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c8a:	74 07                	je     c0019c93 <CPU::setupFeatures()+0x37>
c0019c8c:	52                   	push   edx
c0019c8d:	e8 32 ff ff ff       	call   c0019bc4 <CPU::setupUMIP()>
c0019c92:	58                   	pop    eax
c0019c93:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c9a:	74 07                	je     c0019ca3 <CPU::setupFeatures()+0x47>
c0019c9c:	52                   	push   edx
c0019c9d:	e8 2c ff ff ff       	call   c0019bce <CPU::setupTSC()>
c0019ca2:	58                   	pop    eax
c0019ca3:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019caa:	74 07                	je     c0019cb3 <CPU::setupFeatures()+0x57>
c0019cac:	52                   	push   edx
c0019cad:	e8 26 ff ff ff       	call   c0019bd8 <CPU::setupLargePages()>
c0019cb2:	59                   	pop    ecx
c0019cb3:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019cba:	74 07                	je     c0019cc3 <CPU::setupFeatures()+0x67>
c0019cbc:	52                   	push   edx
c0019cbd:	e8 5e ff ff ff       	call   c0019c20 <CPU::setupGlobalPages()>
c0019cc2:	58                   	pop    eax
c0019cc3:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019cca:	74 0c                	je     c0019cd8 <CPU::setupFeatures()+0x7c>
c0019ccc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019cd0:	83 c4 0c             	add    esp,0xc
c0019cd3:	e9 0a ff ff ff       	jmp    c0019be2 <CPU::setupPAT()>
c0019cd8:	83 c4 0c             	add    esp,0xc
c0019cdb:	c3                   	ret    

c0019cdc <CPU::open(int, int, void*)>:
c0019cdc:	57                   	push   edi
c0019cdd:	56                   	push   esi
c0019cde:	53                   	push   ebx
c0019cdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ce3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ce7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ced:	83 ec 0c             	sub    esp,0xc
c0019cf0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019cf6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019cfc:	50                   	push   eax
c0019cfd:	e8 d2 53 ff ff       	call   c000f0d4 <GDT::setup()>
c0019d02:	83 c4 0c             	add    esp,0xc
c0019d05:	6a 00                	push   0x0
c0019d07:	68 ef be ad de       	push   0xdeadbeef
c0019d0c:	57                   	push   edi
c0019d0d:	e8 42 78 ff ff       	call   c0011554 <TSS::setup(unsigned long, unsigned long)>
c0019d12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019d15:	e8 1a 78 ff ff       	call   c0011534 <TSS::flush()>
c0019d1a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d23:	e8 08 56 ff ff       	call   c000f330 <IDT::setup()>
c0019d28:	b8 00 04 00 00       	mov    eax,0x400
c0019d2d:	0f 23 f8             	mov    db7,eax
c0019d30:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019d3a:	e8 c2 61 ff ff       	call   c000ff01 <Phys::allocatePage()>
c0019d3f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019d45:	89 30                	mov    DWORD PTR [eax],esi
c0019d47:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019d4d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019d50:	58                   	pop    eax
c0019d51:	5a                   	pop    edx
c0019d52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d58:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d5c:	e8 31 89 ff ff       	call   c0012692 <VAS::setCPUSpecific(unsigned long)>
c0019d61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d64:	e8 5f f4 ff ff       	call   c00191c8 <CPU::detectFeatures()>
c0019d69:	e8 ce bc ff ff       	call   c0015a3c <setupInterruptController()>
c0019d6e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d74:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c0019d79:	83 e0 10             	and    eax,0x10
c0019d7c:	83 f8 01             	cmp    eax,0x1
c0019d7f:	19 c0                	sbb    eax,eax
c0019d81:	83 e0 46             	and    eax,0x46
c0019d84:	83 c0 1e             	add    eax,0x1e
c0019d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d8a:	e8 bb d1 ff ff       	call   c0016f4a <setupTimer(int)>
c0019d8f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d98:	e8 bf fe ff ff       	call   c0019c5c <CPU::setupFeatures()>
c0019d9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019da0:	e8 a7 f1 ff ff       	call   c0018f4c <CPU::displayFeatures()>
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	31 c0                	xor    eax,eax
c0019daa:	5b                   	pop    ebx
c0019dab:	5e                   	pop    esi
c0019dac:	5f                   	pop    edi
c0019dad:	c3                   	ret    

c0019dae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019dae:	57                   	push   edi
c0019daf:	56                   	push   esi
c0019db0:	53                   	push   ebx
c0019db1:	51                   	push   ecx
c0019db2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019db6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019db9:	0f 02 c0             	lar    eax,ax
c0019dbc:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019dbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019dc3:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019dc6:	88 ca                	mov    dl,cl
c0019dc8:	c0 ea 06             	shr    dl,0x6
c0019dcb:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019dcf:	89 ca                	mov    edx,ecx
c0019dd1:	66 c1 ea 03          	shr    dx,0x3
c0019dd5:	83 e2 07             	and    edx,0x7
c0019dd8:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019ddd:	88 17                	mov    BYTE PTR [edi],dl
c0019ddf:	0f 84 a6 01 00 00    	je     c0019f8b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019de5:	83 e1 07             	and    ecx,0x7
c0019de8:	80 f9 04             	cmp    cl,0x4
c0019deb:	0f 84 98 00 00 00    	je     c0019e89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019df1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019df6:	0f 95 c0             	setne  al
c0019df9:	80 f9 05             	cmp    cl,0x5
c0019dfc:	0f 95 c2             	setne  dl
c0019dff:	08 c2                	or     dl,al
c0019e01:	74 79                	je     c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019e03:	84 c9                	test   cl,cl
c0019e05:	75 05                	jne    c0019e0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019e07:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e0a:	eb 3c                	jmp    c0019e48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e0c:	80 f9 01             	cmp    cl,0x1
c0019e0f:	75 05                	jne    c0019e16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019e11:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e14:	eb 32                	jmp    c0019e48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e16:	80 f9 02             	cmp    cl,0x2
c0019e19:	75 05                	jne    c0019e20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019e1b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e1e:	eb 28                	jmp    c0019e48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e20:	31 c0                	xor    eax,eax
c0019e22:	80 f9 03             	cmp    cl,0x3
c0019e25:	75 05                	jne    c0019e2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019e27:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e2a:	eb 1c                	jmp    c0019e48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e2c:	80 f9 05             	cmp    cl,0x5
c0019e2f:	75 05                	jne    c0019e36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019e31:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e34:	eb 12                	jmp    c0019e48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e36:	80 f9 06             	cmp    cl,0x6
c0019e39:	75 05                	jne    c0019e40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019e3b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e3e:	eb 08                	jmp    c0019e48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e40:	80 f9 07             	cmp    cl,0x7
c0019e43:	75 03                	jne    c0019e48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e45:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e48:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e4d:	75 10                	jne    c0019e5f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019e4f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019e53:	b9 03 00 00 00       	mov    ecx,0x3
c0019e58:	01 d0                	add    eax,edx
c0019e5a:	e9 37 01 00 00       	jmp    c0019f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e5f:	b9 02 00 00 00       	mov    ecx,0x2
c0019e64:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e69:	0f 85 27 01 00 00    	jne    c0019f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e6f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e72:	b9 06 00 00 00       	mov    ecx,0x6
c0019e77:	e9 1a 01 00 00       	jmp    c0019f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e7c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e7f:	b9 06 00 00 00       	mov    ecx,0x6
c0019e84:	e9 0f 01 00 00       	jmp    c0019f98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e89:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e8c:	88 ca                	mov    dl,cl
c0019e8e:	c0 ea 06             	shr    dl,0x6
c0019e91:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e95:	89 ca                	mov    edx,ecx
c0019e97:	66 c1 ea 03          	shr    dx,0x3
c0019e9b:	83 e2 07             	and    edx,0x7
c0019e9e:	80 e1 07             	and    cl,0x7
c0019ea1:	75 05                	jne    c0019ea8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019ea3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019ea6:	eb 4c                	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ea8:	80 f9 01             	cmp    cl,0x1
c0019eab:	75 05                	jne    c0019eb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019ead:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019eb0:	eb 42                	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019eb2:	80 f9 02             	cmp    cl,0x2
c0019eb5:	75 05                	jne    c0019ebc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019eb7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019eba:	eb 38                	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ebc:	80 f9 03             	cmp    cl,0x3
c0019ebf:	75 05                	jne    c0019ec6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019ec1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019ec4:	eb 2e                	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ec6:	80 f9 04             	cmp    cl,0x4
c0019ec9:	75 12                	jne    c0019edd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019ecb:	f6 c4 60             	test   ah,0x60
c0019ece:	75 08                	jne    c0019ed8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019ed0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ed3:	8d 78 14             	lea    edi,[eax+0x14]
c0019ed6:	eb 1c                	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ed8:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019edb:	eb 17                	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019edd:	80 f9 05             	cmp    cl,0x5
c0019ee0:	75 05                	jne    c0019ee7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019ee2:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019ee5:	eb 0d                	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ee7:	80 f9 06             	cmp    cl,0x6
c0019eea:	75 05                	jne    c0019ef1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019eec:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019eef:	eb 03                	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ef1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019ef4:	84 d2                	test   dl,dl
c0019ef6:	75 05                	jne    c0019efd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019ef8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019efb:	eb 3c                	jmp    c0019f39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019efd:	80 fa 01             	cmp    dl,0x1
c0019f00:	75 05                	jne    c0019f07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019f02:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019f05:	eb 32                	jmp    c0019f39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f07:	80 fa 02             	cmp    dl,0x2
c0019f0a:	75 05                	jne    c0019f11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019f0c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019f0f:	eb 28                	jmp    c0019f39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f11:	80 fa 03             	cmp    dl,0x3
c0019f14:	75 05                	jne    c0019f1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019f16:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019f19:	eb 1e                	jmp    c0019f39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f1b:	31 c0                	xor    eax,eax
c0019f1d:	80 fa 04             	cmp    dl,0x4
c0019f20:	74 17                	je     c0019f39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f22:	80 fa 05             	cmp    dl,0x5
c0019f25:	75 05                	jne    c0019f2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019f27:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019f2a:	eb 0d                	jmp    c0019f39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f2c:	80 fa 06             	cmp    dl,0x6
c0019f2f:	75 05                	jne    c0019f36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019f31:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019f34:	eb 03                	jmp    c0019f39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f36:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019f39:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f3e:	0f 94 c2             	sete   dl
c0019f41:	80 f9 05             	cmp    cl,0x5
c0019f44:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019f48:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019f4d:	d3 e0                	shl    eax,cl
c0019f4f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019f53:	74 0a                	je     c0019f5f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019f55:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f58:	b9 07 00 00 00       	mov    ecx,0x7
c0019f5d:	eb 37                	jmp    c0019f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f5f:	01 f8                	add    eax,edi
c0019f61:	b9 03 00 00 00       	mov    ecx,0x3
c0019f66:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f6b:	74 2b                	je     c0019f98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f6d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f72:	75 0d                	jne    c0019f81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f74:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f78:	01 c8                	add    eax,ecx
c0019f7a:	b9 04 00 00 00       	mov    ecx,0x4
c0019f7f:	eb 17                	jmp    c0019f98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f81:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f84:	b9 07 00 00 00       	mov    ecx,0x7
c0019f89:	eb 0d                	jmp    c0019f98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f8b:	b9 02 00 00 00       	mov    ecx,0x2
c0019f90:	b2 01                	mov    dl,0x1
c0019f92:	31 c0                	xor    eax,eax
c0019f94:	eb 02                	jmp    c0019f98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f96:	31 d2                	xor    edx,edx
c0019f98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f9c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019fa2:	88 11                	mov    BYTE PTR [ecx],dl
c0019fa4:	5a                   	pop    edx
c0019fa5:	5b                   	pop    ebx
c0019fa6:	5e                   	pop    esi
c0019fa7:	5f                   	pop    edi
c0019fa8:	c3                   	ret    

c0019fa9 <Krnl::smpEntry()>:
c0019fa9:	eb fe                	jmp    c0019fa9 <Krnl::smpEntry()>

c0019fab <Krnl::startCPU(int)>:
c0019fab:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0019fb0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019fb7:	0f 84 36 01 00 00    	je     c001a0f3 <Krnl::startCPU(int)+0x148>
c0019fbd:	53                   	push   ebx
c0019fbe:	83 ec 08             	sub    esp,0x8
c0019fc1:	e8 fc 3e 00 00       	call   c001dec2 <lockScheduler()>
c0019fc6:	52                   	push   edx
c0019fc7:	52                   	push   edx
c0019fc8:	6a 1b                	push   0x1b
c0019fca:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c0019fd0:	e8 13 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019fd5:	59                   	pop    ecx
c0019fd6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019fdb:	89 c3                	mov    ebx,eax
c0019fdd:	58                   	pop    eax
c0019fde:	53                   	push   ebx
c0019fdf:	68 8c bb 02 c0       	push   0xc002bb8c
c0019fe4:	e8 4d 90 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0019fe9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ff7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a001:	c1 e0 18             	shl    eax,0x18
c001a004:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a00a:	83 c4 10             	add    esp,0x10
c001a00d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a013:	09 c2                	or     edx,eax
c001a015:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a01b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a021:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a027:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a02d:	80 cd c5             	or     ch,0xc5
c001a030:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a036:	f3 90                	pause  
c001a038:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a03a:	0f ba e1 0c          	bt     ecx,0xc
c001a03e:	72 f6                	jb     c001a036 <Krnl::startCPU(int)+0x8b>
c001a040:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a046:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a04c:	09 c1                	or     ecx,eax
c001a04e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a054:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a05a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a060:	80 cd 85             	or     ch,0x85
c001a063:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a069:	f3 90                	pause  
c001a06b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a06d:	0f ba e1 0c          	bt     ecx,0xc
c001a071:	72 f6                	jb     c001a069 <Krnl::startCPU(int)+0xbe>
c001a073:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a07d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a083:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a089:	09 c1                	or     ecx,eax
c001a08b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a091:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a097:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a09d:	81 c9 02 06 00 00    	or     ecx,0x602
c001a0a3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a0a9:	f3 90                	pause  
c001a0ab:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a0ad:	0f ba e1 0c          	bt     ecx,0xc
c001a0b1:	72 f6                	jb     c001a0a9 <Krnl::startCPU(int)+0xfe>
c001a0b3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a0bd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a0c3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a0c9:	09 c8                	or     eax,ecx
c001a0cb:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a0d1:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a0d7:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a0dc:	0d 02 06 00 00       	or     eax,0x602
c001a0e1:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a0e7:	f3 90                	pause  
c001a0e9:	8b 02                	mov    eax,DWORD PTR [edx]
c001a0eb:	0f ba e0 0c          	bt     eax,0xc
c001a0ef:	72 f6                	jb     c001a0e7 <Krnl::startCPU(int)+0x13c>
c001a0f1:	eb fe                	jmp    c001a0f1 <Krnl::startCPU(int)+0x146>
c001a0f3:	c3                   	ret    

c001a0f4 <Krnl::startCPUs()>:
c001a0f4:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001a0f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0ff:	88 c2                	mov    dl,al
c001a101:	83 e2 0a             	and    edx,0xa
c001a104:	80 fa 0a             	cmp    dl,0xa
c001a107:	75 09                	jne    c001a112 <Krnl::startCPUs()+0x1e>
c001a109:	a8 01                	test   al,0x1
c001a10b:	74 05                	je     c001a112 <Krnl::startCPUs()+0x1e>
c001a10d:	e9 89 60 fe ff       	jmp    c000019b <prepareTramp>
c001a112:	c3                   	ret    
c001a113:	90                   	nop

c001a114 <EnvVarContainer::getEnv(char const*)>:
c001a114:	57                   	push   edi
c001a115:	56                   	push   esi
c001a116:	53                   	push   ebx
c001a117:	31 db                	xor    ebx,ebx
c001a119:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a11d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a11f:	7e 2b                	jle    c001a14c <EnvVarContainer::getEnv(char const*)+0x38>
c001a121:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a128:	50                   	push   eax
c001a129:	50                   	push   eax
c001a12a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a12d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a130:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a134:	e8 87 67 fe ff       	call   c00008c0 <strcmp>
c001a139:	83 c4 10             	add    esp,0x10
c001a13c:	85 c0                	test   eax,eax
c001a13e:	75 09                	jne    c001a149 <EnvVarContainer::getEnv(char const*)+0x35>
c001a140:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a143:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a147:	eb 05                	jmp    c001a14e <EnvVarContainer::getEnv(char const*)+0x3a>
c001a149:	43                   	inc    ebx
c001a14a:	eb d1                	jmp    c001a11d <EnvVarContainer::getEnv(char const*)+0x9>
c001a14c:	31 c0                	xor    eax,eax
c001a14e:	5b                   	pop    ebx
c001a14f:	5e                   	pop    esi
c001a150:	5f                   	pop    edi
c001a151:	c3                   	ret    

c001a152 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a152:	57                   	push   edi
c001a153:	56                   	push   esi
c001a154:	53                   	push   ebx
c001a155:	83 ec 1c             	sub    esp,0x1c
c001a158:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a15c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a160:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a164:	57                   	push   edi
c001a165:	e8 2a 66 fe ff       	call   c0000794 <strlen>
c001a16a:	40                   	inc    eax
c001a16b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a16e:	e8 cd 56 ff ff       	call   c000f840 <malloc>
c001a173:	89 34 24             	mov    DWORD PTR [esp],esi
c001a176:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a17a:	e8 15 66 fe ff       	call   c0000794 <strlen>
c001a17f:	40                   	inc    eax
c001a180:	89 04 24             	mov    DWORD PTR [esp],eax
c001a183:	e8 b8 56 ff ff       	call   c000f840 <malloc>
c001a188:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a18b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a18f:	e8 00 66 fe ff       	call   c0000794 <strlen>
c001a194:	83 c4 0c             	add    esp,0xc
c001a197:	40                   	inc    eax
c001a198:	50                   	push   eax
c001a199:	6a 00                	push   0x0
c001a19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a19f:	e8 d4 65 fe ff       	call   c0000778 <memset>
c001a1a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1a7:	e8 e8 65 fe ff       	call   c0000794 <strlen>
c001a1ac:	83 c4 0c             	add    esp,0xc
c001a1af:	40                   	inc    eax
c001a1b0:	50                   	push   eax
c001a1b1:	57                   	push   edi
c001a1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a1b6:	e8 89 65 fe ff       	call   c0000744 <memcpy>
c001a1bb:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1be:	e8 d1 65 fe ff       	call   c0000794 <strlen>
c001a1c3:	83 c4 0c             	add    esp,0xc
c001a1c6:	40                   	inc    eax
c001a1c7:	50                   	push   eax
c001a1c8:	6a 00                	push   0x0
c001a1ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1ce:	e8 a5 65 fe ff       	call   c0000778 <memset>
c001a1d3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1d6:	e8 b9 65 fe ff       	call   c0000794 <strlen>
c001a1db:	83 c4 0c             	add    esp,0xc
c001a1de:	40                   	inc    eax
c001a1df:	50                   	push   eax
c001a1e0:	56                   	push   esi
c001a1e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1e5:	e8 5a 65 fe ff       	call   c0000744 <memcpy>
c001a1ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1ec:	40                   	inc    eax
c001a1ed:	89 03                	mov    DWORD PTR [ebx],eax
c001a1ef:	c1 e0 03             	shl    eax,0x3
c001a1f2:	5a                   	pop    edx
c001a1f3:	59                   	pop    ecx
c001a1f4:	50                   	push   eax
c001a1f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a1f8:	e8 2f 56 ff ff       	call   c000f82c <realloc>
c001a1fd:	83 c4 0c             	add    esp,0xc
c001a200:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a203:	6a 08                	push   0x8
c001a205:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a209:	52                   	push   edx
c001a20a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a20c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a210:	50                   	push   eax
c001a211:	e8 2e 65 fe ff       	call   c0000744 <memcpy>
c001a216:	83 c4 20             	add    esp,0x20
c001a219:	5b                   	pop    ebx
c001a21a:	5e                   	pop    esi
c001a21b:	5f                   	pop    edi
c001a21c:	c3                   	ret    
c001a21d:	90                   	nop

c001a21e <EnvVarContainer::deleteEnv(char const*)>:
c001a21e:	c3                   	ret    
c001a21f:	90                   	nop

c001a220 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a220:	55                   	push   ebp
c001a221:	57                   	push   edi
c001a222:	56                   	push   esi
c001a223:	53                   	push   ebx
c001a224:	81 ec 38 01 00 00    	sub    esp,0x138
c001a22a:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a231:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a238:	68 14 01 00 00       	push   0x114
c001a23d:	e8 fe 55 ff ff       	call   c000f840 <malloc>
c001a242:	83 c4 0c             	add    esp,0xc
c001a245:	89 c7                	mov    edi,eax
c001a247:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a24a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a251:	50                   	push   eax
c001a252:	e8 37 93 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001a257:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a25a:	e8 01 96 ff ff       	call   c0013860 <File::exists()>
c001a25f:	83 c4 10             	add    esp,0x10
c001a262:	84 c0                	test   al,al
c001a264:	75 31                	jne    c001a297 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a266:	51                   	push   ecx
c001a267:	51                   	push   ecx
c001a268:	6a 12                	push   0x12
c001a26a:	57                   	push   edi
c001a26b:	e8 82 93 ff ff       	call   c00135f2 <File::open(FileOpenMode)>
c001a270:	8b 07                	mov    eax,DWORD PTR [edi]
c001a272:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a275:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a278:	e8 17 65 fe ff       	call   c0000794 <strlen>
c001a27d:	5a                   	pop    edx
c001a27e:	31 d2                	xor    edx,edx
c001a280:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a284:	51                   	push   ecx
c001a285:	55                   	push   ebp
c001a286:	52                   	push   edx
c001a287:	50                   	push   eax
c001a288:	57                   	push   edi
c001a289:	ff d3                	call   ebx
c001a28b:	83 c4 14             	add    esp,0x14
c001a28e:	57                   	push   edi
c001a28f:	e8 bc 93 ff ff       	call   c0013650 <File::close()>
c001a294:	83 c4 10             	add    esp,0x10
c001a297:	31 db                	xor    ebx,ebx
c001a299:	50                   	push   eax
c001a29a:	31 ed                	xor    ebp,ebp
c001a29c:	68 00 01 00 00       	push   0x100
c001a2a1:	6a 00                	push   0x0
c001a2a3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a2a7:	50                   	push   eax
c001a2a8:	e8 cb 64 fe ff       	call   c0000778 <memset>
c001a2ad:	58                   	pop    eax
c001a2ae:	5a                   	pop    edx
c001a2af:	6a 01                	push   0x1
c001a2b1:	57                   	push   edi
c001a2b2:	e8 3b 93 ff ff       	call   c00135f2 <File::open(FileOpenMode)>
c001a2b7:	83 c4 10             	add    esp,0x10
c001a2ba:	83 ec 0c             	sub    esp,0xc
c001a2bd:	8b 07                	mov    eax,DWORD PTR [edi]
c001a2bf:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a2c3:	51                   	push   ecx
c001a2c4:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a2c8:	52                   	push   edx
c001a2c9:	6a 00                	push   0x0
c001a2cb:	6a 01                	push   0x1
c001a2cd:	57                   	push   edi
c001a2ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a2d1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a2d5:	83 c4 20             	add    esp,0x20
c001a2d8:	3c 0d                	cmp    al,0xd
c001a2da:	0f 84 12 01 00 00    	je     c001a3f2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2e0:	85 db                	test   ebx,ebx
c001a2e2:	0f 84 fd 00 00 00    	je     c001a3e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2e8:	3c 0a                	cmp    al,0xa
c001a2ea:	74 13                	je     c001a2ff <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2f1:	74 0c                	je     c001a2ff <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2f3:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a2f9:	0f 8e e6 00 00 00    	jle    c001a3e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2ff:	83 ec 0c             	sub    esp,0xc
c001a302:	8d 53 01             	lea    edx,[ebx+0x1]
c001a305:	29 dd                	sub    ebp,ebx
c001a307:	52                   	push   edx
c001a308:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a30c:	e8 2f 55 ff ff       	call   c000f840 <malloc>
c001a311:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a314:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a318:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a31b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a31f:	e8 1c 55 ff ff       	call   c000f840 <malloc>
c001a324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a328:	83 c4 0c             	add    esp,0xc
c001a32b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a32f:	52                   	push   edx
c001a330:	6a 00                	push   0x0
c001a332:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a336:	e8 3d 64 fe ff       	call   c0000778 <memset>
c001a33b:	83 c4 0c             	add    esp,0xc
c001a33e:	53                   	push   ebx
c001a33f:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a343:	55                   	push   ebp
c001a344:	01 eb                	add    ebx,ebp
c001a346:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a34a:	e8 f5 63 fe ff       	call   c0000744 <memcpy>
c001a34f:	83 c4 0c             	add    esp,0xc
c001a352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a356:	51                   	push   ecx
c001a357:	6a 00                	push   0x0
c001a359:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a35d:	e8 16 64 fe ff       	call   c0000778 <memset>
c001a362:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a365:	e8 2a 64 fe ff       	call   c0000794 <strlen>
c001a36a:	83 c4 0c             	add    esp,0xc
c001a36d:	50                   	push   eax
c001a36e:	53                   	push   ebx
c001a36f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a373:	e8 cc 63 fe ff       	call   c0000744 <memcpy>
c001a378:	5b                   	pop    ebx
c001a379:	58                   	pop    eax
c001a37a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a37e:	68 9d bb 02 c0       	push   0xc002bb9d
c001a383:	e8 ae 8c ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001a388:	8b 06                	mov    eax,DWORD PTR [esi]
c001a38a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a38d:	40                   	inc    eax
c001a38e:	83 c4 10             	add    esp,0x10
c001a391:	89 06                	mov    DWORD PTR [esi],eax
c001a393:	85 d2                	test   edx,edx
c001a395:	75 0c                	jne    c001a3a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a397:	83 ec 0c             	sub    esp,0xc
c001a39a:	6a 08                	push   0x8
c001a39c:	e8 9f 54 ff ff       	call   c000f840 <malloc>
c001a3a1:	eb 0c                	jmp    c001a3af <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a3a3:	c1 e0 03             	shl    eax,0x3
c001a3a6:	51                   	push   ecx
c001a3a7:	51                   	push   ecx
c001a3a8:	50                   	push   eax
c001a3a9:	52                   	push   edx
c001a3aa:	e8 7d 54 ff ff       	call   c000f82c <realloc>
c001a3af:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a3b2:	83 c4 10             	add    esp,0x10
c001a3b5:	31 db                	xor    ebx,ebx
c001a3b7:	52                   	push   edx
c001a3b8:	6a 08                	push   0x8
c001a3ba:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a3be:	50                   	push   eax
c001a3bf:	8b 16                	mov    edx,DWORD PTR [esi]
c001a3c1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a3c4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a3c8:	50                   	push   eax
c001a3c9:	e8 76 63 fe ff       	call   c0000744 <memcpy>
c001a3ce:	83 c4 0c             	add    esp,0xc
c001a3d1:	68 00 01 00 00       	push   0x100
c001a3d6:	6a 00                	push   0x0
c001a3d8:	55                   	push   ebp
c001a3d9:	31 ed                	xor    ebp,ebp
c001a3db:	e8 98 63 fe ff       	call   c0000778 <memset>
c001a3e0:	83 c4 10             	add    esp,0x10
c001a3e3:	eb 0d                	jmp    c001a3f2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3e5:	3c 3d                	cmp    al,0x3d
c001a3e7:	74 07                	je     c001a3f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a3e9:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a3ed:	45                   	inc    ebp
c001a3ee:	eb 02                	jmp    c001a3f2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3f0:	89 eb                	mov    ebx,ebp
c001a3f2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3f7:	0f 85 bd fe ff ff    	jne    c001a2ba <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a3fd:	50                   	push   eax
c001a3fe:	50                   	push   eax
c001a3ff:	ff 36                	push   DWORD PTR [esi]
c001a401:	68 ab bb 02 c0       	push   0xc002bbab
c001a406:	e8 2b 8c ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001a40b:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a411:	5b                   	pop    ebx
c001a412:	5e                   	pop    esi
c001a413:	5f                   	pop    edi
c001a414:	5d                   	pop    ebp
c001a415:	c3                   	ret    

c001a416 <EnvVarContainer::__loadSystem()>:
c001a416:	83 ec 10             	sub    esp,0x10
c001a419:	68 c0 da 02 c0       	push   0xc002dac0
c001a41e:	68 d6 bb 02 c0       	push   0xc002bbd6
c001a423:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a427:	e8 f4 fd ff ff       	call   c001a220 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a42c:	83 c4 1c             	add    esp,0x1c
c001a42f:	c3                   	ret    

c001a430 <EnvVarContainer::__loadUser()>:
c001a430:	c3                   	ret    
c001a431:	90                   	nop

c001a432 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a436:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a43c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a440:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a444:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a44b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a452:	90                   	nop
c001a453:	c3                   	ret    

c001a454 <EnvVarContainer::~EnvVarContainer()>:
c001a454:	83 ec 0c             	sub    esp,0xc
c001a457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a45b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a45e:	85 c0                	test   eax,eax
c001a460:	74 1d                	je     c001a47f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a466:	8b 00                	mov    eax,DWORD PTR [eax]
c001a468:	85 c0                	test   eax,eax
c001a46a:	74 13                	je     c001a47f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a470:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a473:	83 ec 0c             	sub    esp,0xc
c001a476:	50                   	push   eax
c001a477:	e8 d4 53 ff ff       	call   c000f850 <free>
c001a47c:	83 c4 10             	add    esp,0x10
c001a47f:	90                   	nop
c001a480:	83 c4 0c             	add    esp,0xc
c001a483:	c3                   	ret    

c001a484 <Krnl::getEnv(Process*, char const*)>:
c001a484:	53                   	push   ebx
c001a485:	83 ec 08             	sub    esp,0x8
c001a488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a48c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a490:	39 05 14 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b14,eax
c001a496:	74 04                	je     c001a49c <Krnl::getEnv(Process*, char const*)+0x18>
c001a498:	85 c0                	test   eax,eax
c001a49a:	75 0b                	jne    c001a4a7 <Krnl::getEnv(Process*, char const*)+0x23>
c001a49c:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a4a1:	85 c0                	test   eax,eax
c001a4a3:	75 19                	jne    c001a4be <Krnl::getEnv(Process*, char const*)+0x3a>
c001a4a5:	eb 27                	jmp    c001a4ce <Krnl::getEnv(Process*, char const*)+0x4a>
c001a4a7:	52                   	push   edx
c001a4a8:	52                   	push   edx
c001a4a9:	53                   	push   ebx
c001a4aa:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a4b0:	e8 5f fc ff ff       	call   c001a114 <EnvVarContainer::getEnv(char const*)>
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	85 c0                	test   eax,eax
c001a4ba:	75 28                	jne    c001a4e4 <Krnl::getEnv(Process*, char const*)+0x60>
c001a4bc:	eb de                	jmp    c001a49c <Krnl::getEnv(Process*, char const*)+0x18>
c001a4be:	52                   	push   edx
c001a4bf:	52                   	push   edx
c001a4c0:	53                   	push   ebx
c001a4c1:	50                   	push   eax
c001a4c2:	e8 4d fc ff ff       	call   c001a114 <EnvVarContainer::getEnv(char const*)>
c001a4c7:	83 c4 10             	add    esp,0x10
c001a4ca:	85 c0                	test   eax,eax
c001a4cc:	75 16                	jne    c001a4e4 <Krnl::getEnv(Process*, char const*)+0x60>
c001a4ce:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a4d2:	a1 f8 10 03 c0       	mov    eax,ds:0xc00310f8
c001a4d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a4db:	83 c4 08             	add    esp,0x8
c001a4de:	5b                   	pop    ebx
c001a4df:	e9 30 fc ff ff       	jmp    c001a114 <EnvVarContainer::getEnv(char const*)>
c001a4e4:	83 c4 08             	add    esp,0x8
c001a4e7:	5b                   	pop    ebx
c001a4e8:	c3                   	ret    

c001a4e9 <Krnl::setEnvSystem(char const*, char const*)>:
c001a4e9:	83 ec 10             	sub    esp,0x10
c001a4ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4f4:	ff 35 f8 10 03 c0    	push   DWORD PTR ds:0xc00310f8
c001a4fa:	e8 53 fc ff ff       	call   c001a152 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4ff:	83 c4 1c             	add    esp,0x1c
c001a502:	c3                   	ret    

c001a503 <Krnl::setEnvUser(char const*, char const*)>:
c001a503:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a508:	85 c0                	test   eax,eax
c001a50a:	74 15                	je     c001a521 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a50c:	83 ec 10             	sub    esp,0x10
c001a50f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a513:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a517:	50                   	push   eax
c001a518:	e8 35 fc ff ff       	call   c001a152 <EnvVarContainer::setEnv(char const*, char const*)>
c001a51d:	83 c4 1c             	add    esp,0x1c
c001a520:	c3                   	ret    
c001a521:	c3                   	ret    

c001a522 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a526:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a52c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a530:	e9 1d fc ff ff       	jmp    c001a152 <EnvVarContainer::setEnv(char const*, char const*)>

c001a535 <Krnl::deleteEnvSystem(char const*)>:
c001a535:	c3                   	ret    

c001a536 <Krnl::deleteEnvUser(char const*)>:
c001a536:	c3                   	ret    

c001a537 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a537:	c3                   	ret    

c001a538 <Krnl::newProcessEnv(Process*)>:
c001a538:	83 ec 28             	sub    esp,0x28
c001a53b:	6a 0c                	push   0xc
c001a53d:	e8 fe 52 ff ff       	call   c000f840 <malloc>
c001a542:	5a                   	pop    edx
c001a543:	59                   	pop    ecx
c001a544:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a548:	50                   	push   eax
c001a549:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a54d:	e8 e0 fe ff ff       	call   c001a432 <EnvVarContainer::EnvVarContainer(Process*)>
c001a552:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a556:	83 c4 2c             	add    esp,0x2c
c001a559:	c3                   	ret    

c001a55a <Krnl::copyProcessEnv(Process*, Process*)>:
c001a55a:	56                   	push   esi
c001a55b:	53                   	push   ebx
c001a55c:	83 ec 10             	sub    esp,0x10
c001a55f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a563:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a569:	6a 0c                	push   0xc
c001a56b:	e8 d0 52 ff ff       	call   c000f840 <malloc>
c001a570:	89 c3                	mov    ebx,eax
c001a572:	58                   	pop    eax
c001a573:	5a                   	pop    edx
c001a574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a578:	53                   	push   ebx
c001a579:	e8 b4 fe ff ff       	call   c001a432 <EnvVarContainer::EnvVarContainer(Process*)>
c001a57e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a580:	89 03                	mov    DWORD PTR [ebx],eax
c001a582:	c1 e0 03             	shl    eax,0x3
c001a585:	89 04 24             	mov    DWORD PTR [esp],eax
c001a588:	e8 b3 52 ff ff       	call   c000f840 <malloc>
c001a58d:	83 c4 0c             	add    esp,0xc
c001a590:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a593:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a595:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a59c:	52                   	push   edx
c001a59d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a5a0:	50                   	push   eax
c001a5a1:	e8 9e 61 fe ff       	call   c0000744 <memcpy>
c001a5a6:	89 d8                	mov    eax,ebx
c001a5a8:	83 c4 14             	add    esp,0x14
c001a5ab:	5b                   	pop    ebx
c001a5ac:	5e                   	pop    esi
c001a5ad:	c3                   	ret    

c001a5ae <Krnl::loadSystemEnv()>:
c001a5ae:	53                   	push   ebx
c001a5af:	83 ec 14             	sub    esp,0x14
c001a5b2:	6a 0c                	push   0xc
c001a5b4:	e8 87 52 ff ff       	call   c000f840 <malloc>
c001a5b9:	89 c3                	mov    ebx,eax
c001a5bb:	58                   	pop    eax
c001a5bc:	5a                   	pop    edx
c001a5bd:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001a5c3:	53                   	push   ebx
c001a5c4:	e8 69 fe ff ff       	call   c001a432 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5cc:	89 1d f8 10 03 c0    	mov    DWORD PTR ds:0xc00310f8,ebx
c001a5d2:	e8 3f fe ff ff       	call   c001a416 <EnvVarContainer::__loadSystem()>
c001a5d7:	83 c4 18             	add    esp,0x18
c001a5da:	5b                   	pop    ebx
c001a5db:	c3                   	ret    

c001a5dc <Krnl::loadUserEnv()>:
c001a5dc:	53                   	push   ebx
c001a5dd:	83 ec 14             	sub    esp,0x14
c001a5e0:	6a 0c                	push   0xc
c001a5e2:	e8 59 52 ff ff       	call   c000f840 <malloc>
c001a5e7:	89 c3                	mov    ebx,eax
c001a5e9:	58                   	pop    eax
c001a5ea:	5a                   	pop    edx
c001a5eb:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001a5f1:	53                   	push   ebx
c001a5f2:	e8 3b fe ff ff       	call   c001a432 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5f7:	89 1d f4 10 03 c0    	mov    DWORD PTR ds:0xc00310f4,ebx
c001a5fd:	83 c4 18             	add    esp,0x18
c001a600:	5b                   	pop    ebx
c001a601:	c3                   	ret    

c001a602 <Krnl::flushEnv()>:
c001a602:	c3                   	ret    

c001a603 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a607:	8b 15 f4 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310f4
c001a60d:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a613:	a1 f8 10 03 c0       	mov    eax,ds:0xc00310f8
c001a618:	8b 00                	mov    eax,DWORD PTR [eax]
c001a61a:	03 01                	add    eax,DWORD PTR [ecx]
c001a61c:	85 d2                	test   edx,edx
c001a61e:	74 02                	je     c001a622 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a620:	03 02                	add    eax,DWORD PTR [edx]
c001a622:	c3                   	ret    

c001a623 <Krnl::getProcessEnvPair(Process*, int)>:
c001a623:	57                   	push   edi
c001a624:	8b 0d f4 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310f4
c001a62a:	56                   	push   esi
c001a62b:	85 c9                	test   ecx,ecx
c001a62d:	53                   	push   ebx
c001a62e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a632:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a636:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a63c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a640:	8b 02                	mov    eax,DWORD PTR [edx]
c001a642:	75 47                	jne    c001a68b <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a644:	39 c3                	cmp    ebx,eax
c001a646:	7c 47                	jl     c001a68f <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a648:	8b 15 f8 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310f8
c001a64e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a650:	01 c1                	add    ecx,eax
c001a652:	39 d9                	cmp    ecx,ebx
c001a654:	7e 6c                	jle    c001a6c2 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a656:	51                   	push   ecx
c001a657:	89 d9                	mov    ecx,ebx
c001a659:	29 c1                	sub    ecx,eax
c001a65b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a65e:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a662:	53                   	push   ebx
c001a663:	68 f8 bb 02 c0       	push   0xc002bbf8
c001a668:	e8 c9 89 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001a66d:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a673:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a675:	a1 f8 10 03 c0       	mov    eax,ds:0xc00310f8
c001a67a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a67d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a681:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a684:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a687:	89 06                	mov    DWORD PTR [esi],eax
c001a689:	eb 51                	jmp    c001a6dc <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a68b:	39 c3                	cmp    ebx,eax
c001a68d:	7d 05                	jge    c001a694 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a68f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a692:	eb 20                	jmp    c001a6b4 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a694:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a696:	8d 14 07             	lea    edx,[edi+eax*1]
c001a699:	39 da                	cmp    edx,ebx
c001a69b:	7e 04                	jle    c001a6a1 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a69d:	29 c3                	sub    ebx,eax
c001a69f:	eb 10                	jmp    c001a6b1 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a6a1:	8b 0d f8 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310f8
c001a6a7:	03 11                	add    edx,DWORD PTR [ecx]
c001a6a9:	39 da                	cmp    edx,ebx
c001a6ab:	7e 15                	jle    c001a6c2 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a6ad:	29 c3                	sub    ebx,eax
c001a6af:	29 fb                	sub    ebx,edi
c001a6b1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a6b4:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a6b8:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a6bb:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a6be:	89 06                	mov    DWORD PTR [esi],eax
c001a6c0:	eb 1d                	jmp    c001a6df <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a6c2:	83 ec 0c             	sub    esp,0xc
c001a6c5:	68 0c bc 02 c0       	push   0xc002bc0c
c001a6ca:	e8 18 00 00 00       	call   c001a6e7 <Krnl::panic(char const*)>
c001a6cf:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a6d5:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a6dc:	83 c4 10             	add    esp,0x10
c001a6df:	89 f0                	mov    eax,esi
c001a6e1:	5b                   	pop    ebx
c001a6e2:	5e                   	pop    esi
c001a6e3:	5f                   	pop    edi
c001a6e4:	c2 04 00             	ret    0x4

c001a6e7 <Krnl::panic(char const*)>:
c001a6e7:	55                   	push   ebp
c001a6e8:	89 e5                	mov    ebp,esp
c001a6ea:	53                   	push   ebx
c001a6eb:	83 ec 0c             	sub    esp,0xc
c001a6ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a6f1:	fa                   	cli    
c001a6f2:	c6 05 04 11 03 c0 01 	mov    BYTE PTR ds:0xc0031104,0x1
c001a6f9:	53                   	push   ebx
c001a6fa:	c6 05 c4 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d4c4,0x0
c001a701:	68 26 bc 02 c0       	push   0xc002bc26
c001a706:	e8 2b 89 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001a70b:	58                   	pop    eax
c001a70c:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a711:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a717:	e8 79 66 ff ff       	call   c0010d95 <setActiveTerminal(VgaText*)>
c001a71c:	83 c4 0c             	add    esp,0xc
c001a71f:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a724:	6a 01                	push   0x1
c001a726:	6a 0f                	push   0xf
c001a728:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72e:	e8 93 60 ff ff       	call   c00107c6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a733:	58                   	pop    eax
c001a734:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a739:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73f:	e8 f2 68 ff ff       	call   c0011036 <VgaText::clearScreen()>
c001a744:	58                   	pop    eax
c001a745:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a74a:	5a                   	pop    edx
c001a74b:	68 3f bc 02 c0       	push   0xc002bc3f
c001a750:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a756:	e8 59 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a75b:	59                   	pop    ecx
c001a75c:	58                   	pop    eax
c001a75d:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a762:	68 e4 bc 02 c0       	push   0xc002bce4
c001a767:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76d:	e8 42 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a772:	58                   	pop    eax
c001a773:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a778:	5a                   	pop    edx
c001a779:	68 5b bc 02 c0       	push   0xc002bc5b
c001a77e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a784:	e8 2b 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a789:	59                   	pop    ecx
c001a78a:	58                   	pop    eax
c001a78b:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a790:	53                   	push   ebx
c001a791:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a797:	e8 18 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a79c:	58                   	pop    eax
c001a79d:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a7a2:	5a                   	pop    edx
c001a7a3:	68 7b bc 02 c0       	push   0xc002bc7b
c001a7a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ae:	e8 01 6a ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a7b3:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001a7b8:	83 c4 10             	add    esp,0x10
c001a7bb:	85 c0                	test   eax,eax
c001a7bd:	74 02                	je     c001a7c1 <Krnl::panic(char const*)+0xda>
c001a7bf:	ff d0                	call   eax
c001a7c1:	83 ec 0c             	sub    esp,0xc
c001a7c4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7c7:	e8 fd 2f 00 00       	call   c001d7c9 <Thr::getDriverNameFromAddress(unsigned long)>
c001a7cc:	83 c4 10             	add    esp,0x10
c001a7cf:	89 c3                	mov    ebx,eax
c001a7d1:	85 c0                	test   eax,eax
c001a7d3:	0f 84 50 02 00 00    	je     c001aa29 <Krnl::panic(char const*)+0x342>
c001a7d9:	83 ec 08             	sub    esp,0x8
c001a7dc:	8b 15 14 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b14
c001a7e2:	68 20 bd 02 c0       	push   0xc002bd20
c001a7e7:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7ed:	e8 c2 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a7f2:	58                   	pop    eax
c001a7f3:	5a                   	pop    edx
c001a7f4:	8b 15 14 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b14
c001a7fa:	68 5b bc 02 c0       	push   0xc002bc5b
c001a7ff:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a805:	e8 aa 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a80a:	59                   	pop    ecx
c001a80b:	58                   	pop    eax
c001a80c:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a811:	53                   	push   ebx
c001a812:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a818:	e8 97 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a81d:	83 c4 10             	add    esp,0x10
c001a820:	83 ec 08             	sub    esp,0x8
c001a823:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a828:	68 7a bc 02 c0       	push   0xc002bc7a
c001a82d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a833:	e8 7c 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a838:	58                   	pop    eax
c001a839:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a83e:	5a                   	pop    edx
c001a83f:	68 78 bd 02 c0       	push   0xc002bd78
c001a844:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84a:	e8 65 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a84f:	59                   	pop    ecx
c001a850:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a855:	5b                   	pop    ebx
c001a856:	68 b8 bd 02 c0       	push   0xc002bdb8
c001a85b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a861:	e8 4e 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a866:	58                   	pop    eax
c001a867:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a86c:	5a                   	pop    edx
c001a86d:	68 66 bc 02 c0       	push   0xc002bc66
c001a872:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a878:	e8 37 69 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a87d:	59                   	pop    ecx
c001a87e:	5b                   	pop    ebx
c001a87f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a882:	68 7e bc 02 c0       	push   0xc002bc7e
c001a887:	e8 aa 87 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001a88c:	58                   	pop    eax
c001a88d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a890:	5a                   	pop    edx
c001a891:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a894:	68 87 bc 02 c0       	push   0xc002bc87
c001a899:	e8 98 87 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001a89e:	59                   	pop    ecx
c001a89f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a8a2:	5b                   	pop    ebx
c001a8a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a8a8:	68 90 bc 02 c0       	push   0xc002bc90
c001a8ad:	e8 84 87 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001a8b2:	58                   	pop    eax
c001a8b3:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a8b8:	5a                   	pop    edx
c001a8b9:	68 fc bd 02 c0       	push   0xc002bdfc
c001a8be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c4:	e8 eb 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a8c9:	59                   	pop    ecx
c001a8ca:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a8cf:	5b                   	pop    ebx
c001a8d0:	68 99 bc 02 c0       	push   0xc002bc99
c001a8d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8db:	e8 d4 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a8e0:	0f 20 c0             	mov    eax,cr0
c001a8e3:	5a                   	pop    edx
c001a8e4:	59                   	pop    ecx
c001a8e5:	50                   	push   eax
c001a8e6:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a8eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f1:	e8 e4 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a8f6:	5b                   	pop    ebx
c001a8f7:	58                   	pop    eax
c001a8f8:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a8fd:	68 a3 bc 02 c0       	push   0xc002bca3
c001a902:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a908:	e8 a7 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a90d:	0f 20 d0             	mov    eax,cr2
c001a910:	5a                   	pop    edx
c001a911:	59                   	pop    ecx
c001a912:	50                   	push   eax
c001a913:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a918:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91e:	e8 b7 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a923:	5b                   	pop    ebx
c001a924:	58                   	pop    eax
c001a925:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a92a:	68 ad bc 02 c0       	push   0xc002bcad
c001a92f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a935:	e8 7a 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a93a:	0f 20 d8             	mov    eax,cr3
c001a93d:	5a                   	pop    edx
c001a93e:	59                   	pop    ecx
c001a93f:	50                   	push   eax
c001a940:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a945:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94b:	e8 8a 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a950:	5b                   	pop    ebx
c001a951:	58                   	pop    eax
c001a952:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a957:	68 c0 bc 02 c0       	push   0xc002bcc0
c001a95c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a962:	e8 4d 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a967:	0f 20 e0             	mov    eax,cr4
c001a96a:	5a                   	pop    edx
c001a96b:	59                   	pop    ecx
c001a96c:	50                   	push   eax
c001a96d:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a972:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a978:	e8 5d 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a97d:	5b                   	pop    ebx
c001a97e:	58                   	pop    eax
c001a97f:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a984:	68 ca bc 02 c0       	push   0xc002bcca
c001a989:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a98f:	e8 20 68 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a994:	5a                   	pop    edx
c001a995:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a99a:	59                   	pop    ecx
c001a99b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9a1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a9a4:	50                   	push   eax
c001a9a5:	e8 30 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a9aa:	5b                   	pop    ebx
c001a9ab:	58                   	pop    eax
c001a9ac:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a9b1:	68 e1 bc 02 c0       	push   0xc002bce1
c001a9b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9bc:	e8 f3 67 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a9c1:	5a                   	pop    edx
c001a9c2:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a9c7:	59                   	pop    ecx
c001a9c8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9ce:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9d1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9d4:	50                   	push   eax
c001a9d5:	e8 00 68 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001a9da:	5b                   	pop    ebx
c001a9db:	58                   	pop    eax
c001a9dc:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a9e1:	68 e1 bc 02 c0       	push   0xc002bce1
c001a9e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ec:	e8 c3 67 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001a9f1:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001a9f6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9f9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9ff:	8b 12                	mov    edx,DWORD PTR [edx]
c001aa01:	59                   	pop    ecx
c001aa02:	5b                   	pop    ebx
c001aa03:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001aa06:	50                   	push   eax
c001aa07:	e8 ce 67 ff ff       	call   c00111da <VgaText::putx(unsigned int)>
c001aa0c:	83 c4 10             	add    esp,0x10
c001aa0f:	b2 fe                	mov    dl,0xfe
c001aa11:	e4 60                	in     al,0x60
c001aa13:	3c 1c                	cmp    al,0x1c
c001aa15:	74 04                	je     c001aa1b <Krnl::panic(char const*)+0x334>
c001aa17:	3c 5a                	cmp    al,0x5a
c001aa19:	75 f6                	jne    c001aa11 <Krnl::panic(char const*)+0x32a>
c001aa1b:	e4 64                	in     al,0x64
c001aa1d:	a8 02                	test   al,0x2
c001aa1f:	75 fa                	jne    c001aa1b <Krnl::panic(char const*)+0x334>
c001aa21:	88 d0                	mov    al,dl
c001aa23:	e6 64                	out    0x64,al
c001aa25:	fa                   	cli    
c001aa26:	f4                   	hlt    
c001aa27:	eb e8                	jmp    c001aa11 <Krnl::panic(char const*)+0x32a>
c001aa29:	50                   	push   eax
c001aa2a:	50                   	push   eax
c001aa2b:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001aa30:	68 4c bd 02 c0       	push   0xc002bd4c
c001aa35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa3b:	e8 74 67 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001aa40:	58                   	pop    eax
c001aa41:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001aa46:	5a                   	pop    edx
c001aa47:	68 5b bc 02 c0       	push   0xc002bc5b
c001aa4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa52:	e8 5d 67 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001aa57:	59                   	pop    ecx
c001aa58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa5d:	5b                   	pop    ebx
c001aa5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa61:	83 c0 0c             	add    eax,0xc
c001aa64:	50                   	push   eax
c001aa65:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001aa6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa70:	e8 3f 67 ff ff       	call   c00111b4 <VgaText::puts(char const*)>
c001aa75:	83 c4 10             	add    esp,0x10
c001aa78:	e9 a3 fd ff ff       	jmp    c001a820 <Krnl::panic(char const*)+0x139>

c001aa7d <Net::switchEndian16(unsigned short)>:
c001aa7d:	83 ec 04             	sub    esp,0x4
c001aa80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa84:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa88:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa8c:	c1 f8 08             	sar    eax,0x8
c001aa8f:	89 c2                	mov    edx,eax
c001aa91:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa95:	c1 e0 08             	shl    eax,0x8
c001aa98:	09 d0                	or     eax,edx
c001aa9a:	83 c4 04             	add    esp,0x4
c001aa9d:	c3                   	ret    

c001aa9e <Net::switchEndian32(unsigned int)>:
c001aa9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa2:	c1 e8 18             	shr    eax,0x18
c001aaa5:	89 c2                	mov    edx,eax
c001aaa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaab:	c1 e0 08             	shl    eax,0x8
c001aaae:	25 00 00 ff 00       	and    eax,0xff0000
c001aab3:	09 c2                	or     edx,eax
c001aab5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab9:	c1 e8 08             	shr    eax,0x8
c001aabc:	25 00 ff 00 00       	and    eax,0xff00
c001aac1:	09 c2                	or     edx,eax
c001aac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac7:	c1 e0 18             	shl    eax,0x18
c001aaca:	09 d0                	or     eax,edx
c001aacc:	c3                   	ret    

c001aacd <Net::crc32Calc(unsigned char*, int)>:
c001aacd:	83 ec 10             	sub    esp,0x10
c001aad0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aad5:	75 07                	jne    c001aade <Net::crc32Calc(unsigned char*, int)+0x11>
c001aad7:	b8 00 00 00 00       	mov    eax,0x0
c001aadc:	eb 7c                	jmp    c001ab5a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aade:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aae3:	7f 07                	jg     c001aaec <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aae5:	b8 00 00 00 00       	mov    eax,0x0
c001aaea:	eb 6e                	jmp    c001ab5a <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aaec:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aaf4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aafc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab00:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ab04:	7d 4e                	jge    c001ab54 <Net::crc32Calc(unsigned char*, int)+0x87>
c001ab06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ab0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab0e:	01 d0                	add    eax,edx
c001ab10:	8a 00                	mov    al,BYTE PTR [eax]
c001ab12:	0f b6 c0             	movzx  eax,al
c001ab15:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ab19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab21:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ab26:	7f 26                	jg     c001ab4e <Net::crc32Calc(unsigned char*, int)+0x81>
c001ab28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab2c:	83 e0 01             	and    eax,0x1
c001ab2f:	74 0d                	je     c001ab3e <Net::crc32Calc(unsigned char*, int)+0x71>
c001ab31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab35:	d1 e8                	shr    eax,1
c001ab37:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ab3c:	eb 06                	jmp    c001ab44 <Net::crc32Calc(unsigned char*, int)+0x77>
c001ab3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab42:	d1 e8                	shr    eax,1
c001ab44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab4c:	eb d3                	jmp    c001ab21 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ab4e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ab52:	eb a8                	jmp    c001aafc <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ab54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab58:	f7 d0                	not    eax
c001ab5a:	83 c4 10             	add    esp,0x10
c001ab5d:	c3                   	ret    

c001ab5e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab5e:	83 ec 1c             	sub    esp,0x1c
c001ab61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab71:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab76:	7f 14                	jg     c001ab8c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab78:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab7c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab83:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab86:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab8a:	eb e5                	jmp    c001ab71 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab90:	8d 50 01             	lea    edx,[eax+0x1]
c001ab93:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab97:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab9a:	83 ec 04             	sub    esp,0x4
c001ab9d:	6a 06                	push   0x6
c001ab9f:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aba3:	50                   	push   eax
c001aba4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aba8:	e8 97 5b fe ff       	call   c0000744 <memcpy>
c001abad:	83 c4 10             	add    esp,0x10
c001abb0:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001abb5:	83 ec 04             	sub    esp,0x4
c001abb8:	6a 06                	push   0x6
c001abba:	8d 44 24 30          	lea    eax,[esp+0x30]
c001abbe:	50                   	push   eax
c001abbf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001abc3:	e8 7c 5b fe ff       	call   c0000744 <memcpy>
c001abc8:	83 c4 10             	add    esp,0x10
c001abcb:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001abd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abd4:	0f b7 c0             	movzx  eax,ax
c001abd7:	c1 f8 08             	sar    eax,0x8
c001abda:	89 c1                	mov    ecx,eax
c001abdc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abe0:	8d 50 01             	lea    edx,[eax+0x1]
c001abe3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abe7:	88 ca                	mov    dl,cl
c001abe9:	88 10                	mov    BYTE PTR [eax],dl
c001abeb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001abef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abf3:	8d 48 01             	lea    ecx,[eax+0x1]
c001abf6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001abfa:	88 10                	mov    BYTE PTR [eax],dl
c001abfc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ac00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac04:	83 ec 04             	sub    esp,0x4
c001ac07:	52                   	push   edx
c001ac08:	50                   	push   eax
c001ac09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ac0d:	e8 32 5b fe ff       	call   c0000744 <memcpy>
c001ac12:	83 c4 10             	add    esp,0x10
c001ac15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac19:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ac1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac21:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ac25:	83 ec 08             	sub    esp,0x8
c001ac28:	50                   	push   eax
c001ac29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ac2d:	e8 9b fe ff ff       	call   c001aacd <Net::crc32Calc(unsigned char*, int)>
c001ac32:	83 c4 10             	add    esp,0x10
c001ac35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac3d:	c1 e8 18             	shr    eax,0x18
c001ac40:	89 c1                	mov    ecx,eax
c001ac42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac46:	8d 50 01             	lea    edx,[eax+0x1]
c001ac49:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac4d:	88 ca                	mov    dl,cl
c001ac4f:	88 10                	mov    BYTE PTR [eax],dl
c001ac51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac55:	c1 e8 10             	shr    eax,0x10
c001ac58:	89 c1                	mov    ecx,eax
c001ac5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac5e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac61:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac65:	88 ca                	mov    dl,cl
c001ac67:	88 10                	mov    BYTE PTR [eax],dl
c001ac69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac6d:	c1 e8 08             	shr    eax,0x8
c001ac70:	89 c1                	mov    ecx,eax
c001ac72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac76:	8d 50 01             	lea    edx,[eax+0x1]
c001ac79:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac7d:	88 ca                	mov    dl,cl
c001ac7f:	88 10                	mov    BYTE PTR [eax],dl
c001ac81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac85:	8d 50 01             	lea    edx,[eax+0x1]
c001ac88:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac90:	88 10                	mov    BYTE PTR [eax],dl
c001ac92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac96:	83 c4 1c             	add    esp,0x1c
c001ac99:	c3                   	ret    

c001ac9a <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac9a:	83 ec 2c             	sub    esp,0x2c
c001ac9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aca5:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001acaa:	83 ec 04             	sub    esp,0x4
c001acad:	6a 06                	push   0x6
c001acaf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001acb7:	83 c0 0e             	add    eax,0xe
c001acba:	50                   	push   eax
c001acbb:	e8 84 5a fe ff       	call   c0000744 <memcpy>
c001acc0:	83 c4 10             	add    esp,0x10
c001acc3:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001acc8:	83 ec 04             	sub    esp,0x4
c001accb:	6a 06                	push   0x6
c001accd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acd1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001acd5:	83 c0 08             	add    eax,0x8
c001acd8:	50                   	push   eax
c001acd9:	e8 66 5a fe ff       	call   c0000744 <memcpy>
c001acde:	83 c4 10             	add    esp,0x10
c001ace1:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ace6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acea:	8d 50 01             	lea    edx,[eax+0x1]
c001aced:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acf1:	8a 00                	mov    al,BYTE PTR [eax]
c001acf3:	0f b6 c0             	movzx  eax,al
c001acf6:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001acfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acff:	8d 50 01             	lea    edx,[eax+0x1]
c001ad02:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad06:	8a 00                	mov    al,BYTE PTR [eax]
c001ad08:	0f b6 c0             	movzx  eax,al
c001ad0b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ad10:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ad15:	c1 e0 08             	shl    eax,0x8
c001ad18:	89 c2                	mov    edx,eax
c001ad1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad1e:	09 d0                	or     eax,edx
c001ad20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ad24:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ad28:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ad2d:	75 3a                	jne    c001ad69 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad33:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ad36:	66 3d dc 05          	cmp    ax,0x5dc
c001ad3a:	77 10                	ja     c001ad4c <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ad3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ad43:	0f b7 c0             	movzx  eax,ax
c001ad46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ad4a:	eb 1d                	jmp    c001ad69 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad4c:	83 ec 0c             	sub    esp,0xc
c001ad4f:	68 24 be 02 c0       	push   0xc002be24
c001ad54:	e8 dd 82 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001ad59:	83 c4 10             	add    esp,0x10
c001ad5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad60:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ad64:	e9 c0 00 00 00       	jmp    c001ae29 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ad69:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad71:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad73:	83 ec 04             	sub    esp,0x4
c001ad76:	52                   	push   edx
c001ad77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad7b:	50                   	push   eax
c001ad7c:	e8 c3 59 fe ff       	call   c0000744 <memcpy>
c001ad81:	83 c4 10             	add    esp,0x10
c001ad84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad88:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad90:	8d 50 01             	lea    edx,[eax+0x1]
c001ad93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad97:	8a 00                	mov    al,BYTE PTR [eax]
c001ad99:	0f b6 c0             	movzx  eax,al
c001ad9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ada0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ada4:	8d 50 01             	lea    edx,[eax+0x1]
c001ada7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001adab:	8a 00                	mov    al,BYTE PTR [eax]
c001adad:	0f b6 c0             	movzx  eax,al
c001adb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001adb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adb8:	8d 50 01             	lea    edx,[eax+0x1]
c001adbb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001adbf:	8a 00                	mov    al,BYTE PTR [eax]
c001adc1:	0f b6 c0             	movzx  eax,al
c001adc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adcc:	8d 50 01             	lea    edx,[eax+0x1]
c001adcf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001add3:	8a 00                	mov    al,BYTE PTR [eax]
c001add5:	0f b6 c0             	movzx  eax,al
c001add8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001addc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ade0:	c1 e0 18             	shl    eax,0x18
c001ade3:	89 c2                	mov    edx,eax
c001ade5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade9:	c1 e0 10             	shl    eax,0x10
c001adec:	09 c2                	or     edx,eax
c001adee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adf2:	c1 e0 08             	shl    eax,0x8
c001adf5:	09 d0                	or     eax,edx
c001adf7:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001adfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001adff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae03:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ae07:	83 e8 04             	sub    eax,0x4
c001ae0a:	83 ec 08             	sub    esp,0x8
c001ae0d:	50                   	push   eax
c001ae0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ae12:	e8 b6 fc ff ff       	call   c001aacd <Net::crc32Calc(unsigned char*, int)>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ae1e:	0f 94 c2             	sete   dl
c001ae21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae25:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ae28:	90                   	nop
c001ae29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae2d:	83 c4 2c             	add    esp,0x2c
c001ae30:	c2 04 00             	ret    0x4

c001ae33 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ae33:	55                   	push   ebp
c001ae34:	57                   	push   edi
c001ae35:	56                   	push   esi
c001ae36:	53                   	push   ebx
c001ae37:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae3d:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ae44:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ae46:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ae49:	80 fb 40             	cmp    bl,0x40
c001ae4c:	75 1b                	jne    c001ae69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ae4e:	8a 16                	mov    dl,BYTE PTR [esi]
c001ae50:	84 d2                	test   dl,dl
c001ae52:	0f 84 f1 00 00 00    	je     c001af49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae58:	8d 46 01             	lea    eax,[esi+0x1]
c001ae5b:	80 fa 3a             	cmp    dl,0x3a
c001ae5e:	74 04                	je     c001ae64 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ae60:	89 c6                	mov    esi,eax
c001ae62:	eb ea                	jmp    c001ae4e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ae64:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae67:	89 c6                	mov    esi,eax
c001ae69:	50                   	push   eax
c001ae6a:	6a 40                	push   0x40
c001ae6c:	6a 00                	push   0x0
c001ae6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae72:	50                   	push   eax
c001ae73:	e8 00 59 fe ff       	call   c0000778 <memset>
c001ae78:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae7f:	31 c0                	xor    eax,eax
c001ae81:	83 c4 10             	add    esp,0x10
c001ae84:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae86:	84 c9                	test   cl,cl
c001ae88:	0f 84 bb 00 00 00    	je     c001af49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae8e:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae93:	0f 8f b0 00 00 00    	jg     c001af49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae99:	80 f9 0a             	cmp    cl,0xa
c001ae9c:	0f 85 98 00 00 00    	jne    c001af3a <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001aea2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001aea7:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001aeab:	a8 df                	test   al,0xdf
c001aead:	0f 94 c1             	sete   cl
c001aeb0:	3c 23                	cmp    al,0x23
c001aeb2:	0f 94 c2             	sete   dl
c001aeb5:	08 d1                	or     cl,dl
c001aeb7:	75 4a                	jne    c001af03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeb9:	8d 50 f7             	lea    edx,[eax-0x9]
c001aebc:	80 fa 01             	cmp    dl,0x1
c001aebf:	76 42                	jbe    c001af03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aec1:	3c 5b                	cmp    al,0x5b
c001aec3:	75 42                	jne    c001af07 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001aec5:	80 fb 40             	cmp    bl,0x40
c001aec8:	75 39                	jne    c001af03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeca:	83 ec 0c             	sub    esp,0xc
c001aecd:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aed1:	52                   	push   edx
c001aed2:	e8 bd 58 fe ff       	call   c0000794 <strlen>
c001aed7:	83 c4 10             	add    esp,0x10
c001aeda:	83 f8 3f             	cmp    eax,0x3f
c001aedd:	77 6a                	ja     c001af49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aedf:	50                   	push   eax
c001aee0:	50                   	push   eax
c001aee1:	8d 54 24 61          	lea    edx,[esp+0x61]
c001aee5:	52                   	push   edx
c001aee6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aeea:	52                   	push   edx
c001aeeb:	e8 44 59 fe ff       	call   c0000834 <strcpy>
c001aef0:	58                   	pop    eax
c001aef1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aef5:	52                   	push   edx
c001aef6:	e8 99 58 fe ff       	call   c0000794 <strlen>
c001aefb:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001af00:	83 c4 10             	add    esp,0x10
c001af03:	31 d2                	xor    edx,edx
c001af05:	eb 3a                	jmp    c001af41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001af07:	80 fb 40             	cmp    bl,0x40
c001af0a:	74 06                	je     c001af12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001af0c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001af10:	eb 20                	jmp    c001af32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001af12:	50                   	push   eax
c001af13:	50                   	push   eax
c001af14:	55                   	push   ebp
c001af15:	8d 44 24 24          	lea    eax,[esp+0x24]
c001af19:	50                   	push   eax
c001af1a:	e8 a1 59 fe ff       	call   c00008c0 <strcmp>
c001af1f:	83 c4 10             	add    esp,0x10
c001af22:	85 c0                	test   eax,eax
c001af24:	75 dd                	jne    c001af03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af26:	eb e4                	jmp    c001af0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001af28:	8d 50 01             	lea    edx,[eax+0x1]
c001af2b:	80 f9 3d             	cmp    cl,0x3d
c001af2e:	74 1d                	je     c001af4d <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001af30:	89 d0                	mov    eax,edx
c001af32:	8a 08                	mov    cl,BYTE PTR [eax]
c001af34:	84 c9                	test   cl,cl
c001af36:	75 f0                	jne    c001af28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001af38:	eb 0f                	jmp    c001af49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001af3a:	8d 50 01             	lea    edx,[eax+0x1]
c001af3d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001af41:	47                   	inc    edi
c001af42:	89 d0                	mov    eax,edx
c001af44:	e9 3b ff ff ff       	jmp    c001ae84 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001af49:	31 c0                	xor    eax,eax
c001af4b:	eb 33                	jmp    c001af80 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001af4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001af51:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001af54:	50                   	push   eax
c001af55:	50                   	push   eax
c001af56:	8d 44 24 60          	lea    eax,[esp+0x60]
c001af5a:	50                   	push   eax
c001af5b:	56                   	push   esi
c001af5c:	e8 5f 59 fe ff       	call   c00008c0 <strcmp>
c001af61:	83 c4 10             	add    esp,0x10
c001af64:	85 c0                	test   eax,eax
c001af66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af6a:	75 97                	jne    c001af03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af6c:	51                   	push   ecx
c001af6d:	51                   	push   ecx
c001af6e:	52                   	push   edx
c001af6f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af76:	e8 b9 58 fe ff       	call   c0000834 <strcpy>
c001af7b:	83 c4 10             	add    esp,0x10
c001af7e:	b0 01                	mov    al,0x1
c001af80:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af86:	5b                   	pop    ebx
c001af87:	5e                   	pop    esi
c001af88:	5f                   	pop    edi
c001af89:	5d                   	pop    ebp
c001af8a:	c3                   	ret    

c001af8b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af8b:	57                   	push   edi
c001af8c:	56                   	push   esi
c001af8d:	53                   	push   ebx
c001af8e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af94:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af9b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001afa2:	53                   	push   ebx
c001afa3:	e8 ec 57 fe ff       	call   c0000794 <strlen>
c001afa8:	89 34 24             	mov    DWORD PTR [esp],esi
c001afab:	89 c7                	mov    edi,eax
c001afad:	e8 e2 57 fe ff       	call   c0000794 <strlen>
c001afb2:	83 c4 10             	add    esp,0x10
c001afb5:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001afb9:	3d ff 00 00 00       	cmp    eax,0xff
c001afbe:	0f 87 d3 00 00 00    	ja     c001b097 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afc4:	57                   	push   edi
c001afc5:	57                   	push   edi
c001afc6:	56                   	push   esi
c001afc7:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001afcb:	56                   	push   esi
c001afcc:	e8 63 58 fe ff       	call   c0000834 <strcpy>
c001afd1:	58                   	pop    eax
c001afd2:	5a                   	pop    edx
c001afd3:	68 6d c3 02 c0       	push   0xc002c36d
c001afd8:	56                   	push   esi
c001afd9:	e8 96 59 fe ff       	call   c0000974 <strcat>
c001afde:	59                   	pop    ecx
c001afdf:	5f                   	pop    edi
c001afe0:	53                   	push   ebx
c001afe1:	56                   	push   esi
c001afe2:	e8 8d 59 fe ff       	call   c0000974 <strcat>
c001afe7:	58                   	pop    eax
c001afe8:	5a                   	pop    edx
c001afe9:	68 70 be 02 c0       	push   0xc002be70
c001afee:	56                   	push   esi
c001afef:	e8 80 59 fe ff       	call   c0000974 <strcat>
c001aff4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001affb:	e8 40 48 ff ff       	call   c000f840 <malloc>
c001b000:	83 c4 0c             	add    esp,0xc
c001b003:	89 c3                	mov    ebx,eax
c001b005:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001b00b:	56                   	push   esi
c001b00c:	50                   	push   eax
c001b00d:	e8 7c 85 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001b012:	83 c4 10             	add    esp,0x10
c001b015:	85 db                	test   ebx,ebx
c001b017:	74 7e                	je     c001b097 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b019:	51                   	push   ecx
c001b01a:	51                   	push   ecx
c001b01b:	6a 01                	push   0x1
c001b01d:	53                   	push   ebx
c001b01e:	e8 cf 85 ff ff       	call   c00135f2 <File::open(FileOpenMode)>
c001b023:	83 c4 10             	add    esp,0x10
c001b026:	85 c0                	test   eax,eax
c001b028:	74 08                	je     c001b032 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b02a:	83 ec 0c             	sub    esp,0xc
c001b02d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b02f:	53                   	push   ebx
c001b030:	eb 5f                	jmp    c001b091 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b032:	52                   	push   edx
c001b033:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b037:	50                   	push   eax
c001b038:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b03c:	50                   	push   eax
c001b03d:	53                   	push   ebx
c001b03e:	e8 5b 88 ff ff       	call   c001389e <File::stat(unsigned long long*, bool*)>
c001b043:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b047:	83 c4 10             	add    esp,0x10
c001b04a:	89 c1                	mov    ecx,eax
c001b04c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b050:	74 31                	je     c001b083 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b052:	83 ec 0c             	sub    esp,0xc
c001b055:	50                   	push   eax
c001b056:	e8 e5 47 ff ff       	call   c000f840 <malloc>
c001b05b:	89 c6                	mov    esi,eax
c001b05d:	58                   	pop    eax
c001b05e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b060:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b064:	52                   	push   edx
c001b065:	56                   	push   esi
c001b066:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b06a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b06e:	53                   	push   ebx
c001b06f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b072:	83 c4 20             	add    esp,0x20
c001b075:	85 c0                	test   eax,eax
c001b077:	75 0a                	jne    c001b083 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b079:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b07d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b081:	74 18                	je     c001b09b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b083:	83 ec 0c             	sub    esp,0xc
c001b086:	53                   	push   ebx
c001b087:	e8 c4 85 ff ff       	call   c0013650 <File::close()>
c001b08c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b08e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b091:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b094:	83 c4 10             	add    esp,0x10
c001b097:	31 c0                	xor    eax,eax
c001b099:	eb 3b                	jmp    c001b0d6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b09b:	83 ec 0c             	sub    esp,0xc
c001b09e:	53                   	push   ebx
c001b09f:	e8 ac 85 ff ff       	call   c0013650 <File::close()>
c001b0a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b0a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b0ac:	83 c4 0c             	add    esp,0xc
c001b0af:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b0b6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b0bd:	56                   	push   esi
c001b0be:	e8 70 fd ff ff       	call   c001ae33 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b0c3:	89 34 24             	mov    DWORD PTR [esp],esi
c001b0c6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b0ca:	e8 81 47 ff ff       	call   c000f850 <free>
c001b0cf:	83 c4 10             	add    esp,0x10
c001b0d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b0d6:	81 c4 20 01 00 00    	add    esp,0x120
c001b0dc:	5b                   	pop    ebx
c001b0dd:	5e                   	pop    esi
c001b0de:	5f                   	pop    edi
c001b0df:	c3                   	ret    

c001b0e0 <Reg::getLine(char*, char*, char*)>:
c001b0e0:	57                   	push   edi
c001b0e1:	56                   	push   esi
c001b0e2:	53                   	push   ebx
c001b0e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0ef:	57                   	push   edi
c001b0f0:	56                   	push   esi
c001b0f1:	53                   	push   ebx
c001b0f2:	68 75 be 02 c0       	push   0xc002be75
c001b0f7:	e8 8f fe ff ff       	call   c001af8b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0fc:	83 c4 10             	add    esp,0x10
c001b0ff:	84 c0                	test   al,al
c001b101:	75 10                	jne    c001b113 <Reg::getLine(char*, char*, char*)+0x33>
c001b103:	57                   	push   edi
c001b104:	56                   	push   esi
c001b105:	53                   	push   ebx
c001b106:	68 9a be 02 c0       	push   0xc002be9a
c001b10b:	e8 7b fe ff ff       	call   c001af8b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b110:	83 c4 10             	add    esp,0x10
c001b113:	5b                   	pop    ebx
c001b114:	5e                   	pop    esi
c001b115:	5f                   	pop    edi
c001b116:	c3                   	ret    

c001b117 <Reg::readInt(char*, char*, int*)>:
c001b117:	55                   	push   ebp
c001b118:	57                   	push   edi
c001b119:	56                   	push   esi
c001b11a:	53                   	push   ebx
c001b11b:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b121:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b125:	57                   	push   edi
c001b126:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b12d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b134:	e8 a7 ff ff ff       	call   c001b0e0 <Reg::getLine(char*, char*, char*)>
c001b139:	83 c4 10             	add    esp,0x10
c001b13c:	84 c0                	test   al,al
c001b13e:	0f 84 b3 00 00 00    	je     c001b1f7 <Reg::readInt(char*, char*, int*)+0xe0>
c001b144:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b148:	80 fa 2b             	cmp    dl,0x2b
c001b14b:	74 0c                	je     c001b159 <Reg::readInt(char*, char*, int*)+0x42>
c001b14d:	80 fa 2d             	cmp    dl,0x2d
c001b150:	75 0e                	jne    c001b160 <Reg::readInt(char*, char*, int*)+0x49>
c001b152:	ba 01 00 00 00       	mov    edx,0x1
c001b157:	eb 0b                	jmp    c001b164 <Reg::readInt(char*, char*, int*)+0x4d>
c001b159:	ba 01 00 00 00       	mov    edx,0x1
c001b15e:	eb 02                	jmp    c001b162 <Reg::readInt(char*, char*, int*)+0x4b>
c001b160:	31 d2                	xor    edx,edx
c001b162:	31 c0                	xor    eax,eax
c001b164:	be 0a 00 00 00       	mov    esi,0xa
c001b169:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b16e:	75 20                	jne    c001b190 <Reg::readInt(char*, char*, int*)+0x79>
c001b170:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b174:	80 f9 78             	cmp    cl,0x78
c001b177:	75 0a                	jne    c001b183 <Reg::readInt(char*, char*, int*)+0x6c>
c001b179:	83 c2 02             	add    edx,0x2
c001b17c:	be 10 00 00 00       	mov    esi,0x10
c001b181:	eb 0d                	jmp    c001b190 <Reg::readInt(char*, char*, int*)+0x79>
c001b183:	80 f9 62             	cmp    cl,0x62
c001b186:	75 08                	jne    c001b190 <Reg::readInt(char*, char*, int*)+0x79>
c001b188:	83 c2 02             	add    edx,0x2
c001b18b:	be 02 00 00 00       	mov    esi,0x2
c001b190:	01 d7                	add    edi,edx
c001b192:	31 d2                	xor    edx,edx
c001b194:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b196:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b19a:	80 fb 0d             	cmp    bl,0xd
c001b19d:	0f 94 c3             	sete   bl
c001b1a0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b1a5:	0f 94 c1             	sete   cl
c001b1a8:	08 cb                	or     bl,cl
c001b1aa:	75 3a                	jne    c001b1e6 <Reg::readInt(char*, char*, int*)+0xcf>
c001b1ac:	0f af d6             	imul   edx,esi
c001b1af:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b1b4:	83 fe 10             	cmp    esi,0x10
c001b1b7:	75 26                	jne    c001b1df <Reg::readInt(char*, char*, int*)+0xc8>
c001b1b9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b1bd:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b1c0:	89 e9                	mov    ecx,ebp
c001b1c2:	80 f9 05             	cmp    cl,0x5
c001b1c5:	77 06                	ja     c001b1cd <Reg::readInt(char*, char*, int*)+0xb6>
c001b1c7:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b1cb:	eb 16                	jmp    c001b1e3 <Reg::readInt(char*, char*, int*)+0xcc>
c001b1cd:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b1d1:	83 e9 61             	sub    ecx,0x61
c001b1d4:	80 f9 05             	cmp    cl,0x5
c001b1d7:	77 06                	ja     c001b1df <Reg::readInt(char*, char*, int*)+0xc8>
c001b1d9:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b1dd:	eb 04                	jmp    c001b1e3 <Reg::readInt(char*, char*, int*)+0xcc>
c001b1df:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b1e3:	47                   	inc    edi
c001b1e4:	eb ae                	jmp    c001b194 <Reg::readInt(char*, char*, int*)+0x7d>
c001b1e6:	84 c0                	test   al,al
c001b1e8:	74 02                	je     c001b1ec <Reg::readInt(char*, char*, int*)+0xd5>
c001b1ea:	f7 da                	neg    edx
c001b1ec:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b1f3:	89 10                	mov    DWORD PTR [eax],edx
c001b1f5:	88 d8                	mov    al,bl
c001b1f7:	81 c4 ec 00 00 00    	add    esp,0xec
c001b1fd:	5b                   	pop    ebx
c001b1fe:	5e                   	pop    esi
c001b1ff:	5f                   	pop    edi
c001b200:	5d                   	pop    ebp
c001b201:	c3                   	ret    

c001b202 <Reg::readString(char*, char*, char*, int)>:
c001b202:	57                   	push   edi
c001b203:	56                   	push   esi
c001b204:	53                   	push   ebx
c001b205:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b20b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b212:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b216:	57                   	push   edi
c001b217:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b21e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b225:	e8 b6 fe ff ff       	call   c001b0e0 <Reg::getLine(char*, char*, char*)>
c001b22a:	83 c4 10             	add    esp,0x10
c001b22d:	89 c6                	mov    esi,eax
c001b22f:	84 c0                	test   al,al
c001b231:	74 44                	je     c001b277 <Reg::readString(char*, char*, char*, int)+0x75>
c001b233:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b23a:	31 c0                	xor    eax,eax
c001b23c:	4a                   	dec    edx
c001b23d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b240:	84 c9                	test   cl,cl
c001b242:	74 0f                	je     c001b253 <Reg::readString(char*, char*, char*, int)+0x51>
c001b244:	39 c2                	cmp    edx,eax
c001b246:	7e 0b                	jle    c001b253 <Reg::readString(char*, char*, char*, int)+0x51>
c001b248:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b24b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b250:	40                   	inc    eax
c001b251:	eb ea                	jmp    c001b23d <Reg::readString(char*, char*, char*, int)+0x3b>
c001b253:	83 ec 0c             	sub    esp,0xc
c001b256:	53                   	push   ebx
c001b257:	e8 38 55 fe ff       	call   c0000794 <strlen>
c001b25c:	83 c4 10             	add    esp,0x10
c001b25f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b264:	75 11                	jne    c001b277 <Reg::readString(char*, char*, char*, int)+0x75>
c001b266:	83 ec 0c             	sub    esp,0xc
c001b269:	53                   	push   ebx
c001b26a:	e8 25 55 fe ff       	call   c0000794 <strlen>
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b277:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b27d:	89 f0                	mov    eax,esi
c001b27f:	5b                   	pop    ebx
c001b280:	5e                   	pop    esi
c001b281:	5f                   	pop    edi
c001b282:	c3                   	ret    

c001b283 <Reg::readBool(char*, char*, bool*)>:
c001b283:	83 ec 20             	sub    esp,0x20
c001b286:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b28a:	50                   	push   eax
c001b28b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b28f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b293:	e8 7f fe ff ff       	call   c001b117 <Reg::readInt(char*, char*, int*)>
c001b298:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b29d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b2a1:	0f 95 02             	setne  BYTE PTR [edx]
c001b2a4:	83 c4 2c             	add    esp,0x2c
c001b2a7:	c3                   	ret    

c001b2a8 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b2a8:	53                   	push   ebx
c001b2a9:	83 ec 1c             	sub    esp,0x1c
c001b2ac:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b2b0:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b2b4:	50                   	push   eax
c001b2b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2bd:	e8 c1 ff ff ff       	call   c001b283 <Reg::readBool(char*, char*, bool*)>
c001b2c2:	83 c4 10             	add    esp,0x10
c001b2c5:	84 c0                	test   al,al
c001b2c7:	74 04                	je     c001b2cd <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b2c9:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b2cd:	88 d8                	mov    al,bl
c001b2cf:	83 c4 18             	add    esp,0x18
c001b2d2:	5b                   	pop    ebx
c001b2d3:	c3                   	ret    

c001b2d4 <Reg::readIntWithDefault(char*, char*, int)>:
c001b2d4:	53                   	push   ebx
c001b2d5:	83 ec 1c             	sub    esp,0x1c
c001b2d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b2dc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b2e0:	50                   	push   eax
c001b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2e9:	e8 29 fe ff ff       	call   c001b117 <Reg::readInt(char*, char*, int*)>
c001b2ee:	83 c4 10             	add    esp,0x10
c001b2f1:	84 c0                	test   al,al
c001b2f3:	74 04                	je     c001b2f9 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b2f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2f9:	89 d8                	mov    eax,ebx
c001b2fb:	83 c4 18             	add    esp,0x18
c001b2fe:	5b                   	pop    ebx
c001b2ff:	c3                   	ret    

c001b300 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b300:	57                   	push   edi
c001b301:	56                   	push   esi
c001b302:	53                   	push   ebx
c001b303:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b307:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b30b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b30f:	56                   	push   esi
c001b310:	53                   	push   ebx
c001b311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b319:	e8 e4 fe ff ff       	call   c001b202 <Reg::readString(char*, char*, char*, int)>
c001b31e:	83 c4 10             	add    esp,0x10
c001b321:	84 c0                	test   al,al
c001b323:	75 1b                	jne    c001b340 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b325:	50                   	push   eax
c001b326:	56                   	push   esi
c001b327:	4e                   	dec    esi
c001b328:	6a 00                	push   0x0
c001b32a:	53                   	push   ebx
c001b32b:	e8 48 54 fe ff       	call   c0000778 <memset>
c001b330:	83 c4 0c             	add    esp,0xc
c001b333:	56                   	push   esi
c001b334:	57                   	push   edi
c001b335:	53                   	push   ebx
c001b336:	89 fb                	mov    ebx,edi
c001b338:	e8 07 54 fe ff       	call   c0000744 <memcpy>
c001b33d:	83 c4 10             	add    esp,0x10
c001b340:	89 d8                	mov    eax,ebx
c001b342:	5b                   	pop    ebx
c001b343:	5e                   	pop    esi
c001b344:	5f                   	pop    edi
c001b345:	c3                   	ret    

c001b346 <Sys::eject(regs*)>:
c001b346:	83 ec 0c             	sub    esp,0xc
c001b349:	83 ca ff             	or     edx,0xffffffff
c001b34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b350:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b353:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b358:	83 e9 41             	sub    ecx,0x41
c001b35b:	83 f9 19             	cmp    ecx,0x19
c001b35e:	77 18                	ja     c001b378 <Sys::eject(regs*)+0x32>
c001b360:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c001b367:	85 c9                	test   ecx,ecx
c001b369:	74 0d                	je     c001b378 <Sys::eject(regs*)+0x32>
c001b36b:	83 ec 0c             	sub    esp,0xc
c001b36e:	51                   	push   ecx
c001b36f:	e8 78 b4 ff ff       	call   c00167ec <LogicalDisk::eject()>
c001b374:	83 c4 10             	add    esp,0x10
c001b377:	99                   	cdq    
c001b378:	83 c4 0c             	add    esp,0xc
c001b37b:	c3                   	ret    

c001b37c <Sys::exit(regs*)>:
c001b37c:	83 ec 18             	sub    esp,0x18
c001b37f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b383:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b386:	e8 7a 35 00 00       	call   c001e905 <terminateTask(int)>
c001b38b:	83 c8 ff             	or     eax,0xffffffff
c001b38e:	83 c4 1c             	add    esp,0x1c
c001b391:	89 c2                	mov    edx,eax
c001b393:	c3                   	ret    

c001b394 <Sys::getCwd(regs*)>:
c001b394:	83 ec 10             	sub    esp,0x10
c001b397:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b39b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b39e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3a6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3a9:	e8 e2 7f ff ff       	call   c0013390 <Fs::getcwd(Process*, char*, int)>
c001b3ae:	83 c4 1c             	add    esp,0x1c
c001b3b1:	99                   	cdq    
c001b3b2:	c3                   	ret    

c001b3b3 <Sys::getPID(regs*)>:
c001b3b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3bd:	99                   	cdq    
c001b3be:	c3                   	ret    

c001b3bf <Sys::getRAMData(regs*)>:
c001b3bf:	8b 0d d4 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5d4
c001b3c5:	6b 05 d0 e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e5d0,0x64
c001b3cc:	99                   	cdq    
c001b3cd:	f7 f9                	idiv   ecx
c001b3cf:	c1 e0 18             	shl    eax,0x18
c001b3d2:	09 c8                	or     eax,ecx
c001b3d4:	99                   	cdq    
c001b3d5:	c3                   	ret    

c001b3d6 <Sys::loadDLL(regs*)>:
c001b3d6:	56                   	push   esi
c001b3d7:	53                   	push   ebx
c001b3d8:	31 d2                	xor    edx,edx
c001b3da:	51                   	push   ecx
c001b3db:	b8 01 00 00 00       	mov    eax,0x1
c001b3e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3e4:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b3e8:	0f 84 8c 00 00 00    	je     c001b47a <Sys::loadDLL(regs*)+0xa4>
c001b3ee:	83 ec 0c             	sub    esp,0xc
c001b3f1:	68 14 01 00 00       	push   0x114
c001b3f6:	e8 45 44 ff ff       	call   c000f840 <malloc>
c001b3fb:	83 c4 0c             	add    esp,0xc
c001b3fe:	89 c3                	mov    ebx,eax
c001b400:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b405:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b408:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b40b:	53                   	push   ebx
c001b40c:	e8 7d 81 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001b411:	83 c4 10             	add    esp,0x10
c001b414:	31 d2                	xor    edx,edx
c001b416:	b8 02 00 00 00       	mov    eax,0x2
c001b41b:	85 db                	test   ebx,ebx
c001b41d:	74 5b                	je     c001b47a <Sys::loadDLL(regs*)+0xa4>
c001b41f:	83 ec 0c             	sub    esp,0xc
c001b422:	53                   	push   ebx
c001b423:	e8 38 84 ff ff       	call   c0013860 <File::exists()>
c001b428:	83 c4 10             	add    esp,0x10
c001b42b:	84 c0                	test   al,al
c001b42d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b42f:	75 11                	jne    c001b442 <Sys::loadDLL(regs*)+0x6c>
c001b431:	83 ec 0c             	sub    esp,0xc
c001b434:	53                   	push   ebx
c001b435:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b438:	83 c4 10             	add    esp,0x10
c001b43b:	b8 03 00 00 00       	mov    eax,0x3
c001b440:	eb 36                	jmp    c001b478 <Sys::loadDLL(regs*)+0xa2>
c001b442:	83 ec 0c             	sub    esp,0xc
c001b445:	53                   	push   ebx
c001b446:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b449:	58                   	pop    eax
c001b44a:	5a                   	pop    edx
c001b44b:	6a 00                	push   0x0
c001b44d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b450:	e8 c5 23 00 00       	call   c001d81a <Thr::loadDLL(char const*, bool)>
c001b455:	83 c4 10             	add    esp,0x10
c001b458:	89 c1                	mov    ecx,eax
c001b45a:	31 d2                	xor    edx,edx
c001b45c:	b8 04 00 00 00       	mov    eax,0x4
c001b461:	85 c9                	test   ecx,ecx
c001b463:	74 15                	je     c001b47a <Sys::loadDLL(regs*)+0xa4>
c001b465:	53                   	push   ebx
c001b466:	53                   	push   ebx
c001b467:	ff 35 88 e5 02 c0    	push   DWORD PTR ds:0xc002e588
c001b46d:	51                   	push   ecx
c001b46e:	e8 db 25 00 00       	call   c001da4e <Thr::executeDLL(unsigned long, void*)>
c001b473:	83 c4 10             	add    esp,0x10
c001b476:	31 c0                	xor    eax,eax
c001b478:	31 d2                	xor    edx,edx
c001b47a:	59                   	pop    ecx
c001b47b:	5b                   	pop    ebx
c001b47c:	5e                   	pop    esi
c001b47d:	c3                   	ret    

c001b47e <Sys::read(regs*)>:
c001b47e:	57                   	push   edi
c001b47f:	56                   	push   esi
c001b480:	53                   	push   ebx
c001b481:	83 ec 10             	sub    esp,0x10
c001b484:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b488:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b48b:	83 f8 02             	cmp    eax,0x2
c001b48e:	77 10                	ja     c001b4a0 <Sys::read(regs*)+0x22>
c001b490:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b495:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b498:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b49e:	eb 0e                	jmp    c001b4ae <Sys::read(regs*)+0x30>
c001b4a0:	83 ec 0c             	sub    esp,0xc
c001b4a3:	50                   	push   eax
c001b4a4:	e8 e4 65 ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001b4a9:	83 c4 10             	add    esp,0x10
c001b4ac:	89 c1                	mov    ecx,eax
c001b4ae:	83 c8 ff             	or     eax,0xffffffff
c001b4b1:	85 c9                	test   ecx,ecx
c001b4b3:	89 c2                	mov    edx,eax
c001b4b5:	74 28                	je     c001b4df <Sys::read(regs*)+0x61>
c001b4b7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b4bf:	31 ff                	xor    edi,edi
c001b4c1:	83 ec 0c             	sub    esp,0xc
c001b4c4:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b4c6:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4ca:	52                   	push   edx
c001b4cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4ce:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b4d1:	57                   	push   edi
c001b4d2:	56                   	push   esi
c001b4d3:	51                   	push   ecx
c001b4d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b4d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4db:	83 c4 20             	add    esp,0x20
c001b4de:	99                   	cdq    
c001b4df:	83 c4 10             	add    esp,0x10
c001b4e2:	5b                   	pop    ebx
c001b4e3:	5e                   	pop    esi
c001b4e4:	5f                   	pop    edi
c001b4e5:	c3                   	ret    

c001b4e6 <Sys::sbrk(regs*)>:
c001b4e6:	56                   	push   esi
c001b4e7:	53                   	push   ebx
c001b4e8:	50                   	push   eax
c001b4e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4f5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b4f8:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b4fe:	85 db                	test   ebx,ebx
c001b500:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b503:	74 02                	je     c001b507 <Sys::sbrk(regs*)+0x21>
c001b505:	79 06                	jns    c001b50d <Sys::sbrk(regs*)+0x27>
c001b507:	89 f0                	mov    eax,esi
c001b509:	31 d2                	xor    edx,edx
c001b50b:	eb 2a                	jmp    c001b537 <Sys::sbrk(regs*)+0x51>
c001b50d:	83 c8 ff             	or     eax,0xffffffff
c001b510:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b516:	89 c2                	mov    edx,eax
c001b518:	77 1d                	ja     c001b537 <Sys::sbrk(regs*)+0x51>
c001b51a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b520:	50                   	push   eax
c001b521:	c1 ea 0c             	shr    edx,0xc
c001b524:	68 07 04 00 00       	push   0x407
c001b529:	52                   	push   edx
c001b52a:	51                   	push   ecx
c001b52b:	e8 8a 6f ff ff       	call   c00124ba <VAS::allocatePages(int, int)>
c001b530:	89 f0                	mov    eax,esi
c001b532:	31 d2                	xor    edx,edx
c001b534:	83 c4 10             	add    esp,0x10
c001b537:	59                   	pop    ecx
c001b538:	5b                   	pop    ebx
c001b539:	5e                   	pop    esi
c001b53a:	c3                   	ret    

c001b53b <Sys::setCwd(regs*)>:
c001b53b:	83 ec 14             	sub    esp,0x14
c001b53e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b542:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b54a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b54d:	e8 ad 83 ff ff       	call   c00138ff <Fs::setcwd(Process*, char*)>
c001b552:	83 c4 1c             	add    esp,0x1c
c001b555:	99                   	cdq    
c001b556:	c3                   	ret    

c001b557 <Sys::setTime(regs*)>:
c001b557:	55                   	push   ebp
c001b558:	31 d2                	xor    edx,edx
c001b55a:	57                   	push   edi
c001b55b:	bf 18 00 00 00       	mov    edi,0x18
c001b560:	56                   	push   esi
c001b561:	53                   	push   ebx
c001b562:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b567:	83 ec 30             	sub    esp,0x30
c001b56a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b56e:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b571:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b574:	f7 f3                	div    ebx
c001b576:	89 d6                	mov    esi,edx
c001b578:	31 d2                	xor    edx,edx
c001b57a:	f7 f3                	div    ebx
c001b57c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b57f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b583:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b588:	31 d2                	xor    edx,edx
c001b58a:	f7 f3                	div    ebx
c001b58c:	31 d2                	xor    edx,edx
c001b58e:	bb 0c 00 00 00       	mov    ebx,0xc
c001b593:	f7 f7                	div    edi
c001b595:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b598:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b59c:	0f b7 cd             	movzx  ecx,bp
c001b59f:	56                   	push   esi
c001b5a0:	89 c7                	mov    edi,eax
c001b5a2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b5a6:	c1 e6 10             	shl    esi,0x10
c001b5a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b5ad:	83 e7 1f             	and    edi,0x1f
c001b5b0:	51                   	push   ecx
c001b5b1:	47                   	inc    edi
c001b5b2:	c1 e8 05             	shr    eax,0x5
c001b5b5:	31 d2                	xor    edx,edx
c001b5b7:	f7 f3                	div    ebx
c001b5b9:	31 db                	xor    ebx,ebx
c001b5bb:	52                   	push   edx
c001b5bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b5c0:	57                   	push   edi
c001b5c1:	68 b5 be 02 c0       	push   0xc002beb5
c001b5c6:	e8 6b 7a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001b5cb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b5cf:	89 f8                	mov    eax,edi
c001b5d1:	31 c9                	xor    ecx,ecx
c001b5d3:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b5d7:	88 c1                	mov    cl,al
c001b5d9:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b5df:	88 d5                	mov    ch,dl
c001b5e1:	c1 e0 10             	shl    eax,0x10
c001b5e4:	0f b7 d1             	movzx  edx,cx
c001b5e7:	09 c2                	or     edx,eax
c001b5e9:	89 d8                	mov    eax,ebx
c001b5eb:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b5f0:	09 f0                	or     eax,esi
c001b5f2:	89 c3                	mov    ebx,eax
c001b5f4:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5f8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5fc:	83 c4 18             	add    esp,0x18
c001b5ff:	53                   	push   ebx
c001b600:	52                   	push   edx
c001b601:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b605:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b609:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b60d:	e8 07 8a ff ff       	call   c0014019 <datetimeToSeconds(datetime_t)>
c001b612:	83 c4 0c             	add    esp,0xc
c001b615:	52                   	push   edx
c001b616:	50                   	push   eax
c001b617:	56                   	push   esi
c001b618:	e8 83 8b ff ff       	call   c00141a0 <secondsToDatetime(unsigned long long)>
c001b61d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b625:	51                   	push   ecx
c001b626:	89 d6                	mov    esi,edx
c001b628:	51                   	push   ecx
c001b629:	c1 ee 10             	shr    esi,0x10
c001b62c:	89 f3                	mov    ebx,esi
c001b62e:	0f b6 f3             	movzx  esi,bl
c001b631:	56                   	push   esi
c001b632:	0f b6 f6             	movzx  esi,dh
c001b635:	0f b6 d2             	movzx  edx,dl
c001b638:	56                   	push   esi
c001b639:	52                   	push   edx
c001b63a:	89 c2                	mov    edx,eax
c001b63c:	c1 ea 10             	shr    edx,0x10
c001b63f:	52                   	push   edx
c001b640:	0f b6 d4             	movzx  edx,ah
c001b643:	0f b6 c0             	movzx  eax,al
c001b646:	52                   	push   edx
c001b647:	50                   	push   eax
c001b648:	68 d1 be 02 c0       	push   0xc002bed1
c001b64d:	e8 e4 79 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001b652:	83 c4 2c             	add    esp,0x2c
c001b655:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001b65a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b65e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b662:	53                   	push   ebx
c001b663:	51                   	push   ecx
c001b664:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b66a:	e8 d1 8a ff ff       	call   c0014140 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b66f:	83 f0 01             	xor    eax,0x1
c001b672:	31 d2                	xor    edx,edx
c001b674:	0f b6 c0             	movzx  eax,al
c001b677:	83 c4 3c             	add    esp,0x3c
c001b67a:	5b                   	pop    ebx
c001b67b:	5e                   	pop    esi
c001b67c:	5f                   	pop    edi
c001b67d:	5d                   	pop    ebp
c001b67e:	c3                   	ret    

c001b67f <Sys::timezone(regs*)>:
c001b67f:	53                   	push   ebx
c001b680:	83 ec 08             	sub    esp,0x8
c001b683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b687:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b68b:	75 17                	jne    c001b6a4 <Sys::timezone(regs*)+0x25>
c001b68d:	83 ec 0c             	sub    esp,0xc
c001b690:	68 ed be 02 c0       	push   0xc002beed
c001b695:	e8 9c 79 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001b69a:	83 c8 ff             	or     eax,0xffffffff
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	89 c2                	mov    edx,eax
c001b6a2:	eb 20                	jmp    c001b6c4 <Sys::timezone(regs*)+0x45>
c001b6a4:	83 ec 0c             	sub    esp,0xc
c001b6a7:	68 25 bf 02 c0       	push   0xc002bf25
c001b6ac:	e8 85 79 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001b6b1:	58                   	pop    eax
c001b6b2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b6b5:	e8 e8 87 ff ff       	call   c0013ea2 <User::loadClockSettings(int)>
c001b6ba:	83 c4 10             	add    esp,0x10
c001b6bd:	b8 01 00 00 00       	mov    eax,0x1
c001b6c2:	31 d2                	xor    edx,edx
c001b6c4:	83 c4 08             	add    esp,0x8
c001b6c7:	5b                   	pop    ebx
c001b6c8:	c3                   	ret    

c001b6c9 <Sys::write(regs*)>:
c001b6c9:	57                   	push   edi
c001b6ca:	56                   	push   esi
c001b6cb:	53                   	push   ebx
c001b6cc:	83 ec 10             	sub    esp,0x10
c001b6cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6d6:	83 f8 02             	cmp    eax,0x2
c001b6d9:	77 10                	ja     c001b6eb <Sys::write(regs*)+0x22>
c001b6db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6e3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6e9:	eb 0e                	jmp    c001b6f9 <Sys::write(regs*)+0x30>
c001b6eb:	83 ec 0c             	sub    esp,0xc
c001b6ee:	50                   	push   eax
c001b6ef:	e8 99 63 ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001b6f4:	83 c4 10             	add    esp,0x10
c001b6f7:	89 c1                	mov    ecx,eax
c001b6f9:	83 c8 ff             	or     eax,0xffffffff
c001b6fc:	85 c9                	test   ecx,ecx
c001b6fe:	89 c2                	mov    edx,eax
c001b700:	74 28                	je     c001b72a <Sys::write(regs*)+0x61>
c001b702:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b70a:	31 ff                	xor    edi,edi
c001b70c:	83 ec 0c             	sub    esp,0xc
c001b70f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b711:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b715:	52                   	push   edx
c001b716:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b719:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b71c:	57                   	push   edi
c001b71d:	56                   	push   esi
c001b71e:	51                   	push   ecx
c001b71f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b722:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b726:	83 c4 20             	add    esp,0x20
c001b729:	99                   	cdq    
c001b72a:	83 c4 10             	add    esp,0x10
c001b72d:	5b                   	pop    ebx
c001b72e:	5e                   	pop    esi
c001b72f:	5f                   	pop    edi
c001b730:	c3                   	ret    

c001b731 <Sys::wsbe(regs*)>:
c001b731:	57                   	push   edi
c001b732:	b9 0b 00 00 00       	mov    ecx,0xb
c001b737:	56                   	push   esi
c001b738:	be 64 bf 02 c0       	mov    esi,0xc002bf64
c001b73d:	53                   	push   ebx
c001b73e:	83 ec 30             	sub    esp,0x30
c001b741:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b745:	fc                   	cld    
c001b746:	83 ec 0c             	sub    esp,0xc
c001b749:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b74b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b74f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b754:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b757:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b75d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b75f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b762:	57                   	push   edi
c001b763:	e8 2c 50 fe ff       	call   c0000794 <strlen>
c001b768:	5a                   	pop    edx
c001b769:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b76d:	52                   	push   edx
c001b76e:	31 d2                	xor    edx,edx
c001b770:	57                   	push   edi
c001b771:	52                   	push   edx
c001b772:	50                   	push   eax
c001b773:	56                   	push   esi
c001b774:	ff d3                	call   ebx
c001b776:	83 c4 14             	add    esp,0x14
c001b779:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b77d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b780:	e8 80 31 00 00       	call   c001e905 <terminateTask(int)>
c001b785:	83 c4 40             	add    esp,0x40
c001b788:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b78d:	5b                   	pop    ebx
c001b78e:	31 d2                	xor    edx,edx
c001b790:	5e                   	pop    esi
c001b791:	5f                   	pop    edi
c001b792:	c3                   	ret    

c001b793 <Sys::yield(regs*)>:
c001b793:	57                   	push   edi
c001b794:	56                   	push   esi
c001b795:	53                   	push   ebx
c001b796:	e8 27 27 00 00       	call   c001dec2 <lockScheduler()>
c001b79b:	e8 5e 2a 00 00       	call   c001e1fe <schedule()>
c001b7a0:	e8 1f 27 00 00       	call   c001dec4 <unlockScheduler()>
c001b7a5:	8b 35 30 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec30
c001b7ab:	8b 3d 34 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec34
c001b7b1:	89 f0                	mov    eax,esi
c001b7b3:	89 fb                	mov    ebx,edi
c001b7b5:	89 f1                	mov    ecx,esi
c001b7b7:	c1 e0 07             	shl    eax,0x7
c001b7ba:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b7be:	25 80 30 0f 00       	and    eax,0xf3080
c001b7c3:	c1 eb 17             	shr    ebx,0x17
c001b7c6:	31 c8                	xor    eax,ecx
c001b7c8:	89 da                	mov    edx,ebx
c001b7ca:	5b                   	pop    ebx
c001b7cb:	5e                   	pop    esi
c001b7cc:	5f                   	pop    edi
c001b7cd:	c3                   	ret    

c001b7ce <sysCallSeekDir(regs*)>:
c001b7ce:	31 c0                	xor    eax,eax
c001b7d0:	31 d2                	xor    edx,edx
c001b7d2:	c3                   	ret    

c001b7d3 <sysCallTellDir(regs*)>:
c001b7d3:	31 c0                	xor    eax,eax
c001b7d5:	31 d2                	xor    edx,edx
c001b7d7:	c3                   	ret    

c001b7d8 <sysCallVerify(regs*)>:
c001b7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7dc:	31 d2                	xor    edx,edx
c001b7de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7e1:	c3                   	ret    

c001b7e2 <sysFormatDisk(regs*)>:
c001b7e2:	56                   	push   esi
c001b7e3:	53                   	push   ebx
c001b7e4:	53                   	push   ebx
c001b7e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7e9:	8b 1d 18 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e718
c001b7ef:	eb 25                	jmp    c001b816 <sysFormatDisk(regs*)+0x34>
c001b7f1:	83 ec 0c             	sub    esp,0xc
c001b7f4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7f9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7fc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7ff:	50                   	push   eax
c001b800:	ff 34 85 c0 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1440]
c001b807:	53                   	push   ebx
c001b808:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b80b:	83 c4 20             	add    esp,0x20
c001b80e:	83 f8 08             	cmp    eax,0x8
c001b811:	75 12                	jne    c001b825 <sysFormatDisk(regs*)+0x43>
c001b813:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b816:	85 db                	test   ebx,ebx
c001b818:	75 d7                	jne    c001b7f1 <sysFormatDisk(regs*)+0xf>
c001b81a:	59                   	pop    ecx
c001b81b:	b8 03 00 00 00       	mov    eax,0x3
c001b820:	31 d2                	xor    edx,edx
c001b822:	5b                   	pop    ebx
c001b823:	5e                   	pop    esi
c001b824:	c3                   	ret    
c001b825:	85 c0                	test   eax,eax
c001b827:	74 1b                	je     c001b844 <sysFormatDisk(regs*)+0x62>
c001b829:	83 f8 09             	cmp    eax,0x9
c001b82c:	74 0b                	je     c001b839 <sysFormatDisk(regs*)+0x57>
c001b82e:	59                   	pop    ecx
c001b82f:	b8 02 00 00 00       	mov    eax,0x2
c001b834:	31 d2                	xor    edx,edx
c001b836:	5b                   	pop    ebx
c001b837:	5e                   	pop    esi
c001b838:	c3                   	ret    
c001b839:	59                   	pop    ecx
c001b83a:	b8 01 00 00 00       	mov    eax,0x1
c001b83f:	31 d2                	xor    edx,edx
c001b841:	5b                   	pop    ebx
c001b842:	5e                   	pop    esi
c001b843:	c3                   	ret    
c001b844:	59                   	pop    ecx
c001b845:	31 c0                	xor    eax,eax
c001b847:	31 d2                	xor    edx,edx
c001b849:	5b                   	pop    ebx
c001b84a:	5e                   	pop    esi
c001b84b:	c3                   	ret    

c001b84c <sysSetDiskVolumeLabel(regs*)>:
c001b84c:	56                   	push   esi
c001b84d:	53                   	push   ebx
c001b84e:	53                   	push   ebx
c001b84f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b853:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b856:	83 f8 19             	cmp    eax,0x19
c001b859:	77 29                	ja     c001b884 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b85b:	8b 0c 85 c0 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1440]
c001b862:	85 c9                	test   ecx,ecx
c001b864:	74 1e                	je     c001b884 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b866:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b869:	85 d2                	test   edx,edx
c001b86b:	74 17                	je     c001b884 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b86d:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b873:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b875:	52                   	push   edx
c001b876:	50                   	push   eax
c001b877:	51                   	push   ecx
c001b878:	53                   	push   ebx
c001b879:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b87c:	83 c4 10             	add    esp,0x10
c001b87f:	99                   	cdq    
c001b880:	59                   	pop    ecx
c001b881:	5b                   	pop    ebx
c001b882:	5e                   	pop    esi
c001b883:	c3                   	ret    
c001b884:	59                   	pop    ecx
c001b885:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b88a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b88f:	5b                   	pop    ebx
c001b890:	5e                   	pop    esi
c001b891:	c3                   	ret    

c001b892 <sysGetDiskVolumeLabel(regs*)>:
c001b892:	57                   	push   edi
c001b893:	56                   	push   esi
c001b894:	53                   	push   ebx
c001b895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b899:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b89c:	83 fa 19             	cmp    edx,0x19
c001b89f:	77 34                	ja     c001b8d5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8a1:	8b 0c 95 c0 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1440]
c001b8a8:	85 c9                	test   ecx,ecx
c001b8aa:	74 29                	je     c001b8d5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8ac:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b8af:	85 db                	test   ebx,ebx
c001b8b1:	74 22                	je     c001b8d5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8b3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b8b6:	85 c0                	test   eax,eax
c001b8b8:	74 1b                	je     c001b8d5 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8ba:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b8c0:	83 ec 0c             	sub    esp,0xc
c001b8c3:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b8c5:	50                   	push   eax
c001b8c6:	53                   	push   ebx
c001b8c7:	52                   	push   edx
c001b8c8:	51                   	push   ecx
c001b8c9:	56                   	push   esi
c001b8ca:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b8cd:	83 c4 20             	add    esp,0x20
c001b8d0:	99                   	cdq    
c001b8d1:	5b                   	pop    ebx
c001b8d2:	5e                   	pop    esi
c001b8d3:	5f                   	pop    edi
c001b8d4:	c3                   	ret    
c001b8d5:	5b                   	pop    ebx
c001b8d6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8db:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8e0:	5e                   	pop    esi
c001b8e1:	5f                   	pop    edi
c001b8e2:	c3                   	ret    

c001b8e3 <sysShutdown(regs*)>:
c001b8e3:	83 ec 0c             	sub    esp,0xc
c001b8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8ed:	85 c0                	test   eax,eax
c001b8ef:	74 18                	je     c001b909 <sysShutdown(regs*)+0x26>
c001b8f1:	83 f8 01             	cmp    eax,0x1
c001b8f4:	74 38                	je     c001b92e <sysShutdown(regs*)+0x4b>
c001b8f6:	83 f8 02             	cmp    eax,0x2
c001b8f9:	74 24                	je     c001b91f <sysShutdown(regs*)+0x3c>
c001b8fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b900:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b905:	83 c4 0c             	add    esp,0xc
c001b908:	c3                   	ret    
c001b909:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001b90e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b910:	6a 00                	push   0x0
c001b912:	6a 00                	push   0x0
c001b914:	6a 00                	push   0x0
c001b916:	50                   	push   eax
c001b917:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b91a:	83 c4 10             	add    esp,0x10
c001b91d:	eb dc                	jmp    c001b8fb <sysShutdown(regs*)+0x18>
c001b91f:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001b924:	8b 10                	mov    edx,DWORD PTR [eax]
c001b926:	6a 00                	push   0x0
c001b928:	6a 00                	push   0x0
c001b92a:	6a 01                	push   0x1
c001b92c:	eb e8                	jmp    c001b916 <sysShutdown(regs*)+0x33>
c001b92e:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c001b933:	85 c0                	test   eax,eax
c001b935:	74 02                	je     c001b939 <sysShutdown(regs*)+0x56>
c001b937:	ff d0                	call   eax
c001b939:	31 c0                	xor    eax,eax
c001b93b:	31 d2                	xor    edx,edx
c001b93d:	83 c4 0c             	add    esp,0xc
c001b940:	c3                   	ret    

c001b941 <sysCallRealpath(regs*)>:
c001b941:	83 ec 0c             	sub    esp,0xc
c001b944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b948:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b94b:	85 d2                	test   edx,edx
c001b94d:	74 07                	je     c001b956 <sysCallRealpath(regs*)+0x15>
c001b94f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b952:	85 c0                	test   eax,eax
c001b954:	75 0b                	jne    c001b961 <sysCallRealpath(regs*)+0x20>
c001b956:	b8 01 00 00 00       	mov    eax,0x1
c001b95b:	31 d2                	xor    edx,edx
c001b95d:	83 c4 0c             	add    esp,0xc
c001b960:	c3                   	ret    
c001b961:	51                   	push   ecx
c001b962:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b968:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b96b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b971:	51                   	push   ecx
c001b972:	52                   	push   edx
c001b973:	50                   	push   eax
c001b974:	e8 6b 7a ff ff       	call   c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b979:	83 c4 10             	add    esp,0x10
c001b97c:	31 c0                	xor    eax,eax
c001b97e:	31 d2                	xor    edx,edx
c001b980:	83 c4 0c             	add    esp,0xc
c001b983:	c3                   	ret    

c001b984 <sysCallGetArgc(regs*)>:
c001b984:	83 ec 14             	sub    esp,0x14
c001b987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b98f:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b995:	68 90 bf 02 c0       	push   0xc002bf90
c001b99a:	e8 97 76 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001b99f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9a7:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b9ad:	83 c4 1c             	add    esp,0x1c
c001b9b0:	99                   	cdq    
c001b9b1:	c3                   	ret    

c001b9b2 <sysCallReadDir(regs*)>:
c001b9b2:	53                   	push   ebx
c001b9b3:	83 ec 18             	sub    esp,0x18
c001b9b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9ba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9bd:	83 f8 02             	cmp    eax,0x2
c001b9c0:	76 53                	jbe    c001ba15 <sysCallReadDir(regs*)+0x63>
c001b9c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b9c5:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b9cb:	77 4f                	ja     c001ba1c <sysCallReadDir(regs*)+0x6a>
c001b9cd:	83 ec 0c             	sub    esp,0xc
c001b9d0:	50                   	push   eax
c001b9d1:	e8 b7 60 ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001b9d6:	83 c4 10             	add    esp,0x10
c001b9d9:	85 c0                	test   eax,eax
c001b9db:	74 50                	je     c001ba2d <sysCallReadDir(regs*)+0x7b>
c001b9dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9e5:	83 ec 0c             	sub    esp,0xc
c001b9e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9ea:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b9ee:	51                   	push   ecx
c001b9ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9f2:	6a 00                	push   0x0
c001b9f4:	68 10 01 00 00       	push   0x110
c001b9f9:	50                   	push   eax
c001b9fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9fd:	83 c4 20             	add    esp,0x20
c001ba00:	85 c0                	test   eax,eax
c001ba02:	74 38                	je     c001ba3c <sysCallReadDir(regs*)+0x8a>
c001ba04:	83 f8 07             	cmp    eax,0x7
c001ba07:	74 0c                	je     c001ba15 <sysCallReadDir(regs*)+0x63>
c001ba09:	b8 02 00 00 00       	mov    eax,0x2
c001ba0e:	31 d2                	xor    edx,edx
c001ba10:	83 c4 18             	add    esp,0x18
c001ba13:	5b                   	pop    ebx
c001ba14:	c3                   	ret    
c001ba15:	b8 01 00 00 00       	mov    eax,0x1
c001ba1a:	eb f2                	jmp    c001ba0e <sysCallReadDir(regs*)+0x5c>
c001ba1c:	83 ec 08             	sub    esp,0x8
c001ba1f:	52                   	push   edx
c001ba20:	68 a8 c0 02 c0       	push   0xc002c0a8
c001ba25:	e8 0c 76 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001ba2a:	83 c4 10             	add    esp,0x10
c001ba2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba32:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba37:	83 c4 18             	add    esp,0x18
c001ba3a:	5b                   	pop    ebx
c001ba3b:	c3                   	ret    
c001ba3c:	31 c0                	xor    eax,eax
c001ba3e:	eb ce                	jmp    c001ba0e <sysCallReadDir(regs*)+0x5c>

c001ba40 <sysCallIsATTY(regs*)>:
c001ba40:	83 ec 0c             	sub    esp,0xc
c001ba43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba47:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba4a:	83 f8 02             	cmp    eax,0x2
c001ba4d:	76 07                	jbe    c001ba56 <sysCallIsATTY(regs*)+0x16>
c001ba4f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba54:	75 26                	jne    c001ba7c <sysCallIsATTY(regs*)+0x3c>
c001ba56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba5e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba64:	85 c0                	test   eax,eax
c001ba66:	74 24                	je     c001ba8c <sysCallIsATTY(regs*)+0x4c>
c001ba68:	83 ec 0c             	sub    esp,0xc
c001ba6b:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba6d:	50                   	push   eax
c001ba6e:	ff 12                	call   DWORD PTR [edx]
c001ba70:	31 d2                	xor    edx,edx
c001ba72:	0f b6 c0             	movzx  eax,al
c001ba75:	83 c4 10             	add    esp,0x10
c001ba78:	83 c4 0c             	add    esp,0xc
c001ba7b:	c3                   	ret    
c001ba7c:	83 ec 0c             	sub    esp,0xc
c001ba7f:	50                   	push   eax
c001ba80:	e8 08 60 ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001ba85:	83 c4 10             	add    esp,0x10
c001ba88:	85 c0                	test   eax,eax
c001ba8a:	75 dc                	jne    c001ba68 <sysCallIsATTY(regs*)+0x28>
c001ba8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba91:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba96:	83 c4 0c             	add    esp,0xc
c001ba99:	c3                   	ret    

c001ba9a <sysCallSeek(regs*)>:
c001ba9a:	53                   	push   ebx
c001ba9b:	83 ec 08             	sub    esp,0x8
c001ba9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baa2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baa5:	83 f8 02             	cmp    eax,0x2
c001baa8:	76 4a                	jbe    c001baf4 <sysCallSeek(regs*)+0x5a>
c001baaa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baaf:	77 32                	ja     c001bae3 <sysCallSeek(regs*)+0x49>
c001bab1:	83 ec 0c             	sub    esp,0xc
c001bab4:	50                   	push   eax
c001bab5:	e8 d3 5f ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001baba:	83 c4 0c             	add    esp,0xc
c001babd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bac0:	31 db                	xor    ebx,ebx
c001bac2:	53                   	push   ebx
c001bac3:	51                   	push   ecx
c001bac4:	50                   	push   eax
c001bac5:	e8 e6 7b ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001baca:	83 c4 10             	add    esp,0x10
c001bacd:	85 c0                	test   eax,eax
c001bacf:	0f 95 c0             	setne  al
c001bad2:	31 d2                	xor    edx,edx
c001bad4:	0f b6 c0             	movzx  eax,al
c001bad7:	f7 d8                	neg    eax
c001bad9:	83 d2 00             	adc    edx,0x0
c001badc:	83 c4 08             	add    esp,0x8
c001badf:	f7 da                	neg    edx
c001bae1:	5b                   	pop    ebx
c001bae2:	c3                   	ret    
c001bae3:	83 ec 08             	sub    esp,0x8
c001bae6:	50                   	push   eax
c001bae7:	68 9b bf 02 c0       	push   0xc002bf9b
c001baec:	e8 45 75 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001baf1:	83 c4 10             	add    esp,0x10
c001baf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baf9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bafe:	83 c4 08             	add    esp,0x8
c001bb01:	5b                   	pop    ebx
c001bb02:	c3                   	ret    

c001bb03 <sysCallTell(regs*)>:
c001bb03:	53                   	push   ebx
c001bb04:	83 ec 08             	sub    esp,0x8
c001bb07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb0e:	83 f8 02             	cmp    eax,0x2
c001bb11:	76 5e                	jbe    c001bb71 <sysCallTell(regs*)+0x6e>
c001bb13:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb18:	77 2d                	ja     c001bb47 <sysCallTell(regs*)+0x44>
c001bb1a:	83 ec 0c             	sub    esp,0xc
c001bb1d:	50                   	push   eax
c001bb1e:	e8 6a 5f ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001bb23:	5a                   	pop    edx
c001bb24:	59                   	pop    ecx
c001bb25:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb28:	50                   	push   eax
c001bb29:	e8 d8 7b ff ff       	call   c0013706 <File::tell(unsigned long long*)>
c001bb2e:	83 c4 10             	add    esp,0x10
c001bb31:	85 c0                	test   eax,eax
c001bb33:	0f 95 c0             	setne  al
c001bb36:	31 d2                	xor    edx,edx
c001bb38:	0f b6 c0             	movzx  eax,al
c001bb3b:	f7 d8                	neg    eax
c001bb3d:	83 d2 00             	adc    edx,0x0
c001bb40:	83 c4 08             	add    esp,0x8
c001bb43:	f7 da                	neg    edx
c001bb45:	5b                   	pop    ebx
c001bb46:	c3                   	ret    
c001bb47:	83 ec 08             	sub    esp,0x8
c001bb4a:	50                   	push   eax
c001bb4b:	68 b5 bf 02 c0       	push   0xc002bfb5
c001bb50:	e8 e1 74 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001bb55:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb58:	83 c4 10             	add    esp,0x10
c001bb5b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb68:	31 d2                	xor    edx,edx
c001bb6a:	31 c0                	xor    eax,eax
c001bb6c:	83 c4 08             	add    esp,0x8
c001bb6f:	5b                   	pop    ebx
c001bb70:	c3                   	ret    
c001bb71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb76:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb7b:	83 c4 08             	add    esp,0x8
c001bb7e:	5b                   	pop    ebx
c001bb7f:	c3                   	ret    

c001bb80 <sysCallSize(regs*)>:
c001bb80:	53                   	push   ebx
c001bb81:	83 ec 18             	sub    esp,0x18
c001bb84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb8b:	83 f8 02             	cmp    eax,0x2
c001bb8e:	76 64                	jbe    c001bbf4 <sysCallSize(regs*)+0x74>
c001bb90:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb95:	77 33                	ja     c001bbca <sysCallSize(regs*)+0x4a>
c001bb97:	83 ec 0c             	sub    esp,0xc
c001bb9a:	50                   	push   eax
c001bb9b:	e8 ed 5e ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001bba0:	83 c4 0c             	add    esp,0xc
c001bba3:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bba7:	52                   	push   edx
c001bba8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bbab:	50                   	push   eax
c001bbac:	e8 ed 7c ff ff       	call   c001389e <File::stat(unsigned long long*, bool*)>
c001bbb1:	83 c4 10             	add    esp,0x10
c001bbb4:	85 c0                	test   eax,eax
c001bbb6:	0f 95 c0             	setne  al
c001bbb9:	31 d2                	xor    edx,edx
c001bbbb:	0f b6 c0             	movzx  eax,al
c001bbbe:	f7 d8                	neg    eax
c001bbc0:	83 d2 00             	adc    edx,0x0
c001bbc3:	83 c4 18             	add    esp,0x18
c001bbc6:	f7 da                	neg    edx
c001bbc8:	5b                   	pop    ebx
c001bbc9:	c3                   	ret    
c001bbca:	83 ec 08             	sub    esp,0x8
c001bbcd:	50                   	push   eax
c001bbce:	68 cf bf 02 c0       	push   0xc002bfcf
c001bbd3:	e8 5e 74 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001bbd8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbdb:	83 c4 10             	add    esp,0x10
c001bbde:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbe4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbeb:	31 d2                	xor    edx,edx
c001bbed:	31 c0                	xor    eax,eax
c001bbef:	83 c4 18             	add    esp,0x18
c001bbf2:	5b                   	pop    ebx
c001bbf3:	c3                   	ret    
c001bbf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbf9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbfe:	83 c4 18             	add    esp,0x18
c001bc01:	5b                   	pop    ebx
c001bc02:	c3                   	ret    

c001bc03 <sysCallSizeFromFilename(regs*)>:
c001bc03:	57                   	push   edi
c001bc04:	56                   	push   esi
c001bc05:	53                   	push   ebx
c001bc06:	83 ec 20             	sub    esp,0x20
c001bc09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc0d:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bc10:	83 fb 02             	cmp    ebx,0x2
c001bc13:	0f 86 99 00 00 00    	jbe    c001bcb2 <sysCallSizeFromFilename(regs*)+0xaf>
c001bc19:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bc1f:	77 65                	ja     c001bc86 <sysCallSizeFromFilename(regs*)+0x83>
c001bc21:	83 ec 0c             	sub    esp,0xc
c001bc24:	68 14 01 00 00       	push   0x114
c001bc29:	e8 12 3c ff ff       	call   c000f840 <malloc>
c001bc2e:	83 c4 0c             	add    esp,0xc
c001bc31:	89 c6                	mov    esi,eax
c001bc33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc38:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc3b:	53                   	push   ebx
c001bc3c:	56                   	push   esi
c001bc3d:	e8 4c 79 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001bc42:	83 c4 0c             	add    esp,0xc
c001bc45:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bc49:	50                   	push   eax
c001bc4a:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc4d:	56                   	push   esi
c001bc4e:	e8 4b 7c ff ff       	call   c001389e <File::stat(unsigned long long*, bool*)>
c001bc53:	83 c4 10             	add    esp,0x10
c001bc56:	85 f6                	test   esi,esi
c001bc58:	74 14                	je     c001bc6e <sysCallSizeFromFilename(regs*)+0x6b>
c001bc5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc5e:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc60:	83 ec 0c             	sub    esp,0xc
c001bc63:	56                   	push   esi
c001bc64:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc6e:	85 c0                	test   eax,eax
c001bc70:	0f 95 c0             	setne  al
c001bc73:	31 d2                	xor    edx,edx
c001bc75:	0f b6 c0             	movzx  eax,al
c001bc78:	f7 d8                	neg    eax
c001bc7a:	83 d2 00             	adc    edx,0x0
c001bc7d:	83 c4 20             	add    esp,0x20
c001bc80:	f7 da                	neg    edx
c001bc82:	5b                   	pop    ebx
c001bc83:	5e                   	pop    esi
c001bc84:	5f                   	pop    edi
c001bc85:	c3                   	ret    
c001bc86:	83 ec 08             	sub    esp,0x8
c001bc89:	53                   	push   ebx
c001bc8a:	68 cf bf 02 c0       	push   0xc002bfcf
c001bc8f:	e8 a2 73 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001bc94:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc97:	83 c4 10             	add    esp,0x10
c001bc9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bca0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bca7:	31 d2                	xor    edx,edx
c001bca9:	83 c4 20             	add    esp,0x20
c001bcac:	31 c0                	xor    eax,eax
c001bcae:	5b                   	pop    ebx
c001bcaf:	5e                   	pop    esi
c001bcb0:	5f                   	pop    edi
c001bcb1:	c3                   	ret    
c001bcb2:	83 c4 20             	add    esp,0x20
c001bcb5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcba:	5b                   	pop    ebx
c001bcbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcc0:	5e                   	pop    esi
c001bcc1:	5f                   	pop    edi
c001bcc2:	c3                   	ret    

c001bcc3 <sysCallClose(regs*)>:
c001bcc3:	53                   	push   ebx
c001bcc4:	83 ec 08             	sub    esp,0x8
c001bcc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bccb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcce:	83 f8 02             	cmp    eax,0x2
c001bcd1:	76 50                	jbe    c001bd23 <sysCallClose(regs*)+0x60>
c001bcd3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcd8:	74 58                	je     c001bd32 <sysCallClose(regs*)+0x6f>
c001bcda:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcdf:	74 60                	je     c001bd41 <sysCallClose(regs*)+0x7e>
c001bce1:	77 2f                	ja     c001bd12 <sysCallClose(regs*)+0x4f>
c001bce3:	83 ec 0c             	sub    esp,0xc
c001bce6:	50                   	push   eax
c001bce7:	e8 a1 5d ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001bcec:	89 c3                	mov    ebx,eax
c001bcee:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcf1:	e8 5a 79 ff ff       	call   c0013650 <File::close()>
c001bcf6:	83 c4 10             	add    esp,0x10
c001bcf9:	85 db                	test   ebx,ebx
c001bcfb:	74 0c                	je     c001bd09 <sysCallClose(regs*)+0x46>
c001bcfd:	83 ec 0c             	sub    esp,0xc
c001bd00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd02:	53                   	push   ebx
c001bd03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd06:	83 c4 10             	add    esp,0x10
c001bd09:	31 c0                	xor    eax,eax
c001bd0b:	31 d2                	xor    edx,edx
c001bd0d:	83 c4 08             	add    esp,0x8
c001bd10:	5b                   	pop    ebx
c001bd11:	c3                   	ret    
c001bd12:	83 ec 08             	sub    esp,0x8
c001bd15:	50                   	push   eax
c001bd16:	68 cc c0 02 c0       	push   0xc002c0cc
c001bd1b:	e8 16 73 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001bd20:	83 c4 10             	add    esp,0x10
c001bd23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd28:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2d:	83 c4 08             	add    esp,0x8
c001bd30:	5b                   	pop    ebx
c001bd31:	c3                   	ret    
c001bd32:	83 ec 0c             	sub    esp,0xc
c001bd35:	68 ea bf 02 c0       	push   0xc002bfea
c001bd3a:	e8 f7 72 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001bd3f:	eb c5                	jmp    c001bd06 <sysCallClose(regs*)+0x43>
c001bd41:	83 ec 0c             	sub    esp,0xc
c001bd44:	68 f8 bf 02 c0       	push   0xc002bff8
c001bd49:	eb ef                	jmp    c001bd3a <sysCallClose(regs*)+0x77>

c001bd4b <sysCallOpenDir(regs*)>:
c001bd4b:	56                   	push   esi
c001bd4c:	53                   	push   ebx
c001bd4d:	53                   	push   ebx
c001bd4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd52:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd55:	85 f6                	test   esi,esi
c001bd57:	74 59                	je     c001bdb2 <sysCallOpenDir(regs*)+0x67>
c001bd59:	83 ec 0c             	sub    esp,0xc
c001bd5c:	68 14 01 00 00       	push   0x114
c001bd61:	e8 da 3a ff ff       	call   c000f840 <malloc>
c001bd66:	83 c4 0c             	add    esp,0xc
c001bd69:	89 c6                	mov    esi,eax
c001bd6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd70:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd73:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd76:	56                   	push   esi
c001bd77:	e8 be 7c ff ff       	call   c0013a3a <Directory::Directory(char const*, Process*)>
c001bd7c:	83 c4 10             	add    esp,0x10
c001bd7f:	85 f6                	test   esi,esi
c001bd81:	74 2f                	je     c001bdb2 <sysCallOpenDir(regs*)+0x67>
c001bd83:	83 ec 0c             	sub    esp,0xc
c001bd86:	56                   	push   esi
c001bd87:	e8 12 7d ff ff       	call   c0013a9e <Directory::open()>
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	85 c0                	test   eax,eax
c001bd91:	75 1f                	jne    c001bdb2 <sysCallOpenDir(regs*)+0x67>
c001bd93:	83 ec 0c             	sub    esp,0xc
c001bd96:	56                   	push   esi
c001bd97:	e8 fc 59 ff ff       	call   c0011798 <UnixFile::getFileDescriptor()>
c001bd9c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd9f:	83 c4 10             	add    esp,0x10
c001bda2:	89 02                	mov    DWORD PTR [edx],eax
c001bda4:	c1 f8 1f             	sar    eax,0x1f
c001bda7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bdaa:	31 c0                	xor    eax,eax
c001bdac:	59                   	pop    ecx
c001bdad:	31 d2                	xor    edx,edx
c001bdaf:	5b                   	pop    ebx
c001bdb0:	5e                   	pop    esi
c001bdb1:	c3                   	ret    
c001bdb2:	59                   	pop    ecx
c001bdb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdb8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdbd:	5b                   	pop    ebx
c001bdbe:	5e                   	pop    esi
c001bdbf:	c3                   	ret    

c001bdc0 <sysCallCloseDir(regs*)>:
c001bdc0:	53                   	push   ebx
c001bdc1:	83 ec 08             	sub    esp,0x8
c001bdc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdc8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bdcb:	83 f8 02             	cmp    eax,0x2
c001bdce:	76 47                	jbe    c001be17 <sysCallCloseDir(regs*)+0x57>
c001bdd0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdd5:	77 2f                	ja     c001be06 <sysCallCloseDir(regs*)+0x46>
c001bdd7:	83 ec 0c             	sub    esp,0xc
c001bdda:	50                   	push   eax
c001bddb:	e8 ad 5c ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001bde0:	89 c3                	mov    ebx,eax
c001bde2:	89 04 24             	mov    DWORD PTR [esp],eax
c001bde5:	e8 10 7d ff ff       	call   c0013afa <Directory::close()>
c001bdea:	83 c4 10             	add    esp,0x10
c001bded:	85 db                	test   ebx,ebx
c001bdef:	74 0c                	je     c001bdfd <sysCallCloseDir(regs*)+0x3d>
c001bdf1:	83 ec 0c             	sub    esp,0xc
c001bdf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdf6:	53                   	push   ebx
c001bdf7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdfa:	83 c4 10             	add    esp,0x10
c001bdfd:	31 c0                	xor    eax,eax
c001bdff:	31 d2                	xor    edx,edx
c001be01:	83 c4 08             	add    esp,0x8
c001be04:	5b                   	pop    ebx
c001be05:	c3                   	ret    
c001be06:	83 ec 08             	sub    esp,0x8
c001be09:	50                   	push   eax
c001be0a:	68 f4 c0 02 c0       	push   0xc002c0f4
c001be0f:	e8 22 72 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001be14:	83 c4 10             	add    esp,0x10
c001be17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be1c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be21:	83 c4 08             	add    esp,0x8
c001be24:	5b                   	pop    ebx
c001be25:	c3                   	ret    

c001be26 <sysCallMakeDir(regs*)>:
c001be26:	56                   	push   esi
c001be27:	53                   	push   ebx
c001be28:	83 ec 10             	sub    esp,0x10
c001be2b:	68 14 01 00 00       	push   0x114
c001be30:	e8 0b 3a ff ff       	call   c000f840 <malloc>
c001be35:	83 c4 0c             	add    esp,0xc
c001be38:	89 c3                	mov    ebx,eax
c001be3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be46:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be49:	53                   	push   ebx
c001be4a:	e8 eb 7b ff ff       	call   c0013a3a <Directory::Directory(char const*, Process*)>
c001be4f:	83 c4 10             	add    esp,0x10
c001be52:	85 db                	test   ebx,ebx
c001be54:	74 32                	je     c001be88 <sysCallMakeDir(regs*)+0x62>
c001be56:	83 ec 0c             	sub    esp,0xc
c001be59:	53                   	push   ebx
c001be5a:	e8 1f 7e ff ff       	call   c0013c7e <Directory::create()>
c001be5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be62:	89 c6                	mov    esi,eax
c001be64:	e8 91 7c ff ff       	call   c0013afa <Directory::close()>
c001be69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be71:	83 c4 10             	add    esp,0x10
c001be74:	31 c0                	xor    eax,eax
c001be76:	59                   	pop    ecx
c001be77:	85 f6                	test   esi,esi
c001be79:	5b                   	pop    ebx
c001be7a:	0f 95 c0             	setne  al
c001be7d:	5e                   	pop    esi
c001be7e:	31 d2                	xor    edx,edx
c001be80:	f7 d8                	neg    eax
c001be82:	83 d2 00             	adc    edx,0x0
c001be85:	f7 da                	neg    edx
c001be87:	c3                   	ret    
c001be88:	59                   	pop    ecx
c001be89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be93:	5b                   	pop    ebx
c001be94:	5e                   	pop    esi
c001be95:	c3                   	ret    

c001be96 <sysCallWait(regs*)>:
c001be96:	83 ec 10             	sub    esp,0x10
c001be99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be9d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bea0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bea3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bea6:	e8 ce 24 00 00       	call   c001e379 <waitTask(int, int*, int)>
c001beab:	83 c4 1c             	add    esp,0x1c
c001beae:	99                   	cdq    
c001beaf:	c3                   	ret    

c001beb0 <sysCallNotImpl(regs*)>:
c001beb0:	83 ec 18             	sub    esp,0x18
c001beb3:	68 06 c0 02 c0       	push   0xc002c006
c001beb8:	e8 2a e8 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001bebd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bec2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bec7:	83 c4 1c             	add    esp,0x1c
c001beca:	c3                   	ret    

c001becb <sysPanic(regs*)>:
c001becb:	83 ec 18             	sub    esp,0x18
c001bece:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bed2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bed5:	e8 0d e8 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001beda:	c7 04 24 20 c0 02 c0 	mov    DWORD PTR [esp],0xc002c020
c001bee1:	e8 01 e8 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001bee6:	b8 01 00 00 00       	mov    eax,0x1
c001beeb:	31 d2                	xor    edx,edx
c001beed:	83 c4 1c             	add    esp,0x1c
c001bef0:	c3                   	ret    

c001bef1 <sysCallRmdir(regs*)>:
c001bef1:	56                   	push   esi
c001bef2:	53                   	push   ebx
c001bef3:	83 ec 20             	sub    esp,0x20
c001bef6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001befa:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001befd:	68 14 01 00 00       	push   0x114
c001bf02:	e8 39 39 ff ff       	call   c000f840 <malloc>
c001bf07:	83 c4 0c             	add    esp,0xc
c001bf0a:	89 c3                	mov    ebx,eax
c001bf0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf11:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf14:	56                   	push   esi
c001bf15:	53                   	push   ebx
c001bf16:	e8 73 76 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001bf1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf1e:	e8 47 78 ff ff       	call   c001376a <File::unlink()>
c001bf23:	83 c4 10             	add    esp,0x10
c001bf26:	85 db                	test   ebx,ebx
c001bf28:	74 14                	je     c001bf3e <sysCallRmdir(regs*)+0x4d>
c001bf2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf2e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf30:	83 ec 0c             	sub    esp,0xc
c001bf33:	53                   	push   ebx
c001bf34:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf3e:	85 c0                	test   eax,eax
c001bf40:	0f 95 c0             	setne  al
c001bf43:	31 d2                	xor    edx,edx
c001bf45:	0f b6 c0             	movzx  eax,al
c001bf48:	f7 d8                	neg    eax
c001bf4a:	83 d2 00             	adc    edx,0x0
c001bf4d:	83 c4 14             	add    esp,0x14
c001bf50:	f7 da                	neg    edx
c001bf52:	5b                   	pop    ebx
c001bf53:	5e                   	pop    esi
c001bf54:	c3                   	ret    

c001bf55 <sysCallUnlink(regs*)>:
c001bf55:	56                   	push   esi
c001bf56:	53                   	push   ebx
c001bf57:	83 ec 20             	sub    esp,0x20
c001bf5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf5e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf61:	68 14 01 00 00       	push   0x114
c001bf66:	e8 d5 38 ff ff       	call   c000f840 <malloc>
c001bf6b:	83 c4 0c             	add    esp,0xc
c001bf6e:	89 c3                	mov    ebx,eax
c001bf70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf75:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf78:	56                   	push   esi
c001bf79:	53                   	push   ebx
c001bf7a:	e8 0f 76 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001bf7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf82:	e8 e3 77 ff ff       	call   c001376a <File::unlink()>
c001bf87:	83 c4 10             	add    esp,0x10
c001bf8a:	85 db                	test   ebx,ebx
c001bf8c:	74 14                	je     c001bfa2 <sysCallUnlink(regs*)+0x4d>
c001bf8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf92:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf94:	83 ec 0c             	sub    esp,0xc
c001bf97:	53                   	push   ebx
c001bf98:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf9b:	83 c4 10             	add    esp,0x10
c001bf9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfa2:	85 c0                	test   eax,eax
c001bfa4:	0f 95 c0             	setne  al
c001bfa7:	31 d2                	xor    edx,edx
c001bfa9:	0f b6 c0             	movzx  eax,al
c001bfac:	f7 d8                	neg    eax
c001bfae:	83 d2 00             	adc    edx,0x0
c001bfb1:	83 c4 14             	add    esp,0x14
c001bfb4:	f7 da                	neg    edx
c001bfb6:	5b                   	pop    ebx
c001bfb7:	5e                   	pop    esi
c001bfb8:	c3                   	ret    

c001bfb9 <sysCallGetArgv(regs*)>:
c001bfb9:	83 ec 0c             	sub    esp,0xc
c001bfbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bfc0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bfc3:	85 c0                	test   eax,eax
c001bfc5:	78 2b                	js     c001bff2 <sysCallGetArgv(regs*)+0x39>
c001bfc7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bfcd:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bfd0:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bfd6:	7d 1a                	jge    c001bff2 <sysCallGetArgv(regs*)+0x39>
c001bfd8:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bfdf:	85 c0                	test   eax,eax
c001bfe1:	74 17                	je     c001bffa <sysCallGetArgv(regs*)+0x41>
c001bfe3:	83 ec 08             	sub    esp,0x8
c001bfe6:	50                   	push   eax
c001bfe7:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bfea:	e8 45 48 fe ff       	call   c0000834 <strcpy>
c001bfef:	83 c4 10             	add    esp,0x10
c001bff2:	31 c0                	xor    eax,eax
c001bff4:	31 d2                	xor    edx,edx
c001bff6:	83 c4 0c             	add    esp,0xc
c001bff9:	c3                   	ret    
c001bffa:	b8 01 00 00 00       	mov    eax,0x1
c001bfff:	31 d2                	xor    edx,edx
c001c001:	83 c4 0c             	add    esp,0xc
c001c004:	c3                   	ret    

c001c005 <sysCallTTYName(regs*)>:
c001c005:	56                   	push   esi
c001c006:	53                   	push   ebx
c001c007:	53                   	push   ebx
c001c008:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c00c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c00f:	85 c0                	test   eax,eax
c001c011:	74 5f                	je     c001c072 <sysCallTTYName(regs*)+0x6d>
c001c013:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c016:	83 f8 02             	cmp    eax,0x2
c001c019:	77 3e                	ja     c001c059 <sysCallTTYName(regs*)+0x54>
c001c01b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c020:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c023:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c029:	85 db                	test   ebx,ebx
c001c02b:	74 45                	je     c001c072 <sysCallTTYName(regs*)+0x6d>
c001c02d:	83 ec 0c             	sub    esp,0xc
c001c030:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c032:	53                   	push   ebx
c001c033:	ff 10                	call   DWORD PTR [eax]
c001c035:	83 c4 10             	add    esp,0x10
c001c038:	84 c0                	test   al,al
c001c03a:	74 41                	je     c001c07d <sysCallTTYName(regs*)+0x78>
c001c03c:	83 ec 08             	sub    esp,0x8
c001c03f:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001c045:	53                   	push   ebx
c001c046:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c049:	e8 e6 47 fe ff       	call   c0000834 <strcpy>
c001c04e:	83 c4 10             	add    esp,0x10
c001c051:	31 c0                	xor    eax,eax
c001c053:	59                   	pop    ecx
c001c054:	31 d2                	xor    edx,edx
c001c056:	5b                   	pop    ebx
c001c057:	5e                   	pop    esi
c001c058:	c3                   	ret    
c001c059:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c05e:	74 bb                	je     c001c01b <sysCallTTYName(regs*)+0x16>
c001c060:	83 ec 0c             	sub    esp,0xc
c001c063:	50                   	push   eax
c001c064:	e8 24 5a ff ff       	call   c0011a8d <getFromFileDescriptor(int)>
c001c069:	83 c4 10             	add    esp,0x10
c001c06c:	89 c3                	mov    ebx,eax
c001c06e:	85 db                	test   ebx,ebx
c001c070:	75 bb                	jne    c001c02d <sysCallTTYName(regs*)+0x28>
c001c072:	59                   	pop    ecx
c001c073:	b8 01 00 00 00       	mov    eax,0x1
c001c078:	31 d2                	xor    edx,edx
c001c07a:	5b                   	pop    ebx
c001c07b:	5e                   	pop    esi
c001c07c:	c3                   	ret    
c001c07d:	59                   	pop    ecx
c001c07e:	b8 02 00 00 00       	mov    eax,0x2
c001c083:	31 d2                	xor    edx,edx
c001c085:	5b                   	pop    ebx
c001c086:	5e                   	pop    esi
c001c087:	c3                   	ret    

c001c088 <sysCallUSleep(regs*)>:
c001c088:	83 ec 14             	sub    esp,0x14
c001c08b:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c090:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c094:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c09b:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c09e:	01 ca                	add    edx,ecx
c001c0a0:	52                   	push   edx
c001c0a1:	50                   	push   eax
c001c0a2:	e8 6b 23 00 00       	call   c001e412 <nanoSleep(unsigned long long)>
c001c0a7:	31 c0                	xor    eax,eax
c001c0a9:	31 d2                	xor    edx,edx
c001c0ab:	83 c4 1c             	add    esp,0x1c
c001c0ae:	c3                   	ret    

c001c0af <sysCallSpawn(regs*)>:
c001c0af:	56                   	push   esi
c001c0b0:	53                   	push   ebx
c001c0b1:	53                   	push   ebx
c001c0b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0b6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c0b9:	85 f6                	test   esi,esi
c001c0bb:	75 08                	jne    c001c0c5 <sysCallSpawn(regs*)+0x16>
c001c0bd:	59                   	pop    ecx
c001c0be:	31 c0                	xor    eax,eax
c001c0c0:	31 d2                	xor    edx,edx
c001c0c2:	5b                   	pop    ebx
c001c0c3:	5e                   	pop    esi
c001c0c4:	c3                   	ret    
c001c0c5:	83 ec 0c             	sub    esp,0xc
c001c0c8:	68 3f 07 00 00       	push   0x73f
c001c0cd:	e8 6e 37 ff ff       	call   c000f840 <malloc>
c001c0d2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c0d5:	89 c6                	mov    esi,eax
c001c0d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0dc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0e2:	56                   	push   esi
c001c0e3:	e8 2a 1a 00 00       	call   c001db12 <Process::Process(char const*, Process*, char**)>
c001c0e8:	83 c4 20             	add    esp,0x20
c001c0eb:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c0f2:	75 c9                	jne    c001c0bd <sysCallSpawn(regs*)+0xe>
c001c0f4:	83 ec 0c             	sub    esp,0xc
c001c0f7:	56                   	push   esi
c001c0f8:	e8 db 1f 00 00       	call   c001e0d8 <Process::createUserThread()>
c001c0fd:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0ff:	83 c4 10             	add    esp,0x10
c001c102:	99                   	cdq    
c001c103:	59                   	pop    ecx
c001c104:	5b                   	pop    ebx
c001c105:	5e                   	pop    esi
c001c106:	c3                   	ret    

c001c107 <sysCallGetEnv(regs*)>:
c001c107:	55                   	push   ebp
c001c108:	57                   	push   edi
c001c109:	56                   	push   esi
c001c10a:	53                   	push   ebx
c001c10b:	83 ec 28             	sub    esp,0x28
c001c10e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c112:	68 2f c0 02 c0       	push   0xc002c02f
c001c117:	e8 1a 6f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c11c:	5f                   	pop    edi
c001c11d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c120:	5d                   	pop    ebp
c001c121:	53                   	push   ebx
c001c122:	68 5e c3 02 c0       	push   0xc002c35e
c001c127:	e8 0a 6f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c12c:	58                   	pop    eax
c001c12d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c130:	5a                   	pop    edx
c001c131:	57                   	push   edi
c001c132:	68 38 c0 02 c0       	push   0xc002c038
c001c137:	e8 fa 6e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c13c:	59                   	pop    ecx
c001c13d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c142:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c145:	e8 b9 e4 ff ff       	call   c001a603 <Krnl::getProcessTotalEnvCount(Process*)>
c001c14a:	5a                   	pop    edx
c001c14b:	89 c5                	mov    ebp,eax
c001c14d:	59                   	pop    ecx
c001c14e:	50                   	push   eax
c001c14f:	68 42 c0 02 c0       	push   0xc002c042
c001c154:	e8 dd 6e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c159:	83 c4 10             	add    esp,0x10
c001c15c:	39 ef                	cmp    edi,ebp
c001c15e:	7c 15                	jl     c001c175 <sysCallGetEnv(regs*)+0x6e>
c001c160:	85 db                	test   ebx,ebx
c001c162:	75 0c                	jne    c001c170 <sysCallGetEnv(regs*)+0x69>
c001c164:	83 c4 1c             	add    esp,0x1c
c001c167:	31 c0                	xor    eax,eax
c001c169:	5b                   	pop    ebx
c001c16a:	31 d2                	xor    edx,edx
c001c16c:	5e                   	pop    esi
c001c16d:	5f                   	pop    edi
c001c16e:	5d                   	pop    ebp
c001c16f:	c3                   	ret    
c001c170:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c173:	eb ef                	jmp    c001c164 <sysCallGetEnv(regs*)+0x5d>
c001c175:	83 ec 0c             	sub    esp,0xc
c001c178:	68 4e c0 02 c0       	push   0xc002c04e
c001c17d:	e8 b4 6e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c182:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c186:	83 c4 0c             	add    esp,0xc
c001c189:	57                   	push   edi
c001c18a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c190:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c193:	50                   	push   eax
c001c194:	e8 8a e4 ff ff       	call   c001a623 <Krnl::getProcessEnvPair(Process*, int)>
c001c199:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c19d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1a1:	68 dd c3 02 c0       	push   0xc002c3dd
c001c1a6:	e8 8b 6e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c1ab:	83 c4 10             	add    esp,0x10
c001c1ae:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c1b1:	85 f6                	test   esi,esi
c001c1b3:	75 47                	jne    c001c1fc <sysCallGetEnv(regs*)+0xf5>
c001c1b5:	83 ec 0c             	sub    esp,0xc
c001c1b8:	55                   	push   ebp
c001c1b9:	e8 d6 45 fe ff       	call   c0000794 <strlen>
c001c1be:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1c1:	89 c3                	mov    ebx,eax
c001c1c3:	e8 cc 45 fe ff       	call   c0000794 <strlen>
c001c1c8:	5a                   	pop    edx
c001c1c9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1cd:	59                   	pop    ecx
c001c1ce:	50                   	push   eax
c001c1cf:	68 51 c0 02 c0       	push   0xc002c051
c001c1d4:	e8 5d 6e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c1d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1dc:	e8 b3 45 fe ff       	call   c0000794 <strlen>
c001c1e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1e4:	89 c3                	mov    ebx,eax
c001c1e6:	e8 a9 45 fe ff       	call   c0000794 <strlen>
c001c1eb:	83 c4 10             	add    esp,0x10
c001c1ee:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1f2:	83 c4 1c             	add    esp,0x1c
c001c1f5:	31 d2                	xor    edx,edx
c001c1f7:	5b                   	pop    ebx
c001c1f8:	5e                   	pop    esi
c001c1f9:	5f                   	pop    edi
c001c1fa:	5d                   	pop    ebp
c001c1fb:	c3                   	ret    
c001c1fc:	83 ec 0c             	sub    esp,0xc
c001c1ff:	68 f7 c3 02 c0       	push   0xc002c3f7
c001c204:	e8 2d 6e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c209:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c20c:	58                   	pop    eax
c001c20d:	5a                   	pop    edx
c001c20e:	55                   	push   ebp
c001c20f:	53                   	push   ebx
c001c210:	e8 1f 46 fe ff       	call   c0000834 <strcpy>
c001c215:	59                   	pop    ecx
c001c216:	5e                   	pop    esi
c001c217:	68 5b c0 02 c0       	push   0xc002c05b
c001c21c:	53                   	push   ebx
c001c21d:	e8 52 47 fe ff       	call   c0000974 <strcat>
c001c222:	5d                   	pop    ebp
c001c223:	58                   	pop    eax
c001c224:	57                   	push   edi
c001c225:	53                   	push   ebx
c001c226:	e8 49 47 fe ff       	call   c0000974 <strcat>
c001c22b:	c7 04 24 11 c4 02 c0 	mov    DWORD PTR [esp],0xc002c411
c001c232:	e8 ff 6d ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c237:	83 c4 10             	add    esp,0x10
c001c23a:	e9 25 ff ff ff       	jmp    c001c164 <sysCallGetEnv(regs*)+0x5d>

c001c23f <sysAppSettings(regs*)>:
c001c23f:	53                   	push   ebx
c001c240:	83 ec 08             	sub    esp,0x8
c001c243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c247:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c24a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c250:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c255:	66 3d c0 09          	cmp    ax,0x9c0
c001c259:	75 2f                	jne    c001c28a <sysAppSettings(regs*)+0x4b>
c001c25b:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c261:	83 e0 1f             	and    eax,0x1f
c001c264:	3c 01                	cmp    al,0x1
c001c266:	74 2e                	je     c001c296 <sysAppSettings(regs*)+0x57>
c001c268:	3c 07                	cmp    al,0x7
c001c26a:	0f 84 bd 00 00 00    	je     c001c32d <sysAppSettings(regs*)+0xee>
c001c270:	84 c0                	test   al,al
c001c272:	0f 84 dc 00 00 00    	je     c001c354 <sysAppSettings(regs*)+0x115>
c001c278:	3c 08                	cmp    al,0x8
c001c27a:	74 6d                	je     c001c2e9 <sysAppSettings(regs*)+0xaa>
c001c27c:	0f b6 c0             	movzx  eax,al
c001c27f:	83 c4 08             	add    esp,0x8
c001c282:	05 e8 03 00 00       	add    eax,0x3e8
c001c287:	5b                   	pop    ebx
c001c288:	99                   	cdq    
c001c289:	c3                   	ret    
c001c28a:	b8 01 00 00 00       	mov    eax,0x1
c001c28f:	31 d2                	xor    edx,edx
c001c291:	83 c4 08             	add    esp,0x8
c001c294:	5b                   	pop    ebx
c001c295:	c3                   	ret    
c001c296:	51                   	push   ecx
c001c297:	68 00 01 00 00       	push   0x100
c001c29c:	6a 00                	push   0x0
c001c29e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a6:	83 c0 0c             	add    eax,0xc
c001c2a9:	50                   	push   eax
c001c2aa:	e8 c9 44 fe ff       	call   c0000778 <memset>
c001c2af:	83 c4 0c             	add    esp,0xc
c001c2b2:	68 ff 00 00 00       	push   0xff
c001c2b7:	53                   	push   ebx
c001c2b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2c0:	83 c0 0c             	add    eax,0xc
c001c2c3:	50                   	push   eax
c001c2c4:	e8 7b 44 fe ff       	call   c0000744 <memcpy>
c001c2c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2ce:	5b                   	pop    ebx
c001c2cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d2:	5a                   	pop    edx
c001c2d3:	8d 50 0c             	lea    edx,[eax+0xc]
c001c2d6:	52                   	push   edx
c001c2d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2dd:	e8 26 49 ff ff       	call   c0010c08 <VgaText::setTitle(char*)>
c001c2e2:	83 c4 10             	add    esp,0x10
c001c2e5:	31 c0                	xor    eax,eax
c001c2e7:	eb a6                	jmp    c001c28f <sysAppSettings(regs*)+0x50>
c001c2e9:	83 ec 08             	sub    esp,0x8
c001c2ec:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2f2:	83 e0 0f             	and    eax,0xf
c001c2f5:	50                   	push   eax
c001c2f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c304:	e8 ef 48 ff ff       	call   c0010bf8 <VgaText::setTitleColour(VgaColour)>
c001c309:	58                   	pop    eax
c001c30a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c310:	5a                   	pop    edx
c001c311:	c1 e8 04             	shr    eax,0x4
c001c314:	83 e0 0f             	and    eax,0xf
c001c317:	50                   	push   eax
c001c318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c31d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c320:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c326:	e8 bd 48 ff ff       	call   c0010be8 <VgaText::setTitleTextColour(VgaColour)>
c001c32b:	eb b5                	jmp    c001c2e2 <sysAppSettings(regs*)+0xa3>
c001c32d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c332:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c335:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c33b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c341:	c0 e8 06             	shr    al,0x6
c001c344:	83 e0 01             	and    eax,0x1
c001c347:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c34d:	31 c0                	xor    eax,eax
c001c34f:	e9 3b ff ff ff       	jmp    c001c28f <sysAppSettings(regs*)+0x50>
c001c354:	b8 02 00 00 00       	mov    eax,0x2
c001c359:	e9 31 ff ff ff       	jmp    c001c28f <sysAppSettings(regs*)+0x50>

c001c35e <sysSetFatAttrib(regs*)>:
c001c35e:	57                   	push   edi
c001c35f:	56                   	push   esi
c001c360:	53                   	push   ebx
c001c361:	83 ec 1c             	sub    esp,0x1c
c001c364:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c368:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c36b:	68 14 01 00 00       	push   0x114
c001c370:	e8 cb 34 ff ff       	call   c000f840 <malloc>
c001c375:	83 c4 0c             	add    esp,0xc
c001c378:	89 c3                	mov    ebx,eax
c001c37a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c37f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c382:	57                   	push   edi
c001c383:	53                   	push   ebx
c001c384:	e8 05 72 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001c389:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c38c:	83 c4 0c             	add    esp,0xc
c001c38f:	0f b6 d4             	movzx  edx,ah
c001c392:	0f b6 c0             	movzx  eax,al
c001c395:	52                   	push   edx
c001c396:	50                   	push   eax
c001c397:	53                   	push   ebx
c001c398:	e8 67 74 ff ff       	call   c0013804 <File::chfatattr(unsigned char, unsigned char)>
c001c39d:	83 c4 10             	add    esp,0x10
c001c3a0:	85 db                	test   ebx,ebx
c001c3a2:	74 14                	je     c001c3b8 <sysSetFatAttrib(regs*)+0x5a>
c001c3a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3aa:	83 ec 0c             	sub    esp,0xc
c001c3ad:	53                   	push   ebx
c001c3ae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c3b1:	83 c4 10             	add    esp,0x10
c001c3b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3b8:	85 c0                	test   eax,eax
c001c3ba:	0f 95 c0             	setne  al
c001c3bd:	31 d2                	xor    edx,edx
c001c3bf:	0f b6 c0             	movzx  eax,al
c001c3c2:	f7 d8                	neg    eax
c001c3c4:	83 d2 00             	adc    edx,0x0
c001c3c7:	83 c4 10             	add    esp,0x10
c001c3ca:	f7 da                	neg    edx
c001c3cc:	5b                   	pop    ebx
c001c3cd:	5e                   	pop    esi
c001c3ce:	5f                   	pop    edi
c001c3cf:	c3                   	ret    

c001c3d0 <sysPipe(regs*)>:
c001c3d0:	57                   	push   edi
c001c3d1:	56                   	push   esi
c001c3d2:	53                   	push   ebx
c001c3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d7:	83 ec 0c             	sub    esp,0xc
c001c3da:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c3dd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c3e0:	6a 20                	push   0x20
c001c3e2:	e8 59 34 ff ff       	call   c000f840 <malloc>
c001c3e7:	89 c3                	mov    ebx,eax
c001c3e9:	58                   	pop    eax
c001c3ea:	5a                   	pop    edx
c001c3eb:	68 00 50 00 00       	push   0x5000
c001c3f0:	53                   	push   ebx
c001c3f1:	e8 42 41 ff ff       	call   c0010538 <Pipe::Pipe(int)>
c001c3f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3f9:	e8 9a 53 ff ff       	call   c0011798 <UnixFile::getFileDescriptor()>
c001c3fe:	89 07                	mov    DWORD PTR [edi],eax
c001c400:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c403:	e8 90 53 ff ff       	call   c0011798 <UnixFile::getFileDescriptor()>
c001c408:	83 c4 10             	add    esp,0x10
c001c40b:	89 06                	mov    DWORD PTR [esi],eax
c001c40d:	31 d2                	xor    edx,edx
c001c40f:	5b                   	pop    ebx
c001c410:	31 c0                	xor    eax,eax
c001c412:	5e                   	pop    esi
c001c413:	5f                   	pop    edi
c001c414:	c3                   	ret    

c001c415 <sysGetUnixTime(regs*)>:
c001c415:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001c41a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c420:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c424:	e9 4f 7b ff ff       	jmp    c0013f78 <Clock::timeInSecondsLocal()>

c001c429 <string_ends_with(char const*, char const*)>:
c001c429:	57                   	push   edi
c001c42a:	56                   	push   esi
c001c42b:	53                   	push   ebx
c001c42c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c430:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c434:	83 ec 0c             	sub    esp,0xc
c001c437:	53                   	push   ebx
c001c438:	e8 57 43 fe ff       	call   c0000794 <strlen>
c001c43d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c440:	89 c6                	mov    esi,eax
c001c442:	e8 4d 43 fe ff       	call   c0000794 <strlen>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	39 c6                	cmp    esi,eax
c001c44c:	7d 06                	jge    c001c454 <string_ends_with(char const*, char const*)+0x2b>
c001c44e:	5b                   	pop    ebx
c001c44f:	31 c0                	xor    eax,eax
c001c451:	5e                   	pop    esi
c001c452:	5f                   	pop    edi
c001c453:	c3                   	ret    
c001c454:	83 ec 08             	sub    esp,0x8
c001c457:	29 c6                	sub    esi,eax
c001c459:	57                   	push   edi
c001c45a:	01 f3                	add    ebx,esi
c001c45c:	53                   	push   ebx
c001c45d:	e8 5e 44 fe ff       	call   c00008c0 <strcmp>
c001c462:	83 c4 10             	add    esp,0x10
c001c465:	85 c0                	test   eax,eax
c001c467:	5b                   	pop    ebx
c001c468:	0f 94 c0             	sete   al
c001c46b:	5e                   	pop    esi
c001c46c:	0f b6 c0             	movzx  eax,al
c001c46f:	5f                   	pop    edi
c001c470:	c3                   	ret    

c001c471 <sysCallOpen(regs*)>:
c001c471:	56                   	push   esi
c001c472:	53                   	push   ebx
c001c473:	81 ec 04 01 00 00    	sub    esp,0x104
c001c479:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c480:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c483:	85 c9                	test   ecx,ecx
c001c485:	0f 84 b3 00 00 00    	je     c001c53e <sysCallOpen(regs*)+0xcd>
c001c48b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c48e:	85 c0                	test   eax,eax
c001c490:	0f 84 a8 00 00 00    	je     c001c53e <sysCallOpen(regs*)+0xcd>
c001c496:	52                   	push   edx
c001c497:	68 5d c0 02 c0       	push   0xc002c05d
c001c49c:	50                   	push   eax
c001c49d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c4a1:	56                   	push   esi
c001c4a2:	e8 3d 6f ff ff       	call   c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c4a7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4aa:	e8 e5 42 fe ff       	call   c0000794 <strlen>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	48                   	dec    eax
c001c4b3:	74 1d                	je     c001c4d2 <sysCallOpen(regs*)+0x61>
c001c4b5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c4b8:	eb 0f                	jmp    c001c4c9 <sysCallOpen(regs*)+0x58>
c001c4ba:	80 fa 3a             	cmp    dl,0x3a
c001c4bd:	74 0f                	je     c001c4ce <sysCallOpen(regs*)+0x5d>
c001c4bf:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c4c3:	48                   	dec    eax
c001c4c4:	74 0c                	je     c001c4d2 <sysCallOpen(regs*)+0x61>
c001c4c6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c4c9:	80 fa 2e             	cmp    dl,0x2e
c001c4cc:	75 ec                	jne    c001c4ba <sysCallOpen(regs*)+0x49>
c001c4ce:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c4d2:	83 ec 08             	sub    esp,0x8
c001c4d5:	68 61 c0 02 c0       	push   0xc002c061
c001c4da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4dd:	e8 47 ff ff ff       	call   c001c429 <string_ends_with(char const*, char const*)>
c001c4e2:	83 c4 10             	add    esp,0x10
c001c4e5:	85 c0                	test   eax,eax
c001c4e7:	75 17                	jne    c001c500 <sysCallOpen(regs*)+0x8f>
c001c4e9:	83 ec 08             	sub    esp,0x8
c001c4ec:	68 82 c0 02 c0       	push   0xc002c082
c001c4f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4f4:	e8 30 ff ff ff       	call   c001c429 <string_ends_with(char const*, char const*)>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	85 c0                	test   eax,eax
c001c4fe:	74 51                	je     c001c551 <sysCallOpen(regs*)+0xe0>
c001c500:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c503:	83 ec 08             	sub    esp,0x8
c001c506:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c50c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c513:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c516:	ff 30                	push   DWORD PTR [eax]
c001c518:	68 66 c0 02 c0       	push   0xc002c066
c001c51d:	e8 14 6b ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c522:	c7 04 24 75 c0 02 c0 	mov    DWORD PTR [esp],0xc002c075
c001c529:	e8 08 6b ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c52e:	83 c4 10             	add    esp,0x10
c001c531:	81 c4 04 01 00 00    	add    esp,0x104
c001c537:	31 c0                	xor    eax,eax
c001c539:	31 d2                	xor    edx,edx
c001c53b:	5b                   	pop    ebx
c001c53c:	5e                   	pop    esi
c001c53d:	c3                   	ret    
c001c53e:	81 c4 04 01 00 00    	add    esp,0x104
c001c544:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c549:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c54e:	5b                   	pop    ebx
c001c54f:	5e                   	pop    esi
c001c550:	c3                   	ret    
c001c551:	83 ec 08             	sub    esp,0x8
c001c554:	68 62 c0 02 c0       	push   0xc002c062
c001c559:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c55c:	e8 5f 43 fe ff       	call   c00008c0 <strcmp>
c001c561:	83 c4 10             	add    esp,0x10
c001c564:	85 c0                	test   eax,eax
c001c566:	74 98                	je     c001c500 <sysCallOpen(regs*)+0x8f>
c001c568:	83 ec 08             	sub    esp,0x8
c001c56b:	68 61 c0 02 c0       	push   0xc002c061
c001c570:	56                   	push   esi
c001c571:	e8 b3 fe ff ff       	call   c001c429 <string_ends_with(char const*, char const*)>
c001c576:	83 c4 10             	add    esp,0x10
c001c579:	85 c0                	test   eax,eax
c001c57b:	75 83                	jne    c001c500 <sysCallOpen(regs*)+0x8f>
c001c57d:	83 ec 08             	sub    esp,0x8
c001c580:	68 87 c0 02 c0       	push   0xc002c087
c001c585:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c588:	e8 9c fe ff ff       	call   c001c429 <string_ends_with(char const*, char const*)>
c001c58d:	83 c4 10             	add    esp,0x10
c001c590:	85 c0                	test   eax,eax
c001c592:	0f 85 d9 00 00 00    	jne    c001c671 <sysCallOpen(regs*)+0x200>
c001c598:	83 ec 08             	sub    esp,0x8
c001c59b:	68 8c c0 02 c0       	push   0xc002c08c
c001c5a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5a3:	e8 81 fe ff ff       	call   c001c429 <string_ends_with(char const*, char const*)>
c001c5a8:	83 c4 10             	add    esp,0x10
c001c5ab:	85 c0                	test   eax,eax
c001c5ad:	0f 85 be 00 00 00    	jne    c001c671 <sysCallOpen(regs*)+0x200>
c001c5b3:	83 ec 08             	sub    esp,0x8
c001c5b6:	68 88 c0 02 c0       	push   0xc002c088
c001c5bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5be:	e8 fd 42 fe ff       	call   c00008c0 <strcmp>
c001c5c3:	83 c4 10             	add    esp,0x10
c001c5c6:	85 c0                	test   eax,eax
c001c5c8:	0f 84 a3 00 00 00    	je     c001c671 <sysCallOpen(regs*)+0x200>
c001c5ce:	83 ec 08             	sub    esp,0x8
c001c5d1:	68 87 c0 02 c0       	push   0xc002c087
c001c5d6:	56                   	push   esi
c001c5d7:	e8 4d fe ff ff       	call   c001c429 <string_ends_with(char const*, char const*)>
c001c5dc:	83 c4 10             	add    esp,0x10
c001c5df:	85 c0                	test   eax,eax
c001c5e1:	0f 85 8a 00 00 00    	jne    c001c671 <sysCallOpen(regs*)+0x200>
c001c5e7:	83 ec 0c             	sub    esp,0xc
c001c5ea:	68 14 01 00 00       	push   0x114
c001c5ef:	e8 4c 32 ff ff       	call   c000f840 <malloc>
c001c5f4:	83 c4 0c             	add    esp,0xc
c001c5f7:	89 c6                	mov    esi,eax
c001c5f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5fe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c601:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c604:	56                   	push   esi
c001c605:	e8 84 6f ff ff       	call   c001358e <File::File(char const*, Process*)>
c001c60a:	83 c4 10             	add    esp,0x10
c001c60d:	85 f6                	test   esi,esi
c001c60f:	0f 84 29 ff ff ff    	je     c001c53e <sysCallOpen(regs*)+0xcd>
c001c615:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c618:	0f b6 c2             	movzx  eax,dl
c001c61b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c61e:	89 d0                	mov    eax,edx
c001c620:	83 e0 01             	and    eax,0x1
c001c623:	f6 c2 02             	test   dl,0x2
c001c626:	74 03                	je     c001c62b <sysCallOpen(regs*)+0x1ba>
c001c628:	83 c8 02             	or     eax,0x2
c001c62b:	f6 c2 04             	test   dl,0x4
c001c62e:	74 03                	je     c001c633 <sysCallOpen(regs*)+0x1c2>
c001c630:	83 c8 04             	or     eax,0x4
c001c633:	f6 c2 08             	test   dl,0x8
c001c636:	74 03                	je     c001c63b <sysCallOpen(regs*)+0x1ca>
c001c638:	83 c8 0a             	or     eax,0xa
c001c63b:	83 e2 10             	and    edx,0x10
c001c63e:	74 03                	je     c001c643 <sysCallOpen(regs*)+0x1d2>
c001c640:	83 c8 12             	or     eax,0x12
c001c643:	83 ec 08             	sub    esp,0x8
c001c646:	50                   	push   eax
c001c647:	56                   	push   esi
c001c648:	e8 a5 6f ff ff       	call   c00135f2 <File::open(FileOpenMode)>
c001c64d:	83 c4 10             	add    esp,0x10
c001c650:	85 c0                	test   eax,eax
c001c652:	0f 85 e6 fe ff ff    	jne    c001c53e <sysCallOpen(regs*)+0xcd>
c001c658:	83 ec 0c             	sub    esp,0xc
c001c65b:	56                   	push   esi
c001c65c:	e8 37 51 ff ff       	call   c0011798 <UnixFile::getFileDescriptor()>
c001c661:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c664:	89 02                	mov    DWORD PTR [edx],eax
c001c666:	c1 f8 1f             	sar    eax,0x1f
c001c669:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c66c:	e9 bd fe ff ff       	jmp    c001c52e <sysCallOpen(regs*)+0xbd>
c001c671:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c674:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c67a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c681:	e9 ab fe ff ff       	jmp    c001c531 <sysCallOpen(regs*)+0xc0>

c001c686 <Sys::loadSyscalls()>:
c001c686:	c7 05 20 11 03 c0 93 b7 01 c0 	mov    DWORD PTR ds:0xc0031120,0xc001b793
c001c690:	c7 05 24 11 03 c0 7c b3 01 c0 	mov    DWORD PTR ds:0xc0031124,0xc001b37c
c001c69a:	c7 05 28 11 03 c0 e6 b4 01 c0 	mov    DWORD PTR ds:0xc0031128,0xc001b4e6
c001c6a4:	c7 05 2c 11 03 c0 c9 b6 01 c0 	mov    DWORD PTR ds:0xc003112c,0xc001b6c9
c001c6ae:	c7 05 30 11 03 c0 7e b4 01 c0 	mov    DWORD PTR ds:0xc0031130,0xc001b47e
c001c6b8:	c7 05 34 11 03 c0 b3 b3 01 c0 	mov    DWORD PTR ds:0xc0031134,0xc001b3b3
c001c6c2:	c7 05 38 11 03 c0 94 b3 01 c0 	mov    DWORD PTR ds:0xc0031138,0xc001b394
c001c6cc:	c7 05 3c 11 03 c0 3b b5 01 c0 	mov    DWORD PTR ds:0xc003113c,0xc001b53b
c001c6d6:	c7 05 44 11 03 c0 c3 bc 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001bcc3
c001c6e0:	c7 05 40 11 03 c0 71 c4 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001c471
c001c6ea:	c7 05 48 11 03 c0 4b bd 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001bd4b
c001c6f4:	c7 05 4c 11 03 c0 b2 b9 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b9b2
c001c6fe:	c7 05 50 11 03 c0 ce b7 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001b7ce
c001c708:	c7 05 54 11 03 c0 d3 b7 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b7d3
c001c712:	c7 05 58 11 03 c0 26 be 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001be26
c001c71c:	c7 05 5c 11 03 c0 c0 bd 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001bdc0
c001c726:	c7 05 60 11 03 c0 9a ba 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001ba9a
c001c730:	c7 05 64 11 03 c0 03 bb 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001bb03
c001c73a:	c7 05 68 11 03 c0 80 bb 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001bb80
c001c744:	c7 05 6c 11 03 c0 d8 b7 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b7d8
c001c74e:	c7 05 70 11 03 c0 96 be 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001be96
c001c758:	c7 05 74 11 03 c0 b0 be 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001beb0
c001c762:	c7 05 78 11 03 c0 b0 be 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001beb0
c001c76c:	c7 05 7c 11 03 c0 f1 be 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001bef1
c001c776:	c7 05 80 11 03 c0 55 bf 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001bf55
c001c780:	c7 05 84 11 03 c0 84 b9 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001b984
c001c78a:	c7 05 88 11 03 c0 b9 bf 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001bfb9
c001c794:	c7 05 8c 11 03 c0 41 b9 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b941
c001c79e:	c7 05 90 11 03 c0 05 c0 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001c005
c001c7a8:	c7 05 94 11 03 c0 40 ba 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001ba40
c001c7b2:	c7 05 98 11 03 c0 88 c0 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001c088
c001c7bc:	c7 05 9c 11 03 c0 03 bc 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001bc03
c001c7c6:	c7 05 a0 11 03 c0 af c0 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001c0af
c001c7d0:	c7 05 a4 11 03 c0 07 c1 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001c107
c001c7da:	c7 05 a8 11 03 c0 3f c2 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001c23f
c001c7e4:	c7 05 ac 11 03 c0 e2 b7 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b7e2
c001c7ee:	c7 05 b0 11 03 c0 4c b8 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001b84c
c001c7f8:	c7 05 b4 11 03 c0 92 b8 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b892
c001c802:	c7 05 b8 11 03 c0 5e c3 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001c35e
c001c80c:	c7 05 bc 11 03 c0 cb be 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001becb
c001c816:	c7 05 c0 11 03 c0 e3 b8 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001b8e3
c001c820:	c7 05 c4 11 03 c0 d0 c3 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001c3d0
c001c82a:	c7 05 c8 11 03 c0 15 c4 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001c415
c001c834:	c7 05 cc 11 03 c0 d6 b3 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b3d6
c001c83e:	c7 05 d0 11 03 c0 57 b5 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001b557
c001c848:	c7 05 d4 11 03 c0 7f b6 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b67f
c001c852:	c7 05 d8 11 03 c0 46 b3 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001b346
c001c85c:	c7 05 dc 11 03 c0 31 b7 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001b731
c001c866:	c7 05 e0 11 03 c0 bf b3 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001b3bf
c001c870:	c3                   	ret    

c001c871 <Sys::systemCall(regs*, void*)>:
c001c871:	53                   	push   ebx
c001c872:	83 ec 08             	sub    esp,0x8
c001c875:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c879:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c87c:	83 f8 7f             	cmp    eax,0x7f
c001c87f:	77 16                	ja     c001c897 <Sys::systemCall(regs*, void*)+0x26>
c001c881:	8b 14 85 20 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceee0]
c001c888:	85 d2                	test   edx,edx
c001c88a:	74 0b                	je     c001c897 <Sys::systemCall(regs*, void*)+0x26>
c001c88c:	83 ec 0c             	sub    esp,0xc
c001c88f:	53                   	push   ebx
c001c890:	ff d2                	call   edx
c001c892:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c895:	eb 0d                	jmp    c001c8a4 <Sys::systemCall(regs*, void*)+0x33>
c001c897:	52                   	push   edx
c001c898:	52                   	push   edx
c001c899:	50                   	push   eax
c001c89a:	68 91 c0 02 c0       	push   0xc002c091
c001c89f:	e8 92 67 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c8a4:	83 c4 10             	add    esp,0x10
c001c8a7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c8ac:	31 d2                	xor    edx,edx
c001c8ae:	83 c4 08             	add    esp,0x8
c001c8b1:	5b                   	pop    ebx
c001c8b2:	c3                   	ret    

c001c8b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c8b3:	55                   	push   ebp
c001c8b4:	57                   	push   edi
c001c8b5:	56                   	push   esi
c001c8b6:	53                   	push   ebx
c001c8b7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c8bd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8c4:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c8cb:	85 c0                	test   eax,eax
c001c8cd:	0f 95 c1             	setne  cl
c001c8d0:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c8d8:	0f 94 c2             	sete   dl
c001c8db:	84 d1                	test   cl,dl
c001c8dd:	74 23                	je     c001c902 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8df:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c8e5:	74 1b                	je     c001c902 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8e7:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8ed:	89 da                	mov    edx,ebx
c001c8ef:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c8f5:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c8fb:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c902:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c909:	05 ff 0f 00 00       	add    eax,0xfff
c001c90e:	83 ec 0c             	sub    esp,0xc
c001c911:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c915:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c91b:	c1 e8 0c             	shr    eax,0xc
c001c91e:	89 ef                	mov    edi,ebp
c001c920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c924:	c1 ef 0c             	shr    edi,0xc
c001c927:	6a 01                	push   0x1
c001c929:	e8 b5 52 ff ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c001c92e:	89 c6                	mov    esi,eax
c001c930:	58                   	pop    eax
c001c931:	5a                   	pop    edx
c001c932:	57                   	push   edi
c001c933:	68 17 c1 02 c0       	push   0xc002c117
c001c938:	e8 f9 66 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c93d:	59                   	pop    ecx
c001c93e:	58                   	pop    eax
c001c93f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c943:	68 29 c1 02 c0       	push   0xc002c129
c001c948:	e8 e9 66 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c94d:	83 c4 10             	add    esp,0x10
c001c950:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c956:	0f 86 24 01 00 00    	jbe    c001ca80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c95c:	c1 e7 0c             	shl    edi,0xc
c001c95f:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c962:	89 df                	mov    edi,ebx
c001c964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c968:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c96f:	01 dd                	add    ebp,ebx
c001c971:	29 fd                	sub    ebp,edi
c001c973:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c977:	0f 84 01 01 00 00    	je     c001ca7e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c97d:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c983:	76 05                	jbe    c001c98a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c985:	bd 00 10 00 00       	mov    ebp,0x1000
c001c98a:	83 ec 0c             	sub    esp,0xc
c001c98d:	31 d2                	xor    edx,edx
c001c98f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c996:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c998:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c99c:	50                   	push   eax
c001c99d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c9a1:	50                   	push   eax
c001c9a2:	52                   	push   edx
c001c9a3:	55                   	push   ebp
c001c9a4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c9ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9ae:	83 c4 20             	add    esp,0x20
c001c9b1:	85 c0                	test   eax,eax
c001c9b3:	74 0a                	je     c001c9bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c9b5:	53                   	push   ebx
c001c9b6:	53                   	push   ebx
c001c9b7:	50                   	push   eax
c001c9b8:	68 3b c1 02 c0       	push   0xc002c13b
c001c9bd:	eb 0f                	jmp    c001c9ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c9bf:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c9c3:	74 20                	je     c001c9e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c9c5:	51                   	push   ecx
c001c9c6:	51                   	push   ecx
c001c9c7:	6a 00                	push   0x0
c001c9c9:	68 66 c1 02 c0       	push   0xc002c166
c001c9ce:	e8 63 66 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001c9d3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9d6:	e8 78 56 ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	31 c0                	xor    eax,eax
c001c9e0:	e9 55 01 00 00       	jmp    c001cb3a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c9e5:	e8 d8 14 00 00       	call   c001dec2 <lockScheduler()>
c001c9ea:	e8 12 35 ff ff       	call   c000ff01 <Phys::allocatePage()>
c001c9ef:	6a 07                	push   0x7
c001c9f1:	89 c5                	mov    ebp,eax
c001c9f3:	56                   	push   esi
c001c9f4:	50                   	push   eax
c001c9f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9fd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca03:	e8 b2 59 ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca08:	83 c4 0c             	add    esp,0xc
c001ca0b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca12:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca18:	6a 00                	push   0x0
c001ca1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca22:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca28:	e8 f7 57 ff ff       	call   c0012224 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca2d:	58                   	pop    eax
c001ca2e:	5a                   	pop    edx
c001ca2f:	68 07 0c 00 00       	push   0xc07
c001ca34:	57                   	push   edi
c001ca35:	81 c7 00 10 00 00    	add    edi,0x1000
c001ca3b:	55                   	push   ebp
c001ca3c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca43:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca49:	6a 00                	push   0x0
c001ca4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca53:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca59:	e8 16 5d ff ff       	call   c0012774 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca5e:	83 c4 1c             	add    esp,0x1c
c001ca61:	68 00 10 00 00       	push   0x1000
c001ca66:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca6a:	50                   	push   eax
c001ca6b:	56                   	push   esi
c001ca6c:	e8 d3 3c fe ff       	call   c0000744 <memcpy>
c001ca71:	e8 4e 14 00 00       	call   c001dec4 <unlockScheduler()>
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	e9 ea fe ff ff       	jmp    c001c968 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca7e:	89 fb                	mov    ebx,edi
c001ca80:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca88:	0f 86 9e 00 00 00    	jbe    c001cb2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca8e:	e8 2f 14 00 00       	call   c001dec2 <lockScheduler()>
c001ca93:	51                   	push   ecx
c001ca94:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca9b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caa1:	6a 00                	push   0x0
c001caa3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caab:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cab1:	e8 6e 57 ff ff       	call   c0012224 <VAS::mapOtherVASIn(bool, VAS*)>
c001cab6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001caba:	c1 e7 0c             	shl    edi,0xc
c001cabd:	01 df                	add    edi,ebx
c001cabf:	83 c4 10             	add    esp,0x10
c001cac2:	39 fb                	cmp    ebx,edi
c001cac4:	74 61                	je     c001cb27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001cac6:	e8 36 34 ff ff       	call   c000ff01 <Phys::allocatePage()>
c001cacb:	6a 07                	push   0x7
c001cacd:	89 c5                	mov    ebp,eax
c001cacf:	56                   	push   esi
c001cad0:	50                   	push   eax
c001cad1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cad6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cad9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cadf:	e8 d6 58 ff ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c001cae4:	58                   	pop    eax
c001cae5:	5a                   	pop    edx
c001cae6:	68 07 0c 00 00       	push   0xc07
c001caeb:	53                   	push   ebx
c001caec:	81 c3 00 10 00 00    	add    ebx,0x1000
c001caf2:	55                   	push   ebp
c001caf3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cafa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb00:	6a 00                	push   0x0
c001cb02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cb0a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb10:	e8 5f 5c ff ff       	call   c0012774 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cb15:	83 c4 1c             	add    esp,0x1c
c001cb18:	68 00 10 00 00       	push   0x1000
c001cb1d:	6a 00                	push   0x0
c001cb1f:	56                   	push   esi
c001cb20:	e8 53 3c fe ff       	call   c0000778 <memset>
c001cb25:	eb 98                	jmp    c001cabf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cb27:	e8 98 13 00 00       	call   c001dec4 <unlockScheduler()>
c001cb2c:	83 ec 0c             	sub    esp,0xc
c001cb2f:	56                   	push   esi
c001cb30:	e8 1e 55 ff ff       	call   c0012053 <Virt::freeKernelVirtualPages(unsigned long)>
c001cb35:	83 c4 10             	add    esp,0x10
c001cb38:	b0 01                	mov    al,0x1
c001cb3a:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cb40:	5b                   	pop    ebx
c001cb41:	5e                   	pop    esi
c001cb42:	5f                   	pop    edi
c001cb43:	5d                   	pop    ebp
c001cb44:	c3                   	ret    

c001cb45 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cb45:	55                   	push   ebp
c001cb46:	57                   	push   edi
c001cb47:	56                   	push   esi
c001cb48:	53                   	push   ebx
c001cb49:	83 ec 48             	sub    esp,0x48
c001cb4c:	68 14 01 00 00       	push   0x114
c001cb51:	e8 ea 2c ff ff       	call   c000f840 <malloc>
c001cb56:	83 c4 0c             	add    esp,0xc
c001cb59:	89 c6                	mov    esi,eax
c001cb5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb5f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb63:	50                   	push   eax
c001cb64:	e8 25 6a ff ff       	call   c001358e <File::File(char const*, Process*)>
c001cb69:	58                   	pop    eax
c001cb6a:	5a                   	pop    edx
c001cb6b:	6a 01                	push   0x1
c001cb6d:	56                   	push   esi
c001cb6e:	e8 7f 6a ff ff       	call   c00135f2 <File::open(FileOpenMode)>
c001cb73:	83 c4 10             	add    esp,0x10
c001cb76:	85 c0                	test   eax,eax
c001cb78:	0f 85 47 01 00 00    	jne    c001ccc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb7e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb86:	83 ec 0c             	sub    esp,0xc
c001cb89:	6a 34                	push   0x34
c001cb8b:	e8 b0 2c ff ff       	call   c000f840 <malloc>
c001cb90:	89 c3                	mov    ebx,eax
c001cb92:	58                   	pop    eax
c001cb93:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb95:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb99:	57                   	push   edi
c001cb9a:	53                   	push   ebx
c001cb9b:	6a 00                	push   0x0
c001cb9d:	6a 34                	push   0x34
c001cb9f:	56                   	push   esi
c001cba0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cba3:	83 c4 20             	add    esp,0x20
c001cba6:	85 c0                	test   eax,eax
c001cba8:	0f 85 17 01 00 00    	jne    c001ccc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbae:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cbb4:	0f 85 0b 01 00 00    	jne    c001ccc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cbbd:	85 c0                	test   eax,eax
c001cbbf:	0f 84 00 01 00 00    	je     c001ccc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbc5:	31 d2                	xor    edx,edx
c001cbc7:	55                   	push   ebp
c001cbc8:	52                   	push   edx
c001cbc9:	50                   	push   eax
c001cbca:	56                   	push   esi
c001cbcb:	e8 e0 6a ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001cbd0:	83 c4 10             	add    esp,0x10
c001cbd3:	85 c0                	test   eax,eax
c001cbd5:	0f 85 ea 00 00 00    	jne    c001ccc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbdb:	83 ec 0c             	sub    esp,0xc
c001cbde:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cbe1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbe5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbe9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbed:	0f af c2             	imul   eax,edx
c001cbf0:	50                   	push   eax
c001cbf1:	e8 4a 2c ff ff       	call   c000f840 <malloc>
c001cbf6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbf8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbfc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc03:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cc07:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cc0b:	0f af c2             	imul   eax,edx
c001cc0e:	99                   	cdq    
c001cc0f:	52                   	push   edx
c001cc10:	50                   	push   eax
c001cc11:	56                   	push   esi
c001cc12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc15:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cc18:	83 c4 20             	add    esp,0x20
c001cc1b:	85 c0                	test   eax,eax
c001cc1d:	0f 84 a2 00 00 00    	je     c001ccc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc23:	31 d2                	xor    edx,edx
c001cc25:	51                   	push   ecx
c001cc26:	52                   	push   edx
c001cc27:	50                   	push   eax
c001cc28:	56                   	push   esi
c001cc29:	e8 82 6a ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001cc2e:	83 c4 10             	add    esp,0x10
c001cc31:	85 c0                	test   eax,eax
c001cc33:	0f 85 8c 00 00 00    	jne    c001ccc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc39:	83 ec 0c             	sub    esp,0xc
c001cc3c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc40:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc44:	31 ed                	xor    ebp,ebp
c001cc46:	0f af c2             	imul   eax,edx
c001cc49:	50                   	push   eax
c001cc4a:	e8 f1 2b ff ff       	call   c000f840 <malloc>
c001cc4f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc55:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc60:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc64:	0f af c2             	imul   eax,edx
c001cc67:	99                   	cdq    
c001cc68:	52                   	push   edx
c001cc69:	50                   	push   eax
c001cc6a:	56                   	push   esi
c001cc6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc6e:	83 c4 20             	add    esp,0x20
c001cc71:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc79:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc7d:	0f 86 80 00 00 00    	jbe    c001cd03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc83:	0f b7 fd             	movzx  edi,bp
c001cc86:	c1 e7 05             	shl    edi,0x5
c001cc89:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc8d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc90:	75 6b                	jne    c001ccfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc92:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc99:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cca0:	52                   	push   edx
c001cca1:	31 d2                	xor    edx,edx
c001cca3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cca6:	52                   	push   edx
c001cca7:	50                   	push   eax
c001cca8:	56                   	push   esi
c001cca9:	e8 02 6a ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001ccae:	83 c4 10             	add    esp,0x10
c001ccb1:	85 c0                	test   eax,eax
c001ccb3:	74 17                	je     c001cccc <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	68 92 c1 02 c0       	push   0xc002c192
c001ccbd:	e8 74 63 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	31 c0                	xor    eax,eax
c001ccc7:	e9 87 00 00 00       	jmp    c001cd53 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cccc:	83 ec 0c             	sub    esp,0xc
c001cccf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ccd2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ccd5:	50                   	push   eax
c001ccd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ccda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccde:	56                   	push   esi
c001ccdf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cce3:	e8 cb fb ff ff       	call   c001c8b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cce8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccec:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ccf0:	83 c4 20             	add    esp,0x20
c001ccf3:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ccf7:	73 04                	jae    c001ccfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ccf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccfd:	45                   	inc    ebp
c001ccfe:	e9 76 ff ff ff       	jmp    c001cc79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cd03:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd0f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cd15:	83 ec 0c             	sub    esp,0xc
c001cd18:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cd1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cd23:	05 00 10 00 00       	add    eax,0x1000
c001cd28:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd2f:	e8 1c 2b ff ff       	call   c000f850 <free>
c001cd34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd37:	e8 14 2b ff ff       	call   c000f850 <free>
c001cd3c:	58                   	pop    eax
c001cd3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd41:	e8 0a 2b ff ff       	call   c000f850 <free>
c001cd46:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd49:	e8 02 69 ff ff       	call   c0013650 <File::close()>
c001cd4e:	83 c4 10             	add    esp,0x10
c001cd51:	b0 01                	mov    al,0x1
c001cd53:	83 c4 3c             	add    esp,0x3c
c001cd56:	5b                   	pop    ebx
c001cd57:	5e                   	pop    esi
c001cd58:	5f                   	pop    edi
c001cd59:	5d                   	pop    ebp
c001cd5a:	c3                   	ret    

c001cd5b <Thr::runtimeReferenceHelper()>:
c001cd5b:	83 ec 18             	sub    esp,0x18
c001cd5e:	68 9a c1 02 c0       	push   0xc002c19a
c001cd63:	e8 ce 62 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001cd68:	fa                   	cli    
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	eb fe                	jmp    c001cd6c <Thr::runtimeReferenceHelper()+0x11>

c001cd6e <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd6e:	57                   	push   edi
c001cd6f:	56                   	push   esi
c001cd70:	53                   	push   ebx
c001cd71:	31 db                	xor    ebx,ebx
c001cd73:	39 1d c0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ac0,ebx
c001cd79:	7e 3c                	jle    c001cdb7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd7b:	8b 34 9d 40 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce5c0]
c001cd82:	31 ff                	xor    edi,edi
c001cd84:	39 3c 9d 40 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce6c0],edi
c001cd8b:	7e 27                	jle    c001cdb4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd8d:	50                   	push   eax
c001cd8e:	50                   	push   eax
c001cd8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd93:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd95:	03 04 9d c0 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce640]
c001cd9c:	50                   	push   eax
c001cd9d:	e8 1e 3b fe ff       	call   c00008c0 <strcmp>
c001cda2:	83 c4 10             	add    esp,0x10
c001cda5:	85 c0                	test   eax,eax
c001cda7:	75 05                	jne    c001cdae <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cda9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cdac:	eb 0b                	jmp    c001cdb9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cdae:	83 c6 10             	add    esi,0x10
c001cdb1:	47                   	inc    edi
c001cdb2:	eb d0                	jmp    c001cd84 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cdb4:	43                   	inc    ebx
c001cdb5:	eb bc                	jmp    c001cd73 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cdb7:	31 c0                	xor    eax,eax
c001cdb9:	5b                   	pop    ebx
c001cdba:	5e                   	pop    esi
c001cdbb:	5f                   	pop    edi
c001cdbc:	c3                   	ret    

c001cdbd <Thr::loadKernelSymbolTable(char const*)>:
c001cdbd:	55                   	push   ebp
c001cdbe:	57                   	push   edi
c001cdbf:	56                   	push   esi
c001cdc0:	53                   	push   ebx
c001cdc1:	83 ec 68             	sub    esp,0x68
c001cdc4:	8b 35 14 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b14
c001cdca:	68 14 01 00 00       	push   0x114
c001cdcf:	e8 6c 2a ff ff       	call   c000f840 <malloc>
c001cdd4:	83 c4 0c             	add    esp,0xc
c001cdd7:	89 c3                	mov    ebx,eax
c001cdd9:	56                   	push   esi
c001cdda:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cdde:	50                   	push   eax
c001cddf:	e8 aa 67 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001cde4:	5e                   	pop    esi
c001cde5:	5f                   	pop    edi
c001cde6:	6a 01                	push   0x1
c001cde8:	53                   	push   ebx
c001cde9:	e8 04 68 ff ff       	call   c00135f2 <File::open(FileOpenMode)>
c001cdee:	83 c4 10             	add    esp,0x10
c001cdf1:	85 c0                	test   eax,eax
c001cdf3:	74 0a                	je     c001cdff <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cdf5:	83 ec 0c             	sub    esp,0xc
c001cdf8:	68 bc c1 02 c0       	push   0xc002c1bc
c001cdfd:	eb 34                	jmp    c001ce33 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cdff:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ce07:	83 ec 0c             	sub    esp,0xc
c001ce0a:	6a 34                	push   0x34
c001ce0c:	e8 2f 2a ff ff       	call   c000f840 <malloc>
c001ce11:	59                   	pop    ecx
c001ce12:	89 c7                	mov    edi,eax
c001ce14:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ce18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce1a:	56                   	push   esi
c001ce1b:	57                   	push   edi
c001ce1c:	6a 00                	push   0x0
c001ce1e:	6a 34                	push   0x34
c001ce20:	53                   	push   ebx
c001ce21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce24:	83 c4 20             	add    esp,0x20
c001ce27:	85 c0                	test   eax,eax
c001ce29:	74 17                	je     c001ce42 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ce2b:	83 ec 0c             	sub    esp,0xc
c001ce2e:	68 d3 c1 02 c0       	push   0xc002c1d3
c001ce33:	e8 af d8 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001ce38:	83 c4 10             	add    esp,0x10
c001ce3b:	31 c0                	xor    eax,eax
c001ce3d:	e9 31 02 00 00       	jmp    c001d073 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ce42:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce48:	75 e1                	jne    c001ce2b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce4a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce4d:	85 c0                	test   eax,eax
c001ce4f:	74 da                	je     c001ce2b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce51:	52                   	push   edx
c001ce52:	31 d2                	xor    edx,edx
c001ce54:	52                   	push   edx
c001ce55:	50                   	push   eax
c001ce56:	53                   	push   ebx
c001ce57:	e8 54 68 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001ce5c:	83 c4 10             	add    esp,0x10
c001ce5f:	85 c0                	test   eax,eax
c001ce61:	75 c8                	jne    c001ce2b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce63:	83 ec 0c             	sub    esp,0xc
c001ce66:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce6a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce6e:	31 ed                	xor    ebp,ebp
c001ce70:	0f af c2             	imul   eax,edx
c001ce73:	50                   	push   eax
c001ce74:	e8 c7 29 ff ff       	call   c000f840 <malloc>
c001ce79:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce7f:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce86:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce8e:	0f af c2             	imul   eax,edx
c001ce91:	99                   	cdq    
c001ce92:	52                   	push   edx
c001ce93:	50                   	push   eax
c001ce94:	53                   	push   ebx
c001ce95:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce98:	83 c4 20             	add    esp,0x20
c001ce9b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cea3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ceab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ceb3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cebb:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cebf:	0f 86 aa 00 00 00    	jbe    c001cf6f <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cec5:	0f b7 f5             	movzx  esi,bp
c001cec8:	6b f6 28             	imul   esi,esi,0x28
c001cecb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cecf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ced2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ced6:	50                   	push   eax
c001ced7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cedb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cedf:	8b 16                	mov    edx,DWORD PTR [esi]
c001cee1:	6b c0 28             	imul   eax,eax,0x28
c001cee4:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cee8:	89 d0                	mov    eax,edx
c001ceea:	31 d2                	xor    edx,edx
c001ceec:	52                   	push   edx
c001ceed:	50                   	push   eax
c001ceee:	53                   	push   ebx
c001ceef:	e8 bc 67 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001cef4:	83 c4 0c             	add    esp,0xc
c001cef7:	6a 20                	push   0x20
c001cef9:	6a 00                	push   0x0
c001cefb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ceff:	52                   	push   edx
c001cf00:	e8 73 38 fe ff       	call   c0000778 <memset>
c001cf05:	58                   	pop    eax
c001cf06:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf08:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cf0c:	51                   	push   ecx
c001cf0d:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cf11:	52                   	push   edx
c001cf12:	6a 00                	push   0x0
c001cf14:	6a 1f                	push   0x1f
c001cf16:	53                   	push   ebx
c001cf17:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf1a:	83 c4 18             	add    esp,0x18
c001cf1d:	68 ea c1 02 c0       	push   0xc002c1ea
c001cf22:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf26:	52                   	push   edx
c001cf27:	e8 94 39 fe ff       	call   c00008c0 <strcmp>
c001cf2c:	83 c4 10             	add    esp,0x10
c001cf2f:	85 c0                	test   eax,eax
c001cf31:	75 0f                	jne    c001cf42 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cf33:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf42:	50                   	push   eax
c001cf43:	50                   	push   eax
c001cf44:	68 f2 c1 02 c0       	push   0xc002c1f2
c001cf49:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf4d:	50                   	push   eax
c001cf4e:	e8 6d 39 fe ff       	call   c00008c0 <strcmp>
c001cf53:	83 c4 10             	add    esp,0x10
c001cf56:	85 c0                	test   eax,eax
c001cf58:	75 0f                	jne    c001cf69 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf5a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf69:	45                   	inc    ebp
c001cf6a:	e9 4c ff ff ff       	jmp    c001cebb <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf6f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf74:	75 10                	jne    c001cf86 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf76:	83 ec 0c             	sub    esp,0xc
c001cf79:	68 fa c1 02 c0       	push   0xc002c1fa
c001cf7e:	e8 64 d7 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001cf83:	83 c4 10             	add    esp,0x10
c001cf86:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf8b:	75 10                	jne    c001cf9d <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf8d:	83 ec 0c             	sub    esp,0xc
c001cf90:	68 fa c1 02 c0       	push   0xc002c1fa
c001cf95:	e8 4d d7 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001cf9a:	83 c4 10             	add    esp,0x10
c001cf9d:	31 d2                	xor    edx,edx
c001cf9f:	50                   	push   eax
c001cfa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa4:	52                   	push   edx
c001cfa5:	50                   	push   eax
c001cfa6:	53                   	push   ebx
c001cfa7:	e8 04 67 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001cfac:	5a                   	pop    edx
c001cfad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cfb1:	e8 8a 28 ff ff       	call   c000f840 <malloc>
c001cfb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfbe:	31 c9                	xor    ecx,ecx
c001cfc0:	5e                   	pop    esi
c001cfc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfc3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cfc7:	55                   	push   ebp
c001cfc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfcc:	51                   	push   ecx
c001cfcd:	52                   	push   edx
c001cfce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cfd2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cfd6:	53                   	push   ebx
c001cfd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfda:	83 c4 14             	add    esp,0x14
c001cfdd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfe1:	e8 5a 28 ff ff       	call   c000f840 <malloc>
c001cfe6:	89 c6                	mov    esi,eax
c001cfe8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfed:	56                   	push   esi
c001cfee:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cff2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cff6:	51                   	push   ecx
c001cff7:	52                   	push   edx
c001cff8:	53                   	push   ebx
c001cff9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cffc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d000:	8b 15 c0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ac0
c001d006:	83 c4 1c             	add    esp,0x1c
c001d009:	c1 e8 04             	shr    eax,0x4
c001d00c:	89 04 95 40 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce6c0],eax
c001d013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d017:	31 d2                	xor    edx,edx
c001d019:	52                   	push   edx
c001d01a:	50                   	push   eax
c001d01b:	53                   	push   ebx
c001d01c:	e8 8f 66 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001d021:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d023:	31 d2                	xor    edx,edx
c001d025:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d028:	56                   	push   esi
c001d029:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d02d:	52                   	push   edx
c001d02e:	50                   	push   eax
c001d02f:	53                   	push   ebx
c001d030:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d033:	83 c4 14             	add    esp,0x14
c001d036:	53                   	push   ebx
c001d037:	e8 14 66 ff ff       	call   c0013650 <File::close()>
c001d03c:	5d                   	pop    ebp
c001d03d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d041:	e8 0a 28 ff ff       	call   c000f850 <free>
c001d046:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d049:	e8 02 28 ff ff       	call   c000f850 <free>
c001d04e:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c001d053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d057:	8d 50 01             	lea    edx,[eax+0x1]
c001d05a:	89 0c 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],ecx
c001d061:	89 34 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],esi
c001d068:	89 15 c0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac0,edx
c001d06e:	83 c4 10             	add    esp,0x10
c001d071:	b0 01                	mov    al,0x1
c001d073:	83 c4 5c             	add    esp,0x5c
c001d076:	5b                   	pop    ebx
c001d077:	5e                   	pop    esi
c001d078:	5f                   	pop    edi
c001d079:	5d                   	pop    ebp
c001d07a:	c3                   	ret    

c001d07b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d07b:	55                   	push   ebp
c001d07c:	57                   	push   edi
c001d07d:	56                   	push   esi
c001d07e:	53                   	push   ebx
c001d07f:	81 ec 68 03 00 00    	sub    esp,0x368
c001d085:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d08c:	8b 1d 14 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b14
c001d092:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d096:	68 14 01 00 00       	push   0x114
c001d09b:	e8 a0 27 ff ff       	call   c000f840 <malloc>
c001d0a0:	83 c4 0c             	add    esp,0xc
c001d0a3:	89 c5                	mov    ebp,eax
c001d0a5:	53                   	push   ebx
c001d0a6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d0ad:	50                   	push   eax
c001d0ae:	e8 db 64 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001d0b3:	5e                   	pop    esi
c001d0b4:	5f                   	pop    edi
c001d0b5:	6a 01                	push   0x1
c001d0b7:	55                   	push   ebp
c001d0b8:	e8 35 65 ff ff       	call   c00135f2 <File::open(FileOpenMode)>
c001d0bd:	83 c4 10             	add    esp,0x10
c001d0c0:	85 c0                	test   eax,eax
c001d0c2:	0f 85 8d 06 00 00    	jne    c001d755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0c8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d0d0:	83 ec 0c             	sub    esp,0xc
c001d0d3:	6a 34                	push   0x34
c001d0d5:	e8 66 27 ff ff       	call   c000f840 <malloc>
c001d0da:	5b                   	pop    ebx
c001d0db:	89 c7                	mov    edi,eax
c001d0dd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0e4:	53                   	push   ebx
c001d0e5:	57                   	push   edi
c001d0e6:	6a 00                	push   0x0
c001d0e8:	6a 34                	push   0x34
c001d0ea:	55                   	push   ebp
c001d0eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0ee:	83 c4 20             	add    esp,0x20
c001d0f1:	85 c0                	test   eax,eax
c001d0f3:	0f 85 5c 06 00 00    	jne    c001d755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0f9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0ff:	0f 85 50 06 00 00    	jne    c001d755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d105:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d108:	85 c0                	test   eax,eax
c001d10a:	0f 84 45 06 00 00    	je     c001d755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d110:	31 d2                	xor    edx,edx
c001d112:	51                   	push   ecx
c001d113:	52                   	push   edx
c001d114:	50                   	push   eax
c001d115:	55                   	push   ebp
c001d116:	e8 95 65 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001d11b:	83 c4 10             	add    esp,0x10
c001d11e:	85 c0                	test   eax,eax
c001d120:	0f 85 2f 06 00 00    	jne    c001d755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d126:	83 ec 0c             	sub    esp,0xc
c001d129:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d12c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d130:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d134:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d138:	0f af c2             	imul   eax,edx
c001d13b:	50                   	push   eax
c001d13c:	e8 ff 26 ff ff       	call   c000f840 <malloc>
c001d141:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d148:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d14b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d14f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d153:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d157:	0f af c2             	imul   eax,edx
c001d15a:	99                   	cdq    
c001d15b:	52                   	push   edx
c001d15c:	50                   	push   eax
c001d15d:	55                   	push   ebp
c001d15e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d161:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d164:	83 c4 20             	add    esp,0x20
c001d167:	85 c0                	test   eax,eax
c001d169:	0f 84 e6 05 00 00    	je     c001d755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d16f:	52                   	push   edx
c001d170:	31 d2                	xor    edx,edx
c001d172:	52                   	push   edx
c001d173:	50                   	push   eax
c001d174:	55                   	push   ebp
c001d175:	e8 36 65 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001d17a:	83 c4 10             	add    esp,0x10
c001d17d:	85 c0                	test   eax,eax
c001d17f:	0f 85 d0 05 00 00    	jne    c001d755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d185:	83 ec 0c             	sub    esp,0xc
c001d188:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d18c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d190:	31 f6                	xor    esi,esi
c001d192:	0f af c2             	imul   eax,edx
c001d195:	50                   	push   eax
c001d196:	e8 a5 26 ff ff       	call   c000f840 <malloc>
c001d19b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d19e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d1a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1a9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d1ad:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d1b1:	0f af c2             	imul   eax,edx
c001d1b4:	99                   	cdq    
c001d1b5:	52                   	push   edx
c001d1b6:	50                   	push   eax
c001d1b7:	55                   	push   ebp
c001d1b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1bb:	83 c4 20             	add    esp,0x20
c001d1be:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d1c2:	0f 86 8a 00 00 00    	jbe    c001d252 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d1c8:	0f b7 de             	movzx  ebx,si
c001d1cb:	c1 e3 05             	shl    ebx,0x5
c001d1ce:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d1d2:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d1d5:	75 75                	jne    c001d24c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d1d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1da:	31 d2                	xor    edx,edx
c001d1dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1e0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1e7:	50                   	push   eax
c001d1e8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d1eb:	52                   	push   edx
c001d1ec:	50                   	push   eax
c001d1ed:	55                   	push   ebp
c001d1ee:	e8 bd 64 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001d1f3:	83 c4 10             	add    esp,0x10
c001d1f6:	85 c0                	test   eax,eax
c001d1f8:	0f 85 57 05 00 00    	jne    c001d755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1fe:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d205:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d208:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d20c:	31 d2                	xor    edx,edx
c001d20e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d212:	83 ec 0c             	sub    esp,0xc
c001d215:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d219:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d220:	50                   	push   eax
c001d221:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d229:	52                   	push   edx
c001d22a:	50                   	push   eax
c001d22b:	55                   	push   ebp
c001d22c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d22f:	83 c4 1c             	add    esp,0x1c
c001d232:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d235:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d238:	50                   	push   eax
c001d239:	6a 00                	push   0x0
c001d23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d243:	50                   	push   eax
c001d244:	e8 2f 35 fe ff       	call   c0000778 <memset>
c001d249:	83 c4 10             	add    esp,0x10
c001d24c:	46                   	inc    esi
c001d24d:	e9 6c ff ff ff       	jmp    c001d1be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d252:	53                   	push   ebx
c001d253:	31 db                	xor    ebx,ebx
c001d255:	68 00 01 00 00       	push   0x100
c001d25a:	6a 00                	push   0x0
c001d25c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d260:	50                   	push   eax
c001d261:	e8 12 35 fe ff       	call   c0000778 <memset>
c001d266:	83 c4 0c             	add    esp,0xc
c001d269:	68 00 01 00 00       	push   0x100
c001d26e:	6a 00                	push   0x0
c001d270:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d277:	50                   	push   eax
c001d278:	e8 fb 34 fe ff       	call   c0000778 <memset>
c001d27d:	83 c4 10             	add    esp,0x10
c001d280:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d288:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d290:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d298:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d2a8:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d2ac:	0f 86 30 01 00 00    	jbe    c001d3e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d2b2:	0f b7 f3             	movzx  esi,bx
c001d2b5:	6b f6 28             	imul   esi,esi,0x28
c001d2b8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d2bc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2c3:	52                   	push   edx
c001d2c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2c8:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d2cc:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2ce:	6b d2 28             	imul   edx,edx,0x28
c001d2d1:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d2d5:	31 d2                	xor    edx,edx
c001d2d7:	52                   	push   edx
c001d2d8:	50                   	push   eax
c001d2d9:	55                   	push   ebp
c001d2da:	e8 d1 63 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001d2df:	83 c4 0c             	add    esp,0xc
c001d2e2:	6a 20                	push   0x20
c001d2e4:	6a 00                	push   0x0
c001d2e6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2ed:	51                   	push   ecx
c001d2ee:	e8 85 34 fe ff       	call   c0000778 <memset>
c001d2f3:	59                   	pop    ecx
c001d2f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2f7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2fb:	52                   	push   edx
c001d2fc:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d303:	51                   	push   ecx
c001d304:	6a 00                	push   0x0
c001d306:	6a 1f                	push   0x1f
c001d308:	55                   	push   ebp
c001d309:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d30c:	83 c4 1c             	add    esp,0x1c
c001d30f:	6a 09                	push   0x9
c001d311:	68 14 c2 02 c0       	push   0xc002c214
c001d316:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d31d:	51                   	push   ecx
c001d31e:	e8 1d 33 fe ff       	call   c0000640 <memcmp>
c001d323:	83 c4 10             	add    esp,0x10
c001d326:	85 c0                	test   eax,eax
c001d328:	75 21                	jne    c001d34b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d32e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d332:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d336:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d33a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d33d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d344:	89 d0                	mov    eax,edx
c001d346:	40                   	inc    eax
c001d347:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d34b:	50                   	push   eax
c001d34c:	6a 09                	push   0x9
c001d34e:	68 1e c2 02 c0       	push   0xc002c21e
c001d353:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d35a:	50                   	push   eax
c001d35b:	e8 e0 32 fe ff       	call   c0000640 <memcmp>
c001d360:	83 c4 10             	add    esp,0x10
c001d363:	85 c0                	test   eax,eax
c001d365:	75 21                	jne    c001d388 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d367:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d36b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d36f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d373:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d377:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d37a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d381:	89 d0                	mov    eax,edx
c001d383:	40                   	inc    eax
c001d384:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d388:	50                   	push   eax
c001d389:	50                   	push   eax
c001d38a:	68 ea c1 02 c0       	push   0xc002c1ea
c001d38f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d396:	50                   	push   eax
c001d397:	e8 24 35 fe ff       	call   c00008c0 <strcmp>
c001d39c:	83 c4 10             	add    esp,0x10
c001d39f:	85 c0                	test   eax,eax
c001d3a1:	75 0f                	jne    c001d3b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d3a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d3aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3b2:	50                   	push   eax
c001d3b3:	50                   	push   eax
c001d3b4:	68 f2 c1 02 c0       	push   0xc002c1f2
c001d3b9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3c0:	50                   	push   eax
c001d3c1:	e8 fa 34 fe ff       	call   c00008c0 <strcmp>
c001d3c6:	83 c4 10             	add    esp,0x10
c001d3c9:	85 c0                	test   eax,eax
c001d3cb:	75 0f                	jne    c001d3dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d3cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3d8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d3dc:	43                   	inc    ebx
c001d3dd:	e9 c6 fe ff ff       	jmp    c001d2a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d3e2:	31 d2                	xor    edx,edx
c001d3e4:	50                   	push   eax
c001d3e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3e9:	52                   	push   edx
c001d3ea:	50                   	push   eax
c001d3eb:	55                   	push   ebp
c001d3ec:	e8 bf 62 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001d3f1:	58                   	pop    eax
c001d3f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3f6:	e8 45 24 ff ff       	call   c000f840 <malloc>
c001d3fb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d402:	31 d2                	xor    edx,edx
c001d404:	58                   	pop    eax
c001d405:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d409:	53                   	push   ebx
c001d40a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d40e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d412:	52                   	push   edx
c001d413:	50                   	push   eax
c001d414:	55                   	push   ebp
c001d415:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d418:	83 c4 14             	add    esp,0x14
c001d41b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d41f:	e8 1c 24 ff ff       	call   c000f840 <malloc>
c001d424:	31 d2                	xor    edx,edx
c001d426:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d42a:	83 c4 0c             	add    esp,0xc
c001d42d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d431:	52                   	push   edx
c001d432:	50                   	push   eax
c001d433:	55                   	push   ebp
c001d434:	e8 77 62 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001d439:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d43c:	31 d2                	xor    edx,edx
c001d43e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d441:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d445:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d449:	52                   	push   edx
c001d44a:	50                   	push   eax
c001d44b:	55                   	push   ebp
c001d44c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d44f:	83 c4 20             	add    esp,0x20
c001d452:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d45a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d45e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d462:	0f 84 f1 02 00 00    	je     c001d759 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d468:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d46f:	31 d2                	xor    edx,edx
c001d471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d475:	c1 e8 03             	shr    eax,0x3
c001d478:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d47c:	51                   	push   ecx
c001d47d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d481:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d485:	52                   	push   edx
c001d486:	50                   	push   eax
c001d487:	55                   	push   ebp
c001d488:	e8 23 62 ff ff       	call   c00136b0 <File::seek(unsigned long long)>
c001d48d:	5b                   	pop    ebx
c001d48e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d492:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d499:	e8 a2 23 ff ff       	call   c000f840 <malloc>
c001d49e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d4a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4a5:	31 d2                	xor    edx,edx
c001d4a7:	5e                   	pop    esi
c001d4a8:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d4ac:	50                   	push   eax
c001d4ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4b5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d4bc:	52                   	push   edx
c001d4bd:	50                   	push   eax
c001d4be:	55                   	push   ebp
c001d4bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4c2:	83 c4 20             	add    esp,0x20
c001d4c5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d4d1:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d4d5:	0f 8d 62 02 00 00    	jge    c001d73d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d4db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4e3:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d4e8:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d4eb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4f3:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d4f7:	89 d8                	mov    eax,ebx
c001d4f9:	c1 e8 08             	shr    eax,0x8
c001d4fc:	89 c6                	mov    esi,eax
c001d4fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d502:	c1 e6 04             	shl    esi,0x4
c001d505:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d509:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d50c:	85 d2                	test   edx,edx
c001d50e:	0f 85 bf 00 00 00    	jne    c001d5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d514:	83 ec 0c             	sub    esp,0xc
c001d517:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d51b:	03 06                	add    eax,DWORD PTR [esi]
c001d51d:	50                   	push   eax
c001d51e:	e8 4b f8 ff ff       	call   c001cd6e <Thr::getAddressOfKernelSymbol(char const*)>
c001d523:	83 c4 10             	add    esp,0x10
c001d526:	89 c2                	mov    edx,eax
c001d528:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d52d:	85 c0                	test   eax,eax
c001d52f:	0f 85 9e 00 00 00    	jne    c001d5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d535:	83 ec 0c             	sub    esp,0xc
c001d538:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d53c:	03 06                	add    eax,DWORD PTR [esi]
c001d53e:	50                   	push   eax
c001d53f:	e8 b1 0f ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d544:	83 c4 10             	add    esp,0x10
c001d547:	89 c2                	mov    edx,eax
c001d549:	85 c0                	test   eax,eax
c001d54b:	0f 85 82 00 00 00    	jne    c001d5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d551:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d555:	50                   	push   eax
c001d556:	50                   	push   eax
c001d557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d55b:	03 06                	add    eax,DWORD PTR [esi]
c001d55d:	50                   	push   eax
c001d55e:	68 28 c2 02 c0       	push   0xc002c228
c001d563:	e8 ce 5a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001d568:	58                   	pop    eax
c001d569:	5a                   	pop    edx
c001d56a:	68 42 c2 02 c0       	push   0xc002c242
c001d56f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d576:	50                   	push   eax
c001d577:	e8 b8 32 fe ff       	call   c0000834 <strcpy>
c001d57c:	59                   	pop    ecx
c001d57d:	58                   	pop    eax
c001d57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d582:	03 06                	add    eax,DWORD PTR [esi]
c001d584:	50                   	push   eax
c001d585:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d58c:	50                   	push   eax
c001d58d:	e8 e2 33 fe ff       	call   c0000974 <strcat>
c001d592:	58                   	pop    eax
c001d593:	5a                   	pop    edx
c001d594:	68 d8 c2 02 c0       	push   0xc002c2d8
c001d599:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5a0:	50                   	push   eax
c001d5a1:	e8 ce 33 fe ff       	call   c0000974 <strcat>
c001d5a6:	83 c4 10             	add    esp,0x10
c001d5a9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5ae:	0f 84 43 01 00 00    	je     c001d6f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5b4:	83 ec 0c             	sub    esp,0xc
c001d5b7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5be:	50                   	push   eax
c001d5bf:	e8 23 d1 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001d5c4:	83 c4 10             	add    esp,0x10
c001d5c7:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d5cb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5cf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d5d3:	80 fb 01             	cmp    bl,0x1
c001d5d6:	75 7d                	jne    c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d5d8:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d5df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5e3:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d5e7:	01 ce                	add    esi,ecx
c001d5e9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5ef:	0f 94 c0             	sete   al
c001d5f2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5f8:	0f 94 c3             	sete   bl
c001d5fb:	09 c3                	or     ebx,eax
c001d5fd:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5ff:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d604:	74 36                	je     c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d606:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d609:	84 db                	test   bl,bl
c001d60b:	75 0a                	jne    c001d617 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d60d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d611:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d615:	76 37                	jbe    c001d64e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d617:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d61b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d620:	0f 84 d1 00 00 00    	je     c001d6f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d626:	83 ec 0c             	sub    esp,0xc
c001d629:	68 59 c2 02 c0       	push   0xc002c259
c001d62e:	e8 b4 d0 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001d633:	83 c4 10             	add    esp,0x10
c001d636:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d63a:	eb 12                	jmp    c001d64e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d63c:	01 c1                	add    ecx,eax
c001d63e:	84 db                	test   bl,bl
c001d640:	75 0c                	jne    c001d64e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d642:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d646:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d64a:	77 02                	ja     c001d64e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d64c:	01 d1                	add    ecx,edx
c001d64e:	89 0e                	mov    DWORD PTR [esi],ecx
c001d650:	e9 df 00 00 00       	jmp    c001d734 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d655:	80 fb 02             	cmp    bl,0x2
c001d658:	75 71                	jne    c001d6cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d65a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d661:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d665:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d669:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d66f:	74 15                	je     c001d686 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d671:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d677:	74 0d                	je     c001d686 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d679:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d67d:	83 e8 04             	sub    eax,0x4
c001d680:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d684:	76 1f                	jbe    c001d6a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d686:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d68a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d68f:	74 66                	je     c001d6f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d691:	83 ec 0c             	sub    esp,0xc
c001d694:	68 75 c2 02 c0       	push   0xc002c275
c001d699:	e8 49 d0 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001d69e:	83 c4 10             	add    esp,0x10
c001d6a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6a5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d6a7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d6ac:	74 13                	je     c001d6c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d6ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d6b2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d6b9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d6bd:	01 c8                	add    eax,ecx
c001d6bf:	eb 04                	jmp    c001d6c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d6c1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d6c5:	01 c2                	add    edx,eax
c001d6c7:	89 16                	mov    DWORD PTR [esi],edx
c001d6c9:	eb 69                	jmp    c001d734 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6cb:	0f b6 db             	movzx  ebx,bl
c001d6ce:	50                   	push   eax
c001d6cf:	50                   	push   eax
c001d6d0:	53                   	push   ebx
c001d6d1:	68 91 c2 02 c0       	push   0xc002c291
c001d6d6:	e8 5b 59 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001d6db:	83 c4 10             	add    esp,0x10
c001d6de:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6e3:	74 12                	je     c001d6f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d6e5:	83 ec 0c             	sub    esp,0xc
c001d6e8:	68 9c c2 02 c0       	push   0xc002c29c
c001d6ed:	e8 f5 cf ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001d6f2:	83 c4 10             	add    esp,0x10
c001d6f5:	eb 3d                	jmp    c001d734 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6f7:	83 ec 0c             	sub    esp,0xc
c001d6fa:	55                   	push   ebp
c001d6fb:	e8 50 5f ff ff       	call   c0013650 <File::close()>
c001d700:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d703:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d706:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d709:	59                   	pop    ecx
c001d70a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d70e:	e8 3d 21 ff ff       	call   c000f850 <free>
c001d713:	5b                   	pop    ebx
c001d714:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d718:	e8 33 21 ff ff       	call   c000f850 <free>
c001d71d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d720:	e8 2b 21 ff ff       	call   c000f850 <free>
c001d725:	5e                   	pop    esi
c001d726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d72a:	e8 21 21 ff ff       	call   c000f850 <free>
c001d72f:	83 c4 10             	add    esp,0x10
c001d732:	eb 21                	jmp    c001d755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d734:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d738:	e9 90 fd ff ff       	jmp    c001d4cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d73d:	83 ec 0c             	sub    esp,0xc
c001d740:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d744:	e8 07 21 ff ff       	call   c000f850 <free>
c001d749:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d74d:	83 c4 10             	add    esp,0x10
c001d750:	e9 05 fd ff ff       	jmp    c001d45a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d755:	31 c0                	xor    eax,eax
c001d757:	eb 33                	jmp    c001d78c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d759:	83 ec 0c             	sub    esp,0xc
c001d75c:	55                   	push   ebp
c001d75d:	e8 ee 5e ff ff       	call   c0013650 <File::close()>
c001d762:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d765:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d768:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d76b:	58                   	pop    eax
c001d76c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d770:	e8 db 20 ff ff       	call   c000f850 <free>
c001d775:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d778:	e8 d3 20 ff ff       	call   c000f850 <free>
c001d77d:	5a                   	pop    edx
c001d77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d782:	e8 c9 20 ff ff       	call   c000f850 <free>
c001d787:	83 c4 10             	add    esp,0x10
c001d78a:	b0 01                	mov    al,0x1
c001d78c:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d792:	5b                   	pop    ebx
c001d793:	5e                   	pop    esi
c001d794:	5f                   	pop    edi
c001d795:	5d                   	pop    ebp
c001d796:	c3                   	ret    

c001d797 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d797:	56                   	push   esi
c001d798:	31 d2                	xor    edx,edx
c001d79a:	53                   	push   ebx
c001d79b:	8b 1d 20 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031320
c001d7a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d7a5:	39 d3                	cmp    ebx,edx
c001d7a7:	7e 1b                	jle    c001d7c4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d7a9:	8b 04 95 40 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceac0]
c001d7b0:	39 c8                	cmp    eax,ecx
c001d7b2:	77 0d                	ja     c001d7c1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d7b4:	8b 34 95 40 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcecc0]
c001d7bb:	01 c6                	add    esi,eax
c001d7bd:	39 ce                	cmp    esi,ecx
c001d7bf:	77 05                	ja     c001d7c6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d7c1:	42                   	inc    edx
c001d7c2:	eb e1                	jmp    c001d7a5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d7c4:	31 c0                	xor    eax,eax
c001d7c6:	5b                   	pop    ebx
c001d7c7:	5e                   	pop    esi
c001d7c8:	c3                   	ret    

c001d7c9 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d7c9:	53                   	push   ebx
c001d7ca:	31 c0                	xor    eax,eax
c001d7cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7d0:	8b 1d 20 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031320
c001d7d6:	39 c3                	cmp    ebx,eax
c001d7d8:	7e 22                	jle    c001d7fc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d7da:	8b 14 85 40 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceac0]
c001d7e1:	39 ca                	cmp    edx,ecx
c001d7e3:	77 14                	ja     c001d7f9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7e5:	03 14 85 40 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcecc0]
c001d7ec:	39 ca                	cmp    edx,ecx
c001d7ee:	76 09                	jbe    c001d7f9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7f0:	8b 04 85 40 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8c0]
c001d7f7:	eb 05                	jmp    c001d7fe <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7f9:	40                   	inc    eax
c001d7fa:	eb da                	jmp    c001d7d6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7fc:	31 c0                	xor    eax,eax
c001d7fe:	5b                   	pop    ebx
c001d7ff:	c3                   	ret    

c001d800 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d800:	53                   	push   ebx
c001d801:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d805:	53                   	push   ebx
c001d806:	e8 8c ff ff ff       	call   c001d797 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d80b:	5a                   	pop    edx
c001d80c:	31 d2                	xor    edx,edx
c001d80e:	85 c0                	test   eax,eax
c001d810:	74 04                	je     c001d816 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d812:	89 da                	mov    edx,ebx
c001d814:	29 c2                	sub    edx,eax
c001d816:	89 d0                	mov    eax,edx
c001d818:	5b                   	pop    ebx
c001d819:	c3                   	ret    

c001d81a <Thr::loadDLL(char const*, bool)>:
c001d81a:	55                   	push   ebp
c001d81b:	57                   	push   edi
c001d81c:	56                   	push   esi
c001d81d:	53                   	push   ebx
c001d81e:	81 ec 34 01 00 00    	sub    esp,0x134
c001d824:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d82b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d832:	56                   	push   esi
c001d833:	68 b4 c2 02 c0       	push   0xc002c2b4
c001d838:	e8 f9 57 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001d83d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d844:	e8 f7 1f ff ff       	call   c000f840 <malloc>
c001d849:	83 c4 0c             	add    esp,0xc
c001d84c:	89 c3                	mov    ebx,eax
c001d84e:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001d854:	56                   	push   esi
c001d855:	50                   	push   eax
c001d856:	e8 33 5d ff ff       	call   c001358e <File::File(char const*, Process*)>
c001d85b:	83 c4 10             	add    esp,0x10
c001d85e:	85 db                	test   ebx,ebx
c001d860:	75 3c                	jne    c001d89e <Thr::loadDLL(char const*, bool)+0x84>
c001d862:	89 e8                	mov    eax,ebp
c001d864:	84 c0                	test   al,al
c001d866:	0f 84 d5 01 00 00    	je     c001da41 <Thr::loadDLL(char const*, bool)+0x227>
c001d86c:	57                   	push   edi
c001d86d:	57                   	push   edi
c001d86e:	68 c5 c2 02 c0       	push   0xc002c2c5
c001d873:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d877:	57                   	push   edi
c001d878:	e8 b7 2f fe ff       	call   c0000834 <strcpy>
c001d87d:	58                   	pop    eax
c001d87e:	5a                   	pop    edx
c001d87f:	56                   	push   esi
c001d880:	57                   	push   edi
c001d881:	e8 ee 30 fe ff       	call   c0000974 <strcat>
c001d886:	59                   	pop    ecx
c001d887:	58                   	pop    eax
c001d888:	68 d8 c2 02 c0       	push   0xc002c2d8
c001d88d:	57                   	push   edi
c001d88e:	e8 e1 30 fe ff       	call   c0000974 <strcat>
c001d893:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d896:	e8 4c ce ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001d89b:	83 c4 10             	add    esp,0x10
c001d89e:	51                   	push   ecx
c001d89f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d8a3:	50                   	push   eax
c001d8a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d8a8:	50                   	push   eax
c001d8a9:	53                   	push   ebx
c001d8aa:	e8 ef 5f ff ff       	call   c001389e <File::stat(unsigned long long*, bool*)>
c001d8af:	83 c4 10             	add    esp,0x10
c001d8b2:	85 db                	test   ebx,ebx
c001d8b4:	74 0c                	je     c001d8c2 <Thr::loadDLL(char const*, bool)+0xa8>
c001d8b6:	83 ec 0c             	sub    esp,0xc
c001d8b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d8bb:	53                   	push   ebx
c001d8bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8bf:	83 c4 10             	add    esp,0x10
c001d8c2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d8c7:	75 0a                	jne    c001d8d3 <Thr::loadDLL(char const*, bool)+0xb9>
c001d8c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8cd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d8d1:	75 3c                	jne    c001d90f <Thr::loadDLL(char const*, bool)+0xf5>
c001d8d3:	89 e8                	mov    eax,ebp
c001d8d5:	84 c0                	test   al,al
c001d8d7:	0f 84 4c 01 00 00    	je     c001da29 <Thr::loadDLL(char const*, bool)+0x20f>
c001d8dd:	51                   	push   ecx
c001d8de:	51                   	push   ecx
c001d8df:	68 c5 c2 02 c0       	push   0xc002c2c5
c001d8e4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d8e8:	53                   	push   ebx
c001d8e9:	e8 46 2f fe ff       	call   c0000834 <strcpy>
c001d8ee:	5f                   	pop    edi
c001d8ef:	58                   	pop    eax
c001d8f0:	56                   	push   esi
c001d8f1:	53                   	push   ebx
c001d8f2:	e8 7d 30 fe ff       	call   c0000974 <strcat>
c001d8f7:	58                   	pop    eax
c001d8f8:	5a                   	pop    edx
c001d8f9:	68 d8 c2 02 c0       	push   0xc002c2d8
c001d8fe:	53                   	push   ebx
c001d8ff:	e8 70 30 fe ff       	call   c0000974 <strcat>
c001d904:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d907:	e8 db cd ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001d90c:	83 c4 10             	add    esp,0x10
c001d90f:	e8 6a 45 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c001d914:	51                   	push   ecx
c001d915:	6a 03                	push   0x3
c001d917:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d91b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d91f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d925:	83 d3 00             	adc    ebx,0x0
c001d928:	89 ca                	mov    edx,ecx
c001d92a:	89 d1                	mov    ecx,edx
c001d92c:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d930:	51                   	push   ecx
c001d931:	50                   	push   eax
c001d932:	e8 83 4b ff ff       	call   c00124ba <VAS::allocatePages(int, int)>
c001d937:	5f                   	pop    edi
c001d938:	89 c3                	mov    ebx,eax
c001d93a:	58                   	pop    eax
c001d93b:	53                   	push   ebx
c001d93c:	68 da c2 02 c0       	push   0xc002c2da
c001d941:	e8 f0 56 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001d946:	89 34 24             	mov    DWORD PTR [esp],esi
c001d949:	e8 46 2e fe ff       	call   c0000794 <strlen>
c001d94e:	8b 3d 20 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031320
c001d954:	40                   	inc    eax
c001d955:	89 04 24             	mov    DWORD PTR [esp],eax
c001d958:	e8 e3 1e ff ff       	call   c000f840 <malloc>
c001d95d:	89 04 bd 40 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce8c0],eax
c001d964:	58                   	pop    eax
c001d965:	a1 20 13 03 c0       	mov    eax,ds:0xc0031320
c001d96a:	5a                   	pop    edx
c001d96b:	56                   	push   esi
c001d96c:	ff 34 85 40 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce8c0]
c001d973:	e8 bc 2e fe ff       	call   c0000834 <strcpy>
c001d978:	a1 20 13 03 c0       	mov    eax,ds:0xc0031320
c001d97d:	8d 50 01             	lea    edx,[eax+0x1]
c001d980:	89 1c 85 40 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceac0],ebx
c001d987:	89 15 20 13 03 c0    	mov    DWORD PTR ds:0xc0031320,edx
c001d98d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d991:	83 c4 0c             	add    esp,0xc
c001d994:	89 14 85 40 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcecc0],edx
c001d99b:	6a 01                	push   0x1
c001d99d:	53                   	push   ebx
c001d99e:	56                   	push   esi
c001d99f:	e8 d7 f6 ff ff       	call   c001d07b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d9a4:	83 c4 10             	add    esp,0x10
c001d9a7:	89 c7                	mov    edi,eax
c001d9a9:	84 c0                	test   al,al
c001d9ab:	0f 85 8c 00 00 00    	jne    c001da3d <Thr::loadDLL(char const*, bool)+0x223>
c001d9b1:	89 e8                	mov    eax,ebp
c001d9b3:	84 c0                	test   al,al
c001d9b5:	74 76                	je     c001da2d <Thr::loadDLL(char const*, bool)+0x213>
c001d9b7:	83 ec 0c             	sub    esp,0xc
c001d9ba:	68 e7 c2 02 c0       	push   0xc002c2e7
c001d9bf:	e8 23 cd ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001d9c4:	83 c4 10             	add    esp,0x10
c001d9c7:	eb 64                	jmp    c001da2d <Thr::loadDLL(char const*, bool)+0x213>
c001d9c9:	e8 b0 44 ff ff       	call   c0011e7e <Virt::getAKernelVAS()>
c001d9ce:	89 f5                	mov    ebp,esi
c001d9d0:	c1 e5 0c             	shl    ebp,0xc
c001d9d3:	52                   	push   edx
c001d9d4:	01 dd                	add    ebp,ebx
c001d9d6:	52                   	push   edx
c001d9d7:	55                   	push   ebp
c001d9d8:	50                   	push   eax
c001d9d9:	e8 56 46 ff ff       	call   c0012034 <VAS::getPageTableEntry(unsigned long)>
c001d9de:	83 c4 10             	add    esp,0x10
c001d9e1:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9e4:	75 0c                	jne    c001d9f2 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d9e6:	83 ec 0c             	sub    esp,0xc
c001d9e9:	55                   	push   ebp
c001d9ea:	e8 69 24 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d9ef:	83 c4 10             	add    esp,0x10
c001d9f2:	46                   	inc    esi
c001d9f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9fb:	05 ff 0f 00 00       	add    eax,0xfff
c001da00:	83 d2 00             	adc    edx,0x0
c001da03:	0f ac d0 0c          	shrd   eax,edx,0xc
c001da07:	c1 ea 0c             	shr    edx,0xc
c001da0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da12:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001da16:	ba 00 00 00 00       	mov    edx,0x0
c001da1b:	89 d0                	mov    eax,edx
c001da1d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001da21:	72 a6                	jb     c001d9c9 <Thr::loadDLL(char const*, bool)+0x1af>
c001da23:	89 f8                	mov    eax,edi
c001da25:	84 c0                	test   al,al
c001da27:	75 18                	jne    c001da41 <Thr::loadDLL(char const*, bool)+0x227>
c001da29:	31 db                	xor    ebx,ebx
c001da2b:	eb 14                	jmp    c001da41 <Thr::loadDLL(char const*, bool)+0x227>
c001da2d:	83 ec 0c             	sub    esp,0xc
c001da30:	68 06 c3 02 c0       	push   0xc002c306
c001da35:	e8 ad cc ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001da3a:	83 c4 10             	add    esp,0x10
c001da3d:	31 f6                	xor    esi,esi
c001da3f:	eb b2                	jmp    c001d9f3 <Thr::loadDLL(char const*, bool)+0x1d9>
c001da41:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da47:	89 d8                	mov    eax,ebx
c001da49:	5b                   	pop    ebx
c001da4a:	5e                   	pop    esi
c001da4b:	5f                   	pop    edi
c001da4c:	5d                   	pop    ebp
c001da4d:	c3                   	ret    

c001da4e <Thr::executeDLL(unsigned long, void*)>:
c001da4e:	56                   	push   esi
c001da4f:	53                   	push   ebx
c001da50:	52                   	push   edx
c001da51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da55:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da59:	85 db                	test   ebx,ebx
c001da5b:	75 10                	jne    c001da6d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da5d:	83 ec 0c             	sub    esp,0xc
c001da60:	68 22 c3 02 c0       	push   0xc002c322
c001da65:	e8 7d cc ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001da6a:	83 c4 10             	add    esp,0x10
c001da6d:	50                   	push   eax
c001da6e:	50                   	push   eax
c001da6f:	53                   	push   ebx
c001da70:	68 4c c3 02 c0       	push   0xc002c34c
c001da75:	e8 bc 55 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001da7a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da7e:	89 d8                	mov    eax,ebx
c001da80:	83 c4 14             	add    esp,0x14
c001da83:	5b                   	pop    ebx
c001da84:	5e                   	pop    esi
c001da85:	ff e0                	jmp    eax
c001da87:	90                   	nop

c001da88 <changeTSS>:
c001da88:	83 ec 14             	sub    esp,0x14
c001da8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da90:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da93:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da98:	c1 e2 15             	shl    edx,0x15
c001da9b:	29 d0                	sub    eax,edx
c001da9d:	50                   	push   eax
c001da9e:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001daa3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001daa9:	05 7c 11 00 00       	add    eax,0x117c
c001daae:	50                   	push   eax
c001daaf:	e8 6e 3a ff ff       	call   c0011522 <TSS::setESP(unsigned long)>
c001dab4:	83 c4 1c             	add    esp,0x1c
c001dab7:	c3                   	ret    

c001dab8 <Process::addArgs(char**)>:
c001dab8:	57                   	push   edi
c001dab9:	56                   	push   esi
c001daba:	53                   	push   ebx
c001dabb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dabf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dac3:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dacd:	85 ff                	test   edi,edi
c001dacf:	74 3d                	je     c001db0e <Process::addArgs(char**)+0x56>
c001dad1:	8b 07                	mov    eax,DWORD PTR [edi]
c001dad3:	85 c0                	test   eax,eax
c001dad5:	74 37                	je     c001db0e <Process::addArgs(char**)+0x56>
c001dad7:	31 db                	xor    ebx,ebx
c001dad9:	83 ec 0c             	sub    esp,0xc
c001dadc:	50                   	push   eax
c001dadd:	e8 b2 2c fe ff       	call   c0000794 <strlen>
c001dae2:	40                   	inc    eax
c001dae3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dae6:	e8 55 1d ff ff       	call   c000f840 <malloc>
c001daeb:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001daf2:	5a                   	pop    edx
c001daf3:	59                   	pop    ecx
c001daf4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001daf7:	43                   	inc    ebx
c001daf8:	50                   	push   eax
c001daf9:	e8 36 2d fe ff       	call   c0000834 <strcpy>
c001dafe:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001db04:	83 c4 10             	add    esp,0x10
c001db07:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db0a:	85 c0                	test   eax,eax
c001db0c:	75 cb                	jne    c001dad9 <Process::addArgs(char**)+0x21>
c001db0e:	5b                   	pop    ebx
c001db0f:	5e                   	pop    esi
c001db10:	5f                   	pop    edi
c001db11:	c3                   	ret    

c001db12 <Process::Process(char const*, Process*, char**)>:
c001db12:	56                   	push   esi
c001db13:	53                   	push   ebx
c001db14:	83 ec 14             	sub    esp,0x14
c001db17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1b:	05 0c 02 00 00       	add    eax,0x20c
c001db20:	bb 07 00 00 00       	mov    ebx,0x7
c001db25:	89 c6                	mov    esi,eax
c001db27:	85 db                	test   ebx,ebx
c001db29:	78 12                	js     c001db3d <Process::Process(char const*, Process*, char**)+0x2b>
c001db2b:	83 ec 0c             	sub    esp,0xc
c001db2e:	56                   	push   esi
c001db2f:	e8 1e b2 00 00       	call   c0028d52 <ThreadControlBlock::ThreadControlBlock()>
c001db34:	83 c4 10             	add    esp,0x10
c001db37:	83 c6 63             	add    esi,0x63
c001db3a:	4b                   	dec    ebx
c001db3b:	eb ea                	jmp    c001db27 <Process::Process(char const*, Process*, char**)+0x15>
c001db3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db41:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db48:	83 ec 0c             	sub    esp,0xc
c001db4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db4f:	e8 e4 c9 ff ff       	call   c001a538 <Krnl::newProcessEnv(Process*)>
c001db54:	83 c4 10             	add    esp,0x10
c001db57:	89 c2                	mov    edx,eax
c001db59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db67:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db70:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c001db75:	8d 50 01             	lea    edx,[eax+0x1]
c001db78:	89 15 10 db 02 c0    	mov    DWORD PTR ds:0xc002db10,edx
c001db7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db82:	89 02                	mov    DWORD PTR [edx],eax
c001db84:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001db8c:	83 ec 0c             	sub    esp,0xc
c001db8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db93:	e8 a8 1c ff ff       	call   c000f840 <malloc>
c001db98:	83 c4 10             	add    esp,0x10
c001db9b:	89 c3                	mov    ebx,eax
c001db9d:	83 ec 08             	sub    esp,0x8
c001dba0:	6a 00                	push   0x0
c001dba2:	53                   	push   ebx
c001dba3:	e8 ba 4c ff ff       	call   c0012862 <VAS::VAS(bool)>
c001dba8:	83 c4 10             	add    esp,0x10
c001dbab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbaf:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbcb:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbdb:	85 c0                	test   eax,eax
c001dbdd:	74 42                	je     c001dc21 <Process::Process(char const*, Process*, char**)+0x10f>
c001dbdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbe9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf3:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbfd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc03:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0d:	05 0c 01 00 00       	add    eax,0x10c
c001dc12:	83 ec 08             	sub    esp,0x8
c001dc15:	52                   	push   edx
c001dc16:	50                   	push   eax
c001dc17:	e8 18 2c fe ff       	call   c0000834 <strcpy>
c001dc1c:	83 c4 10             	add    esp,0x10
c001dc1f:	eb 63                	jmp    c001dc84 <Process::Process(char const*, Process*, char**)+0x172>
c001dc21:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dc29:	83 ec 0c             	sub    esp,0xc
c001dc2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc30:	e8 0b 1c ff ff       	call   c000f840 <malloc>
c001dc35:	83 c4 10             	add    esp,0x10
c001dc38:	89 c3                	mov    ebx,eax
c001dc3a:	83 ec 08             	sub    esp,0x8
c001dc3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc41:	53                   	push   ebx
c001dc42:	e8 d9 35 ff ff       	call   c0011220 <VgaText::VgaText(char const*)>
c001dc47:	83 c4 10             	add    esp,0x10
c001dc4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc4e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc58:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc5e:	83 ec 0c             	sub    esp,0xc
c001dc61:	50                   	push   eax
c001dc62:	e8 ac 29 ff ff       	call   c0010613 <addToTerminalCycle(VgaText*)>
c001dc67:	83 c4 10             	add    esp,0x10
c001dc6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc6e:	05 0c 01 00 00       	add    eax,0x10c
c001dc73:	83 ec 08             	sub    esp,0x8
c001dc76:	68 6b c3 02 c0       	push   0xc002c36b
c001dc7b:	50                   	push   eax
c001dc7c:	e8 b3 2b fe ff       	call   c0000834 <strcpy>
c001dc81:	83 c4 10             	add    esp,0x10
c001dc84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc88:	83 c0 0c             	add    eax,0xc
c001dc8b:	83 ec 08             	sub    esp,0x8
c001dc8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc92:	50                   	push   eax
c001dc93:	e8 9c 2b fe ff       	call   c0000834 <strcpy>
c001dc98:	83 c4 10             	add    esp,0x10
c001dc9b:	83 ec 08             	sub    esp,0x8
c001dc9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dca2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dca6:	e8 0d fe ff ff       	call   c001dab8 <Process::addArgs(char**)>
c001dcab:	83 c4 10             	add    esp,0x10
c001dcae:	83 ec 08             	sub    esp,0x8
c001dcb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcb9:	e8 87 ee ff ff       	call   c001cb45 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dcbe:	83 c4 10             	add    esp,0x10
c001dcc1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dcc5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dcc9:	83 f0 01             	xor    eax,0x1
c001dccc:	88 c2                	mov    dl,al
c001dcce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcd2:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dcd8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcdd:	83 ec 08             	sub    esp,0x8
c001dce0:	50                   	push   eax
c001dce1:	68 68 c4 02 c0       	push   0xc002c468
c001dce6:	e8 4b 53 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001dceb:	83 c4 10             	add    esp,0x10
c001dcee:	90                   	nop
c001dcef:	83 c4 14             	add    esp,0x14
c001dcf2:	5b                   	pop    ebx
c001dcf3:	5e                   	pop    esi
c001dcf4:	c3                   	ret    
c001dcf5:	90                   	nop

c001dcf6 <Process::Process(bool, char const*, Process*, char**)>:
c001dcf6:	56                   	push   esi
c001dcf7:	53                   	push   ebx
c001dcf8:	83 ec 24             	sub    esp,0x24
c001dcfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dd03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd07:	05 0c 02 00 00       	add    eax,0x20c
c001dd0c:	bb 07 00 00 00       	mov    ebx,0x7
c001dd11:	89 c6                	mov    esi,eax
c001dd13:	85 db                	test   ebx,ebx
c001dd15:	78 12                	js     c001dd29 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dd17:	83 ec 0c             	sub    esp,0xc
c001dd1a:	56                   	push   esi
c001dd1b:	e8 32 b0 00 00       	call   c0028d52 <ThreadControlBlock::ThreadControlBlock()>
c001dd20:	83 c4 10             	add    esp,0x10
c001dd23:	83 c6 63             	add    esi,0x63
c001dd26:	4b                   	dec    ebx
c001dd27:	eb ea                	jmp    c001dd13 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dd29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd2d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd34:	83 ec 0c             	sub    esp,0xc
c001dd37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd3b:	e8 f8 c7 ff ff       	call   c001a538 <Krnl::newProcessEnv(Process*)>
c001dd40:	83 c4 10             	add    esp,0x10
c001dd43:	89 c2                	mov    edx,eax
c001dd45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd49:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd53:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd5c:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c001dd61:	8d 50 01             	lea    edx,[eax+0x1]
c001dd64:	89 15 10 db 02 c0    	mov    DWORD PTR ds:0xc002db10,edx
c001dd6a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd6e:	89 02                	mov    DWORD PTR [edx],eax
c001dd70:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dd78:	83 ec 0c             	sub    esp,0xc
c001dd7b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd7f:	e8 bc 1a ff ff       	call   c000f840 <malloc>
c001dd84:	83 c4 10             	add    esp,0x10
c001dd87:	89 c3                	mov    ebx,eax
c001dd89:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd8e:	83 ec 08             	sub    esp,0x8
c001dd91:	50                   	push   eax
c001dd92:	53                   	push   ebx
c001dd93:	e8 ca 4a ff ff       	call   c0012862 <VAS::VAS(bool)>
c001dd98:	83 c4 10             	add    esp,0x10
c001dd9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dda5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ddb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ddbb:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ddc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddcb:	85 c0                	test   eax,eax
c001ddcd:	74 42                	je     c001de11 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001ddcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddd9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde3:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dde9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dded:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddf3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ddf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddfd:	05 0c 01 00 00       	add    eax,0x10c
c001de02:	83 ec 08             	sub    esp,0x8
c001de05:	52                   	push   edx
c001de06:	50                   	push   eax
c001de07:	e8 28 2a fe ff       	call   c0000834 <strcpy>
c001de0c:	83 c4 10             	add    esp,0x10
c001de0f:	eb 63                	jmp    c001de74 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001de11:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001de19:	83 ec 0c             	sub    esp,0xc
c001de1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001de20:	e8 1b 1a ff ff       	call   c000f840 <malloc>
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	89 c3                	mov    ebx,eax
c001de2a:	83 ec 08             	sub    esp,0x8
c001de2d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de31:	53                   	push   ebx
c001de32:	e8 e9 33 ff ff       	call   c0011220 <VgaText::VgaText(char const*)>
c001de37:	83 c4 10             	add    esp,0x10
c001de3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de3e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de48:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de4e:	83 ec 0c             	sub    esp,0xc
c001de51:	50                   	push   eax
c001de52:	e8 bc 27 ff ff       	call   c0010613 <addToTerminalCycle(VgaText*)>
c001de57:	83 c4 10             	add    esp,0x10
c001de5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de5e:	05 0c 01 00 00       	add    eax,0x10c
c001de63:	83 ec 08             	sub    esp,0x8
c001de66:	68 6b c3 02 c0       	push   0xc002c36b
c001de6b:	50                   	push   eax
c001de6c:	e8 c3 29 fe ff       	call   c0000834 <strcpy>
c001de71:	83 c4 10             	add    esp,0x10
c001de74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de78:	83 c0 0c             	add    eax,0xc
c001de7b:	83 ec 08             	sub    esp,0x8
c001de7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de82:	50                   	push   eax
c001de83:	e8 ac 29 fe ff       	call   c0000834 <strcpy>
c001de88:	83 c4 10             	add    esp,0x10
c001de8b:	83 ec 08             	sub    esp,0x8
c001de8e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de96:	e8 1d fc ff ff       	call   c001dab8 <Process::addArgs(char**)>
c001de9b:	83 c4 10             	add    esp,0x10
c001de9e:	90                   	nop
c001de9f:	83 c4 24             	add    esp,0x24
c001dea2:	5b                   	pop    ebx
c001dea3:	5e                   	pop    esi
c001dea4:	c3                   	ret    

c001dea5 <disableIRQs()>:
c001dea5:	fa                   	cli    
c001dea6:	ff 05 ec 1a 03 c0    	inc    DWORD PTR ds:0xc0031aec
c001deac:	c3                   	ret    

c001dead <getIRQNestingLevel()>:
c001dead:	a1 ec 1a 03 c0       	mov    eax,ds:0xc0031aec
c001deb2:	c3                   	ret    

c001deb3 <enableIRQs()>:
c001deb3:	a1 ec 1a 03 c0       	mov    eax,ds:0xc0031aec
c001deb8:	48                   	dec    eax
c001deb9:	a3 ec 1a 03 c0       	mov    ds:0xc0031aec,eax
c001debe:	75 01                	jne    c001dec1 <enableIRQs()+0xe>
c001dec0:	fb                   	sti    
c001dec1:	c3                   	ret    

c001dec2 <lockScheduler()>:
c001dec2:	eb e1                	jmp    c001dea5 <disableIRQs()>

c001dec4 <unlockScheduler()>:
c001dec4:	eb ed                	jmp    c001deb3 <enableIRQs()>

c001dec6 <userModeEntryPoint(void*)>:
c001dec6:	83 ec 0c             	sub    esp,0xc
c001dec9:	e8 f6 ff ff ff       	call   c001dec4 <unlockScheduler()>
c001dece:	fb                   	sti    
c001decf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ded4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ded7:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dedd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dee1:	83 c4 0c             	add    esp,0xc
c001dee4:	e9 41 24 fe ff       	jmp    c000032a <goToUsermode>

c001dee9 <lockStuff()>:
c001dee9:	e8 b7 ff ff ff       	call   c001dea5 <disableIRQs()>
c001deee:	ff 05 e8 1a 03 c0    	inc    DWORD PTR ds:0xc0031ae8
c001def4:	c3                   	ret    

c001def5 <taskStartupFunction>:
c001def5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001defa:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001defd:	c3                   	ret    

c001defe <updateTimeUsed()>:
c001defe:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c001df03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df09:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001df10:	74 50                	je     c001df62 <updateTimeUsed()+0x64>
c001df12:	57                   	push   edi
c001df13:	56                   	push   esi
c001df14:	53                   	push   ebx
c001df15:	0f 31                	rdtsc  
c001df17:	89 c1                	mov    ecx,eax
c001df19:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c001df1e:	2b 0d 18 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b18
c001df24:	89 d3                	mov    ebx,edx
c001df26:	89 0d 20 1b 03 c0    	mov    DWORD PTR ds:0xc0031b20,ecx
c001df2c:	1b 1d 1c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b1c
c001df32:	a3 18 1b 03 c0       	mov    ds:0xc0031b18,eax
c001df37:	89 1d 24 1b 03 c0    	mov    DWORD PTR ds:0xc0031b24,ebx
c001df3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df42:	89 15 2c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b2c,edx
c001df48:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df4b:	89 15 1c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b1c,edx
c001df51:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df54:	01 f1                	add    ecx,esi
c001df56:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df59:	11 fb                	adc    ebx,edi
c001df5b:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df5e:	5b                   	pop    ebx
c001df5f:	5e                   	pop    esi
c001df60:	5f                   	pop    edi
c001df61:	c3                   	ret    
c001df62:	c3                   	ret    

c001df63 <switchToThread(ThreadControlBlock*)>:
c001df63:	53                   	push   ebx
c001df64:	83 ec 08             	sub    esp,0x8
c001df67:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001df6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df70:	85 c0                	test   eax,eax
c001df72:	75 30                	jne    c001dfa4 <switchToThread(ThreadControlBlock*)+0x41>
c001df74:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df77:	3c ff                	cmp    al,0xff
c001df79:	74 25                	je     c001dfa0 <switchToThread(ThreadControlBlock*)+0x3d>
c001df7b:	0f b6 d0             	movzx  edx,al
c001df7e:	b8 84 03 00 00       	mov    eax,0x384
c001df83:	29 d0                	sub    eax,edx
c001df85:	c1 e0 10             	shl    eax,0x10
c001df88:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df8b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df8e:	e8 6b ff ff ff       	call   c001defe <updateTimeUsed()>
c001df93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df97:	83 c4 08             	add    esp,0x8
c001df9a:	5b                   	pop    ebx
c001df9b:	e9 c2 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dfa0:	31 c0                	xor    eax,eax
c001dfa2:	eb e7                	jmp    c001df8b <switchToThread(ThreadControlBlock*)+0x28>
c001dfa4:	c7 05 e4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ae4,0x1
c001dfae:	83 c4 08             	add    esp,0x8
c001dfb1:	5b                   	pop    ebx
c001dfb2:	c3                   	ret    
c001dfb3:	90                   	nop

c001dfb4 <Semaphore::Semaphore(int)>:
c001dfb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfbc:	89 10                	mov    DWORD PTR [eax],edx
c001dfbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfc2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dfc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfcd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dfd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfd8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dfdf:	90                   	nop
c001dfe0:	c3                   	ret    
c001dfe1:	90                   	nop

c001dfe2 <Mutex::Mutex()>:
c001dfe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfe6:	6a 01                	push   0x1
c001dfe8:	50                   	push   eax
c001dfe9:	e8 c6 ff ff ff       	call   c001dfb4 <Semaphore::Semaphore(int)>
c001dfee:	83 c4 08             	add    esp,0x8
c001dff1:	90                   	nop
c001dff2:	c3                   	ret    
c001dff3:	90                   	nop

c001dff4 <Process::createThread(void (*)(void*), void*, int)>:
c001dff4:	55                   	push   ebp
c001dff5:	31 c9                	xor    ecx,ecx
c001dff7:	57                   	push   edi
c001dff8:	56                   	push   esi
c001dff9:	53                   	push   ebx
c001dffa:	83 ec 1c             	sub    esp,0x1c
c001dffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e001:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e008:	89 f2                	mov    edx,esi
c001e00a:	0f b7 c2             	movzx  eax,dx
c001e00d:	83 e2 01             	and    edx,0x1
c001e010:	74 14                	je     c001e026 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001e012:	d1 f8                	sar    eax,1
c001e014:	41                   	inc    ecx
c001e015:	89 c2                	mov    edx,eax
c001e017:	83 f9 10             	cmp    ecx,0x10
c001e01a:	75 ee                	jne    c001e00a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e01c:	83 c4 1c             	add    esp,0x1c
c001e01f:	31 c0                	xor    eax,eax
c001e021:	5b                   	pop    ebx
c001e022:	5e                   	pop    esi
c001e023:	5f                   	pop    edi
c001e024:	5d                   	pop    ebp
c001e025:	c3                   	ret    
c001e026:	83 ec 08             	sub    esp,0x8
c001e029:	b8 01 00 00 00       	mov    eax,0x1
c001e02e:	d3 e0                	shl    eax,cl
c001e030:	09 c6                	or     esi,eax
c001e032:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e038:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e03f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001e042:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e045:	01 ce                	add    esi,ecx
c001e047:	89 f0                	mov    eax,esi
c001e049:	c1 e0 05             	shl    eax,0x5
c001e04c:	01 c6                	add    esi,eax
c001e04e:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e051:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e057:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e05d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e061:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e067:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e06d:	89 ca                	mov    edx,ecx
c001e06f:	f7 da                	neg    edx
c001e071:	c1 e2 15             	shl    edx,0x15
c001e074:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e07a:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e080:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e084:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e08e:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e094:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e098:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e09e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e0a8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e0b2:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e0b9:	50                   	push   eax
c001e0ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e0be:	68 08 1b 03 c0       	push   0xc0031b08
c001e0c3:	e8 18 ab 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0c8:	83 c4 10             	add    esp,0x10
c001e0cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0cf:	83 c4 1c             	add    esp,0x1c
c001e0d2:	5b                   	pop    ebx
c001e0d3:	5e                   	pop    esi
c001e0d4:	5f                   	pop    edi
c001e0d5:	5d                   	pop    ebp
c001e0d6:	c3                   	ret    
c001e0d7:	90                   	nop

c001e0d8 <Process::createUserThread()>:
c001e0d8:	83 ec 0c             	sub    esp,0xc
c001e0db:	68 80 00 00 00       	push   0x80
c001e0e0:	6a 00                	push   0x0
c001e0e2:	68 c6 de 01 c0       	push   0xc001dec6
c001e0e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0eb:	e8 04 ff ff ff       	call   c001dff4 <Process::createThread(void (*)(void*), void*, int)>
c001e0f0:	83 c4 1c             	add    esp,0x1c
c001e0f3:	c3                   	ret    

c001e0f4 <setupMultitasking(void (*)())>:
c001e0f4:	56                   	push   esi
c001e0f5:	53                   	push   ebx
c001e0f6:	53                   	push   ebx
c001e0f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0fb:	eb 10                	jmp    c001e10d <setupMultitasking(void (*)())+0x19>
c001e0fd:	83 ec 0c             	sub    esp,0xc
c001e100:	68 08 1b 03 c0       	push   0xc0031b08
c001e105:	e8 28 aa 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e10a:	83 c4 10             	add    esp,0x10
c001e10d:	83 ec 0c             	sub    esp,0xc
c001e110:	68 08 1b 03 c0       	push   0xc0031b08
c001e115:	e8 fc a9 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e11a:	83 c4 10             	add    esp,0x10
c001e11d:	84 c0                	test   al,al
c001e11f:	74 dc                	je     c001e0fd <setupMultitasking(void (*)())+0x9>
c001e121:	83 ec 0c             	sub    esp,0xc
c001e124:	68 3f 07 00 00       	push   0x73f
c001e129:	e8 12 17 ff ff       	call   c000f840 <malloc>
c001e12e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e135:	89 c3                	mov    ebx,eax
c001e137:	6a 00                	push   0x0
c001e139:	68 6f c3 02 c0       	push   0xc002c36f
c001e13e:	6a 01                	push   0x1
c001e140:	50                   	push   eax
c001e141:	e8 b0 fb ff ff       	call   c001dcf6 <Process::Process(bool, char const*, Process*, char**)>
c001e146:	83 c4 18             	add    esp,0x18
c001e149:	89 1d 14 1b 03 c0    	mov    DWORD PTR ds:0xc0031b14,ebx
c001e14f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e155:	68 90 c4 02 c0       	push   0xc002c490
c001e15a:	e8 d7 4e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e15f:	58                   	pop    eax
c001e160:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e166:	e8 2a 2c ff ff       	call   c0010d95 <setActiveTerminal(VgaText*)>
c001e16b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e173:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e179:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e17c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e186:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e18c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e192:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e19c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e1a6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e1b0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e1b6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e1bc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e1c6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e1cc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e1d6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e1dc:	5a                   	pop    edx
c001e1dd:	59                   	pop    ecx
c001e1de:	68 6b c3 02 c0       	push   0xc002c36b
c001e1e3:	50                   	push   eax
c001e1e4:	e8 4b 26 fe ff       	call   c0000834 <strcpy>
c001e1e9:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1f0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1f4:	83 c4 14             	add    esp,0x14
c001e1f7:	5b                   	pop    ebx
c001e1f8:	5e                   	pop    esi
c001e1f9:	e9 56 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1fe <schedule()>:
c001e1fe:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001e203:	85 c0                	test   eax,eax
c001e205:	74 0b                	je     c001e212 <schedule()+0x14>
c001e207:	c7 05 e4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ae4,0x1
c001e211:	c3                   	ret    
c001e212:	53                   	push   ebx
c001e213:	83 ec 14             	sub    esp,0x14
c001e216:	68 08 1b 03 c0       	push   0xc0031b08
c001e21b:	e8 f6 a8 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e220:	83 c4 10             	add    esp,0x10
c001e223:	84 c0                	test   al,al
c001e225:	75 38                	jne    c001e25f <schedule()+0x61>
c001e227:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e22c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e22f:	4a                   	dec    edx
c001e230:	74 32                	je     c001e264 <schedule()+0x66>
c001e232:	83 ec 0c             	sub    esp,0xc
c001e235:	68 08 1b 03 c0       	push   0xc0031b08
c001e23a:	e8 cf a8 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e23f:	c7 04 24 08 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b08
c001e246:	89 c3                	mov    ebx,eax
c001e248:	e8 e5 a8 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e24d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e254:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e257:	e8 07 fd ff ff       	call   c001df63 <switchToThread(ThreadControlBlock*)>
c001e25c:	83 c4 10             	add    esp,0x10
c001e25f:	83 c4 08             	add    esp,0x8
c001e262:	5b                   	pop    ebx
c001e263:	c3                   	ret    
c001e264:	83 ec 08             	sub    esp,0x8
c001e267:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e26e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e274:	68 08 1b 03 c0       	push   0xc0031b08
c001e279:	e8 62 a9 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e27e:	83 c4 10             	add    esp,0x10
c001e281:	eb af                	jmp    c001e232 <schedule()+0x34>

c001e283 <unlockStuff()>:
c001e283:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001e288:	48                   	dec    eax
c001e289:	a3 e8 1a 03 c0       	mov    ds:0xc0031ae8,eax
c001e28e:	75 09                	jne    c001e299 <unlockStuff()+0x16>
c001e290:	a1 e4 1a 03 c0       	mov    eax,ds:0xc0031ae4
c001e295:	85 c0                	test   eax,eax
c001e297:	75 05                	jne    c001e29e <unlockStuff()+0x1b>
c001e299:	e9 15 fc ff ff       	jmp    c001deb3 <enableIRQs()>
c001e29e:	83 ec 0c             	sub    esp,0xc
c001e2a1:	c7 05 e4 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ae4,0x0
c001e2ab:	e8 4e ff ff ff       	call   c001e1fe <schedule()>
c001e2b0:	83 c4 0c             	add    esp,0xc
c001e2b3:	e9 fb fb ff ff       	jmp    c001deb3 <enableIRQs()>

c001e2b8 <Semaphore::tryAcquire()>:
c001e2b8:	83 ec 0c             	sub    esp,0xc
c001e2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2bf:	e8 25 fc ff ff       	call   c001dee9 <lockStuff()>
c001e2c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2c7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2c9:	7c 0b                	jl     c001e2d6 <Semaphore::tryAcquire()+0x1e>
c001e2cb:	e8 b3 ff ff ff       	call   c001e283 <unlockStuff()>
c001e2d0:	31 c0                	xor    eax,eax
c001e2d2:	83 c4 0c             	add    esp,0xc
c001e2d5:	c3                   	ret    
c001e2d6:	42                   	inc    edx
c001e2d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2da:	e8 a4 ff ff ff       	call   c001e283 <unlockStuff()>
c001e2df:	b0 01                	mov    al,0x1
c001e2e1:	83 c4 0c             	add    esp,0xc
c001e2e4:	c3                   	ret    
c001e2e5:	90                   	nop

c001e2e6 <Semaphore::assertLocked(char const*)>:
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2f1:	e8 f3 fb ff ff       	call   c001dee9 <lockStuff()>
c001e2f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2f8:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e2fb:	7c 05                	jl     c001e302 <Semaphore::assertLocked(char const*)+0x1c>
c001e2fd:	83 c4 0c             	add    esp,0xc
c001e300:	eb 81                	jmp    c001e283 <unlockStuff()>
c001e302:	83 ec 0c             	sub    esp,0xc
c001e305:	52                   	push   edx
c001e306:	e8 dc c3 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001e30b:	83 c4 10             	add    esp,0x10
c001e30e:	83 c4 0c             	add    esp,0xc
c001e311:	e9 6d ff ff ff       	jmp    c001e283 <unlockStuff()>

c001e316 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e316:	83 ec 0c             	sub    esp,0xc
c001e319:	e8 8f fb ff ff       	call   c001dead <getIRQNestingLevel()>
c001e31e:	83 ec 08             	sub    esp,0x8
c001e321:	50                   	push   eax
c001e322:	68 c4 c4 02 c0       	push   0xc002c4c4
c001e327:	e8 0a 4d ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e32c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e330:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e335:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e338:	e8 c1 fe ff ff       	call   c001e1fe <schedule()>
c001e33d:	e8 82 fb ff ff       	call   c001dec4 <unlockScheduler()>
c001e342:	e8 66 fb ff ff       	call   c001dead <getIRQNestingLevel()>
c001e347:	5a                   	pop    edx
c001e348:	59                   	pop    ecx
c001e349:	50                   	push   eax
c001e34a:	68 f8 c4 02 c0       	push   0xc002c4f8
c001e34f:	e8 e2 4c ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e354:	83 c4 1c             	add    esp,0x1c
c001e357:	c3                   	ret    

c001e358 <blockTask(TaskState)>:
c001e358:	83 ec 0c             	sub    esp,0xc
c001e35b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e35f:	e8 5e fb ff ff       	call   c001dec2 <lockScheduler()>
c001e364:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e369:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e36c:	e8 8d fe ff ff       	call   c001e1fe <schedule()>
c001e371:	83 c4 0c             	add    esp,0xc
c001e374:	e9 4b fb ff ff       	jmp    c001dec4 <unlockScheduler()>

c001e379 <waitTask(int, int*, int)>:
c001e379:	83 ec 18             	sub    esp,0x18
c001e37c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e381:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e385:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e388:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e38c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e391:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e394:	6a 07                	push   0x7
c001e396:	e8 bd ff ff ff       	call   c001e358 <blockTask(TaskState)>
c001e39b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3a0:	83 c4 10             	add    esp,0x10
c001e3a3:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e3a6:	85 d2                	test   edx,edx
c001e3a8:	74 0a                	je     c001e3b4 <waitTask(int, int*, int)+0x3b>
c001e3aa:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e3ad:	89 02                	mov    DWORD PTR [edx],eax
c001e3af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3b4:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e3b7:	83 c4 0c             	add    esp,0xc
c001e3ba:	c3                   	ret    

c001e3bb <nanoSleepUntil(unsigned long long)>:
c001e3bb:	83 ec 0c             	sub    esp,0xc
c001e3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3c6:	3b 05 30 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec30
c001e3cc:	89 d1                	mov    ecx,edx
c001e3ce:	1b 0d 34 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec34
c001e3d4:	73 04                	jae    c001e3da <nanoSleepUntil(unsigned long long)+0x1f>
c001e3d6:	83 c4 0c             	add    esp,0xc
c001e3d9:	c3                   	ret    
c001e3da:	e8 0a fb ff ff       	call   c001dee9 <lockStuff()>
c001e3df:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3e5:	83 ec 08             	sub    esp,0x8
c001e3e8:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e3eb:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3ee:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e3f4:	68 fc 1a 03 c0       	push   0xc0031afc
c001e3f9:	e8 e2 a7 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3fe:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e405:	e8 4e ff ff ff       	call   c001e358 <blockTask(TaskState)>
c001e40a:	83 c4 1c             	add    esp,0x1c
c001e40d:	e9 71 fe ff ff       	jmp    c001e283 <unlockStuff()>

c001e412 <nanoSleep(unsigned long long)>:
c001e412:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c001e417:	8b 15 34 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec34
c001e41d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e421:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e425:	eb 94                	jmp    c001e3bb <nanoSleepUntil(unsigned long long)>

c001e427 <sleep(unsigned long long)>:
c001e427:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e42f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e434:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e438:	01 ca                	add    edx,ecx
c001e43a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e43e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e442:	eb ce                	jmp    c001e412 <nanoSleep(unsigned long long)>

c001e444 <Semaphore::acquire()>:
c001e444:	83 ec 0c             	sub    esp,0xc
c001e447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e44b:	e8 99 fa ff ff       	call   c001dee9 <lockStuff()>
c001e450:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e453:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e455:	7d 0c                	jge    c001e463 <Semaphore::acquire()+0x1f>
c001e457:	42                   	inc    edx
c001e458:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e45b:	83 c4 0c             	add    esp,0xc
c001e45e:	e9 20 fe ff ff       	jmp    c001e283 <unlockStuff()>
c001e463:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e469:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e470:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e473:	85 d2                	test   edx,edx
c001e475:	74 2a                	je     c001e4a1 <Semaphore::acquire()+0x5d>
c001e477:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e47a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e480:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e483:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e489:	83 ec 0c             	sub    esp,0xc
c001e48c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e48f:	6a 05                	push   0x5
c001e491:	e8 c2 fe ff ff       	call   c001e358 <blockTask(TaskState)>
c001e496:	83 c4 10             	add    esp,0x10
c001e499:	83 c4 0c             	add    esp,0xc
c001e49c:	e9 e2 fd ff ff       	jmp    c001e283 <unlockStuff()>
c001e4a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e4aa:	eb d7                	jmp    c001e483 <Semaphore::acquire()+0x3f>

c001e4ac <taskReturned>:
c001e4ac:	83 ec 18             	sub    esp,0x18
c001e4af:	68 2c c5 02 c0       	push   0xc002c52c
c001e4b4:	e8 2e c2 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001e4b9:	83 c4 10             	add    esp,0x10
c001e4bc:	83 ec 0c             	sub    esp,0xc
c001e4bf:	6a 02                	push   0x2
c001e4c1:	e8 92 fe ff ff       	call   c001e358 <blockTask(TaskState)>
c001e4c6:	e8 f7 f9 ff ff       	call   c001dec2 <lockScheduler()>
c001e4cb:	e8 2e fd ff ff       	call   c001e1fe <schedule()>
c001e4d0:	e8 ef f9 ff ff       	call   c001dec4 <unlockScheduler()>
c001e4d5:	83 c4 10             	add    esp,0x10
c001e4d8:	eb e2                	jmp    c001e4bc <taskReturned+0x10>

c001e4da <unblockTask(ThreadControlBlock*)>:
c001e4da:	53                   	push   ebx
c001e4db:	83 ec 08             	sub    esp,0x8
c001e4de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4e2:	e8 db f9 ff ff       	call   c001dec2 <lockScheduler()>
c001e4e7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4ea:	85 c0                	test   eax,eax
c001e4ec:	74 5c                	je     c001e54a <unblockTask(ThreadControlBlock*)+0x70>
c001e4ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4f1:	48                   	dec    eax
c001e4f2:	74 31                	je     c001e525 <unblockTask(ThreadControlBlock*)+0x4b>
c001e4f4:	83 ec 0c             	sub    esp,0xc
c001e4f7:	68 08 1b 03 c0       	push   0xc0031b08
c001e4fc:	e8 0d a6 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e501:	83 c4 10             	add    esp,0x10
c001e504:	85 c0                	test   eax,eax
c001e506:	75 17                	jne    c001e51f <unblockTask(ThreadControlBlock*)+0x45>
c001e508:	eb 65                	jmp    c001e56f <unblockTask(ThreadControlBlock*)+0x95>
c001e50a:	83 ec 08             	sub    esp,0x8
c001e50d:	50                   	push   eax
c001e50e:	68 08 1b 03 c0       	push   0xc0031b08
c001e513:	e8 d0 a8 00 00       	call   c0028de8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e518:	83 c4 10             	add    esp,0x10
c001e51b:	85 c0                	test   eax,eax
c001e51d:	74 50                	je     c001e56f <unblockTask(ThreadControlBlock*)+0x95>
c001e51f:	39 c3                	cmp    ebx,eax
c001e521:	75 e7                	jne    c001e50a <unblockTask(ThreadControlBlock*)+0x30>
c001e523:	eb 1c                	jmp    c001e541 <unblockTask(ThreadControlBlock*)+0x67>
c001e525:	83 ec 0c             	sub    esp,0xc
c001e528:	68 1c c6 02 c0       	push   0xc002c61c
c001e52d:	e8 04 4b ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e532:	c7 04 24 a8 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5a8
c001e539:	e8 f8 4a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e53e:	83 c4 10             	add    esp,0x10
c001e541:	83 c4 08             	add    esp,0x8
c001e544:	5b                   	pop    ebx
c001e545:	e9 7a f9 ff ff       	jmp    c001dec4 <unlockScheduler()>
c001e54a:	83 ec 0c             	sub    esp,0xc
c001e54d:	68 60 c5 02 c0       	push   0xc002c560
c001e552:	e8 df 4a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e557:	c7 04 24 a8 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5a8
c001e55e:	e8 d3 4a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e563:	83 c4 10             	add    esp,0x10
c001e566:	83 c4 08             	add    esp,0x8
c001e569:	5b                   	pop    ebx
c001e56a:	e9 55 f9 ff ff       	jmp    c001dec4 <unlockScheduler()>
c001e56f:	83 ec 08             	sub    esp,0x8
c001e572:	53                   	push   ebx
c001e573:	68 08 1b 03 c0       	push   0xc0031b08
c001e578:	e8 63 a6 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e57d:	83 c4 10             	add    esp,0x10
c001e580:	83 c4 08             	add    esp,0x8
c001e583:	5b                   	pop    ebx
c001e584:	e9 3b f9 ff ff       	jmp    c001dec4 <unlockScheduler()>

c001e589 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e589:	55                   	push   ebp
c001e58a:	57                   	push   edi
c001e58b:	56                   	push   esi
c001e58c:	53                   	push   ebx
c001e58d:	83 ec 1c             	sub    esp,0x1c
c001e590:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e594:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e597:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e59d:	85 ff                	test   edi,edi
c001e59f:	7e 20                	jle    c001e5c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e5a1:	31 f6                	xor    esi,esi
c001e5a3:	83 ec 0c             	sub    esp,0xc
c001e5a6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e5ad:	46                   	inc    esi
c001e5ae:	e8 9d 12 ff ff       	call   c000f850 <free>
c001e5b3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b6:	83 c4 10             	add    esp,0x10
c001e5b9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e5bf:	7f e2                	jg     c001e5a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e5c1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e5cb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e5d0:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e5d3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e5d6:	d3 c0                	rol    eax,cl
c001e5d8:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5df:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5e2:	89 f7                	mov    edi,esi
c001e5e4:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e5ec:	0f 85 74 01 00 00    	jne    c001e766 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e5f2:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e5f8:	85 ed                	test   ebp,ebp
c001e5fa:	74 1b                	je     c001e617 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e5fc:	83 ec 0c             	sub    esp,0xc
c001e5ff:	55                   	push   ebp
c001e600:	e8 4f be ff ff       	call   c001a454 <EnvVarContainer::~EnvVarContainer()>
c001e605:	59                   	pop    ecx
c001e606:	5e                   	pop    esi
c001e607:	6a 0c                	push   0xc
c001e609:	55                   	push   ebp
c001e60a:	e8 47 49 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c001e60f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e612:	83 c4 10             	add    esp,0x10
c001e615:	89 f7                	mov    edi,esi
c001e617:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e61d:	85 c0                	test   eax,eax
c001e61f:	0f 84 aa 00 00 00    	je     c001e6cf <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e625:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e628:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e62c:	31 c9                	xor    ecx,ecx
c001e62e:	eb 10                	jmp    c001e640 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e630:	41                   	inc    ecx
c001e631:	83 f9 10             	cmp    ecx,0x10
c001e634:	0f 84 95 00 00 00    	je     c001e6cf <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e63a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e640:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e647:	d3 fa                	sar    edx,cl
c001e649:	83 e2 01             	and    edx,0x1
c001e64c:	74 e2                	je     c001e630 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e64e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e651:	01 ca                	add    edx,ecx
c001e653:	89 d5                	mov    ebp,edx
c001e655:	c1 e5 05             	shl    ebp,0x5
c001e658:	01 ea                	add    edx,ebp
c001e65a:	01 d0                	add    eax,edx
c001e65c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e662:	83 fd 07             	cmp    ebp,0x7
c001e665:	75 c9                	jne    c001e630 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e667:	05 40 02 00 00       	add    eax,0x240
c001e66c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e66f:	83 fd ff             	cmp    ebp,0xffffffff
c001e672:	0f 8c 08 01 00 00    	jl     c001e780 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e678:	0f 84 b9 01 00 00    	je     c001e837 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e67e:	85 ed                	test   ebp,ebp
c001e680:	0f 84 a0 01 00 00    	je     c001e826 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e686:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e688:	75 a6                	jne    c001e630 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e68a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e690:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e694:	01 d0                	add    eax,edx
c001e696:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e69a:	83 ec 0c             	sub    esp,0xc
c001e69d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e6a3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6a6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e6ac:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e6b3:	50                   	push   eax
c001e6b4:	e8 21 fe ff ff       	call   c001e4da <unblockTask(ThreadControlBlock*)>
c001e6b9:	83 c4 10             	add    esp,0x10
c001e6bc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6c3:	89 f7                	mov    edi,esi
c001e6c5:	41                   	inc    ecx
c001e6c6:	83 f9 10             	cmp    ecx,0x10
c001e6c9:	0f 85 6b ff ff ff    	jne    c001e63a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e6cf:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e6d5:	85 c0                	test   eax,eax
c001e6d7:	74 5d                	je     c001e736 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6d9:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6df:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e6e5:	74 4f                	je     c001e736 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6e7:	83 ec 0c             	sub    esp,0xc
c001e6ea:	68 08 1b 03 c0       	push   0xc0031b08
c001e6ef:	e8 1a a4 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6f4:	c7 04 24 08 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b08
c001e6fb:	89 c7                	mov    edi,eax
c001e6fd:	e8 14 a4 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e702:	83 c4 10             	add    esp,0x10
c001e705:	84 c0                	test   al,al
c001e707:	0f 84 e4 00 00 00    	je     c001e7f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e70d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e710:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e716:	85 d2                	test   edx,edx
c001e718:	74 0f                	je     c001e729 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e71a:	83 ec 0c             	sub    esp,0xc
c001e71d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e71f:	52                   	push   edx
c001e720:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e723:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e726:	83 c4 10             	add    esp,0x10
c001e729:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e733:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e736:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e73c:	85 db                	test   ebx,ebx
c001e73e:	74 16                	je     c001e756 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e740:	83 ec 0c             	sub    esp,0xc
c001e743:	53                   	push   ebx
c001e744:	e8 05 3b ff ff       	call   c001224e <VAS::~VAS()>
c001e749:	58                   	pop    eax
c001e74a:	5a                   	pop    edx
c001e74b:	6a 10                	push   0x10
c001e74d:	53                   	push   ebx
c001e74e:	e8 03 48 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c001e753:	83 c4 10             	add    esp,0x10
c001e756:	83 ec 0c             	sub    esp,0xc
c001e759:	68 76 c3 02 c0       	push   0xc002c376
c001e75e:	e8 d3 48 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e763:	83 c4 10             	add    esp,0x10
c001e766:	83 ec 08             	sub    esp,0x8
c001e769:	68 3f 07 00 00       	push   0x73f
c001e76e:	68 84 c3 02 c0       	push   0xc002c384
c001e773:	e8 be 48 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e778:	83 c4 2c             	add    esp,0x2c
c001e77b:	5b                   	pop    ebx
c001e77c:	5e                   	pop    esi
c001e77d:	5f                   	pop    edi
c001e77e:	5d                   	pop    ebp
c001e77f:	c3                   	ret    
c001e780:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e784:	83 ec 0c             	sub    esp,0xc
c001e787:	68 60 c6 02 c0       	push   0xc002c660
c001e78c:	e8 56 bf ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001e791:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e794:	83 c4 10             	add    esp,0x10
c001e797:	89 f7                	mov    edi,esi
c001e799:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e79d:	e9 8e fe ff ff       	jmp    c001e630 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7a2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e7a8:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e7ae:	75 1c                	jne    c001e7cc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7b0:	83 ec 0c             	sub    esp,0xc
c001e7b3:	68 c8 c6 02 c0       	push   0xc002c6c8
c001e7b8:	e8 79 48 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e7bd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e7c4:	e8 8f fb ff ff       	call   c001e358 <blockTask(TaskState)>
c001e7c9:	83 c4 10             	add    esp,0x10
c001e7cc:	83 ec 08             	sub    esp,0x8
c001e7cf:	56                   	push   esi
c001e7d0:	68 08 1b 03 c0       	push   0xc0031b08
c001e7d5:	e8 06 a4 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7da:	c7 04 24 08 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b08
c001e7e1:	e8 28 a3 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7e6:	83 c4 10             	add    esp,0x10
c001e7e9:	39 f8                	cmp    eax,edi
c001e7eb:	0f 84 1c ff ff ff    	je     c001e70d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e7f1:	83 ec 0c             	sub    esp,0xc
c001e7f4:	68 08 1b 03 c0       	push   0xc0031b08
c001e7f9:	e8 10 a3 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7fe:	c7 04 24 08 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b08
c001e805:	89 c6                	mov    esi,eax
c001e807:	e8 26 a3 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e80c:	83 c4 10             	add    esp,0x10
c001e80f:	39 f3                	cmp    ebx,esi
c001e811:	74 b9                	je     c001e7cc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e813:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e816:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e819:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e81f:	75 ab                	jne    c001e7cc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e821:	e9 7c ff ff ff       	jmp    c001e7a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e826:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e82a:	83 ec 0c             	sub    esp,0xc
c001e82d:	68 94 c6 02 c0       	push   0xc002c694
c001e832:	e9 55 ff ff ff       	jmp    c001e78c <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e837:	8b 36                	mov    esi,DWORD PTR [esi]
c001e839:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e83d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e840:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e843:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e849:	01 d7                	add    edi,edx
c001e84b:	89 f8                	mov    eax,edi
c001e84d:	e9 44 fe ff ff       	jmp    c001e696 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e852 <cleanerTaskFunction(void*)>:
c001e852:	53                   	push   ebx
c001e853:	83 ec 08             	sub    esp,0x8
c001e856:	e8 69 f6 ff ff       	call   c001dec4 <unlockScheduler()>
c001e85b:	e8 62 f6 ff ff       	call   c001dec2 <lockScheduler()>
c001e860:	80 3d cc 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031acc,0x0
c001e867:	0f 85 8e 00 00 00    	jne    c001e8fb <cleanerTaskFunction(void*)+0xa9>
c001e86d:	83 ec 0c             	sub    esp,0xc
c001e870:	6a 02                	push   0x2
c001e872:	e8 9f fa ff ff       	call   c001e316 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e877:	83 c4 10             	add    esp,0x10
c001e87a:	c6 05 cc 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031acc,0x0
c001e881:	e8 63 f6 ff ff       	call   c001dee9 <lockStuff()>
c001e886:	e8 37 f6 ff ff       	call   c001dec2 <lockScheduler()>
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	68 f0 1a 03 c0       	push   0xc0031af0
c001e893:	e8 7e a2 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e898:	83 c4 10             	add    esp,0x10
c001e89b:	84 c0                	test   al,al
c001e89d:	75 40                	jne    c001e8df <cleanerTaskFunction(void*)+0x8d>
c001e89f:	83 ec 0c             	sub    esp,0xc
c001e8a2:	68 f0 1a 03 c0       	push   0xc0031af0
c001e8a7:	e8 62 a2 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8ac:	c7 04 24 f0 1a 03 c0 	mov    DWORD PTR [esp],0xc0031af0
c001e8b3:	89 c3                	mov    ebx,eax
c001e8b5:	e8 78 a2 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8ba:	c7 04 24 9a c3 02 c0 	mov    DWORD PTR [esp],0xc002c39a
c001e8c1:	e8 70 47 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e8c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8c9:	e8 bb fc ff ff       	call   c001e589 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e8ce:	c7 04 24 b3 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3b3
c001e8d5:	e8 5c 47 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e8da:	83 c4 10             	add    esp,0x10
c001e8dd:	eb ac                	jmp    c001e88b <cleanerTaskFunction(void*)+0x39>
c001e8df:	e8 e0 f5 ff ff       	call   c001dec4 <unlockScheduler()>
c001e8e4:	e8 9a f9 ff ff       	call   c001e283 <unlockStuff()>
c001e8e9:	e8 d4 f5 ff ff       	call   c001dec2 <lockScheduler()>
c001e8ee:	80 3d cc 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031acc,0x0
c001e8f5:	0f 84 72 ff ff ff    	je     c001e86d <cleanerTaskFunction(void*)+0x1b>
c001e8fb:	e8 c4 f5 ff ff       	call   c001dec4 <unlockScheduler()>
c001e900:	e9 75 ff ff ff       	jmp    c001e87a <cleanerTaskFunction(void*)+0x28>

c001e905 <terminateTask(int)>:
c001e905:	83 ec 14             	sub    esp,0x14
c001e908:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e90d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e910:	83 c0 0c             	add    eax,0xc
c001e913:	50                   	push   eax
c001e914:	68 f0 c6 02 c0       	push   0xc002c6f0
c001e919:	e8 18 47 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e91e:	e8 c6 f5 ff ff       	call   c001dee9 <lockStuff()>
c001e923:	e8 9a f5 ff ff       	call   c001dec2 <lockScheduler()>
c001e928:	c7 04 24 c6 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3c6
c001e92f:	e8 02 47 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e934:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e938:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e93d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e940:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e945:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e948:	5a                   	pop    edx
c001e949:	59                   	pop    ecx
c001e94a:	50                   	push   eax
c001e94b:	68 f0 1a 03 c0       	push   0xc0031af0
c001e950:	e8 8b a2 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e955:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e95a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e961:	c7 04 24 e0 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3e0
c001e968:	e8 c9 46 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e96d:	83 c4 10             	add    esp,0x10
c001e970:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001e975:	85 c0                	test   eax,eax
c001e977:	74 5a                	je     c001e9d3 <terminateTask(int)+0xce>
c001e979:	83 ec 0c             	sub    esp,0xc
c001e97c:	68 fa c3 02 c0       	push   0xc002c3fa
c001e981:	e8 b0 46 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e986:	58                   	pop    eax
c001e987:	c6 05 cc 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031acc,0x1
c001e98e:	ff 35 c8 1a 03 c0    	push   DWORD PTR ds:0xc0031ac8
c001e994:	e8 41 fb ff ff       	call   c001e4da <unblockTask(ThreadControlBlock*)>
c001e999:	c7 04 24 14 c4 02 c0 	mov    DWORD PTR [esp],0xc002c414
c001e9a0:	e8 91 46 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e9a5:	83 c4 10             	add    esp,0x10
c001e9a8:	e8 17 f5 ff ff       	call   c001dec4 <unlockScheduler()>
c001e9ad:	e8 d1 f8 ff ff       	call   c001e283 <unlockStuff()>
c001e9b2:	83 ec 0c             	sub    esp,0xc
c001e9b5:	68 4c c4 02 c0       	push   0xc002c44c
c001e9ba:	e8 77 46 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e9bf:	83 c4 10             	add    esp,0x10
c001e9c2:	e8 fb f4 ff ff       	call   c001dec2 <lockScheduler()>
c001e9c7:	e8 32 f8 ff ff       	call   c001e1fe <schedule()>
c001e9cc:	e8 f3 f4 ff ff       	call   c001dec4 <unlockScheduler()>
c001e9d1:	eb ef                	jmp    c001e9c2 <terminateTask(int)+0xbd>
c001e9d3:	83 ec 0c             	sub    esp,0xc
c001e9d6:	68 2e c4 02 c0       	push   0xc002c42e
c001e9db:	e8 56 46 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001e9e0:	83 c4 10             	add    esp,0x10
c001e9e3:	eb c3                	jmp    c001e9a8 <terminateTask(int)+0xa3>

c001e9e5 <Thr::terminateFromIRQ(int)>:
c001e9e5:	83 ec 18             	sub    esp,0x18
c001e9e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9ec:	e8 14 ff ff ff       	call   c001e905 <terminateTask(int)>
c001e9f1:	90                   	nop

c001e9f2 <Semaphore::release()>:
c001e9f2:	83 ec 0c             	sub    esp,0xc
c001e9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f9:	e8 eb f4 ff ff       	call   c001dee9 <lockStuff()>
c001e9fe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ea01:	85 d2                	test   edx,edx
c001ea03:	74 1a                	je     c001ea1f <Semaphore::release()+0x2d>
c001ea05:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001ea08:	83 ec 0c             	sub    esp,0xc
c001ea0b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ea0e:	52                   	push   edx
c001ea0f:	e8 c6 fa ff ff       	call   c001e4da <unblockTask(ThreadControlBlock*)>
c001ea14:	83 c4 10             	add    esp,0x10
c001ea17:	83 c4 0c             	add    esp,0xc
c001ea1a:	e9 64 f8 ff ff       	jmp    c001e283 <unlockStuff()>
c001ea1f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001ea22:	83 c4 0c             	add    esp,0xc
c001ea25:	e9 59 f8 ff ff       	jmp    c001e283 <unlockStuff()>

c001ea2a <__static_initialization_and_destruction_0(int, int)>:
c001ea2a:	83 ec 0c             	sub    esp,0xc
c001ea2d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea32:	0f 85 88 00 00 00    	jne    c001eac0 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea38:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea40:	75 7e                	jne    c001eac0 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea42:	83 ec 0c             	sub    esp,0xc
c001ea45:	68 08 1b 03 c0       	push   0xc0031b08
c001ea4a:	e8 41 a3 00 00       	call   c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea4f:	83 c4 10             	add    esp,0x10
c001ea52:	83 ec 04             	sub    esp,0x4
c001ea55:	68 a8 d4 02 c0       	push   0xc002d4a8
c001ea5a:	68 08 1b 03 c0       	push   0xc0031b08
c001ea5f:	68 50 8d 02 c0       	push   0xc0028d50
c001ea64:	e8 67 44 ff ff       	call   c0012ed0 <__cxa_atexit>
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	83 ec 0c             	sub    esp,0xc
c001ea6f:	68 fc 1a 03 c0       	push   0xc0031afc
c001ea74:	e8 17 a3 00 00       	call   c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea79:	83 c4 10             	add    esp,0x10
c001ea7c:	83 ec 04             	sub    esp,0x4
c001ea7f:	68 a8 d4 02 c0       	push   0xc002d4a8
c001ea84:	68 fc 1a 03 c0       	push   0xc0031afc
c001ea89:	68 50 8d 02 c0       	push   0xc0028d50
c001ea8e:	e8 3d 44 ff ff       	call   c0012ed0 <__cxa_atexit>
c001ea93:	83 c4 10             	add    esp,0x10
c001ea96:	83 ec 0c             	sub    esp,0xc
c001ea99:	68 f0 1a 03 c0       	push   0xc0031af0
c001ea9e:	e8 ed a2 00 00       	call   c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eaa3:	83 c4 10             	add    esp,0x10
c001eaa6:	83 ec 04             	sub    esp,0x4
c001eaa9:	68 a8 d4 02 c0       	push   0xc002d4a8
c001eaae:	68 f0 1a 03 c0       	push   0xc0031af0
c001eab3:	68 50 8d 02 c0       	push   0xc0028d50
c001eab8:	e8 13 44 ff ff       	call   c0012ed0 <__cxa_atexit>
c001eabd:	83 c4 10             	add    esp,0x10
c001eac0:	90                   	nop
c001eac1:	83 c4 0c             	add    esp,0xc
c001eac4:	c3                   	ret    

c001eac5 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001eac5:	83 ec 0c             	sub    esp,0xc
c001eac8:	83 ec 08             	sub    esp,0x8
c001eacb:	68 ff ff 00 00       	push   0xffff
c001ead0:	6a 01                	push   0x1
c001ead2:	e8 53 ff ff ff       	call   c001ea2a <__static_initialization_and_destruction_0(int, int)>
c001ead7:	83 c4 10             	add    esp,0x10
c001eada:	83 c4 0c             	add    esp,0xc
c001eadd:	c3                   	ret    

c001eade <Vm::inbv(unsigned short)>:
c001eade:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eae2:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eae7:	75 06                	jne    c001eaef <Vm::inbv(unsigned short)+0x11>
c001eae9:	a0 4c 1b 03 c0       	mov    al,ds:0xc0031b4c
c001eaee:	c3                   	ret    
c001eaef:	ec                   	in     al,dx
c001eaf0:	c3                   	ret    

c001eaf1 <Vm::outbv(unsigned short, unsigned char)>:
c001eaf1:	53                   	push   ebx
c001eaf2:	83 ec 08             	sub    esp,0x8
c001eaf5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eaf9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eafd:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eb02:	75 38                	jne    c001eb3c <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001eb04:	0f b6 c3             	movzx  eax,bl
c001eb07:	51                   	push   ecx
c001eb08:	51                   	push   ecx
c001eb09:	50                   	push   eax
c001eb0a:	68 0f c7 02 c0       	push   0xc002c70f
c001eb0f:	e8 22 45 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001eb14:	8b 15 4c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b4c
c001eb1a:	83 c4 10             	add    esp,0x10
c001eb1d:	8d 42 01             	lea    eax,[edx+0x1]
c001eb20:	88 9a 60 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4a0],bl
c001eb26:	a3 4c 1b 03 c0       	mov    ds:0xc0031b4c,eax
c001eb2b:	83 f8 20             	cmp    eax,0x20
c001eb2e:	75 0f                	jne    c001eb3f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb30:	c7 05 4c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b4c,0x1f
c001eb3a:	eb 03                	jmp    c001eb3f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb3c:	88 d8                	mov    al,bl
c001eb3e:	ee                   	out    dx,al
c001eb3f:	83 c4 08             	add    esp,0x8
c001eb42:	5b                   	pop    ebx
c001eb43:	c3                   	ret    

c001eb44 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb4e:	c1 e0 04             	shl    eax,0x4
c001eb51:	01 d0                	add    eax,edx
c001eb53:	c3                   	ret    

c001eb54 <Vm::getSegment(unsigned int)>:
c001eb54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb58:	c1 e8 10             	shr    eax,0x10
c001eb5b:	c3                   	ret    

c001eb5c <Vm::getOffset(unsigned int)>:
c001eb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb60:	c3                   	ret    

c001eb61 <Vm::mainloop2()>:
c001eb61:	83 ec 0c             	sub    esp,0xc
c001eb64:	e8 59 f3 ff ff       	call   c001dec2 <lockScheduler()>
c001eb69:	83 ec 0c             	sub    esp,0xc
c001eb6c:	c6 05 45 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b45,0x1
c001eb73:	6a 02                	push   0x2
c001eb75:	e8 9c f7 ff ff       	call   c001e316 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb7f:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb83:	52                   	push   edx
c001eb84:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb88:	52                   	push   edx
c001eb89:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb8d:	52                   	push   edx
c001eb8e:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb92:	50                   	push   eax
c001eb93:	e8 62 17 fe ff       	call   c00002fa <goToVM86>
c001eb98:	83 c4 2c             	add    esp,0x2c
c001eb9b:	c3                   	ret    

c001eb9c <Vm::mainVm8086Loop(void*)>:
c001eb9c:	83 ec 0c             	sub    esp,0xc
c001eb9f:	e8 20 f3 ff ff       	call   c001dec4 <unlockScheduler()>
c001eba4:	83 c4 0c             	add    esp,0xc
c001eba7:	eb b8                	jmp    c001eb61 <Vm::mainloop2()>

c001eba9 <Vm::mainloop3(unsigned long)>:
c001eba9:	53                   	push   ebx
c001ebaa:	83 ec 08             	sub    esp,0x8
c001ebad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebb1:	e8 0c f3 ff ff       	call   c001dec2 <lockScheduler()>
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	89 1d 40 1b 03 c0    	mov    DWORD PTR ds:0xc0031b40,ebx
c001ebbf:	6a 02                	push   0x2
c001ebc1:	c6 05 44 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b44,0x1
c001ebc8:	e8 49 f7 ff ff       	call   c001e316 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ebcd:	83 c4 18             	add    esp,0x18
c001ebd0:	5b                   	pop    ebx
c001ebd1:	eb 8e                	jmp    c001eb61 <Vm::mainloop2()>

c001ebd3 <Vm::initialise8086()>:
c001ebd3:	83 ec 0c             	sub    esp,0xc
c001ebd6:	68 80 00 00 00       	push   0x80
c001ebdb:	6a 00                	push   0x0
c001ebdd:	68 9c eb 01 c0       	push   0xc001eb9c
c001ebe2:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001ebe8:	e8 07 f4 ff ff       	call   c001dff4 <Process::createThread(void (*)(void*), void*, int)>
c001ebed:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ebf4:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c001ebf9:	68 00 01 00 00       	push   0x100
c001ebfe:	a1 14 1b 03 c0       	mov    eax,ds:0xc0031b14
c001ec03:	6a 00                	push   0x0
c001ec05:	6a 00                	push   0x0
c001ec07:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ec0d:	e8 9c 3a ff ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ec12:	83 c4 2c             	add    esp,0x2c
c001ec15:	c3                   	ret    

c001ec16 <Vm::finish8086()>:
c001ec16:	53                   	push   ebx
c001ec17:	83 ec 08             	sub    esp,0x8
c001ec1a:	e8 a3 f2 ff ff       	call   c001dec2 <lockScheduler()>
c001ec1f:	80 3d 44 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b44,0x0
c001ec26:	75 0c                	jne    c001ec34 <Vm::finish8086()+0x1e>
c001ec28:	e8 d1 f5 ff ff       	call   c001e1fe <schedule()>
c001ec2d:	e8 92 f2 ff ff       	call   c001dec4 <unlockScheduler()>
c001ec32:	eb e6                	jmp    c001ec1a <Vm::finish8086()+0x4>
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	8b 1d 40 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b40
c001ec3d:	ff 35 48 1b 03 c0    	push   DWORD PTR ds:0xc0031b48
c001ec43:	c6 05 44 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b44,0x0
c001ec4a:	e8 8b f8 ff ff       	call   c001e4da <unblockTask(ThreadControlBlock*)>
c001ec4f:	e8 70 f2 ff ff       	call   c001dec4 <unlockScheduler()>
c001ec54:	89 d8                	mov    eax,ebx
c001ec56:	83 c4 18             	add    esp,0x18
c001ec59:	5b                   	pop    ebx
c001ec5a:	c3                   	ret    

c001ec5b <Vm::getOutput8086(unsigned char*)>:
c001ec5b:	83 ec 10             	sub    esp,0x10
c001ec5e:	ff 35 4c 1b 03 c0    	push   DWORD PTR ds:0xc0031b4c
c001ec64:	68 60 1b 03 c0       	push   0xc0031b60
c001ec69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec6d:	e8 d2 1a fe ff       	call   c0000744 <memcpy>
c001ec72:	a1 4c 1b 03 c0       	mov    eax,ds:0xc0031b4c
c001ec77:	c7 05 4c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b4c,0x0
c001ec81:	83 c4 1c             	add    esp,0x1c
c001ec84:	c3                   	ret    

c001ec85 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec85:	55                   	push   ebp
c001ec86:	57                   	push   edi
c001ec87:	56                   	push   esi
c001ec88:	53                   	push   ebx
c001ec89:	83 ec 2c             	sub    esp,0x2c
c001ec8c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec90:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec94:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec98:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec9c:	e8 21 f2 ff ff       	call   c001dec2 <lockScheduler()>
c001eca1:	a0 45 1b 03 c0       	mov    al,ds:0xc0031b45
c001eca6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ecaa:	84 c0                	test   al,al
c001ecac:	75 0c                	jne    c001ecba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ecae:	e8 4b f5 ff ff       	call   c001e1fe <schedule()>
c001ecb3:	e8 0c f2 ff ff       	call   c001dec4 <unlockScheduler()>
c001ecb8:	eb e2                	jmp    c001ec9c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ecba:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c001ecbf:	c7 05 4c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b4c,0x0
c001ecc9:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eccd:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ecd1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ecd5:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ecd9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ecdd:	50                   	push   eax
c001ecde:	6a 20                	push   0x20
c001ece0:	6a 00                	push   0x0
c001ece2:	68 60 1b 03 c0       	push   0xc0031b60
c001ece7:	e8 8c 1a fe ff       	call   c0000778 <memset>
c001ecec:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ecf3:	e8 48 0b ff ff       	call   c000f840 <malloc>
c001ecf8:	83 c4 0c             	add    esp,0xc
c001ecfb:	89 c7                	mov    edi,eax
c001ecfd:	ff 35 14 1b 03 c0    	push   DWORD PTR ds:0xc0031b14
c001ed03:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ed07:	50                   	push   eax
c001ed08:	e8 81 48 ff ff       	call   c001358e <File::File(char const*, Process*)>
c001ed0d:	83 c4 10             	add    esp,0x10
c001ed10:	85 ff                	test   edi,edi
c001ed12:	75 0a                	jne    c001ed1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ed14:	83 ec 0c             	sub    esp,0xc
c001ed17:	68 2b c7 02 c0       	push   0xc002c72b
c001ed1c:	eb 27                	jmp    c001ed45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ed1e:	50                   	push   eax
c001ed1f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ed23:	50                   	push   eax
c001ed24:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ed28:	50                   	push   eax
c001ed29:	57                   	push   edi
c001ed2a:	e8 6f 4b ff ff       	call   c001389e <File::stat(unsigned long long*, bool*)>
c001ed2f:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed34:	83 c4 10             	add    esp,0x10
c001ed37:	89 e8                	mov    eax,ebp
c001ed39:	84 c0                	test   al,al
c001ed3b:	74 19                	je     c001ed56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed3d:	83 ec 0c             	sub    esp,0xc
c001ed40:	68 3f c7 02 c0       	push   0xc002c73f
c001ed45:	e8 9d b9 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001ed4a:	31 ed                	xor    ebp,ebp
c001ed4c:	e8 73 f1 ff ff       	call   c001dec4 <unlockScheduler()>
c001ed51:	83 c4 10             	add    esp,0x10
c001ed54:	eb 75                	jmp    c001edcb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed56:	50                   	push   eax
c001ed57:	50                   	push   eax
c001ed58:	6a 01                	push   0x1
c001ed5a:	57                   	push   edi
c001ed5b:	e8 92 48 ff ff       	call   c00135f2 <File::open(FileOpenMode)>
c001ed60:	83 c4 10             	add    esp,0x10
c001ed63:	85 c0                	test   eax,eax
c001ed65:	74 17                	je     c001ed7e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed67:	83 ec 0c             	sub    esp,0xc
c001ed6a:	68 58 c7 02 c0       	push   0xc002c758
c001ed6f:	e8 73 b9 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001ed74:	e8 4b f1 ff ff       	call   c001dec4 <unlockScheduler()>
c001ed79:	83 c4 10             	add    esp,0x10
c001ed7c:	eb 4d                	jmp    c001edcb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed7e:	0f b7 f6             	movzx  esi,si
c001ed81:	50                   	push   eax
c001ed82:	0f b7 db             	movzx  ebx,bx
c001ed85:	50                   	push   eax
c001ed86:	56                   	push   esi
c001ed87:	53                   	push   ebx
c001ed88:	e8 b7 fd ff ff       	call   c001eb44 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed8d:	5a                   	pop    edx
c001ed8e:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed90:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed94:	51                   	push   ecx
c001ed95:	50                   	push   eax
c001ed96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed9e:	57                   	push   edi
c001ed9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eda2:	83 c4 14             	add    esp,0x14
c001eda5:	57                   	push   edi
c001eda6:	e8 a5 48 ff ff       	call   c0013650 <File::close()>
c001edab:	c6 05 45 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b45,0x0
c001edb2:	e8 0d f1 ff ff       	call   c001dec4 <unlockScheduler()>
c001edb7:	59                   	pop    ecx
c001edb8:	ff 35 48 1b 03 c0    	push   DWORD PTR ds:0xc0031b48
c001edbe:	e8 17 f7 ff ff       	call   c001e4da <unblockTask(ThreadControlBlock*)>
c001edc3:	83 c4 10             	add    esp,0x10
c001edc6:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001edcb:	83 c4 2c             	add    esp,0x2c
c001edce:	89 e8                	mov    eax,ebp
c001edd0:	5b                   	pop    ebx
c001edd1:	5e                   	pop    esi
c001edd2:	5f                   	pop    edi
c001edd3:	5d                   	pop    ebp
c001edd4:	c3                   	ret    

c001edd5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001edd5:	57                   	push   edi
c001edd6:	56                   	push   esi
c001edd7:	53                   	push   ebx
c001edd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ede4:	83 e8 06             	sub    eax,0x6
c001ede7:	0f b7 c0             	movzx  eax,ax
c001edea:	50                   	push   eax
c001edeb:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001edf0:	50                   	push   eax
c001edf1:	e8 4e fd ff ff       	call   c001eb44 <Vm::realToLinear(unsigned short, unsigned short)>
c001edf6:	5a                   	pop    edx
c001edf7:	5e                   	pop    esi
c001edf8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001edfb:	8d 56 fa             	lea    edx,[esi-0x6]
c001edfe:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ee04:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ee07:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ee0a:	83 c2 02             	add    edx,0x2
c001ee0d:	66 89 10             	mov    WORD PTR [eax],dx
c001ee10:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ee13:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ee17:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ee1a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ee1e:	89 d6                	mov    esi,edx
c001ee20:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ee26:	66 81 e6 ff fd       	and    si,0xfdff
c001ee2b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ee2f:	74 07                	je     c001ee38 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee31:	89 d6                	mov    esi,edx
c001ee33:	66 81 ce 00 02       	or     si,0x200
c001ee38:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee41:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee45:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee4d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee50:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee58:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee5b:	5b                   	pop    ebx
c001ee5c:	5e                   	pop    esi
c001ee5d:	5f                   	pop    edi
c001ee5e:	c3                   	ret    

c001ee5f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee5f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee64:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee69:	c1 e0 04             	shl    eax,0x4
c001ee6c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee6f:	c3                   	ret    

c001ee70 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee70:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee75:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee7a:	c1 e0 04             	shl    eax,0x4
c001ee7d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee81:	c3                   	ret    

c001ee82 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee82:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee87:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee8c:	c1 e0 04             	shl    eax,0x4
c001ee8f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee92:	c3                   	ret    

c001ee93 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee93:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee98:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee9d:	c1 e0 04             	shl    eax,0x4
c001eea0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eea4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eea7:	c3                   	ret    

c001eea8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001eea8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eead:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eeb2:	c1 e0 04             	shl    eax,0x4
c001eeb5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eeb9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eebd:	c3                   	ret    

c001eebe <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001eebe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eec3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eec8:	c1 e0 04             	shl    eax,0x4
c001eecb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eecf:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eed2:	c3                   	ret    

c001eed3 <Vm::faultHandler(regs*)>:
c001eed3:	55                   	push   ebp
c001eed4:	57                   	push   edi
c001eed5:	56                   	push   esi
c001eed6:	53                   	push   ebx
c001eed7:	83 ec 1c             	sub    esp,0x1c
c001eeda:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eede:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eee1:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eee4:	0f b7 c1             	movzx  eax,cx
c001eee7:	50                   	push   eax
c001eee8:	0f b7 c3             	movzx  eax,bx
c001eeeb:	c1 e3 04             	shl    ebx,0x4
c001eeee:	50                   	push   eax
c001eeef:	e8 50 fc ff ff       	call   c001eb44 <Vm::realToLinear(unsigned short, unsigned short)>
c001eef4:	5a                   	pop    edx
c001eef5:	89 c5                	mov    ebp,eax
c001eef7:	5e                   	pop    esi
c001eef8:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eefc:	50                   	push   eax
c001eefd:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ef01:	50                   	push   eax
c001ef02:	e8 3d fc ff ff       	call   c001eb44 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef07:	01 cb                	add    ebx,ecx
c001ef09:	89 c6                	mov    esi,eax
c001ef0b:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ef0f:	50                   	push   eax
c001ef10:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef14:	50                   	push   eax
c001ef15:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef19:	50                   	push   eax
c001ef1a:	55                   	push   ebp
c001ef1b:	53                   	push   ebx
c001ef1c:	b3 06                	mov    bl,0x6
c001ef1e:	68 71 c7 02 c0       	push   0xc002c771
c001ef23:	e8 0e 41 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001ef28:	83 c4 20             	add    esp,0x20
c001ef2b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef30:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef35:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef39:	3c 9d                	cmp    al,0x9d
c001ef3b:	0f 84 d7 02 00 00    	je     c001f218 <Vm::faultHandler(regs*)+0x345>
c001ef41:	0f 87 a3 00 00 00    	ja     c001efea <Vm::faultHandler(regs*)+0x117>
c001ef47:	3c 66                	cmp    al,0x66
c001ef49:	0f 84 15 02 00 00    	je     c001f164 <Vm::faultHandler(regs*)+0x291>
c001ef4f:	77 5f                	ja     c001efb0 <Vm::faultHandler(regs*)+0xdd>
c001ef51:	3c 36                	cmp    al,0x36
c001ef53:	0f 84 f1 01 00 00    	je     c001f14a <Vm::faultHandler(regs*)+0x277>
c001ef59:	77 28                	ja     c001ef83 <Vm::faultHandler(regs*)+0xb0>
c001ef5b:	3c 26                	cmp    al,0x26
c001ef5d:	0f 84 99 01 00 00    	je     c001f0fc <Vm::faultHandler(regs*)+0x229>
c001ef63:	3c 2e                	cmp    al,0x2e
c001ef65:	0f 85 3b 07 00 00    	jne    c001f6a6 <Vm::faultHandler(regs*)+0x7d3>
c001ef6b:	83 ec 0c             	sub    esp,0xc
c001ef6e:	31 db                	xor    ebx,ebx
c001ef70:	68 86 c7 02 c0       	push   0xc002c786
c001ef75:	e8 bc 40 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001ef7a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	45                   	inc    ebp
c001ef81:	eb b2                	jmp    c001ef35 <Vm::faultHandler(regs*)+0x62>
c001ef83:	3c 64                	cmp    al,0x64
c001ef85:	0f 84 8b 01 00 00    	je     c001f116 <Vm::faultHandler(regs*)+0x243>
c001ef8b:	0f 87 9f 01 00 00    	ja     c001f130 <Vm::faultHandler(regs*)+0x25d>
c001ef91:	3c 3e                	cmp    al,0x3e
c001ef93:	0f 85 0d 07 00 00    	jne    c001f6a6 <Vm::faultHandler(regs*)+0x7d3>
c001ef99:	83 ec 0c             	sub    esp,0xc
c001ef9c:	b3 01                	mov    bl,0x1
c001ef9e:	68 8a c7 02 c0       	push   0xc002c78a
c001efa3:	e8 8e 40 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001efa8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efab:	83 c4 10             	add    esp,0x10
c001efae:	eb d0                	jmp    c001ef80 <Vm::faultHandler(regs*)+0xad>
c001efb0:	3c 6d                	cmp    al,0x6d
c001efb2:	0f 84 af 03 00 00    	je     c001f367 <Vm::faultHandler(regs*)+0x494>
c001efb8:	77 15                	ja     c001efcf <Vm::faultHandler(regs*)+0xfc>
c001efba:	3c 67                	cmp    al,0x67
c001efbc:	0f 84 bf 01 00 00    	je     c001f181 <Vm::faultHandler(regs*)+0x2ae>
c001efc2:	3c 6c                	cmp    al,0x6c
c001efc4:	0f 84 3f 03 00 00    	je     c001f309 <Vm::faultHandler(regs*)+0x436>
c001efca:	e9 d7 06 00 00       	jmp    c001f6a6 <Vm::faultHandler(regs*)+0x7d3>
c001efcf:	3c 6f                	cmp    al,0x6f
c001efd1:	0f 84 a4 04 00 00    	je     c001f47b <Vm::faultHandler(regs*)+0x5a8>
c001efd7:	0f 82 11 04 00 00    	jb     c001f3ee <Vm::faultHandler(regs*)+0x51b>
c001efdd:	3c 9c                	cmp    al,0x9c
c001efdf:	0f 84 ba 01 00 00    	je     c001f19f <Vm::faultHandler(regs*)+0x2cc>
c001efe5:	e9 bc 06 00 00       	jmp    c001f6a6 <Vm::faultHandler(regs*)+0x7d3>
c001efea:	3c ec                	cmp    al,0xec
c001efec:	0f 84 24 06 00 00    	je     c001f616 <Vm::faultHandler(regs*)+0x743>
c001eff2:	0f 87 93 00 00 00    	ja     c001f08b <Vm::faultHandler(regs*)+0x1b8>
c001eff8:	3c e4                	cmp    al,0xe4
c001effa:	0f 84 5c 05 00 00    	je     c001f55c <Vm::faultHandler(regs*)+0x689>
c001f000:	77 6a                	ja     c001f06c <Vm::faultHandler(regs*)+0x199>
c001f002:	3c cd                	cmp    al,0xcd
c001f004:	0f 84 7e 02 00 00    	je     c001f288 <Vm::faultHandler(regs*)+0x3b5>
c001f00a:	3c cf                	cmp    al,0xcf
c001f00c:	0f 85 94 06 00 00    	jne    c001f6a6 <Vm::faultHandler(regs*)+0x7d3>
c001f012:	83 ec 0c             	sub    esp,0xc
c001f015:	68 ce c7 02 c0       	push   0xc002c7ce
c001f01a:	e8 17 40 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f01f:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f022:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f025:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f029:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f02c:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f030:	0d 00 02 02 00       	or     eax,0x20200
c001f035:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f038:	56                   	push   esi
c001f039:	53                   	push   ebx
c001f03a:	52                   	push   edx
c001f03b:	68 d4 c7 02 c0       	push   0xc002c7d4
c001f040:	e8 f1 3f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f045:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f049:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f04f:	66 c1 e8 09          	shr    ax,0x9
c001f053:	83 e0 01             	and    eax,0x1
c001f056:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f059:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f05c:	83 c0 06             	add    eax,0x6
c001f05f:	25 ff ff 00 00       	and    eax,0xffff
c001f064:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f067:	e9 95 02 00 00       	jmp    c001f301 <Vm::faultHandler(regs*)+0x42e>
c001f06c:	3c e6                	cmp    al,0xe6
c001f06e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f072:	0f 84 4e 05 00 00    	je     c001f5c6 <Vm::faultHandler(regs*)+0x6f3>
c001f078:	0f 82 0a 05 00 00    	jb     c001f588 <Vm::faultHandler(regs*)+0x6b5>
c001f07e:	3c e7                	cmp    al,0xe7
c001f080:	0f 84 69 05 00 00    	je     c001f5ef <Vm::faultHandler(regs*)+0x71c>
c001f086:	e9 1b 06 00 00       	jmp    c001f6a6 <Vm::faultHandler(regs*)+0x7d3>
c001f08b:	3c ef                	cmp    al,0xef
c001f08d:	0f 84 e6 05 00 00    	je     c001f679 <Vm::faultHandler(regs*)+0x7a6>
c001f093:	77 37                	ja     c001f0cc <Vm::faultHandler(regs*)+0x1f9>
c001f095:	3c ed                	cmp    al,0xed
c001f097:	0f 84 a3 05 00 00    	je     c001f640 <Vm::faultHandler(regs*)+0x76d>
c001f09d:	3c ee                	cmp    al,0xee
c001f09f:	0f 85 01 06 00 00    	jne    c001f6a6 <Vm::faultHandler(regs*)+0x7d3>
c001f0a5:	52                   	push   edx
c001f0a6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0a9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f0ac:	68 6f c8 02 c0       	push   0xc002c86f
c001f0b1:	e8 80 3f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f0b6:	59                   	pop    ecx
c001f0b7:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f0bb:	5b                   	pop    ebx
c001f0bc:	50                   	push   eax
c001f0bd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0c1:	50                   	push   eax
c001f0c2:	e8 2a fa ff ff       	call   c001eaf1 <Vm::outbv(unsigned short, unsigned char)>
c001f0c7:	e9 a5 05 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x79e>
c001f0cc:	3c fa                	cmp    al,0xfa
c001f0ce:	0f 84 f7 01 00 00    	je     c001f2cb <Vm::faultHandler(regs*)+0x3f8>
c001f0d4:	3c fb                	cmp    al,0xfb
c001f0d6:	0f 84 0a 02 00 00    	je     c001f2e6 <Vm::faultHandler(regs*)+0x413>
c001f0dc:	3c f3                	cmp    al,0xf3
c001f0de:	0f 85 c2 05 00 00    	jne    c001f6a6 <Vm::faultHandler(regs*)+0x7d3>
c001f0e4:	83 ec 0c             	sub    esp,0xc
c001f0e7:	68 a7 c7 02 c0       	push   0xc002c7a7
c001f0ec:	e8 45 3f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f0f1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f4:	83 c4 10             	add    esp,0x10
c001f0f7:	e9 84 fe ff ff       	jmp    c001ef80 <Vm::faultHandler(regs*)+0xad>
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	b3 02                	mov    bl,0x2
c001f101:	68 82 c7 02 c0       	push   0xc002c782
c001f106:	e8 2b 3f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f10b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f10e:	83 c4 10             	add    esp,0x10
c001f111:	e9 6a fe ff ff       	jmp    c001ef80 <Vm::faultHandler(regs*)+0xad>
c001f116:	83 ec 0c             	sub    esp,0xc
c001f119:	b3 03                	mov    bl,0x3
c001f11b:	68 8e c7 02 c0       	push   0xc002c78e
c001f120:	e8 11 3f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f125:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f128:	83 c4 10             	add    esp,0x10
c001f12b:	e9 50 fe ff ff       	jmp    c001ef80 <Vm::faultHandler(regs*)+0xad>
c001f130:	83 ec 0c             	sub    esp,0xc
c001f133:	b3 04                	mov    bl,0x4
c001f135:	68 92 c7 02 c0       	push   0xc002c792
c001f13a:	e8 f7 3e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f13f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f142:	83 c4 10             	add    esp,0x10
c001f145:	e9 36 fe ff ff       	jmp    c001ef80 <Vm::faultHandler(regs*)+0xad>
c001f14a:	83 ec 0c             	sub    esp,0xc
c001f14d:	b3 05                	mov    bl,0x5
c001f14f:	68 96 c7 02 c0       	push   0xc002c796
c001f154:	e8 dd 3e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f159:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f15c:	83 c4 10             	add    esp,0x10
c001f15f:	e9 1c fe ff ff       	jmp    c001ef80 <Vm::faultHandler(regs*)+0xad>
c001f164:	83 ec 0c             	sub    esp,0xc
c001f167:	68 9a c7 02 c0       	push   0xc002c79a
c001f16c:	e8 c5 3e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f171:	83 c4 10             	add    esp,0x10
c001f174:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f177:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f17c:	e9 ff fd ff ff       	jmp    c001ef80 <Vm::faultHandler(regs*)+0xad>
c001f181:	50                   	push   eax
c001f182:	50                   	push   eax
c001f183:	6a 01                	push   0x1
c001f185:	68 9f c7 02 c0       	push   0xc002c79f
c001f18a:	e8 a7 3e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f195:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f19a:	e9 e1 fd ff ff       	jmp    c001ef80 <Vm::faultHandler(regs*)+0xad>
c001f19f:	83 ec 0c             	sub    esp,0xc
c001f1a2:	68 ad c7 02 c0       	push   0xc002c7ad
c001f1a7:	e8 8a 3e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f1ac:	83 c4 10             	add    esp,0x10
c001f1af:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f1b2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1b7:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f1ba:	74 2f                	je     c001f1eb <Vm::faultHandler(regs*)+0x318>
c001f1bc:	83 ea 04             	sub    edx,0x4
c001f1bf:	25 ff 0d 00 00       	and    eax,0xdff
c001f1c4:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1ca:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1cd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1d0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1d6:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1da:	0f 84 bf 04 00 00    	je     c001f69f <Vm::faultHandler(regs*)+0x7cc>
c001f1e0:	80 cc 02             	or     ah,0x2
c001f1e3:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1e6:	e9 b4 04 00 00       	jmp    c001f69f <Vm::faultHandler(regs*)+0x7cc>
c001f1eb:	83 ea 02             	sub    edx,0x2
c001f1ee:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1f4:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1f7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f201:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f205:	74 05                	je     c001f20c <Vm::faultHandler(regs*)+0x339>
c001f207:	80 cc 02             	or     ah,0x2
c001f20a:	eb 03                	jmp    c001f20f <Vm::faultHandler(regs*)+0x33c>
c001f20c:	80 e4 fd             	and    ah,0xfd
c001f20f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f213:	e9 87 04 00 00       	jmp    c001f69f <Vm::faultHandler(regs*)+0x7cc>
c001f218:	83 ec 0c             	sub    esp,0xc
c001f21b:	68 b4 c7 02 c0       	push   0xc002c7b4
c001f220:	e8 11 3e ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f225:	83 c4 10             	add    esp,0x10
c001f228:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f22d:	74 28                	je     c001f257 <Vm::faultHandler(regs*)+0x384>
c001f22f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f231:	25 ff 0d 00 00       	and    eax,0xdff
c001f236:	0d 00 02 02 00       	or     eax,0x20200
c001f23b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f23e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f240:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f246:	c1 e8 09             	shr    eax,0x9
c001f249:	83 e0 01             	and    eax,0x1
c001f24c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f24f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f252:	83 c0 04             	add    eax,0x4
c001f255:	eb 24                	jmp    c001f27b <Vm::faultHandler(regs*)+0x3a8>
c001f257:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f25a:	0d 00 02 02 00       	or     eax,0x20200
c001f25f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f262:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f265:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f26b:	66 c1 e8 09          	shr    ax,0x9
c001f26f:	83 e0 01             	and    eax,0x1
c001f272:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f275:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f278:	83 c0 02             	add    eax,0x2
c001f27b:	25 ff ff 00 00       	and    eax,0xffff
c001f280:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f283:	e9 17 04 00 00       	jmp    c001f69f <Vm::faultHandler(regs*)+0x7cc>
c001f288:	53                   	push   ebx
c001f289:	53                   	push   ebx
c001f28a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f28e:	50                   	push   eax
c001f28f:	68 ba c7 02 c0       	push   0xc002c7ba
c001f294:	e8 9d 3d ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f299:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f29d:	83 c4 10             	add    esp,0x10
c001f2a0:	3c ee                	cmp    al,0xee
c001f2a2:	75 10                	jne    c001f2b4 <Vm::faultHandler(regs*)+0x3e1>
c001f2a4:	83 ec 0c             	sub    esp,0xc
c001f2a7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f2aa:	e8 fa f8 ff ff       	call   c001eba9 <Vm::mainloop3(unsigned long)>
c001f2af:	e9 c0 03 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x7a1>
c001f2b4:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f2b8:	83 ec 0c             	sub    esp,0xc
c001f2bb:	53                   	push   ebx
c001f2bc:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f2c0:	53                   	push   ebx
c001f2c1:	55                   	push   ebp
c001f2c2:	50                   	push   eax
c001f2c3:	57                   	push   edi
c001f2c4:	e8 0c fb ff ff       	call   c001edd5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f2c9:	eb 36                	jmp    c001f301 <Vm::faultHandler(regs*)+0x42e>
c001f2cb:	83 ec 0c             	sub    esp,0xc
c001f2ce:	68 c4 c7 02 c0       	push   0xc002c7c4
c001f2d3:	e8 5e 3d ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f2d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2dd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2e1:	e9 8b 03 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x79e>
c001f2e6:	83 ec 0c             	sub    esp,0xc
c001f2e9:	68 c9 c7 02 c0       	push   0xc002c7c9
c001f2ee:	e8 43 3d ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f2f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2f8:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f2fc:	e9 70 03 00 00       	jmp    c001f671 <Vm::faultHandler(regs*)+0x79e>
c001f301:	83 c4 20             	add    esp,0x20
c001f304:	e9 99 03 00 00       	jmp    c001f6a2 <Vm::faultHandler(regs*)+0x7cf>
c001f309:	83 ec 0c             	sub    esp,0xc
c001f30c:	68 07 c8 02 c0       	push   0xc002c807
c001f311:	e8 20 3d ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f316:	83 c4 10             	add    esp,0x10
c001f319:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f31c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f321:	74 0d                	je     c001f330 <Vm::faultHandler(regs*)+0x45d>
c001f323:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f32a:	0f 87 9e 01 00 00    	ja     c001f4ce <Vm::faultHandler(regs*)+0x5fb>
c001f330:	83 ec 0c             	sub    esp,0xc
c001f333:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f337:	0f b7 db             	movzx  ebx,bx
c001f33a:	50                   	push   eax
c001f33b:	e8 9e f7 ff ff       	call   c001eade <Vm::inbv(unsigned short)>
c001f340:	83 c4 0c             	add    esp,0xc
c001f343:	0f b6 c0             	movzx  eax,al
c001f346:	50                   	push   eax
c001f347:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f34b:	50                   	push   eax
c001f34c:	53                   	push   ebx
c001f34d:	e8 41 fb ff ff       	call   c001ee93 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f352:	83 c4 10             	add    esp,0x10
c001f355:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f358:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f35c:	74 03                	je     c001f361 <Vm::faultHandler(regs*)+0x48e>
c001f35e:	48                   	dec    eax
c001f35f:	eb 01                	jmp    c001f362 <Vm::faultHandler(regs*)+0x48f>
c001f361:	40                   	inc    eax
c001f362:	0f b7 c0             	movzx  eax,ax
c001f365:	eb 7f                	jmp    c001f3e6 <Vm::faultHandler(regs*)+0x513>
c001f367:	83 ec 0c             	sub    esp,0xc
c001f36a:	68 39 c8 02 c0       	push   0xc002c839
c001f36f:	e8 c2 3c ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f374:	83 c4 10             	add    esp,0x10
c001f377:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f37a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f37f:	74 0d                	je     c001f38e <Vm::faultHandler(regs*)+0x4bb>
c001f381:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f388:	0f 87 40 01 00 00    	ja     c001f4ce <Vm::faultHandler(regs*)+0x5fb>
c001f38e:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f391:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f395:	0f b7 db             	movzx  ebx,bx
c001f398:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f39d:	74 20                	je     c001f3bf <Vm::faultHandler(regs*)+0x4ec>
c001f39f:	ed                   	in     eax,dx
c001f3a0:	51                   	push   ecx
c001f3a1:	50                   	push   eax
c001f3a2:	56                   	push   esi
c001f3a3:	53                   	push   ebx
c001f3a4:	e8 15 fb ff ff       	call   c001eebe <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f3a9:	83 c4 10             	add    esp,0x10
c001f3ac:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3af:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3b3:	74 05                	je     c001f3ba <Vm::faultHandler(regs*)+0x4e7>
c001f3b5:	83 e8 04             	sub    eax,0x4
c001f3b8:	eb 27                	jmp    c001f3e1 <Vm::faultHandler(regs*)+0x50e>
c001f3ba:	83 c0 04             	add    eax,0x4
c001f3bd:	eb 22                	jmp    c001f3e1 <Vm::faultHandler(regs*)+0x50e>
c001f3bf:	66 ed                	in     ax,dx
c001f3c1:	0f b7 c0             	movzx  eax,ax
c001f3c4:	52                   	push   edx
c001f3c5:	50                   	push   eax
c001f3c6:	56                   	push   esi
c001f3c7:	53                   	push   ebx
c001f3c8:	e8 db fa ff ff       	call   c001eea8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f3cd:	83 c4 10             	add    esp,0x10
c001f3d0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3d3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3d7:	74 05                	je     c001f3de <Vm::faultHandler(regs*)+0x50b>
c001f3d9:	83 e8 02             	sub    eax,0x2
c001f3dc:	eb 03                	jmp    c001f3e1 <Vm::faultHandler(regs*)+0x50e>
c001f3de:	83 c0 02             	add    eax,0x2
c001f3e1:	25 ff ff 00 00       	and    eax,0xffff
c001f3e6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f3e9:	e9 b1 02 00 00       	jmp    c001f69f <Vm::faultHandler(regs*)+0x7cc>
c001f3ee:	83 ec 0c             	sub    esp,0xc
c001f3f1:	4b                   	dec    ebx
c001f3f2:	68 3f c8 02 c0       	push   0xc002c83f
c001f3f7:	e8 3a 3c ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f3fc:	83 c4 10             	add    esp,0x10
c001f3ff:	80 fb 05             	cmp    bl,0x5
c001f402:	77 0a                	ja     c001f40e <Vm::faultHandler(regs*)+0x53b>
c001f404:	0f b6 db             	movzx  ebx,bl
c001f407:	ff 24 9d b0 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3750]
c001f40e:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f412:	eb 1b                	jmp    c001f42f <Vm::faultHandler(regs*)+0x55c>
c001f414:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f418:	eb 15                	jmp    c001f42f <Vm::faultHandler(regs*)+0x55c>
c001f41a:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f41e:	eb 0f                	jmp    c001f42f <Vm::faultHandler(regs*)+0x55c>
c001f420:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f424:	eb 09                	jmp    c001f42f <Vm::faultHandler(regs*)+0x55c>
c001f426:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f429:	eb 04                	jmp    c001f42f <Vm::faultHandler(regs*)+0x55c>
c001f42b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f42f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f434:	74 0d                	je     c001f443 <Vm::faultHandler(regs*)+0x570>
c001f436:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f43d:	0f 87 8b 00 00 00    	ja     c001f4ce <Vm::faultHandler(regs*)+0x5fb>
c001f443:	53                   	push   ebx
c001f444:	53                   	push   ebx
c001f445:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f449:	52                   	push   edx
c001f44a:	50                   	push   eax
c001f44b:	e8 0f fa ff ff       	call   c001ee5f <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f450:	5e                   	pop    esi
c001f451:	0f b6 c0             	movzx  eax,al
c001f454:	5d                   	pop    ebp
c001f455:	50                   	push   eax
c001f456:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f45a:	50                   	push   eax
c001f45b:	e8 91 f6 ff ff       	call   c001eaf1 <Vm::outbv(unsigned short, unsigned char)>
c001f460:	83 c4 10             	add    esp,0x10
c001f463:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f466:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f46a:	74 03                	je     c001f46f <Vm::faultHandler(regs*)+0x59c>
c001f46c:	48                   	dec    eax
c001f46d:	eb 01                	jmp    c001f470 <Vm::faultHandler(regs*)+0x59d>
c001f46f:	40                   	inc    eax
c001f470:	0f b7 c0             	movzx  eax,ax
c001f473:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f476:	e9 24 02 00 00       	jmp    c001f69f <Vm::faultHandler(regs*)+0x7cc>
c001f47b:	83 ec 0c             	sub    esp,0xc
c001f47e:	4b                   	dec    ebx
c001f47f:	68 3f c8 02 c0       	push   0xc002c83f
c001f484:	e8 ad 3b ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f489:	83 c4 10             	add    esp,0x10
c001f48c:	80 fb 05             	cmp    bl,0x5
c001f48f:	77 0a                	ja     c001f49b <Vm::faultHandler(regs*)+0x5c8>
c001f491:	0f b6 db             	movzx  ebx,bl
c001f494:	ff 24 9d c8 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3738]
c001f49b:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f49f:	eb 1b                	jmp    c001f4bc <Vm::faultHandler(regs*)+0x5e9>
c001f4a1:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f4a5:	eb 15                	jmp    c001f4bc <Vm::faultHandler(regs*)+0x5e9>
c001f4a7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f4ab:	eb 0f                	jmp    c001f4bc <Vm::faultHandler(regs*)+0x5e9>
c001f4ad:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f4b1:	eb 09                	jmp    c001f4bc <Vm::faultHandler(regs*)+0x5e9>
c001f4b3:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f4b6:	eb 04                	jmp    c001f4bc <Vm::faultHandler(regs*)+0x5e9>
c001f4b8:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f4bc:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f4bf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f4c4:	74 39                	je     c001f4ff <Vm::faultHandler(regs*)+0x62c>
c001f4c6:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f4cc:	76 31                	jbe    c001f4ff <Vm::faultHandler(regs*)+0x62c>
c001f4ce:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4d2:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4d6:	51                   	push   ecx
c001f4d7:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4db:	51                   	push   ecx
c001f4dc:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4e0:	51                   	push   ecx
c001f4e1:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4e5:	51                   	push   ecx
c001f4e6:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4ea:	52                   	push   edx
c001f4eb:	50                   	push   eax
c001f4ec:	50                   	push   eax
c001f4ed:	68 0c c8 02 c0       	push   0xc002c80c
c001f4f2:	e8 3f 3b ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f4f7:	83 c4 20             	add    esp,0x20
c001f4fa:	e9 fb 01 00 00       	jmp    c001f6fa <Vm::faultHandler(regs*)+0x827>
c001f4ff:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f502:	0f b7 d3             	movzx  edx,bx
c001f505:	81 e6 00 04 00 00    	and    esi,0x400
c001f50b:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f50e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f513:	74 1d                	je     c001f532 <Vm::faultHandler(regs*)+0x65f>
c001f515:	51                   	push   ecx
c001f516:	51                   	push   ecx
c001f517:	52                   	push   edx
c001f518:	50                   	push   eax
c001f519:	e8 64 f9 ff ff       	call   c001ee82 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f51e:	83 c4 10             	add    esp,0x10
c001f521:	89 ea                	mov    edx,ebp
c001f523:	ef                   	out    dx,eax
c001f524:	85 f6                	test   esi,esi
c001f526:	74 05                	je     c001f52d <Vm::faultHandler(regs*)+0x65a>
c001f528:	83 eb 04             	sub    ebx,0x4
c001f52b:	eb 21                	jmp    c001f54e <Vm::faultHandler(regs*)+0x67b>
c001f52d:	83 c3 04             	add    ebx,0x4
c001f530:	eb 1c                	jmp    c001f54e <Vm::faultHandler(regs*)+0x67b>
c001f532:	51                   	push   ecx
c001f533:	51                   	push   ecx
c001f534:	52                   	push   edx
c001f535:	50                   	push   eax
c001f536:	e8 35 f9 ff ff       	call   c001ee70 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f53b:	83 c4 10             	add    esp,0x10
c001f53e:	89 ea                	mov    edx,ebp
c001f540:	66 ef                	out    dx,ax
c001f542:	85 f6                	test   esi,esi
c001f544:	74 05                	je     c001f54b <Vm::faultHandler(regs*)+0x678>
c001f546:	83 eb 02             	sub    ebx,0x2
c001f549:	eb 03                	jmp    c001f54e <Vm::faultHandler(regs*)+0x67b>
c001f54b:	83 c3 02             	add    ebx,0x2
c001f54e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f554:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f557:	e9 43 01 00 00       	jmp    c001f69f <Vm::faultHandler(regs*)+0x7cc>
c001f55c:	53                   	push   ebx
c001f55d:	53                   	push   ebx
c001f55e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f562:	50                   	push   eax
c001f563:	68 45 c8 02 c0       	push   0xc002c845
c001f568:	e8 c9 3a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f56d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f574:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f578:	89 04 24             	mov    DWORD PTR [esp],eax
c001f57b:	e8 5e f5 ff ff       	call   c001eade <Vm::inbv(unsigned short)>
c001f580:	0f b6 c0             	movzx  eax,al
c001f583:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f586:	eb 5e                	jmp    c001f5e6 <Vm::faultHandler(regs*)+0x713>
c001f588:	51                   	push   ecx
c001f589:	51                   	push   ecx
c001f58a:	53                   	push   ebx
c001f58b:	68 4b c8 02 c0       	push   0xc002c84b
c001f590:	e8 a1 3a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f595:	83 c4 10             	add    esp,0x10
c001f598:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f59d:	74 07                	je     c001f5a6 <Vm::faultHandler(regs*)+0x6d3>
c001f59f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5a3:	ed                   	in     eax,dx
c001f5a4:	eb 14                	jmp    c001f5ba <Vm::faultHandler(regs*)+0x6e7>
c001f5a6:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f5a9:	66 31 db             	xor    bx,bx
c001f5ac:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f5af:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5b3:	66 ed                	in     ax,dx
c001f5b5:	0f b7 c0             	movzx  eax,ax
c001f5b8:	09 d8                	or     eax,ebx
c001f5ba:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5bd:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5c1:	e9 dc 00 00 00       	jmp    c001f6a2 <Vm::faultHandler(regs*)+0x7cf>
c001f5c6:	50                   	push   eax
c001f5c7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5ca:	53                   	push   ebx
c001f5cb:	68 51 c8 02 c0       	push   0xc002c851
c001f5d0:	e8 61 3a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f5d5:	58                   	pop    eax
c001f5d6:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5da:	5a                   	pop    edx
c001f5db:	50                   	push   eax
c001f5dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5e0:	50                   	push   eax
c001f5e1:	e8 0b f5 ff ff       	call   c001eaf1 <Vm::outbv(unsigned short, unsigned char)>
c001f5e6:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5ea:	e9 85 00 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x7a1>
c001f5ef:	50                   	push   eax
c001f5f0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5f3:	53                   	push   ebx
c001f5f4:	68 5a c8 02 c0       	push   0xc002c85a
c001f5f9:	e8 38 3a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f5fe:	83 c4 10             	add    esp,0x10
c001f601:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f605:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f60a:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f60d:	74 03                	je     c001f612 <Vm::faultHandler(regs*)+0x73f>
c001f60f:	ef                   	out    dx,eax
c001f610:	eb ab                	jmp    c001f5bd <Vm::faultHandler(regs*)+0x6ea>
c001f612:	66 ef                	out    dx,ax
c001f614:	eb a7                	jmp    c001f5bd <Vm::faultHandler(regs*)+0x6ea>
c001f616:	55                   	push   ebp
c001f617:	55                   	push   ebp
c001f618:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f61b:	68 63 c8 02 c0       	push   0xc002c863
c001f620:	e8 11 3a ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f625:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f62c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f630:	89 04 24             	mov    DWORD PTR [esp],eax
c001f633:	e8 a6 f4 ff ff       	call   c001eade <Vm::inbv(unsigned short)>
c001f638:	0f b6 c0             	movzx  eax,al
c001f63b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f63e:	eb 31                	jmp    c001f671 <Vm::faultHandler(regs*)+0x79e>
c001f640:	56                   	push   esi
c001f641:	56                   	push   esi
c001f642:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f645:	68 69 c8 02 c0       	push   0xc002c869
c001f64a:	e8 e7 39 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f64f:	83 c4 10             	add    esp,0x10
c001f652:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f655:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f65a:	74 03                	je     c001f65f <Vm::faultHandler(regs*)+0x78c>
c001f65c:	ed                   	in     eax,dx
c001f65d:	eb 0d                	jmp    c001f66c <Vm::faultHandler(regs*)+0x799>
c001f65f:	66 ed                	in     ax,dx
c001f661:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f664:	0f b7 c0             	movzx  eax,ax
c001f667:	66 31 d2             	xor    dx,dx
c001f66a:	09 d0                	or     eax,edx
c001f66c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f66f:	eb 2e                	jmp    c001f69f <Vm::faultHandler(regs*)+0x7cc>
c001f671:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f674:	83 c4 10             	add    esp,0x10
c001f677:	eb 29                	jmp    c001f6a2 <Vm::faultHandler(regs*)+0x7cf>
c001f679:	50                   	push   eax
c001f67a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f67d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f680:	68 78 c8 02 c0       	push   0xc002c878
c001f685:	e8 ac 39 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f68a:	83 c4 10             	add    esp,0x10
c001f68d:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f690:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f695:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f698:	74 03                	je     c001f69d <Vm::faultHandler(regs*)+0x7ca>
c001f69a:	ef                   	out    dx,eax
c001f69b:	eb 02                	jmp    c001f69f <Vm::faultHandler(regs*)+0x7cc>
c001f69d:	66 ef                	out    dx,ax
c001f69f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6a2:	b0 01                	mov    al,0x1
c001f6a4:	eb 56                	jmp    c001f6fc <Vm::faultHandler(regs*)+0x829>
c001f6a6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f6aa:	51                   	push   ecx
c001f6ab:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f6af:	51                   	push   ecx
c001f6b0:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f6b4:	51                   	push   ecx
c001f6b5:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f6b9:	51                   	push   ecx
c001f6ba:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f6be:	52                   	push   edx
c001f6bf:	50                   	push   eax
c001f6c0:	50                   	push   eax
c001f6c1:	68 81 c8 02 c0       	push   0xc002c881
c001f6c6:	e8 6b 39 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c001f6cb:	83 c4 20             	add    esp,0x20
c001f6ce:	83 ec 0c             	sub    esp,0xc
c001f6d1:	6a 60                	push   0x60
c001f6d3:	e8 06 f4 ff ff       	call   c001eade <Vm::inbv(unsigned short)>
c001f6d8:	83 c4 10             	add    esp,0x10
c001f6db:	3c 1c                	cmp    al,0x1c
c001f6dd:	74 04                	je     c001f6e3 <Vm::faultHandler(regs*)+0x810>
c001f6df:	3c 5a                	cmp    al,0x5a
c001f6e1:	75 eb                	jne    c001f6ce <Vm::faultHandler(regs*)+0x7fb>
c001f6e3:	3c 1c                	cmp    al,0x1c
c001f6e5:	74 04                	je     c001f6eb <Vm::faultHandler(regs*)+0x818>
c001f6e7:	3c 5a                	cmp    al,0x5a
c001f6e9:	75 0f                	jne    c001f6fa <Vm::faultHandler(regs*)+0x827>
c001f6eb:	83 ec 0c             	sub    esp,0xc
c001f6ee:	6a 60                	push   0x60
c001f6f0:	e8 e9 f3 ff ff       	call   c001eade <Vm::inbv(unsigned short)>
c001f6f5:	83 c4 10             	add    esp,0x10
c001f6f8:	eb e9                	jmp    c001f6e3 <Vm::faultHandler(regs*)+0x810>
c001f6fa:	31 c0                	xor    eax,eax
c001f6fc:	83 c4 1c             	add    esp,0x1c
c001f6ff:	5b                   	pop    ebx
c001f700:	5e                   	pop    esi
c001f701:	5f                   	pop    edi
c001f702:	5d                   	pop    ebp
c001f703:	c3                   	ret    

c001f704 <Vm::fpuInternalTo32(unsigned long long)>:
c001f704:	57                   	push   edi
c001f705:	56                   	push   esi
c001f706:	53                   	push   ebx
c001f707:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f70b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70f:	89 d6                	mov    esi,edx
c001f711:	89 d7                	mov    edi,edx
c001f713:	89 c1                	mov    ecx,eax
c001f715:	c1 ef 14             	shr    edi,0x14
c001f718:	89 d3                	mov    ebx,edx
c001f71a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f720:	31 d2                	xor    edx,edx
c001f722:	89 f8                	mov    eax,edi
c001f724:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f72a:	bf ff 00 00 00       	mov    edi,0xff
c001f72f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f734:	83 d2 ff             	adc    edx,0xffffffff
c001f737:	39 c7                	cmp    edi,eax
c001f739:	bf 00 00 00 00       	mov    edi,0x0
c001f73e:	19 d7                	sbb    edi,edx
c001f740:	72 15                	jb     c001f757 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f742:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f746:	c1 e0 17             	shl    eax,0x17
c001f749:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f74f:	09 f1                	or     ecx,esi
c001f751:	09 c1                	or     ecx,eax
c001f753:	89 cf                	mov    edi,ecx
c001f755:	eb 02                	jmp    c001f759 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f757:	31 ff                	xor    edi,edi
c001f759:	89 f8                	mov    eax,edi
c001f75b:	5b                   	pop    ebx
c001f75c:	5e                   	pop    esi
c001f75d:	5f                   	pop    edi
c001f75e:	c3                   	ret    

c001f75f <Vm::fpuInternalTo64(unsigned long long)>:
c001f75f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f763:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f767:	c3                   	ret    

c001f768 <Vm::fpu32ToInternal(unsigned int)>:
c001f768:	57                   	push   edi
c001f769:	31 ff                	xor    edi,edi
c001f76b:	56                   	push   esi
c001f76c:	53                   	push   ebx
c001f76d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f771:	89 cb                	mov    ebx,ecx
c001f773:	89 ce                	mov    esi,ecx
c001f775:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f77b:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f781:	c1 e9 17             	shr    ecx,0x17
c001f784:	89 f0                	mov    eax,esi
c001f786:	0f b6 d1             	movzx  edx,cl
c001f789:	81 c2 80 03 00 00    	add    edx,0x380
c001f78f:	89 d1                	mov    ecx,edx
c001f791:	89 fa                	mov    edx,edi
c001f793:	c1 e1 14             	shl    ecx,0x14
c001f796:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f79a:	c1 e0 1d             	shl    eax,0x1d
c001f79d:	89 d7                	mov    edi,edx
c001f79f:	89 c6                	mov    esi,eax
c001f7a1:	89 ca                	mov    edx,ecx
c001f7a3:	89 f0                	mov    eax,esi
c001f7a5:	09 fa                	or     edx,edi
c001f7a7:	09 da                	or     edx,ebx
c001f7a9:	5b                   	pop    ebx
c001f7aa:	5e                   	pop    esi
c001f7ab:	5f                   	pop    edi
c001f7ac:	c3                   	ret    

c001f7ad <Vm::fpu64ToInternal(unsigned long long)>:
c001f7ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7b5:	c3                   	ret    

c001f7b6 <Vm::fpuFloatToLong(unsigned long long)>:
c001f7b6:	57                   	push   edi
c001f7b7:	31 c0                	xor    eax,eax
c001f7b9:	56                   	push   esi
c001f7ba:	31 d2                	xor    edx,edx
c001f7bc:	53                   	push   ebx
c001f7bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7c5:	89 d9                	mov    ecx,ebx
c001f7c7:	c1 e9 14             	shr    ecx,0x14
c001f7ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7d0:	89 cf                	mov    edi,ecx
c001f7d2:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7d8:	78 33                	js     c001f80d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7da:	89 d9                	mov    ecx,ebx
c001f7dc:	89 f0                	mov    eax,esi
c001f7de:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7e4:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f7ea:	89 ca                	mov    edx,ecx
c001f7ec:	b9 34 00 00 00       	mov    ecx,0x34
c001f7f1:	29 f9                	sub    ecx,edi
c001f7f3:	0f ad d0             	shrd   eax,edx,cl
c001f7f6:	d3 fa                	sar    edx,cl
c001f7f8:	f6 c1 20             	test   cl,0x20
c001f7fb:	74 05                	je     c001f802 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7fd:	89 d0                	mov    eax,edx
c001f7ff:	c1 fa 1f             	sar    edx,0x1f
c001f802:	85 db                	test   ebx,ebx
c001f804:	79 07                	jns    c001f80d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f806:	f7 d8                	neg    eax
c001f808:	83 d2 00             	adc    edx,0x0
c001f80b:	f7 da                	neg    edx
c001f80d:	5b                   	pop    ebx
c001f80e:	5e                   	pop    esi
c001f80f:	5f                   	pop    edi
c001f810:	c3                   	ret    

c001f811 <Vm::fpuULongToFloat(unsigned long long)>:
c001f811:	57                   	push   edi
c001f812:	31 c9                	xor    ecx,ecx
c001f814:	56                   	push   esi
c001f815:	53                   	push   ebx
c001f816:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f81a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f81e:	0f ba e7 14          	bt     edi,0x14
c001f822:	72 07                	jb     c001f82b <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f824:	01 f6                	add    esi,esi
c001f826:	11 ff                	adc    edi,edi
c001f828:	41                   	inc    ecx
c001f829:	eb f3                	jmp    c001f81e <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f82b:	89 fa                	mov    edx,edi
c001f82d:	89 f0                	mov    eax,esi
c001f82f:	bb 33 04 00 00       	mov    ebx,0x433
c001f834:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f83a:	29 cb                	sub    ebx,ecx
c001f83c:	89 d9                	mov    ecx,ebx
c001f83e:	5b                   	pop    ebx
c001f83f:	c1 e1 14             	shl    ecx,0x14
c001f842:	5e                   	pop    esi
c001f843:	09 ca                	or     edx,ecx
c001f845:	5f                   	pop    edi
c001f846:	c3                   	ret    

c001f847 <Vm::fpuLongToFloat(long long)>:
c001f847:	56                   	push   esi
c001f848:	31 c0                	xor    eax,eax
c001f84a:	53                   	push   ebx
c001f84b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f84f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f853:	39 c8                	cmp    eax,ecx
c001f855:	19 d8                	sbb    eax,ebx
c001f857:	7d 04                	jge    c001f85d <Vm::fpuLongToFloat(long long)+0x16>
c001f859:	31 f6                	xor    esi,esi
c001f85b:	eb 0c                	jmp    c001f869 <Vm::fpuLongToFloat(long long)+0x22>
c001f85d:	f7 d9                	neg    ecx
c001f85f:	be 01 00 00 00       	mov    esi,0x1
c001f864:	83 d3 00             	adc    ebx,0x0
c001f867:	f7 db                	neg    ebx
c001f869:	31 c0                	xor    eax,eax
c001f86b:	0f ba e3 14          	bt     ebx,0x14
c001f86f:	72 07                	jb     c001f878 <Vm::fpuLongToFloat(long long)+0x31>
c001f871:	01 c9                	add    ecx,ecx
c001f873:	11 db                	adc    ebx,ebx
c001f875:	40                   	inc    eax
c001f876:	eb f3                	jmp    c001f86b <Vm::fpuLongToFloat(long long)+0x24>
c001f878:	ba 33 04 00 00       	mov    edx,0x433
c001f87d:	29 c2                	sub    edx,eax
c001f87f:	89 c8                	mov    eax,ecx
c001f881:	c1 e2 14             	shl    edx,0x14
c001f884:	89 d9                	mov    ecx,ebx
c001f886:	89 f3                	mov    ebx,esi
c001f888:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f88e:	09 ca                	or     edx,ecx
c001f890:	84 db                	test   bl,bl
c001f892:	74 06                	je     c001f89a <Vm::fpuLongToFloat(long long)+0x53>
c001f894:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f89a:	5b                   	pop    ebx
c001f89b:	5e                   	pop    esi
c001f89c:	c3                   	ret    

c001f89d <Vm::fpuGet0()>:
c001f89d:	31 c0                	xor    eax,eax
c001f89f:	31 d2                	xor    edx,edx
c001f8a1:	c3                   	ret    

c001f8a2 <Vm::fpuGet1()>:
c001f8a2:	b8 01 00 00 00       	mov    eax,0x1
c001f8a7:	31 d2                	xor    edx,edx
c001f8a9:	c3                   	ret    

c001f8aa <Vm::fpuGetPi()>:
c001f8aa:	b8 03 00 00 00       	mov    eax,0x3
c001f8af:	31 d2                	xor    edx,edx
c001f8b1:	c3                   	ret    

c001f8b2 <Vm::fpuGetLog2E()>:
c001f8b2:	83 ec 18             	sub    esp,0x18
c001f8b5:	68 e0 c8 02 c0       	push   0xc002c8e0
c001f8ba:	e8 28 ae ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001f8bf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8c4:	31 d2                	xor    edx,edx
c001f8c6:	83 c4 1c             	add    esp,0x1c
c001f8c9:	c3                   	ret    

c001f8ca <Vm::fpuGetLogE2()>:
c001f8ca:	83 ec 18             	sub    esp,0x18
c001f8cd:	68 ec c8 02 c0       	push   0xc002c8ec
c001f8d2:	e8 10 ae ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001f8d7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8dc:	31 d2                	xor    edx,edx
c001f8de:	83 c4 1c             	add    esp,0x1c
c001f8e1:	c3                   	ret    

c001f8e2 <Vm::fpuGetLog210()>:
c001f8e2:	83 ec 18             	sub    esp,0x18
c001f8e5:	68 f8 c8 02 c0       	push   0xc002c8f8
c001f8ea:	e8 f8 ad ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001f8ef:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8f4:	31 d2                	xor    edx,edx
c001f8f6:	83 c4 1c             	add    esp,0x1c
c001f8f9:	c3                   	ret    

c001f8fa <Vm::fpuGetLog102()>:
c001f8fa:	83 ec 18             	sub    esp,0x18
c001f8fd:	68 05 c9 02 c0       	push   0xc002c905
c001f902:	e8 e0 ad ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001f907:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f90c:	31 d2                	xor    edx,edx
c001f90e:	83 c4 1c             	add    esp,0x1c
c001f911:	c3                   	ret    

c001f912 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f912:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f916:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f91a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f91e:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f922:	0f 92 c0             	setb   al
c001f925:	c3                   	ret    

c001f926 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f926:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92e:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f932:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f936:	09 c2                	or     edx,eax
c001f938:	0f 94 c0             	sete   al
c001f93b:	c3                   	ret    

c001f93c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f93c:	57                   	push   edi
c001f93d:	56                   	push   esi
c001f93e:	53                   	push   ebx
c001f93f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f943:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f947:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f94b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f94f:	57                   	push   edi
c001f950:	56                   	push   esi
c001f951:	53                   	push   ebx
c001f952:	51                   	push   ecx
c001f953:	e8 ce ff ff ff       	call   c001f926 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f958:	83 c4 10             	add    esp,0x10
c001f95b:	88 c2                	mov    dl,al
c001f95d:	31 c0                	xor    eax,eax
c001f95f:	84 d2                	test   dl,dl
c001f961:	75 0c                	jne    c001f96f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f963:	57                   	push   edi
c001f964:	56                   	push   esi
c001f965:	53                   	push   ebx
c001f966:	51                   	push   ecx
c001f967:	e8 a6 ff ff ff       	call   c001f912 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f96c:	83 c4 10             	add    esp,0x10
c001f96f:	83 e0 01             	and    eax,0x1
c001f972:	5b                   	pop    ebx
c001f973:	88 c1                	mov    cl,al
c001f975:	83 e2 01             	and    edx,0x1
c001f978:	a0 81 1b 03 c0       	mov    al,ds:0xc0031b81
c001f97d:	c1 e2 06             	shl    edx,0x6
c001f980:	83 e0 ba             	and    eax,0xffffffba
c001f983:	5e                   	pop    esi
c001f984:	09 c8                	or     eax,ecx
c001f986:	5f                   	pop    edi
c001f987:	09 d0                	or     eax,edx
c001f989:	a2 81 1b 03 c0       	mov    ds:0xc0031b81,al
c001f98e:	c3                   	ret    

c001f98f <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f98f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f993:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f997:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f99b:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f99f:	c3                   	ret    

c001f9a0 <Vm::fpuAbs(unsigned long long)>:
c001f9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9a8:	c3                   	ret    

c001f9a9 <Vm::fpuChs(unsigned long long)>:
c001f9a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9b1:	f7 d8                	neg    eax
c001f9b3:	83 d2 00             	adc    edx,0x0
c001f9b6:	f7 da                	neg    edx
c001f9b8:	c3                   	ret    

c001f9b9 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9b9:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f9bd:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f9c2:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f9c6:	eb c7                	jmp    c001f98f <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f9c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f9c8:	53                   	push   ebx
c001f9c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9d9:	0f af ca             	imul   ecx,edx
c001f9dc:	0f af d8             	imul   ebx,eax
c001f9df:	f7 e2                	mul    edx
c001f9e1:	01 d9                	add    ecx,ebx
c001f9e3:	5b                   	pop    ebx
c001f9e4:	01 ca                	add    edx,ecx
c001f9e6:	c3                   	ret    

c001f9e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9e7:	83 ec 0c             	sub    esp,0xc
c001f9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9fa:	e8 9d 70 00 00       	call   c0026a9c <__udivdi3>
c001f9ff:	83 c4 1c             	add    esp,0x1c
c001fa02:	c3                   	ret    

c001fa03 <Vm::fpuSquare(unsigned long long)>:
c001fa03:	50                   	push   eax
c001fa04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa0c:	52                   	push   edx
c001fa0d:	50                   	push   eax
c001fa0e:	52                   	push   edx
c001fa0f:	50                   	push   eax
c001fa10:	e8 b3 ff ff ff       	call   c001f9c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa15:	83 c4 14             	add    esp,0x14
c001fa18:	c3                   	ret    

c001fa19 <Vm::fpuGetReg(int)>:
c001fa19:	83 ec 0c             	sub    esp,0xc
c001fa1c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa21:	76 10                	jbe    c001fa33 <Vm::fpuGetReg(int)+0x1a>
c001fa23:	83 ec 0c             	sub    esp,0xc
c001fa26:	68 12 c9 02 c0       	push   0xc002c912
c001fa2b:	e8 b7 ac ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001fa30:	83 c4 10             	add    esp,0x10
c001fa33:	a0 81 1b 03 c0       	mov    al,ds:0xc0031b81
c001fa38:	b9 08 00 00 00       	mov    ecx,0x8
c001fa3d:	c0 e8 03             	shr    al,0x3
c001fa40:	83 e0 07             	and    eax,0x7
c001fa43:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa47:	99                   	cdq    
c001fa48:	f7 f9                	idiv   ecx
c001fa4a:	8b 04 d5 84 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce47c]
c001fa51:	8b 14 d5 88 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce478]
c001fa58:	83 c4 0c             	add    esp,0xc
c001fa5b:	c3                   	ret    

c001fa5c <Vm::fpuSetReg(int, unsigned long long)>:
c001fa5c:	57                   	push   edi
c001fa5d:	56                   	push   esi
c001fa5e:	52                   	push   edx
c001fa5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa63:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa67:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa6c:	76 10                	jbe    c001fa7e <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa6e:	83 ec 0c             	sub    esp,0xc
c001fa71:	68 25 c9 02 c0       	push   0xc002c925
c001fa76:	e8 6c ac ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c001fa7b:	83 c4 10             	add    esp,0x10
c001fa7e:	a0 81 1b 03 c0       	mov    al,ds:0xc0031b81
c001fa83:	b9 08 00 00 00       	mov    ecx,0x8
c001fa88:	c0 e8 03             	shr    al,0x3
c001fa8b:	83 e0 07             	and    eax,0x7
c001fa8e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa92:	99                   	cdq    
c001fa93:	f7 f9                	idiv   ecx
c001fa95:	89 34 d5 84 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce47c],esi
c001fa9c:	89 3c d5 88 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce478],edi
c001faa3:	58                   	pop    eax
c001faa4:	5e                   	pop    esi
c001faa5:	5f                   	pop    edi
c001faa6:	c3                   	ret    

c001faa7 <Vm::fpuPush(unsigned long long)>:
c001faa7:	a0 81 1b 03 c0       	mov    al,ds:0xc0031b81
c001faac:	c0 e8 03             	shr    al,0x3
c001faaf:	83 e0 07             	and    eax,0x7
c001fab2:	83 c0 07             	add    eax,0x7
c001fab5:	88 c2                	mov    dl,al
c001fab7:	83 e0 07             	and    eax,0x7
c001faba:	83 e2 07             	and    edx,0x7
c001fabd:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fac4:	8a 15 81 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b81
c001faca:	83 e2 c7             	and    edx,0xffffffc7
c001facd:	09 ca                	or     edx,ecx
c001facf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fad3:	88 15 81 1b 03 c0    	mov    BYTE PTR ds:0xc0031b81,dl
c001fad9:	89 0c c5 88 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce478],ecx
c001fae0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fae4:	89 14 c5 84 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce47c],edx
c001faeb:	a1 c4 1b 03 c0       	mov    eax,ds:0xc0031bc4
c001faf0:	83 f8 08             	cmp    eax,0x8
c001faf3:	75 08                	jne    c001fafd <Vm::fpuPush(unsigned long long)+0x56>
c001faf5:	80 0d 80 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b80,0x40
c001fafc:	c3                   	ret    
c001fafd:	40                   	inc    eax
c001fafe:	a3 c4 1b 03 c0       	mov    ds:0xc0031bc4,eax
c001fb03:	c3                   	ret    

c001fb04 <Vm::fpuPop()>:
c001fb04:	8a 0d 81 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031b81
c001fb0a:	53                   	push   ebx
c001fb0b:	c0 e9 03             	shr    cl,0x3
c001fb0e:	8a 1d 81 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031b81
c001fb14:	83 e1 07             	and    ecx,0x7
c001fb17:	83 e3 c7             	and    ebx,0xffffffc7
c001fb1a:	8b 04 cd 84 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce47c]
c001fb21:	8b 14 cd 88 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce478]
c001fb28:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb2f:	83 e1 38             	and    ecx,0x38
c001fb32:	09 d9                	or     ecx,ebx
c001fb34:	88 0d 81 1b 03 c0    	mov    BYTE PTR ds:0xc0031b81,cl
c001fb3a:	8b 0d c4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031bc4
c001fb40:	85 c9                	test   ecx,ecx
c001fb42:	74 09                	je     c001fb4d <Vm::fpuPop()+0x49>
c001fb44:	49                   	dec    ecx
c001fb45:	89 0d c4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bc4,ecx
c001fb4b:	eb 07                	jmp    c001fb54 <Vm::fpuPop()+0x50>
c001fb4d:	80 0d 80 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b80,0x40
c001fb54:	5b                   	pop    ebx
c001fb55:	c3                   	ret    

c001fb56 <Vm::x87Handler(regs*)>:
c001fb56:	55                   	push   ebp
c001fb57:	57                   	push   edi
c001fb58:	56                   	push   esi
c001fb59:	53                   	push   ebx
c001fb5a:	83 ec 1c             	sub    esp,0x1c
c001fb5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb61:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb66:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb69:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb71:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb75:	50                   	push   eax
c001fb76:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb7a:	50                   	push   eax
c001fb7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb7f:	50                   	push   eax
c001fb80:	53                   	push   ebx
c001fb81:	e8 28 a2 ff ff       	call   c0019dae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb86:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb89:	83 c4 10             	add    esp,0x10
c001fb8c:	89 c6                	mov    esi,eax
c001fb8e:	80 fa d9             	cmp    dl,0xd9
c001fb91:	0f 85 52 01 00 00    	jne    c001fce9 <Vm::x87Handler(regs*)+0x193>
c001fb97:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb9b:	8d 50 20             	lea    edx,[eax+0x20]
c001fb9e:	80 fa 0e             	cmp    dl,0xe
c001fba1:	0f 87 86 00 00 00    	ja     c001fc2d <Vm::x87Handler(regs*)+0xd7>
c001fba7:	0f b6 d2             	movzx  edx,dl
c001fbaa:	ff 24 95 38 c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd36c8]
c001fbb1:	e8 e7 fc ff ff       	call   c001f89d <Vm::fpuGet0()>
c001fbb6:	eb 05                	jmp    c001fbbd <Vm::x87Handler(regs*)+0x67>
c001fbb8:	e8 e5 fc ff ff       	call   c001f8a2 <Vm::fpuGet1()>
c001fbbd:	57                   	push   edi
c001fbbe:	57                   	push   edi
c001fbbf:	52                   	push   edx
c001fbc0:	50                   	push   eax
c001fbc1:	e8 e1 fe ff ff       	call   c001faa7 <Vm::fpuPush(unsigned long long)>
c001fbc6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbca:	83 c4 10             	add    esp,0x10
c001fbcd:	b0 01                	mov    al,0x1
c001fbcf:	e9 e3 09 00 00       	jmp    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	6a 00                	push   0x0
c001fbd9:	e8 3b fe ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fbde:	59                   	pop    ecx
c001fbdf:	5e                   	pop    esi
c001fbe0:	52                   	push   edx
c001fbe1:	50                   	push   eax
c001fbe2:	e8 c2 fd ff ff       	call   c001f9a9 <Vm::fpuChs(unsigned long long)>
c001fbe7:	eb 13                	jmp    c001fbfc <Vm::x87Handler(regs*)+0xa6>
c001fbe9:	83 ec 0c             	sub    esp,0xc
c001fbec:	6a 00                	push   0x0
c001fbee:	e8 26 fe ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fbf3:	5f                   	pop    edi
c001fbf4:	5d                   	pop    ebp
c001fbf5:	52                   	push   edx
c001fbf6:	50                   	push   eax
c001fbf7:	e8 a4 fd ff ff       	call   c001f9a0 <Vm::fpuAbs(unsigned long long)>
c001fbfc:	83 c4 0c             	add    esp,0xc
c001fbff:	52                   	push   edx
c001fc00:	50                   	push   eax
c001fc01:	6a 00                	push   0x0
c001fc03:	e8 54 fe ff ff       	call   c001fa5c <Vm::fpuSetReg(int, unsigned long long)>
c001fc08:	eb bc                	jmp    c001fbc6 <Vm::x87Handler(regs*)+0x70>
c001fc0a:	e8 d3 fc ff ff       	call   c001f8e2 <Vm::fpuGetLog210()>
c001fc0f:	eb ac                	jmp    c001fbbd <Vm::x87Handler(regs*)+0x67>
c001fc11:	e8 9c fc ff ff       	call   c001f8b2 <Vm::fpuGetLog2E()>
c001fc16:	eb a5                	jmp    c001fbbd <Vm::x87Handler(regs*)+0x67>
c001fc18:	e8 8d fc ff ff       	call   c001f8aa <Vm::fpuGetPi()>
c001fc1d:	eb 9e                	jmp    c001fbbd <Vm::x87Handler(regs*)+0x67>
c001fc1f:	e8 d6 fc ff ff       	call   c001f8fa <Vm::fpuGetLog102()>
c001fc24:	eb 97                	jmp    c001fbbd <Vm::x87Handler(regs*)+0x67>
c001fc26:	e8 9f fc ff ff       	call   c001f8ca <Vm::fpuGetLogE2()>
c001fc2b:	eb 90                	jmp    c001fbbd <Vm::x87Handler(regs*)+0x67>
c001fc2d:	8d 50 40             	lea    edx,[eax+0x40]
c001fc30:	80 fa 07             	cmp    dl,0x7
c001fc33:	77 15                	ja     c001fc4a <Vm::x87Handler(regs*)+0xf4>
c001fc35:	83 ec 0c             	sub    esp,0xc
c001fc38:	2d c0 00 00 00       	sub    eax,0xc0
c001fc3d:	50                   	push   eax
c001fc3e:	e8 d6 fd ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fc43:	59                   	pop    ecx
c001fc44:	5e                   	pop    esi
c001fc45:	e9 75 ff ff ff       	jmp    c001fbbf <Vm::x87Handler(regs*)+0x69>
c001fc4a:	8d 50 38             	lea    edx,[eax+0x38]
c001fc4d:	80 fa 07             	cmp    dl,0x7
c001fc50:	77 3c                	ja     c001fc8e <Vm::x87Handler(regs*)+0x138>
c001fc52:	83 ec 0c             	sub    esp,0xc
c001fc55:	2d c8 00 00 00       	sub    eax,0xc8
c001fc5a:	50                   	push   eax
c001fc5b:	e8 b9 fd ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fc60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc67:	89 c6                	mov    esi,eax
c001fc69:	89 d7                	mov    edi,edx
c001fc6b:	e8 a9 fd ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fc70:	83 c4 0c             	add    esp,0xc
c001fc73:	52                   	push   edx
c001fc74:	50                   	push   eax
c001fc75:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc79:	2d c8 00 00 00       	sub    eax,0xc8
c001fc7e:	50                   	push   eax
c001fc7f:	e8 d8 fd ff ff       	call   c001fa5c <Vm::fpuSetReg(int, unsigned long long)>
c001fc84:	83 c4 0c             	add    esp,0xc
c001fc87:	57                   	push   edi
c001fc88:	56                   	push   esi
c001fc89:	e9 73 ff ff ff       	jmp    c001fc01 <Vm::x87Handler(regs*)+0xab>
c001fc8e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc92:	84 d2                	test   dl,dl
c001fc94:	75 0f                	jne    c001fca5 <Vm::x87Handler(regs*)+0x14f>
c001fc96:	83 ec 0c             	sub    esp,0xc
c001fc99:	ff 36                	push   DWORD PTR [esi]
c001fc9b:	e8 c8 fa ff ff       	call   c001f768 <Vm::fpu32ToInternal(unsigned int)>
c001fca0:	e9 bf 00 00 00       	jmp    c001fd64 <Vm::x87Handler(regs*)+0x20e>
c001fca5:	80 fa 03             	cmp    dl,0x3
c001fca8:	75 13                	jne    c001fcbd <Vm::x87Handler(regs*)+0x167>
c001fcaa:	e8 55 fe ff ff       	call   c001fb04 <Vm::fpuPop()>
c001fcaf:	55                   	push   ebp
c001fcb0:	55                   	push   ebp
c001fcb1:	52                   	push   edx
c001fcb2:	50                   	push   eax
c001fcb3:	e8 4c fa ff ff       	call   c001f704 <Vm::fpuInternalTo32(unsigned long long)>
c001fcb8:	e9 88 00 00 00       	jmp    c001fd45 <Vm::x87Handler(regs*)+0x1ef>
c001fcbd:	80 fa 05             	cmp    dl,0x5
c001fcc0:	75 0e                	jne    c001fcd0 <Vm::x87Handler(regs*)+0x17a>
c001fcc2:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fcc5:	66 a3 82 1b 03 c0    	mov    ds:0xc0031b82,ax
c001fccb:	e9 df 00 00 00       	jmp    c001fdaf <Vm::x87Handler(regs*)+0x259>
c001fcd0:	31 c0                	xor    eax,eax
c001fcd2:	80 fa 07             	cmp    dl,0x7
c001fcd5:	0f 85 dc 08 00 00    	jne    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c001fcdb:	66 a1 82 1b 03 c0    	mov    ax,ds:0xc0031b82
c001fce1:	66 89 06             	mov    WORD PTR [esi],ax
c001fce4:	e9 c6 00 00 00       	jmp    c001fdaf <Vm::x87Handler(regs*)+0x259>
c001fce9:	80 fa d8             	cmp    dl,0xd8
c001fcec:	0f 84 c9 00 00 00    	je     c001fdbb <Vm::x87Handler(regs*)+0x265>
c001fcf2:	80 fa dc             	cmp    dl,0xdc
c001fcf5:	0f 84 0d 02 00 00    	je     c001ff08 <Vm::x87Handler(regs*)+0x3b2>
c001fcfb:	80 fa de             	cmp    dl,0xde
c001fcfe:	0f 84 cd 02 00 00    	je     c001ffd1 <Vm::x87Handler(regs*)+0x47b>
c001fd04:	80 fa dd             	cmp    dl,0xdd
c001fd07:	0f 84 5f 04 00 00    	je     c002016c <Vm::x87Handler(regs*)+0x616>
c001fd0d:	80 fa da             	cmp    dl,0xda
c001fd10:	0f 84 24 05 00 00    	je     c002023a <Vm::x87Handler(regs*)+0x6e4>
c001fd16:	80 fa df             	cmp    dl,0xdf
c001fd19:	0f 84 68 05 00 00    	je     c0020287 <Vm::x87Handler(regs*)+0x731>
c001fd1f:	31 c0                	xor    eax,eax
c001fd21:	80 fa db             	cmp    dl,0xdb
c001fd24:	0f 85 8d 08 00 00    	jne    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c001fd2a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd2e:	80 fa 03             	cmp    dl,0x3
c001fd31:	0f 85 70 06 00 00    	jne    c00203a7 <Vm::x87Handler(regs*)+0x851>
c001fd37:	e8 c8 fd ff ff       	call   c001fb04 <Vm::fpuPop()>
c001fd3c:	55                   	push   ebp
c001fd3d:	55                   	push   ebp
c001fd3e:	52                   	push   edx
c001fd3f:	50                   	push   eax
c001fd40:	e8 71 fa ff ff       	call   c001f7b6 <Vm::fpuFloatToLong(unsigned long long)>
c001fd45:	83 c4 10             	add    esp,0x10
c001fd48:	89 06                	mov    DWORD PTR [esi],eax
c001fd4a:	eb 63                	jmp    c001fdaf <Vm::x87Handler(regs*)+0x259>
c001fd4c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd50:	84 d2                	test   dl,dl
c001fd52:	0f 85 e6 05 00 00    	jne    c002033e <Vm::x87Handler(regs*)+0x7e8>
c001fd58:	57                   	push   edi
c001fd59:	57                   	push   edi
c001fd5a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd5d:	ff 36                	push   DWORD PTR [esi]
c001fd5f:	e8 49 fa ff ff       	call   c001f7ad <Vm::fpu64ToInternal(unsigned long long)>
c001fd64:	5e                   	pop    esi
c001fd65:	5f                   	pop    edi
c001fd66:	52                   	push   edx
c001fd67:	50                   	push   eax
c001fd68:	e8 3a fd ff ff       	call   c001faa7 <Vm::fpuPush(unsigned long long)>
c001fd6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd71:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd74:	e9 51 fe ff ff       	jmp    c001fbca <Vm::x87Handler(regs*)+0x74>
c001fd79:	80 fa 03             	cmp    dl,0x3
c001fd7c:	0f 85 d7 06 00 00    	jne    c0020459 <Vm::x87Handler(regs*)+0x903>
c001fd82:	57                   	push   edi
c001fd83:	57                   	push   edi
c001fd84:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd87:	ff 36                	push   DWORD PTR [esi]
c001fd89:	e8 1f fa ff ff       	call   c001f7ad <Vm::fpu64ToInternal(unsigned long long)>
c001fd8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd95:	89 c6                	mov    esi,eax
c001fd97:	89 d7                	mov    edi,edx
c001fd99:	e8 7b fc ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fd9e:	57                   	push   edi
c001fd9f:	56                   	push   esi
c001fda0:	52                   	push   edx
c001fda1:	50                   	push   eax
c001fda2:	e8 95 fb ff ff       	call   c001f93c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fda7:	83 c4 20             	add    esp,0x20
c001fdaa:	e8 55 fd ff ff       	call   c001fb04 <Vm::fpuPop()>
c001fdaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fdb3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdb6:	e9 12 fe ff ff       	jmp    c001fbcd <Vm::x87Handler(regs*)+0x77>
c001fdbb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdbf:	8d 50 40             	lea    edx,[eax+0x40]
c001fdc2:	80 fa 07             	cmp    dl,0x7
c001fdc5:	77 29                	ja     c001fdf0 <Vm::x87Handler(regs*)+0x29a>
c001fdc7:	83 ec 0c             	sub    esp,0xc
c001fdca:	2d c0 00 00 00       	sub    eax,0xc0
c001fdcf:	50                   	push   eax
c001fdd0:	e8 44 fc ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fdd5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fddc:	89 c6                	mov    esi,eax
c001fdde:	89 d7                	mov    edi,edx
c001fde0:	e8 34 fc ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fde5:	57                   	push   edi
c001fde6:	56                   	push   esi
c001fde7:	52                   	push   edx
c001fde8:	50                   	push   eax
c001fde9:	e8 a1 fb ff ff       	call   c001f98f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdee:	eb 2f                	jmp    c001fe1f <Vm::x87Handler(regs*)+0x2c9>
c001fdf0:	8d 50 38             	lea    edx,[eax+0x38]
c001fdf3:	80 fa 07             	cmp    dl,0x7
c001fdf6:	77 2f                	ja     c001fe27 <Vm::x87Handler(regs*)+0x2d1>
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	2d c8 00 00 00       	sub    eax,0xc8
c001fe00:	50                   	push   eax
c001fe01:	e8 13 fc ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fe06:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe0d:	89 c6                	mov    esi,eax
c001fe0f:	89 d7                	mov    edi,edx
c001fe11:	e8 03 fc ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fe16:	57                   	push   edi
c001fe17:	56                   	push   esi
c001fe18:	52                   	push   edx
c001fe19:	50                   	push   eax
c001fe1a:	e8 a9 fb ff ff       	call   c001f9c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe1f:	83 c4 1c             	add    esp,0x1c
c001fe22:	e9 d8 fd ff ff       	jmp    c001fbff <Vm::x87Handler(regs*)+0xa9>
c001fe27:	8d 50 30             	lea    edx,[eax+0x30]
c001fe2a:	80 fa 07             	cmp    dl,0x7
c001fe2d:	77 0d                	ja     c001fe3c <Vm::x87Handler(regs*)+0x2e6>
c001fe2f:	83 ec 0c             	sub    esp,0xc
c001fe32:	2d d0 00 00 00       	sub    eax,0xd0
c001fe37:	e9 99 03 00 00       	jmp    c00201d5 <Vm::x87Handler(regs*)+0x67f>
c001fe3c:	8d 50 28             	lea    edx,[eax+0x28]
c001fe3f:	80 fa 07             	cmp    dl,0x7
c001fe42:	77 0d                	ja     c001fe51 <Vm::x87Handler(regs*)+0x2fb>
c001fe44:	83 ec 0c             	sub    esp,0xc
c001fe47:	2d d8 00 00 00       	sub    eax,0xd8
c001fe4c:	e9 c0 03 00 00       	jmp    c0020211 <Vm::x87Handler(regs*)+0x6bb>
c001fe51:	8d 50 20             	lea    edx,[eax+0x20]
c001fe54:	80 fa 07             	cmp    dl,0x7
c001fe57:	77 1b                	ja     c001fe74 <Vm::x87Handler(regs*)+0x31e>
c001fe59:	83 ec 0c             	sub    esp,0xc
c001fe5c:	2d e0 00 00 00       	sub    eax,0xe0
c001fe61:	50                   	push   eax
c001fe62:	e8 b2 fb ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fe67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe6e:	89 c6                	mov    esi,eax
c001fe70:	89 d7                	mov    edi,edx
c001fe72:	eb 22                	jmp    c001fe96 <Vm::x87Handler(regs*)+0x340>
c001fe74:	8d 50 18             	lea    edx,[eax+0x18]
c001fe77:	80 fa 07             	cmp    dl,0x7
c001fe7a:	77 2d                	ja     c001fea9 <Vm::x87Handler(regs*)+0x353>
c001fe7c:	83 ec 0c             	sub    esp,0xc
c001fe7f:	6a 00                	push   0x0
c001fe81:	e8 93 fb ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fe86:	89 c6                	mov    esi,eax
c001fe88:	89 d7                	mov    edi,edx
c001fe8a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe8e:	2d e8 00 00 00       	sub    eax,0xe8
c001fe93:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe96:	e8 7e fb ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fe9b:	57                   	push   edi
c001fe9c:	56                   	push   esi
c001fe9d:	52                   	push   edx
c001fe9e:	50                   	push   eax
c001fe9f:	e8 15 fb ff ff       	call   c001f9b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fea4:	e9 76 ff ff ff       	jmp    c001fe1f <Vm::x87Handler(regs*)+0x2c9>
c001fea9:	8d 50 10             	lea    edx,[eax+0x10]
c001feac:	80 fa 07             	cmp    dl,0x7
c001feaf:	77 1b                	ja     c001fecc <Vm::x87Handler(regs*)+0x376>
c001feb1:	83 ec 0c             	sub    esp,0xc
c001feb4:	2d f0 00 00 00       	sub    eax,0xf0
c001feb9:	50                   	push   eax
c001feba:	e8 5a fb ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001febf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec6:	89 c6                	mov    esi,eax
c001fec8:	89 d7                	mov    edi,edx
c001feca:	eb 22                	jmp    c001feee <Vm::x87Handler(regs*)+0x398>
c001fecc:	3c f7                	cmp    al,0xf7
c001fece:	0f 86 d1 03 00 00    	jbe    c00202a5 <Vm::x87Handler(regs*)+0x74f>
c001fed4:	83 ec 0c             	sub    esp,0xc
c001fed7:	6a 00                	push   0x0
c001fed9:	e8 3b fb ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fede:	89 c6                	mov    esi,eax
c001fee0:	89 d7                	mov    edi,edx
c001fee2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee6:	2d f8 00 00 00       	sub    eax,0xf8
c001feeb:	89 04 24             	mov    DWORD PTR [esp],eax
c001feee:	e8 26 fb ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fef3:	57                   	push   edi
c001fef4:	56                   	push   esi
c001fef5:	52                   	push   edx
c001fef6:	50                   	push   eax
c001fef7:	e8 eb fa ff ff       	call   c001f9e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fefc:	83 c4 1c             	add    esp,0x1c
c001feff:	52                   	push   edx
c001ff00:	50                   	push   eax
c001ff01:	6a 00                	push   0x0
c001ff03:	e9 51 02 00 00       	jmp    c0020159 <Vm::x87Handler(regs*)+0x603>
c001ff08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0c:	8d 50 40             	lea    edx,[eax+0x40]
c001ff0f:	80 fa 07             	cmp    dl,0x7
c001ff12:	77 37                	ja     c001ff4b <Vm::x87Handler(regs*)+0x3f5>
c001ff14:	83 ec 0c             	sub    esp,0xc
c001ff17:	2d c0 00 00 00       	sub    eax,0xc0
c001ff1c:	50                   	push   eax
c001ff1d:	e8 f7 fa ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001ff22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff29:	89 c6                	mov    esi,eax
c001ff2b:	89 d7                	mov    edi,edx
c001ff2d:	e8 e7 fa ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001ff32:	57                   	push   edi
c001ff33:	56                   	push   esi
c001ff34:	52                   	push   edx
c001ff35:	50                   	push   eax
c001ff36:	e8 54 fa ff ff       	call   c001f98f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff3b:	83 c4 1c             	add    esp,0x1c
c001ff3e:	52                   	push   edx
c001ff3f:	50                   	push   eax
c001ff40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff44:	2d c0 00 00 00       	sub    eax,0xc0
c001ff49:	eb 3d                	jmp    c001ff88 <Vm::x87Handler(regs*)+0x432>
c001ff4b:	8d 50 38             	lea    edx,[eax+0x38]
c001ff4e:	80 fa 07             	cmp    dl,0x7
c001ff51:	77 3b                	ja     c001ff8e <Vm::x87Handler(regs*)+0x438>
c001ff53:	83 ec 0c             	sub    esp,0xc
c001ff56:	2d c8 00 00 00       	sub    eax,0xc8
c001ff5b:	50                   	push   eax
c001ff5c:	e8 b8 fa ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001ff61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff68:	89 c6                	mov    esi,eax
c001ff6a:	89 d7                	mov    edi,edx
c001ff6c:	e8 a8 fa ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001ff71:	57                   	push   edi
c001ff72:	56                   	push   esi
c001ff73:	52                   	push   edx
c001ff74:	50                   	push   eax
c001ff75:	e8 4e fa ff ff       	call   c001f9c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff7a:	83 c4 1c             	add    esp,0x1c
c001ff7d:	52                   	push   edx
c001ff7e:	50                   	push   eax
c001ff7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff83:	2d c8 00 00 00       	sub    eax,0xc8
c001ff88:	50                   	push   eax
c001ff89:	e9 75 fc ff ff       	jmp    c001fc03 <Vm::x87Handler(regs*)+0xad>
c001ff8e:	83 c0 18             	add    eax,0x18
c001ff91:	3c 07                	cmp    al,0x7
c001ff93:	0f 87 3b 04 00 00    	ja     c00203d4 <Vm::x87Handler(regs*)+0x87e>
c001ff99:	83 ec 0c             	sub    esp,0xc
c001ff9c:	6a 00                	push   0x0
c001ff9e:	e8 76 fa ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001ffa3:	89 c6                	mov    esi,eax
c001ffa5:	89 d7                	mov    edi,edx
c001ffa7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffab:	2d e8 00 00 00       	sub    eax,0xe8
c001ffb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffb3:	e8 61 fa ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001ffb8:	57                   	push   edi
c001ffb9:	56                   	push   esi
c001ffba:	52                   	push   edx
c001ffbb:	50                   	push   eax
c001ffbc:	e8 f8 f9 ff ff       	call   c001f9b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffc1:	83 c4 1c             	add    esp,0x1c
c001ffc4:	52                   	push   edx
c001ffc5:	50                   	push   eax
c001ffc6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffca:	2d e8 00 00 00       	sub    eax,0xe8
c001ffcf:	eb b7                	jmp    c001ff88 <Vm::x87Handler(regs*)+0x432>
c001ffd1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd5:	8d 50 40             	lea    edx,[eax+0x40]
c001ffd8:	80 fa 07             	cmp    dl,0x7
c001ffdb:	77 3a                	ja     c0020017 <Vm::x87Handler(regs*)+0x4c1>
c001ffdd:	83 ec 0c             	sub    esp,0xc
c001ffe0:	2d c0 00 00 00       	sub    eax,0xc0
c001ffe5:	50                   	push   eax
c001ffe6:	e8 2e fa ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001ffeb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fff2:	89 c6                	mov    esi,eax
c001fff4:	89 d7                	mov    edi,edx
c001fff6:	e8 1e fa ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c001fffb:	57                   	push   edi
c001fffc:	56                   	push   esi
c001fffd:	52                   	push   edx
c001fffe:	50                   	push   eax
c001ffff:	e8 8b f9 ff ff       	call   c001f98f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020004:	83 c4 1c             	add    esp,0x1c
c0020007:	52                   	push   edx
c0020008:	50                   	push   eax
c0020009:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000d:	2d c0 00 00 00       	sub    eax,0xc0
c0020012:	e9 9e 01 00 00       	jmp    c00201b5 <Vm::x87Handler(regs*)+0x65f>
c0020017:	8d 50 20             	lea    edx,[eax+0x20]
c002001a:	80 fa 07             	cmp    dl,0x7
c002001d:	77 3a                	ja     c0020059 <Vm::x87Handler(regs*)+0x503>
c002001f:	83 ec 0c             	sub    esp,0xc
c0020022:	2d e0 00 00 00       	sub    eax,0xe0
c0020027:	50                   	push   eax
c0020028:	e8 ec f9 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c002002d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020034:	89 c6                	mov    esi,eax
c0020036:	89 d7                	mov    edi,edx
c0020038:	e8 dc f9 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c002003d:	57                   	push   edi
c002003e:	56                   	push   esi
c002003f:	52                   	push   edx
c0020040:	50                   	push   eax
c0020041:	e8 73 f9 ff ff       	call   c001f9b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020046:	83 c4 1c             	add    esp,0x1c
c0020049:	52                   	push   edx
c002004a:	50                   	push   eax
c002004b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002004f:	2d e0 00 00 00       	sub    eax,0xe0
c0020054:	e9 5c 01 00 00       	jmp    c00201b5 <Vm::x87Handler(regs*)+0x65f>
c0020059:	8d 50 18             	lea    edx,[eax+0x18]
c002005c:	80 fa 07             	cmp    dl,0x7
c002005f:	77 3b                	ja     c002009c <Vm::x87Handler(regs*)+0x546>
c0020061:	83 ec 0c             	sub    esp,0xc
c0020064:	6a 00                	push   0x0
c0020066:	e8 ae f9 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c002006b:	89 c6                	mov    esi,eax
c002006d:	89 d7                	mov    edi,edx
c002006f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020073:	2d e8 00 00 00       	sub    eax,0xe8
c0020078:	89 04 24             	mov    DWORD PTR [esp],eax
c002007b:	e8 99 f9 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020080:	57                   	push   edi
c0020081:	56                   	push   esi
c0020082:	52                   	push   edx
c0020083:	50                   	push   eax
c0020084:	e8 30 f9 ff ff       	call   c001f9b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020089:	83 c4 1c             	add    esp,0x1c
c002008c:	52                   	push   edx
c002008d:	50                   	push   eax
c002008e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020092:	2d e8 00 00 00       	sub    eax,0xe8
c0020097:	e9 19 01 00 00       	jmp    c00201b5 <Vm::x87Handler(regs*)+0x65f>
c002009c:	8d 50 38             	lea    edx,[eax+0x38]
c002009f:	80 fa 07             	cmp    dl,0x7
c00200a2:	77 37                	ja     c00200db <Vm::x87Handler(regs*)+0x585>
c00200a4:	83 ec 0c             	sub    esp,0xc
c00200a7:	2d c8 00 00 00       	sub    eax,0xc8
c00200ac:	50                   	push   eax
c00200ad:	e8 67 f9 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00200b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200b9:	89 c6                	mov    esi,eax
c00200bb:	89 d7                	mov    edi,edx
c00200bd:	e8 57 f9 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00200c2:	57                   	push   edi
c00200c3:	56                   	push   esi
c00200c4:	52                   	push   edx
c00200c5:	50                   	push   eax
c00200c6:	e8 fd f8 ff ff       	call   c001f9c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200cb:	83 c4 1c             	add    esp,0x1c
c00200ce:	52                   	push   edx
c00200cf:	50                   	push   eax
c00200d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d4:	2d c8 00 00 00       	sub    eax,0xc8
c00200d9:	eb 7d                	jmp    c0020158 <Vm::x87Handler(regs*)+0x602>
c00200db:	3c f7                	cmp    al,0xf7
c00200dd:	76 38                	jbe    c0020117 <Vm::x87Handler(regs*)+0x5c1>
c00200df:	83 ec 0c             	sub    esp,0xc
c00200e2:	6a 00                	push   0x0
c00200e4:	e8 30 f9 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00200e9:	89 c6                	mov    esi,eax
c00200eb:	89 d7                	mov    edi,edx
c00200ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200f1:	2d f8 00 00 00       	sub    eax,0xf8
c00200f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00200f9:	e8 1b f9 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00200fe:	57                   	push   edi
c00200ff:	56                   	push   esi
c0020100:	52                   	push   edx
c0020101:	50                   	push   eax
c0020102:	e8 e0 f8 ff ff       	call   c001f9e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020107:	83 c4 1c             	add    esp,0x1c
c002010a:	52                   	push   edx
c002010b:	50                   	push   eax
c002010c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020110:	2d f8 00 00 00       	sub    eax,0xf8
c0020115:	eb 41                	jmp    c0020158 <Vm::x87Handler(regs*)+0x602>
c0020117:	8d 50 10             	lea    edx,[eax+0x10]
c002011a:	80 fa 07             	cmp    dl,0x7
c002011d:	0f 87 5a 01 00 00    	ja     c002027d <Vm::x87Handler(regs*)+0x727>
c0020123:	83 ec 0c             	sub    esp,0xc
c0020126:	2d f0 00 00 00       	sub    eax,0xf0
c002012b:	50                   	push   eax
c002012c:	e8 e8 f8 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020131:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020138:	89 c6                	mov    esi,eax
c002013a:	89 d7                	mov    edi,edx
c002013c:	e8 d8 f8 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020141:	57                   	push   edi
c0020142:	56                   	push   esi
c0020143:	52                   	push   edx
c0020144:	50                   	push   eax
c0020145:	e8 9d f8 ff ff       	call   c001f9e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002014a:	83 c4 1c             	add    esp,0x1c
c002014d:	52                   	push   edx
c002014e:	50                   	push   eax
c002014f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020153:	2d f0 00 00 00       	sub    eax,0xf0
c0020158:	50                   	push   eax
c0020159:	e8 fe f8 ff ff       	call   c001fa5c <Vm::fpuSetReg(int, unsigned long long)>
c002015e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020162:	e8 9d f9 ff ff       	call   c001fb04 <Vm::fpuPop()>
c0020167:	e9 5e fa ff ff       	jmp    c001fbca <Vm::x87Handler(regs*)+0x74>
c002016c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020170:	8d 50 30             	lea    edx,[eax+0x30]
c0020173:	80 fa 07             	cmp    dl,0x7
c0020176:	77 1d                	ja     c0020195 <Vm::x87Handler(regs*)+0x63f>
c0020178:	83 ec 0c             	sub    esp,0xc
c002017b:	6a 00                	push   0x0
c002017d:	e8 97 f8 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020182:	83 c4 0c             	add    esp,0xc
c0020185:	52                   	push   edx
c0020186:	50                   	push   eax
c0020187:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002018b:	2d d0 00 00 00       	sub    eax,0xd0
c0020190:	e9 f3 fd ff ff       	jmp    c001ff88 <Vm::x87Handler(regs*)+0x432>
c0020195:	8d 50 28             	lea    edx,[eax+0x28]
c0020198:	80 fa 07             	cmp    dl,0x7
c002019b:	77 28                	ja     c00201c5 <Vm::x87Handler(regs*)+0x66f>
c002019d:	83 ec 0c             	sub    esp,0xc
c00201a0:	6a 00                	push   0x0
c00201a2:	e8 72 f8 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00201a7:	83 c4 0c             	add    esp,0xc
c00201aa:	52                   	push   edx
c00201ab:	50                   	push   eax
c00201ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201b0:	2d d8 00 00 00       	sub    eax,0xd8
c00201b5:	50                   	push   eax
c00201b6:	e8 a1 f8 ff ff       	call   c001fa5c <Vm::fpuSetReg(int, unsigned long long)>
c00201bb:	e8 44 f9 ff ff       	call   c001fb04 <Vm::fpuPop()>
c00201c0:	e9 01 fa ff ff       	jmp    c001fbc6 <Vm::x87Handler(regs*)+0x70>
c00201c5:	8d 50 20             	lea    edx,[eax+0x20]
c00201c8:	80 fa 07             	cmp    dl,0x7
c00201cb:	77 30                	ja     c00201fd <Vm::x87Handler(regs*)+0x6a7>
c00201cd:	83 ec 0c             	sub    esp,0xc
c00201d0:	2d e0 00 00 00       	sub    eax,0xe0
c00201d5:	50                   	push   eax
c00201d6:	e8 3e f8 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00201db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201e2:	89 c6                	mov    esi,eax
c00201e4:	89 d7                	mov    edi,edx
c00201e6:	e8 2e f8 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00201eb:	57                   	push   edi
c00201ec:	56                   	push   esi
c00201ed:	52                   	push   edx
c00201ee:	50                   	push   eax
c00201ef:	e8 48 f7 ff ff       	call   c001f93c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201f4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201f8:	e9 54 02 00 00       	jmp    c0020451 <Vm::x87Handler(regs*)+0x8fb>
c00201fd:	8d 50 18             	lea    edx,[eax+0x18]
c0020200:	80 fa 07             	cmp    dl,0x7
c0020203:	0f 87 43 fb ff ff    	ja     c001fd4c <Vm::x87Handler(regs*)+0x1f6>
c0020209:	83 ec 0c             	sub    esp,0xc
c002020c:	2d e8 00 00 00       	sub    eax,0xe8
c0020211:	50                   	push   eax
c0020212:	e8 02 f8 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020217:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002021e:	89 c6                	mov    esi,eax
c0020220:	89 d7                	mov    edi,edx
c0020222:	e8 f2 f7 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020227:	57                   	push   edi
c0020228:	56                   	push   esi
c0020229:	52                   	push   edx
c002022a:	50                   	push   eax
c002022b:	e8 0c f7 ff ff       	call   c001f93c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020230:	83 c4 20             	add    esp,0x20
c0020233:	e8 cc f8 ff ff       	call   c001fb04 <Vm::fpuPop()>
c0020238:	eb 62                	jmp    c002029c <Vm::x87Handler(regs*)+0x746>
c002023a:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002023e:	0f 85 0f 01 00 00    	jne    c0020353 <Vm::x87Handler(regs*)+0x7fd>
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	6a 01                	push   0x1
c0020249:	e8 cb f7 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c002024e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020255:	89 c6                	mov    esi,eax
c0020257:	89 d7                	mov    edi,edx
c0020259:	e8 bb f7 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c002025e:	57                   	push   edi
c002025f:	56                   	push   esi
c0020260:	52                   	push   edx
c0020261:	50                   	push   eax
c0020262:	e8 d5 f6 ff ff       	call   c001f93c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020267:	83 c4 20             	add    esp,0x20
c002026a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002026e:	e8 91 f8 ff ff       	call   c001fb04 <Vm::fpuPop()>
c0020273:	e8 8c f8 ff ff       	call   c001fb04 <Vm::fpuPop()>
c0020278:	e9 50 f9 ff ff       	jmp    c001fbcd <Vm::x87Handler(regs*)+0x77>
c002027d:	3c d9                	cmp    al,0xd9
c002027f:	0f 85 b5 02 00 00    	jne    c002053a <Vm::x87Handler(regs*)+0x9e4>
c0020285:	eb bd                	jmp    c0020244 <Vm::x87Handler(regs*)+0x6ee>
c0020287:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002028b:	0f 85 ea 02 00 00    	jne    c002057b <Vm::x87Handler(regs*)+0xa25>
c0020291:	0f b7 05 80 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031b80
c0020298:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002029c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202a0:	e9 28 f9 ff ff       	jmp    c001fbcd <Vm::x87Handler(regs*)+0x77>
c00202a5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202a9:	84 d2                	test   dl,dl
c00202ab:	75 0f                	jne    c00202bc <Vm::x87Handler(regs*)+0x766>
c00202ad:	83 ec 0c             	sub    esp,0xc
c00202b0:	ff 36                	push   DWORD PTR [esi]
c00202b2:	e8 b1 f4 ff ff       	call   c001f768 <Vm::fpu32ToInternal(unsigned int)>
c00202b7:	e9 2c 01 00 00       	jmp    c00203e8 <Vm::x87Handler(regs*)+0x892>
c00202bc:	80 fa 01             	cmp    dl,0x1
c00202bf:	75 0f                	jne    c00202d0 <Vm::x87Handler(regs*)+0x77a>
c00202c1:	83 ec 0c             	sub    esp,0xc
c00202c4:	ff 36                	push   DWORD PTR [esi]
c00202c6:	e8 9d f4 ff ff       	call   c001f768 <Vm::fpu32ToInternal(unsigned int)>
c00202cb:	e9 81 02 00 00       	jmp    c0020551 <Vm::x87Handler(regs*)+0x9fb>
c00202d0:	80 fa 04             	cmp    dl,0x4
c00202d3:	75 0f                	jne    c00202e4 <Vm::x87Handler(regs*)+0x78e>
c00202d5:	83 ec 0c             	sub    esp,0xc
c00202d8:	ff 36                	push   DWORD PTR [esi]
c00202da:	e8 89 f4 ff ff       	call   c001f768 <Vm::fpu32ToInternal(unsigned int)>
c00202df:	e9 86 01 00 00       	jmp    c002046a <Vm::x87Handler(regs*)+0x914>
c00202e4:	80 fa 05             	cmp    dl,0x5
c00202e7:	75 1b                	jne    c0020304 <Vm::x87Handler(regs*)+0x7ae>
c00202e9:	83 ec 0c             	sub    esp,0xc
c00202ec:	6a 00                	push   0x0
c00202ee:	e8 26 f7 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00202f3:	89 c7                	mov    edi,eax
c00202f5:	89 d5                	mov    ebp,edx
c00202f7:	58                   	pop    eax
c00202f8:	ff 36                	push   DWORD PTR [esi]
c00202fa:	e8 69 f4 ff ff       	call   c001f768 <Vm::fpu32ToInternal(unsigned int)>
c00202ff:	e9 a3 01 00 00       	jmp    c00204a7 <Vm::x87Handler(regs*)+0x951>
c0020304:	80 fa 06             	cmp    dl,0x6
c0020307:	75 0f                	jne    c0020318 <Vm::x87Handler(regs*)+0x7c2>
c0020309:	83 ec 0c             	sub    esp,0xc
c002030c:	ff 36                	push   DWORD PTR [esi]
c002030e:	e8 55 f4 ff ff       	call   c001f768 <Vm::fpu32ToInternal(unsigned int)>
c0020313:	e9 ae 01 00 00       	jmp    c00204c6 <Vm::x87Handler(regs*)+0x970>
c0020318:	31 c0                	xor    eax,eax
c002031a:	80 fa 07             	cmp    dl,0x7
c002031d:	0f 85 94 02 00 00    	jne    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c0020323:	83 ec 0c             	sub    esp,0xc
c0020326:	6a 00                	push   0x0
c0020328:	e8 ec f6 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c002032d:	89 c7                	mov    edi,eax
c002032f:	89 d5                	mov    ebp,edx
c0020331:	58                   	pop    eax
c0020332:	ff 36                	push   DWORD PTR [esi]
c0020334:	e8 2f f4 ff ff       	call   c001f768 <Vm::fpu32ToInternal(unsigned int)>
c0020339:	e9 cb 01 00 00       	jmp    c0020509 <Vm::x87Handler(regs*)+0x9b3>
c002033e:	80 fa 03             	cmp    dl,0x3
c0020341:	0f 85 d3 01 00 00    	jne    c002051a <Vm::x87Handler(regs*)+0x9c4>
c0020347:	e8 b8 f7 ff ff       	call   c001fb04 <Vm::fpuPop()>
c002034c:	51                   	push   ecx
c002034d:	51                   	push   ecx
c002034e:	e9 de 01 00 00       	jmp    c0020531 <Vm::x87Handler(regs*)+0x9db>
c0020353:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020357:	80 fa 01             	cmp    dl,0x1
c002035a:	75 09                	jne    c0020365 <Vm::x87Handler(regs*)+0x80f>
c002035c:	57                   	push   edi
c002035d:	57                   	push   edi
c002035e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020360:	e9 e3 01 00 00       	jmp    c0020548 <Vm::x87Handler(regs*)+0x9f2>
c0020365:	80 fa 04             	cmp    dl,0x4
c0020368:	75 12                	jne    c002037c <Vm::x87Handler(regs*)+0x826>
c002036a:	31 d2                	xor    edx,edx
c002036c:	51                   	push   ecx
c002036d:	51                   	push   ecx
c002036e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020370:	52                   	push   edx
c0020371:	50                   	push   eax
c0020372:	e8 d0 f4 ff ff       	call   c001f847 <Vm::fpuLongToFloat(long long)>
c0020377:	e9 ee 00 00 00       	jmp    c002046a <Vm::x87Handler(regs*)+0x914>
c002037c:	31 c0                	xor    eax,eax
c002037e:	80 fa 07             	cmp    dl,0x7
c0020381:	0f 85 30 02 00 00    	jne    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c0020387:	83 ec 0c             	sub    esp,0xc
c002038a:	6a 00                	push   0x0
c002038c:	e8 88 f6 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020391:	89 c7                	mov    edi,eax
c0020393:	89 d5                	mov    ebp,edx
c0020395:	58                   	pop    eax
c0020396:	8b 06                	mov    eax,DWORD PTR [esi]
c0020398:	5a                   	pop    edx
c0020399:	31 d2                	xor    edx,edx
c002039b:	52                   	push   edx
c002039c:	50                   	push   eax
c002039d:	e8 a5 f4 ff ff       	call   c001f847 <Vm::fpuLongToFloat(long long)>
c00203a2:	e9 62 01 00 00       	jmp    c0020509 <Vm::x87Handler(regs*)+0x9b3>
c00203a7:	84 d2                	test   dl,dl
c00203a9:	75 0d                	jne    c00203b8 <Vm::x87Handler(regs*)+0x862>
c00203ab:	31 d2                	xor    edx,edx
c00203ad:	55                   	push   ebp
c00203ae:	55                   	push   ebp
c00203af:	8b 06                	mov    eax,DWORD PTR [esi]
c00203b1:	52                   	push   edx
c00203b2:	50                   	push   eax
c00203b3:	e9 d3 01 00 00       	jmp    c002058b <Vm::x87Handler(regs*)+0xa35>
c00203b8:	31 c0                	xor    eax,eax
c00203ba:	80 fa 02             	cmp    dl,0x2
c00203bd:	0f 85 f4 01 00 00    	jne    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c00203c3:	83 ec 0c             	sub    esp,0xc
c00203c6:	6a 00                	push   0x0
c00203c8:	e8 4c f6 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00203cd:	59                   	pop    ecx
c00203ce:	5f                   	pop    edi
c00203cf:	e9 6a f9 ff ff       	jmp    c001fd3e <Vm::x87Handler(regs*)+0x1e8>
c00203d4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203d8:	84 d2                	test   dl,dl
c00203da:	75 2a                	jne    c0020406 <Vm::x87Handler(regs*)+0x8b0>
c00203dc:	50                   	push   eax
c00203dd:	50                   	push   eax
c00203de:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e1:	ff 36                	push   DWORD PTR [esi]
c00203e3:	e8 c5 f3 ff ff       	call   c001f7ad <Vm::fpu64ToInternal(unsigned long long)>
c00203e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ef:	89 c6                	mov    esi,eax
c00203f1:	89 d7                	mov    edi,edx
c00203f3:	e8 21 f6 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00203f8:	57                   	push   edi
c00203f9:	56                   	push   esi
c00203fa:	52                   	push   edx
c00203fb:	50                   	push   eax
c00203fc:	e8 8e f5 ff ff       	call   c001f98f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020401:	e9 64 01 00 00       	jmp    c002056a <Vm::x87Handler(regs*)+0xa14>
c0020406:	80 fa 01             	cmp    dl,0x1
c0020409:	75 11                	jne    c002041c <Vm::x87Handler(regs*)+0x8c6>
c002040b:	50                   	push   eax
c002040c:	50                   	push   eax
c002040d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020410:	ff 36                	push   DWORD PTR [esi]
c0020412:	e8 96 f3 ff ff       	call   c001f7ad <Vm::fpu64ToInternal(unsigned long long)>
c0020417:	e9 35 01 00 00       	jmp    c0020551 <Vm::x87Handler(regs*)+0x9fb>
c002041c:	80 fa 02             	cmp    dl,0x2
c002041f:	0f 85 54 f9 ff ff    	jne    c001fd79 <Vm::x87Handler(regs*)+0x223>
c0020425:	55                   	push   ebp
c0020426:	55                   	push   ebp
c0020427:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002042a:	ff 36                	push   DWORD PTR [esi]
c002042c:	e8 7c f3 ff ff       	call   c001f7ad <Vm::fpu64ToInternal(unsigned long long)>
c0020431:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020438:	89 c6                	mov    esi,eax
c002043a:	89 d7                	mov    edi,edx
c002043c:	e8 d8 f5 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020441:	57                   	push   edi
c0020442:	56                   	push   esi
c0020443:	52                   	push   edx
c0020444:	50                   	push   eax
c0020445:	e8 f2 f4 ff ff       	call   c001f93c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002044a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002044e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020451:	83 c4 20             	add    esp,0x20
c0020454:	e9 74 f7 ff ff       	jmp    c001fbcd <Vm::x87Handler(regs*)+0x77>
c0020459:	80 fa 04             	cmp    dl,0x4
c002045c:	75 2a                	jne    c0020488 <Vm::x87Handler(regs*)+0x932>
c002045e:	51                   	push   ecx
c002045f:	51                   	push   ecx
c0020460:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020463:	ff 36                	push   DWORD PTR [esi]
c0020465:	e8 43 f3 ff ff       	call   c001f7ad <Vm::fpu64ToInternal(unsigned long long)>
c002046a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020471:	89 c6                	mov    esi,eax
c0020473:	89 d7                	mov    edi,edx
c0020475:	e8 9f f5 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c002047a:	57                   	push   edi
c002047b:	56                   	push   esi
c002047c:	52                   	push   edx
c002047d:	50                   	push   eax
c002047e:	e8 36 f5 ff ff       	call   c001f9b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020483:	e9 e2 00 00 00       	jmp    c002056a <Vm::x87Handler(regs*)+0xa14>
c0020488:	80 fa 05             	cmp    dl,0x5
c002048b:	75 28                	jne    c00204b5 <Vm::x87Handler(regs*)+0x95f>
c002048d:	83 ec 0c             	sub    esp,0xc
c0020490:	6a 00                	push   0x0
c0020492:	e8 82 f5 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020497:	89 c7                	mov    edi,eax
c0020499:	89 d5                	mov    ebp,edx
c002049b:	58                   	pop    eax
c002049c:	5a                   	pop    edx
c002049d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204a0:	ff 36                	push   DWORD PTR [esi]
c00204a2:	e8 06 f3 ff ff       	call   c001f7ad <Vm::fpu64ToInternal(unsigned long long)>
c00204a7:	83 c4 10             	add    esp,0x10
c00204aa:	55                   	push   ebp
c00204ab:	57                   	push   edi
c00204ac:	52                   	push   edx
c00204ad:	50                   	push   eax
c00204ae:	e8 06 f5 ff ff       	call   c001f9b9 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204b3:	eb 60                	jmp    c0020515 <Vm::x87Handler(regs*)+0x9bf>
c00204b5:	80 fa 06             	cmp    dl,0x6
c00204b8:	75 2a                	jne    c00204e4 <Vm::x87Handler(regs*)+0x98e>
c00204ba:	51                   	push   ecx
c00204bb:	51                   	push   ecx
c00204bc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204bf:	ff 36                	push   DWORD PTR [esi]
c00204c1:	e8 e7 f2 ff ff       	call   c001f7ad <Vm::fpu64ToInternal(unsigned long long)>
c00204c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204cd:	89 c6                	mov    esi,eax
c00204cf:	89 d7                	mov    edi,edx
c00204d1:	e8 43 f5 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00204d6:	57                   	push   edi
c00204d7:	56                   	push   esi
c00204d8:	52                   	push   edx
c00204d9:	50                   	push   eax
c00204da:	e8 08 f5 ff ff       	call   c001f9e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204df:	e9 86 00 00 00       	jmp    c002056a <Vm::x87Handler(regs*)+0xa14>
c00204e4:	31 c0                	xor    eax,eax
c00204e6:	80 fa 07             	cmp    dl,0x7
c00204e9:	0f 85 c8 00 00 00    	jne    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c00204ef:	83 ec 0c             	sub    esp,0xc
c00204f2:	6a 00                	push   0x0
c00204f4:	e8 20 f5 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c00204f9:	89 c7                	mov    edi,eax
c00204fb:	89 d5                	mov    ebp,edx
c00204fd:	58                   	pop    eax
c00204fe:	5a                   	pop    edx
c00204ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020502:	ff 36                	push   DWORD PTR [esi]
c0020504:	e8 a4 f2 ff ff       	call   c001f7ad <Vm::fpu64ToInternal(unsigned long long)>
c0020509:	83 c4 10             	add    esp,0x10
c002050c:	55                   	push   ebp
c002050d:	57                   	push   edi
c002050e:	52                   	push   edx
c002050f:	50                   	push   eax
c0020510:	e8 d2 f4 ff ff       	call   c001f9e7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020515:	83 c4 0c             	add    esp,0xc
c0020518:	eb 53                	jmp    c002056d <Vm::x87Handler(regs*)+0xa17>
c002051a:	31 c0                	xor    eax,eax
c002051c:	80 fa 02             	cmp    dl,0x2
c002051f:	0f 85 92 00 00 00    	jne    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c0020525:	83 ec 0c             	sub    esp,0xc
c0020528:	6a 00                	push   0x0
c002052a:	e8 ea f4 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c002052f:	59                   	pop    ecx
c0020530:	5f                   	pop    edi
c0020531:	52                   	push   edx
c0020532:	50                   	push   eax
c0020533:	e8 27 f2 ff ff       	call   c001f75f <Vm::fpuInternalTo64(unsigned long long)>
c0020538:	eb 70                	jmp    c00205aa <Vm::x87Handler(regs*)+0xa54>
c002053a:	31 c0                	xor    eax,eax
c002053c:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020541:	75 74                	jne    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c0020543:	50                   	push   eax
c0020544:	50                   	push   eax
c0020545:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020548:	31 d2                	xor    edx,edx
c002054a:	52                   	push   edx
c002054b:	50                   	push   eax
c002054c:	e8 f6 f2 ff ff       	call   c001f847 <Vm::fpuLongToFloat(long long)>
c0020551:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020558:	89 c6                	mov    esi,eax
c002055a:	89 d7                	mov    edi,edx
c002055c:	e8 b8 f4 ff ff       	call   c001fa19 <Vm::fpuGetReg(int)>
c0020561:	57                   	push   edi
c0020562:	56                   	push   esi
c0020563:	52                   	push   edx
c0020564:	50                   	push   eax
c0020565:	e8 5e f4 ff ff       	call   c001f9c8 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002056a:	83 c4 1c             	add    esp,0x1c
c002056d:	52                   	push   edx
c002056e:	50                   	push   eax
c002056f:	6a 00                	push   0x0
c0020571:	e8 e6 f4 ff ff       	call   c001fa5c <Vm::fpuSetReg(int, unsigned long long)>
c0020576:	e9 f2 f7 ff ff       	jmp    c001fd6d <Vm::x87Handler(regs*)+0x217>
c002057b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002057f:	80 fa 05             	cmp    dl,0x5
c0020582:	75 11                	jne    c0020595 <Vm::x87Handler(regs*)+0xa3f>
c0020584:	55                   	push   ebp
c0020585:	55                   	push   ebp
c0020586:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020589:	ff 36                	push   DWORD PTR [esi]
c002058b:	e8 81 f2 ff ff       	call   c001f811 <Vm::fpuULongToFloat(unsigned long long)>
c0020590:	e9 cf f7 ff ff       	jmp    c001fd64 <Vm::x87Handler(regs*)+0x20e>
c0020595:	31 c0                	xor    eax,eax
c0020597:	80 fa 07             	cmp    dl,0x7
c002059a:	75 1b                	jne    c00205b7 <Vm::x87Handler(regs*)+0xa61>
c002059c:	e8 63 f5 ff ff       	call   c001fb04 <Vm::fpuPop()>
c00205a1:	51                   	push   ecx
c00205a2:	51                   	push   ecx
c00205a3:	52                   	push   edx
c00205a4:	50                   	push   eax
c00205a5:	e8 0c f2 ff ff       	call   c001f7b6 <Vm::fpuFloatToLong(unsigned long long)>
c00205aa:	83 c4 10             	add    esp,0x10
c00205ad:	89 06                	mov    DWORD PTR [esi],eax
c00205af:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205b2:	e9 f8 f7 ff ff       	jmp    c001fdaf <Vm::x87Handler(regs*)+0x259>
c00205b7:	83 c4 1c             	add    esp,0x1c
c00205ba:	5b                   	pop    ebx
c00205bb:	5e                   	pop    esi
c00205bc:	5f                   	pop    edi
c00205bd:	5d                   	pop    ebp
c00205be:	c3                   	ret    

c00205bf <__static_initialization_and_destruction_0(int, int)>:
c00205bf:	83 ec 0c             	sub    esp,0xc
c00205c2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00205c7:	75 1a                	jne    c00205e3 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205c9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205d1:	75 10                	jne    c00205e3 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205d3:	83 ec 0c             	sub    esp,0xc
c00205d6:	68 80 1b 03 c0       	push   0xc0031b80
c00205db:	e8 10 88 00 00       	call   c0028df0 <Vm::_FPUState::_FPUState()>
c00205e0:	83 c4 10             	add    esp,0x10
c00205e3:	90                   	nop
c00205e4:	83 c4 0c             	add    esp,0xc
c00205e7:	c3                   	ret    

c00205e8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00205e8:	83 ec 0c             	sub    esp,0xc
c00205eb:	83 ec 08             	sub    esp,0x8
c00205ee:	68 ff ff 00 00       	push   0xffff
c00205f3:	6a 01                	push   0x1
c00205f5:	e8 c5 ff ff ff       	call   c00205bf <__static_initialization_and_destruction_0(int, int)>
c00205fa:	83 c4 10             	add    esp,0x10
c00205fd:	83 c4 0c             	add    esp,0xc
c0020600:	c3                   	ret    
c0020601:	90                   	nop

c0020602 <FAT::getName()>:
c0020602:	b8 74 c9 02 c0       	mov    eax,0xc002c974
c0020607:	c3                   	ret    

c0020608 <FAT::tell(void*, unsigned long long*)>:
c0020608:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002060d:	75 06                	jne    c0020615 <FAT::tell(void*, unsigned long long*)+0xd>
c002060f:	b8 04 00 00 00       	mov    eax,0x4
c0020614:	c3                   	ret    
c0020615:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002061a:	75 06                	jne    c0020622 <FAT::tell(void*, unsigned long long*)+0x1a>
c002061c:	b8 04 00 00 00       	mov    eax,0x4
c0020621:	c3                   	ret    
c0020622:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020626:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020629:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002062c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020630:	89 01                	mov    DWORD PTR [ecx],eax
c0020632:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020635:	b8 00 00 00 00       	mov    eax,0x0
c002063a:	c3                   	ret    
c002063b:	90                   	nop

c002063c <FAT::stat(void*, unsigned long long*)>:
c002063c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020641:	75 06                	jne    c0020649 <FAT::stat(void*, unsigned long long*)+0xd>
c0020643:	b8 04 00 00 00       	mov    eax,0x4
c0020648:	c3                   	ret    
c0020649:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002064e:	75 06                	jne    c0020656 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020650:	b8 04 00 00 00       	mov    eax,0x4
c0020655:	c3                   	ret    
c0020656:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002065a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002065d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020660:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020664:	89 01                	mov    DWORD PTR [ecx],eax
c0020666:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020669:	b8 00 00 00 00       	mov    eax,0x0
c002066e:	c3                   	ret    
c002066f:	90                   	nop

c0020670 <FAT::~FAT()>:
c0020670:	83 ec 0c             	sub    esp,0xc
c0020673:	ba f8 c9 02 c0       	mov    edx,0xc002c9f8
c0020678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067c:	89 10                	mov    DWORD PTR [eax],edx
c002067e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020682:	83 ec 0c             	sub    esp,0xc
c0020685:	50                   	push   eax
c0020686:	e8 d3 2c ff ff       	call   c001335e <Filesystem::~Filesystem()>
c002068b:	83 c4 10             	add    esp,0x10
c002068e:	90                   	nop
c002068f:	83 c4 0c             	add    esp,0xc
c0020692:	c3                   	ret    
c0020693:	90                   	nop

c0020694 <FAT::~FAT()>:
c0020694:	83 ec 0c             	sub    esp,0xc
c0020697:	83 ec 0c             	sub    esp,0xc
c002069a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002069e:	e8 cd ff ff ff       	call   c0020670 <FAT::~FAT()>
c00206a3:	83 c4 10             	add    esp,0x10
c00206a6:	83 ec 08             	sub    esp,0x8
c00206a9:	6a 08                	push   0x8
c00206ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206af:	e8 a2 28 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c00206b4:	83 c4 10             	add    esp,0x10
c00206b7:	83 c4 0c             	add    esp,0xc
c00206ba:	c3                   	ret    
c00206bb:	90                   	nop

c00206bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00206bc:	83 ec 1c             	sub    esp,0x1c
c00206bf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00206c6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00206cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206cf:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c00206d6:	83 f8 ff             	cmp    eax,0xffffffff
c00206d9:	75 34                	jne    c002070f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206df:	88 c2                	mov    dl,al
c00206e1:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c00206e6:	01 d0                	add    eax,edx
c00206e8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206ec:	8b 15 e0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031be0
c00206f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206f6:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c00206fd:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020702:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020706:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c002070d:	eb 17                	jmp    c0020726 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002070f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020713:	88 c2                	mov    dl,al
c0020715:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020719:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020720:	01 d0                	add    eax,edx
c0020722:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020726:	83 ec 04             	sub    esp,0x4
c0020729:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002072d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020731:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020735:	50                   	push   eax
c0020736:	e8 fd 65 fe ff       	call   c0006d38 <f_getlabel>
c002073b:	83 c4 10             	add    esp,0x10
c002073e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020742:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020747:	75 07                	jne    c0020750 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020749:	b8 00 00 00 00       	mov    eax,0x0
c002074e:	eb 05                	jmp    c0020755 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020750:	b8 01 00 00 00       	mov    eax,0x1
c0020755:	83 c4 1c             	add    esp,0x1c
c0020758:	c3                   	ret    
c0020759:	90                   	nop

c002075a <FAT::setlabel(LogicalDisk*, int, char*)>:
c002075a:	57                   	push   edi
c002075b:	83 ec 58             	sub    esp,0x58
c002075e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020766:	8d 54 24 10          	lea    edx,[esp+0x10]
c002076a:	b9 0f 00 00 00       	mov    ecx,0xf
c002076f:	b8 00 00 00 00       	mov    eax,0x0
c0020774:	fc                   	cld    
c0020775:	89 d7                	mov    edi,edx
c0020777:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020779:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002077d:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020784:	83 f8 ff             	cmp    eax,0xffffffff
c0020787:	75 34                	jne    c00207bd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020789:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002078d:	88 c2                	mov    dl,al
c002078f:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020794:	01 d0                	add    eax,edx
c0020796:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002079a:	8b 15 e0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031be0
c00207a0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207a4:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c00207ab:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c00207b0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207b4:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c00207bb:	eb 17                	jmp    c00207d4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00207bd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207c1:	88 c2                	mov    dl,al
c00207c3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207c7:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c00207ce:	01 d0                	add    eax,edx
c00207d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207d4:	83 ec 08             	sub    esp,0x8
c00207d7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207df:	50                   	push   eax
c00207e0:	e8 8f 01 fe ff       	call   c0000974 <strcat>
c00207e5:	83 c4 10             	add    esp,0x10
c00207e8:	83 ec 0c             	sub    esp,0xc
c00207eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207ef:	50                   	push   eax
c00207f0:	e8 31 67 fe ff       	call   c0006f26 <f_setlabel>
c00207f5:	83 c4 10             	add    esp,0x10
c00207f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207fc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020801:	75 07                	jne    c002080a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020803:	b8 00 00 00 00       	mov    eax,0x0
c0020808:	eb 05                	jmp    c002080f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002080a:	b8 01 00 00 00       	mov    eax,0x1
c002080f:	83 c4 58             	add    esp,0x58
c0020812:	5f                   	pop    edi
c0020813:	c3                   	ret    

c0020814 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020814:	83 ec 2c             	sub    esp,0x2c
c0020817:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002081f:	83 ec 08             	sub    esp,0x8
c0020822:	68 98 c9 02 c0       	push   0xc002c998
c0020827:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002082b:	e8 90 00 fe ff       	call   c00008c0 <strcmp>
c0020830:	83 c4 10             	add    esp,0x10
c0020833:	85 c0                	test   eax,eax
c0020835:	0f 94 c0             	sete   al
c0020838:	84 c0                	test   al,al
c002083a:	74 0d                	je     c0020849 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002083c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020844:	e9 a6 00 00 00       	jmp    c00208ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020849:	83 ec 08             	sub    esp,0x8
c002084c:	68 8a c9 02 c0       	push   0xc002c98a
c0020851:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020855:	e8 66 00 fe ff       	call   c00008c0 <strcmp>
c002085a:	83 c4 10             	add    esp,0x10
c002085d:	85 c0                	test   eax,eax
c002085f:	0f 94 c0             	sete   al
c0020862:	84 c0                	test   al,al
c0020864:	74 0a                	je     c0020870 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020866:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002086e:	eb 7f                	jmp    c00208ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020870:	83 ec 08             	sub    esp,0x8
c0020873:	68 90 c9 02 c0       	push   0xc002c990
c0020878:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002087c:	e8 3f 00 fe ff       	call   c00008c0 <strcmp>
c0020881:	83 c4 10             	add    esp,0x10
c0020884:	85 c0                	test   eax,eax
c0020886:	0f 94 c0             	sete   al
c0020889:	84 c0                	test   al,al
c002088b:	74 0a                	je     c0020897 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002088d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020895:	eb 58                	jmp    c00208ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020897:	83 ec 08             	sub    esp,0x8
c002089a:	68 4c 95 02 c0       	push   0xc002954c
c002089f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208a3:	e8 18 00 fe ff       	call   c00008c0 <strcmp>
c00208a8:	83 c4 10             	add    esp,0x10
c00208ab:	85 c0                	test   eax,eax
c00208ad:	0f 94 c0             	sete   al
c00208b0:	84 c0                	test   al,al
c00208b2:	74 0a                	je     c00208be <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208b4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00208bc:	eb 31                	jmp    c00208ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208be:	83 ec 08             	sub    esp,0x8
c00208c1:	68 96 c9 02 c0       	push   0xc002c996
c00208c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208ca:	e8 f1 ff fd ff       	call   c00008c0 <strcmp>
c00208cf:	83 c4 10             	add    esp,0x10
c00208d2:	85 c0                	test   eax,eax
c00208d4:	0f 94 c0             	sete   al
c00208d7:	84 c0                	test   al,al
c00208d9:	74 0a                	je     c00208e5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208db:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208e3:	eb 0a                	jmp    c00208ef <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208e5:	b8 08 00 00 00       	mov    eax,0x8
c00208ea:	e9 04 01 00 00       	jmp    c00209f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208ef:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208f6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208ff:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020906:	83 f8 ff             	cmp    eax,0xffffffff
c0020909:	75 34                	jne    c002093f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002090b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002090f:	88 c2                	mov    dl,al
c0020911:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020916:	01 d0                	add    eax,edx
c0020918:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002091c:	8b 15 e0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031be0
c0020922:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020926:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c002092d:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020932:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020936:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c002093d:	eb 17                	jmp    c0020956 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002093f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020943:	88 c2                	mov    dl,al
c0020945:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020949:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020950:	01 d0                	add    eax,edx
c0020952:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020956:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002095a:	88 04 24             	mov    BYTE PTR [esp],al
c002095d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020961:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020965:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002096d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020972:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002097a:	83 ec 0c             	sub    esp,0xc
c002097d:	68 00 20 00 00       	push   0x2000
c0020982:	e8 b9 ee fe ff       	call   c000f840 <malloc>
c0020987:	83 c4 10             	add    esp,0x10
c002098a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002098e:	68 00 20 00 00       	push   0x2000
c0020993:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020997:	8d 44 24 08          	lea    eax,[esp+0x8]
c002099b:	50                   	push   eax
c002099c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00209a0:	50                   	push   eax
c00209a1:	e8 cb 69 fe ff       	call   c0007371 <f_mkfs>
c00209a6:	83 c4 10             	add    esp,0x10
c00209a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209b2:	75 07                	jne    c00209bb <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209b4:	b8 00 00 00 00       	mov    eax,0x0
c00209b9:	eb 38                	jmp    c00209f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209bb:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00209c0:	75 17                	jne    c00209d9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00209c2:	83 ec 0c             	sub    esp,0xc
c00209c5:	68 c8 c9 02 c0       	push   0xc002c9c8
c00209ca:	e8 67 26 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00209cf:	83 c4 10             	add    esp,0x10
c00209d2:	b8 09 00 00 00       	mov    eax,0x9
c00209d7:	eb 1a                	jmp    c00209f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209dd:	83 ec 08             	sub    esp,0x8
c00209e0:	50                   	push   eax
c00209e1:	68 9c c9 02 c0       	push   0xc002c99c
c00209e6:	e8 4b 26 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00209eb:	83 c4 10             	add    esp,0x10
c00209ee:	b8 01 00 00 00       	mov    eax,0x1
c00209f3:	83 c4 2c             	add    esp,0x2c
c00209f6:	c3                   	ret    
c00209f7:	90                   	nop

c00209f8 <FAT::tryMount(LogicalDisk*, int)>:
c00209f8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209fe:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020a03:	83 f8 14             	cmp    eax,0x14
c0020a06:	75 17                	jne    c0020a1f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a08:	83 ec 0c             	sub    esp,0xc
c0020a0b:	68 ae c9 02 c0       	push   0xc002c9ae
c0020a10:	e8 d2 9c ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0020a15:	83 c4 10             	add    esp,0x10
c0020a18:	b0 00                	mov    al,0x0
c0020a1a:	e9 d7 01 00 00       	jmp    c0020bf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a1f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a26:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a2c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a32:	3d 00 02 00 00       	cmp    eax,0x200
c0020a37:	74 07                	je     c0020a40 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a39:	b0 00                	mov    al,0x0
c0020a3b:	e9 b6 01 00 00       	jmp    c0020bf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a40:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a48:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a4f:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c0020a56:	83 f8 ff             	cmp    eax,0xffffffff
c0020a59:	74 07                	je     c0020a62 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a5b:	b0 01                	mov    al,0x1
c0020a5d:	e9 94 01 00 00       	jmp    c0020bf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a62:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a6c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a74:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a7b:	88 c2                	mov    dl,al
c0020a7d:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020a82:	01 d0                	add    eax,edx
c0020a84:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a8b:	8b 15 e0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031be0
c0020a91:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a98:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c0020a9f:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020aa4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020aab:	89 14 85 80 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce380],edx
c0020ab2:	83 ec 0c             	sub    esp,0xc
c0020ab5:	68 54 02 00 00       	push   0x254
c0020aba:	e8 81 ed fe ff       	call   c000f840 <malloc>
c0020abf:	83 c4 10             	add    esp,0x10
c0020ac2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020ac9:	83 ec 04             	sub    esp,0x4
c0020acc:	6a 00                	push   0x0
c0020ace:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ad5:	50                   	push   eax
c0020ad6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020add:	e8 4d 44 fe ff       	call   c0004f2f <f_mount>
c0020ae2:	83 c4 10             	add    esp,0x10
c0020ae5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020aec:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020af4:	74 19                	je     c0020b0f <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020af6:	83 ec 0c             	sub    esp,0xc
c0020af9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b00:	e8 5b ed fe ff       	call   c000f860 <rfree>
c0020b05:	83 c4 10             	add    esp,0x10
c0020b08:	b0 00                	mov    al,0x0
c0020b0a:	e9 e7 00 00 00       	jmp    c0020bf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b0f:	83 ec 04             	sub    esp,0x4
c0020b12:	68 00 01 00 00       	push   0x100
c0020b17:	6a 00                	push   0x0
c0020b19:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b20:	50                   	push   eax
c0020b21:	e8 52 fc fd ff       	call   c0000778 <memset>
c0020b26:	83 c4 10             	add    esp,0x10
c0020b29:	83 ec 08             	sub    esp,0x8
c0020b2c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b33:	50                   	push   eax
c0020b34:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b3b:	50                   	push   eax
c0020b3c:	e8 33 fe fd ff       	call   c0000974 <strcat>
c0020b41:	83 c4 10             	add    esp,0x10
c0020b44:	83 ec 08             	sub    esp,0x8
c0020b47:	68 bc c9 02 c0       	push   0xc002c9bc
c0020b4c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b53:	50                   	push   eax
c0020b54:	e8 1b fe fd ff       	call   c0000974 <strcat>
c0020b59:	83 c4 10             	add    esp,0x10
c0020b5c:	83 ec 04             	sub    esp,0x4
c0020b5f:	6a 01                	push   0x1
c0020b61:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b68:	50                   	push   eax
c0020b69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b6d:	50                   	push   eax
c0020b6e:	e8 1e 44 fe ff       	call   c0004f91 <f_open>
c0020b73:	83 c4 10             	add    esp,0x10
c0020b76:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b7d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b84:	85 c0                	test   eax,eax
c0020b86:	74 0a                	je     c0020b92 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b88:	78 2d                	js     c0020bb7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b8a:	83 e8 04             	sub    eax,0x4
c0020b8d:	83 f8 01             	cmp    eax,0x1
c0020b90:	77 25                	ja     c0020bb7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b92:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b9a:	83 ec 0c             	sub    esp,0xc
c0020b9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ba1:	50                   	push   eax
c0020ba2:	e8 3c 4f fe ff       	call   c0005ae3 <f_close>
c0020ba7:	83 c4 10             	add    esp,0x10
c0020baa:	90                   	nop
c0020bab:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bb3:	74 3a                	je     c0020bef <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020bb5:	eb 2d                	jmp    c0020be4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020bb7:	83 ec 0c             	sub    esp,0xc
c0020bba:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bc1:	e8 9a ec fe ff       	call   c000f860 <rfree>
c0020bc6:	83 c4 10             	add    esp,0x10
c0020bc9:	83 ec 04             	sub    esp,0x4
c0020bcc:	6a 00                	push   0x0
c0020bce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bd5:	50                   	push   eax
c0020bd6:	6a 00                	push   0x0
c0020bd8:	e8 52 43 fe ff       	call   c0004f2f <f_mount>
c0020bdd:	83 c4 10             	add    esp,0x10
c0020be0:	b0 00                	mov    al,0x0
c0020be2:	eb 12                	jmp    c0020bf6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020be4:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0020be9:	40                   	inc    eax
c0020bea:	a3 e0 1b 03 c0       	mov    ds:0xc0031be0,eax
c0020bef:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020bf6:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bfc:	c3                   	ret    
c0020bfd:	90                   	nop

c0020bfe <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020bfe:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020c04:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020c0c:	74 0a                	je     c0020c18 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020c0e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020c16:	75 0a                	jne    c0020c22 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020c18:	b8 04 00 00 00       	mov    eax,0x4
c0020c1d:	e9 db 00 00 00       	jmp    c0020cfd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c22:	83 ec 08             	sub    esp,0x8
c0020c25:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c2c:	50                   	push   eax
c0020c2d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c34:	e8 b4 54 fe ff       	call   c00060ed <f_readdir>
c0020c39:	83 c4 10             	add    esp,0x10
c0020c3c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c43:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c49:	83 ec 0c             	sub    esp,0xc
c0020c4c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c53:	83 c0 1a             	add    eax,0x1a
c0020c56:	50                   	push   eax
c0020c57:	e8 38 fb fd ff       	call   c0000794 <strlen>
c0020c5c:	83 c4 10             	add    esp,0x10
c0020c5f:	ba 00 00 00 00       	mov    edx,0x0
c0020c64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c68:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c6c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c73:	0f b6 c0             	movzx  eax,al
c0020c76:	83 e0 10             	and    eax,0x10
c0020c79:	74 07                	je     c0020c82 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c7b:	b8 02 00 00 00       	mov    eax,0x2
c0020c80:	eb 05                	jmp    c0020c87 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c82:	b8 01 00 00 00       	mov    eax,0x1
c0020c87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c8b:	83 ec 08             	sub    esp,0x8
c0020c8e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c95:	83 c0 1a             	add    eax,0x1a
c0020c98:	50                   	push   eax
c0020c99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c9d:	83 c0 10             	add    eax,0x10
c0020ca0:	50                   	push   eax
c0020ca1:	e8 8e fb fd ff       	call   c0000834 <strcpy>
c0020ca6:	83 c4 10             	add    esp,0x10
c0020ca9:	83 ec 04             	sub    esp,0x4
c0020cac:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020cb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cb7:	50                   	push   eax
c0020cb8:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020cbf:	e8 80 fa fd ff       	call   c0000744 <memcpy>
c0020cc4:	83 c4 10             	add    esp,0x10
c0020cc7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020cce:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020cd4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020cdb:	84 c0                	test   al,al
c0020cdd:	75 07                	jne    c0020ce6 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020cdf:	b8 07 00 00 00       	mov    eax,0x7
c0020ce4:	eb 17                	jmp    c0020cfd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ce6:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020ced:	85 c0                	test   eax,eax
c0020cef:	75 07                	jne    c0020cf8 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020cf1:	b8 00 00 00 00       	mov    eax,0x0
c0020cf6:	eb 05                	jmp    c0020cfd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cf8:	b8 01 00 00 00       	mov    eax,0x1
c0020cfd:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020d03:	c3                   	ret    

c0020d04 <FAT::read(void*, unsigned long, void*, int*)>:
c0020d04:	83 ec 1c             	sub    esp,0x1c
c0020d07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d0c:	74 07                	je     c0020d15 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020d0e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d13:	75 07                	jne    c0020d1c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020d15:	b8 04 00 00 00       	mov    eax,0x4
c0020d1a:	eb 3d                	jmp    c0020d59 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d20:	50                   	push   eax
c0020d21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d2d:	e8 9b 46 fe ff       	call   c00053cd <f_read>
c0020d32:	83 c4 10             	add    esp,0x10
c0020d35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d3d:	89 c2                	mov    edx,eax
c0020d3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d43:	89 10                	mov    DWORD PTR [eax],edx
c0020d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d49:	85 c0                	test   eax,eax
c0020d4b:	75 07                	jne    c0020d54 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d4d:	b8 00 00 00 00       	mov    eax,0x0
c0020d52:	eb 05                	jmp    c0020d59 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d54:	b8 01 00 00 00       	mov    eax,0x1
c0020d59:	83 c4 1c             	add    esp,0x1c
c0020d5c:	c3                   	ret    
c0020d5d:	90                   	nop

c0020d5e <FAT::write(void*, unsigned long, void*, int*)>:
c0020d5e:	83 ec 1c             	sub    esp,0x1c
c0020d61:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d66:	74 07                	je     c0020d6f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d68:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d6d:	75 07                	jne    c0020d76 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d6f:	b8 04 00 00 00       	mov    eax,0x4
c0020d74:	eb 3d                	jmp    c0020db3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d76:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d7a:	50                   	push   eax
c0020d7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d87:	e8 c1 48 fe ff       	call   c000564d <f_write>
c0020d8c:	83 c4 10             	add    esp,0x10
c0020d8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d97:	89 c2                	mov    edx,eax
c0020d99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d9d:	89 10                	mov    DWORD PTR [eax],edx
c0020d9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020da3:	85 c0                	test   eax,eax
c0020da5:	75 07                	jne    c0020dae <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020da7:	b8 00 00 00 00       	mov    eax,0x0
c0020dac:	eb 05                	jmp    c0020db3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020dae:	b8 01 00 00 00       	mov    eax,0x1
c0020db3:	83 c4 1c             	add    esp,0x1c
c0020db6:	c3                   	ret    
c0020db7:	90                   	nop

c0020db8 <FAT::close(void*)>:
c0020db8:	83 ec 1c             	sub    esp,0x1c
c0020dbb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020dc0:	75 07                	jne    c0020dc9 <FAT::close(void*)+0x11>
c0020dc2:	b8 04 00 00 00       	mov    eax,0x4
c0020dc7:	eb 36                	jmp    c0020dff <FAT::close(void*)+0x47>
c0020dc9:	83 ec 0c             	sub    esp,0xc
c0020dcc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dd0:	e8 0e 4d fe ff       	call   c0005ae3 <f_close>
c0020dd5:	83 c4 10             	add    esp,0x10
c0020dd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ddc:	83 ec 0c             	sub    esp,0xc
c0020ddf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020de3:	e8 68 ea fe ff       	call   c000f850 <free>
c0020de8:	83 c4 10             	add    esp,0x10
c0020deb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020def:	85 c0                	test   eax,eax
c0020df1:	75 07                	jne    c0020dfa <FAT::close(void*)+0x42>
c0020df3:	b8 00 00 00 00       	mov    eax,0x0
c0020df8:	eb 05                	jmp    c0020dff <FAT::close(void*)+0x47>
c0020dfa:	b8 01 00 00 00       	mov    eax,0x1
c0020dff:	83 c4 1c             	add    esp,0x1c
c0020e02:	c3                   	ret    
c0020e03:	90                   	nop

c0020e04 <FAT::closeDir(void*)>:
c0020e04:	83 ec 1c             	sub    esp,0x1c
c0020e07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e0c:	75 07                	jne    c0020e15 <FAT::closeDir(void*)+0x11>
c0020e0e:	b8 04 00 00 00       	mov    eax,0x4
c0020e13:	eb 36                	jmp    c0020e4b <FAT::closeDir(void*)+0x47>
c0020e15:	83 ec 0c             	sub    esp,0xc
c0020e18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e1c:	e8 aa 52 fe ff       	call   c00060cb <f_closedir>
c0020e21:	83 c4 10             	add    esp,0x10
c0020e24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e28:	83 ec 0c             	sub    esp,0xc
c0020e2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e2f:	e8 1c ea fe ff       	call   c000f850 <free>
c0020e34:	83 c4 10             	add    esp,0x10
c0020e37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e3b:	85 c0                	test   eax,eax
c0020e3d:	75 07                	jne    c0020e46 <FAT::closeDir(void*)+0x42>
c0020e3f:	b8 00 00 00 00       	mov    eax,0x0
c0020e44:	eb 05                	jmp    c0020e4b <FAT::closeDir(void*)+0x47>
c0020e46:	b8 01 00 00 00       	mov    eax,0x1
c0020e4b:	83 c4 1c             	add    esp,0x1c
c0020e4e:	c3                   	ret    
c0020e4f:	90                   	nop

c0020e50 <FAT::seek(void*, unsigned long long)>:
c0020e50:	83 ec 2c             	sub    esp,0x2c
c0020e53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e63:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e68:	75 07                	jne    c0020e71 <FAT::seek(void*, unsigned long long)+0x21>
c0020e6a:	b8 04 00 00 00       	mov    eax,0x4
c0020e6f:	eb 2f                	jmp    c0020ea0 <FAT::seek(void*, unsigned long long)+0x50>
c0020e71:	83 ec 04             	sub    esp,0x4
c0020e74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e78:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e7c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e80:	e8 8d 4c fe ff       	call   c0005b12 <f_lseek>
c0020e85:	83 c4 10             	add    esp,0x10
c0020e88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e90:	85 c0                	test   eax,eax
c0020e92:	75 07                	jne    c0020e9b <FAT::seek(void*, unsigned long long)+0x4b>
c0020e94:	b8 00 00 00 00       	mov    eax,0x0
c0020e99:	eb 05                	jmp    c0020ea0 <FAT::seek(void*, unsigned long long)+0x50>
c0020e9b:	b8 01 00 00 00       	mov    eax,0x1
c0020ea0:	83 c4 2c             	add    esp,0x2c
c0020ea3:	c3                   	ret    

c0020ea4 <fatWrapperReadDisk>:
c0020ea4:	83 ec 1c             	sub    esp,0x1c
c0020ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020eab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020eaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020eb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0020eb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020eba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ebe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ec3:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020eca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ece:	83 ec 0c             	sub    esp,0xc
c0020ed1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ed5:	52                   	push   edx
c0020ed6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ede:	50                   	push   eax
c0020edf:	e8 72 59 ff ff       	call   c0016856 <LogicalDisk::read(unsigned long long, int, void*)>
c0020ee4:	83 c4 20             	add    esp,0x20
c0020ee7:	83 c4 1c             	add    esp,0x1c
c0020eea:	c3                   	ret    

c0020eeb <fatWrapperWriteDisk>:
c0020eeb:	83 ec 1c             	sub    esp,0x1c
c0020eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ef2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ef6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020efa:	89 04 24             	mov    DWORD PTR [esp],eax
c0020efd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020f01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020f05:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f0a:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020f11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f15:	83 ec 0c             	sub    esp,0xc
c0020f18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f1c:	52                   	push   edx
c0020f1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f25:	50                   	push   eax
c0020f26:	e8 97 59 ff ff       	call   c00168c2 <LogicalDisk::write(unsigned long long, int, void*)>
c0020f2b:	83 c4 20             	add    esp,0x20
c0020f2e:	83 c4 1c             	add    esp,0x1c
c0020f31:	c3                   	ret    

c0020f32 <fatWrapperIoctl>:
c0020f32:	53                   	push   ebx
c0020f33:	83 ec 28             	sub    esp,0x28
c0020f36:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f3e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f42:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f46:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f4b:	75 31                	jne    c0020f7e <fatWrapperIoctl+0x4c>
c0020f4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f55:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f5a:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020f61:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f67:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f71:	66 89 02             	mov    WORD PTR [edx],ax
c0020f74:	b8 00 00 00 00       	mov    eax,0x0
c0020f79:	e9 b2 00 00 00       	jmp    c0021030 <fatWrapperIoctl+0xfe>
c0020f7e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f83:	75 6a                	jne    c0020fef <fatWrapperIoctl+0xbd>
c0020f85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f8d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f92:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0020f99:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f9f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020fa5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020fab:	89 c8                	mov    eax,ecx
c0020fad:	89 da                	mov    edx,ebx
c0020faf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020fb3:	c1 e0 0a             	shl    eax,0xa
c0020fb6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020fbb:	8b 0c 8d c0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1440]
c0020fc2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020fc8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020fce:	89 cb                	mov    ebx,ecx
c0020fd0:	c1 fb 1f             	sar    ebx,0x1f
c0020fd3:	53                   	push   ebx
c0020fd4:	51                   	push   ecx
c0020fd5:	52                   	push   edx
c0020fd6:	50                   	push   eax
c0020fd7:	e8 c0 5a 00 00       	call   c0026a9c <__udivdi3>
c0020fdc:	83 c4 10             	add    esp,0x10
c0020fdf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fe3:	89 01                	mov    DWORD PTR [ecx],eax
c0020fe5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020fe8:	b8 00 00 00 00       	mov    eax,0x0
c0020fed:	eb 41                	jmp    c0021030 <fatWrapperIoctl+0xfe>
c0020fef:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ff4:	75 07                	jne    c0020ffd <fatWrapperIoctl+0xcb>
c0020ff6:	b8 00 00 00 00       	mov    eax,0x0
c0020ffb:	eb 33                	jmp    c0021030 <fatWrapperIoctl+0xfe>
c0020ffd:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021002:	75 19                	jne    c002101d <fatWrapperIoctl+0xeb>
c0021004:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021008:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002100c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021010:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021016:	b8 00 00 00 00       	mov    eax,0x0
c002101b:	eb 13                	jmp    c0021030 <fatWrapperIoctl+0xfe>
c002101d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021022:	75 07                	jne    c002102b <fatWrapperIoctl+0xf9>
c0021024:	b8 00 00 00 00       	mov    eax,0x0
c0021029:	eb 05                	jmp    c0021030 <fatWrapperIoctl+0xfe>
c002102b:	b8 04 00 00 00       	mov    eax,0x4
c0021030:	83 c4 28             	add    esp,0x28
c0021033:	5b                   	pop    ebx
c0021034:	c3                   	ret    
c0021035:	90                   	nop

c0021036 <FAT::FAT()>:
c0021036:	83 ec 1c             	sub    esp,0x1c
c0021039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002103d:	83 ec 0c             	sub    esp,0xc
c0021040:	50                   	push   eax
c0021041:	e8 f4 22 ff ff       	call   c001333a <Filesystem::Filesystem()>
c0021046:	83 c4 10             	add    esp,0x10
c0021049:	ba f8 c9 02 c0       	mov    edx,0xc002c9f8
c002104e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021052:	89 10                	mov    DWORD PTR [eax],edx
c0021054:	c7 05 e0 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031be0,0x0
c002105e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021066:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002106b:	7f 15                	jg     c0021082 <FAT::FAT()+0x4c>
c002106d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021071:	c7 04 85 00 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce400],0xffffffff
c002107c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021080:	eb e4                	jmp    c0021066 <FAT::FAT()+0x30>
c0021082:	90                   	nop
c0021083:	83 c4 1c             	add    esp,0x1c
c0021086:	c3                   	ret    
c0021087:	90                   	nop

c0021088 <FAT::fixFilepath(char*)>:
c0021088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002108c:	8a 00                	mov    al,BYTE PTR [eax]
c002108e:	3c 40                	cmp    al,0x40
c0021090:	7e 2c                	jle    c00210be <FAT::fixFilepath(char*)+0x36>
c0021092:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021096:	8a 00                	mov    al,BYTE PTR [eax]
c0021098:	83 e8 41             	sub    eax,0x41
c002109b:	88 c2                	mov    dl,al
c002109d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210a1:	88 10                	mov    BYTE PTR [eax],dl
c00210a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210a7:	8a 00                	mov    al,BYTE PTR [eax]
c00210a9:	0f be c0             	movsx  eax,al
c00210ac:	8b 04 85 00 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce400]
c00210b3:	83 c0 30             	add    eax,0x30
c00210b6:	88 c2                	mov    dl,al
c00210b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210bc:	88 10                	mov    BYTE PTR [eax],dl
c00210be:	90                   	nop
c00210bf:	c3                   	ret    

c00210c0 <FAT::open(char const*, void**, FileOpenMode)>:
c00210c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210ce:	74 0a                	je     c00210da <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00210d0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210d8:	75 0a                	jne    c00210e4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00210da:	b8 04 00 00 00       	mov    eax,0x4
c00210df:	e9 fd 00 00 00       	jmp    c00211e1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210e4:	83 ec 08             	sub    esp,0x8
c00210e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210f2:	50                   	push   eax
c00210f3:	e8 3c f7 fd ff       	call   c0000834 <strcpy>
c00210f8:	83 c4 10             	add    esp,0x10
c00210fb:	83 ec 08             	sub    esp,0x8
c00210fe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021102:	50                   	push   eax
c0021103:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002110a:	e8 79 ff ff ff       	call   c0021088 <FAT::fixFilepath(char*)>
c002110f:	83 c4 10             	add    esp,0x10
c0021112:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002111a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021121:	83 e0 01             	and    eax,0x1
c0021124:	74 08                	je     c002112e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021126:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002112e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021135:	83 e0 04             	and    eax,0x4
c0021138:	74 10                	je     c002114a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002113a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021142:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002114a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021151:	83 e0 02             	and    eax,0x2
c0021154:	74 08                	je     c002115e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021156:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002115e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021165:	83 e0 08             	and    eax,0x8
c0021168:	74 08                	je     c0021172 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002116a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021172:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021179:	83 e0 10             	and    eax,0x10
c002117c:	74 08                	je     c0021186 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002117e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021186:	83 ec 0c             	sub    esp,0xc
c0021189:	68 50 02 00 00       	push   0x250
c002118e:	e8 ad e6 fe ff       	call   c000f840 <malloc>
c0021193:	83 c4 10             	add    esp,0x10
c0021196:	89 c2                	mov    edx,eax
c0021198:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002119f:	89 10                	mov    DWORD PTR [eax],edx
c00211a1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00211a9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00211b2:	83 ec 04             	sub    esp,0x4
c00211b5:	52                   	push   edx
c00211b6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00211ba:	52                   	push   edx
c00211bb:	50                   	push   eax
c00211bc:	e8 d0 3d fe ff       	call   c0004f91 <f_open>
c00211c1:	83 c4 10             	add    esp,0x10
c00211c4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00211cb:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00211d3:	74 07                	je     c00211dc <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00211d5:	b8 01 00 00 00       	mov    eax,0x1
c00211da:	eb 05                	jmp    c00211e1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211dc:	b8 00 00 00 00       	mov    eax,0x0
c00211e1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211e7:	c3                   	ret    

c00211e8 <FAT::openDir(char const*, void**)>:
c00211e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211f6:	74 0a                	je     c0021202 <FAT::openDir(char const*, void**)+0x1a>
c00211f8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021200:	75 07                	jne    c0021209 <FAT::openDir(char const*, void**)+0x21>
c0021202:	b8 04 00 00 00       	mov    eax,0x4
c0021207:	eb 7d                	jmp    c0021286 <FAT::openDir(char const*, void**)+0x9e>
c0021209:	83 ec 08             	sub    esp,0x8
c002120c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021213:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021217:	50                   	push   eax
c0021218:	e8 17 f6 fd ff       	call   c0000834 <strcpy>
c002121d:	83 c4 10             	add    esp,0x10
c0021220:	83 ec 08             	sub    esp,0x8
c0021223:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021227:	50                   	push   eax
c0021228:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002122f:	e8 54 fe ff ff       	call   c0021088 <FAT::fixFilepath(char*)>
c0021234:	83 c4 10             	add    esp,0x10
c0021237:	83 ec 0c             	sub    esp,0xc
c002123a:	6a 4c                	push   0x4c
c002123c:	e8 ff e5 fe ff       	call   c000f840 <malloc>
c0021241:	83 c4 10             	add    esp,0x10
c0021244:	89 c2                	mov    edx,eax
c0021246:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002124d:	89 10                	mov    DWORD PTR [eax],edx
c002124f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021256:	8b 00                	mov    eax,DWORD PTR [eax]
c0021258:	83 ec 08             	sub    esp,0x8
c002125b:	8d 54 24 14          	lea    edx,[esp+0x14]
c002125f:	52                   	push   edx
c0021260:	50                   	push   eax
c0021261:	e8 63 4d fe ff       	call   c0005fc9 <f_opendir>
c0021266:	83 c4 10             	add    esp,0x10
c0021269:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021270:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021278:	74 07                	je     c0021281 <FAT::openDir(char const*, void**)+0x99>
c002127a:	b8 01 00 00 00       	mov    eax,0x1
c002127f:	eb 05                	jmp    c0021286 <FAT::openDir(char const*, void**)+0x9e>
c0021281:	b8 00 00 00 00       	mov    eax,0x0
c0021286:	81 c4 1c 01 00 00    	add    esp,0x11c
c002128c:	c3                   	ret    
c002128d:	90                   	nop

c002128e <FAT::stat(char const*, unsigned long long*, bool*)>:
c002128e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021294:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002129c:	75 0a                	jne    c00212a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002129e:	b8 04 00 00 00       	mov    eax,0x4
c00212a3:	e9 c9 00 00 00       	jmp    c0021371 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00212b0:	75 0a                	jne    c00212bc <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00212b2:	b8 04 00 00 00       	mov    eax,0x4
c00212b7:	e9 b5 00 00 00       	jmp    c0021371 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212bc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00212c4:	75 0a                	jne    c00212d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00212c6:	b8 04 00 00 00       	mov    eax,0x4
c00212cb:	e9 a1 00 00 00       	jmp    c0021371 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212d0:	83 ec 08             	sub    esp,0x8
c00212d3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212da:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212e1:	50                   	push   eax
c00212e2:	e8 4d f5 fd ff       	call   c0000834 <strcpy>
c00212e7:	83 c4 10             	add    esp,0x10
c00212ea:	83 ec 08             	sub    esp,0x8
c00212ed:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212f4:	50                   	push   eax
c00212f5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212fc:	e8 87 fd ff ff       	call   c0021088 <FAT::fixFilepath(char*)>
c0021301:	83 c4 10             	add    esp,0x10
c0021304:	83 ec 08             	sub    esp,0x8
c0021307:	8d 44 24 08          	lea    eax,[esp+0x8]
c002130b:	50                   	push   eax
c002130c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021313:	50                   	push   eax
c0021314:	e8 6f 4e fe ff       	call   c0006188 <f_stat>
c0021319:	83 c4 10             	add    esp,0x10
c002131c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021323:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002132a:	85 c0                	test   eax,eax
c002132c:	74 07                	je     c0021335 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002132e:	83 f8 04             	cmp    eax,0x4
c0021331:	74 32                	je     c0021365 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021333:	eb 37                	jmp    c002136c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021335:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021339:	0f b6 c0             	movzx  eax,al
c002133c:	83 e0 10             	and    eax,0x10
c002133f:	0f 95 c2             	setne  dl
c0021342:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021349:	88 10                	mov    BYTE PTR [eax],dl
c002134b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002134e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021352:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021359:	89 01                	mov    DWORD PTR [ecx],eax
c002135b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002135e:	b8 00 00 00 00       	mov    eax,0x0
c0021363:	eb 0c                	jmp    c0021371 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021365:	b8 02 00 00 00       	mov    eax,0x2
c002136a:	eb 05                	jmp    c0021371 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002136c:	b8 01 00 00 00       	mov    eax,0x1
c0021371:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021377:	c3                   	ret    

c0021378 <FAT::unlink(char const*)>:
c0021378:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002137e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021386:	75 07                	jne    c002138f <FAT::unlink(char const*)+0x17>
c0021388:	b8 04 00 00 00       	mov    eax,0x4
c002138d:	eb 5c                	jmp    c00213eb <FAT::unlink(char const*)+0x73>
c002138f:	83 ec 08             	sub    esp,0x8
c0021392:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021399:	8d 44 24 18          	lea    eax,[esp+0x18]
c002139d:	50                   	push   eax
c002139e:	e8 91 f4 fd ff       	call   c0000834 <strcpy>
c00213a3:	83 c4 10             	add    esp,0x10
c00213a6:	83 ec 08             	sub    esp,0x8
c00213a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213ad:	50                   	push   eax
c00213ae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213b5:	e8 ce fc ff ff       	call   c0021088 <FAT::fixFilepath(char*)>
c00213ba:	83 c4 10             	add    esp,0x10
c00213bd:	83 ec 0c             	sub    esp,0xc
c00213c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213c4:	50                   	push   eax
c00213c5:	e8 10 51 fe ff       	call   c00064da <f_unlink>
c00213ca:	83 c4 10             	add    esp,0x10
c00213cd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213d4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00213db:	85 c0                	test   eax,eax
c00213dd:	75 07                	jne    c00213e6 <FAT::unlink(char const*)+0x6e>
c00213df:	b8 00 00 00 00       	mov    eax,0x0
c00213e4:	eb 05                	jmp    c00213eb <FAT::unlink(char const*)+0x73>
c00213e6:	b8 01 00 00 00       	mov    eax,0x1
c00213eb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213f1:	c3                   	ret    

c00213f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00213f2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00213f8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00213ff:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021406:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002140a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002140e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021416:	75 0a                	jne    c0021422 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021418:	b8 04 00 00 00       	mov    eax,0x4
c002141d:	e9 1c 01 00 00       	jmp    c002153e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021422:	83 ec 08             	sub    esp,0x8
c0021425:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002142c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021430:	50                   	push   eax
c0021431:	e8 fe f3 fd ff       	call   c0000834 <strcpy>
c0021436:	83 c4 10             	add    esp,0x10
c0021439:	83 ec 08             	sub    esp,0x8
c002143c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021440:	50                   	push   eax
c0021441:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021448:	e8 3b fc ff ff       	call   c0021088 <FAT::fixFilepath(char*)>
c002144d:	83 c4 10             	add    esp,0x10
c0021450:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021458:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021460:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021465:	83 e0 01             	and    eax,0x1
c0021468:	74 08                	je     c0021472 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002146a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021472:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021477:	83 e0 02             	and    eax,0x2
c002147a:	74 08                	je     c0021484 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002147c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021484:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021489:	83 e0 04             	and    eax,0x4
c002148c:	74 08                	je     c0021496 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002148e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021496:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002149b:	83 e0 08             	and    eax,0x8
c002149e:	74 08                	je     c00214a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00214a0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00214a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214ad:	83 e0 01             	and    eax,0x1
c00214b0:	74 08                	je     c00214ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00214b2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00214ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214bf:	83 e0 02             	and    eax,0x2
c00214c2:	74 08                	je     c00214cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00214c4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00214cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214d1:	83 e0 04             	and    eax,0x4
c00214d4:	74 08                	je     c00214de <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00214d6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214de:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214e3:	83 e0 08             	and    eax,0x8
c00214e6:	74 08                	je     c00214f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00214e8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00214f0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00214f7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00214fe:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021506:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002150e:	83 ec 04             	sub    esp,0x4
c0021511:	52                   	push   edx
c0021512:	50                   	push   eax
c0021513:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021517:	50                   	push   eax
c0021518:	e8 5f 56 fe ff       	call   c0006b7c <f_chmod>
c002151d:	83 c4 10             	add    esp,0x10
c0021520:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021527:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002152e:	85 c0                	test   eax,eax
c0021530:	75 07                	jne    c0021539 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021532:	b8 00 00 00 00       	mov    eax,0x0
c0021537:	eb 05                	jmp    c002153e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021539:	b8 01 00 00 00       	mov    eax,0x1
c002153e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021544:	c3                   	ret    
c0021545:	90                   	nop

c0021546 <FAT::rename(char const*, char const*)>:
c0021546:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002154c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021554:	74 0a                	je     c0021560 <FAT::rename(char const*, char const*)+0x1a>
c0021556:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002155e:	75 0a                	jne    c002156a <FAT::rename(char const*, char const*)+0x24>
c0021560:	b8 04 00 00 00       	mov    eax,0x4
c0021565:	e9 98 00 00 00       	jmp    c0021602 <FAT::rename(char const*, char const*)+0xbc>
c002156a:	83 ec 08             	sub    esp,0x8
c002156d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021574:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002157b:	50                   	push   eax
c002157c:	e8 b3 f2 fd ff       	call   c0000834 <strcpy>
c0021581:	83 c4 10             	add    esp,0x10
c0021584:	83 ec 08             	sub    esp,0x8
c0021587:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002158e:	50                   	push   eax
c002158f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021596:	e8 ed fa ff ff       	call   c0021088 <FAT::fixFilepath(char*)>
c002159b:	83 c4 10             	add    esp,0x10
c002159e:	83 ec 08             	sub    esp,0x8
c00215a1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00215a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215ac:	50                   	push   eax
c00215ad:	e8 82 f2 fd ff       	call   c0000834 <strcpy>
c00215b2:	83 c4 10             	add    esp,0x10
c00215b5:	83 ec 08             	sub    esp,0x8
c00215b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215bc:	50                   	push   eax
c00215bd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215c4:	e8 bf fa ff ff       	call   c0021088 <FAT::fixFilepath(char*)>
c00215c9:	83 c4 10             	add    esp,0x10
c00215cc:	83 ec 08             	sub    esp,0x8
c00215cf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215d3:	50                   	push   eax
c00215d4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215db:	50                   	push   eax
c00215dc:	e8 a8 52 fe ff       	call   c0006889 <f_rename>
c00215e1:	83 c4 10             	add    esp,0x10
c00215e4:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00215eb:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00215f2:	85 c0                	test   eax,eax
c00215f4:	75 07                	jne    c00215fd <FAT::rename(char const*, char const*)+0xb7>
c00215f6:	b8 00 00 00 00       	mov    eax,0x0
c00215fb:	eb 05                	jmp    c0021602 <FAT::rename(char const*, char const*)+0xbc>
c00215fd:	b8 01 00 00 00       	mov    eax,0x1
c0021602:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021608:	c3                   	ret    
c0021609:	90                   	nop

c002160a <FAT::mkdir(char const*)>:
c002160a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021610:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021618:	75 07                	jne    c0021621 <FAT::mkdir(char const*)+0x17>
c002161a:	b8 04 00 00 00       	mov    eax,0x4
c002161f:	eb 5c                	jmp    c002167d <FAT::mkdir(char const*)+0x73>
c0021621:	83 ec 08             	sub    esp,0x8
c0021624:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002162b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002162f:	50                   	push   eax
c0021630:	e8 ff f1 fd ff       	call   c0000834 <strcpy>
c0021635:	83 c4 10             	add    esp,0x10
c0021638:	83 ec 08             	sub    esp,0x8
c002163b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002163f:	50                   	push   eax
c0021640:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021647:	e8 3c fa ff ff       	call   c0021088 <FAT::fixFilepath(char*)>
c002164c:	83 c4 10             	add    esp,0x10
c002164f:	83 ec 0c             	sub    esp,0xc
c0021652:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021656:	50                   	push   eax
c0021657:	e8 01 50 fe ff       	call   c000665d <f_mkdir>
c002165c:	83 c4 10             	add    esp,0x10
c002165f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021666:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002166d:	85 c0                	test   eax,eax
c002166f:	75 07                	jne    c0021678 <FAT::mkdir(char const*)+0x6e>
c0021671:	b8 00 00 00 00       	mov    eax,0x0
c0021676:	eb 05                	jmp    c002167d <FAT::mkdir(char const*)+0x73>
c0021678:	b8 01 00 00 00       	mov    eax,0x1
c002167d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021683:	c3                   	ret    

c0021684 <FAT::exists(char const*)>:
c0021684:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002168a:	83 ec 08             	sub    esp,0x8
c002168d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021694:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021698:	50                   	push   eax
c0021699:	e8 96 f1 fd ff       	call   c0000834 <strcpy>
c002169e:	83 c4 10             	add    esp,0x10
c00216a1:	83 ec 08             	sub    esp,0x8
c00216a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216a8:	50                   	push   eax
c00216a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00216b0:	e8 d3 f9 ff ff       	call   c0021088 <FAT::fixFilepath(char*)>
c00216b5:	83 c4 10             	add    esp,0x10
c00216b8:	83 ec 08             	sub    esp,0x8
c00216bb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00216c2:	50                   	push   eax
c00216c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00216c7:	50                   	push   eax
c00216c8:	e8 bb 4a fe ff       	call   c0006188 <f_stat>
c00216cd:	83 c4 10             	add    esp,0x10
c00216d0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00216d7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216de:	85 c0                	test   eax,eax
c00216e0:	75 04                	jne    c00216e6 <FAT::exists(char const*)+0x62>
c00216e2:	b0 01                	mov    al,0x1
c00216e4:	eb 02                	jmp    c00216e8 <FAT::exists(char const*)+0x64>
c00216e6:	b0 00                	mov    al,0x0
c00216e8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00216ee:	c3                   	ret    
c00216ef:	90                   	nop

c00216f0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00216f0:	b8 08 00 00 00       	mov    eax,0x8
c00216f5:	c3                   	ret    

c00216f6 <ISO9660::seek(void*, unsigned long long)>:
c00216f6:	53                   	push   ebx
c00216f7:	b8 04 00 00 00       	mov    eax,0x4
c00216fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021700:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021704:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021708:	85 d2                	test   edx,edx
c002170a:	74 17                	je     c0021723 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002170c:	89 c8                	mov    eax,ecx
c002170e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021711:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021714:	b8 01 00 00 00       	mov    eax,0x1
c0021719:	73 08                	jae    c0021723 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002171b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002171e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021721:	31 c0                	xor    eax,eax
c0021723:	5b                   	pop    ebx
c0021724:	c3                   	ret    
c0021725:	90                   	nop

c0021726 <ISO9660::tell(void*, unsigned long long*)>:
c0021726:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002172a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002172e:	85 d2                	test   edx,edx
c0021730:	74 12                	je     c0021744 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021732:	85 c0                	test   eax,eax
c0021734:	74 0e                	je     c0021744 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021736:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021739:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002173c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002173f:	89 10                	mov    DWORD PTR [eax],edx
c0021741:	31 c0                	xor    eax,eax
c0021743:	c3                   	ret    
c0021744:	b8 04 00 00 00       	mov    eax,0x4
c0021749:	c3                   	ret    

c002174a <ISO9660::getName()>:
c002174a:	b8 54 ca 02 c0       	mov    eax,0xc002ca54
c002174f:	c3                   	ret    

c0021750 <ISO9660::stat(void*, unsigned long long*)>:
c0021750:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021758:	85 d2                	test   edx,edx
c002175a:	74 12                	je     c002176e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002175c:	85 c0                	test   eax,eax
c002175e:	74 0e                	je     c002176e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021760:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021763:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021766:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021769:	89 10                	mov    DWORD PTR [eax],edx
c002176b:	31 c0                	xor    eax,eax
c002176d:	c3                   	ret    
c002176e:	b8 04 00 00 00       	mov    eax,0x4
c0021773:	c3                   	ret    

c0021774 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021774:	b8 01 00 00 00       	mov    eax,0x1
c0021779:	c3                   	ret    

c002177a <ISO9660::unlink(char const*)>:
c002177a:	b8 01 00 00 00       	mov    eax,0x1
c002177f:	c3                   	ret    

c0021780 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021780:	b8 01 00 00 00       	mov    eax,0x1
c0021785:	c3                   	ret    

c0021786 <ISO9660::rename(char const*, char const*)>:
c0021786:	b8 01 00 00 00       	mov    eax,0x1
c002178b:	c3                   	ret    

c002178c <ISO9660::mkdir(char const*)>:
c002178c:	b8 01 00 00 00       	mov    eax,0x1
c0021791:	c3                   	ret    

c0021792 <ISO9660::close(void*)>:
c0021792:	83 ec 0c             	sub    esp,0xc
c0021795:	b8 04 00 00 00       	mov    eax,0x4
c002179a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002179e:	85 d2                	test   edx,edx
c00217a0:	74 0e                	je     c00217b0 <ISO9660::close(void*)+0x1e>
c00217a2:	83 ec 0c             	sub    esp,0xc
c00217a5:	52                   	push   edx
c00217a6:	e8 a5 e0 fe ff       	call   c000f850 <free>
c00217ab:	83 c4 10             	add    esp,0x10
c00217ae:	31 c0                	xor    eax,eax
c00217b0:	83 c4 0c             	add    esp,0xc
c00217b3:	c3                   	ret    

c00217b4 <ISO9660::closeDir(void*)>:
c00217b4:	83 ec 0c             	sub    esp,0xc
c00217b7:	b8 04 00 00 00       	mov    eax,0x4
c00217bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217c0:	85 d2                	test   edx,edx
c00217c2:	74 0e                	je     c00217d2 <ISO9660::closeDir(void*)+0x1e>
c00217c4:	83 ec 0c             	sub    esp,0xc
c00217c7:	52                   	push   edx
c00217c8:	e8 83 e0 fe ff       	call   c000f850 <free>
c00217cd:	83 c4 10             	add    esp,0x10
c00217d0:	31 c0                	xor    eax,eax
c00217d2:	83 c4 0c             	add    esp,0xc
c00217d5:	c3                   	ret    

c00217d6 <ISO9660::~ISO9660()>:
c00217d6:	83 ec 0c             	sub    esp,0xc
c00217d9:	ba b8 ca 02 c0       	mov    edx,0xc002cab8
c00217de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e2:	89 10                	mov    DWORD PTR [eax],edx
c00217e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e8:	83 ec 0c             	sub    esp,0xc
c00217eb:	50                   	push   eax
c00217ec:	e8 6d 1b ff ff       	call   c001335e <Filesystem::~Filesystem()>
c00217f1:	83 c4 10             	add    esp,0x10
c00217f4:	90                   	nop
c00217f5:	83 c4 0c             	add    esp,0xc
c00217f8:	c3                   	ret    
c00217f9:	90                   	nop

c00217fa <ISO9660::~ISO9660()>:
c00217fa:	83 ec 0c             	sub    esp,0xc
c00217fd:	83 ec 0c             	sub    esp,0xc
c0021800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021804:	e8 cd ff ff ff       	call   c00217d6 <ISO9660::~ISO9660()>
c0021809:	83 c4 10             	add    esp,0x10
c002180c:	83 ec 08             	sub    esp,0x8
c002180f:	6a 08                	push   0x8
c0021811:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021815:	e8 3c 17 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c002181a:	83 c4 10             	add    esp,0x10
c002181d:	83 c4 0c             	add    esp,0xc
c0021820:	c3                   	ret    

c0021821 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021821:	55                   	push   ebp
c0021822:	31 c9                	xor    ecx,ecx
c0021824:	57                   	push   edi
c0021825:	56                   	push   esi
c0021826:	53                   	push   ebx
c0021827:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002182b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002182f:	89 eb                	mov    ebx,ebp
c0021831:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021835:	39 ce                	cmp    esi,ecx
c0021837:	7e 17                	jle    c0021850 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021839:	31 d2                	xor    edx,edx
c002183b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002183f:	7d 13                	jge    c0021854 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021841:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021845:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021848:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002184b:	75 0d                	jne    c002185a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002184d:	42                   	inc    edx
c002184e:	eb eb                	jmp    c002183b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021850:	31 c0                	xor    eax,eax
c0021852:	eb 0a                	jmp    c002185e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021854:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021858:	eb 04                	jmp    c002185e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002185a:	41                   	inc    ecx
c002185b:	43                   	inc    ebx
c002185c:	eb d7                	jmp    c0021835 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002185e:	5b                   	pop    ebx
c002185f:	5e                   	pop    esi
c0021860:	5f                   	pop    edi
c0021861:	5d                   	pop    ebp
c0021862:	c3                   	ret    

c0021863 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021863:	56                   	push   esi
c0021864:	53                   	push   ebx
c0021865:	52                   	push   edx
c0021866:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002186a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002186e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021872:	39 0d e0 1c 03 c0    	cmp    DWORD PTR ds:0xc0031ce0,ecx
c0021878:	75 08                	jne    c0021882 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002187a:	38 05 14 db 02 c0    	cmp    BYTE PTR ds:0xc002db14,al
c0021880:	74 2b                	je     c00218ad <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021882:	83 ec 0c             	sub    esp,0xc
c0021885:	a2 14 db 02 c0       	mov    ds:0xc002db14,al
c002188a:	68 00 1d 03 c0       	push   0xc0031d00
c002188f:	0f be c0             	movsx  eax,al
c0021892:	6a 01                	push   0x1
c0021894:	89 0d e0 1c 03 c0    	mov    DWORD PTR ds:0xc0031ce0,ecx
c002189a:	31 db                	xor    ebx,ebx
c002189c:	53                   	push   ebx
c002189d:	51                   	push   ecx
c002189e:	ff 34 85 bc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1544]
c00218a5:	e8 ac 4f ff ff       	call   c0016856 <LogicalDisk::read(unsigned long long, int, void*)>
c00218aa:	83 c4 20             	add    esp,0x20
c00218ad:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00218b5:	c7 44 24 14 00 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d00
c00218bd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00218c1:	58                   	pop    eax
c00218c2:	5b                   	pop    ebx
c00218c3:	5e                   	pop    esi
c00218c4:	e9 7b ee fd ff       	jmp    c0000744 <memcpy>
c00218c9:	90                   	nop

c00218ca <ISO9660::tryMount(LogicalDisk*, int)>:
c00218ca:	81 ec 10 08 00 00    	sub    esp,0x810
c00218d0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00218d7:	83 c0 41             	add    eax,0x41
c00218da:	0f be c0             	movsx  eax,al
c00218dd:	50                   	push   eax
c00218de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218e2:	50                   	push   eax
c00218e3:	6a 10                	push   0x10
c00218e5:	e8 79 ff ff ff       	call   c0021863 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218ea:	83 c4 10             	add    esp,0x10
c00218ed:	31 c0                	xor    eax,eax
c00218ef:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00218f4:	75 1d                	jne    c0021913 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218f6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00218fb:	75 16                	jne    c0021913 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218fd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021902:	75 0f                	jne    c0021913 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021904:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021909:	75 08                	jne    c0021913 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002190b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021910:	0f 94 c0             	sete   al
c0021913:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021919:	c3                   	ret    

c002191a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002191a:	55                   	push   ebp
c002191b:	57                   	push   edi
c002191c:	56                   	push   esi
c002191d:	53                   	push   ebx
c002191e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021924:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002192b:	85 ed                	test   ebp,ebp
c002192d:	0f 84 d6 01 00 00    	je     c0021b09 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021933:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002193b:	0f 84 c8 01 00 00    	je     c0021b09 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021941:	b8 01 00 00 00       	mov    eax,0x1
c0021946:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002194a:	0f 85 be 01 00 00    	jne    c0021b0e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021950:	31 d2                	xor    edx,edx
c0021952:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021959:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002195c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002195f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021963:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021966:	89 04 24             	mov    DWORD PTR [esp],eax
c0021969:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002196d:	01 f0                	add    eax,esi
c002196f:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021972:	11 fa                	adc    edx,edi
c0021974:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021978:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002197c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021980:	19 d1                	sbb    ecx,edx
c0021982:	72 0a                	jb     c002198e <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021984:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021988:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002198c:	eb 13                	jmp    c00219a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002198e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021992:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021996:	29 f0                	sub    eax,esi
c0021998:	19 fa                	sbb    edx,edi
c002199a:	89 04 24             	mov    DWORD PTR [esp],eax
c002199d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00219a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00219a4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00219a7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00219ab:	51                   	push   ecx
c00219ac:	c1 e0 0b             	shl    eax,0xb
c00219af:	01 c6                	add    esi,eax
c00219b1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219b5:	11 d7                	adc    edi,edx
c00219b7:	50                   	push   eax
c00219b8:	89 fa                	mov    edx,edi
c00219ba:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00219be:	89 f0                	mov    eax,esi
c00219c0:	53                   	push   ebx
c00219c1:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219c5:	50                   	push   eax
c00219c6:	e8 98 fe ff ff       	call   c0021863 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219cf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219d2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00219d6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00219dc:	83 c4 10             	add    esp,0x10
c00219df:	b8 00 08 00 00       	mov    eax,0x800
c00219e4:	29 d0                	sub    eax,edx
c00219e6:	39 c1                	cmp    ecx,eax
c00219e8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00219ec:	83 d9 00             	sbb    ecx,0x0
c00219ef:	7d 1c                	jge    c0021a0d <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00219f1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00219f6:	75 12                	jne    c0021a0a <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00219f8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a05:	e9 fb 00 00 00       	jmp    c0021b05 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021a0a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a0d:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021a10:	31 d2                	xor    edx,edx
c0021a12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021a16:	39 c2                	cmp    edx,eax
c0021a18:	7d 14                	jge    c0021a2e <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021a1a:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021a21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a25:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021a28:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021a2b:	42                   	inc    edx
c0021a2c:	eb e8                	jmp    c0021a16 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021a2e:	89 c3                	mov    ebx,eax
c0021a30:	85 c0                	test   eax,eax
c0021a32:	79 02                	jns    c0021a36 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a34:	31 db                	xor    ebx,ebx
c0021a36:	99                   	cdq    
c0021a37:	01 c3                	add    ebx,eax
c0021a39:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a40:	01 c6                	add    esi,eax
c0021a42:	11 d7                	adc    edi,edx
c0021a44:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a48:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a4c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a4f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a53:	29 c6                	sub    esi,eax
c0021a55:	19 d7                	sbb    edi,edx
c0021a57:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a5a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a5e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a63:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a66:	b8 00 00 00 00       	mov    eax,0x0
c0021a6b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a6f:	7d 3e                	jge    c0021aaf <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a71:	52                   	push   edx
c0021a72:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a76:	50                   	push   eax
c0021a77:	53                   	push   ebx
c0021a78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a80:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a84:	50                   	push   eax
c0021a85:	e8 d9 fd ff ff       	call   c0021863 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a8a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a92:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a97:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a9d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021aa5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021aaa:	83 c4 10             	add    esp,0x10
c0021aad:	eb af                	jmp    c0021a5e <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021aaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ab3:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021ab6:	74 32                	je     c0021aea <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021ab8:	50                   	push   eax
c0021ab9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021abd:	50                   	push   eax
c0021abe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ac2:	50                   	push   eax
c0021ac3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021ac7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021acb:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021acf:	56                   	push   esi
c0021ad0:	e8 8e fd ff ff       	call   c0021863 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ad5:	83 c4 0c             	add    esp,0xc
c0021ad8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021adc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ae0:	50                   	push   eax
c0021ae1:	53                   	push   ebx
c0021ae2:	e8 5d ec fd ff       	call   c0000744 <memcpy>
c0021ae7:	83 c4 10             	add    esp,0x10
c0021aea:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021af1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021af5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021af9:	89 38                	mov    DWORD PTR [eax],edi
c0021afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021aff:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021b02:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021b05:	31 c0                	xor    eax,eax
c0021b07:	eb 05                	jmp    c0021b0e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021b09:	b8 04 00 00 00       	mov    eax,0x4
c0021b0e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021b14:	5b                   	pop    ebx
c0021b15:	5e                   	pop    esi
c0021b16:	5f                   	pop    edi
c0021b17:	5d                   	pop    ebp
c0021b18:	c3                   	ret    
c0021b19:	90                   	nop

c0021b1a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021b1a:	55                   	push   ebp
c0021b1b:	57                   	push   edi
c0021b1c:	56                   	push   esi
c0021b1d:	53                   	push   ebx
c0021b1e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021b24:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021b2b:	85 f6                	test   esi,esi
c0021b2d:	0f 84 64 02 00 00    	je     c0021d97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b33:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b3b:	0f 84 56 02 00 00    	je     c0021d97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b41:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b44:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b47:	75 0a                	jne    c0021b53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b49:	b8 07 00 00 00       	mov    eax,0x7
c0021b4e:	e9 49 02 00 00       	jmp    c0021d9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b53:	50                   	push   eax
c0021b54:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b58:	50                   	push   eax
c0021b59:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b60:	53                   	push   ebx
c0021b61:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b63:	c1 e0 0b             	shl    eax,0xb
c0021b66:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b69:	c1 e8 0b             	shr    eax,0xb
c0021b6c:	50                   	push   eax
c0021b6d:	e8 f1 fc ff ff       	call   c0021863 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b72:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b75:	83 c4 10             	add    esp,0x10
c0021b78:	89 c1                	mov    ecx,eax
c0021b7a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b7d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b83:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b86:	84 db                	test   bl,bl
c0021b88:	0f 85 90 00 00 00    	jne    c0021c1e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b8e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b94:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b9a:	29 c7                	sub    edi,eax
c0021b9c:	89 fb                	mov    ebx,edi
c0021b9e:	c1 fb 1f             	sar    ebx,0x1f
c0021ba1:	01 f8                	add    eax,edi
c0021ba3:	11 da                	adc    edx,ebx
c0021ba5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ba9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bad:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021bb0:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021bb3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021bb6:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021bb9:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021bc0:	89 d8                	mov    eax,ebx
c0021bc2:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021bc5:	ba 00 00 00 00       	mov    edx,0x0
c0021bca:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021bce:	b8 00 00 00 00       	mov    eax,0x0
c0021bd3:	73 0b                	jae    c0021be0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021bd5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bdc:	29 f8                	sub    eax,edi
c0021bde:	19 da                	sbb    edx,ebx
c0021be0:	89 d3                	mov    ebx,edx
c0021be2:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021be5:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021be8:	09 c3                	or     ebx,eax
c0021bea:	0f 84 59 ff ff ff    	je     c0021b49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021bf0:	55                   	push   ebp
c0021bf1:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021bf5:	50                   	push   eax
c0021bf6:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bfd:	53                   	push   ebx
c0021bfe:	8b 06                	mov    eax,DWORD PTR [esi]
c0021c00:	c1 e0 0b             	shl    eax,0xb
c0021c03:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021c07:	c1 e8 0b             	shr    eax,0xb
c0021c0a:	50                   	push   eax
c0021c0b:	e8 53 fc ff ff       	call   c0021863 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c10:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c13:	83 c4 10             	add    esp,0x10
c0021c16:	25 ff 07 00 00       	and    eax,0x7ff
c0021c1b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021c1e:	57                   	push   edi
c0021c1f:	6a 28                	push   0x28
c0021c21:	6a 00                	push   0x0
c0021c23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c27:	50                   	push   eax
c0021c28:	e8 4b eb fd ff       	call   c0000778 <memset>
c0021c2d:	31 d2                	xor    edx,edx
c0021c2f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c32:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c38:	89 f8                	mov    eax,edi
c0021c3a:	83 c0 21             	add    eax,0x21
c0021c3d:	83 d2 00             	adc    edx,0x0
c0021c40:	89 c7                	mov    edi,eax
c0021c42:	89 d5                	mov    ebp,edx
c0021c44:	83 c4 10             	add    esp,0x10
c0021c47:	31 c9                	xor    ecx,ecx
c0021c49:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c50:	83 f9 28             	cmp    ecx,0x28
c0021c53:	88 04 24             	mov    BYTE PTR [esp],al
c0021c56:	0f 94 c2             	sete   dl
c0021c59:	88 d0                	mov    al,dl
c0021c5b:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c60:	39 fa                	cmp    edx,edi
c0021c62:	ba 00 00 00 00       	mov    edx,0x0
c0021c67:	19 ea                	sbb    edx,ebp
c0021c69:	0f 92 c2             	setb   dl
c0021c6c:	09 c2                	or     edx,eax
c0021c6e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c72:	0f 94 c0             	sete   al
c0021c75:	08 d0                	or     al,dl
c0021c77:	75 16                	jne    c0021c8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c79:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c7d:	74 10                	je     c0021c8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c7f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c82:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c86:	41                   	inc    ecx
c0021c87:	83 c7 01             	add    edi,0x1
c0021c8a:	83 d5 00             	adc    ebp,0x0
c0021c8d:	eb ba                	jmp    c0021c49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c8f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c96:	83 ec 0c             	sub    esp,0xc
c0021c99:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c9d:	57                   	push   edi
c0021c9e:	e8 f1 ea fd ff       	call   c0000794 <strlen>
c0021ca3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021cab:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021caf:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021cb6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021cb9:	5a                   	pop    edx
c0021cba:	25 ff 07 00 00       	and    eax,0x7ff
c0021cbf:	01 c8                	add    eax,ecx
c0021cc1:	59                   	pop    ecx
c0021cc2:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021cc8:	83 e0 02             	and    eax,0x2
c0021ccb:	3c 01                	cmp    al,0x1
c0021ccd:	19 c0                	sbb    eax,eax
c0021ccf:	83 c0 02             	add    eax,0x2
c0021cd2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021cd6:	57                   	push   edi
c0021cd7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021cdb:	50                   	push   eax
c0021cdc:	e8 53 eb fd ff       	call   c0000834 <strcpy>
c0021ce1:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021ce5:	83 c4 10             	add    esp,0x10
c0021ce8:	84 c0                	test   al,al
c0021cea:	75 21                	jne    c0021d0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021cec:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021cf4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cfc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d04:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021d0b:	eb 28                	jmp    c0021d35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d0d:	fe c8                	dec    al
c0021d0f:	75 24                	jne    c0021d35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d11:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021d19:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d21:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d29:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d30:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d35:	0f b6 fb             	movzx  edi,bl
c0021d38:	31 db                	xor    ebx,ebx
c0021d3a:	50                   	push   eax
c0021d3b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d42:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d46:	50                   	push   eax
c0021d47:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d4e:	e8 f1 e9 fd ff       	call   c0000744 <memcpy>
c0021d53:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d5a:	89 f9                	mov    ecx,edi
c0021d5c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d62:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d65:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d68:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d6b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d6e:	83 c4 10             	add    esp,0x10
c0021d71:	39 c7                	cmp    edi,eax
c0021d73:	89 df                	mov    edi,ebx
c0021d75:	19 d7                	sbb    edi,edx
c0021d77:	72 10                	jb     c0021d89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d79:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d80:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d87:	eb 0a                	jmp    c0021d93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d89:	29 c8                	sub    eax,ecx
c0021d8b:	19 da                	sbb    edx,ebx
c0021d8d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d90:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d93:	31 c0                	xor    eax,eax
c0021d95:	eb 05                	jmp    c0021d9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d97:	b8 04 00 00 00       	mov    eax,0x4
c0021d9c:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021da2:	5b                   	pop    ebx
c0021da3:	5e                   	pop    esi
c0021da4:	5f                   	pop    edi
c0021da5:	5d                   	pop    ebp
c0021da6:	c3                   	ret    

c0021da7 <readRoot(unsigned int*, unsigned int*, char)>:
c0021da7:	81 ec 40 08 00 00    	sub    esp,0x840
c0021dad:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021db5:	50                   	push   eax
c0021db6:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021dba:	50                   	push   eax
c0021dbb:	6a 10                	push   0x10
c0021dbd:	e8 a1 fa ff ff       	call   c0021863 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dc2:	83 c4 0c             	add    esp,0xc
c0021dc5:	6a 22                	push   0x22
c0021dc7:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021dce:	50                   	push   eax
c0021dcf:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021dd3:	50                   	push   eax
c0021dd4:	e8 6b e9 fd ff       	call   c0000744 <memcpy>
c0021dd9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021de0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021de4:	89 10                	mov    DWORD PTR [eax],edx
c0021de6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021ded:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021df1:	89 10                	mov    DWORD PTR [eax],edx
c0021df3:	b0 01                	mov    al,0x1
c0021df5:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021dfb:	c3                   	ret    

c0021dfc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021dfc:	55                   	push   ebp
c0021dfd:	57                   	push   edi
c0021dfe:	56                   	push   esi
c0021dff:	53                   	push   ebx
c0021e00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021e06:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021e0d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021e14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021e18:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021e1c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021e20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021e24:	75 03                	jne    c0021e29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e26:	83 c3 02             	add    ebx,0x2
c0021e29:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021e2c:	75 03                	jne    c0021e31 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021e2e:	43                   	inc    ebx
c0021e2f:	eb f8                	jmp    c0021e29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e31:	51                   	push   ecx
c0021e32:	68 00 01 00 00       	push   0x100
c0021e37:	6a 00                	push   0x0
c0021e39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e3d:	50                   	push   eax
c0021e3e:	e8 35 e9 fd ff       	call   c0000778 <memset>
c0021e43:	83 c4 10             	add    esp,0x10
c0021e46:	31 d2                	xor    edx,edx
c0021e48:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e4b:	84 c0                	test   al,al
c0021e4d:	74 21                	je     c0021e70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e4f:	3c 2f                	cmp    al,0x2f
c0021e51:	75 0b                	jne    c0021e5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e53:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e57:	bd 01 00 00 00       	mov    ebp,0x1
c0021e5c:	eb 14                	jmp    c0021e72 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e5e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e61:	80 f9 19             	cmp    cl,0x19
c0021e64:	77 03                	ja     c0021e69 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e66:	83 e8 20             	sub    eax,0x20
c0021e69:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e6d:	42                   	inc    edx
c0021e6e:	eb d8                	jmp    c0021e48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e70:	31 ed                	xor    ebp,ebp
c0021e72:	83 ec 0c             	sub    esp,0xc
c0021e75:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e7c:	e8 bf d9 fe ff       	call   c000f840 <malloc>
c0021e81:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e88:	89 c6                	mov    esi,eax
c0021e8a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e90:	c1 ef 0b             	shr    edi,0xb
c0021e93:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e9a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e9e:	83 c4 10             	add    esp,0x10
c0021ea1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021ea6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021eaa:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021eb1:	74 28                	je     c0021edb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021eb3:	52                   	push   edx
c0021eb4:	57                   	push   edi
c0021eb5:	50                   	push   eax
c0021eb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021eba:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021ec1:	e8 9d f9 ff ff       	call   c0021863 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021eca:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ed1:	05 00 08 00 00       	add    eax,0x800
c0021ed6:	83 c4 10             	add    esp,0x10
c0021ed9:	eb cb                	jmp    c0021ea6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021edb:	83 ec 0c             	sub    esp,0xc
c0021ede:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021ee2:	57                   	push   edi
c0021ee3:	e8 ac e8 fd ff       	call   c0000794 <strlen>
c0021ee8:	50                   	push   eax
c0021ee9:	57                   	push   edi
c0021eea:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ef1:	56                   	push   esi
c0021ef2:	e8 2a f9 ff ff       	call   c0021821 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ef7:	83 c4 20             	add    esp,0x20
c0021efa:	85 c0                	test   eax,eax
c0021efc:	75 13                	jne    c0021f11 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021efe:	83 ec 0c             	sub    esp,0xc
c0021f01:	56                   	push   esi
c0021f02:	e8 49 d9 fe ff       	call   c000f850 <free>
c0021f07:	83 c4 10             	add    esp,0x10
c0021f0a:	31 c0                	xor    eax,eax
c0021f0c:	e9 b3 00 00 00       	jmp    c0021fc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f11:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021f15:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021f19:	c1 e7 08             	shl    edi,0x8
c0021f1c:	c1 e2 10             	shl    edx,0x10
c0021f1f:	09 d7                	or     edi,edx
c0021f21:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021f25:	09 d7                	or     edi,edx
c0021f27:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021f2b:	c1 e2 18             	shl    edx,0x18
c0021f2e:	09 d7                	or     edi,edx
c0021f30:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f34:	89 d1                	mov    ecx,edx
c0021f36:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f3a:	c1 e1 08             	shl    ecx,0x8
c0021f3d:	c1 e2 10             	shl    edx,0x10
c0021f40:	09 ca                	or     edx,ecx
c0021f42:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f46:	09 ca                	or     edx,ecx
c0021f48:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f4c:	c1 e1 18             	shl    ecx,0x18
c0021f4f:	09 ca                	or     edx,ecx
c0021f51:	89 e9                	mov    ecx,ebp
c0021f53:	84 c9                	test   cl,cl
c0021f55:	74 3c                	je     c0021f93 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f57:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f5b:	83 ec 0c             	sub    esp,0xc
c0021f5e:	56                   	push   esi
c0021f5f:	e8 ec d8 fe ff       	call   c000f850 <free>
c0021f64:	83 c4 0c             	add    esp,0xc
c0021f67:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f6e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f73:	50                   	push   eax
c0021f74:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f7b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f86:	52                   	push   edx
c0021f87:	57                   	push   edi
c0021f88:	53                   	push   ebx
c0021f89:	e8 6e fe ff ff       	call   c0021dfc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f8e:	83 c4 20             	add    esp,0x20
c0021f91:	eb 31                	jmp    c0021fc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f93:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f96:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f9d:	d0 e8                	shr    al,1
c0021f9f:	89 3b                	mov    DWORD PTR [ebx],edi
c0021fa1:	83 e0 01             	and    eax,0x1
c0021fa4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021fab:	83 ec 0c             	sub    esp,0xc
c0021fae:	89 13                	mov    DWORD PTR [ebx],edx
c0021fb0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021fb7:	89 03                	mov    DWORD PTR [ebx],eax
c0021fb9:	56                   	push   esi
c0021fba:	e8 91 d8 fe ff       	call   c000f850 <free>
c0021fbf:	83 c4 10             	add    esp,0x10
c0021fc2:	b0 01                	mov    al,0x1
c0021fc4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021fca:	5b                   	pop    ebx
c0021fcb:	5e                   	pop    esi
c0021fcc:	5f                   	pop    edi
c0021fcd:	5d                   	pop    ebp
c0021fce:	c3                   	ret    

c0021fcf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021fcf:	55                   	push   ebp
c0021fd0:	57                   	push   edi
c0021fd1:	56                   	push   esi
c0021fd2:	53                   	push   ebx
c0021fd3:	83 ec 20             	sub    esp,0x20
c0021fd6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021fda:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021fde:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021fe2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ff2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021ff7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ffd:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022003:	57                   	push   edi
c0022004:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022008:	50                   	push   eax
c0022009:	8d 44 24 14          	lea    eax,[esp+0x14]
c002200d:	50                   	push   eax
c002200e:	e8 94 fd ff ff       	call   c0021da7 <readRoot(unsigned int*, unsigned int*, char)>
c0022013:	5a                   	pop    edx
c0022014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022018:	e8 77 e7 fd ff       	call   c0000794 <strlen>
c002201d:	83 c4 10             	add    esp,0x10
c0022020:	83 f8 03             	cmp    eax,0x3
c0022023:	77 17                	ja     c002203c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022025:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022029:	89 03                	mov    DWORD PTR [ebx],eax
c002202b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002202f:	89 06                	mov    DWORD PTR [esi],eax
c0022031:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022038:	b0 01                	mov    al,0x1
c002203a:	eb 19                	jmp    c0022055 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002203c:	50                   	push   eax
c002203d:	55                   	push   ebp
c002203e:	57                   	push   edi
c002203f:	56                   	push   esi
c0022040:	53                   	push   ebx
c0022041:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022045:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022049:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002204d:	e8 aa fd ff ff       	call   c0021dfc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022052:	83 c4 20             	add    esp,0x20
c0022055:	83 c4 1c             	add    esp,0x1c
c0022058:	5b                   	pop    ebx
c0022059:	5e                   	pop    esi
c002205a:	5f                   	pop    edi
c002205b:	5d                   	pop    ebp
c002205c:	c3                   	ret    
c002205d:	90                   	nop

c002205e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002205e:	57                   	push   edi
c002205f:	56                   	push   esi
c0022060:	53                   	push   ebx
c0022061:	83 ec 10             	sub    esp,0x10
c0022064:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022068:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002206c:	85 ff                	test   edi,edi
c002206e:	0f 84 9d 00 00 00    	je     c0022111 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022074:	85 f6                	test   esi,esi
c0022076:	0f 84 95 00 00 00    	je     c0022111 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002207c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022081:	74 17                	je     c002209a <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022083:	83 ec 0c             	sub    esp,0xc
c0022086:	68 6f ca 02 c0       	push   0xc002ca6f
c002208b:	e8 a6 0f ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0022090:	83 c4 10             	add    esp,0x10
c0022093:	b8 03 00 00 00       	mov    eax,0x3
c0022098:	eb 7c                	jmp    c0022116 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002209a:	83 ec 0c             	sub    esp,0xc
c002209d:	6a 1c                	push   0x1c
c002209f:	e8 9c d7 fe ff       	call   c000f840 <malloc>
c00220a4:	89 07                	mov    DWORD PTR [edi],eax
c00220a6:	89 c3                	mov    ebx,eax
c00220a8:	58                   	pop    eax
c00220a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220ad:	50                   	push   eax
c00220ae:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220b1:	50                   	push   eax
c00220b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b6:	50                   	push   eax
c00220b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220bb:	50                   	push   eax
c00220bc:	56                   	push   esi
c00220bd:	e8 0d ff ff ff       	call   c0021fcf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220c2:	83 c4 20             	add    esp,0x20
c00220c5:	84 c0                	test   al,al
c00220c7:	74 07                	je     c00220d0 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00220c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220ce:	74 0b                	je     c00220db <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00220d0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220d4:	b8 01 00 00 00       	mov    eax,0x1
c00220d9:	eb 3b                	jmp    c0022116 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220df:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220e3:	89 03                	mov    DWORD PTR [ebx],eax
c00220e5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220f0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220f7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220fe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022101:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022108:	8a 06                	mov    al,BYTE PTR [esi]
c002210a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002210d:	31 c0                	xor    eax,eax
c002210f:	eb 05                	jmp    c0022116 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022111:	b8 04 00 00 00       	mov    eax,0x4
c0022116:	83 c4 10             	add    esp,0x10
c0022119:	5b                   	pop    ebx
c002211a:	5e                   	pop    esi
c002211b:	5f                   	pop    edi
c002211c:	c3                   	ret    
c002211d:	90                   	nop

c002211e <ISO9660::exists(char const*)>:
c002211e:	83 ec 28             	sub    esp,0x28
c0022121:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022125:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022129:	52                   	push   edx
c002212a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002212d:	52                   	push   edx
c002212e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022132:	52                   	push   edx
c0022133:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022137:	52                   	push   edx
c0022138:	50                   	push   eax
c0022139:	e8 91 fe ff ff       	call   c0021fcf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002213e:	83 c4 3c             	add    esp,0x3c
c0022141:	c3                   	ret    

c0022142 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022142:	56                   	push   esi
c0022143:	53                   	push   ebx
c0022144:	83 ec 14             	sub    esp,0x14
c0022147:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002214b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002214f:	85 db                	test   ebx,ebx
c0022151:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022155:	0f 94 c2             	sete   dl
c0022158:	85 f6                	test   esi,esi
c002215a:	0f 94 c0             	sete   al
c002215d:	08 c2                	or     dl,al
c002215f:	75 68                	jne    c00221c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022161:	85 c9                	test   ecx,ecx
c0022163:	74 64                	je     c00221c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022165:	83 ec 0c             	sub    esp,0xc
c0022168:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002216b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002216f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022175:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002217c:	50                   	push   eax
c002217d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022180:	50                   	push   eax
c0022181:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022185:	50                   	push   eax
c0022186:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002218a:	50                   	push   eax
c002218b:	51                   	push   ecx
c002218c:	e8 3e fe ff ff       	call   c0021fcf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022191:	83 c4 20             	add    esp,0x20
c0022194:	ba 01 00 00 00       	mov    edx,0x1
c0022199:	84 c0                	test   al,al
c002219b:	74 31                	je     c00221ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002219d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221a8:	89 03                	mov    DWORD PTR [ebx],eax
c00221aa:	ba 00 00 00 00       	mov    edx,0x0
c00221af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221b3:	85 c0                	test   eax,eax
c00221b5:	0f 95 06             	setne  BYTE PTR [esi]
c00221b8:	74 14                	je     c00221ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221ba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00221c0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221c7:	eb 05                	jmp    c00221ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221c9:	ba 04 00 00 00       	mov    edx,0x4
c00221ce:	83 c4 14             	add    esp,0x14
c00221d1:	89 d0                	mov    eax,edx
c00221d3:	5b                   	pop    ebx
c00221d4:	5e                   	pop    esi
c00221d5:	c3                   	ret    

c00221d6 <ISO9660::openDir(char const*, void**)>:
c00221d6:	57                   	push   edi
c00221d7:	56                   	push   esi
c00221d8:	53                   	push   ebx
c00221d9:	83 ec 10             	sub    esp,0x10
c00221dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221e0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221e4:	85 ff                	test   edi,edi
c00221e6:	0f 84 95 00 00 00    	je     c0022281 <ISO9660::openDir(char const*, void**)+0xab>
c00221ec:	85 f6                	test   esi,esi
c00221ee:	0f 84 8d 00 00 00    	je     c0022281 <ISO9660::openDir(char const*, void**)+0xab>
c00221f4:	83 ec 0c             	sub    esp,0xc
c00221f7:	6a 1c                	push   0x1c
c00221f9:	e8 42 d6 fe ff       	call   c000f840 <malloc>
c00221fe:	89 07                	mov    DWORD PTR [edi],eax
c0022200:	89 c3                	mov    ebx,eax
c0022202:	59                   	pop    ecx
c0022203:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022207:	50                   	push   eax
c0022208:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002220b:	50                   	push   eax
c002220c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022210:	50                   	push   eax
c0022211:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022215:	50                   	push   eax
c0022216:	56                   	push   esi
c0022217:	e8 b3 fd ff ff       	call   c0021fcf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002221c:	83 c4 20             	add    esp,0x20
c002221f:	84 c0                	test   al,al
c0022221:	74 07                	je     c002222a <ISO9660::openDir(char const*, void**)+0x54>
c0022223:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022228:	75 21                	jne    c002224b <ISO9660::openDir(char const*, void**)+0x75>
c002222a:	0f b6 c0             	movzx  eax,al
c002222d:	52                   	push   edx
c002222e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022232:	50                   	push   eax
c0022233:	68 95 ca 02 c0       	push   0xc002ca95
c0022238:	e8 f9 0d ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c002223d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022241:	83 c4 10             	add    esp,0x10
c0022244:	b8 01 00 00 00       	mov    eax,0x1
c0022249:	eb 3b                	jmp    c0022286 <ISO9660::openDir(char const*, void**)+0xb0>
c002224b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002224f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022253:	89 03                	mov    DWORD PTR [ebx],eax
c0022255:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002225c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022260:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022267:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002226e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022271:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022278:	8a 06                	mov    al,BYTE PTR [esi]
c002227a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002227d:	31 c0                	xor    eax,eax
c002227f:	eb 05                	jmp    c0022286 <ISO9660::openDir(char const*, void**)+0xb0>
c0022281:	b8 04 00 00 00       	mov    eax,0x4
c0022286:	83 c4 10             	add    esp,0x10
c0022289:	5b                   	pop    ebx
c002228a:	5e                   	pop    esi
c002228b:	5f                   	pop    edi
c002228c:	c3                   	ret    
c002228d:	90                   	nop

c002228e <ISO9660::ISO9660()>:
c002228e:	83 ec 0c             	sub    esp,0xc
c0022291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022295:	83 ec 0c             	sub    esp,0xc
c0022298:	50                   	push   eax
c0022299:	e8 9c 10 ff ff       	call   c001333a <Filesystem::Filesystem()>
c002229e:	83 c4 10             	add    esp,0x10
c00222a1:	ba b8 ca 02 c0       	mov    edx,0xc002cab8
c00222a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222aa:	89 10                	mov    DWORD PTR [eax],edx
c00222ac:	90                   	nop
c00222ad:	83 c4 0c             	add    esp,0xc
c00222b0:	c3                   	ret    
c00222b1:	90                   	nop

c00222b2 <SoundChannel::~SoundChannel()>:
c00222b2:	83 ec 0c             	sub    esp,0xc
c00222b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00222bc:	83 ec 0c             	sub    esp,0xc
c00222bf:	50                   	push   eax
c00222c0:	e8 8b d5 fe ff       	call   c000f850 <free>
c00222c5:	83 c4 10             	add    esp,0x10
c00222c8:	90                   	nop
c00222c9:	83 c4 0c             	add    esp,0xc
c00222cc:	c3                   	ret    
c00222cd:	90                   	nop

c00222ce <SoundChannel::setSpeed(float)>:
c00222ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00222d9:	c3                   	ret    

c00222da <SoundChannel::getSpeed()>:
c00222da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222e1:	c3                   	ret    

c00222e2 <SoundChannel::setVolume(int)>:
c00222e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222e6:	83 f8 64             	cmp    eax,0x64
c00222e9:	7e 05                	jle    c00222f0 <SoundChannel::setVolume(int)+0xe>
c00222eb:	b8 64 00 00 00       	mov    eax,0x64
c00222f0:	85 c0                	test   eax,eax
c00222f2:	79 02                	jns    c00222f6 <SoundChannel::setVolume(int)+0x14>
c00222f4:	31 c0                	xor    eax,eax
c00222f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222fa:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00222fd:	c3                   	ret    

c00222fe <SoundChannel::getVolume()>:
c00222fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022302:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022305:	c3                   	ret    

c0022306 <SoundChannel::pause()>:
c0022306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002230a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002230e:	c3                   	ret    
c002230f:	90                   	nop

c0022310 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022310:	83 ec 1c             	sub    esp,0x1c
c0022313:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022317:	e8 ea ff ff ff       	call   c0022306 <SoundChannel::pause()>
c002231c:	83 c4 04             	add    esp,0x4
c002231f:	6a 50                	push   0x50
c0022321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022325:	e8 b8 ff ff ff       	call   c00222e2 <SoundChannel::setVolume(int)>
c002232a:	83 c4 08             	add    esp,0x8
c002232d:	a1 30 cb 02 c0       	mov    eax,ds:0xc002cb30
c0022332:	50                   	push   eax
c0022333:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022337:	e8 92 ff ff ff       	call   c00222ce <SoundChannel::setSpeed(float)>
c002233c:	83 c4 08             	add    esp,0x8
c002233f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022343:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022347:	89 10                	mov    DWORD PTR [eax],edx
c0022349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002234d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022351:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022358:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002235c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002235f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022364:	75 23                	jne    c0022389 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002236a:	8b 10                	mov    edx,DWORD PTR [eax]
c002236c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022370:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022373:	0f af c2             	imul   eax,edx
c0022376:	85 c0                	test   eax,eax
c0022378:	79 03                	jns    c002237d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002237a:	83 c0 03             	add    eax,0x3
c002237d:	c1 f8 02             	sar    eax,0x2
c0022380:	05 a0 0f 00 00       	add    eax,0xfa0
c0022385:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002238d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022391:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022398:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002239f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223a3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00223aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ae:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223b1:	c1 e0 02             	shl    eax,0x2
c00223b4:	83 ec 0c             	sub    esp,0xc
c00223b7:	50                   	push   eax
c00223b8:	e8 83 d4 fe ff       	call   c000f840 <malloc>
c00223bd:	83 c4 10             	add    esp,0x10
c00223c0:	89 c2                	mov    edx,eax
c00223c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223c6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00223c9:	83 ec 04             	sub    esp,0x4
c00223cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00223d0:	50                   	push   eax
c00223d1:	6a 01                	push   0x1
c00223d3:	6a 04                	push   0x4
c00223d5:	e8 c5 67 fe ff       	call   c0008b9f <src_new>
c00223da:	83 c4 10             	add    esp,0x10
c00223dd:	89 c2                	mov    edx,eax
c00223df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00223e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ea:	85 c0                	test   eax,eax
c00223ec:	74 10                	je     c00223fe <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00223ee:	83 ec 0c             	sub    esp,0xc
c00223f1:	68 14 cb 02 c0       	push   0xc002cb14
c00223f6:	e8 ec 82 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c00223fb:	83 c4 10             	add    esp,0x10
c00223fe:	a0 00 29 03 c0       	mov    al,ds:0xc0032900
c0022403:	83 f0 01             	xor    eax,0x1
c0022406:	84 c0                	test   al,al
c0022408:	74 57                	je     c0022461 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002240a:	a1 34 cb 02 c0       	mov    eax,ds:0xc002cb34
c002240f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022413:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002241b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022423:	7f 35                	jg     c002245a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022425:	83 ec 0c             	sub    esp,0xc
c0022428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002242c:	e8 96 4f 00 00       	call   c00273c7 <__floatsisf>
c0022431:	83 c4 10             	add    esp,0x10
c0022434:	8b 15 34 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb34
c002243a:	83 ec 08             	sub    esp,0x8
c002243d:	52                   	push   edx
c002243e:	50                   	push   eax
c002243f:	e8 95 4b 00 00       	call   c0026fd9 <__mulsf3>
c0022444:	83 c4 10             	add    esp,0x10
c0022447:	89 c2                	mov    edx,eax
c0022449:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002244d:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0022454:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022458:	eb c1                	jmp    c002241b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002245a:	c6 05 00 29 03 c0 01 	mov    BYTE PTR ds:0xc0032900,0x1
c0022461:	90                   	nop
c0022462:	83 c4 1c             	add    esp,0x1c
c0022465:	c3                   	ret    

c0022466 <SoundChannel::play()>:
c0022466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002246a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002246e:	c3                   	ret    
c002246f:	90                   	nop

c0022470 <SoundChannel::paused()>:
c0022470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022474:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022477:	c3                   	ret    

c0022478 <SoundChannel::getSampleRate()>:
c0022478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002247c:	8b 00                	mov    eax,DWORD PTR [eax]
c002247e:	c3                   	ret    
c002247f:	90                   	nop

c0022480 <SoundChannel::getBits()>:
c0022480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022487:	c3                   	ret    

c0022488 <SoundChannel::getBufferUsed()>:
c0022488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002248c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002248f:	c3                   	ret    

c0022490 <SoundChannel::getBufferSize()>:
c0022490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022494:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022497:	c3                   	ret    

c0022498 <SoundChannel::unbuffer(float*, int, int)>:
c0022498:	56                   	push   esi
c0022499:	53                   	push   ebx
c002249a:	83 ec 40             	sub    esp,0x40
c002249d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00224a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00224a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224a8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00224ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00224af:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00224b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00224b7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00224bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00224bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00224c3:	e8 ff 4e 00 00       	call   c00273c7 <__floatsisf>
c00224c8:	5a                   	pop    edx
c00224c9:	89 c6                	mov    esi,eax
c00224cb:	ff 33                	push   DWORD PTR [ebx]
c00224cd:	e8 f5 4e 00 00       	call   c00273c7 <__floatsisf>
c00224d2:	59                   	pop    ecx
c00224d3:	5a                   	pop    edx
c00224d4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00224d7:	50                   	push   eax
c00224d8:	e8 fc 4a 00 00       	call   c0026fd9 <__mulsf3>
c00224dd:	59                   	pop    ecx
c00224de:	5a                   	pop    edx
c00224df:	50                   	push   eax
c00224e0:	56                   	push   esi
c00224e1:	e8 b6 4c 00 00       	call   c002719c <__divsf3>
c00224e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00224e9:	e8 a9 61 00 00       	call   c0028697 <__extendsfdf2>
c00224ee:	59                   	pop    ecx
c00224ef:	5e                   	pop    esi
c00224f0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224f4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00224f8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022500:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022504:	50                   	push   eax
c0022505:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022508:	e8 87 62 fe ff       	call   c0008794 <src_process>
c002250d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022511:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022514:	83 c4 0c             	add    esp,0xc
c0022517:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002251a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002251d:	29 d0                	sub    eax,edx
c002251f:	c1 e0 02             	shl    eax,0x2
c0022522:	50                   	push   eax
c0022523:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022526:	50                   	push   eax
c0022527:	51                   	push   ecx
c0022528:	e8 4f e1 fd ff       	call   c000067c <memmove>
c002252d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022531:	83 c4 44             	add    esp,0x44
c0022534:	5b                   	pop    ebx
c0022535:	5e                   	pop    esi
c0022536:	c3                   	ret    
c0022537:	90                   	nop

c0022538 <SoundChannel::buffer8(unsigned char*, int)>:
c0022538:	55                   	push   ebp
c0022539:	57                   	push   edi
c002253a:	56                   	push   esi
c002253b:	53                   	push   ebx
c002253c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022540:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022544:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022547:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002254b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002254e:	74 7a                	je     c00225ca <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022550:	85 ff                	test   edi,edi
c0022552:	7e 76                	jle    c00225ca <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022554:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022558:	8d 70 01             	lea    esi,[eax+0x1]
c002255b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002255e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022561:	8b 1c 9d 00 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb00]
c0022568:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002256b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002256e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022571:	74 5e                	je     c00225d1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022573:	83 ff 01             	cmp    edi,0x1
c0022576:	74 4b                	je     c00225c3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022578:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002257c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002257f:	8d 70 01             	lea    esi,[eax+0x1]
c0022582:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022585:	8b 1c 9d 00 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb00]
c002258c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002258f:	b8 02 00 00 00       	mov    eax,0x2
c0022594:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022597:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002259a:	75 23                	jne    c00225bf <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002259c:	eb 27                	jmp    c00225c5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002259e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00225a3:	8d 71 01             	lea    esi,[ecx+0x1]
c00225a6:	40                   	inc    eax
c00225a7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00225aa:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00225ad:	8b 1c 9d 00 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb00]
c00225b4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00225b7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00225ba:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00225bd:	74 06                	je     c00225c5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00225bf:	39 c7                	cmp    edi,eax
c00225c1:	75 db                	jne    c002259e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00225c3:	89 f8                	mov    eax,edi
c00225c5:	5b                   	pop    ebx
c00225c6:	5e                   	pop    esi
c00225c7:	5f                   	pop    edi
c00225c8:	5d                   	pop    ebp
c00225c9:	c3                   	ret    
c00225ca:	5b                   	pop    ebx
c00225cb:	31 c0                	xor    eax,eax
c00225cd:	5e                   	pop    esi
c00225ce:	5f                   	pop    edi
c00225cf:	5d                   	pop    ebp
c00225d0:	c3                   	ret    
c00225d1:	b8 01 00 00 00       	mov    eax,0x1
c00225d6:	eb ed                	jmp    c00225c5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00225d8 <SoundDevice::SoundDevice(char const*)>:
c00225d8:	83 ec 1c             	sub    esp,0x1c
c00225db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225df:	83 ec 08             	sub    esp,0x8
c00225e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225e6:	50                   	push   eax
c00225e7:	e8 60 20 ff ff       	call   c001464c <Device::Device(char const*)>
c00225ec:	83 c4 10             	add    esp,0x10
c00225ef:	ba 40 cb 02 c0       	mov    edx,0xc002cb40
c00225f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f8:	89 10                	mov    DWORD PTR [eax],edx
c00225fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225fe:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002260c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022616:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002261e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022623:	7f 19                	jg     c002263e <SoundDevice::SoundDevice(char const*)+0x66>
c0022625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022629:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002262d:	83 c2 54             	add    edx,0x54
c0022630:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022638:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002263c:	eb e0                	jmp    c002261e <SoundDevice::SoundDevice(char const*)+0x46>
c002263e:	90                   	nop
c002263f:	83 c4 1c             	add    esp,0x1c
c0022642:	c3                   	ret    
c0022643:	90                   	nop

c0022644 <SoundDevice::~SoundDevice()>:
c0022644:	53                   	push   ebx
c0022645:	83 ec 18             	sub    esp,0x18
c0022648:	ba 40 cb 02 c0       	mov    edx,0xc002cb40
c002264d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022651:	89 10                	mov    DWORD PTR [eax],edx
c0022653:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002265b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022660:	7f 46                	jg     c00226a8 <SoundDevice::~SoundDevice()+0x64>
c0022662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022666:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002266a:	83 c2 54             	add    edx,0x54
c002266d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022671:	85 c0                	test   eax,eax
c0022673:	74 2d                	je     c00226a2 <SoundDevice::~SoundDevice()+0x5e>
c0022675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022679:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002267d:	83 c2 54             	add    edx,0x54
c0022680:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022684:	85 db                	test   ebx,ebx
c0022686:	74 1a                	je     c00226a2 <SoundDevice::~SoundDevice()+0x5e>
c0022688:	83 ec 0c             	sub    esp,0xc
c002268b:	53                   	push   ebx
c002268c:	e8 21 fc ff ff       	call   c00222b2 <SoundChannel::~SoundChannel()>
c0022691:	83 c4 10             	add    esp,0x10
c0022694:	83 ec 08             	sub    esp,0x8
c0022697:	6a 2c                	push   0x2c
c0022699:	53                   	push   ebx
c002269a:	e8 b7 08 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c002269f:	83 c4 10             	add    esp,0x10
c00226a2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00226a6:	eb b3                	jmp    c002265b <SoundDevice::~SoundDevice()+0x17>
c00226a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226ac:	83 ec 0c             	sub    esp,0xc
c00226af:	50                   	push   eax
c00226b0:	e8 79 1c ff ff       	call   c001432e <Device::~Device()>
c00226b5:	83 c4 10             	add    esp,0x10
c00226b8:	90                   	nop
c00226b9:	83 c4 18             	add    esp,0x18
c00226bc:	5b                   	pop    ebx
c00226bd:	c3                   	ret    

c00226be <SoundDevice::~SoundDevice()>:
c00226be:	83 ec 0c             	sub    esp,0xc
c00226c1:	83 ec 0c             	sub    esp,0xc
c00226c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226c8:	e8 77 ff ff ff       	call   c0022644 <SoundDevice::~SoundDevice()>
c00226cd:	83 c4 10             	add    esp,0x10
c00226d0:	83 ec 08             	sub    esp,0x8
c00226d3:	68 e4 01 00 00       	push   0x1e4
c00226d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226dc:	e8 75 08 ff ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c00226e1:	83 c4 10             	add    esp,0x10
c00226e4:	83 c4 0c             	add    esp,0xc
c00226e7:	c3                   	ret    

c00226e8 <SoundDevice::getFreeChannelNum()>:
c00226e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226ec:	31 c0                	xor    eax,eax
c00226ee:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00226f6:	74 09                	je     c0022701 <SoundDevice::getFreeChannelNum()+0x19>
c00226f8:	40                   	inc    eax
c00226f9:	83 f8 20             	cmp    eax,0x20
c00226fc:	75 f0                	jne    c00226ee <SoundDevice::getFreeChannelNum()+0x6>
c00226fe:	83 c8 ff             	or     eax,0xffffffff
c0022701:	c3                   	ret    

c0022702 <SoundDevice::addChannel(SoundChannel*)>:
c0022702:	56                   	push   esi
c0022703:	53                   	push   ebx
c0022704:	51                   	push   ecx
c0022705:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022709:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002270d:	53                   	push   ebx
c002270e:	e8 d5 ff ff ff       	call   c00226e8 <SoundDevice::getFreeChannelNum()>
c0022713:	5a                   	pop    edx
c0022714:	83 f8 ff             	cmp    eax,0xffffffff
c0022717:	74 51                	je     c002276a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022719:	85 f6                	test   esi,esi
c002271b:	74 4d                	je     c002276a <SoundDevice::addChannel(SoundChannel*)+0x68>
c002271d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022724:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002272b:	75 30                	jne    c002275d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002272d:	83 ec 0c             	sub    esp,0xc
c0022730:	56                   	push   esi
c0022731:	e8 42 fd ff ff       	call   c0022478 <SoundChannel::getSampleRate()>
c0022736:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002273c:	89 34 24             	mov    DWORD PTR [esp],esi
c002273f:	e8 3c fd ff ff       	call   c0022480 <SoundChannel::getBits()>
c0022744:	83 c4 0c             	add    esp,0xc
c0022747:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002274d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002274f:	50                   	push   eax
c0022750:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022756:	53                   	push   ebx
c0022757:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002275a:	83 c4 10             	add    esp,0x10
c002275d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022763:	b8 01 00 00 00       	mov    eax,0x1
c0022768:	eb 03                	jmp    c002276d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002276a:	83 c8 ff             	or     eax,0xffffffff
c002276d:	5a                   	pop    edx
c002276e:	5b                   	pop    ebx
c002276f:	5e                   	pop    esi
c0022770:	c3                   	ret    
c0022771:	90                   	nop

c0022772 <SoundDevice::removeChannel(int)>:
c0022772:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002277a:	83 fa 1f             	cmp    edx,0x1f
c002277d:	77 23                	ja     c00227a2 <SoundDevice::removeChannel(int)+0x30>
c002277f:	8d 14 90             	lea    edx,[eax+edx*4]
c0022782:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022789:	74 17                	je     c00227a2 <SoundDevice::removeChannel(int)+0x30>
c002278b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022795:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002279b:	75 05                	jne    c00227a2 <SoundDevice::removeChannel(int)+0x30>
c002279d:	8b 00                	mov    eax,DWORD PTR [eax]
c002279f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00227a2:	c3                   	ret    
c00227a3:	90                   	nop

c00227a4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00227a4:	57                   	push   edi
c00227a5:	56                   	push   esi
c00227a6:	53                   	push   ebx
c00227a7:	31 db                	xor    ebx,ebx
c00227a9:	83 ec 10             	sub    esp,0x10
c00227ac:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00227b0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00227b4:	0f 8d cb 00 00 00    	jge    c0022885 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00227ba:	83 ec 0c             	sub    esp,0xc
c00227bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227c1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00227c4:	e8 ce 5e 00 00       	call   c0028697 <__extendsfdf2>
c00227c9:	83 c4 10             	add    esp,0x10
c00227cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227d4:	68 00 00 f0 3f       	push   0x3ff00000
c00227d9:	6a 00                	push   0x0
c00227db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227e3:	e8 3b 4e 00 00       	call   c0027623 <__adddf3>
c00227e8:	83 c4 10             	add    esp,0x10
c00227eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227f3:	68 00 00 e0 3f       	push   0x3fe00000
c00227f8:	6a 00                	push   0x0
c00227fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022802:	e8 99 54 00 00       	call   c0027ca0 <__muldf3>
c0022807:	83 c4 10             	add    esp,0x10
c002280a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002280e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022812:	68 00 00 60 40       	push   0x40600000
c0022817:	6a 00                	push   0x0
c0022819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002281d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022821:	e8 7a 54 00 00       	call   c0027ca0 <__muldf3>
c0022826:	59                   	pop    ecx
c0022827:	5f                   	pop    edi
c0022828:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002282c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022838:	e8 36 5d 00 00       	call   c0028573 <__truncdfsf2>
c002283d:	5a                   	pop    edx
c002283e:	89 c7                	mov    edi,eax
c0022840:	59                   	pop    ecx
c0022841:	68 00 00 fe 42       	push   0x42fe0000
c0022846:	50                   	push   eax
c0022847:	e8 d1 4d 00 00       	call   c002761d <__gesf2>
c002284c:	83 c4 10             	add    esp,0x10
c002284f:	85 c0                	test   eax,eax
c0022851:	78 06                	js     c0022859 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022853:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022857:	eb 26                	jmp    c002287f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022859:	50                   	push   eax
c002285a:	50                   	push   eax
c002285b:	6a 00                	push   0x0
c002285d:	57                   	push   edi
c002285e:	e8 be 4d 00 00       	call   c0027621 <__lesf2>
c0022863:	83 c4 10             	add    esp,0x10
c0022866:	85 c0                	test   eax,eax
c0022868:	7f 06                	jg     c0022870 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002286a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002286e:	eb 0f                	jmp    c002287f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022870:	83 ec 0c             	sub    esp,0xc
c0022873:	57                   	push   edi
c0022874:	e8 b3 5e 00 00       	call   c002872c <lrintf>
c0022879:	83 c4 10             	add    esp,0x10
c002287c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002287f:	43                   	inc    ebx
c0022880:	e9 2b ff ff ff       	jmp    c00227b0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022885:	83 c4 10             	add    esp,0x10
c0022888:	5b                   	pop    ebx
c0022889:	5e                   	pop    esi
c002288a:	5f                   	pop    edi
c002288b:	c3                   	ret    

c002288c <SoundDevice::getAudio(int, float*, float*)>:
c002288c:	55                   	push   ebp
c002288d:	57                   	push   edi
c002288e:	56                   	push   esi
c002288f:	53                   	push   ebx
c0022890:	31 db                	xor    ebx,ebx
c0022892:	83 ec 20             	sub    esp,0x20
c0022895:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022899:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002289d:	c1 e0 02             	shl    eax,0x2
c00228a0:	50                   	push   eax
c00228a1:	6a 00                	push   0x0
c00228a3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00228a7:	e8 cc de fd ff       	call   c0000778 <memset>
c00228ac:	83 c4 10             	add    esp,0x10
c00228af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00228b3:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00228ba:	85 c0                	test   eax,eax
c00228bc:	0f 84 d7 00 00 00    	je     c0022999 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228c2:	83 ec 0c             	sub    esp,0xc
c00228c5:	50                   	push   eax
c00228c6:	e8 a5 fb ff ff       	call   c0022470 <SoundChannel::paused()>
c00228cb:	83 c4 10             	add    esp,0x10
c00228ce:	84 c0                	test   al,al
c00228d0:	0f 85 c3 00 00 00    	jne    c0022999 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228d6:	83 ec 0c             	sub    esp,0xc
c00228d9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228e0:	e8 19 fa ff ff       	call   c00222fe <SoundChannel::getVolume()>
c00228e5:	83 c4 10             	add    esp,0x10
c00228e8:	85 c0                	test   eax,eax
c00228ea:	0f 84 a9 00 00 00    	je     c0022999 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228f0:	83 ec 0c             	sub    esp,0xc
c00228f3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228fa:	e8 ff f9 ff ff       	call   c00222fe <SoundChannel::getVolume()>
c00228ff:	83 ec 0c             	sub    esp,0xc
c0022902:	50                   	push   eax
c0022903:	e8 bf 4a 00 00       	call   c00273c7 <__floatsisf>
c0022908:	59                   	pop    ecx
c0022909:	5d                   	pop    ebp
c002290a:	31 ed                	xor    ebp,ebp
c002290c:	68 00 00 c8 42       	push   0x42c80000
c0022911:	50                   	push   eax
c0022912:	e8 85 48 00 00       	call   c002719c <__divsf3>
c0022917:	83 c4 10             	add    esp,0x10
c002291a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002291e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022922:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022928:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002292c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022933:	e8 60 fb ff ff       	call   c0022498 <SoundChannel::unbuffer(float*, int, int)>
c0022938:	83 c4 20             	add    esp,0x20
c002293b:	89 c1                	mov    ecx,eax
c002293d:	39 cd                	cmp    ebp,ecx
c002293f:	7d 52                	jge    c0022993 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022941:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022945:	50                   	push   eax
c0022946:	50                   	push   eax
c0022947:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002294b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002294e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022952:	e8 82 46 00 00       	call   c0026fd9 <__mulsf3>
c0022957:	5a                   	pop    edx
c0022958:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002295c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022962:	e8 60 4a 00 00       	call   c00273c7 <__floatsisf>
c0022967:	59                   	pop    ecx
c0022968:	5a                   	pop    edx
c0022969:	50                   	push   eax
c002296a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002296e:	e8 29 48 00 00       	call   c002719c <__divsf3>
c0022973:	59                   	pop    ecx
c0022974:	5a                   	pop    edx
c0022975:	50                   	push   eax
c0022976:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002297a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002297d:	e8 34 43 00 00       	call   c0026cb6 <__addsf3>
c0022982:	83 c4 10             	add    esp,0x10
c0022985:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022989:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002298d:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022990:	45                   	inc    ebp
c0022991:	eb aa                	jmp    c002293d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022993:	39 cf                	cmp    edi,ecx
c0022995:	7e 02                	jle    c0022999 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022997:	89 cf                	mov    edi,ecx
c0022999:	43                   	inc    ebx
c002299a:	83 fb 20             	cmp    ebx,0x20
c002299d:	0f 85 10 ff ff ff    	jne    c00228b3 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00229a3:	83 c4 1c             	add    esp,0x1c
c00229a6:	89 f8                	mov    eax,edi
c00229a8:	5b                   	pop    ebx
c00229a9:	5e                   	pop    esi
c00229aa:	5f                   	pop    edi
c00229ab:	5d                   	pop    ebp
c00229ac:	c3                   	ret    
c00229ad:	90                   	nop

c00229ae <PCI::open(int, int, void*)>:
c00229ae:	83 ec 18             	sub    esp,0x18
c00229b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00229b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00229b7:	50                   	push   eax
c00229b8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00229bb:	31 c0                	xor    eax,eax
c00229bd:	83 c4 1c             	add    esp,0x1c
c00229c0:	c3                   	ret    
c00229c1:	90                   	nop

c00229c2 <PCI::close(int, int, void*)>:
c00229c2:	31 c0                	xor    eax,eax
c00229c4:	c3                   	ret    
c00229c5:	90                   	nop

c00229c6 <PCI::PCI()>:
c00229c6:	83 ec 0c             	sub    esp,0xc
c00229c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cd:	83 ec 08             	sub    esp,0x8
c00229d0:	68 70 cb 02 c0       	push   0xc002cb70
c00229d5:	50                   	push   eax
c00229d6:	e8 f5 12 ff ff       	call   c0013cd0 <Bus::Bus(char const*)>
c00229db:	83 c4 10             	add    esp,0x10
c00229de:	ba dc cb 02 c0       	mov    edx,0xc002cbdc
c00229e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e7:	89 10                	mov    DWORD PTR [eax],edx
c00229e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229f3:	0f b6 d0             	movzx  edx,al
c00229f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229fa:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a05:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a0b:	0f b6 d0             	movzx  edx,al
c0022a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a12:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a1b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a21:	8d 50 01             	lea    edx,[eax+0x1]
c0022a24:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a28:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a2e:	0f b6 d0             	movzx  edx,al
c0022a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a35:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a39:	83 c9 c0             	or     ecx,0xffffffc0
c0022a3c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a40:	90                   	nop
c0022a41:	83 c4 0c             	add    esp,0xc
c0022a44:	c3                   	ret    
c0022a45:	90                   	nop

c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a46:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a4f:	89 ca                	mov    edx,ecx
c0022a51:	c1 e0 10             	shl    eax,0x10
c0022a54:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a5a:	09 d0                	or     eax,edx
c0022a5c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a61:	c1 e2 08             	shl    edx,0x8
c0022a64:	09 d0                	or     eax,edx
c0022a66:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a6b:	c1 e2 0b             	shl    edx,0xb
c0022a6e:	09 d0                	or     eax,edx
c0022a70:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a75:	0d 00 00 00 80       	or     eax,0x80000000
c0022a7a:	ef                   	out    dx,eax
c0022a7b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a80:	ed                   	in     eax,dx
c0022a81:	83 e1 02             	and    ecx,0x2
c0022a84:	0f b6 c9             	movzx  ecx,cl
c0022a87:	c1 e1 03             	shl    ecx,0x3
c0022a8a:	d3 e8                	shr    eax,cl
c0022a8c:	c3                   	ret    
c0022a8d:	90                   	nop

c0022a8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a8e:	6a 00                	push   0x0
c0022a90:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a95:	50                   	push   eax
c0022a96:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9b:	50                   	push   eax
c0022a9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa1:	50                   	push   eax
c0022aa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aa6:	e8 9b ff ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aab:	83 c4 14             	add    esp,0x14
c0022aae:	c3                   	ret    
c0022aaf:	90                   	nop

c0022ab0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022ab0:	6a 0e                	push   0xe
c0022ab2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab7:	50                   	push   eax
c0022ab8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abd:	50                   	push   eax
c0022abe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac3:	50                   	push   eax
c0022ac4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac8:	e8 79 ff ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022acd:	83 c4 14             	add    esp,0x14
c0022ad0:	0f b6 c0             	movzx  eax,al
c0022ad3:	c3                   	ret    

c0022ad4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022ad4:	55                   	push   ebp
c0022ad5:	57                   	push   edi
c0022ad6:	56                   	push   esi
c0022ad7:	53                   	push   ebx
c0022ad8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022add:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022ae2:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022ae7:	6a 0a                	push   0xa
c0022ae9:	56                   	push   esi
c0022aea:	55                   	push   ebp
c0022aeb:	57                   	push   edi
c0022aec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022af0:	e8 51 ff ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af5:	6a 0a                	push   0xa
c0022af7:	89 c3                	mov    ebx,eax
c0022af9:	56                   	push   esi
c0022afa:	0f b6 db             	movzx  ebx,bl
c0022afd:	55                   	push   ebp
c0022afe:	57                   	push   edi
c0022aff:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022b03:	e8 3e ff ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b08:	83 c4 28             	add    esp,0x28
c0022b0b:	25 00 ff 00 00       	and    eax,0xff00
c0022b10:	09 d8                	or     eax,ebx
c0022b12:	5b                   	pop    ebx
c0022b13:	5e                   	pop    esi
c0022b14:	5f                   	pop    edi
c0022b15:	5d                   	pop    ebp
c0022b16:	c3                   	ret    
c0022b17:	90                   	nop

c0022b18 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022b18:	6a 08                	push   0x8
c0022b1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1f:	50                   	push   eax
c0022b20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b25:	50                   	push   eax
c0022b26:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b2b:	50                   	push   eax
c0022b2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b30:	e8 11 ff ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b35:	83 c4 14             	add    esp,0x14
c0022b38:	0f b6 c4             	movzx  eax,ah
c0022b3b:	c3                   	ret    

c0022b3c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b3c:	6a 08                	push   0x8
c0022b3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b43:	50                   	push   eax
c0022b44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b49:	50                   	push   eax
c0022b4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b4f:	50                   	push   eax
c0022b50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b54:	e8 ed fe ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b59:	83 c4 14             	add    esp,0x14
c0022b5c:	c3                   	ret    
c0022b5d:	90                   	nop

c0022b5e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b5e:	6a 3c                	push   0x3c
c0022b60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b65:	50                   	push   eax
c0022b66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b6b:	50                   	push   eax
c0022b6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b71:	50                   	push   eax
c0022b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b76:	e8 cb fe ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b7b:	83 c4 14             	add    esp,0x14
c0022b7e:	c3                   	ret    
c0022b7f:	90                   	nop

c0022b80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b80:	6a 18                	push   0x18
c0022b82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b87:	50                   	push   eax
c0022b88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b8d:	50                   	push   eax
c0022b8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b93:	50                   	push   eax
c0022b94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b98:	e8 a9 fe ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b9d:	83 c4 14             	add    esp,0x14
c0022ba0:	0f b6 c4             	movzx  eax,ah
c0022ba3:	c3                   	ret    

c0022ba4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ba4:	55                   	push   ebp
c0022ba5:	57                   	push   edi
c0022ba6:	56                   	push   esi
c0022ba7:	53                   	push   ebx
c0022ba8:	50                   	push   eax
c0022ba9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022bad:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022bb2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022bb7:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022bbc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022bc3:	8d 43 12             	lea    eax,[ebx+0x12]
c0022bc6:	83 c3 10             	add    ebx,0x10
c0022bc9:	0f b6 c0             	movzx  eax,al
c0022bcc:	0f b6 db             	movzx  ebx,bl
c0022bcf:	50                   	push   eax
c0022bd0:	51                   	push   ecx
c0022bd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022bd5:	57                   	push   edi
c0022bd6:	55                   	push   ebp
c0022bd7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022bdb:	e8 66 fe ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022be0:	53                   	push   ebx
c0022be1:	89 c6                	mov    esi,eax
c0022be3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022be7:	c1 e6 10             	shl    esi,0x10
c0022bea:	51                   	push   ecx
c0022beb:	57                   	push   edi
c0022bec:	55                   	push   ebp
c0022bed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022bf1:	e8 50 fe ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bf6:	83 c4 2c             	add    esp,0x2c
c0022bf9:	0f b7 c0             	movzx  eax,ax
c0022bfc:	5b                   	pop    ebx
c0022bfd:	09 f0                	or     eax,esi
c0022bff:	5e                   	pop    esi
c0022c00:	5f                   	pop    edi
c0022c01:	5d                   	pop    ebp
c0022c02:	c3                   	ret    
c0022c03:	90                   	nop

c0022c04 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022c04:	53                   	push   ebx
c0022c05:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c0a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022c0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c13:	c1 e1 10             	shl    ecx,0x10
c0022c16:	25 fc 00 00 00       	and    eax,0xfc
c0022c1b:	09 c1                	or     ecx,eax
c0022c1d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c22:	c1 e0 08             	shl    eax,0x8
c0022c25:	09 c1                	or     ecx,eax
c0022c27:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022c2c:	c1 e0 0b             	shl    eax,0xb
c0022c2f:	09 c1                	or     ecx,eax
c0022c31:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c37:	89 c8                	mov    eax,ecx
c0022c39:	ef                   	out    dx,eax
c0022c3a:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c3f:	ed                   	in     eax,dx
c0022c40:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c45:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c4a:	74 0a                	je     c0022c56 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c4c:	0f b7 d8             	movzx  ebx,ax
c0022c4f:	89 d0                	mov    eax,edx
c0022c51:	c1 e0 10             	shl    eax,0x10
c0022c54:	eb 05                	jmp    c0022c5b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c56:	66 31 c0             	xor    ax,ax
c0022c59:	89 d3                	mov    ebx,edx
c0022c5b:	09 c3                	or     ebx,eax
c0022c5d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c62:	89 c8                	mov    eax,ecx
c0022c64:	ef                   	out    dx,eax
c0022c65:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c6a:	89 d8                	mov    eax,ebx
c0022c6c:	ef                   	out    dx,eax
c0022c6d:	5b                   	pop    ebx
c0022c6e:	c3                   	ret    
c0022c6f:	90                   	nop

c0022c70 <PCI::checkBus(unsigned char)>:
c0022c70:	56                   	push   esi
c0022c71:	53                   	push   ebx
c0022c72:	31 db                	xor    ebx,ebx
c0022c74:	51                   	push   ecx
c0022c75:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c7a:	52                   	push   edx
c0022c7b:	53                   	push   ebx
c0022c7c:	43                   	inc    ebx
c0022c7d:	56                   	push   esi
c0022c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c82:	e8 2b 03 00 00       	call   c0022fb2 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c87:	83 c4 10             	add    esp,0x10
c0022c8a:	83 fb 20             	cmp    ebx,0x20
c0022c8d:	75 eb                	jne    c0022c7a <PCI::checkBus(unsigned char)+0xa>
c0022c8f:	58                   	pop    eax
c0022c90:	5b                   	pop    ebx
c0022c91:	5e                   	pop    esi
c0022c92:	c3                   	ret    
c0022c93:	90                   	nop

c0022c94 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c94:	55                   	push   ebp
c0022c95:	57                   	push   edi
c0022c96:	56                   	push   esi
c0022c97:	53                   	push   ebx
c0022c98:	83 ec 1c             	sub    esp,0x1c
c0022c9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c9f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022ca5:	0f 84 52 01 00 00    	je     c0022dfd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cab:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022caf:	66 81 f9 06 04       	cmp    cx,0x406
c0022cb4:	75 2c                	jne    c0022ce2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022cb6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022cbb:	50                   	push   eax
c0022cbc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022cc1:	50                   	push   eax
c0022cc2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022cc7:	50                   	push   eax
c0022cc8:	56                   	push   esi
c0022cc9:	e8 b2 fe ff ff       	call   c0022b80 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022cce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022cd2:	0f b6 c0             	movzx  eax,al
c0022cd5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022cd9:	83 c4 2c             	add    esp,0x2c
c0022cdc:	5b                   	pop    ebx
c0022cdd:	5e                   	pop    esi
c0022cde:	5f                   	pop    edi
c0022cdf:	5d                   	pop    ebp
c0022ce0:	eb 8e                	jmp    c0022c70 <PCI::checkBus(unsigned char)>
c0022ce2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ce6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022cec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022cf0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022cf4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cf8:	88 d3                	mov    bl,dl
c0022cfa:	85 c0                	test   eax,eax
c0022cfc:	74 33                	je     c0022d31 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cfe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022d01:	85 d2                	test   edx,edx
c0022d03:	74 28                	je     c0022d2d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d05:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022d0b:	31 ef                	xor    edi,ebp
c0022d0d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022d13:	75 18                	jne    c0022d2d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d15:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d19:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022d1f:	75 0c                	jne    c0022d2d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d21:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022d27:	0f 84 d0 00 00 00    	je     c0022dfd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d2f:	eb c9                	jmp    c0022cfa <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d31:	66 81 f9 01 06       	cmp    cx,0x601
c0022d36:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d3a:	75 19                	jne    c0022d55 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d3c:	83 ec 0c             	sub    esp,0xc
c0022d3f:	68 64 01 00 00       	push   0x164
c0022d44:	e8 f7 ca fe ff       	call   c000f840 <malloc>
c0022d49:	89 c5                	mov    ebp,eax
c0022d4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d4e:	e8 95 0f 00 00       	call   c0023ce8 <SATABus::SATABus()>
c0022d53:	eb 1e                	jmp    c0022d73 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d55:	66 81 f9 01 01       	cmp    cx,0x101
c0022d5a:	75 60                	jne    c0022dbc <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d5c:	83 ec 0c             	sub    esp,0xc
c0022d5f:	68 70 02 00 00       	push   0x270
c0022d64:	e8 d7 ca fe ff       	call   c000f840 <malloc>
c0022d69:	89 c5                	mov    ebp,eax
c0022d6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d6e:	e8 03 03 00 00       	call   c0023076 <IDE::IDE()>
c0022d73:	58                   	pop    eax
c0022d74:	5a                   	pop    edx
c0022d75:	55                   	push   ebp
c0022d76:	56                   	push   esi
c0022d77:	e8 e0 16 ff ff       	call   c001445c <Device::addChild(Device*)>
c0022d7c:	83 ec 1c             	sub    esp,0x1c
c0022d7f:	b9 09 00 00 00       	mov    ecx,0x9
c0022d84:	fc                   	cld    
c0022d85:	89 e7                	mov    edi,esp
c0022d87:	89 de                	mov    esi,ebx
c0022d89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d8b:	55                   	push   ebp
c0022d8c:	e8 d5 15 ff ff       	call   c0014366 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d94:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d98:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022da0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022da8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022db0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022db3:	83 c4 4c             	add    esp,0x4c
c0022db6:	5b                   	pop    ebx
c0022db7:	5e                   	pop    esi
c0022db8:	5f                   	pop    edi
c0022db9:	5d                   	pop    ebp
c0022dba:	ff e0                	jmp    eax
c0022dbc:	83 ec 0c             	sub    esp,0xc
c0022dbf:	68 58 01 00 00       	push   0x158
c0022dc4:	e8 77 ca fe ff       	call   c000f840 <malloc>
c0022dc9:	89 c5                	mov    ebp,eax
c0022dcb:	58                   	pop    eax
c0022dcc:	5a                   	pop    edx
c0022dcd:	68 78 cb 02 c0       	push   0xc002cb78
c0022dd2:	55                   	push   ebp
c0022dd3:	e8 7a 19 ff ff       	call   c0014752 <DriverlessDevice::DriverlessDevice(char const*)>
c0022dd8:	59                   	pop    ecx
c0022dd9:	5f                   	pop    edi
c0022dda:	55                   	push   ebp
c0022ddb:	56                   	push   esi
c0022ddc:	e8 7b 16 ff ff       	call   c001445c <Device::addChild(Device*)>
c0022de1:	b9 09 00 00 00       	mov    ecx,0x9
c0022de6:	fc                   	cld    
c0022de7:	89 df                	mov    edi,ebx
c0022de9:	89 de                	mov    esi,ebx
c0022deb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ded:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022df1:	83 c4 2c             	add    esp,0x2c
c0022df4:	5b                   	pop    ebx
c0022df5:	5e                   	pop    esi
c0022df6:	5f                   	pop    edi
c0022df7:	5d                   	pop    ebp
c0022df8:	e9 69 15 ff ff       	jmp    c0014366 <Device::preOpenPCI(PCIDeviceInfo)>
c0022dfd:	83 c4 1c             	add    esp,0x1c
c0022e00:	5b                   	pop    ebx
c0022e01:	5e                   	pop    esi
c0022e02:	5f                   	pop    edi
c0022e03:	5d                   	pop    ebp
c0022e04:	c3                   	ret    
c0022e05:	90                   	nop

c0022e06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022e06:	55                   	push   ebp
c0022e07:	57                   	push   edi
c0022e08:	56                   	push   esi
c0022e09:	53                   	push   ebx
c0022e0a:	83 ec 5c             	sub    esp,0x5c
c0022e0d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022e11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e15:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022e19:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022e1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022e22:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022e26:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022e2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e2f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e34:	6a 0c                	push   0xc
c0022e36:	55                   	push   ebp
c0022e37:	53                   	push   ebx
c0022e38:	57                   	push   edi
c0022e39:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e40:	e8 01 fc ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e45:	55                   	push   ebp
c0022e46:	53                   	push   ebx
c0022e47:	57                   	push   edi
c0022e48:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e4f:	e8 80 fc ff ff       	call   c0022ad4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e54:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e59:	83 c4 24             	add    esp,0x24
c0022e5c:	55                   	push   ebp
c0022e5d:	53                   	push   ebx
c0022e5e:	57                   	push   edi
c0022e5f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e63:	e8 f6 fc ff ff       	call   c0022b5e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e68:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e6c:	6a 3c                	push   0x3c
c0022e6e:	55                   	push   ebp
c0022e6f:	53                   	push   ebx
c0022e70:	57                   	push   edi
c0022e71:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e78:	e8 c9 fb ff ff       	call   c0022a46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e7d:	0f b6 c4             	movzx  eax,ah
c0022e80:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e84:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e88:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e8c:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0022e91:	83 c4 24             	add    esp,0x24
c0022e94:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e9a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022ea1:	74 6c                	je     c0022f0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022ea3:	31 f6                	xor    esi,esi
c0022ea5:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c0022eab:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022eb1:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022eb7:	7e 56                	jle    c0022f0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022eb9:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022ebc:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022ec3:	39 cb                	cmp    ebx,ecx
c0022ec5:	75 45                	jne    c0022f0c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ec7:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ece:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022ed2:	75 38                	jne    c0022f0c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ed4:	83 ec 0c             	sub    esp,0xc
c0022ed7:	68 92 cb 02 c0       	push   0xc002cb92
c0022edc:	e8 55 01 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0022ee1:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c0022ee7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022eed:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022ef5:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ef9:	52                   	push   edx
c0022efa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022efe:	53                   	push   ebx
c0022eff:	68 b7 cb 02 c0       	push   0xc002cbb7
c0022f04:	e8 2d 01 ff ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0022f09:	83 c4 20             	add    esp,0x20
c0022f0c:	46                   	inc    esi
c0022f0d:	eb 96                	jmp    c0022ea5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f0f:	31 d2                	xor    edx,edx
c0022f11:	83 ec 0c             	sub    esp,0xc
c0022f14:	55                   	push   ebp
c0022f15:	53                   	push   ebx
c0022f16:	57                   	push   edi
c0022f17:	52                   	push   edx
c0022f18:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022f1c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f23:	e8 7c fc ff ff       	call   c0022ba4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f28:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022f2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f30:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f34:	42                   	inc    edx
c0022f35:	83 c4 20             	add    esp,0x20
c0022f38:	83 fa 06             	cmp    edx,0x6
c0022f3b:	75 d4                	jne    c0022f11 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f3d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f41:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f45:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f49:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f4d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f51:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f55:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f5a:	86 e0                	xchg   al,ah
c0022f5c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f61:	55                   	push   ebp
c0022f62:	53                   	push   ebx
c0022f63:	57                   	push   edi
c0022f64:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f68:	e8 ab fb ff ff       	call   c0022b18 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f6d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f71:	55                   	push   ebp
c0022f72:	53                   	push   ebx
c0022f73:	57                   	push   edi
c0022f74:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f7b:	e8 0e fb ff ff       	call   c0022a8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f80:	83 ec 0c             	sub    esp,0xc
c0022f83:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f88:	b9 09 00 00 00       	mov    ecx,0x9
c0022f8d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f91:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f95:	fc                   	cld    
c0022f96:	89 e7                	mov    edi,esp
c0022f98:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f9a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022fa1:	e8 ee fc ff ff       	call   c0022c94 <PCI::foundDevice(PCIDeviceInfo)>
c0022fa6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022fac:	5b                   	pop    ebx
c0022fad:	5e                   	pop    esi
c0022fae:	5f                   	pop    edi
c0022faf:	5d                   	pop    ebp
c0022fb0:	c3                   	ret    
c0022fb1:	90                   	nop

c0022fb2 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022fb2:	55                   	push   ebp
c0022fb3:	57                   	push   edi
c0022fb4:	56                   	push   esi
c0022fb5:	53                   	push   ebx
c0022fb6:	83 ec 0c             	sub    esp,0xc
c0022fb9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022fbd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022fc2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022fc7:	6a 00                	push   0x0
c0022fc9:	56                   	push   esi
c0022fca:	57                   	push   edi
c0022fcb:	55                   	push   ebp
c0022fcc:	e8 bd fa ff ff       	call   c0022a8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fd1:	6a 00                	push   0x0
c0022fd3:	56                   	push   esi
c0022fd4:	57                   	push   edi
c0022fd5:	55                   	push   ebp
c0022fd6:	e8 2b fe ff ff       	call   c0022e06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fdb:	83 c4 20             	add    esp,0x20
c0022fde:	6a 00                	push   0x0
c0022fe0:	56                   	push   esi
c0022fe1:	57                   	push   edi
c0022fe2:	55                   	push   ebp
c0022fe3:	e8 c8 fa ff ff       	call   c0022ab0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fe8:	83 c4 10             	add    esp,0x10
c0022feb:	84 c0                	test   al,al
c0022fed:	79 27                	jns    c0023016 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fef:	bb 01 00 00 00       	mov    ebx,0x1
c0022ff4:	53                   	push   ebx
c0022ff5:	56                   	push   esi
c0022ff6:	57                   	push   edi
c0022ff7:	55                   	push   ebp
c0022ff8:	e8 91 fa ff ff       	call   c0022a8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ffd:	83 c4 10             	add    esp,0x10
c0023000:	66 40                	inc    ax
c0023002:	74 0c                	je     c0023010 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023004:	53                   	push   ebx
c0023005:	56                   	push   esi
c0023006:	57                   	push   edi
c0023007:	55                   	push   ebp
c0023008:	e8 f9 fd ff ff       	call   c0022e06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002300d:	83 c4 10             	add    esp,0x10
c0023010:	43                   	inc    ebx
c0023011:	83 fb 08             	cmp    ebx,0x8
c0023014:	75 de                	jne    c0022ff4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023016:	83 c4 0c             	add    esp,0xc
c0023019:	5b                   	pop    ebx
c002301a:	5e                   	pop    esi
c002301b:	5f                   	pop    edi
c002301c:	5d                   	pop    ebp
c002301d:	c3                   	ret    

c002301e <PCI::detect()>:
c002301e:	56                   	push   esi
c002301f:	53                   	push   ebx
c0023020:	53                   	push   ebx
c0023021:	31 db                	xor    ebx,ebx
c0023023:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023027:	6a 00                	push   0x0
c0023029:	6a 00                	push   0x0
c002302b:	6a 00                	push   0x0
c002302d:	56                   	push   esi
c002302e:	e8 7d fa ff ff       	call   c0022ab0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023033:	83 c4 10             	add    esp,0x10
c0023036:	a8 80                	test   al,0x80
c0023038:	75 21                	jne    c002305b <PCI::detect()+0x3d>
c002303a:	51                   	push   ecx
c002303b:	51                   	push   ecx
c002303c:	6a 00                	push   0x0
c002303e:	56                   	push   esi
c002303f:	e8 2c fc ff ff       	call   c0022c70 <PCI::checkBus(unsigned char)>
c0023044:	83 c4 10             	add    esp,0x10
c0023047:	eb 24                	jmp    c002306d <PCI::detect()+0x4f>
c0023049:	52                   	push   edx
c002304a:	52                   	push   edx
c002304b:	53                   	push   ebx
c002304c:	43                   	inc    ebx
c002304d:	56                   	push   esi
c002304e:	e8 1d fc ff ff       	call   c0022c70 <PCI::checkBus(unsigned char)>
c0023053:	83 c4 10             	add    esp,0x10
c0023056:	83 fb 08             	cmp    ebx,0x8
c0023059:	74 12                	je     c002306d <PCI::detect()+0x4f>
c002305b:	53                   	push   ebx
c002305c:	6a 00                	push   0x0
c002305e:	6a 00                	push   0x0
c0023060:	56                   	push   esi
c0023061:	e8 28 fa ff ff       	call   c0022a8e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023066:	83 c4 10             	add    esp,0x10
c0023069:	66 40                	inc    ax
c002306b:	74 dc                	je     c0023049 <PCI::detect()+0x2b>
c002306d:	58                   	pop    eax
c002306e:	5b                   	pop    ebx
c002306f:	5e                   	pop    esi
c0023070:	c3                   	ret    
c0023071:	90                   	nop

c0023072 <IDE::close(int, int, void*)>:
c0023072:	83 c8 ff             	or     eax,0xffffffff
c0023075:	c3                   	ret    

c0023076 <IDE::IDE()>:
c0023076:	83 ec 0c             	sub    esp,0xc
c0023079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307d:	83 ec 08             	sub    esp,0x8
c0023080:	68 00 cc 02 c0       	push   0xc002cc00
c0023085:	50                   	push   eax
c0023086:	e8 5d 17 ff ff       	call   c00147e8 <HardDiskController::HardDiskController(char const*)>
c002308b:	83 c4 10             	add    esp,0x10
c002308e:	ba 40 ce 02 c0       	mov    edx,0xc002ce40
c0023093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023097:	89 10                	mov    DWORD PTR [eax],edx
c0023099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002309d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00230a4:	90                   	nop
c00230a5:	83 c4 0c             	add    esp,0xc
c00230a8:	c3                   	ret    
c00230a9:	90                   	nop

c00230aa <IDE::prepareInterrupt(unsigned char)>:
c00230aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00230af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00230b3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00230bb:	c3                   	ret    

c00230bc <selectDrive(unsigned char, unsigned char)>:
c00230bc:	c3                   	ret    
c00230bd:	90                   	nop

c00230be <IDE::getBase(unsigned char)>:
c00230be:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00230c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230c7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00230cf:	c3                   	ret    

c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230d0:	55                   	push   ebp
c00230d1:	57                   	push   edi
c00230d2:	56                   	push   esi
c00230d3:	53                   	push   ebx
c00230d4:	83 ec 1c             	sub    esp,0x1c
c00230d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230df:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230ea:	80 f9 03             	cmp    cl,0x3
c00230ed:	77 51                	ja     c0023140 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230f3:	0f b6 f2             	movzx  esi,dl
c00230f6:	0f b6 db             	movzx  ebx,bl
c00230f9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230fc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023100:	83 ca 80             	or     edx,0xffffff80
c0023103:	0f b6 d2             	movzx  edx,dl
c0023106:	52                   	push   edx
c0023107:	6a 0c                	push   0xc
c0023109:	56                   	push   esi
c002310a:	57                   	push   edi
c002310b:	e8 c0 ff ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023110:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023115:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023119:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002311d:	ee                   	out    dx,al
c002311e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023123:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023127:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002312b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002312f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023137:	83 c4 2c             	add    esp,0x2c
c002313a:	5b                   	pop    ebx
c002313b:	5e                   	pop    esi
c002313c:	5f                   	pop    edi
c002313d:	5d                   	pop    ebp
c002313e:	eb 90                	jmp    c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023140:	80 fb 07             	cmp    bl,0x7
c0023143:	77 12                	ja     c0023157 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023145:	0f b6 d2             	movzx  edx,dl
c0023148:	0f b6 db             	movzx  ebx,bl
c002314b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023153:	89 da                	mov    edx,ebx
c0023155:	eb 2f                	jmp    c0023186 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023157:	80 fb 0d             	cmp    bl,0xd
c002315a:	77 13                	ja     c002316f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002315c:	0f b6 d2             	movzx  edx,dl
c002315f:	0f b6 db             	movzx  ebx,bl
c0023162:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023169:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002316d:	eb 17                	jmp    c0023186 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002316f:	80 fb 15             	cmp    bl,0x15
c0023172:	77 13                	ja     c0023187 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023174:	0f b6 d2             	movzx  edx,dl
c0023177:	0f b6 db             	movzx  ebx,bl
c002317a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023182:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023186:	ee                   	out    dx,al
c0023187:	83 c4 1c             	add    esp,0x1c
c002318a:	5b                   	pop    ebx
c002318b:	5e                   	pop    esi
c002318c:	5f                   	pop    edi
c002318d:	5d                   	pop    ebp
c002318e:	c3                   	ret    
c002318f:	90                   	nop

c0023190 <IDE::read(unsigned char, unsigned char)>:
c0023190:	55                   	push   ebp
c0023191:	57                   	push   edi
c0023192:	56                   	push   esi
c0023193:	53                   	push   ebx
c0023194:	83 ec 1c             	sub    esp,0x1c
c0023197:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002319b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002319f:	8d 43 f8             	lea    eax,[ebx-0x8]
c00231a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00231a6:	3c 03                	cmp    al,0x3
c00231a8:	77 43                	ja     c00231ed <IDE::read(unsigned char, unsigned char)+0x5d>
c00231aa:	0f b6 f2             	movzx  esi,dl
c00231ad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00231b0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00231b4:	83 c8 80             	or     eax,0xffffff80
c00231b7:	0f b6 c0             	movzx  eax,al
c00231ba:	50                   	push   eax
c00231bb:	6a 0c                	push   0xc
c00231bd:	56                   	push   esi
c00231be:	57                   	push   edi
c00231bf:	e8 0c ff ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231c4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00231c9:	0f b6 c3             	movzx  eax,bl
c00231cc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231d0:	ec                   	in     al,dx
c00231d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231d5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231da:	52                   	push   edx
c00231db:	6a 0c                	push   0xc
c00231dd:	56                   	push   esi
c00231de:	57                   	push   edi
c00231df:	e8 ec fe ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231e4:	83 c4 20             	add    esp,0x20
c00231e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231eb:	eb 49                	jmp    c0023236 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231ed:	80 fb 07             	cmp    bl,0x7
c00231f0:	77 12                	ja     c0023204 <IDE::read(unsigned char, unsigned char)+0x74>
c00231f2:	0f b6 d2             	movzx  edx,dl
c00231f5:	0f b6 c3             	movzx  eax,bl
c00231f8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023200:	89 c2                	mov    edx,eax
c0023202:	eb 31                	jmp    c0023235 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023204:	80 fb 0d             	cmp    bl,0xd
c0023207:	77 13                	ja     c002321c <IDE::read(unsigned char, unsigned char)+0x8c>
c0023209:	0f b6 d2             	movzx  edx,dl
c002320c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023213:	0f b6 d3             	movzx  edx,bl
c0023216:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002321a:	eb 19                	jmp    c0023235 <IDE::read(unsigned char, unsigned char)+0xa5>
c002321c:	31 c0                	xor    eax,eax
c002321e:	80 fb 15             	cmp    bl,0x15
c0023221:	77 13                	ja     c0023236 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023223:	0f b6 d2             	movzx  edx,dl
c0023226:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002322e:	0f b6 d3             	movzx  edx,bl
c0023231:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023235:	ec                   	in     al,dx
c0023236:	83 c4 1c             	add    esp,0x1c
c0023239:	5b                   	pop    ebx
c002323a:	5e                   	pop    esi
c002323b:	5f                   	pop    edi
c002323c:	5d                   	pop    ebp
c002323d:	c3                   	ret    

c002323e <IDE::waitInterrupt(unsigned char)>:
c002323e:	55                   	push   ebp
c002323f:	57                   	push   edi
c0023240:	56                   	push   esi
c0023241:	53                   	push   ebx
c0023242:	31 db                	xor    ebx,ebx
c0023244:	83 ec 0c             	sub    esp,0xc
c0023247:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002324b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023250:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023258:	89 e8                	mov    eax,ebp
c002325a:	84 c0                	test   al,al
c002325c:	75 34                	jne    c0023292 <IDE::waitInterrupt(unsigned char)+0x54>
c002325e:	52                   	push   edx
c002325f:	6a 0c                	push   0xc
c0023261:	56                   	push   esi
c0023262:	57                   	push   edi
c0023263:	e8 28 ff ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023268:	83 c4 10             	add    esp,0x10
c002326b:	a8 01                	test   al,0x1
c002326d:	75 2b                	jne    c002329a <IDE::waitInterrupt(unsigned char)+0x5c>
c002326f:	f6 c3 04             	test   bl,0x4
c0023272:	75 16                	jne    c002328a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023274:	83 fb 32             	cmp    ebx,0x32
c0023277:	7e 11                	jle    c002328a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023279:	50                   	push   eax
c002327a:	50                   	push   eax
c002327b:	6a 00                	push   0x0
c002327d:	68 80 96 98 00       	push   0x989680
c0023282:	e8 8b b1 ff ff       	call   c001e412 <nanoSleep(unsigned long long)>
c0023287:	83 c4 10             	add    esp,0x10
c002328a:	83 fb 3c             	cmp    ebx,0x3c
c002328d:	74 0b                	je     c002329a <IDE::waitInterrupt(unsigned char)+0x5c>
c002328f:	43                   	inc    ebx
c0023290:	eb be                	jmp    c0023250 <IDE::waitInterrupt(unsigned char)+0x12>
c0023292:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002329a:	83 c4 0c             	add    esp,0xc
c002329d:	89 e8                	mov    eax,ebp
c002329f:	5b                   	pop    ebx
c00232a0:	5e                   	pop    esi
c00232a1:	5f                   	pop    edi
c00232a2:	5d                   	pop    ebp
c00232a3:	c3                   	ret    

c00232a4 <ideChannel0IRQHandler(regs*, void*)>:
c00232a4:	83 ec 10             	sub    esp,0x10
c00232a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232ab:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00232b2:	6a 07                	push   0x7
c00232b4:	6a 00                	push   0x0
c00232b6:	50                   	push   eax
c00232b7:	e8 d4 fe ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c00232bc:	83 c4 1c             	add    esp,0x1c
c00232bf:	c3                   	ret    

c00232c0 <ideChannel1IRQHandler(regs*, void*)>:
c00232c0:	83 ec 10             	sub    esp,0x10
c00232c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232c7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00232ce:	6a 07                	push   0x7
c00232d0:	6a 01                	push   0x1
c00232d2:	50                   	push   eax
c00232d3:	e8 b8 fe ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c00232d8:	83 c4 1c             	add    esp,0x1c
c00232db:	c3                   	ret    

c00232dc <IDE::enableIRQs(unsigned char, bool)>:
c00232dc:	57                   	push   edi
c00232dd:	56                   	push   esi
c00232de:	be 04 00 00 00       	mov    esi,0x4
c00232e3:	53                   	push   ebx
c00232e4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232ed:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232f2:	0f 94 c0             	sete   al
c00232f5:	d1 e0                	shl    eax,1
c00232f7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232fe:	0f b6 c0             	movzx  eax,al
c0023301:	50                   	push   eax
c0023302:	6a 0c                	push   0xc
c0023304:	57                   	push   edi
c0023305:	53                   	push   ebx
c0023306:	e8 c5 fd ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002330b:	83 c4 10             	add    esp,0x10
c002330e:	50                   	push   eax
c002330f:	6a 0c                	push   0xc
c0023311:	57                   	push   edi
c0023312:	53                   	push   ebx
c0023313:	e8 78 fe ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023318:	83 c4 10             	add    esp,0x10
c002331b:	4e                   	dec    esi
c002331c:	75 f0                	jne    c002330e <IDE::enableIRQs(unsigned char, bool)+0x32>
c002331e:	5b                   	pop    ebx
c002331f:	5e                   	pop    esi
c0023320:	5f                   	pop    edi
c0023321:	c3                   	ret    

c0023322 <IDE::open(int, int, void*)>:
c0023322:	55                   	push   ebp
c0023323:	57                   	push   edi
c0023324:	56                   	push   esi
c0023325:	53                   	push   ebx
c0023326:	83 ec 1c             	sub    esp,0x1c
c0023329:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002332d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023336:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002333f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023346:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002334d:	0f 85 b0 02 00 00    	jne    c0023603 <IDE::open(int, int, void*)+0x2e1>
c0023353:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023359:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002335d:	83 e0 7f             	and    eax,0x7f
c0023360:	3c 05                	cmp    al,0x5
c0023362:	74 04                	je     c0023368 <IDE::open(int, int, void*)+0x46>
c0023364:	3c 0f                	cmp    al,0xf
c0023366:	75 32                	jne    c002339a <IDE::open(int, int, void*)+0x78>
c0023368:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002336e:	83 e0 fc             	and    eax,0xfffffffc
c0023371:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023378:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002337e:	83 e0 fc             	and    eax,0xfffffffc
c0023381:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023388:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002338e:	83 e0 fc             	and    eax,0xfffffffc
c0023391:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023398:	eb 14                	jmp    c00233ae <IDE::open(int, int, void*)+0x8c>
c002339a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233a4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233ae:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00233b5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00233bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00233c0:	89 c6                	mov    esi,eax
c00233c2:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233c7:	c1 e6 10             	shl    esi,0x10
c00233ca:	89 e8                	mov    eax,ebp
c00233cc:	89 fa                	mov    edx,edi
c00233ce:	c1 e0 0b             	shl    eax,0xb
c00233d1:	09 f0                	or     eax,esi
c00233d3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233da:	c1 e6 08             	shl    esi,0x8
c00233dd:	09 c6                	or     esi,eax
c00233df:	89 f0                	mov    eax,esi
c00233e1:	0d 08 00 00 80       	or     eax,0x80000008
c00233e6:	ef                   	out    dx,eax
c00233e7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233ec:	89 ca                	mov    edx,ecx
c00233ee:	ed                   	in     eax,dx
c00233ef:	c1 e8 10             	shr    eax,0x10
c00233f2:	3d ff ff 00 00       	cmp    eax,0xffff
c00233f7:	0f 84 f5 00 00 00    	je     c00234f2 <IDE::open(int, int, void*)+0x1d0>
c00233fd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023403:	89 fa                	mov    edx,edi
c0023405:	89 f0                	mov    eax,esi
c0023407:	ef                   	out    dx,eax
c0023408:	b0 fe                	mov    al,0xfe
c002340a:	89 ca                	mov    edx,ecx
c002340c:	ee                   	out    dx,al
c002340d:	89 f0                	mov    eax,esi
c002340f:	89 fa                	mov    edx,edi
c0023411:	ef                   	out    dx,eax
c0023412:	89 ca                	mov    edx,ecx
c0023414:	ed                   	in     eax,dx
c0023415:	3c fe                	cmp    al,0xfe
c0023417:	0f 85 a9 00 00 00    	jne    c00234c6 <IDE::open(int, int, void*)+0x1a4>
c002341d:	8b 15 88 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e588
c0023423:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002342a:	74 33                	je     c002345f <IDE::open(int, int, void*)+0x13d>
c002342c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023432:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023436:	40                   	inc    eax
c0023437:	83 ec 0c             	sub    esp,0xc
c002343a:	0f b6 c0             	movzx  eax,al
c002343d:	50                   	push   eax
c002343e:	55                   	push   ebp
c002343f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023443:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023449:	51                   	push   ecx
c002344a:	e8 f1 4e ff ff       	call   c0018340 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002344f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023454:	83 c4 1c             	add    esp,0x1c
c0023457:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002345d:	eb 0a                	jmp    c0023469 <IDE::open(int, int, void*)+0x147>
c002345f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023469:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023470:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023477:	c1 e1 10             	shl    ecx,0x10
c002347a:	c1 e0 08             	shl    eax,0x8
c002347d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023482:	09 c1                	or     ecx,eax
c0023484:	89 fa                	mov    edx,edi
c0023486:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002348d:	c1 e0 0b             	shl    eax,0xb
c0023490:	09 c1                	or     ecx,eax
c0023492:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023498:	89 c8                	mov    eax,ecx
c002349a:	ef                   	out    dx,eax
c002349b:	be fc 0c 00 00       	mov    esi,0xcfc
c00234a0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00234a6:	89 f2                	mov    edx,esi
c00234a8:	ee                   	out    dx,al
c00234a9:	89 c8                	mov    eax,ecx
c00234ab:	89 fa                	mov    edx,edi
c00234ad:	ef                   	out    dx,eax
c00234ae:	89 f2                	mov    edx,esi
c00234b0:	ed                   	in     eax,dx
c00234b1:	0f b6 c0             	movzx  eax,al
c00234b4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00234ba:	74 46                	je     c0023502 <IDE::open(int, int, void*)+0x1e0>
c00234bc:	83 ec 0c             	sub    esp,0xc
c00234bf:	68 18 cc 02 c0       	push   0xc002cc18
c00234c4:	eb 34                	jmp    c00234fa <IDE::open(int, int, void*)+0x1d8>
c00234c6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00234cf:	75 17                	jne    c00234e8 <IDE::open(int, int, void*)+0x1c6>
c00234d1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234d6:	74 07                	je     c00234df <IDE::open(int, int, void*)+0x1bd>
c00234d8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234dd:	75 09                	jne    c00234e8 <IDE::open(int, int, void*)+0x1c6>
c00234df:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234e6:	eb 1a                	jmp    c0023502 <IDE::open(int, int, void*)+0x1e0>
c00234e8:	83 ec 0c             	sub    esp,0xc
c00234eb:	68 20 cc 02 c0       	push   0xc002cc20
c00234f0:	eb 08                	jmp    c00234fa <IDE::open(int, int, void*)+0x1d8>
c00234f2:	83 ec 0c             	sub    esp,0xc
c00234f5:	68 51 cc 02 c0       	push   0xc002cc51
c00234fa:	e8 e8 71 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c00234ff:	83 c4 10             	add    esp,0x10
c0023502:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023509:	79 1a                	jns    c0023525 <IDE::open(int, int, void*)+0x203>
c002350b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023511:	83 e0 fc             	and    eax,0xfffffffc
c0023514:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002351b:	83 c0 08             	add    eax,0x8
c002351e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023525:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002352b:	89 c2                	mov    edx,eax
c002352d:	83 e2 0f             	and    edx,0xf
c0023530:	66 83 fa 08          	cmp    dx,0x8
c0023534:	75 0a                	jne    c0023540 <IDE::open(int, int, void*)+0x21e>
c0023536:	83 e8 02             	sub    eax,0x2
c0023539:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023540:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023546:	89 c2                	mov    edx,eax
c0023548:	83 e2 0f             	and    edx,0xf
c002354b:	66 83 fa 08          	cmp    dx,0x8
c002354f:	75 0a                	jne    c002355b <IDE::open(int, int, void*)+0x239>
c0023551:	83 e8 02             	sub    eax,0x2
c0023554:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002355b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023562:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023569:	89 d0                	mov    eax,edx
c002356b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002356e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023572:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023576:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023579:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002357e:	0f b6 c9             	movzx  ecx,cl
c0023581:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023588:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002358b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002358f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023593:	8d 50 02             	lea    edx,[eax+0x2]
c0023596:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002359b:	0f b6 d2             	movzx  edx,dl
c002359e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00235a4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235a7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235ab:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00235af:	8d 48 03             	lea    ecx,[eax+0x3]
c00235b2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235b7:	0f b6 c9             	movzx  ecx,cl
c00235ba:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00235c0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00235c3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00235c7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00235cb:	8d 50 04             	lea    edx,[eax+0x4]
c00235ce:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235d4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235d9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235e0:	66 85 f6             	test   si,si
c00235e3:	74 3e                	je     c0023623 <IDE::open(int, int, void*)+0x301>
c00235e5:	0f b6 d2             	movzx  edx,dl
c00235e8:	83 c0 05             	add    eax,0x5
c00235eb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235ee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235f2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235f6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235fc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023601:	eb 20                	jmp    c0023623 <IDE::open(int, int, void*)+0x301>
c0023603:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002360d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023617:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002361e:	e9 02 ff ff ff       	jmp    c0023525 <IDE::open(int, int, void*)+0x203>
c0023623:	52                   	push   edx
c0023624:	52                   	push   edx
c0023625:	6a 00                	push   0x0
c0023627:	53                   	push   ebx
c0023628:	e8 7d fa ff ff       	call   c00230aa <IDE::prepareInterrupt(unsigned char)>
c002362d:	59                   	pop    ecx
c002362e:	5e                   	pop    esi
c002362f:	6a 01                	push   0x1
c0023631:	53                   	push   ebx
c0023632:	e8 73 fa ff ff       	call   c00230aa <IDE::prepareInterrupt(unsigned char)>
c0023637:	83 c4 0c             	add    esp,0xc
c002363a:	6a 00                	push   0x0
c002363c:	6a 00                	push   0x0
c002363e:	53                   	push   ebx
c002363f:	e8 98 fc ff ff       	call   c00232dc <IDE::enableIRQs(unsigned char, bool)>
c0023644:	83 c4 0c             	add    esp,0xc
c0023647:	6a 00                	push   0x0
c0023649:	6a 01                	push   0x1
c002364b:	53                   	push   ebx
c002364c:	e8 8b fc ff ff       	call   c00232dc <IDE::enableIRQs(unsigned char, bool)>
c0023651:	83 c4 10             	add    esp,0x10
c0023654:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002365b:	74 40                	je     c002369d <IDE::open(int, int, void*)+0x37b>
c002365d:	83 ec 0c             	sub    esp,0xc
c0023660:	68 7b cc 02 c0       	push   0xc002cc7b
c0023665:	e8 cc f9 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c002366a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002366d:	6a 01                	push   0x1
c002366f:	68 a4 32 02 c0       	push   0xc00232a4
c0023674:	6a 0e                	push   0xe
c0023676:	53                   	push   ebx
c0023677:	e8 64 0d ff ff       	call   c00143e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002367c:	83 c4 14             	add    esp,0x14
c002367f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023685:	53                   	push   ebx
c0023686:	6a 01                	push   0x1
c0023688:	68 c0 32 02 c0       	push   0xc00232c0
c002368d:	6a 0f                	push   0xf
c002368f:	53                   	push   ebx
c0023690:	e8 4b 0d ff ff       	call   c00143e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023695:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002369b:	eb 4a                	jmp    c00236e7 <IDE::open(int, int, void*)+0x3c5>
c002369d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00236a7:	50                   	push   eax
c00236a8:	6a 0f                	push   0xf
c00236aa:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236b0:	68 97 cc 02 c0       	push   0xc002cc97
c00236b5:	e8 7c f9 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c00236ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00236bd:	6a 00                	push   0x0
c00236bf:	68 a4 32 02 c0       	push   0xc00232a4
c00236c4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236ca:	53                   	push   ebx
c00236cb:	e8 10 0d ff ff       	call   c00143e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236d0:	83 c4 14             	add    esp,0x14
c00236d3:	53                   	push   ebx
c00236d4:	6a 00                	push   0x0
c00236d6:	68 c0 32 02 c0       	push   0xc00232c0
c00236db:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236e1:	53                   	push   ebx
c00236e2:	e8 f9 0c ff ff       	call   c00143e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236e9:	83 c4 20             	add    esp,0x20
c00236ec:	83 ec 0c             	sub    esp,0xc
c00236ef:	53                   	push   ebx
c00236f0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236f3:	83 c4 0c             	add    esp,0xc
c00236f6:	6a 07                	push   0x7
c00236f8:	6a 00                	push   0x0
c00236fa:	53                   	push   ebx
c00236fb:	e8 90 fa ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023700:	83 c4 0c             	add    esp,0xc
c0023703:	6a 07                	push   0x7
c0023705:	6a 01                	push   0x1
c0023707:	53                   	push   ebx
c0023708:	e8 83 fa ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c002370d:	83 c4 0c             	add    esp,0xc
c0023710:	6a 01                	push   0x1
c0023712:	6a 00                	push   0x0
c0023714:	53                   	push   ebx
c0023715:	e8 c2 fb ff ff       	call   c00232dc <IDE::enableIRQs(unsigned char, bool)>
c002371a:	83 c4 0c             	add    esp,0xc
c002371d:	6a 01                	push   0x1
c002371f:	6a 01                	push   0x1
c0023721:	53                   	push   ebx
c0023722:	e8 b5 fb ff ff       	call   c00232dc <IDE::enableIRQs(unsigned char, bool)>
c0023727:	83 c4 2c             	add    esp,0x2c
c002372a:	31 c0                	xor    eax,eax
c002372c:	5b                   	pop    ebx
c002372d:	5e                   	pop    esi
c002372e:	5f                   	pop    edi
c002372f:	5d                   	pop    ebp
c0023730:	c3                   	ret    
c0023731:	90                   	nop

c0023732 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023732:	55                   	push   ebp
c0023733:	57                   	push   edi
c0023734:	56                   	push   esi
c0023735:	53                   	push   ebx
c0023736:	83 ec 1c             	sub    esp,0x1c
c0023739:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002373d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023741:	8d 50 f8             	lea    edx,[eax-0x8]
c0023744:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023748:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002374c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023750:	80 fa 03             	cmp    dl,0x3
c0023753:	77 5d                	ja     c00237b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023755:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002375d:	0f b6 db             	movzx  ebx,bl
c0023760:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023763:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023767:	83 ca 80             	or     edx,0xffffff80
c002376a:	0f b6 d2             	movzx  edx,dl
c002376d:	52                   	push   edx
c002376e:	6a 0c                	push   0xc
c0023770:	53                   	push   ebx
c0023771:	56                   	push   esi
c0023772:	e8 59 f9 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023777:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002377c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023780:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023784:	0f b6 c0             	movzx  eax,al
c0023787:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002378b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002378d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023792:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023796:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002379a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002379e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00237a6:	83 c4 2c             	add    esp,0x2c
c00237a9:	5b                   	pop    ebx
c00237aa:	5e                   	pop    esi
c00237ab:	5f                   	pop    edi
c00237ac:	5d                   	pop    ebp
c00237ad:	e9 1e f9 ff ff       	jmp    c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237b2:	3c 07                	cmp    al,0x7
c00237b4:	77 10                	ja     c00237c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00237b6:	0f b6 db             	movzx  ebx,bl
c00237b9:	0f b6 d0             	movzx  edx,al
c00237bc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00237c4:	eb 2d                	jmp    c00237f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237c6:	3c 0d                	cmp    al,0xd
c00237c8:	77 13                	ja     c00237dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00237ca:	0f b6 db             	movzx  ebx,bl
c00237cd:	0f b6 c0             	movzx  eax,al
c00237d0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237d7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237db:	eb 16                	jmp    c00237f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237dd:	3c 15                	cmp    al,0x15
c00237df:	77 14                	ja     c00237f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237e1:	0f b6 db             	movzx  ebx,bl
c00237e4:	0f b6 c0             	movzx  eax,al
c00237e7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237ef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237f3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237f5:	83 c4 1c             	add    esp,0x1c
c00237f8:	5b                   	pop    ebx
c00237f9:	5e                   	pop    esi
c00237fa:	5f                   	pop    edi
c00237fb:	5d                   	pop    ebp
c00237fc:	c3                   	ret    
c00237fd:	90                   	nop

c00237fe <IDE::detect()>:
c00237fe:	55                   	push   ebp
c00237ff:	57                   	push   edi
c0023800:	56                   	push   esi
c0023801:	53                   	push   ebx
c0023802:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023808:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002380f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023816:	0f 85 be 02 00 00    	jne    c0023ada <IDE::detect()+0x2dc>
c002381c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023823:	31 f6                	xor    esi,esi
c0023825:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002382d:	31 ed                	xor    ebp,ebp
c002382f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023833:	c1 e0 06             	shl    eax,0x6
c0023836:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002383e:	89 e8                	mov    eax,ebp
c0023840:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023844:	c1 e0 04             	shl    eax,0x4
c0023847:	83 c8 a0             	or     eax,0xffffffa0
c002384a:	0f b6 c0             	movzx  eax,al
c002384d:	50                   	push   eax
c002384e:	6a 06                	push   0x6
c0023850:	56                   	push   esi
c0023851:	53                   	push   ebx
c0023852:	e8 79 f8 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023857:	83 c4 0c             	add    esp,0xc
c002385a:	6a 0c                	push   0xc
c002385c:	56                   	push   esi
c002385d:	53                   	push   ebx
c002385e:	e8 2d f9 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023863:	83 c4 0c             	add    esp,0xc
c0023866:	6a 0c                	push   0xc
c0023868:	56                   	push   esi
c0023869:	53                   	push   ebx
c002386a:	e8 21 f9 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c002386f:	83 c4 0c             	add    esp,0xc
c0023872:	6a 0c                	push   0xc
c0023874:	56                   	push   esi
c0023875:	53                   	push   ebx
c0023876:	e8 15 f9 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c002387b:	83 c4 0c             	add    esp,0xc
c002387e:	6a 0c                	push   0xc
c0023880:	56                   	push   esi
c0023881:	53                   	push   ebx
c0023882:	e8 09 f9 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023887:	68 ec 00 00 00       	push   0xec
c002388c:	6a 07                	push   0x7
c002388e:	56                   	push   esi
c002388f:	53                   	push   ebx
c0023890:	e8 3b f8 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023895:	83 c4 1c             	add    esp,0x1c
c0023898:	6a 0c                	push   0xc
c002389a:	56                   	push   esi
c002389b:	53                   	push   ebx
c002389c:	e8 ef f8 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c00238a1:	83 c4 0c             	add    esp,0xc
c00238a4:	6a 0c                	push   0xc
c00238a6:	56                   	push   esi
c00238a7:	53                   	push   ebx
c00238a8:	e8 e3 f8 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c00238ad:	83 c4 0c             	add    esp,0xc
c00238b0:	6a 0c                	push   0xc
c00238b2:	56                   	push   esi
c00238b3:	53                   	push   ebx
c00238b4:	e8 d7 f8 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c00238b9:	83 c4 0c             	add    esp,0xc
c00238bc:	6a 0c                	push   0xc
c00238be:	56                   	push   esi
c00238bf:	53                   	push   ebx
c00238c0:	e8 cb f8 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c00238c5:	83 c4 0c             	add    esp,0xc
c00238c8:	6a 0c                	push   0xc
c00238ca:	56                   	push   esi
c00238cb:	53                   	push   ebx
c00238cc:	e8 bf f8 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c00238d1:	83 c4 10             	add    esp,0x10
c00238d4:	84 c0                	test   al,al
c00238d6:	0f 84 8b 01 00 00    	je     c0023a67 <IDE::detect()+0x269>
c00238dc:	31 ff                	xor    edi,edi
c00238de:	50                   	push   eax
c00238df:	6a 0c                	push   0xc
c00238e1:	56                   	push   esi
c00238e2:	53                   	push   ebx
c00238e3:	e8 a8 f8 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c00238e8:	83 c4 10             	add    esp,0x10
c00238eb:	a8 01                	test   al,0x1
c00238ed:	0f 85 8e 01 00 00    	jne    c0023a81 <IDE::detect()+0x283>
c00238f3:	84 c0                	test   al,al
c00238f5:	78 04                	js     c00238fb <IDE::detect()+0xfd>
c00238f7:	a8 08                	test   al,0x8
c00238f9:	75 27                	jne    c0023922 <IDE::detect()+0x124>
c00238fb:	47                   	inc    edi
c00238fc:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023902:	7e da                	jle    c00238de <IDE::detect()+0xe0>
c0023904:	50                   	push   eax
c0023905:	50                   	push   eax
c0023906:	6a 00                	push   0x0
c0023908:	68 40 4b 4c 00       	push   0x4c4b40
c002390d:	e8 00 ab ff ff       	call   c001e412 <nanoSleep(unsigned long long)>
c0023912:	83 c4 10             	add    esp,0x10
c0023915:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002391b:	75 c1                	jne    c00238de <IDE::detect()+0xe0>
c002391d:	e9 5f 01 00 00       	jmp    c0023a81 <IDE::detect()+0x283>
c0023922:	31 c9                	xor    ecx,ecx
c0023924:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023928:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002392c:	83 ec 0c             	sub    esp,0xc
c002392f:	68 80 00 00 00       	push   0x80
c0023934:	57                   	push   edi
c0023935:	6a 00                	push   0x0
c0023937:	56                   	push   esi
c0023938:	53                   	push   ebx
c0023939:	e8 f4 fd ff ff       	call   c0023732 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002393e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023943:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023947:	89 d1                	mov    ecx,edx
c0023949:	c1 e0 06             	shl    eax,0x6
c002394c:	01 d8                	add    eax,ebx
c002394e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023955:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002395c:	89 f2                	mov    edx,esi
c002395e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023964:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023968:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002396e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023972:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023979:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023981:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023988:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023990:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023996:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002399d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00239a3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00239a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00239ab:	83 c4 20             	add    esp,0x20
c00239ae:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00239b1:	83 c0 02             	add    eax,0x2
c00239b4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00239ba:	83 c7 02             	add    edi,0x2
c00239bd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00239c0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00239c6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00239ca:	75 e2                	jne    c00239ae <IDE::detect()+0x1b0>
c00239cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239d0:	c1 e0 06             	shl    eax,0x6
c00239d3:	01 d8                	add    eax,ebx
c00239d5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239db:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239e2:	66 c1 ea 09          	shr    dx,0x9
c00239e6:	83 e2 01             	and    edx,0x1
c00239e9:	84 c9                	test   cl,cl
c00239eb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239f1:	75 2f                	jne    c0023a22 <IDE::detect()+0x224>
c00239f3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00239f9:	85 c0                	test   eax,eax
c00239fb:	74 66                	je     c0023a63 <IDE::detect()+0x265>
c00239fd:	50                   	push   eax
c00239fe:	55                   	push   ebp
c00239ff:	56                   	push   esi
c0023a00:	68 b3 cc 02 c0       	push   0xc002ccb3
c0023a05:	e8 2c f6 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023a0a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023a11:	e8 2a be fe ff       	call   c000f840 <malloc>
c0023a16:	89 c7                	mov    edi,eax
c0023a18:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a1b:	e8 78 06 00 00       	call   c0024098 <ATA::ATA()>
c0023a20:	eb 28                	jmp    c0023a4a <IDE::detect()+0x24c>
c0023a22:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023a28:	55                   	push   ebp
c0023a29:	56                   	push   esi
c0023a2a:	68 e2 cc 02 c0       	push   0xc002cce2
c0023a2f:	e8 02 f6 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023a34:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a3b:	e8 00 be fe ff       	call   c000f840 <malloc>
c0023a40:	89 c7                	mov    edi,eax
c0023a42:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a45:	e8 8e 0c 00 00       	call   c00246d8 <ATAPI::ATAPI()>
c0023a4a:	5a                   	pop    edx
c0023a4b:	59                   	pop    ecx
c0023a4c:	57                   	push   edi
c0023a4d:	53                   	push   ebx
c0023a4e:	e8 09 0a ff ff       	call   c001445c <Device::addChild(Device*)>
c0023a53:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a55:	53                   	push   ebx
c0023a56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a5a:	6a 00                	push   0x0
c0023a5c:	57                   	push   edi
c0023a5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a60:	83 c4 20             	add    esp,0x20
c0023a63:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a67:	4d                   	dec    ebp
c0023a68:	74 0a                	je     c0023a74 <IDE::detect()+0x276>
c0023a6a:	bd 01 00 00 00       	mov    ebp,0x1
c0023a6f:	e9 bb fd ff ff       	jmp    c002382f <IDE::detect()+0x31>
c0023a74:	4e                   	dec    esi
c0023a75:	74 63                	je     c0023ada <IDE::detect()+0x2dc>
c0023a77:	be 01 00 00 00       	mov    esi,0x1
c0023a7c:	e9 ac fd ff ff       	jmp    c002382d <IDE::detect()+0x2f>
c0023a81:	50                   	push   eax
c0023a82:	6a 04                	push   0x4
c0023a84:	56                   	push   esi
c0023a85:	53                   	push   ebx
c0023a86:	e8 05 f7 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023a8b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a8f:	83 c4 0c             	add    esp,0xc
c0023a92:	6a 05                	push   0x5
c0023a94:	56                   	push   esi
c0023a95:	53                   	push   ebx
c0023a96:	e8 f5 f6 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023a9b:	83 c4 10             	add    esp,0x10
c0023a9e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023aa2:	80 fa 14             	cmp    dl,0x14
c0023aa5:	75 04                	jne    c0023aab <IDE::detect()+0x2ad>
c0023aa7:	3c eb                	cmp    al,0xeb
c0023aa9:	eb 07                	jmp    c0023ab2 <IDE::detect()+0x2b4>
c0023aab:	3c 96                	cmp    al,0x96
c0023aad:	75 b8                	jne    c0023a67 <IDE::detect()+0x269>
c0023aaf:	80 fa 69             	cmp    dl,0x69
c0023ab2:	75 b3                	jne    c0023a67 <IDE::detect()+0x269>
c0023ab4:	68 a1 00 00 00       	push   0xa1
c0023ab9:	6a 07                	push   0x7
c0023abb:	56                   	push   esi
c0023abc:	53                   	push   ebx
c0023abd:	e8 0e f6 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ac2:	5f                   	pop    edi
c0023ac3:	58                   	pop    eax
c0023ac4:	6a 00                	push   0x0
c0023ac6:	68 40 42 0f 00       	push   0xf4240
c0023acb:	e8 42 a9 ff ff       	call   c001e412 <nanoSleep(unsigned long long)>
c0023ad0:	83 c4 10             	add    esp,0x10
c0023ad3:	b1 01                	mov    cl,0x1
c0023ad5:	e9 4a fe ff ff       	jmp    c0023924 <IDE::detect()+0x126>
c0023ada:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023ae0:	5b                   	pop    ebx
c0023ae1:	5e                   	pop    esi
c0023ae2:	5f                   	pop    edi
c0023ae3:	5d                   	pop    ebp
c0023ae4:	c3                   	ret    
c0023ae5:	90                   	nop

c0023ae6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023ae6:	55                   	push   ebp
c0023ae7:	57                   	push   edi
c0023ae8:	56                   	push   esi
c0023ae9:	53                   	push   ebx
c0023aea:	83 ec 1c             	sub    esp,0x1c
c0023aed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023af1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023af5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023af9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023afd:	88 c3                	mov    bl,al
c0023aff:	84 c0                	test   al,al
c0023b01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023b05:	0f 84 67 01 00 00    	je     c0023c72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023b0b:	83 ec 0c             	sub    esp,0xc
c0023b0e:	68 13 cd 02 c0       	push   0xc002cd13
c0023b13:	e8 1e f5 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023b18:	83 c4 10             	add    esp,0x10
c0023b1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b1f:	3c 01                	cmp    al,0x1
c0023b21:	75 17                	jne    c0023b3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023b23:	83 ec 0c             	sub    esp,0xc
c0023b26:	b3 13                	mov    bl,0x13
c0023b28:	68 1f cd 02 c0       	push   0xc002cd1f
c0023b2d:	e8 04 f5 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023b32:	83 c4 10             	add    esp,0x10
c0023b35:	e9 25 01 00 00       	jmp    c0023c5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b3a:	3c 02                	cmp    al,0x2
c0023b3c:	0f 85 ef 00 00 00    	jne    c0023c31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b42:	d1 e6                	shl    esi,1
c0023b44:	09 ee                	or     esi,ebp
c0023b46:	52                   	push   edx
c0023b47:	89 f0                	mov    eax,esi
c0023b49:	6a 01                	push   0x1
c0023b4b:	0f b6 f0             	movzx  esi,al
c0023b4e:	c1 e6 06             	shl    esi,0x6
c0023b51:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b59:	50                   	push   eax
c0023b5a:	57                   	push   edi
c0023b5b:	e8 30 f6 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023b60:	83 c4 10             	add    esp,0x10
c0023b63:	89 c6                	mov    esi,eax
c0023b65:	a8 01                	test   al,0x1
c0023b67:	74 12                	je     c0023b7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b69:	83 ec 0c             	sub    esp,0xc
c0023b6c:	b3 07                	mov    bl,0x7
c0023b6e:	68 34 cd 02 c0       	push   0xc002cd34
c0023b73:	e8 be f4 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023b78:	83 c4 10             	add    esp,0x10
c0023b7b:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b81:	74 12                	je     c0023b95 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b83:	83 ec 0c             	sub    esp,0xc
c0023b86:	b3 03                	mov    bl,0x3
c0023b88:	68 52 cd 02 c0       	push   0xc002cd52
c0023b8d:	e8 a4 f4 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023b92:	83 c4 10             	add    esp,0x10
c0023b95:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b9b:	74 12                	je     c0023baf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b9d:	83 ec 0c             	sub    esp,0xc
c0023ba0:	b3 14                	mov    bl,0x14
c0023ba2:	68 72 cd 02 c0       	push   0xc002cd72
c0023ba7:	e8 8a f4 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023bac:	83 c4 10             	add    esp,0x10
c0023baf:	f7 c6 08 00 00 00    	test   esi,0x8
c0023bb5:	74 12                	je     c0023bc9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023bb7:	83 ec 0c             	sub    esp,0xc
c0023bba:	b3 03                	mov    bl,0x3
c0023bbc:	68 52 cd 02 c0       	push   0xc002cd52
c0023bc1:	e8 70 f4 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023bc6:	83 c4 10             	add    esp,0x10
c0023bc9:	f7 c6 10 00 00 00    	test   esi,0x10
c0023bcf:	74 12                	je     c0023be3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023bd1:	83 ec 0c             	sub    esp,0xc
c0023bd4:	b3 15                	mov    bl,0x15
c0023bd6:	68 8a cd 02 c0       	push   0xc002cd8a
c0023bdb:	e8 56 f4 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023be0:	83 c4 10             	add    esp,0x10
c0023be3:	f7 c6 20 00 00 00    	test   esi,0x20
c0023be9:	74 12                	je     c0023bfd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023beb:	83 ec 0c             	sub    esp,0xc
c0023bee:	b3 03                	mov    bl,0x3
c0023bf0:	68 52 cd 02 c0       	push   0xc002cd52
c0023bf5:	e8 3c f4 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023bfa:	83 c4 10             	add    esp,0x10
c0023bfd:	f7 c6 40 00 00 00    	test   esi,0x40
c0023c03:	74 12                	je     c0023c17 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023c05:	83 ec 0c             	sub    esp,0xc
c0023c08:	b3 16                	mov    bl,0x16
c0023c0a:	68 a4 cd 02 c0       	push   0xc002cda4
c0023c0f:	e8 22 f4 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023c14:	83 c4 10             	add    esp,0x10
c0023c17:	89 f0                	mov    eax,esi
c0023c19:	84 c0                	test   al,al
c0023c1b:	79 42                	jns    c0023c5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c1d:	83 ec 0c             	sub    esp,0xc
c0023c20:	b3 0d                	mov    bl,0xd
c0023c22:	68 c5 cd 02 c0       	push   0xc002cdc5
c0023c27:	e8 0a f4 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023c2c:	83 c4 10             	add    esp,0x10
c0023c2f:	eb 2e                	jmp    c0023c5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c31:	3c 03                	cmp    al,0x3
c0023c33:	75 14                	jne    c0023c49 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c35:	83 ec 0c             	sub    esp,0xc
c0023c38:	b3 17                	mov    bl,0x17
c0023c3a:	68 d9 cd 02 c0       	push   0xc002cdd9
c0023c3f:	e8 f2 f3 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023c44:	83 c4 10             	add    esp,0x10
c0023c47:	eb 16                	jmp    c0023c5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c49:	3c 04                	cmp    al,0x4
c0023c4b:	75 12                	jne    c0023c5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c4d:	83 ec 0c             	sub    esp,0xc
c0023c50:	b3 08                	mov    bl,0x8
c0023c52:	68 ef cd 02 c0       	push   0xc002cdef
c0023c57:	e8 da f3 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023c5c:	83 c4 10             	add    esp,0x10
c0023c5f:	50                   	push   eax
c0023c60:	50                   	push   eax
c0023c61:	0f b6 c3             	movzx  eax,bl
c0023c64:	50                   	push   eax
c0023c65:	68 07 ce 02 c0       	push   0xc002ce07
c0023c6a:	e8 c7 f3 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023c6f:	83 c4 10             	add    esp,0x10
c0023c72:	83 c4 1c             	add    esp,0x1c
c0023c75:	88 d8                	mov    al,bl
c0023c77:	5b                   	pop    ebx
c0023c78:	5e                   	pop    esi
c0023c79:	5f                   	pop    edi
c0023c7a:	5d                   	pop    ebp
c0023c7b:	c3                   	ret    

c0023c7c <IDE::polling(unsigned char, unsigned int)>:
c0023c7c:	57                   	push   edi
c0023c7d:	56                   	push   esi
c0023c7e:	53                   	push   ebx
c0023c7f:	bb 04 00 00 00       	mov    ebx,0x4
c0023c84:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c88:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c8d:	52                   	push   edx
c0023c8e:	6a 0c                	push   0xc
c0023c90:	56                   	push   esi
c0023c91:	57                   	push   edi
c0023c92:	e8 f9 f4 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023c97:	83 c4 10             	add    esp,0x10
c0023c9a:	4b                   	dec    ebx
c0023c9b:	75 f0                	jne    c0023c8d <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c9d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023ca2:	50                   	push   eax
c0023ca3:	6a 0c                	push   0xc
c0023ca5:	56                   	push   esi
c0023ca6:	57                   	push   edi
c0023ca7:	e8 e4 f4 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0023cac:	83 c4 10             	add    esp,0x10
c0023caf:	a8 01                	test   al,0x1
c0023cb1:	74 12                	je     c0023cc5 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023cb3:	83 ec 0c             	sub    esp,0xc
c0023cb6:	68 21 ce 02 c0       	push   0xc002ce21
c0023cbb:	e8 76 f3 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023cc0:	83 c4 10             	add    esp,0x10
c0023cc3:	eb 17                	jmp    c0023cdc <IDE::polling(unsigned char, unsigned int)+0x60>
c0023cc5:	a8 20                	test   al,0x20
c0023cc7:	75 0f                	jne    c0023cd8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023cc9:	4b                   	dec    ebx
c0023cca:	74 10                	je     c0023cdc <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ccc:	84 c0                	test   al,al
c0023cce:	78 d2                	js     c0023ca2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023cd0:	a8 08                	test   al,0x8
c0023cd2:	74 ce                	je     c0023ca2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023cd4:	31 c0                	xor    eax,eax
c0023cd6:	eb 06                	jmp    c0023cde <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cd8:	b0 01                	mov    al,0x1
c0023cda:	eb 02                	jmp    c0023cde <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cdc:	b0 02                	mov    al,0x2
c0023cde:	5b                   	pop    ebx
c0023cdf:	5e                   	pop    esi
c0023ce0:	5f                   	pop    edi
c0023ce1:	c3                   	ret    

c0023ce2 <SATABus::close(int, int, void*)>:
c0023ce2:	31 c0                	xor    eax,eax
c0023ce4:	c3                   	ret    
c0023ce5:	90                   	nop

c0023ce6 <SATABus::detect()>:
c0023ce6:	c3                   	ret    
c0023ce7:	90                   	nop

c0023ce8 <SATABus::SATABus()>:
c0023ce8:	83 ec 0c             	sub    esp,0xc
c0023ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cef:	83 ec 08             	sub    esp,0x8
c0023cf2:	68 64 ce 02 c0       	push   0xc002ce64
c0023cf7:	50                   	push   eax
c0023cf8:	e8 eb 0a ff ff       	call   c00147e8 <HardDiskController::HardDiskController(char const*)>
c0023cfd:	83 c4 10             	add    esp,0x10
c0023d00:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c0023d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d09:	89 10                	mov    DWORD PTR [eax],edx
c0023d0b:	83 ec 0c             	sub    esp,0xc
c0023d0e:	6a 50                	push   0x50
c0023d10:	e8 54 c3 fe ff       	call   c0010069 <Phys::allocateContiguousPages(int)>
c0023d15:	83 c4 10             	add    esp,0x10
c0023d18:	89 c2                	mov    edx,eax
c0023d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d1e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023d24:	83 ec 0c             	sub    esp,0xc
c0023d27:	6a 50                	push   0x50
c0023d29:	e8 b5 de fe ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0023d2e:	83 c4 10             	add    esp,0x10
c0023d31:	89 c2                	mov    edx,eax
c0023d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d3d:	e8 3c e1 fe ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0023d42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d46:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d50:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d56:	83 ec 0c             	sub    esp,0xc
c0023d59:	6a 03                	push   0x3
c0023d5b:	6a 50                	push   0x50
c0023d5d:	51                   	push   ecx
c0023d5e:	52                   	push   edx
c0023d5f:	50                   	push   eax
c0023d60:	e8 49 e9 fe ff       	call   c00126ae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d65:	83 c4 20             	add    esp,0x20
c0023d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d6c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d76:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d7c:	83 ec 04             	sub    esp,0x4
c0023d7f:	52                   	push   edx
c0023d80:	50                   	push   eax
c0023d81:	68 88 ce 02 c0       	push   0xc002ce88
c0023d86:	e8 ab f2 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023d8b:	83 c4 10             	add    esp,0x10
c0023d8e:	90                   	nop
c0023d8f:	83 c4 0c             	add    esp,0xc
c0023d92:	c3                   	ret    
c0023d93:	90                   	nop

c0023d94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d94:	83 ec 0c             	sub    esp,0xc
c0023d97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d9b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023da1:	09 c2                	or     edx,eax
c0023da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023da7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023dad:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023daf:	31 c0                	xor    eax,eax
c0023db1:	c1 e9 08             	shr    ecx,0x8
c0023db4:	83 e1 0f             	and    ecx,0xf
c0023db7:	39 c8                	cmp    eax,ecx
c0023db9:	74 0a                	je     c0023dc5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023dbb:	f6 c2 01             	test   dl,0x1
c0023dbe:	74 18                	je     c0023dd8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dc0:	d1 ea                	shr    edx,1
c0023dc2:	40                   	inc    eax
c0023dc3:	eb f2                	jmp    c0023db7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023dc5:	83 ec 0c             	sub    esp,0xc
c0023dc8:	68 ac ce 02 c0       	push   0xc002ceac
c0023dcd:	e8 15 69 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0023dd2:	83 c4 10             	add    esp,0x10
c0023dd5:	83 c8 ff             	or     eax,0xffffffff
c0023dd8:	83 c4 0c             	add    esp,0xc
c0023ddb:	c3                   	ret    

c0023ddc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023ddc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023de0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023de3:	89 c2                	mov    edx,eax
c0023de5:	c1 ea 08             	shr    edx,0x8
c0023de8:	83 e2 0f             	and    edx,0xf
c0023deb:	fe ca                	dec    dl
c0023ded:	75 31                	jne    c0023e20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023def:	83 e0 0f             	and    eax,0xf
c0023df2:	3c 03                	cmp    al,0x3
c0023df4:	75 2a                	jne    c0023e20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023df6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023df9:	b8 02 00 00 00       	mov    eax,0x2
c0023dfe:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023e04:	74 1c                	je     c0023e22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e06:	b8 04 00 00 00       	mov    eax,0x4
c0023e0b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023e11:	74 0f                	je     c0023e22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e13:	31 c0                	xor    eax,eax
c0023e15:	83 fa 03             	cmp    edx,0x3
c0023e18:	0f 94 c0             	sete   al
c0023e1b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023e1f:	c3                   	ret    
c0023e20:	31 c0                	xor    eax,eax
c0023e22:	c3                   	ret    
c0023e23:	90                   	nop

c0023e24 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e28:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e2b:	0f ba e2 0f          	bt     edx,0xf
c0023e2f:	72 f7                	jb     c0023e28 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e31:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e34:	83 ca 10             	or     edx,0x10
c0023e37:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e3a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e3d:	83 ca 01             	or     edx,0x1
c0023e40:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e43:	c3                   	ret    

c0023e44 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e4b:	83 e2 fe             	and    edx,0xfffffffe
c0023e4e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e51:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e54:	83 e2 ef             	and    edx,0xffffffef
c0023e57:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e5d:	0f ba e2 0e          	bt     edx,0xe
c0023e61:	72 f7                	jb     c0023e5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e63:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e66:	0f ba e2 0f          	bt     edx,0xf
c0023e6a:	72 ee                	jb     c0023e5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e6c:	c3                   	ret    
c0023e6d:	90                   	nop

c0023e6e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e6e:	55                   	push   ebp
c0023e6f:	57                   	push   edi
c0023e70:	56                   	push   esi
c0023e71:	53                   	push   ebx
c0023e72:	83 ec 1c             	sub    esp,0x1c
c0023e75:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e79:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e7d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e81:	53                   	push   ebx
c0023e82:	89 fd                	mov    ebp,edi
c0023e84:	56                   	push   esi
c0023e85:	c1 e5 0a             	shl    ebp,0xa
c0023e88:	e8 b7 ff ff ff       	call   c0023e44 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e8d:	83 ec 0c             	sub    esp,0xc
c0023e90:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e96:	01 e8                	add    eax,ebp
c0023e98:	89 03                	mov    DWORD PTR [ebx],eax
c0023e9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e9c:	68 00 04 00 00       	push   0x400
c0023ea1:	6a 00                	push   0x0
c0023ea3:	50                   	push   eax
c0023ea4:	e8 cf c8 fd ff       	call   c0000778 <memset>
c0023ea9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023eaf:	89 fa                	mov    edx,edi
c0023eb1:	01 e8                	add    eax,ebp
c0023eb3:	c1 e7 0d             	shl    edi,0xd
c0023eb6:	89 03                	mov    DWORD PTR [ebx],eax
c0023eb8:	c1 e2 08             	shl    edx,0x8
c0023ebb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023ec2:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ec8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ecc:	89 d0                	mov    eax,edx
c0023ece:	83 c4 1c             	add    esp,0x1c
c0023ed1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ed7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023eda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023edd:	68 00 01 00 00       	push   0x100
c0023ee2:	6a 00                	push   0x0
c0023ee4:	50                   	push   eax
c0023ee5:	e8 8e c8 fd ff       	call   c0000778 <memset>
c0023eea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023eee:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023ef4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023efa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023efe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023f01:	83 c4 10             	add    esp,0x10
c0023f04:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023f0b:	31 ff                	xor    edi,edi
c0023f0d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023f13:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023f19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f1d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f23:	83 c5 20             	add    ebp,0x20
c0023f26:	01 f8                	add    eax,edi
c0023f28:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f2b:	52                   	push   edx
c0023f2c:	68 00 01 00 00       	push   0x100
c0023f31:	6a 00                	push   0x0
c0023f33:	50                   	push   eax
c0023f34:	e8 3f c8 fd ff       	call   c0000778 <memset>
c0023f39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f3d:	83 c4 10             	add    esp,0x10
c0023f40:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f46:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f4d:	01 f8                	add    eax,edi
c0023f4f:	81 c7 00 01 00 00    	add    edi,0x100
c0023f55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f58:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f5e:	75 b3                	jne    c0023f13 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f60:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f64:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f68:	83 c4 1c             	add    esp,0x1c
c0023f6b:	5b                   	pop    ebx
c0023f6c:	5e                   	pop    esi
c0023f6d:	5f                   	pop    edi
c0023f6e:	5d                   	pop    ebp
c0023f6f:	e9 b0 fe ff ff       	jmp    c0023e24 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f74:	55                   	push   ebp
c0023f75:	57                   	push   edi
c0023f76:	56                   	push   esi
c0023f77:	53                   	push   ebx
c0023f78:	31 db                	xor    ebx,ebx
c0023f7a:	83 ec 0c             	sub    esp,0xc
c0023f7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f81:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f85:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f88:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f8e:	0f 84 aa 00 00 00    	je     c002403e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f94:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f98:	89 d8                	mov    eax,ebx
c0023f9a:	c1 e0 07             	shl    eax,0x7
c0023f9d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023fa4:	55                   	push   ebp
c0023fa5:	56                   	push   esi
c0023fa6:	e8 31 fe ff ff       	call   c0023ddc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023fab:	5a                   	pop    edx
c0023fac:	83 f8 01             	cmp    eax,0x1
c0023faf:	59                   	pop    ecx
c0023fb0:	75 30                	jne    c0023fe2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023fb2:	50                   	push   eax
c0023fb3:	50                   	push   eax
c0023fb4:	53                   	push   ebx
c0023fb5:	68 d1 ce 02 c0       	push   0xc002ced1
c0023fba:	e8 77 f0 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023fbf:	83 c4 0c             	add    esp,0xc
c0023fc2:	53                   	push   ebx
c0023fc3:	55                   	push   ebp
c0023fc4:	56                   	push   esi
c0023fc5:	e8 a4 fe ff ff       	call   c0023e6e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fca:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023fd1:	e8 6a b8 fe ff       	call   c000f840 <malloc>
c0023fd6:	89 c5                	mov    ebp,eax
c0023fd8:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fdb:	e8 60 0d 00 00       	call   c0024d40 <SATA::SATA()>
c0023fe0:	eb 33                	jmp    c0024015 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023fe2:	83 f8 04             	cmp    eax,0x4
c0023fe5:	75 47                	jne    c002402e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023fe7:	50                   	push   eax
c0023fe8:	50                   	push   eax
c0023fe9:	53                   	push   ebx
c0023fea:	68 e8 ce 02 c0       	push   0xc002cee8
c0023fef:	e8 42 f0 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0023ff4:	83 c4 0c             	add    esp,0xc
c0023ff7:	53                   	push   ebx
c0023ff8:	55                   	push   ebp
c0023ff9:	56                   	push   esi
c0023ffa:	e8 6f fe ff ff       	call   c0023e6e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fff:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024006:	e8 35 b8 fe ff       	call   c000f840 <malloc>
c002400b:	89 c5                	mov    ebp,eax
c002400d:	89 04 24             	mov    DWORD PTR [esp],eax
c0024010:	e8 d7 10 00 00       	call   c00250ec <SATAPI::SATAPI()>
c0024015:	5a                   	pop    edx
c0024016:	59                   	pop    ecx
c0024017:	55                   	push   ebp
c0024018:	56                   	push   esi
c0024019:	e8 3e 04 ff ff       	call   c001445c <Device::addChild(Device*)>
c002401e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024021:	56                   	push   esi
c0024022:	6a 00                	push   0x0
c0024024:	53                   	push   ebx
c0024025:	55                   	push   ebp
c0024026:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024029:	83 c4 20             	add    esp,0x20
c002402c:	eb 10                	jmp    c002403e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002402e:	50                   	push   eax
c002402f:	50                   	push   eax
c0024030:	53                   	push   ebx
c0024031:	68 01 cf 02 c0       	push   0xc002cf01
c0024036:	e8 fb ef fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c002403b:	83 c4 10             	add    esp,0x10
c002403e:	d1 ef                	shr    edi,1
c0024040:	43                   	inc    ebx
c0024041:	83 fb 20             	cmp    ebx,0x20
c0024044:	0f 85 3e ff ff ff    	jne    c0023f88 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002404a:	83 c4 0c             	add    esp,0xc
c002404d:	5b                   	pop    ebx
c002404e:	5e                   	pop    esi
c002404f:	5f                   	pop    edi
c0024050:	5d                   	pop    ebp
c0024051:	c3                   	ret    

c0024052 <SATABus::open(int, int, void*)>:
c0024052:	83 ec 14             	sub    esp,0x14
c0024055:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024059:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002405f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024065:	52                   	push   edx
c0024066:	50                   	push   eax
c0024067:	e8 08 ff ff ff       	call   c0023f74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002406c:	31 c0                	xor    eax,eax
c002406e:	83 c4 1c             	add    esp,0x1c
c0024071:	c3                   	ret    

c0024072 <ATA::close(int, int, void*)>:
c0024072:	83 ec 0c             	sub    esp,0xc
c0024075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024079:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002407f:	85 c0                	test   eax,eax
c0024081:	74 0c                	je     c002408f <ATA::close(int, int, void*)+0x1d>
c0024083:	83 ec 0c             	sub    esp,0xc
c0024086:	8b 10                	mov    edx,DWORD PTR [eax]
c0024088:	50                   	push   eax
c0024089:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002408c:	83 c4 10             	add    esp,0x10
c002408f:	31 c0                	xor    eax,eax
c0024091:	83 c4 0c             	add    esp,0xc
c0024094:	c3                   	ret    
c0024095:	90                   	nop

c0024096 <ATA::powerSaving(PowerSavingLevel)>:
c0024096:	c3                   	ret    
c0024097:	90                   	nop

c0024098 <ATA::ATA()>:
c0024098:	83 ec 0c             	sub    esp,0xc
c002409b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002409f:	83 ec 04             	sub    esp,0x4
c00240a2:	68 00 02 00 00       	push   0x200
c00240a7:	68 e9 cf 02 c0       	push   0xc002cfe9
c00240ac:	50                   	push   eax
c00240ad:	e8 ce 07 ff ff       	call   c0014880 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00240b2:	83 c4 10             	add    esp,0x10
c00240b5:	ba 6c cf 02 c0       	mov    edx,0xc002cf6c
c00240ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240be:	89 10                	mov    DWORD PTR [eax],edx
c00240c0:	90                   	nop
c00240c1:	83 c4 0c             	add    esp,0xc
c00240c4:	c3                   	ret    
c00240c5:	90                   	nop

c00240c6 <ATA::flush(bool)>:
c00240c6:	53                   	push   ebx
c00240c7:	83 ec 08             	sub    esp,0x8
c00240ca:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00240cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240d3:	19 c0                	sbb    eax,eax
c00240d5:	83 e0 fd             	and    eax,0xfffffffd
c00240d8:	05 ea 00 00 00       	add    eax,0xea
c00240dd:	50                   	push   eax
c00240de:	6a 07                	push   0x7
c00240e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e7:	50                   	push   eax
c00240e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ee:	e8 dd ef ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240f3:	83 c4 0c             	add    esp,0xc
c00240f6:	6a 00                	push   0x0
c00240f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240ff:	50                   	push   eax
c0024100:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024106:	e8 71 fb ff ff       	call   c0023c7c <IDE::polling(unsigned char, unsigned int)>
c002410b:	83 c4 18             	add    esp,0x18
c002410e:	5b                   	pop    ebx
c002410f:	c3                   	ret    

c0024110 <ATA::readyForCommand()>:
c0024110:	56                   	push   esi
c0024111:	53                   	push   ebx
c0024112:	31 db                	xor    ebx,ebx
c0024114:	50                   	push   eax
c0024115:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024119:	50                   	push   eax
c002411a:	6a 0c                	push   0xc
c002411c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024123:	50                   	push   eax
c0024124:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002412a:	e8 61 f0 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c002412f:	83 c4 10             	add    esp,0x10
c0024132:	a8 88                	test   al,0x88
c0024134:	74 23                	je     c0024159 <ATA::readyForCommand()+0x49>
c0024136:	43                   	inc    ebx
c0024137:	83 fb 63             	cmp    ebx,0x63
c002413a:	7e dd                	jle    c0024119 <ATA::readyForCommand()+0x9>
c002413c:	51                   	push   ecx
c002413d:	51                   	push   ecx
c002413e:	6a 00                	push   0x0
c0024140:	68 40 42 0f 00       	push   0xf4240
c0024145:	e8 c8 a2 ff ff       	call   c001e412 <nanoSleep(unsigned long long)>
c002414a:	83 c4 10             	add    esp,0x10
c002414d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024153:	75 c4                	jne    c0024119 <ATA::readyForCommand()+0x9>
c0024155:	31 c0                	xor    eax,eax
c0024157:	eb 02                	jmp    c002415b <ATA::readyForCommand()+0x4b>
c0024159:	b0 01                	mov    al,0x1
c002415b:	5a                   	pop    edx
c002415c:	5b                   	pop    ebx
c002415d:	5e                   	pop    esi
c002415e:	c3                   	ret    
c002415f:	90                   	nop

c0024160 <ATA::access(unsigned long long, int, void*, bool)>:
c0024160:	55                   	push   ebp
c0024161:	57                   	push   edi
c0024162:	56                   	push   esi
c0024163:	53                   	push   ebx
c0024164:	83 ec 2c             	sub    esp,0x2c
c0024167:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002416b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002416f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024173:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024177:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002417b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002417f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024183:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024189:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002418d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024193:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024197:	c1 e0 06             	shl    eax,0x6
c002419a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00241a2:	74 5d                	je     c0024201 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00241a4:	89 fa                	mov    edx,edi
c00241a6:	89 f0                	mov    eax,esi
c00241a8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00241ac:	c1 ea 1c             	shr    edx,0x1c
c00241af:	89 d1                	mov    ecx,edx
c00241b1:	09 c1                	or     ecx,eax
c00241b3:	74 25                	je     c00241da <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00241b5:	31 ed                	xor    ebp,ebp
c00241b7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00241be:	89 fa                	mov    edx,edi
c00241c0:	89 f0                	mov    eax,esi
c00241c2:	0f ad d0             	shrd   eax,edx,cl
c00241c5:	d3 ea                	shr    edx,cl
c00241c7:	f6 c1 20             	test   cl,0x20
c00241ca:	74 02                	je     c00241ce <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00241cc:	89 d0                	mov    eax,edx
c00241ce:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241d2:	45                   	inc    ebp
c00241d3:	83 fd 06             	cmp    ebp,0x6
c00241d6:	75 df                	jne    c00241b7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00241d8:	eb 76                	jmp    c0024250 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00241da:	89 f0                	mov    eax,esi
c00241dc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241e1:	89 fa                	mov    edx,edi
c00241e3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241ea:	0f ac d0 10          	shrd   eax,edx,0x10
c00241ee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241f3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00241f7:	c1 ee 18             	shr    esi,0x18
c00241fa:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00241ff:	eb 56                	jmp    c0024257 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024201:	6a 00                	push   0x0
c0024203:	6a 3f                	push   0x3f
c0024205:	57                   	push   edi
c0024206:	56                   	push   esi
c0024207:	e8 90 29 00 00       	call   c0026b9c <__umoddi3>
c002420c:	83 c4 10             	add    esp,0x10
c002420f:	40                   	inc    eax
c0024210:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024214:	6a 00                	push   0x0
c0024216:	68 f0 03 00 00       	push   0x3f0
c002421b:	57                   	push   edi
c002421c:	56                   	push   esi
c002421d:	e8 7a 28 00 00       	call   c0026a9c <__udivdi3>
c0024222:	83 c4 10             	add    esp,0x10
c0024225:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002422a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024231:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024236:	6a 00                	push   0x0
c0024238:	6a 3f                	push   0x3f
c002423a:	57                   	push   edi
c002423b:	56                   	push   esi
c002423c:	e8 5b 28 00 00       	call   c0026a9c <__udivdi3>
c0024241:	83 c4 10             	add    esp,0x10
c0024244:	89 c6                	mov    esi,eax
c0024246:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002424b:	83 e6 0f             	and    esi,0xf
c002424e:	eb 07                	jmp    c0024257 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024250:	31 f6                	xor    esi,esi
c0024252:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024257:	bf 01 00 00 00       	mov    edi,0x1
c002425c:	50                   	push   eax
c002425d:	6a 00                	push   0x0
c002425f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024266:	50                   	push   eax
c0024267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002426b:	e8 6c f0 ff ff       	call   c00232dc <IDE::enableIRQs(unsigned char, bool)>
c0024270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024273:	e8 98 fe ff ff       	call   c0024110 <ATA::readyForCommand()>
c0024278:	83 c4 10             	add    esp,0x10
c002427b:	84 c0                	test   al,al
c002427d:	0f 84 5a 02 00 00    	je     c00244dd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024283:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024289:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002428f:	c1 e0 04             	shl    eax,0x4
c0024292:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024299:	09 c6                	or     esi,eax
c002429b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00242a0:	75 05                	jne    c00242a7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00242a2:	83 ce a0             	or     esi,0xffffffa0
c00242a5:	eb 03                	jmp    c00242aa <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00242a7:	83 ce e0             	or     esi,0xffffffe0
c00242aa:	89 f0                	mov    eax,esi
c00242ac:	0f b6 f0             	movzx  esi,al
c00242af:	56                   	push   esi
c00242b0:	6a 06                	push   0x6
c00242b2:	51                   	push   ecx
c00242b3:	52                   	push   edx
c00242b4:	e8 17 ee ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b9:	83 c4 10             	add    esp,0x10
c00242bc:	6a 00                	push   0x0
c00242be:	6a 01                	push   0x1
c00242c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c7:	50                   	push   eax
c00242c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ce:	e8 fd ed ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d3:	83 c4 10             	add    esp,0x10
c00242d6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242db:	75 6e                	jne    c002434b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00242dd:	6a 00                	push   0x0
c00242df:	6a 08                	push   0x8
c00242e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e8:	50                   	push   eax
c00242e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ef:	e8 dc ed ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00242f9:	50                   	push   eax
c00242fa:	6a 09                	push   0x9
c00242fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024303:	50                   	push   eax
c0024304:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002430a:	e8 c1 ed ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430f:	83 c4 20             	add    esp,0x20
c0024312:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024317:	50                   	push   eax
c0024318:	6a 0a                	push   0xa
c002431a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024321:	50                   	push   eax
c0024322:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024328:	e8 a3 ed ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002432d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024332:	50                   	push   eax
c0024333:	6a 0b                	push   0xb
c0024335:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002433c:	50                   	push   eax
c002433d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024343:	e8 88 ed ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024348:	83 c4 20             	add    esp,0x20
c002434b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024350:	50                   	push   eax
c0024351:	6a 02                	push   0x2
c0024353:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002435a:	50                   	push   eax
c002435b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024361:	e8 6a ed ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024366:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002436b:	50                   	push   eax
c002436c:	6a 03                	push   0x3
c002436e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024375:	50                   	push   eax
c0024376:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002437c:	e8 4f ed ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024381:	83 c4 20             	add    esp,0x20
c0024384:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024389:	50                   	push   eax
c002438a:	6a 04                	push   0x4
c002438c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024393:	50                   	push   eax
c0024394:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002439a:	e8 31 ed ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002439f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00243a4:	50                   	push   eax
c00243a5:	6a 05                	push   0x5
c00243a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ae:	50                   	push   eax
c00243af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b5:	e8 16 ed ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243ba:	83 c4 20             	add    esp,0x20
c00243bd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00243c2:	0f 94 c0             	sete   al
c00243c5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243ca:	74 09                	je     c00243d5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00243cc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243d3:	eb 07                	jmp    c00243dc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00243d5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243dc:	0f b6 c0             	movzx  eax,al
c00243df:	50                   	push   eax
c00243e0:	6a 07                	push   0x7
c00243e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e9:	50                   	push   eax
c00243ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243f0:	e8 db ec ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243f5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00243f9:	83 c4 10             	add    esp,0x10
c00243fc:	85 f6                	test   esi,esi
c00243fe:	0f 84 ba 00 00 00    	je     c00244be <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024404:	50                   	push   eax
c0024405:	6a 01                	push   0x1
c0024407:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002440e:	50                   	push   eax
c002440f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024415:	e8 62 f8 ff ff       	call   c0023c7c <IDE::polling(unsigned char, unsigned int)>
c002441a:	83 c4 10             	add    esp,0x10
c002441d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024423:	84 c0                	test   al,al
c0024425:	74 2c                	je     c0024453 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024427:	0f b6 f8             	movzx  edi,al
c002442a:	0f b6 d2             	movzx  edx,dl
c002442d:	57                   	push   edi
c002442e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024435:	50                   	push   eax
c0024436:	52                   	push   edx
c0024437:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002443d:	e8 a4 f6 ff ff       	call   c0023ae6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024442:	c7 04 24 44 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf44
c0024449:	e8 e8 eb fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c002444e:	e9 87 00 00 00       	jmp    c00244da <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024453:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024458:	74 33                	je     c002448d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002445a:	31 ed                	xor    ebp,ebp
c002445c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024460:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024464:	50                   	push   eax
c0024465:	50                   	push   eax
c0024466:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002446d:	50                   	push   eax
c002446e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024474:	e8 45 ec ff ff       	call   c00230be <IDE::getBase(unsigned char)>
c0024479:	89 c2                	mov    edx,eax
c002447b:	89 f8                	mov    eax,edi
c002447d:	66 ef                	out    dx,ax
c002447f:	45                   	inc    ebp
c0024480:	83 c4 10             	add    esp,0x10
c0024483:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024489:	75 d1                	jne    c002445c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002448b:	eb 23                	jmp    c00244b0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002448d:	0f b6 d2             	movzx  edx,dl
c0024490:	51                   	push   ecx
c0024491:	51                   	push   ecx
c0024492:	52                   	push   edx
c0024493:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024499:	e8 20 ec ff ff       	call   c00230be <IDE::getBase(unsigned char)>
c002449e:	b9 00 01 00 00       	mov    ecx,0x100
c00244a3:	89 c2                	mov    edx,eax
c00244a5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00244a9:	fc                   	cld    
c00244aa:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00244ad:	83 c4 10             	add    esp,0x10
c00244b0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00244b8:	4e                   	dec    esi
c00244b9:	e9 3e ff ff ff       	jmp    c00243fc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00244be:	31 ff                	xor    edi,edi
c00244c0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00244c5:	74 16                	je     c00244dd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00244c7:	50                   	push   eax
c00244c8:	50                   	push   eax
c00244c9:	31 c0                	xor    eax,eax
c00244cb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00244d0:	0f 94 c0             	sete   al
c00244d3:	50                   	push   eax
c00244d4:	53                   	push   ebx
c00244d5:	e8 ec fb ff ff       	call   c00240c6 <ATA::flush(bool)>
c00244da:	83 c4 10             	add    esp,0x10
c00244dd:	83 c4 2c             	add    esp,0x2c
c00244e0:	89 f8                	mov    eax,edi
c00244e2:	5b                   	pop    ebx
c00244e3:	5e                   	pop    esi
c00244e4:	5f                   	pop    edi
c00244e5:	5d                   	pop    ebp
c00244e6:	c3                   	ret    
c00244e7:	90                   	nop

c00244e8 <ATA::read(unsigned long long, int, void*)>:
c00244e8:	57                   	push   edi
c00244e9:	b8 04 00 00 00       	mov    eax,0x4
c00244ee:	56                   	push   esi
c00244ef:	53                   	push   ebx
c00244f0:	83 ec 10             	sub    esp,0x10
c00244f3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244fb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024502:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024506:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002450c:	77 3b                	ja     c0024549 <ATA::read(unsigned long long, int, void*)+0x61>
c002450e:	b8 06 00 00 00       	mov    eax,0x6
c0024513:	85 d2                	test   edx,edx
c0024515:	74 32                	je     c0024549 <ATA::read(unsigned long long, int, void*)+0x61>
c0024517:	50                   	push   eax
c0024518:	50                   	push   eax
c0024519:	6a 00                	push   0x0
c002451b:	52                   	push   edx
c002451c:	53                   	push   ebx
c002451d:	57                   	push   edi
c002451e:	56                   	push   esi
c002451f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024523:	e8 38 fc ff ff       	call   c0024160 <ATA::access(unsigned long long, int, void*, bool)>
c0024528:	83 c4 20             	add    esp,0x20
c002452b:	85 c0                	test   eax,eax
c002452d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024531:	75 11                	jne    c0024544 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024533:	01 1d 08 29 03 c0    	add    DWORD PTR ds:0xc0032908,ebx
c0024539:	e8 fa c4 fe ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c002453e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024542:	eb 05                	jmp    c0024549 <ATA::read(unsigned long long, int, void*)+0x61>
c0024544:	b8 01 00 00 00       	mov    eax,0x1
c0024549:	83 c4 10             	add    esp,0x10
c002454c:	5b                   	pop    ebx
c002454d:	5e                   	pop    esi
c002454e:	5f                   	pop    edi
c002454f:	c3                   	ret    

c0024550 <ATA::write(unsigned long long, int, void*)>:
c0024550:	57                   	push   edi
c0024551:	b8 04 00 00 00       	mov    eax,0x4
c0024556:	56                   	push   esi
c0024557:	53                   	push   ebx
c0024558:	83 ec 10             	sub    esp,0x10
c002455b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002455f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024563:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024566:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002456a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002456e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024574:	77 3b                	ja     c00245b1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024576:	b8 06 00 00 00       	mov    eax,0x6
c002457b:	85 d2                	test   edx,edx
c002457d:	74 32                	je     c00245b1 <ATA::write(unsigned long long, int, void*)+0x61>
c002457f:	50                   	push   eax
c0024580:	50                   	push   eax
c0024581:	6a 01                	push   0x1
c0024583:	52                   	push   edx
c0024584:	53                   	push   ebx
c0024585:	57                   	push   edi
c0024586:	56                   	push   esi
c0024587:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002458b:	e8 d0 fb ff ff       	call   c0024160 <ATA::access(unsigned long long, int, void*, bool)>
c0024590:	83 c4 20             	add    esp,0x20
c0024593:	85 c0                	test   eax,eax
c0024595:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024599:	75 11                	jne    c00245ac <ATA::write(unsigned long long, int, void*)+0x5c>
c002459b:	01 1d 04 29 03 c0    	add    DWORD PTR ds:0xc0032904,ebx
c00245a1:	e8 92 c4 fe ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c00245a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245aa:	eb 05                	jmp    c00245b1 <ATA::write(unsigned long long, int, void*)+0x61>
c00245ac:	b8 01 00 00 00       	mov    eax,0x1
c00245b1:	83 c4 10             	add    esp,0x10
c00245b4:	5b                   	pop    ebx
c00245b5:	5e                   	pop    esi
c00245b6:	5f                   	pop    edi
c00245b7:	c3                   	ret    

c00245b8 <ATA::detectCHS()>:
c00245b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00245bc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00245c2:	c1 e0 06             	shl    eax,0x6
c00245c5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00245cb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00245d5:	c7 44 24 04 4f cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cf4f
c00245dd:	e9 05 61 ff ff       	jmp    c001a6e7 <Krnl::panic(char const*)>

c00245e2 <ATA::open(int, int, void*)>:
c00245e2:	53                   	push   ebx
c00245e3:	83 ec 08             	sub    esp,0x8
c00245e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00245ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245f2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245f8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245fe:	c1 e0 06             	shl    eax,0x6
c0024601:	01 d0                	add    eax,edx
c0024603:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002460a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024610:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024617:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024621:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024627:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002462e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024635:	75 0c                	jne    c0024643 <ATA::open(int, int, void*)+0x61>
c0024637:	83 ec 0c             	sub    esp,0xc
c002463a:	53                   	push   ebx
c002463b:	e8 78 ff ff ff       	call   c00245b8 <ATA::detectCHS()>
c0024640:	83 c4 10             	add    esp,0x10
c0024643:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024649:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002464f:	c1 e0 06             	shl    eax,0x6
c0024652:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024659:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024663:	d1 e8                	shr    eax,1
c0024665:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002466b:	6a 04                	push   0x4
c002466d:	6a 0c                	push   0xc
c002466f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024676:	50                   	push   eax
c0024677:	52                   	push   edx
c0024678:	e8 53 ea ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002467d:	90                   	nop
c002467e:	90                   	nop
c002467f:	6a 00                	push   0x0
c0024681:	6a 0c                	push   0xc
c0024683:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002468a:	50                   	push   eax
c002468b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024691:	e8 3a ea ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024696:	83 c4 14             	add    esp,0x14
c0024699:	53                   	push   ebx
c002469a:	e8 49 02 ff ff       	call   c00148e8 <PhysicalDisk::startCache()>
c002469f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00246a2:	e8 c7 23 ff ff       	call   c0016a6e <createPartitionsForDisk(PhysicalDisk*)>
c00246a7:	31 c0                	xor    eax,eax
c00246a9:	83 c4 18             	add    esp,0x18
c00246ac:	5b                   	pop    ebx
c00246ad:	c3                   	ret    

c00246ae <ATAPI::write(unsigned long long, int, void*)>:
c00246ae:	b8 03 00 00 00       	mov    eax,0x3
c00246b3:	c3                   	ret    

c00246b4 <ATAPI::close(int, int, void*)>:
c00246b4:	83 ec 0c             	sub    esp,0xc
c00246b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00246c1:	85 c0                	test   eax,eax
c00246c3:	74 0c                	je     c00246d1 <ATAPI::close(int, int, void*)+0x1d>
c00246c5:	83 ec 0c             	sub    esp,0xc
c00246c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00246ca:	50                   	push   eax
c00246cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00246ce:	83 c4 10             	add    esp,0x10
c00246d1:	31 c0                	xor    eax,eax
c00246d3:	83 c4 0c             	add    esp,0xc
c00246d6:	c3                   	ret    
c00246d7:	90                   	nop

c00246d8 <ATAPI::ATAPI()>:
c00246d8:	83 ec 0c             	sub    esp,0xc
c00246db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246df:	83 ec 04             	sub    esp,0x4
c00246e2:	68 00 08 00 00       	push   0x800
c00246e7:	68 89 d0 02 c0       	push   0xc002d089
c00246ec:	50                   	push   eax
c00246ed:	e8 8e 01 ff ff       	call   c0014880 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246f2:	83 c4 10             	add    esp,0x10
c00246f5:	ba a4 cf 02 c0       	mov    edx,0xc002cfa4
c00246fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246fe:	89 10                	mov    DWORD PTR [eax],edx
c0024700:	90                   	nop
c0024701:	83 c4 0c             	add    esp,0xc
c0024704:	c3                   	ret    
c0024705:	90                   	nop

c0024706 <ATAPI::readyForCommand()>:
c0024706:	56                   	push   esi
c0024707:	53                   	push   ebx
c0024708:	31 db                	xor    ebx,ebx
c002470a:	50                   	push   eax
c002470b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002470f:	50                   	push   eax
c0024710:	6a 0c                	push   0xc
c0024712:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024719:	50                   	push   eax
c002471a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024720:	e8 6b ea ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0024725:	83 c4 10             	add    esp,0x10
c0024728:	a8 88                	test   al,0x88
c002472a:	74 23                	je     c002474f <ATAPI::readyForCommand()+0x49>
c002472c:	43                   	inc    ebx
c002472d:	83 fb 63             	cmp    ebx,0x63
c0024730:	7e dd                	jle    c002470f <ATAPI::readyForCommand()+0x9>
c0024732:	51                   	push   ecx
c0024733:	51                   	push   ecx
c0024734:	6a 00                	push   0x0
c0024736:	68 40 42 0f 00       	push   0xf4240
c002473b:	e8 d2 9c ff ff       	call   c001e412 <nanoSleep(unsigned long long)>
c0024740:	83 c4 10             	add    esp,0x10
c0024743:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024749:	75 c4                	jne    c002470f <ATAPI::readyForCommand()+0x9>
c002474b:	31 c0                	xor    eax,eax
c002474d:	eb 02                	jmp    c0024751 <ATAPI::readyForCommand()+0x4b>
c002474f:	b0 01                	mov    al,0x1
c0024751:	5a                   	pop    edx
c0024752:	5b                   	pop    ebx
c0024753:	5e                   	pop    esi
c0024754:	c3                   	ret    
c0024755:	90                   	nop

c0024756 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024756:	55                   	push   ebp
c0024757:	57                   	push   edi
c0024758:	56                   	push   esi
c0024759:	53                   	push   ebx
c002475a:	83 ec 20             	sub    esp,0x20
c002475d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024761:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024765:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024769:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002476d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024771:	6a 01                	push   0x1
c0024773:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002477a:	50                   	push   eax
c002477b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024781:	e8 56 eb ff ff       	call   c00232dc <IDE::enableIRQs(unsigned char, bool)>
c0024786:	5e                   	pop    esi
c0024787:	58                   	pop    eax
c0024788:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002478f:	50                   	push   eax
c0024790:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024796:	e8 0f e9 ff ff       	call   c00230aa <IDE::prepareInterrupt(unsigned char)>
c002479b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002479e:	e8 63 ff ff ff       	call   c0024706 <ATAPI::readyForCommand()>
c00247a3:	83 c4 10             	add    esp,0x10
c00247a6:	84 c0                	test   al,al
c00247a8:	75 0a                	jne    c00247b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00247aa:	bb 01 00 00 00       	mov    ebx,0x1
c00247af:	e9 57 02 00 00       	jmp    c0024a0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247b4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00247ba:	c1 e0 04             	shl    eax,0x4
c00247bd:	0f b6 c0             	movzx  eax,al
c00247c0:	50                   	push   eax
c00247c1:	6a 06                	push   0x6
c00247c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ca:	50                   	push   eax
c00247cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d1:	e8 fa e8 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247d6:	6a 00                	push   0x0
c00247d8:	6a 01                	push   0x1
c00247da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e1:	50                   	push   eax
c00247e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e8:	e8 e3 e8 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247ed:	83 c4 20             	add    esp,0x20
c00247f0:	0f b6 c3             	movzx  eax,bl
c00247f3:	0f b6 df             	movzx  ebx,bh
c00247f6:	50                   	push   eax
c00247f7:	6a 04                	push   0x4
c00247f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024800:	50                   	push   eax
c0024801:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024807:	e8 c4 e8 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002480c:	53                   	push   ebx
c002480d:	6a 05                	push   0x5
c002480f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024816:	50                   	push   eax
c0024817:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002481d:	e8 ae e8 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024822:	83 c4 20             	add    esp,0x20
c0024825:	68 a0 00 00 00       	push   0xa0
c002482a:	6a 07                	push   0x7
c002482c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024833:	50                   	push   eax
c0024834:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002483a:	e8 91 e8 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002483f:	83 c4 0c             	add    esp,0xc
c0024842:	6a 01                	push   0x1
c0024844:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002484b:	50                   	push   eax
c002484c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024852:	e8 25 f4 ff ff       	call   c0023c7c <IDE::polling(unsigned char, unsigned int)>
c0024857:	83 c4 10             	add    esp,0x10
c002485a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024860:	84 c0                	test   al,al
c0024862:	74 23                	je     c0024887 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024864:	0f b6 d8             	movzx  ebx,al
c0024867:	0f b6 d2             	movzx  edx,dl
c002486a:	53                   	push   ebx
c002486b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024872:	50                   	push   eax
c0024873:	52                   	push   edx
c0024874:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002487a:	e8 67 f2 ff ff       	call   c0023ae6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002487f:	83 c4 10             	add    esp,0x10
c0024882:	e9 84 01 00 00       	jmp    c0024a0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024887:	0f b6 d2             	movzx  edx,dl
c002488a:	53                   	push   ebx
c002488b:	53                   	push   ebx
c002488c:	52                   	push   edx
c002488d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024893:	e8 26 e8 ff ff       	call   c00230be <IDE::getBase(unsigned char)>
c0024898:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002489c:	b9 06 00 00 00       	mov    ecx,0x6
c00248a1:	89 c2                	mov    edx,eax
c00248a3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00248a6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00248aa:	83 c4 10             	add    esp,0x10
c00248ad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248b3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248ba:	85 db                	test   ebx,ebx
c00248bc:	0f 84 ec 00 00 00    	je     c00249ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00248c2:	51                   	push   ecx
c00248c3:	51                   	push   ecx
c00248c4:	52                   	push   edx
c00248c5:	50                   	push   eax
c00248c6:	e8 73 e9 ff ff       	call   c002323e <IDE::waitInterrupt(unsigned char)>
c00248cb:	83 c4 10             	add    esp,0x10
c00248ce:	84 c0                	test   al,al
c00248d0:	0f 84 d4 fe ff ff    	je     c00247aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248d6:	56                   	push   esi
c00248d7:	56                   	push   esi
c00248d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248df:	50                   	push   eax
c00248e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248e6:	e8 bf e7 ff ff       	call   c00230aa <IDE::prepareInterrupt(unsigned char)>
c00248eb:	83 c4 0c             	add    esp,0xc
c00248ee:	6a 04                	push   0x4
c00248f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248f7:	50                   	push   eax
c00248f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248fe:	e8 8d e8 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c0024903:	83 c4 0c             	add    esp,0xc
c0024906:	89 c6                	mov    esi,eax
c0024908:	6a 05                	push   0x5
c002490a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024911:	50                   	push   eax
c0024912:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024918:	e8 73 e8 ff ff       	call   c0023190 <IDE::read(unsigned char, unsigned char)>
c002491d:	89 f1                	mov    ecx,esi
c002491f:	0f b6 c0             	movzx  eax,al
c0024922:	0f b6 f1             	movzx  esi,cl
c0024925:	c1 e0 08             	shl    eax,0x8
c0024928:	09 c6                	or     esi,eax
c002492a:	d1 fe                	sar    esi,1
c002492c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024930:	83 c4 10             	add    esp,0x10
c0024933:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024938:	74 41                	je     c002497b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002493a:	31 c9                	xor    ecx,ecx
c002493c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024942:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024949:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002494d:	75 0a                	jne    c0024959 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002494f:	01 c9                	add    ecx,ecx
c0024951:	01 cd                	add    ebp,ecx
c0024953:	4b                   	dec    ebx
c0024954:	e9 54 ff ff ff       	jmp    c00248ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024959:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002495e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024962:	51                   	push   ecx
c0024963:	51                   	push   ecx
c0024964:	52                   	push   edx
c0024965:	50                   	push   eax
c0024966:	e8 53 e7 ff ff       	call   c00230be <IDE::getBase(unsigned char)>
c002496b:	89 c2                	mov    edx,eax
c002496d:	89 f0                	mov    eax,esi
c002496f:	66 ef                	out    dx,ax
c0024971:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024975:	83 c4 10             	add    esp,0x10
c0024978:	41                   	inc    ecx
c0024979:	eb c1                	jmp    c002493c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002497b:	31 f6                	xor    esi,esi
c002497d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024983:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002498a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002498e:	75 06                	jne    c0024996 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024990:	01 f6                	add    esi,esi
c0024992:	01 f5                	add    ebp,esi
c0024994:	eb bd                	jmp    c0024953 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024996:	51                   	push   ecx
c0024997:	51                   	push   ecx
c0024998:	52                   	push   edx
c0024999:	50                   	push   eax
c002499a:	e8 1f e7 ff ff       	call   c00230be <IDE::getBase(unsigned char)>
c002499f:	89 c2                	mov    edx,eax
c00249a1:	66 ed                	in     ax,dx
c00249a3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00249a8:	83 c4 10             	add    esp,0x10
c00249ab:	46                   	inc    esi
c00249ac:	eb cf                	jmp    c002497d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00249ae:	51                   	push   ecx
c00249af:	51                   	push   ecx
c00249b0:	52                   	push   edx
c00249b1:	50                   	push   eax
c00249b2:	e8 87 e8 ff ff       	call   c002323e <IDE::waitInterrupt(unsigned char)>
c00249b7:	83 c4 10             	add    esp,0x10
c00249ba:	84 c0                	test   al,al
c00249bc:	0f 84 e8 fd ff ff    	je     c00247aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00249c2:	bb a0 86 01 00       	mov    ebx,0x186a0
c00249c7:	52                   	push   edx
c00249c8:	52                   	push   edx
c00249c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249d0:	50                   	push   eax
c00249d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249d7:	e8 ce e6 ff ff       	call   c00230aa <IDE::prepareInterrupt(unsigned char)>
c00249dc:	83 c4 10             	add    esp,0x10
c00249df:	50                   	push   eax
c00249e0:	50                   	push   eax
c00249e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249e8:	50                   	push   eax
c00249e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249ef:	e8 ca e6 ff ff       	call   c00230be <IDE::getBase(unsigned char)>
c00249f4:	8d 50 07             	lea    edx,[eax+0x7]
c00249f7:	ec                   	in     al,dx
c00249f8:	83 c4 10             	add    esp,0x10
c00249fb:	a8 88                	test   al,0x88
c00249fd:	74 0a                	je     c0024a09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00249ff:	4b                   	dec    ebx
c0024a00:	75 dd                	jne    c00249df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024a02:	bb 02 00 00 00       	mov    ebx,0x2
c0024a07:	eb 02                	jmp    c0024a0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a09:	31 db                	xor    ebx,ebx
c0024a0b:	83 c4 1c             	add    esp,0x1c
c0024a0e:	89 d8                	mov    eax,ebx
c0024a10:	5b                   	pop    ebx
c0024a11:	5e                   	pop    esi
c0024a12:	5f                   	pop    edi
c0024a13:	5d                   	pop    ebp
c0024a14:	c3                   	ret    
c0024a15:	90                   	nop

c0024a16 <ATAPI::diskRemoved()>:
c0024a16:	83 ec 18             	sub    esp,0x18
c0024a19:	68 95 d0 02 c0       	push   0xc002d095
c0024a1e:	e8 13 e6 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0024a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a27:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a2e:	83 c4 1c             	add    esp,0x1c
c0024a31:	c3                   	ret    

c0024a32 <ATAPI::eject()>:
c0024a32:	57                   	push   edi
c0024a33:	b9 03 00 00 00       	mov    ecx,0x3
c0024a38:	53                   	push   ebx
c0024a39:	83 ec 14             	sub    esp,0x14
c0024a3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a40:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a44:	fc                   	cld    
c0024a45:	31 c0                	xor    eax,eax
c0024a47:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a49:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a4e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a53:	50                   	push   eax
c0024a54:	50                   	push   eax
c0024a55:	6a 00                	push   0x0
c0024a57:	6a 00                	push   0x0
c0024a59:	6a 00                	push   0x0
c0024a5b:	6a 02                	push   0x2
c0024a5d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a61:	50                   	push   eax
c0024a62:	53                   	push   ebx
c0024a63:	e8 ee fc ff ff       	call   c0024756 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a68:	83 c4 14             	add    esp,0x14
c0024a6b:	53                   	push   ebx
c0024a6c:	e8 a5 ff ff ff       	call   c0024a16 <ATAPI::diskRemoved()>
c0024a71:	83 c4 24             	add    esp,0x24
c0024a74:	31 c0                	xor    eax,eax
c0024a76:	5b                   	pop    ebx
c0024a77:	5f                   	pop    edi
c0024a78:	c3                   	ret    
c0024a79:	90                   	nop

c0024a7a <ATAPI::diskInserted()>:
c0024a7a:	53                   	push   ebx
c0024a7b:	83 ec 14             	sub    esp,0x14
c0024a7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a82:	68 ac d0 02 c0       	push   0xc002d0ac
c0024a87:	e8 aa e5 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0024a8c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a96:	e8 4d fe fe ff       	call   c00148e8 <PhysicalDisk::startCache()>
c0024a9b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a9f:	83 c4 18             	add    esp,0x18
c0024aa2:	5b                   	pop    ebx
c0024aa3:	e9 c6 1f ff ff       	jmp    c0016a6e <createPartitionsForDisk(PhysicalDisk*)>

c0024aa8 <ATAPI::detectMedia()>:
c0024aa8:	56                   	push   esi
c0024aa9:	53                   	push   ebx
c0024aaa:	83 ec 28             	sub    esp,0x28
c0024aad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ab1:	6a 0c                	push   0xc
c0024ab3:	6a 00                	push   0x0
c0024ab5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024ab9:	56                   	push   esi
c0024aba:	e8 b9 bc fd ff       	call   c0000778 <memset>
c0024abf:	58                   	pop    eax
c0024ac0:	5a                   	pop    edx
c0024ac1:	6a 00                	push   0x0
c0024ac3:	6a 00                	push   0x0
c0024ac5:	6a 00                	push   0x0
c0024ac7:	6a 00                	push   0x0
c0024ac9:	56                   	push   esi
c0024aca:	53                   	push   ebx
c0024acb:	e8 86 fc ff ff       	call   c0024756 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ad0:	83 c4 1c             	add    esp,0x1c
c0024ad3:	6a 0c                	push   0xc
c0024ad5:	6a 00                	push   0x0
c0024ad7:	56                   	push   esi
c0024ad8:	e8 9b bc fd ff       	call   c0000778 <memset>
c0024add:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ae2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024ae7:	59                   	pop    ecx
c0024ae8:	58                   	pop    eax
c0024ae9:	6a 01                	push   0x1
c0024aeb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024aef:	50                   	push   eax
c0024af0:	6a 00                	push   0x0
c0024af2:	6a 12                	push   0x12
c0024af4:	56                   	push   esi
c0024af5:	53                   	push   ebx
c0024af6:	e8 5b fc ff ff       	call   c0024756 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024afb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024aff:	83 c4 20             	add    esp,0x20
c0024b02:	83 e0 7f             	and    eax,0x7f
c0024b05:	3c 70                	cmp    al,0x70
c0024b07:	74 15                	je     c0024b1e <ATAPI::detectMedia()+0x76>
c0024b09:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b10:	75 0c                	jne    c0024b1e <ATAPI::detectMedia()+0x76>
c0024b12:	83 ec 0c             	sub    esp,0xc
c0024b15:	53                   	push   ebx
c0024b16:	e8 5f ff ff ff       	call   c0024a7a <ATAPI::diskInserted()>
c0024b1b:	83 c4 10             	add    esp,0x10
c0024b1e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024b22:	83 e0 0f             	and    eax,0xf
c0024b25:	3c 02                	cmp    al,0x2
c0024b27:	75 1b                	jne    c0024b44 <ATAPI::detectMedia()+0x9c>
c0024b29:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b2e:	75 2d                	jne    c0024b5d <ATAPI::detectMedia()+0xb5>
c0024b30:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b37:	74 24                	je     c0024b5d <ATAPI::detectMedia()+0xb5>
c0024b39:	83 ec 0c             	sub    esp,0xc
c0024b3c:	53                   	push   ebx
c0024b3d:	e8 d4 fe ff ff       	call   c0024a16 <ATAPI::diskRemoved()>
c0024b42:	eb 16                	jmp    c0024b5a <ATAPI::detectMedia()+0xb2>
c0024b44:	84 c0                	test   al,al
c0024b46:	75 15                	jne    c0024b5d <ATAPI::detectMedia()+0xb5>
c0024b48:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b4f:	75 0c                	jne    c0024b5d <ATAPI::detectMedia()+0xb5>
c0024b51:	83 ec 0c             	sub    esp,0xc
c0024b54:	53                   	push   ebx
c0024b55:	e8 20 ff ff ff       	call   c0024a7a <ATAPI::diskInserted()>
c0024b5a:	83 c4 10             	add    esp,0x10
c0024b5d:	83 c4 24             	add    esp,0x24
c0024b60:	5b                   	pop    ebx
c0024b61:	5e                   	pop    esi
c0024b62:	c3                   	ret    
c0024b63:	90                   	nop

c0024b64 <ATAPI::open(int, int, void*)>:
c0024b64:	53                   	push   ebx
c0024b65:	83 ec 08             	sub    esp,0x8
c0024b68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b74:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b7a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b80:	c1 e0 06             	shl    eax,0x6
c0024b83:	01 d0                	add    eax,edx
c0024b85:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b8c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b92:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b99:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ba3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ba9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024bb0:	6a 04                	push   0x4
c0024bb2:	6a 0c                	push   0xc
c0024bb4:	51                   	push   ecx
c0024bb5:	52                   	push   edx
c0024bb6:	e8 15 e5 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bbb:	90                   	nop
c0024bbc:	90                   	nop
c0024bbd:	6a 00                	push   0x0
c0024bbf:	6a 0c                	push   0xc
c0024bc1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bc8:	50                   	push   eax
c0024bc9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bcf:	e8 fc e4 ff ff       	call   c00230d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bd4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024bdb:	83 c4 14             	add    esp,0x14
c0024bde:	53                   	push   ebx
c0024bdf:	e8 c4 fe ff ff       	call   c0024aa8 <ATAPI::detectMedia()>
c0024be4:	31 c0                	xor    eax,eax
c0024be6:	83 c4 18             	add    esp,0x18
c0024be9:	5b                   	pop    ebx
c0024bea:	c3                   	ret    
c0024beb:	90                   	nop

c0024bec <ATAPI::read(unsigned long long, int, void*)>:
c0024bec:	55                   	push   ebp
c0024bed:	57                   	push   edi
c0024bee:	56                   	push   esi
c0024bef:	53                   	push   ebx
c0024bf0:	83 ec 1c             	sub    esp,0x1c
c0024bf3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024bf7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bfb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bff:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c06:	74 41                	je     c0024c49 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024c08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c0c:	b9 03 00 00 00       	mov    ecx,0x3
c0024c11:	fc                   	cld    
c0024c12:	31 c0                	xor    eax,eax
c0024c14:	86 fb                	xchg   bl,bh
c0024c16:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c18:	c1 c3 10             	rol    ebx,0x10
c0024c1b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c20:	89 e8                	mov    eax,ebp
c0024c22:	86 fb                	xchg   bl,bh
c0024c24:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c28:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024c2c:	50                   	push   eax
c0024c2d:	50                   	push   eax
c0024c2e:	55                   	push   ebp
c0024c2f:	c1 e5 0b             	shl    ebp,0xb
c0024c32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c36:	6a 00                	push   0x0
c0024c38:	55                   	push   ebp
c0024c39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c3d:	50                   	push   eax
c0024c3e:	56                   	push   esi
c0024c3f:	e8 12 fb ff ff       	call   c0024756 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c44:	83 c4 20             	add    esp,0x20
c0024c47:	eb 1a                	jmp    c0024c63 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c49:	83 ec 0c             	sub    esp,0xc
c0024c4c:	56                   	push   esi
c0024c4d:	e8 56 fe ff ff       	call   c0024aa8 <ATAPI::detectMedia()>
c0024c52:	83 c4 10             	add    esp,0x10
c0024c55:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c5c:	75 aa                	jne    c0024c08 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c5e:	b8 02 00 00 00       	mov    eax,0x2
c0024c63:	83 c4 1c             	add    esp,0x1c
c0024c66:	5b                   	pop    ebx
c0024c67:	5e                   	pop    esi
c0024c68:	5f                   	pop    edi
c0024c69:	5d                   	pop    ebp
c0024c6a:	c3                   	ret    
c0024c6b:	90                   	nop

c0024c6c <SATA::close(int, int, void*)>:
c0024c6c:	83 ec 0c             	sub    esp,0xc
c0024c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c79:	85 c0                	test   eax,eax
c0024c7b:	74 0c                	je     c0024c89 <SATA::close(int, int, void*)+0x1d>
c0024c7d:	83 ec 0c             	sub    esp,0xc
c0024c80:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c82:	50                   	push   eax
c0024c83:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c86:	83 c4 10             	add    esp,0x10
c0024c89:	31 c0                	xor    eax,eax
c0024c8b:	83 c4 0c             	add    esp,0xc
c0024c8e:	c3                   	ret    
c0024c8f:	90                   	nop

c0024c90 <SATA::powerSaving(PowerSavingLevel)>:
c0024c90:	c3                   	ret    
c0024c91:	90                   	nop

c0024c92 <SATA::open(int, int, void*)>:
c0024c92:	56                   	push   esi
c0024c93:	53                   	push   ebx
c0024c94:	50                   	push   eax
c0024c95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c9d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ca7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024cad:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024cb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cbb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024cc5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ccb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024cd2:	e8 2a b2 fe ff       	call   c000ff01 <Phys::allocatePage()>
c0024cd7:	89 c6                	mov    esi,eax
c0024cd9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024cdf:	81 c6 00 10 00 00    	add    esi,0x1000
c0024ce5:	e8 17 b2 fe ff       	call   c000ff01 <Phys::allocatePage()>
c0024cea:	39 c6                	cmp    esi,eax
c0024cec:	74 10                	je     c0024cfe <SATA::open(int, int, void*)+0x6c>
c0024cee:	83 ec 0c             	sub    esp,0xc
c0024cf1:	68 d4 cf 02 c0       	push   0xc002cfd4
c0024cf6:	e8 ec 59 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0024cfb:	83 c4 10             	add    esp,0x10
c0024cfe:	83 ec 0c             	sub    esp,0xc
c0024d01:	6a 02                	push   0x2
c0024d03:	e8 db ce fe ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c0024d08:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d0e:	e8 6b d1 fe ff       	call   c0011e7e <Virt::getAKernelVAS()>
c0024d13:	6a 03                	push   0x3
c0024d15:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024d1b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024d21:	50                   	push   eax
c0024d22:	e8 93 d6 fe ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0024d27:	83 c4 14             	add    esp,0x14
c0024d2a:	53                   	push   ebx
c0024d2b:	e8 b8 fb fe ff       	call   c00148e8 <PhysicalDisk::startCache()>
c0024d30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d33:	e8 36 1d ff ff       	call   c0016a6e <createPartitionsForDisk(PhysicalDisk*)>
c0024d38:	83 c4 14             	add    esp,0x14
c0024d3b:	31 c0                	xor    eax,eax
c0024d3d:	5b                   	pop    ebx
c0024d3e:	5e                   	pop    esi
c0024d3f:	c3                   	ret    

c0024d40 <SATA::SATA()>:
c0024d40:	83 ec 0c             	sub    esp,0xc
c0024d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d47:	83 ec 04             	sub    esp,0x4
c0024d4a:	68 00 02 00 00       	push   0x200
c0024d4f:	68 e8 cf 02 c0       	push   0xc002cfe8
c0024d54:	50                   	push   eax
c0024d55:	e8 26 fb fe ff       	call   c0014880 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d5a:	83 c4 10             	add    esp,0x10
c0024d5d:	ba 58 d0 02 c0       	mov    edx,0xc002d058
c0024d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d66:	89 10                	mov    DWORD PTR [eax],edx
c0024d68:	90                   	nop
c0024d69:	83 c4 0c             	add    esp,0xc
c0024d6c:	c3                   	ret    
c0024d6d:	90                   	nop

c0024d6e <SATA::access(unsigned long long, int, void*, bool)>:
c0024d6e:	55                   	push   ebp
c0024d6f:	57                   	push   edi
c0024d70:	56                   	push   esi
c0024d71:	53                   	push   ebx
c0024d72:	83 ec 2c             	sub    esp,0x2c
c0024d75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d79:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d81:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d85:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d89:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d92:	7e 10                	jle    c0024da4 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d94:	83 ec 0c             	sub    esp,0xc
c0024d97:	68 f8 cf 02 c0       	push   0xc002cff8
c0024d9c:	e8 46 59 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0024da1:	83 c4 10             	add    esp,0x10
c0024da4:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024daa:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024db0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024db6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024dba:	89 f0                	mov    eax,esi
c0024dbc:	c1 e0 07             	shl    eax,0x7
c0024dbf:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024dc3:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024dcd:	53                   	push   ebx
c0024dce:	8d 46 02             	lea    eax,[esi+0x2]
c0024dd1:	53                   	push   ebx
c0024dd2:	c1 e0 07             	shl    eax,0x7
c0024dd5:	bb 01 00 00 00       	mov    ebx,0x1
c0024dda:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024dde:	50                   	push   eax
c0024ddf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024de5:	e8 aa ef ff ff       	call   c0023d94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024dea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024dee:	83 c4 10             	add    esp,0x10
c0024df1:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024df6:	0f 84 ce 01 00 00    	je     c0024fca <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dfc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e00:	c1 e0 09             	shl    eax,0x9
c0024e03:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024e0c:	74 17                	je     c0024e25 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024e0e:	51                   	push   ecx
c0024e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e13:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024e17:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e1d:	e8 22 b9 fd ff       	call   c0000744 <memcpy>
c0024e22:	83 c4 10             	add    esp,0x10
c0024e25:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e2b:	8d 46 02             	lea    eax,[esi+0x2]
c0024e2e:	c1 e0 07             	shl    eax,0x7
c0024e31:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e37:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e3d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e43:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e47:	c1 e1 05             	shl    ecx,0x5
c0024e4a:	01 c8                	add    eax,ecx
c0024e4c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e50:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e52:	83 e1 01             	and    ecx,0x1
c0024e55:	83 e3 bf             	and    ebx,0xffffffbf
c0024e58:	c1 e1 06             	shl    ecx,0x6
c0024e5b:	09 d9                	or     ecx,ebx
c0024e5d:	88 08                	mov    BYTE PTR [eax],cl
c0024e5f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e61:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e67:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e6d:	89 08                	mov    DWORD PTR [eax],ecx
c0024e6f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e75:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e7b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e81:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e84:	52                   	push   edx
c0024e85:	68 90 00 00 00       	push   0x90
c0024e8a:	6a 00                	push   0x0
c0024e8c:	53                   	push   ebx
c0024e8d:	e8 e6 b8 fd ff       	call   c0000778 <memset>
c0024e92:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e98:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e9c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ea2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ea6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024eaa:	83 c4 10             	add    esp,0x10
c0024ead:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024eb0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024eb6:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024ebc:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024ec1:	09 c8                	or     eax,ecx
c0024ec3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ec9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ecc:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ed3:	66 25 00 7f          	and    ax,0x7f00
c0024ed7:	66 0d 27 80          	or     ax,0x8027
c0024edb:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024ee0:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ee3:	19 c0                	sbb    eax,eax
c0024ee5:	83 e0 f0             	and    eax,0xfffffff0
c0024ee8:	83 c0 35             	add    eax,0x35
c0024eeb:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024eee:	89 f8                	mov    eax,edi
c0024ef0:	c1 e8 10             	shr    eax,0x10
c0024ef3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ef6:	89 f8                	mov    eax,edi
c0024ef8:	c1 e8 18             	shr    eax,0x18
c0024efb:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024efe:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024f02:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f09:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024f10:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f14:	89 f3                	mov    ebx,esi
c0024f16:	31 c0                	xor    eax,eax
c0024f18:	c1 e3 07             	shl    ebx,0x7
c0024f1b:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024f1f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024f25:	80 e1 88             	and    cl,0x88
c0024f28:	74 0a                	je     c0024f34 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024f2a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f2f:	74 0a                	je     c0024f3b <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f31:	40                   	inc    eax
c0024f32:	eb eb                	jmp    c0024f1f <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f34:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f39:	75 0a                	jne    c0024f45 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f3b:	83 ec 0c             	sub    esp,0xc
c0024f3e:	68 31 d0 02 c0       	push   0xc002d031
c0024f43:	eb 56                	jmp    c0024f9b <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f45:	b8 01 00 00 00       	mov    eax,0x1
c0024f4a:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f4e:	c1 e6 07             	shl    esi,0x7
c0024f51:	d3 e0                	shl    eax,cl
c0024f53:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f57:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f5d:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f63:	85 c8                	test   eax,ecx
c0024f65:	74 20                	je     c0024f87 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f67:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f6d:	0f ba e1 1e          	bt     ecx,0x1e
c0024f71:	73 ea                	jae    c0024f5d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f73:	83 ec 0c             	sub    esp,0xc
c0024f76:	31 db                	xor    ebx,ebx
c0024f78:	68 3f d0 02 c0       	push   0xc002d03f
c0024f7d:	e8 65 57 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0024f82:	83 c4 10             	add    esp,0x10
c0024f85:	eb 43                	jmp    c0024fca <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f87:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f8d:	0f ba e0 1e          	bt     eax,0x1e
c0024f91:	73 17                	jae    c0024faa <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f93:	83 ec 0c             	sub    esp,0xc
c0024f96:	68 3f d0 02 c0       	push   0xc002d03f
c0024f9b:	e8 47 57 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0024fa0:	bb 01 00 00 00       	mov    ebx,0x1
c0024fa5:	83 c4 10             	add    esp,0x10
c0024fa8:	eb 20                	jmp    c0024fca <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024faa:	31 db                	xor    ebx,ebx
c0024fac:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024fb1:	75 17                	jne    c0024fca <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fb3:	50                   	push   eax
c0024fb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fb8:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024fbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024fc2:	e8 7d b7 fd ff       	call   c0000744 <memcpy>
c0024fc7:	83 c4 10             	add    esp,0x10
c0024fca:	83 c4 2c             	add    esp,0x2c
c0024fcd:	89 d8                	mov    eax,ebx
c0024fcf:	5b                   	pop    ebx
c0024fd0:	5e                   	pop    esi
c0024fd1:	5f                   	pop    edi
c0024fd2:	5d                   	pop    ebp
c0024fd3:	c3                   	ret    

c0024fd4 <SATA::read(unsigned long long, int, void*)>:
c0024fd4:	57                   	push   edi
c0024fd5:	b8 04 00 00 00       	mov    eax,0x4
c0024fda:	56                   	push   esi
c0024fdb:	53                   	push   ebx
c0024fdc:	83 ec 10             	sub    esp,0x10
c0024fdf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fe3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fe7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024fea:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ff2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ff8:	77 3b                	ja     c0025035 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ffa:	b8 06 00 00 00       	mov    eax,0x6
c0024fff:	85 d2                	test   edx,edx
c0025001:	74 32                	je     c0025035 <SATA::read(unsigned long long, int, void*)+0x61>
c0025003:	50                   	push   eax
c0025004:	50                   	push   eax
c0025005:	6a 00                	push   0x0
c0025007:	52                   	push   edx
c0025008:	53                   	push   ebx
c0025009:	57                   	push   edi
c002500a:	56                   	push   esi
c002500b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002500f:	e8 5a fd ff ff       	call   c0024d6e <SATA::access(unsigned long long, int, void*, bool)>
c0025014:	83 c4 20             	add    esp,0x20
c0025017:	85 c0                	test   eax,eax
c0025019:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002501d:	75 11                	jne    c0025030 <SATA::read(unsigned long long, int, void*)+0x5c>
c002501f:	01 1d 08 29 03 c0    	add    DWORD PTR ds:0xc0032908,ebx
c0025025:	e8 0e ba fe ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c002502a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002502e:	eb 05                	jmp    c0025035 <SATA::read(unsigned long long, int, void*)+0x61>
c0025030:	b8 01 00 00 00       	mov    eax,0x1
c0025035:	83 c4 10             	add    esp,0x10
c0025038:	5b                   	pop    ebx
c0025039:	5e                   	pop    esi
c002503a:	5f                   	pop    edi
c002503b:	c3                   	ret    

c002503c <SATA::write(unsigned long long, int, void*)>:
c002503c:	55                   	push   ebp
c002503d:	b8 04 00 00 00       	mov    eax,0x4
c0025042:	57                   	push   edi
c0025043:	56                   	push   esi
c0025044:	53                   	push   ebx
c0025045:	83 ec 1c             	sub    esp,0x1c
c0025048:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002504c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025050:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025053:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025057:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002505b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025061:	77 56                	ja     c00250b9 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025063:	b8 06 00 00 00       	mov    eax,0x6
c0025068:	85 ff                	test   edi,edi
c002506a:	74 4d                	je     c00250b9 <SATA::write(unsigned long long, int, void*)+0x7d>
c002506c:	89 ee                	mov    esi,ebp
c002506e:	c1 e6 09             	shl    esi,0x9
c0025071:	01 fe                	add    esi,edi
c0025073:	89 c8                	mov    eax,ecx
c0025075:	89 da                	mov    edx,ebx
c0025077:	83 c0 01             	add    eax,0x1
c002507a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002507e:	83 d2 00             	adc    edx,0x0
c0025081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025085:	50                   	push   eax
c0025086:	50                   	push   eax
c0025087:	6a 01                	push   0x1
c0025089:	57                   	push   edi
c002508a:	81 c7 00 02 00 00    	add    edi,0x200
c0025090:	6a 01                	push   0x1
c0025092:	53                   	push   ebx
c0025093:	51                   	push   ecx
c0025094:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025098:	e8 d1 fc ff ff       	call   c0024d6e <SATA::access(unsigned long long, int, void*, bool)>
c002509d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00250a1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00250a5:	83 c4 20             	add    esp,0x20
c00250a8:	39 f7                	cmp    edi,esi
c00250aa:	75 c7                	jne    c0025073 <SATA::write(unsigned long long, int, void*)+0x37>
c00250ac:	01 2d 04 29 03 c0    	add    DWORD PTR ds:0xc0032904,ebp
c00250b2:	e8 81 b9 fe ff       	call   c0010a38 <VgaText::updateDiskUsage()>
c00250b7:	31 c0                	xor    eax,eax
c00250b9:	83 c4 1c             	add    esp,0x1c
c00250bc:	5b                   	pop    ebx
c00250bd:	5e                   	pop    esi
c00250be:	5f                   	pop    edi
c00250bf:	5d                   	pop    ebp
c00250c0:	c3                   	ret    
c00250c1:	90                   	nop

c00250c2 <SATAPI::write(unsigned long long, int, void*)>:
c00250c2:	b8 03 00 00 00       	mov    eax,0x3
c00250c7:	c3                   	ret    

c00250c8 <SATAPI::close(int, int, void*)>:
c00250c8:	83 ec 0c             	sub    esp,0xc
c00250cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250d5:	85 c0                	test   eax,eax
c00250d7:	74 0c                	je     c00250e5 <SATAPI::close(int, int, void*)+0x1d>
c00250d9:	83 ec 0c             	sub    esp,0xc
c00250dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00250de:	50                   	push   eax
c00250df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	31 c0                	xor    eax,eax
c00250e7:	83 c4 0c             	add    esp,0xc
c00250ea:	c3                   	ret    
c00250eb:	90                   	nop

c00250ec <SATAPI::SATAPI()>:
c00250ec:	83 ec 0c             	sub    esp,0xc
c00250ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250f3:	83 ec 04             	sub    esp,0x4
c00250f6:	68 00 08 00 00       	push   0x800
c00250fb:	68 88 d0 02 c0       	push   0xc002d088
c0025100:	50                   	push   eax
c0025101:	e8 7a f7 fe ff       	call   c0014880 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025106:	83 c4 10             	add    esp,0x10
c0025109:	ba 34 d1 02 c0       	mov    edx,0xc002d134
c002510e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025112:	89 10                	mov    DWORD PTR [eax],edx
c0025114:	90                   	nop
c0025115:	83 c4 0c             	add    esp,0xc
c0025118:	c3                   	ret    
c0025119:	90                   	nop

c002511a <SATAPI::diskRemoved()>:
c002511a:	83 ec 18             	sub    esp,0x18
c002511d:	68 94 d0 02 c0       	push   0xc002d094
c0025122:	e8 0f df fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0025127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002512b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025132:	83 c4 1c             	add    esp,0x1c
c0025135:	c3                   	ret    

c0025136 <SATAPI::diskInserted()>:
c0025136:	53                   	push   ebx
c0025137:	83 ec 14             	sub    esp,0x14
c002513a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002513e:	68 ab d0 02 c0       	push   0xc002d0ab
c0025143:	e8 ee de fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0025148:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002514f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025152:	e8 91 f7 fe ff       	call   c00148e8 <PhysicalDisk::startCache()>
c0025157:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002515b:	83 c4 18             	add    esp,0x18
c002515e:	5b                   	pop    ebx
c002515f:	e9 0a 19 ff ff       	jmp    c0016a6e <createPartitionsForDisk(PhysicalDisk*)>

c0025164 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025164:	55                   	push   ebp
c0025165:	57                   	push   edi
c0025166:	56                   	push   esi
c0025167:	53                   	push   ebx
c0025168:	83 ec 24             	sub    esp,0x24
c002516b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002516f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025173:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025179:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002517d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025181:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025187:	8d 5f 02             	lea    ebx,[edi+0x2]
c002518a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025190:	c1 e3 07             	shl    ebx,0x7
c0025193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025197:	89 f8                	mov    eax,edi
c0025199:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002519d:	c1 e0 07             	shl    eax,0x7
c00251a0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00251a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00251a8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00251b2:	53                   	push   ebx
c00251b3:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00251b9:	e8 d6 eb ff ff       	call   c0023d94 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00251be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00251c2:	83 c4 10             	add    esp,0x10
c00251c5:	b8 01 00 00 00       	mov    eax,0x1
c00251ca:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00251cf:	0f 84 8a 01 00 00    	je     c002535f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251d5:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251dd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251e3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00251ed:	c1 e1 05             	shl    ecx,0x5
c00251f0:	01 c8                	add    eax,ecx
c00251f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251f4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251fa:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025200:	89 08                	mov    DWORD PTR [eax],ecx
c0025202:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025208:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002520e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025214:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025217:	52                   	push   edx
c0025218:	68 90 00 00 00       	push   0x90
c002521d:	6a 00                	push   0x0
c002521f:	53                   	push   ebx
c0025220:	e8 53 b5 fd ff       	call   c0000778 <memset>
c0025225:	83 c4 0c             	add    esp,0xc
c0025228:	8d 43 40             	lea    eax,[ebx+0x40]
c002522b:	6a 0c                	push   0xc
c002522d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025231:	50                   	push   eax
c0025232:	e8 0d b5 fd ff       	call   c0000744 <memcpy>
c0025237:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002523d:	89 ea                	mov    edx,ebp
c002523f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025245:	c1 ea 18             	shr    edx,0x18
c0025248:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002524c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002524f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025252:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025256:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002525c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025262:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025267:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002526b:	09 c8                	or     eax,ecx
c002526d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025271:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025277:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002527a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025281:	66 25 00 7f          	and    ax,0x7f00
c0025285:	66 0d 27 80          	or     ax,0x8027
c0025289:	66 89 03             	mov    WORD PTR [ebx],ax
c002528c:	89 e8                	mov    eax,ebp
c002528e:	c1 e8 10             	shr    eax,0x10
c0025291:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025294:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025298:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002529b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002529f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00252a2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00252a6:	83 c4 10             	add    esp,0x10
c00252a9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00252ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00252b1:	31 c0                	xor    eax,eax
c00252b3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00252b9:	80 e1 88             	and    cl,0x88
c00252bc:	74 0a                	je     c00252c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00252be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252c3:	74 0a                	je     c00252cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00252c5:	40                   	inc    eax
c00252c6:	eb eb                	jmp    c00252b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00252c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252cd:	75 0f                	jne    c00252de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00252cf:	83 ec 0c             	sub    esp,0xc
c00252d2:	68 31 d0 02 c0       	push   0xc002d031
c00252d7:	e8 0b 54 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c00252dc:	eb 3a                	jmp    c0025318 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252de:	b8 01 00 00 00       	mov    eax,0x1
c00252e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00252e7:	c1 e7 07             	shl    edi,0x7
c00252ea:	d3 e0                	shl    eax,cl
c00252ec:	03 3c 24             	add    edi,DWORD PTR [esp]
c00252ef:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252f5:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252fb:	85 d0                	test   eax,edx
c00252fd:	74 23                	je     c0025322 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00252ff:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025305:	0f ba e2 1e          	bt     edx,0x1e
c0025309:	73 ea                	jae    c00252f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002530b:	83 ec 0c             	sub    esp,0xc
c002530e:	68 c3 d0 02 c0       	push   0xc002d0c3
c0025313:	e8 1e dd fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0025318:	83 c4 10             	add    esp,0x10
c002531b:	b8 01 00 00 00       	mov    eax,0x1
c0025320:	eb 3d                	jmp    c002535f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025322:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025328:	0f ba e0 1e          	bt     eax,0x1e
c002532c:	73 0a                	jae    c0025338 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002532e:	83 ec 0c             	sub    esp,0xc
c0025331:	68 d6 d0 02 c0       	push   0xc002d0d6
c0025336:	eb db                	jmp    c0025313 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025338:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002533d:	74 1e                	je     c002535d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002533f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025344:	74 17                	je     c002535d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025346:	50                   	push   eax
c0025347:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002534b:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025351:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025355:	e8 ea b3 fd ff       	call   c0000744 <memcpy>
c002535a:	83 c4 10             	add    esp,0x10
c002535d:	31 c0                	xor    eax,eax
c002535f:	83 c4 1c             	add    esp,0x1c
c0025362:	5b                   	pop    ebx
c0025363:	5e                   	pop    esi
c0025364:	5f                   	pop    edi
c0025365:	5d                   	pop    ebp
c0025366:	c3                   	ret    
c0025367:	90                   	nop

c0025368 <SATAPI::eject()>:
c0025368:	57                   	push   edi
c0025369:	b9 03 00 00 00       	mov    ecx,0x3
c002536e:	53                   	push   ebx
c002536f:	83 ec 14             	sub    esp,0x14
c0025372:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025376:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002537a:	fc                   	cld    
c002537b:	31 c0                	xor    eax,eax
c002537d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002537f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025384:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025389:	50                   	push   eax
c002538a:	6a 00                	push   0x0
c002538c:	6a 00                	push   0x0
c002538e:	6a 00                	push   0x0
c0025390:	6a 00                	push   0x0
c0025392:	6a 02                	push   0x2
c0025394:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025398:	50                   	push   eax
c0025399:	53                   	push   ebx
c002539a:	e8 c5 fd ff ff       	call   c0025164 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002539f:	83 c4 14             	add    esp,0x14
c00253a2:	53                   	push   ebx
c00253a3:	e8 72 fd ff ff       	call   c002511a <SATAPI::diskRemoved()>
c00253a8:	83 c4 24             	add    esp,0x24
c00253ab:	31 c0                	xor    eax,eax
c00253ad:	5b                   	pop    ebx
c00253ae:	5f                   	pop    edi
c00253af:	c3                   	ret    

c00253b0 <SATAPI::detectMedia()>:
c00253b0:	56                   	push   esi
c00253b1:	53                   	push   ebx
c00253b2:	83 ec 28             	sub    esp,0x28
c00253b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253b9:	6a 0c                	push   0xc
c00253bb:	6a 00                	push   0x0
c00253bd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00253c1:	56                   	push   esi
c00253c2:	e8 b1 b3 fd ff       	call   c0000778 <memset>
c00253c7:	83 c4 0c             	add    esp,0xc
c00253ca:	6a 00                	push   0x0
c00253cc:	6a 00                	push   0x0
c00253ce:	6a 00                	push   0x0
c00253d0:	6a 00                	push   0x0
c00253d2:	6a 00                	push   0x0
c00253d4:	56                   	push   esi
c00253d5:	53                   	push   ebx
c00253d6:	e8 89 fd ff ff       	call   c0025164 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253db:	83 c4 1c             	add    esp,0x1c
c00253de:	6a 0c                	push   0xc
c00253e0:	6a 00                	push   0x0
c00253e2:	56                   	push   esi
c00253e3:	e8 90 b3 fd ff       	call   c0000778 <memset>
c00253e8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253ed:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253f2:	83 c4 0c             	add    esp,0xc
c00253f5:	6a 01                	push   0x1
c00253f7:	8d 44 24 16          	lea    eax,[esp+0x16]
c00253fb:	50                   	push   eax
c00253fc:	6a 00                	push   0x0
c00253fe:	6a 00                	push   0x0
c0025400:	6a 12                	push   0x12
c0025402:	56                   	push   esi
c0025403:	53                   	push   ebx
c0025404:	e8 5b fd ff ff       	call   c0025164 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025409:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002540d:	83 c4 20             	add    esp,0x20
c0025410:	83 e0 7f             	and    eax,0x7f
c0025413:	3c 70                	cmp    al,0x70
c0025415:	74 15                	je     c002542c <SATAPI::detectMedia()+0x7c>
c0025417:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002541e:	75 0c                	jne    c002542c <SATAPI::detectMedia()+0x7c>
c0025420:	83 ec 0c             	sub    esp,0xc
c0025423:	53                   	push   ebx
c0025424:	e8 0d fd ff ff       	call   c0025136 <SATAPI::diskInserted()>
c0025429:	83 c4 10             	add    esp,0x10
c002542c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025430:	83 e0 0f             	and    eax,0xf
c0025433:	3c 02                	cmp    al,0x2
c0025435:	75 1b                	jne    c0025452 <SATAPI::detectMedia()+0xa2>
c0025437:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002543c:	75 2d                	jne    c002546b <SATAPI::detectMedia()+0xbb>
c002543e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025445:	74 24                	je     c002546b <SATAPI::detectMedia()+0xbb>
c0025447:	83 ec 0c             	sub    esp,0xc
c002544a:	53                   	push   ebx
c002544b:	e8 ca fc ff ff       	call   c002511a <SATAPI::diskRemoved()>
c0025450:	eb 16                	jmp    c0025468 <SATAPI::detectMedia()+0xb8>
c0025452:	84 c0                	test   al,al
c0025454:	75 15                	jne    c002546b <SATAPI::detectMedia()+0xbb>
c0025456:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002545d:	75 0c                	jne    c002546b <SATAPI::detectMedia()+0xbb>
c002545f:	83 ec 0c             	sub    esp,0xc
c0025462:	53                   	push   ebx
c0025463:	e8 ce fc ff ff       	call   c0025136 <SATAPI::diskInserted()>
c0025468:	83 c4 10             	add    esp,0x10
c002546b:	83 c4 24             	add    esp,0x24
c002546e:	5b                   	pop    ebx
c002546f:	5e                   	pop    esi
c0025470:	c3                   	ret    
c0025471:	90                   	nop

c0025472 <SATAPI::open(int, int, void*)>:
c0025472:	56                   	push   esi
c0025473:	53                   	push   ebx
c0025474:	50                   	push   eax
c0025475:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025479:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002547d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025487:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002548d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025497:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002549b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00254a5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00254ab:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00254b2:	e8 4a aa fe ff       	call   c000ff01 <Phys::allocatePage()>
c00254b7:	89 c6                	mov    esi,eax
c00254b9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254bf:	81 c6 00 10 00 00    	add    esi,0x1000
c00254c5:	e8 37 aa fe ff       	call   c000ff01 <Phys::allocatePage()>
c00254ca:	39 c6                	cmp    esi,eax
c00254cc:	74 10                	je     c00254de <SATAPI::open(int, int, void*)+0x6c>
c00254ce:	83 ec 0c             	sub    esp,0xc
c00254d1:	68 eb d0 02 c0       	push   0xc002d0eb
c00254d6:	e8 0c 52 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c00254db:	83 c4 10             	add    esp,0x10
c00254de:	83 ec 0c             	sub    esp,0xc
c00254e1:	6a 02                	push   0x2
c00254e3:	e8 fb c6 fe ff       	call   c0011be3 <Virt::allocateKernelVirtualPages(int)>
c00254e8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00254ee:	e8 8b c9 fe ff       	call   c0011e7e <Virt::getAKernelVAS()>
c00254f3:	6a 03                	push   0x3
c00254f5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00254fb:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025501:	50                   	push   eax
c0025502:	e8 b3 ce fe ff       	call   c00123ba <VAS::mapPage(unsigned long, unsigned long, int)>
c0025507:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002550e:	83 c4 14             	add    esp,0x14
c0025511:	53                   	push   ebx
c0025512:	e8 99 fe ff ff       	call   c00253b0 <SATAPI::detectMedia()>
c0025517:	83 c4 14             	add    esp,0x14
c002551a:	31 c0                	xor    eax,eax
c002551c:	5b                   	pop    ebx
c002551d:	5e                   	pop    esi
c002551e:	c3                   	ret    
c002551f:	90                   	nop

c0025520 <SATAPI::read(unsigned long long, int, void*)>:
c0025520:	55                   	push   ebp
c0025521:	57                   	push   edi
c0025522:	56                   	push   esi
c0025523:	53                   	push   ebx
c0025524:	83 ec 1c             	sub    esp,0x1c
c0025527:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002552b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002552f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025533:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002553a:	74 19                	je     c0025555 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002553c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025541:	7e 2e                	jle    c0025571 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025543:	83 ec 0c             	sub    esp,0xc
c0025546:	68 01 d1 02 c0       	push   0xc002d101
c002554b:	e8 97 51 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0025550:	83 c4 10             	add    esp,0x10
c0025553:	eb 1c                	jmp    c0025571 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025555:	83 ec 0c             	sub    esp,0xc
c0025558:	55                   	push   ebp
c0025559:	e8 52 fe ff ff       	call   c00253b0 <SATAPI::detectMedia()>
c002555e:	83 c4 10             	add    esp,0x10
c0025561:	b8 02 00 00 00       	mov    eax,0x2
c0025566:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002556d:	75 cd                	jne    c002553c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002556f:	eb 49                	jmp    c00255ba <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025571:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025575:	b9 03 00 00 00       	mov    ecx,0x3
c002557a:	fc                   	cld    
c002557b:	31 c0                	xor    eax,eax
c002557d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002557f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025584:	89 d8                	mov    eax,ebx
c0025586:	86 e0                	xchg   al,ah
c0025588:	c1 c0 10             	rol    eax,0x10
c002558b:	86 e0                	xchg   al,ah
c002558d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025591:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025595:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025599:	50                   	push   eax
c002559a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002559e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00255a2:	56                   	push   esi
c00255a3:	53                   	push   ebx
c00255a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00255a8:	c1 e0 0b             	shl    eax,0xb
c00255ab:	50                   	push   eax
c00255ac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255b0:	50                   	push   eax
c00255b1:	55                   	push   ebp
c00255b2:	e8 ad fb ff ff       	call   c0025164 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255b7:	83 c4 20             	add    esp,0x20
c00255ba:	83 c4 1c             	add    esp,0x1c
c00255bd:	5b                   	pop    ebx
c00255be:	5e                   	pop    esi
c00255bf:	5f                   	pop    edi
c00255c0:	5d                   	pop    ebp
c00255c1:	c3                   	ret    

c00255c2 <AVX::open(int, int, void*)>:
c00255c2:	83 ec 0c             	sub    esp,0xc
c00255c5:	e8 3e 11 00 00       	call   c0026708 <avxInit>
c00255ca:	b8 00 00 00 00       	mov    eax,0x0
c00255cf:	83 c4 0c             	add    esp,0xc
c00255d2:	c3                   	ret    
c00255d3:	90                   	nop

c00255d4 <AVX::close(int, int, void*)>:
c00255d4:	83 ec 0c             	sub    esp,0xc
c00255d7:	e8 2d 11 00 00       	call   c0026709 <avxClose>
c00255dc:	b8 00 00 00 00       	mov    eax,0x0
c00255e1:	83 c4 0c             	add    esp,0xc
c00255e4:	c3                   	ret    
c00255e5:	90                   	nop

c00255e6 <AVX::available()>:
c00255e6:	83 ec 0c             	sub    esp,0xc
c00255e9:	e8 12 11 00 00       	call   c0026700 <avxDetect>
c00255ee:	85 c0                	test   eax,eax
c00255f0:	0f 95 c0             	setne  al
c00255f3:	83 c4 0c             	add    esp,0xc
c00255f6:	c3                   	ret    
c00255f7:	90                   	nop

c00255f8 <AVX::save(void*)>:
c00255f8:	83 ec 0c             	sub    esp,0xc
c00255fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255ff:	83 ec 0c             	sub    esp,0xc
c0025602:	50                   	push   eax
c0025603:	e8 fe 10 00 00       	call   c0026706 <avxSave>
c0025608:	83 c4 10             	add    esp,0x10
c002560b:	90                   	nop
c002560c:	83 c4 0c             	add    esp,0xc
c002560f:	c3                   	ret    

c0025610 <AVX::load(void*)>:
c0025610:	83 ec 0c             	sub    esp,0xc
c0025613:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025617:	83 ec 0c             	sub    esp,0xc
c002561a:	50                   	push   eax
c002561b:	e8 e7 10 00 00       	call   c0026707 <avxLoad>
c0025620:	83 c4 10             	add    esp,0x10
c0025623:	90                   	nop
c0025624:	83 c4 0c             	add    esp,0xc
c0025627:	c3                   	ret    

c0025628 <AVX::AVX()>:
c0025628:	83 ec 0c             	sub    esp,0xc
c002562b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002562f:	83 ec 08             	sub    esp,0x8
c0025632:	68 64 d1 02 c0       	push   0xc002d164
c0025637:	50                   	push   eax
c0025638:	e8 21 f3 fe ff       	call   c001495e <FPU::FPU(char const*)>
c002563d:	83 c4 10             	add    esp,0x10
c0025640:	ba 74 d1 02 c0       	mov    edx,0xc002d174
c0025645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025649:	89 10                	mov    DWORD PTR [eax],edx
c002564b:	90                   	nop
c002564c:	83 c4 0c             	add    esp,0xc
c002564f:	c3                   	ret    

c0025650 <MMX::available()>:
c0025650:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0025655:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002565b:	83 e0 20             	and    eax,0x20
c002565e:	84 c0                	test   al,al
c0025660:	0f 95 c0             	setne  al
c0025663:	c3                   	ret    

c0025664 <MMX::open(int, int, void*)>:
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	e8 20 11 00 00       	call   c002678c <x87Init>
c002566c:	b8 00 00 00 00       	mov    eax,0x0
c0025671:	83 c4 0c             	add    esp,0xc
c0025674:	c3                   	ret    
c0025675:	90                   	nop

c0025676 <MMX::close(int, int, void*)>:
c0025676:	83 ec 0c             	sub    esp,0xc
c0025679:	e8 28 11 00 00       	call   c00267a6 <x87Close>
c002567e:	b8 00 00 00 00       	mov    eax,0x0
c0025683:	83 c4 0c             	add    esp,0xc
c0025686:	c3                   	ret    
c0025687:	90                   	nop

c0025688 <MMX::save(void*)>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002568f:	83 ec 0c             	sub    esp,0xc
c0025692:	50                   	push   eax
c0025693:	e8 e9 10 00 00       	call   c0026781 <x87Save>
c0025698:	83 c4 10             	add    esp,0x10
c002569b:	90                   	nop
c002569c:	83 c4 0c             	add    esp,0xc
c002569f:	c3                   	ret    

c00256a0 <MMX::load(void*)>:
c00256a0:	83 ec 0c             	sub    esp,0xc
c00256a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256a7:	83 ec 0c             	sub    esp,0xc
c00256aa:	50                   	push   eax
c00256ab:	e8 d7 10 00 00       	call   c0026787 <x87Load>
c00256b0:	83 c4 10             	add    esp,0x10
c00256b3:	90                   	nop
c00256b4:	83 c4 0c             	add    esp,0xc
c00256b7:	c3                   	ret    

c00256b8 <MMX::MMX()>:
c00256b8:	83 ec 0c             	sub    esp,0xc
c00256bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256bf:	83 ec 08             	sub    esp,0x8
c00256c2:	68 a4 d1 02 c0       	push   0xc002d1a4
c00256c7:	50                   	push   eax
c00256c8:	e8 91 f2 fe ff       	call   c001495e <FPU::FPU(char const*)>
c00256cd:	83 c4 10             	add    esp,0x10
c00256d0:	ba b4 d1 02 c0       	mov    edx,0xc002d1b4
c00256d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d9:	89 10                	mov    DWORD PTR [eax],edx
c00256db:	90                   	nop
c00256dc:	83 c4 0c             	add    esp,0xc
c00256df:	c3                   	ret    

c00256e0 <SSE::open(int, int, void*)>:
c00256e0:	83 ec 0c             	sub    esp,0xc
c00256e3:	e8 5c 10 00 00       	call   c0026744 <sseInit>
c00256e8:	b8 00 00 00 00       	mov    eax,0x0
c00256ed:	83 c4 0c             	add    esp,0xc
c00256f0:	c3                   	ret    
c00256f1:	90                   	nop

c00256f2 <SSE::close(int, int, void*)>:
c00256f2:	83 ec 0c             	sub    esp,0xc
c00256f5:	e8 5a 10 00 00       	call   c0026754 <sseClose>
c00256fa:	b8 00 00 00 00       	mov    eax,0x0
c00256ff:	83 c4 0c             	add    esp,0xc
c0025702:	c3                   	ret    
c0025703:	90                   	nop

c0025704 <SSE::available()>:
c0025704:	83 ec 1c             	sub    esp,0x1c
c0025707:	e8 14 10 00 00       	call   c0026720 <absolutelyNoChanceInHell>
c002570c:	85 c0                	test   eax,eax
c002570e:	0f 95 c0             	setne  al
c0025711:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025715:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025719:	83 c4 1c             	add    esp,0x1c
c002571c:	c3                   	ret    
c002571d:	90                   	nop

c002571e <SSE::save(void*)>:
c002571e:	83 ec 0c             	sub    esp,0xc
c0025721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025725:	83 ec 0c             	sub    esp,0xc
c0025728:	50                   	push   eax
c0025729:	e8 0a 10 00 00       	call   c0026738 <sseSave>
c002572e:	83 c4 10             	add    esp,0x10
c0025731:	90                   	nop
c0025732:	83 c4 0c             	add    esp,0xc
c0025735:	c3                   	ret    

c0025736 <SSE::load(void*)>:
c0025736:	83 ec 0c             	sub    esp,0xc
c0025739:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002573d:	83 ec 0c             	sub    esp,0xc
c0025740:	50                   	push   eax
c0025741:	e8 f8 0f 00 00       	call   c002673e <sseLoad>
c0025746:	83 c4 10             	add    esp,0x10
c0025749:	90                   	nop
c002574a:	83 c4 0c             	add    esp,0xc
c002574d:	c3                   	ret    

c002574e <SSE::SSE()>:
c002574e:	83 ec 0c             	sub    esp,0xc
c0025751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025755:	83 ec 08             	sub    esp,0x8
c0025758:	68 e4 d1 02 c0       	push   0xc002d1e4
c002575d:	50                   	push   eax
c002575e:	e8 fb f1 fe ff       	call   c001495e <FPU::FPU(char const*)>
c0025763:	83 c4 10             	add    esp,0x10
c0025766:	ba f4 d1 02 c0       	mov    edx,0xc002d1f4
c002576b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002576f:	89 10                	mov    DWORD PTR [eax],edx
c0025771:	90                   	nop
c0025772:	83 c4 0c             	add    esp,0xc
c0025775:	c3                   	ret    

c0025776 <x87::open(int, int, void*)>:
c0025776:	83 ec 0c             	sub    esp,0xc
c0025779:	e8 0e 10 00 00       	call   c002678c <x87Init>
c002577e:	b8 00 00 00 00       	mov    eax,0x0
c0025783:	83 c4 0c             	add    esp,0xc
c0025786:	c3                   	ret    
c0025787:	90                   	nop

c0025788 <x87::close(int, int, void*)>:
c0025788:	83 ec 0c             	sub    esp,0xc
c002578b:	e8 16 10 00 00       	call   c00267a6 <x87Close>
c0025790:	b8 00 00 00 00       	mov    eax,0x0
c0025795:	83 c4 0c             	add    esp,0xc
c0025798:	c3                   	ret    
c0025799:	90                   	nop

c002579a <x87::available()>:
c002579a:	83 ec 0c             	sub    esp,0xc
c002579d:	e8 c4 0f 00 00       	call   c0026766 <x87Detect>
c00257a2:	85 c0                	test   eax,eax
c00257a4:	0f 95 c0             	setne  al
c00257a7:	83 c4 0c             	add    esp,0xc
c00257aa:	c3                   	ret    
c00257ab:	90                   	nop

c00257ac <x87::save(void*)>:
c00257ac:	83 ec 0c             	sub    esp,0xc
c00257af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257b3:	83 ec 0c             	sub    esp,0xc
c00257b6:	50                   	push   eax
c00257b7:	e8 c5 0f 00 00       	call   c0026781 <x87Save>
c00257bc:	83 c4 10             	add    esp,0x10
c00257bf:	90                   	nop
c00257c0:	83 c4 0c             	add    esp,0xc
c00257c3:	c3                   	ret    

c00257c4 <x87::load(void*)>:
c00257c4:	83 ec 0c             	sub    esp,0xc
c00257c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257cb:	83 ec 0c             	sub    esp,0xc
c00257ce:	50                   	push   eax
c00257cf:	e8 b3 0f 00 00       	call   c0026787 <x87Load>
c00257d4:	83 c4 10             	add    esp,0x10
c00257d7:	90                   	nop
c00257d8:	83 c4 0c             	add    esp,0xc
c00257db:	c3                   	ret    

c00257dc <x87::x87()>:
c00257dc:	83 ec 0c             	sub    esp,0xc
c00257df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257e3:	83 ec 08             	sub    esp,0x8
c00257e6:	68 24 d2 02 c0       	push   0xc002d224
c00257eb:	50                   	push   eax
c00257ec:	e8 6d f1 fe ff       	call   c001495e <FPU::FPU(char const*)>
c00257f1:	83 c4 10             	add    esp,0x10
c00257f4:	ba 34 d2 02 c0       	mov    edx,0xc002d234
c00257f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257fd:	89 10                	mov    DWORD PTR [eax],edx
c00257ff:	90                   	nop
c0025800:	83 c4 0c             	add    esp,0xc
c0025803:	c3                   	ret    

c0025804 <APIC::disable()>:
c0025804:	90                   	nop
c0025805:	c3                   	ret    

c0025806 <APIC::close(int, int, void*)>:
c0025806:	55                   	push   ebp
c0025807:	89 e5                	mov    ebp,esp
c0025809:	83 ec 08             	sub    esp,0x8
c002580c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025811:	83 c0 3c             	add    eax,0x3c
c0025814:	8b 00                	mov    eax,DWORD PTR [eax]
c0025816:	83 ec 0c             	sub    esp,0xc
c0025819:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002581c:	ff d0                	call   eax
c002581e:	83 c4 10             	add    esp,0x10
c0025821:	b8 00 00 00 00       	mov    eax,0x0
c0025826:	c9                   	leave  
c0025827:	c3                   	ret    

c0025828 <IOAPIC::close(int, int, void*)>:
c0025828:	b8 00 00 00 00       	mov    eax,0x0
c002582d:	c3                   	ret    

c002582e <APIC::io_wait()>:
c002582e:	eb 00                	jmp    c0025830 <APIC::io_wait()+0x2>
c0025830:	eb 00                	jmp    c0025832 <APIC::io_wait()+0x4>
c0025832:	90                   	nop
c0025833:	c3                   	ret    

c0025834 <APIC::getBase()>:
c0025834:	55                   	push   ebp
c0025835:	89 e5                	mov    ebp,esp
c0025837:	83 ec 18             	sub    esp,0x18
c002583a:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c002583f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025845:	83 e0 08             	and    eax,0x8
c0025848:	84 c0                	test   al,al
c002584a:	75 07                	jne    c0025853 <APIC::getBase()+0x1f>
c002584c:	b8 00 00 00 00       	mov    eax,0x0
c0025851:	eb 21                	jmp    c0025874 <APIC::getBase()+0x40>
c0025853:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0025858:	83 ec 08             	sub    esp,0x8
c002585b:	6a 1b                	push   0x1b
c002585d:	50                   	push   eax
c002585e:	e8 85 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025863:	83 c4 10             	add    esp,0x10
c0025866:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025869:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002586c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002586f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025874:	c9                   	leave  
c0025875:	c3                   	ret    

c0025876 <APIC::eoi(unsigned char)>:
c0025876:	55                   	push   ebp
c0025877:	89 e5                	mov    ebp,esp
c0025879:	83 ec 28             	sub    esp,0x28
c002587c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002587f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025882:	83 ec 0c             	sub    esp,0xc
c0025885:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025888:	e8 a7 ff ff ff       	call   c0025834 <APIC::getBase()>
c002588d:	83 c4 10             	add    esp,0x10
c0025890:	05 b0 00 00 00       	add    eax,0xb0
c0025895:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025898:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002589b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00258a1:	90                   	nop
c00258a2:	c9                   	leave  
c00258a3:	c3                   	ret    

c00258a4 <APIC::open(int, int, void*)>:
c00258a4:	55                   	push   ebp
c00258a5:	89 e5                	mov    ebp,esp
c00258a7:	57                   	push   edi
c00258a8:	56                   	push   esi
c00258a9:	53                   	push   ebx
c00258aa:	83 ec 2c             	sub    esp,0x2c
c00258ad:	83 ec 0c             	sub    esp,0xc
c00258b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b3:	e8 7c ff ff ff       	call   c0025834 <APIC::getBase()>
c00258b8:	83 c4 10             	add    esp,0x10
c00258bb:	89 c2                	mov    edx,eax
c00258bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258c0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258c6:	0f b6 f8             	movzx  edi,al
c00258c9:	89 d0                	mov    eax,edx
c00258cb:	ba 00 00 00 00       	mov    edx,0x0
c00258d0:	89 c1                	mov    ecx,eax
c00258d2:	80 e5 ff             	and    ch,0xff
c00258d5:	89 cb                	mov    ebx,ecx
c00258d7:	0f b6 f2             	movzx  esi,dl
c00258da:	89 d8                	mov    eax,ebx
c00258dc:	89 f2                	mov    edx,esi
c00258de:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258e1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258e4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00258e8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258ec:	83 e0 00             	and    eax,0x0
c00258ef:	09 d0                	or     eax,edx
c00258f1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258f8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258fe:	8d 50 01             	lea    edx,[eax+0x1]
c0025901:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025904:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002590a:	0f b6 d0             	movzx  edx,al
c002590d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025910:	83 c2 08             	add    edx,0x8
c0025913:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025917:	0f b6 c9             	movzx  ecx,cl
c002591a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025920:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025924:	83 ec 0c             	sub    esp,0xc
c0025927:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002592a:	e8 05 ff ff ff       	call   c0025834 <APIC::getBase()>
c002592f:	83 c4 10             	add    esp,0x10
c0025932:	05 f0 00 00 00       	add    eax,0xf0
c0025937:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002593a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002593d:	8b 00                	mov    eax,DWORD PTR [eax]
c002593f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025942:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025949:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025950:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025953:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025956:	89 10                	mov    DWORD PTR [eax],edx
c0025958:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002595f:	a1 90 0e 03 c0       	mov    eax,ds:0xc0030e90
c0025964:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025967:	7d 7c                	jge    c00259e5 <APIC::open(int, int, void*)+0x141>
c0025969:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002596c:	8b 04 85 a0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf160]
c0025973:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025976:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025979:	8b 04 85 a0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf160]
c0025980:	c1 e8 08             	shr    eax,0x8
c0025983:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025987:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002598a:	8b 04 85 a0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf160]
c0025991:	c1 e8 18             	shr    eax,0x18
c0025994:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025997:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002599b:	75 40                	jne    c00259dd <APIC::open(int, int, void*)+0x139>
c002599d:	83 ec 0c             	sub    esp,0xc
c00259a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259a3:	e8 8c fe ff ff       	call   c0025834 <APIC::getBase()>
c00259a8:	83 c4 10             	add    esp,0x10
c00259ab:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00259af:	75 07                	jne    c00259b8 <APIC::open(int, int, void*)+0x114>
c00259b1:	ba 60 03 00 00       	mov    edx,0x360
c00259b6:	eb 05                	jmp    c00259bd <APIC::open(int, int, void*)+0x119>
c00259b8:	ba 50 03 00 00       	mov    edx,0x350
c00259bd:	01 d0                	add    eax,edx
c00259bf:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259c2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00259c7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00259ca:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259d1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259d5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259d8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259db:	89 10                	mov    DWORD PTR [eax],edx
c00259dd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259e0:	e9 7a ff ff ff       	jmp    c002595f <APIC::open(int, int, void*)+0xbb>
c00259e5:	b8 00 00 00 00       	mov    eax,0x0
c00259ea:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259ed:	5b                   	pop    ebx
c00259ee:	5e                   	pop    esi
c00259ef:	5f                   	pop    edi
c00259f0:	5d                   	pop    ebp
c00259f1:	c3                   	ret    

c00259f2 <IOAPIC::IOAPIC()>:
c00259f2:	83 ec 0c             	sub    esp,0xc
c00259f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f9:	83 ec 08             	sub    esp,0x8
c00259fc:	68 64 d2 02 c0       	push   0xc002d264
c0025a01:	50                   	push   eax
c0025a02:	e8 45 ec fe ff       	call   c001464c <Device::Device(char const*)>
c0025a07:	83 c4 10             	add    esp,0x10
c0025a0a:	ba 8c d3 02 c0       	mov    edx,0xc002d38c
c0025a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a13:	89 10                	mov    DWORD PTR [eax],edx
c0025a15:	90                   	nop
c0025a16:	83 c4 0c             	add    esp,0xc
c0025a19:	c3                   	ret    

c0025a1a <APIC::APIC()>:
c0025a1a:	53                   	push   ebx
c0025a1b:	83 ec 18             	sub    esp,0x18
c0025a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a22:	83 ec 08             	sub    esp,0x8
c0025a25:	68 6c d2 02 c0       	push   0xc002d26c
c0025a2a:	50                   	push   eax
c0025a2b:	e8 88 f3 fe ff       	call   c0014db8 <InterruptController::InterruptController(char const*)>
c0025a30:	83 c4 10             	add    esp,0x10
c0025a33:	ba 44 d3 02 c0       	mov    edx,0xc002d344
c0025a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a3c:	89 10                	mov    DWORD PTR [eax],edx
c0025a3e:	a0 60 29 03 c0       	mov    al,ds:0xc0032960
c0025a43:	83 f0 01             	xor    eax,0x1
c0025a46:	84 c0                	test   al,al
c0025a48:	0f 84 a1 00 00 00    	je     c0025aef <APIC::APIC()+0xd5>
c0025a4e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a53:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c0025a58:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a5c:	0f 83 86 00 00 00    	jae    c0025ae8 <APIC::APIC()+0xce>
c0025a62:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a6a:	83 ec 0c             	sub    esp,0xc
c0025a6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a71:	e8 ca 9d fe ff       	call   c000f840 <malloc>
c0025a76:	83 c4 10             	add    esp,0x10
c0025a79:	89 c3                	mov    ebx,eax
c0025a7b:	83 ec 0c             	sub    esp,0xc
c0025a7e:	53                   	push   ebx
c0025a7f:	e8 6e ff ff ff       	call   c00259f2 <IOAPIC::IOAPIC()>
c0025a84:	83 c4 10             	add    esp,0x10
c0025a87:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a8b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a94:	89 14 85 40 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6c0],edx
c0025a9b:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c0025aa0:	40                   	inc    eax
c0025aa1:	a3 20 29 03 c0       	mov    ds:0xc0032920,eax
c0025aa6:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0025aab:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025ab1:	83 ec 08             	sub    esp,0x8
c0025ab4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025ab8:	50                   	push   eax
c0025ab9:	e8 9e e9 fe ff       	call   c001445c <Device::addChild(Device*)>
c0025abe:	83 c4 10             	add    esp,0x10
c0025ac1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ac7:	83 c0 08             	add    eax,0x8
c0025aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0025acc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025ad1:	6a 00                	push   0x0
c0025ad3:	6a 00                	push   0x0
c0025ad5:	52                   	push   edx
c0025ad6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025ada:	ff d0                	call   eax
c0025adc:	83 c4 10             	add    esp,0x10
c0025adf:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025ae3:	e9 6b ff ff ff       	jmp    c0025a53 <APIC::APIC()+0x39>
c0025ae8:	c6 05 60 29 03 c0 01 	mov    BYTE PTR ds:0xc0032960,0x1
c0025aef:	90                   	nop
c0025af0:	83 c4 18             	add    esp,0x18
c0025af3:	5b                   	pop    ebx
c0025af4:	c3                   	ret    
c0025af5:	90                   	nop

c0025af6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025af6:	55                   	push   ebp
c0025af7:	89 e5                	mov    ebp,esp
c0025af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025afc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b02:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b05:	72 1d                	jb     c0025b24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b13:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025b19:	01 d0                	add    eax,edx
c0025b1b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b1e:	73 04                	jae    c0025b24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b20:	b0 01                	mov    al,0x1
c0025b22:	eb 02                	jmp    c0025b26 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025b24:	b0 00                	mov    al,0x0
c0025b26:	5d                   	pop    ebp
c0025b27:	c3                   	ret    

c0025b28 <IOAPIC::read(int)>:
c0025b28:	55                   	push   ebp
c0025b29:	89 e5                	mov    ebp,esp
c0025b2b:	83 ec 10             	sub    esp,0x10
c0025b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b37:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b3d:	0f b6 d0             	movzx  edx,al
c0025b40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b43:	89 10                	mov    DWORD PTR [eax],edx
c0025b45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b48:	83 c0 10             	add    eax,0x10
c0025b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b4d:	c9                   	leave  
c0025b4e:	c3                   	ret    
c0025b4f:	90                   	nop

c0025b50 <IOAPIC::open(int, int, void*)>:
c0025b50:	55                   	push   ebp
c0025b51:	89 e5                	mov    ebp,esp
c0025b53:	57                   	push   edi
c0025b54:	56                   	push   esi
c0025b55:	53                   	push   ebx
c0025b56:	83 ec 0c             	sub    esp,0xc
c0025b59:	83 ec 0c             	sub    esp,0xc
c0025b5c:	68 97 d2 02 c0       	push   0xc002d297
c0025b61:	e8 d0 d4 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0025b66:	83 c4 10             	add    esp,0x10
c0025b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b6c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b6f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b7e:	8b 14 85 80 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf080]
c0025b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b88:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b91:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b97:	8b 14 85 00 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf000]
c0025b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025ba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025baa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bb3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bb9:	0f b6 f8             	movzx  edi,al
c0025bbc:	89 d0                	mov    eax,edx
c0025bbe:	ba 00 00 00 00       	mov    edx,0x0
c0025bc3:	89 c1                	mov    ecx,eax
c0025bc5:	80 e5 ff             	and    ch,0xff
c0025bc8:	89 cb                	mov    ebx,ecx
c0025bca:	0f b6 f2             	movzx  esi,dl
c0025bcd:	89 d8                	mov    eax,ebx
c0025bcf:	89 f2                	mov    edx,esi
c0025bd1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bd4:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025bd7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bdb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bdf:	83 e0 00             	and    eax,0x0
c0025be2:	09 d0                	or     eax,edx
c0025be4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025beb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bf1:	8d 50 01             	lea    edx,[eax+0x1]
c0025bf4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bf7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bfd:	0f b6 d0             	movzx  edx,al
c0025c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c03:	83 c2 08             	add    edx,0x8
c0025c06:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c0a:	0f b6 c9             	movzx  ecx,cl
c0025c0d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025c13:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c17:	83 ec 08             	sub    esp,0x8
c0025c1a:	6a 01                	push   0x1
c0025c1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c1f:	e8 04 ff ff ff       	call   c0025b28 <IOAPIC::read(int)>
c0025c24:	83 c4 10             	add    esp,0x10
c0025c27:	c1 f8 10             	sar    eax,0x10
c0025c2a:	0f b6 c0             	movzx  eax,al
c0025c2d:	8d 50 01             	lea    edx,[eax+0x1]
c0025c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c33:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c39:	b8 00 00 00 00       	mov    eax,0x0
c0025c3e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c41:	5b                   	pop    ebx
c0025c42:	5e                   	pop    esi
c0025c43:	5f                   	pop    edi
c0025c44:	5d                   	pop    ebp
c0025c45:	c3                   	ret    

c0025c46 <IOAPIC::write(int, int)>:
c0025c46:	55                   	push   ebp
c0025c47:	89 e5                	mov    ebp,esp
c0025c49:	83 ec 10             	sub    esp,0x10
c0025c4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c4f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c55:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c5b:	0f b6 d0             	movzx  edx,al
c0025c5e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c61:	89 10                	mov    DWORD PTR [eax],edx
c0025c63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c66:	8d 50 10             	lea    edx,[eax+0x10]
c0025c69:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c6c:	89 02                	mov    DWORD PTR [edx],eax
c0025c6e:	90                   	nop
c0025c6f:	c9                   	leave  
c0025c70:	c3                   	ret    
c0025c71:	90                   	nop

c0025c72 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c72:	55                   	push   ebp
c0025c73:	89 e5                	mov    ebp,esp
c0025c75:	53                   	push   ebx
c0025c76:	83 ec 2c             	sub    esp,0x2c
c0025c79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c7c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c7f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c82:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c85:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c88:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c8b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c8e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c91:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c94:	88 d8                	mov    al,bl
c0025c96:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c99:	88 c8                	mov    al,cl
c0025c9b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c9e:	88 d0                	mov    al,dl
c0025ca0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025ca3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ca7:	83 c0 08             	add    eax,0x8
c0025caa:	01 c0                	add    eax,eax
c0025cac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025caf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025cb3:	83 c0 08             	add    eax,0x8
c0025cb6:	01 c0                	add    eax,eax
c0025cb8:	40                   	inc    eax
c0025cb9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025cbc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cbf:	50                   	push   eax
c0025cc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cc3:	e8 60 fe ff ff       	call   c0025b28 <IOAPIC::read(int)>
c0025cc8:	83 c4 08             	add    esp,0x8
c0025ccb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025cce:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025cd5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025cd8:	c1 e0 18             	shl    eax,0x18
c0025cdb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cde:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ce1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ce4:	52                   	push   edx
c0025ce5:	50                   	push   eax
c0025ce6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ce9:	e8 58 ff ff ff       	call   c0025c46 <IOAPIC::write(int, int)>
c0025cee:	83 c4 0c             	add    esp,0xc
c0025cf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cf4:	50                   	push   eax
c0025cf5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cf8:	e8 2b fe ff ff       	call   c0025b28 <IOAPIC::read(int)>
c0025cfd:	83 c4 08             	add    esp,0x8
c0025d00:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025d03:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025d0a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025d11:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025d18:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d1c:	74 09                	je     c0025d27 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025d1e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025d25:	eb 07                	jmp    c0025d2e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025d27:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d2e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d32:	74 09                	je     c0025d3d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d34:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d3b:	eb 07                	jmp    c0025d44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d3d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d44:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d4b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d4f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d52:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d58:	52                   	push   edx
c0025d59:	50                   	push   eax
c0025d5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d5d:	e8 e4 fe ff ff       	call   c0025c46 <IOAPIC::write(int, int)>
c0025d62:	83 c4 0c             	add    esp,0xc
c0025d65:	90                   	nop
c0025d66:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d69:	c9                   	leave  
c0025d6a:	c3                   	ret    
c0025d6b:	90                   	nop

c0025d6c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d6c:	55                   	push   ebp
c0025d6d:	89 e5                	mov    ebp,esp
c0025d6f:	57                   	push   edi
c0025d70:	56                   	push   esi
c0025d71:	53                   	push   ebx
c0025d72:	83 ec 2c             	sub    esp,0x2c
c0025d75:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d78:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d7b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d7f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d83:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d87:	74 5a                	je     c0025de3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d89:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d8d:	7f 44                	jg     c0025dd3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d92:	05 e0 d7 02 c0       	add    eax,0xc002d7e0
c0025d97:	8a 00                	mov    al,BYTE PTR [eax]
c0025d99:	0f b6 c0             	movzx  eax,al
c0025d9c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025da2:	66 8b 84 00 20 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0e0]
c0025daa:	0f b7 c0             	movzx  eax,ax
c0025dad:	83 e0 02             	and    eax,0x2
c0025db0:	85 c0                	test   eax,eax
c0025db2:	74 04                	je     c0025db8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025db4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025db8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dbb:	66 8b 84 00 20 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0e0]
c0025dc3:	0f b7 c0             	movzx  eax,ax
c0025dc6:	83 e0 08             	and    eax,0x8
c0025dc9:	85 c0                	test   eax,eax
c0025dcb:	74 16                	je     c0025de3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025dcd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025dd1:	eb 10                	jmp    c0025de3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025dd3:	83 ec 0c             	sub    esp,0xc
c0025dd6:	68 a8 d2 02 c0       	push   0xc002d2a8
c0025ddb:	e8 07 49 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0025de0:	83 c4 10             	add    esp,0x10
c0025de3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025de7:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c0025dec:	83 ec 08             	sub    esp,0x8
c0025def:	50                   	push   eax
c0025df0:	68 e0 d2 02 c0       	push   0xc002d2e0
c0025df5:	e8 3c d2 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0025dfa:	83 c4 10             	add    esp,0x10
c0025dfd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025e04:	a1 20 29 03 c0       	mov    eax,ds:0xc0032920
c0025e09:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025e0c:	7d 67                	jge    c0025e75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e0e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e11:	8b 04 85 40 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6c0]
c0025e18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e1b:	83 ec 08             	sub    esp,0x8
c0025e1e:	52                   	push   edx
c0025e1f:	50                   	push   eax
c0025e20:	e8 d1 fc ff ff       	call   c0025af6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025e25:	83 c4 10             	add    esp,0x10
c0025e28:	84 c0                	test   al,al
c0025e2a:	74 44                	je     c0025e70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025e2c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e2f:	8b 1c 85 40 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd6c0]
c0025e36:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e3a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e3d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e44:	83 c0 20             	add    eax,0x20
c0025e47:	0f b6 f0             	movzx  esi,al
c0025e4a:	b8 00 00 00 00       	mov    eax,0x0
c0025e4f:	99                   	cdq    
c0025e50:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e53:	0f b6 c9             	movzx  ecx,cl
c0025e56:	83 ec 04             	sub    esp,0x4
c0025e59:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e5c:	57                   	push   edi
c0025e5d:	56                   	push   esi
c0025e5e:	52                   	push   edx
c0025e5f:	50                   	push   eax
c0025e60:	51                   	push   ecx
c0025e61:	53                   	push   ebx
c0025e62:	e8 0b fe ff ff       	call   c0025c72 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e67:	83 c4 20             	add    esp,0x20
c0025e6a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e6e:	eb 05                	jmp    c0025e75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e70:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e73:	eb 8f                	jmp    c0025e04 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e75:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e78:	83 f0 01             	xor    eax,0x1
c0025e7b:	84 c0                	test   al,al
c0025e7d:	74 10                	je     c0025e8f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e7f:	83 ec 0c             	sub    esp,0xc
c0025e82:	68 f7 d2 02 c0       	push   0xc002d2f7
c0025e87:	e8 5b 48 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0025e8c:	83 c4 10             	add    esp,0x10
c0025e8f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e93:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e9a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e9e:	7f 65                	jg     c0025f05 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025ea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ea3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ea6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ead:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025eb0:	01 ca                	add    edx,ecx
c0025eb2:	83 c2 54             	add    edx,0x54
c0025eb5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025eb9:	85 c0                	test   eax,eax
c0025ebb:	75 43                	jne    c0025f00 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ec0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ec3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025eca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ecd:	01 ca                	add    edx,ecx
c0025ecf:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ed2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ed5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025edc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025edf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ee6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ee9:	01 ca                	add    edx,ecx
c0025eeb:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ef1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025ef4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ef8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025efb:	83 e8 20             	sub    eax,0x20
c0025efe:	eb 1a                	jmp    c0025f1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025f00:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025f03:	eb 95                	jmp    c0025e9a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025f05:	83 ec 0c             	sub    esp,0xc
c0025f08:	68 04 d3 02 c0       	push   0xc002d304
c0025f0d:	e8 d5 47 ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0025f12:	83 c4 10             	add    esp,0x10
c0025f15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025f1a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f1d:	5b                   	pop    ebx
c0025f1e:	5e                   	pop    esi
c0025f1f:	5f                   	pop    edi
c0025f20:	5d                   	pop    ebp
c0025f21:	c3                   	ret    

c0025f22 <PIC::disable()>:
c0025f22:	55                   	push   ebp
c0025f23:	89 e5                	mov    ebp,esp
c0025f25:	83 ec 10             	sub    esp,0x10
c0025f28:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f2e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f32:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f35:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f39:	ee                   	out    dx,al
c0025f3a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f40:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f44:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f47:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f4b:	ee                   	out    dx,al
c0025f4c:	90                   	nop
c0025f4d:	c9                   	leave  
c0025f4e:	c3                   	ret    
c0025f4f:	90                   	nop

c0025f50 <PIC::close(int, int, void*)>:
c0025f50:	55                   	push   ebp
c0025f51:	89 e5                	mov    ebp,esp
c0025f53:	83 ec 08             	sub    esp,0x8
c0025f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f5b:	83 c0 3c             	add    eax,0x3c
c0025f5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f60:	83 ec 0c             	sub    esp,0xc
c0025f63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f66:	ff d0                	call   eax
c0025f68:	83 c4 10             	add    esp,0x10
c0025f6b:	b8 00 00 00 00       	mov    eax,0x0
c0025f70:	c9                   	leave  
c0025f71:	c3                   	ret    

c0025f72 <PIC::PIC()>:
c0025f72:	83 ec 0c             	sub    esp,0xc
c0025f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f79:	83 ec 08             	sub    esp,0x8
c0025f7c:	68 b0 d3 02 c0       	push   0xc002d3b0
c0025f81:	50                   	push   eax
c0025f82:	e8 31 ee fe ff       	call   c0014db8 <InterruptController::InterruptController(char const*)>
c0025f87:	83 c4 10             	add    esp,0x10
c0025f8a:	ba dc d3 02 c0       	mov    edx,0xc002d3dc
c0025f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f93:	89 10                	mov    DWORD PTR [eax],edx
c0025f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f9f:	0f b6 d0             	movzx  edx,al
c0025fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fb7:	0f b6 d0             	movzx  edx,al
c0025fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbe:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fcd:	8d 50 01             	lea    edx,[eax+0x1]
c0025fd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fd4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fda:	0f b6 d0             	movzx  edx,al
c0025fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fe5:	83 e1 3f             	and    ecx,0x3f
c0025fe8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ff6:	0f b6 d0             	movzx  edx,al
c0025ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026008:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002600e:	0f b6 d0             	movzx  edx,al
c0026011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026015:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002601a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002601e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026024:	8d 50 01             	lea    edx,[eax+0x1]
c0026027:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002602b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026031:	0f b6 d0             	movzx  edx,al
c0026034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026038:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002603c:	83 e1 3f             	and    ecx,0x3f
c002603f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026043:	90                   	nop
c0026044:	83 c4 0c             	add    esp,0xc
c0026047:	c3                   	ret    

c0026048 <PIC::ioWait()>:
c0026048:	eb 00                	jmp    c002604a <PIC::ioWait()+0x2>
c002604a:	eb 00                	jmp    c002604c <PIC::ioWait()+0x4>
c002604c:	90                   	nop
c002604d:	c3                   	ret    

c002604e <PIC::getIRQReg(int)>:
c002604e:	55                   	push   ebp
c002604f:	89 e5                	mov    ebp,esp
c0026051:	83 ec 10             	sub    esp,0x10
c0026054:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026057:	0f b6 c0             	movzx  eax,al
c002605a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026060:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026063:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026066:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002606a:	ee                   	out    dx,al
c002606b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002606e:	0f b6 c0             	movzx  eax,al
c0026071:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026077:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002607a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002607d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026081:	ee                   	out    dx,al
c0026082:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026088:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002608c:	89 c2                	mov    edx,eax
c002608e:	ec                   	in     al,dx
c002608f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026092:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026095:	0f b6 c0             	movzx  eax,al
c0026098:	c1 e0 08             	shl    eax,0x8
c002609b:	89 c1                	mov    ecx,eax
c002609d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00260a3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00260a7:	89 c2                	mov    edx,eax
c00260a9:	ec                   	in     al,dx
c00260aa:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00260ad:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00260b0:	0f b6 c0             	movzx  eax,al
c00260b3:	09 c8                	or     eax,ecx
c00260b5:	c9                   	leave  
c00260b6:	c3                   	ret    
c00260b7:	90                   	nop

c00260b8 <PIC::eoi(unsigned char)>:
c00260b8:	55                   	push   ebp
c00260b9:	89 e5                	mov    ebp,esp
c00260bb:	83 ec 14             	sub    esp,0x14
c00260be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260c1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00260c4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260c8:	75 1e                	jne    c00260e8 <PIC::eoi(unsigned char)+0x30>
c00260ca:	6a 0b                	push   0xb
c00260cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260cf:	e8 7a ff ff ff       	call   c002604e <PIC::getIRQReg(int)>
c00260d4:	83 c4 08             	add    esp,0x8
c00260d7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260db:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260df:	25 80 00 00 00       	and    eax,0x80
c00260e4:	85 c0                	test   eax,eax
c00260e6:	74 5f                	je     c0026147 <PIC::eoi(unsigned char)+0x8f>
c00260e8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00260ec:	75 2d                	jne    c002611b <PIC::eoi(unsigned char)+0x63>
c00260ee:	6a 0b                	push   0xb
c00260f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f3:	e8 56 ff ff ff       	call   c002604e <PIC::getIRQReg(int)>
c00260f8:	83 c4 08             	add    esp,0x8
c00260fb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00260ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026102:	66 85 c0             	test   ax,ax
c0026105:	78 14                	js     c002611b <PIC::eoi(unsigned char)+0x63>
c0026107:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002610d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026111:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026114:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026118:	ee                   	out    dx,al
c0026119:	eb 2d                	jmp    c0026148 <PIC::eoi(unsigned char)+0x90>
c002611b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002611f:	76 12                	jbe    c0026133 <PIC::eoi(unsigned char)+0x7b>
c0026121:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026127:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002612b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002612e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026132:	ee                   	out    dx,al
c0026133:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026139:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002613d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026140:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026144:	ee                   	out    dx,al
c0026145:	eb 01                	jmp    c0026148 <PIC::eoi(unsigned char)+0x90>
c0026147:	90                   	nop
c0026148:	c9                   	leave  
c0026149:	c3                   	ret    

c002614a <PIC::remap()>:
c002614a:	55                   	push   ebp
c002614b:	89 e5                	mov    ebp,esp
c002614d:	83 ec 48             	sub    esp,0x48
c0026150:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026157:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002615e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026164:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026167:	89 c2                	mov    edx,eax
c0026169:	ec                   	in     al,dx
c002616a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002616d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026170:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026173:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026179:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002617c:	89 c2                	mov    edx,eax
c002617e:	ec                   	in     al,dx
c002617f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026182:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026185:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026188:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002618e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026192:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026195:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026198:	ee                   	out    dx,al
c0026199:	83 ec 0c             	sub    esp,0xc
c002619c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002619f:	e8 a4 fe ff ff       	call   c0026048 <PIC::ioWait()>
c00261a4:	83 c4 10             	add    esp,0x10
c00261a7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00261ad:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00261b1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00261b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00261b7:	ee                   	out    dx,al
c00261b8:	83 ec 0c             	sub    esp,0xc
c00261bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261be:	e8 85 fe ff ff       	call   c0026048 <PIC::ioWait()>
c00261c3:	83 c4 10             	add    esp,0x10
c00261c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00261c9:	0f b6 c0             	movzx  eax,al
c00261cc:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261d2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261d5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261d8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261db:	ee                   	out    dx,al
c00261dc:	83 ec 0c             	sub    esp,0xc
c00261df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e2:	e8 61 fe ff ff       	call   c0026048 <PIC::ioWait()>
c00261e7:	83 c4 10             	add    esp,0x10
c00261ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261ed:	0f b6 c0             	movzx  eax,al
c00261f0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00261f6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00261f9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00261fc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00261ff:	ee                   	out    dx,al
c0026200:	83 ec 0c             	sub    esp,0xc
c0026203:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026206:	e8 3d fe ff ff       	call   c0026048 <PIC::ioWait()>
c002620b:	83 c4 10             	add    esp,0x10
c002620e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026214:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026218:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002621b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002621e:	ee                   	out    dx,al
c002621f:	83 ec 0c             	sub    esp,0xc
c0026222:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026225:	e8 1e fe ff ff       	call   c0026048 <PIC::ioWait()>
c002622a:	83 c4 10             	add    esp,0x10
c002622d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026233:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026237:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002623a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002623d:	ee                   	out    dx,al
c002623e:	83 ec 0c             	sub    esp,0xc
c0026241:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026244:	e8 ff fd ff ff       	call   c0026048 <PIC::ioWait()>
c0026249:	83 c4 10             	add    esp,0x10
c002624c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026252:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026256:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026259:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002625c:	ee                   	out    dx,al
c002625d:	83 ec 0c             	sub    esp,0xc
c0026260:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026263:	e8 e0 fd ff ff       	call   c0026048 <PIC::ioWait()>
c0026268:	83 c4 10             	add    esp,0x10
c002626b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026271:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026275:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026278:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002627b:	ee                   	out    dx,al
c002627c:	83 ec 0c             	sub    esp,0xc
c002627f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026282:	e8 c1 fd ff ff       	call   c0026048 <PIC::ioWait()>
c0026287:	83 c4 10             	add    esp,0x10
c002628a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002628e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026294:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026297:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002629a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002629d:	ee                   	out    dx,al
c002629e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00262a2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00262a8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00262ab:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00262ae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00262b1:	ee                   	out    dx,al
c00262b2:	90                   	nop
c00262b3:	c9                   	leave  
c00262b4:	c3                   	ret    
c00262b5:	90                   	nop

c00262b6 <PIC::open(int, int, void*)>:
c00262b6:	55                   	push   ebp
c00262b7:	89 e5                	mov    ebp,esp
c00262b9:	83 ec 18             	sub    esp,0x18
c00262bc:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00262c2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00262c6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262c9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262cd:	ee                   	out    dx,al
c00262ce:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262d4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262d8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262db:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262df:	ee                   	out    dx,al
c00262e0:	83 ec 0c             	sub    esp,0xc
c00262e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262e6:	e8 5f fe ff ff       	call   c002614a <PIC::remap()>
c00262eb:	83 c4 10             	add    esp,0x10
c00262ee:	b8 00 00 00 00       	mov    eax,0x0
c00262f3:	c9                   	leave  
c00262f4:	c3                   	ret    
c00262f5:	90                   	nop

c00262f6 <APICTimer::close(int, int, void*)>:
c00262f6:	b8 00 00 00 00       	mov    eax,0x0
c00262fb:	c3                   	ret    

c00262fc <apicTimerHandler(regs*, void*)>:
c00262fc:	83 ec 0c             	sub    esp,0xc
c00262ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026303:	8b 00                	mov    eax,DWORD PTR [eax]
c0026305:	99                   	cdq    
c0026306:	52                   	push   edx
c0026307:	50                   	push   eax
c0026308:	6a 00                	push   0x0
c002630a:	68 00 ca 9a 3b       	push   0x3b9aca00
c002630f:	e8 88 07 00 00       	call   c0026a9c <__udivdi3>
c0026314:	83 c4 10             	add    esp,0x10
c0026317:	83 ec 08             	sub    esp,0x8
c002631a:	52                   	push   edx
c002631b:	50                   	push   eax
c002631c:	e8 f2 0a ff ff       	call   c0016e13 <timerHandler(unsigned long long)>
c0026321:	83 c4 10             	add    esp,0x10
c0026324:	90                   	nop
c0026325:	83 c4 0c             	add    esp,0xc
c0026328:	c3                   	ret    
c0026329:	90                   	nop

c002632a <APICTimer::write(int)>:
c002632a:	53                   	push   ebx
c002632b:	83 ec 28             	sub    esp,0x28
c002632e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026332:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026336:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002633c:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0026341:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026347:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002634d:	83 ec 0c             	sub    esp,0xc
c0026350:	50                   	push   eax
c0026351:	e8 de f4 ff ff       	call   c0025834 <APIC::getBase()>
c0026356:	83 c4 10             	add    esp,0x10
c0026359:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002635d:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c0026362:	8b 15 34 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec34
c0026368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002636c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026370:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026374:	05 e0 03 00 00       	add    eax,0x3e0
c0026379:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002637f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026383:	05 80 03 00 00       	add    eax,0x380
c0026388:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002638e:	fb                   	sti    
c002638f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026393:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026397:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002639c:	83 d2 00             	adc    edx,0x0
c002639f:	89 c1                	mov    ecx,eax
c00263a1:	89 d3                	mov    ebx,edx
c00263a3:	a1 30 ec 02 c0       	mov    eax,ds:0xc002ec30
c00263a8:	8b 15 34 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec34
c00263ae:	39 c8                	cmp    eax,ecx
c00263b0:	89 d0                	mov    eax,edx
c00263b2:	19 d8                	sbb    eax,ebx
c00263b4:	73 02                	jae    c00263b8 <APICTimer::write(int)+0x8e>
c00263b6:	eb d7                	jmp    c002638f <APICTimer::write(int)+0x65>
c00263b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263bc:	05 20 03 00 00       	add    eax,0x320
c00263c1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00263c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263cb:	05 90 03 00 00       	add    eax,0x390
c00263d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00263d2:	f7 d0                	not    eax
c00263d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263d8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263e0:	ba 00 00 00 00       	mov    edx,0x0
c00263e5:	f7 f3                	div    ebx
c00263e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263ef:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263f5:	0d 00 00 02 00       	or     eax,0x20000
c00263fa:	89 c2                	mov    edx,eax
c00263fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026400:	05 20 03 00 00       	add    eax,0x320
c0026405:	89 10                	mov    DWORD PTR [eax],edx
c0026407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002640b:	05 e0 03 00 00       	add    eax,0x3e0
c0026410:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002641a:	05 80 03 00 00       	add    eax,0x380
c002641f:	89 c2                	mov    edx,eax
c0026421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026425:	89 02                	mov    DWORD PTR [edx],eax
c0026427:	90                   	nop
c0026428:	83 c4 28             	add    esp,0x28
c002642b:	5b                   	pop    ebx
c002642c:	c3                   	ret    
c002642d:	90                   	nop

c002642e <APICTimer::open(int, int, void*)>:
c002642e:	57                   	push   edi
c002642f:	56                   	push   esi
c0026430:	53                   	push   ebx
c0026431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026435:	8b 00                	mov    eax,DWORD PTR [eax]
c0026437:	83 c0 24             	add    eax,0x24
c002643a:	8b 00                	mov    eax,DWORD PTR [eax]
c002643c:	83 ec 08             	sub    esp,0x8
c002643f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026447:	ff d0                	call   eax
c0026449:	83 c4 10             	add    esp,0x10
c002644c:	a1 88 e5 02 c0       	mov    eax,ds:0xc002e588
c0026451:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026457:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002645d:	83 ec 0c             	sub    esp,0xc
c0026460:	50                   	push   eax
c0026461:	e8 ce f3 ff ff       	call   c0025834 <APIC::getBase()>
c0026466:	83 c4 10             	add    esp,0x10
c0026469:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002646f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026473:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026479:	0f b6 f8             	movzx  edi,al
c002647c:	89 d0                	mov    eax,edx
c002647e:	ba 00 00 00 00       	mov    edx,0x0
c0026483:	89 c1                	mov    ecx,eax
c0026485:	80 e5 ff             	and    ch,0xff
c0026488:	89 cb                	mov    ebx,ecx
c002648a:	0f b6 f2             	movzx  esi,dl
c002648d:	89 d8                	mov    eax,ebx
c002648f:	89 f2                	mov    edx,esi
c0026491:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026495:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026498:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002649c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00264a0:	83 e0 00             	and    eax,0x0
c00264a3:	09 d0                	or     eax,edx
c00264a5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00264a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264b3:	8d 50 01             	lea    edx,[eax+0x1]
c00264b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264ba:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00264c0:	0f b6 d0             	movzx  edx,al
c00264c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c7:	83 c2 08             	add    edx,0x8
c00264ca:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264ce:	0f b6 c9             	movzx  ecx,cl
c00264d1:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264d7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264e3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00264e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264f1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00264f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264fb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026501:	83 ec 0c             	sub    esp,0xc
c0026504:	51                   	push   ecx
c0026505:	6a 01                	push   0x1
c0026507:	68 fc 62 02 c0       	push   0xc00262fc
c002650c:	52                   	push   edx
c002650d:	50                   	push   eax
c002650e:	e8 cd de fe ff       	call   c00143e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026513:	83 c4 20             	add    esp,0x20
c0026516:	89 c2                	mov    edx,eax
c0026518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026522:	b8 00 00 00 00       	mov    eax,0x0
c0026527:	5b                   	pop    ebx
c0026528:	5e                   	pop    esi
c0026529:	5f                   	pop    edi
c002652a:	c3                   	ret    
c002652b:	90                   	nop

c002652c <APICTimer::APICTimer()>:
c002652c:	83 ec 0c             	sub    esp,0xc
c002652f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026533:	83 ec 08             	sub    esp,0x8
c0026536:	68 1c d4 02 c0       	push   0xc002d41c
c002653b:	50                   	push   eax
c002653c:	e8 43 08 ff ff       	call   c0016d84 <Timer::Timer(char const*)>
c0026541:	83 c4 10             	add    esp,0x10
c0026544:	ba 30 d4 02 c0       	mov    edx,0xc002d430
c0026549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002654d:	89 10                	mov    DWORD PTR [eax],edx
c002654f:	90                   	nop
c0026550:	83 c4 0c             	add    esp,0xc
c0026553:	c3                   	ret    

c0026554 <PIT::write(int)>:
c0026554:	83 ec 10             	sub    esp,0x10
c0026557:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002655b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002655f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026565:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026569:	a3 64 29 03 c0       	mov    ds:0xc0032964,eax
c002656e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026573:	99                   	cdq    
c0026574:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026578:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002657c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026583:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026588:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002658c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026591:	ee                   	out    dx,al
c0026592:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026596:	0f b6 c0             	movzx  eax,al
c0026599:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00265a0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00265a4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00265a8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00265ad:	ee                   	out    dx,al
c00265ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265b2:	c1 f8 08             	sar    eax,0x8
c00265b5:	0f b6 c0             	movzx  eax,al
c00265b8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00265bf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00265c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00265c7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00265cc:	ee                   	out    dx,al
c00265cd:	90                   	nop
c00265ce:	83 c4 10             	add    esp,0x10
c00265d1:	c3                   	ret    

c00265d2 <pitHandler(regs*, void*)>:
c00265d2:	83 ec 0c             	sub    esp,0xc
c00265d5:	a1 64 29 03 c0       	mov    eax,ds:0xc0032964
c00265da:	99                   	cdq    
c00265db:	52                   	push   edx
c00265dc:	50                   	push   eax
c00265dd:	6a 00                	push   0x0
c00265df:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265e4:	e8 b3 04 00 00       	call   c0026a9c <__udivdi3>
c00265e9:	83 c4 10             	add    esp,0x10
c00265ec:	83 ec 08             	sub    esp,0x8
c00265ef:	52                   	push   edx
c00265f0:	50                   	push   eax
c00265f1:	e8 1d 08 ff ff       	call   c0016e13 <timerHandler(unsigned long long)>
c00265f6:	83 c4 10             	add    esp,0x10
c00265f9:	90                   	nop
c00265fa:	83 c4 0c             	add    esp,0xc
c00265fd:	c3                   	ret    

c00265fe <PIT::open(int, int, void*)>:
c00265fe:	83 ec 0c             	sub    esp,0xc
c0026601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026605:	8b 00                	mov    eax,DWORD PTR [eax]
c0026607:	83 c0 24             	add    eax,0x24
c002660a:	8b 00                	mov    eax,DWORD PTR [eax]
c002660c:	83 ec 08             	sub    esp,0x8
c002660f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026617:	ff d0                	call   eax
c0026619:	83 c4 10             	add    esp,0x10
c002661c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026620:	83 ec 0c             	sub    esp,0xc
c0026623:	6a 00                	push   0x0
c0026625:	6a 01                	push   0x1
c0026627:	68 d2 65 02 c0       	push   0xc00265d2
c002662c:	6a 00                	push   0x0
c002662e:	50                   	push   eax
c002662f:	e8 ac dd fe ff       	call   c00143e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026634:	83 c4 20             	add    esp,0x20
c0026637:	89 c2                	mov    edx,eax
c0026639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026643:	b8 00 00 00 00       	mov    eax,0x0
c0026648:	83 c4 0c             	add    esp,0xc
c002664b:	c3                   	ret    

c002664c <PIT::close(int, int, void*)>:
c002664c:	83 ec 0c             	sub    esp,0xc
c002664f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026653:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002665d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026661:	6a 01                	push   0x1
c0026663:	68 d2 65 02 c0       	push   0xc00265d2
c0026668:	6a 00                	push   0x0
c002666a:	50                   	push   eax
c002666b:	e8 ae dd fe ff       	call   c001441e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026670:	83 c4 10             	add    esp,0x10
c0026673:	b8 00 00 00 00       	mov    eax,0x0
c0026678:	83 c4 0c             	add    esp,0xc
c002667b:	c3                   	ret    

c002667c <PIT::PIT()>:
c002667c:	83 ec 0c             	sub    esp,0xc
c002667f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026683:	83 ec 08             	sub    esp,0x8
c0026686:	68 58 d4 02 c0       	push   0xc002d458
c002668b:	50                   	push   eax
c002668c:	e8 f3 06 ff ff       	call   c0016d84 <Timer::Timer(char const*)>
c0026691:	83 c4 10             	add    esp,0x10
c0026694:	ba 80 d4 02 c0       	mov    edx,0xc002d480
c0026699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669d:	89 10                	mov    DWORD PTR [eax],edx
c002669f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266a9:	0f b6 d0             	movzx  edx,al
c00266ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00266b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266c1:	0f b6 d0             	movzx  edx,al
c00266c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00266cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266d7:	8d 50 01             	lea    edx,[eax+0x1]
c00266da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266de:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266e4:	0f b6 d0             	movzx  edx,al
c00266e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266eb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266ef:	83 e1 3f             	and    ecx,0x3f
c00266f2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266f6:	90                   	nop
c00266f7:	83 c4 0c             	add    esp,0xc
c00266fa:	c3                   	ret    
c00266fb:	66 90                	xchg   ax,ax
c00266fd:	66 90                	xchg   ax,ax
c00266ff:	90                   	nop

c0026700 <avxDetect>:
c0026700:	b8 00 00 00 00       	mov    eax,0x0
c0026705:	c3                   	ret    

c0026706 <avxSave>:
c0026706:	c3                   	ret    

c0026707 <avxLoad>:
c0026707:	c3                   	ret    

c0026708 <avxInit>:
c0026708:	c3                   	ret    

c0026709 <avxClose>:
c0026709:	c3                   	ret    

c002670a <wouldSheSayYes>:
c002670a:	c3                   	ret    
c002670b:	49                   	dec    ecx
c002670c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026710:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026714:	75 20                	jne    c0026736 <sseDetect.noSSE+0x1>
c0026716:	4e                   	dec    esi
c0026717:	79 61                	jns    c002677a <x87Detect+0x14>
c0026719:	68 2e 2e 2e 00       	push   0x2e2e2e
c002671e:	66 90                	xchg   ax,ax

c0026720 <absolutelyNoChanceInHell>:
c0026720:	b8 01 00 00 00       	mov    eax,0x1
c0026725:	0f a2                	cpuid  
c0026727:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002672d:	74 06                	je     c0026735 <sseDetect.noSSE>
c002672f:	b8 01 00 00 00       	mov    eax,0x1
c0026734:	c3                   	ret    

c0026735 <sseDetect.noSSE>:
c0026735:	31 c0                	xor    eax,eax
c0026737:	c3                   	ret    

c0026738 <sseSave>:
c0026738:	0f ae 44 24 08       	fxsave [esp+0x8]
c002673d:	c3                   	ret    

c002673e <sseLoad>:
c002673e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026743:	c3                   	ret    

c0026744 <sseInit>:
c0026744:	e8 43 00 00 00       	call   c002678c <x87Init>
c0026749:	0f 20 e0             	mov    eax,cr4
c002674c:	66 0d 00 06          	or     ax,0x600
c0026750:	0f 22 e0             	mov    cr4,eax
c0026753:	c3                   	ret    

c0026754 <sseClose>:
c0026754:	c3                   	ret    
c0026755:	66 90                	xchg   ax,ax
c0026757:	66 90                	xchg   ax,ax
c0026759:	66 90                	xchg   ax,ax
c002675b:	66 90                	xchg   ax,ax
c002675d:	66 90                	xchg   ax,ax
c002675f:	90                   	nop

c0026760 <value_37F>:
c0026760:	7f 03                	jg     c0026765 <value_37A+0x1>

c0026762 <value_37E>:
c0026762:	7e 03                	jle    c0026767 <x87Detect+0x1>

c0026764 <value_37A>:
c0026764:	7a 03                	jp     c0026769 <x87Detect+0x3>

c0026766 <x87Detect>:
c0026766:	b8 01 00 00 00       	mov    eax,0x1
c002676b:	0f a2                	cpuid  
c002676d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026773:	74 06                	je     c002677b <x87Detect.nox87>
c0026775:	b8 01 00 00 00       	mov    eax,0x1
c002677a:	c3                   	ret    

c002677b <x87Detect.nox87>:
c002677b:	b8 00 00 00 00       	mov    eax,0x0
c0026780:	c3                   	ret    

c0026781 <x87Save>:
c0026781:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026786:	c3                   	ret    

c0026787 <x87Load>:
c0026787:	dd 64 24 08          	frstor [esp+0x8]
c002678b:	c3                   	ret    

c002678c <x87Init>:
c002678c:	9b db e3             	finit  
c002678f:	0f 20 c0             	mov    eax,cr0
c0026792:	66 25 fb ff          	and    ax,0xfffb
c0026796:	66 0d 22 00          	or     ax,0x22
c002679a:	0f 22 c0             	mov    cr0,eax
c002679d:	0f 06                	clts   
c002679f:	d9 2d 64 67 02 c0    	fldcw  WORD PTR ds:0xc0026764
c00267a5:	c3                   	ret    

c00267a6 <x87Close>:
c00267a6:	c3                   	ret    
c00267a7:	90                   	nop

c00267a8 <__do_global_ctors_aux>:
c00267a8:	a1 ec 92 02 c0       	mov    eax,ds:0xc00292ec
c00267ad:	83 f8 ff             	cmp    eax,0xffffffff
c00267b0:	74 1a                	je     c00267cc <__do_global_ctors_aux+0x24>
c00267b2:	55                   	push   ebp
c00267b3:	89 e5                	mov    ebp,esp
c00267b5:	53                   	push   ebx
c00267b6:	52                   	push   edx
c00267b7:	bb ec 92 02 c0       	mov    ebx,0xc00292ec
c00267bc:	ff d0                	call   eax
c00267be:	83 eb 04             	sub    ebx,0x4
c00267c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00267c3:	83 f8 ff             	cmp    eax,0xffffffff
c00267c6:	75 f4                	jne    c00267bc <__do_global_ctors_aux+0x14>
c00267c8:	58                   	pop    eax
c00267c9:	5b                   	pop    ebx
c00267ca:	5d                   	pop    ebp
c00267cb:	c3                   	ret    
c00267cc:	c3                   	ret    
c00267cd:	66 90                	xchg   ax,ax
c00267cf:	90                   	nop

c00267d0 <__divdi3>:
c00267d0:	55                   	push   ebp
c00267d1:	57                   	push   edi
c00267d2:	56                   	push   esi
c00267d3:	53                   	push   ebx
c00267d4:	83 ec 1c             	sub    esp,0x1c
c00267d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00267db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00267ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267ee:	85 db                	test   ebx,ebx
c00267f0:	0f 88 8e 00 00 00    	js     c0026884 <__divdi3+0xb4>
c00267f6:	89 dd                	mov    ebp,ebx
c00267f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026800:	89 d3                	mov    ebx,edx
c0026802:	85 d2                	test   edx,edx
c0026804:	79 0d                	jns    c0026813 <__divdi3+0x43>
c0026806:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002680a:	f7 d8                	neg    eax
c002680c:	83 d2 00             	adc    edx,0x0
c002680f:	f7 da                	neg    edx
c0026811:	89 d3                	mov    ebx,edx
c0026813:	89 c7                	mov    edi,eax
c0026815:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026818:	85 db                	test   ebx,ebx
c002681a:	75 48                	jne    c0026864 <__divdi3+0x94>
c002681c:	39 ef                	cmp    edi,ebp
c002681e:	76 24                	jbe    c0026844 <__divdi3+0x74>
c0026820:	89 ea                	mov    edx,ebp
c0026822:	f7 f7                	div    edi
c0026824:	89 c1                	mov    ecx,eax
c0026826:	31 f6                	xor    esi,esi
c0026828:	89 c8                	mov    eax,ecx
c002682a:	89 f2                	mov    edx,esi
c002682c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026830:	85 c9                	test   ecx,ecx
c0026832:	74 07                	je     c002683b <__divdi3+0x6b>
c0026834:	f7 d8                	neg    eax
c0026836:	83 d2 00             	adc    edx,0x0
c0026839:	f7 da                	neg    edx
c002683b:	83 c4 1c             	add    esp,0x1c
c002683e:	5b                   	pop    ebx
c002683f:	5e                   	pop    esi
c0026840:	5f                   	pop    edi
c0026841:	5d                   	pop    ebp
c0026842:	c3                   	ret    
c0026843:	90                   	nop
c0026844:	85 ff                	test   edi,edi
c0026846:	75 0b                	jne    c0026853 <__divdi3+0x83>
c0026848:	b8 01 00 00 00       	mov    eax,0x1
c002684d:	31 d2                	xor    edx,edx
c002684f:	f7 f3                	div    ebx
c0026851:	89 c7                	mov    edi,eax
c0026853:	31 d2                	xor    edx,edx
c0026855:	89 e8                	mov    eax,ebp
c0026857:	f7 f7                	div    edi
c0026859:	89 c6                	mov    esi,eax
c002685b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002685e:	f7 f7                	div    edi
c0026860:	89 c1                	mov    ecx,eax
c0026862:	eb c4                	jmp    c0026828 <__divdi3+0x58>
c0026864:	39 eb                	cmp    ebx,ebp
c0026866:	77 3c                	ja     c00268a4 <__divdi3+0xd4>
c0026868:	0f bd f3             	bsr    esi,ebx
c002686b:	83 f6 1f             	xor    esi,0x1f
c002686e:	75 40                	jne    c00268b0 <__divdi3+0xe0>
c0026870:	39 eb                	cmp    ebx,ebp
c0026872:	72 09                	jb     c002687d <__divdi3+0xad>
c0026874:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026877:	0f 87 97 00 00 00    	ja     c0026914 <__divdi3+0x144>
c002687d:	b9 01 00 00 00       	mov    ecx,0x1
c0026882:	eb a4                	jmp    c0026828 <__divdi3+0x58>
c0026884:	f7 d9                	neg    ecx
c0026886:	83 d3 00             	adc    ebx,0x0
c0026889:	f7 db                	neg    ebx
c002688b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002688e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026892:	89 dd                	mov    ebp,ebx
c0026894:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002689c:	e9 5f ff ff ff       	jmp    c0026800 <__divdi3+0x30>
c00268a1:	8d 76 00             	lea    esi,[esi+0x0]
c00268a4:	31 f6                	xor    esi,esi
c00268a6:	31 c9                	xor    ecx,ecx
c00268a8:	e9 7b ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c00268ad:	8d 76 00             	lea    esi,[esi+0x0]
c00268b0:	b8 20 00 00 00       	mov    eax,0x20
c00268b5:	29 f0                	sub    eax,esi
c00268b7:	89 f1                	mov    ecx,esi
c00268b9:	d3 e3                	shl    ebx,cl
c00268bb:	89 fa                	mov    edx,edi
c00268bd:	88 c1                	mov    cl,al
c00268bf:	d3 ea                	shr    edx,cl
c00268c1:	09 da                	or     edx,ebx
c00268c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00268c7:	89 f1                	mov    ecx,esi
c00268c9:	d3 e7                	shl    edi,cl
c00268cb:	89 eb                	mov    ebx,ebp
c00268cd:	88 c1                	mov    cl,al
c00268cf:	d3 eb                	shr    ebx,cl
c00268d1:	89 f1                	mov    ecx,esi
c00268d3:	d3 e5                	shl    ebp,cl
c00268d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00268d8:	88 c1                	mov    cl,al
c00268da:	d3 ea                	shr    edx,cl
c00268dc:	09 d5                	or     ebp,edx
c00268de:	89 e8                	mov    eax,ebp
c00268e0:	89 da                	mov    edx,ebx
c00268e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00268e6:	89 d3                	mov    ebx,edx
c00268e8:	89 c5                	mov    ebp,eax
c00268ea:	f7 e7                	mul    edi
c00268ec:	39 d3                	cmp    ebx,edx
c00268ee:	72 18                	jb     c0026908 <__divdi3+0x138>
c00268f0:	74 0a                	je     c00268fc <__divdi3+0x12c>
c00268f2:	89 e9                	mov    ecx,ebp
c00268f4:	31 f6                	xor    esi,esi
c00268f6:	e9 2d ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c00268fb:	90                   	nop
c00268fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00268ff:	89 f1                	mov    ecx,esi
c0026901:	d3 e7                	shl    edi,cl
c0026903:	39 c7                	cmp    edi,eax
c0026905:	73 eb                	jae    c00268f2 <__divdi3+0x122>
c0026907:	90                   	nop
c0026908:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002690b:	31 f6                	xor    esi,esi
c002690d:	e9 16 ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c0026912:	66 90                	xchg   ax,ax
c0026914:	31 c9                	xor    ecx,ecx
c0026916:	e9 0d ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c002691b:	90                   	nop

c002691c <__moddi3>:
c002691c:	55                   	push   ebp
c002691d:	57                   	push   edi
c002691e:	56                   	push   esi
c002691f:	53                   	push   ebx
c0026920:	83 ec 2c             	sub    esp,0x2c
c0026923:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026927:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002692b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002692f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026933:	85 db                	test   ebx,ebx
c0026935:	0f 88 85 00 00 00    	js     c00269c0 <__moddi3+0xa4>
c002693b:	89 de                	mov    esi,ebx
c002693d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026945:	89 d7                	mov    edi,edx
c0026947:	85 d2                	test   edx,edx
c0026949:	79 09                	jns    c0026954 <__moddi3+0x38>
c002694b:	f7 d8                	neg    eax
c002694d:	83 d2 00             	adc    edx,0x0
c0026950:	f7 da                	neg    edx
c0026952:	89 d7                	mov    edi,edx
c0026954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026958:	89 cd                	mov    ebp,ecx
c002695a:	85 ff                	test   edi,edi
c002695c:	75 52                	jne    c00269b0 <__moddi3+0x94>
c002695e:	89 c3                	mov    ebx,eax
c0026960:	39 f0                	cmp    eax,esi
c0026962:	76 24                	jbe    c0026988 <__moddi3+0x6c>
c0026964:	89 c8                	mov    eax,ecx
c0026966:	89 f2                	mov    edx,esi
c0026968:	f7 f3                	div    ebx
c002696a:	89 d6                	mov    esi,edx
c002696c:	89 f0                	mov    eax,esi
c002696e:	31 d2                	xor    edx,edx
c0026970:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026974:	85 c9                	test   ecx,ecx
c0026976:	74 07                	je     c002697f <__moddi3+0x63>
c0026978:	f7 d8                	neg    eax
c002697a:	83 d2 00             	adc    edx,0x0
c002697d:	f7 da                	neg    edx
c002697f:	83 c4 2c             	add    esp,0x2c
c0026982:	5b                   	pop    ebx
c0026983:	5e                   	pop    esi
c0026984:	5f                   	pop    edi
c0026985:	5d                   	pop    ebp
c0026986:	c3                   	ret    
c0026987:	90                   	nop
c0026988:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002698c:	85 db                	test   ebx,ebx
c002698e:	75 0d                	jne    c002699d <__moddi3+0x81>
c0026990:	b8 01 00 00 00       	mov    eax,0x1
c0026995:	31 d2                	xor    edx,edx
c0026997:	f7 f7                	div    edi
c0026999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002699d:	89 f0                	mov    eax,esi
c002699f:	31 d2                	xor    edx,edx
c00269a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269a5:	f7 f7                	div    edi
c00269a7:	89 e8                	mov    eax,ebp
c00269a9:	f7 f7                	div    edi
c00269ab:	89 d6                	mov    esi,edx
c00269ad:	eb bd                	jmp    c002696c <__moddi3+0x50>
c00269af:	90                   	nop
c00269b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269b4:	39 f7                	cmp    edi,esi
c00269b6:	76 20                	jbe    c00269d8 <__moddi3+0xbc>
c00269b8:	89 c8                	mov    eax,ecx
c00269ba:	89 f2                	mov    edx,esi
c00269bc:	eb b2                	jmp    c0026970 <__moddi3+0x54>
c00269be:	66 90                	xchg   ax,ax
c00269c0:	f7 d9                	neg    ecx
c00269c2:	83 d3 00             	adc    ebx,0x0
c00269c5:	f7 db                	neg    ebx
c00269c7:	89 de                	mov    esi,ebx
c00269c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269d1:	e9 6f ff ff ff       	jmp    c0026945 <__moddi3+0x29>
c00269d6:	66 90                	xchg   ax,ax
c00269d8:	0f bd c7             	bsr    eax,edi
c00269db:	83 f0 1f             	xor    eax,0x1f
c00269de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00269e2:	75 24                	jne    c0026a08 <__moddi3+0xec>
c00269e4:	39 f7                	cmp    edi,esi
c00269e6:	72 06                	jb     c00269ee <__moddi3+0xd2>
c00269e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00269ec:	77 0c                	ja     c00269fa <__moddi3+0xde>
c00269ee:	89 e9                	mov    ecx,ebp
c00269f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00269f4:	19 fe                	sbb    esi,edi
c00269f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269fe:	89 f2                	mov    edx,esi
c0026a00:	e9 6b ff ff ff       	jmp    c0026970 <__moddi3+0x54>
c0026a05:	8d 76 00             	lea    esi,[esi+0x0]
c0026a08:	b8 20 00 00 00       	mov    eax,0x20
c0026a0d:	89 c2                	mov    edx,eax
c0026a0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026a13:	29 da                	sub    edx,ebx
c0026a15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026a19:	88 d9                	mov    cl,bl
c0026a1b:	d3 e7                	shl    edi,cl
c0026a1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a21:	88 d1                	mov    cl,dl
c0026a23:	d3 e8                	shr    eax,cl
c0026a25:	09 c7                	or     edi,eax
c0026a27:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026a2b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a2f:	89 d8                	mov    eax,ebx
c0026a31:	88 d9                	mov    cl,bl
c0026a33:	d3 e7                	shl    edi,cl
c0026a35:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a39:	89 f3                	mov    ebx,esi
c0026a3b:	88 d1                	mov    cl,dl
c0026a3d:	d3 eb                	shr    ebx,cl
c0026a3f:	89 c7                	mov    edi,eax
c0026a41:	88 c1                	mov    cl,al
c0026a43:	d3 e6                	shl    esi,cl
c0026a45:	89 e8                	mov    eax,ebp
c0026a47:	88 d1                	mov    cl,dl
c0026a49:	d3 e8                	shr    eax,cl
c0026a4b:	09 f0                	or     eax,esi
c0026a4d:	89 f9                	mov    ecx,edi
c0026a4f:	d3 e5                	shl    ebp,cl
c0026a51:	89 da                	mov    edx,ebx
c0026a53:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a57:	89 d3                	mov    ebx,edx
c0026a59:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a5d:	89 c6                	mov    esi,eax
c0026a5f:	89 d1                	mov    ecx,edx
c0026a61:	39 d3                	cmp    ebx,edx
c0026a63:	72 27                	jb     c0026a8c <__moddi3+0x170>
c0026a65:	74 21                	je     c0026a88 <__moddi3+0x16c>
c0026a67:	29 f5                	sub    ebp,esi
c0026a69:	19 cb                	sbb    ebx,ecx
c0026a6b:	89 de                	mov    esi,ebx
c0026a6d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a71:	d3 e6                	shl    esi,cl
c0026a73:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a77:	89 f9                	mov    ecx,edi
c0026a79:	d3 ed                	shr    ebp,cl
c0026a7b:	09 ee                	or     esi,ebp
c0026a7d:	89 f0                	mov    eax,esi
c0026a7f:	d3 eb                	shr    ebx,cl
c0026a81:	89 da                	mov    edx,ebx
c0026a83:	e9 e8 fe ff ff       	jmp    c0026970 <__moddi3+0x54>
c0026a88:	39 c5                	cmp    ebp,eax
c0026a8a:	73 db                	jae    c0026a67 <__moddi3+0x14b>
c0026a8c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a90:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a94:	89 d1                	mov    ecx,edx
c0026a96:	89 c6                	mov    esi,eax
c0026a98:	eb cd                	jmp    c0026a67 <__moddi3+0x14b>
c0026a9a:	66 90                	xchg   ax,ax

c0026a9c <__udivdi3>:
c0026a9c:	55                   	push   ebp
c0026a9d:	57                   	push   edi
c0026a9e:	56                   	push   esi
c0026a9f:	53                   	push   ebx
c0026aa0:	83 ec 1c             	sub    esp,0x1c
c0026aa3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026aa7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026aab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026aaf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ab3:	85 d2                	test   edx,edx
c0026ab5:	75 41                	jne    c0026af8 <__udivdi3+0x5c>
c0026ab7:	39 f7                	cmp    edi,esi
c0026ab9:	76 15                	jbe    c0026ad0 <__udivdi3+0x34>
c0026abb:	89 e8                	mov    eax,ebp
c0026abd:	89 f2                	mov    edx,esi
c0026abf:	f7 f7                	div    edi
c0026ac1:	31 db                	xor    ebx,ebx
c0026ac3:	89 da                	mov    edx,ebx
c0026ac5:	83 c4 1c             	add    esp,0x1c
c0026ac8:	5b                   	pop    ebx
c0026ac9:	5e                   	pop    esi
c0026aca:	5f                   	pop    edi
c0026acb:	5d                   	pop    ebp
c0026acc:	c3                   	ret    
c0026acd:	8d 76 00             	lea    esi,[esi+0x0]
c0026ad0:	89 f9                	mov    ecx,edi
c0026ad2:	85 ff                	test   edi,edi
c0026ad4:	75 0b                	jne    c0026ae1 <__udivdi3+0x45>
c0026ad6:	b8 01 00 00 00       	mov    eax,0x1
c0026adb:	31 d2                	xor    edx,edx
c0026add:	f7 f7                	div    edi
c0026adf:	89 c1                	mov    ecx,eax
c0026ae1:	31 d2                	xor    edx,edx
c0026ae3:	89 f0                	mov    eax,esi
c0026ae5:	f7 f1                	div    ecx
c0026ae7:	89 c3                	mov    ebx,eax
c0026ae9:	89 e8                	mov    eax,ebp
c0026aeb:	f7 f1                	div    ecx
c0026aed:	89 da                	mov    edx,ebx
c0026aef:	83 c4 1c             	add    esp,0x1c
c0026af2:	5b                   	pop    ebx
c0026af3:	5e                   	pop    esi
c0026af4:	5f                   	pop    edi
c0026af5:	5d                   	pop    ebp
c0026af6:	c3                   	ret    
c0026af7:	90                   	nop
c0026af8:	39 f2                	cmp    edx,esi
c0026afa:	77 1c                	ja     c0026b18 <__udivdi3+0x7c>
c0026afc:	0f bd da             	bsr    ebx,edx
c0026aff:	83 f3 1f             	xor    ebx,0x1f
c0026b02:	75 24                	jne    c0026b28 <__udivdi3+0x8c>
c0026b04:	39 f2                	cmp    edx,esi
c0026b06:	72 08                	jb     c0026b10 <__udivdi3+0x74>
c0026b08:	39 ef                	cmp    edi,ebp
c0026b0a:	0f 87 84 00 00 00    	ja     c0026b94 <__udivdi3+0xf8>
c0026b10:	b8 01 00 00 00       	mov    eax,0x1
c0026b15:	eb ac                	jmp    c0026ac3 <__udivdi3+0x27>
c0026b17:	90                   	nop
c0026b18:	31 db                	xor    ebx,ebx
c0026b1a:	31 c0                	xor    eax,eax
c0026b1c:	89 da                	mov    edx,ebx
c0026b1e:	83 c4 1c             	add    esp,0x1c
c0026b21:	5b                   	pop    ebx
c0026b22:	5e                   	pop    esi
c0026b23:	5f                   	pop    edi
c0026b24:	5d                   	pop    ebp
c0026b25:	c3                   	ret    
c0026b26:	66 90                	xchg   ax,ax
c0026b28:	b8 20 00 00 00       	mov    eax,0x20
c0026b2d:	29 d8                	sub    eax,ebx
c0026b2f:	88 d9                	mov    cl,bl
c0026b31:	d3 e2                	shl    edx,cl
c0026b33:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b37:	89 fa                	mov    edx,edi
c0026b39:	88 c1                	mov    cl,al
c0026b3b:	d3 ea                	shr    edx,cl
c0026b3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b41:	09 d1                	or     ecx,edx
c0026b43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b47:	88 d9                	mov    cl,bl
c0026b49:	d3 e7                	shl    edi,cl
c0026b4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b4f:	89 f7                	mov    edi,esi
c0026b51:	88 c1                	mov    cl,al
c0026b53:	d3 ef                	shr    edi,cl
c0026b55:	88 d9                	mov    cl,bl
c0026b57:	d3 e6                	shl    esi,cl
c0026b59:	89 ea                	mov    edx,ebp
c0026b5b:	88 c1                	mov    cl,al
c0026b5d:	d3 ea                	shr    edx,cl
c0026b5f:	09 d6                	or     esi,edx
c0026b61:	89 f0                	mov    eax,esi
c0026b63:	89 fa                	mov    edx,edi
c0026b65:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b69:	89 d7                	mov    edi,edx
c0026b6b:	89 c6                	mov    esi,eax
c0026b6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b71:	39 d7                	cmp    edi,edx
c0026b73:	72 13                	jb     c0026b88 <__udivdi3+0xec>
c0026b75:	74 09                	je     c0026b80 <__udivdi3+0xe4>
c0026b77:	89 f0                	mov    eax,esi
c0026b79:	31 db                	xor    ebx,ebx
c0026b7b:	e9 43 ff ff ff       	jmp    c0026ac3 <__udivdi3+0x27>
c0026b80:	88 d9                	mov    cl,bl
c0026b82:	d3 e5                	shl    ebp,cl
c0026b84:	39 c5                	cmp    ebp,eax
c0026b86:	73 ef                	jae    c0026b77 <__udivdi3+0xdb>
c0026b88:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b8b:	31 db                	xor    ebx,ebx
c0026b8d:	e9 31 ff ff ff       	jmp    c0026ac3 <__udivdi3+0x27>
c0026b92:	66 90                	xchg   ax,ax
c0026b94:	31 c0                	xor    eax,eax
c0026b96:	e9 28 ff ff ff       	jmp    c0026ac3 <__udivdi3+0x27>
c0026b9b:	90                   	nop

c0026b9c <__umoddi3>:
c0026b9c:	55                   	push   ebp
c0026b9d:	57                   	push   edi
c0026b9e:	56                   	push   esi
c0026b9f:	53                   	push   ebx
c0026ba0:	83 ec 1c             	sub    esp,0x1c
c0026ba3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ba7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026bab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026baf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026bb3:	89 da                	mov    edx,ebx
c0026bb5:	85 c0                	test   eax,eax
c0026bb7:	75 37                	jne    c0026bf0 <__umoddi3+0x54>
c0026bb9:	39 df                	cmp    edi,ebx
c0026bbb:	76 13                	jbe    c0026bd0 <__umoddi3+0x34>
c0026bbd:	89 f0                	mov    eax,esi
c0026bbf:	f7 f7                	div    edi
c0026bc1:	89 d0                	mov    eax,edx
c0026bc3:	31 d2                	xor    edx,edx
c0026bc5:	83 c4 1c             	add    esp,0x1c
c0026bc8:	5b                   	pop    ebx
c0026bc9:	5e                   	pop    esi
c0026bca:	5f                   	pop    edi
c0026bcb:	5d                   	pop    ebp
c0026bcc:	c3                   	ret    
c0026bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0026bd0:	89 fd                	mov    ebp,edi
c0026bd2:	85 ff                	test   edi,edi
c0026bd4:	75 0b                	jne    c0026be1 <__umoddi3+0x45>
c0026bd6:	b8 01 00 00 00       	mov    eax,0x1
c0026bdb:	31 d2                	xor    edx,edx
c0026bdd:	f7 f7                	div    edi
c0026bdf:	89 c5                	mov    ebp,eax
c0026be1:	89 d8                	mov    eax,ebx
c0026be3:	31 d2                	xor    edx,edx
c0026be5:	f7 f5                	div    ebp
c0026be7:	89 f0                	mov    eax,esi
c0026be9:	f7 f5                	div    ebp
c0026beb:	89 d0                	mov    eax,edx
c0026bed:	eb d4                	jmp    c0026bc3 <__umoddi3+0x27>
c0026bef:	90                   	nop
c0026bf0:	89 f1                	mov    ecx,esi
c0026bf2:	39 d8                	cmp    eax,ebx
c0026bf4:	76 0a                	jbe    c0026c00 <__umoddi3+0x64>
c0026bf6:	89 f0                	mov    eax,esi
c0026bf8:	83 c4 1c             	add    esp,0x1c
c0026bfb:	5b                   	pop    ebx
c0026bfc:	5e                   	pop    esi
c0026bfd:	5f                   	pop    edi
c0026bfe:	5d                   	pop    ebp
c0026bff:	c3                   	ret    
c0026c00:	0f bd e8             	bsr    ebp,eax
c0026c03:	83 f5 1f             	xor    ebp,0x1f
c0026c06:	75 1c                	jne    c0026c24 <__umoddi3+0x88>
c0026c08:	39 d8                	cmp    eax,ebx
c0026c0a:	72 04                	jb     c0026c10 <__umoddi3+0x74>
c0026c0c:	39 f7                	cmp    edi,esi
c0026c0e:	77 08                	ja     c0026c18 <__umoddi3+0x7c>
c0026c10:	89 da                	mov    edx,ebx
c0026c12:	29 fe                	sub    esi,edi
c0026c14:	19 c2                	sbb    edx,eax
c0026c16:	89 f1                	mov    ecx,esi
c0026c18:	89 c8                	mov    eax,ecx
c0026c1a:	83 c4 1c             	add    esp,0x1c
c0026c1d:	5b                   	pop    ebx
c0026c1e:	5e                   	pop    esi
c0026c1f:	5f                   	pop    edi
c0026c20:	5d                   	pop    ebp
c0026c21:	c3                   	ret    
c0026c22:	66 90                	xchg   ax,ax
c0026c24:	ba 20 00 00 00       	mov    edx,0x20
c0026c29:	29 ea                	sub    edx,ebp
c0026c2b:	89 e9                	mov    ecx,ebp
c0026c2d:	d3 e0                	shl    eax,cl
c0026c2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c33:	89 f8                	mov    eax,edi
c0026c35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c39:	88 d1                	mov    cl,dl
c0026c3b:	d3 e8                	shr    eax,cl
c0026c3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c41:	09 c1                	or     ecx,eax
c0026c43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c47:	89 e9                	mov    ecx,ebp
c0026c49:	d3 e7                	shl    edi,cl
c0026c4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c4f:	89 d8                	mov    eax,ebx
c0026c51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c55:	88 d1                	mov    cl,dl
c0026c57:	d3 e8                	shr    eax,cl
c0026c59:	89 c7                	mov    edi,eax
c0026c5b:	89 e9                	mov    ecx,ebp
c0026c5d:	d3 e3                	shl    ebx,cl
c0026c5f:	89 f0                	mov    eax,esi
c0026c61:	88 d1                	mov    cl,dl
c0026c63:	d3 e8                	shr    eax,cl
c0026c65:	09 d8                	or     eax,ebx
c0026c67:	89 e9                	mov    ecx,ebp
c0026c69:	d3 e6                	shl    esi,cl
c0026c6b:	89 f3                	mov    ebx,esi
c0026c6d:	89 fa                	mov    edx,edi
c0026c6f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c73:	89 d1                	mov    ecx,edx
c0026c75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c79:	89 c6                	mov    esi,eax
c0026c7b:	89 d7                	mov    edi,edx
c0026c7d:	39 d1                	cmp    ecx,edx
c0026c7f:	72 27                	jb     c0026ca8 <__umoddi3+0x10c>
c0026c81:	74 21                	je     c0026ca4 <__umoddi3+0x108>
c0026c83:	89 ca                	mov    edx,ecx
c0026c85:	29 f3                	sub    ebx,esi
c0026c87:	19 fa                	sbb    edx,edi
c0026c89:	89 d0                	mov    eax,edx
c0026c8b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c8f:	d3 e0                	shl    eax,cl
c0026c91:	89 e9                	mov    ecx,ebp
c0026c93:	d3 eb                	shr    ebx,cl
c0026c95:	09 d8                	or     eax,ebx
c0026c97:	d3 ea                	shr    edx,cl
c0026c99:	83 c4 1c             	add    esp,0x1c
c0026c9c:	5b                   	pop    ebx
c0026c9d:	5e                   	pop    esi
c0026c9e:	5f                   	pop    edi
c0026c9f:	5d                   	pop    ebp
c0026ca0:	c3                   	ret    
c0026ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0026ca4:	39 c3                	cmp    ebx,eax
c0026ca6:	73 db                	jae    c0026c83 <__umoddi3+0xe7>
c0026ca8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026cac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026cb0:	89 d7                	mov    edi,edx
c0026cb2:	89 c6                	mov    esi,eax
c0026cb4:	eb cd                	jmp    c0026c83 <__umoddi3+0xe7>

c0026cb6 <__addsf3>:
c0026cb6:	55                   	push   ebp
c0026cb7:	89 e5                	mov    ebp,esp
c0026cb9:	57                   	push   edi
c0026cba:	56                   	push   esi
c0026cbb:	53                   	push   ebx
c0026cbc:	83 ec 08             	sub    esp,0x8
c0026cbf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026cc2:	89 fa                	mov    edx,edi
c0026cc4:	89 f8                	mov    eax,edi
c0026cc6:	c1 f8 17             	sar    eax,0x17
c0026cc9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026ccc:	c1 e2 08             	shl    edx,0x8
c0026ccf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026cd5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cd8:	89 de                	mov    esi,ebx
c0026cda:	c1 fe 17             	sar    esi,0x17
c0026cdd:	c1 e3 08             	shl    ebx,0x8
c0026ce0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ce6:	31 f0                	xor    eax,esi
c0026ce8:	0f 88 3b 01 00 00    	js     c0026e29 <__addsf3+0x173>
c0026cee:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026cf1:	29 f1                	sub    ecx,esi
c0026cf3:	85 c9                	test   ecx,ecx
c0026cf5:	7e 54                	jle    c0026d4b <__addsf3+0x95>
c0026cf7:	89 f0                	mov    eax,esi
c0026cf9:	84 c0                	test   al,al
c0026cfb:	75 10                	jne    c0026d0d <__addsf3+0x57>
c0026cfd:	85 db                	test   ebx,ebx
c0026cff:	0f 84 aa 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d05:	49                   	dec    ecx
c0026d06:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d09:	74 38                	je     c0026d43 <__addsf3+0x8d>
c0026d0b:	eb 13                	jmp    c0026d20 <__addsf3+0x6a>
c0026d0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d10:	f7 d0                	not    eax
c0026d12:	84 c0                	test   al,al
c0026d14:	0f 84 95 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d1a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d20:	83 f9 1f             	cmp    ecx,0x1f
c0026d23:	0f 8f 86 02 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026d29:	89 de                	mov    esi,ebx
c0026d2b:	d3 ee                	shr    esi,cl
c0026d2d:	b8 20 00 00 00       	mov    eax,0x20
c0026d32:	29 c8                	sub    eax,ecx
c0026d34:	89 c1                	mov    ecx,eax
c0026d36:	d3 e3                	shl    ebx,cl
c0026d38:	31 c0                	xor    eax,eax
c0026d3a:	85 db                	test   ebx,ebx
c0026d3c:	0f 95 c0             	setne  al
c0026d3f:	09 f0                	or     eax,esi
c0026d41:	01 d0                	add    eax,edx
c0026d43:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d46:	e9 b6 00 00 00       	jmp    c0026e01 <__addsf3+0x14b>
c0026d4b:	74 5c                	je     c0026da9 <__addsf3+0xf3>
c0026d4d:	89 f1                	mov    ecx,esi
c0026d4f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d52:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d55:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d59:	75 14                	jne    c0026d6f <__addsf3+0xb9>
c0026d5b:	85 d2                	test   edx,edx
c0026d5d:	0f 84 4c 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d63:	49                   	dec    ecx
c0026d64:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d67:	0f 84 94 00 00 00    	je     c0026e01 <__addsf3+0x14b>
c0026d6d:	eb 12                	jmp    c0026d81 <__addsf3+0xcb>
c0026d6f:	89 f0                	mov    eax,esi
c0026d71:	f7 d0                	not    eax
c0026d73:	84 c0                	test   al,al
c0026d75:	0f 84 34 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d7b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d81:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d84:	83 f9 1f             	cmp    ecx,0x1f
c0026d87:	0f 8f 22 02 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026d8d:	89 d7                	mov    edi,edx
c0026d8f:	d3 ef                	shr    edi,cl
c0026d91:	b8 20 00 00 00       	mov    eax,0x20
c0026d96:	29 c8                	sub    eax,ecx
c0026d98:	89 c1                	mov    ecx,eax
c0026d9a:	d3 e2                	shl    edx,cl
c0026d9c:	31 c0                	xor    eax,eax
c0026d9e:	85 d2                	test   edx,edx
c0026da0:	0f 95 c0             	setne  al
c0026da3:	09 f8                	or     eax,edi
c0026da5:	01 d8                	add    eax,ebx
c0026da7:	eb 58                	jmp    c0026e01 <__addsf3+0x14b>
c0026da9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dac:	8d 70 01             	lea    esi,[eax+0x1]
c0026daf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026db5:	75 32                	jne    c0026de9 <__addsf3+0x133>
c0026db7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026dbb:	75 1f                	jne    c0026ddc <__addsf3+0x126>
c0026dbd:	85 d2                	test   edx,edx
c0026dbf:	0f 84 e0 01 00 00    	je     c0026fa5 <__addsf3+0x2ef>
c0026dc5:	85 db                	test   ebx,ebx
c0026dc7:	0f 84 e2 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026dcd:	89 d0                	mov    eax,edx
c0026dcf:	01 d8                	add    eax,ebx
c0026dd1:	0f 89 a9 01 00 00    	jns    c0026f80 <__addsf3+0x2ca>
c0026dd7:	e9 9d 01 00 00       	jmp    c0026f79 <__addsf3+0x2c3>
c0026ddc:	85 d2                	test   edx,edx
c0026dde:	0f 85 cb 01 00 00    	jne    c0026faf <__addsf3+0x2f9>
c0026de4:	e9 bc 01 00 00       	jmp    c0026fa5 <__addsf3+0x2ef>
c0026de9:	31 c0                	xor    eax,eax
c0026deb:	89 f1                	mov    ecx,esi
c0026ded:	f7 d1                	not    ecx
c0026def:	84 c9                	test   cl,cl
c0026df1:	0f 84 90 01 00 00    	je     c0026f87 <__addsf3+0x2d1>
c0026df7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dfa:	d1 e8                	shr    eax,1
c0026dfc:	e9 86 01 00 00       	jmp    c0026f87 <__addsf3+0x2d1>
c0026e01:	85 c0                	test   eax,eax
c0026e03:	0f 89 7e 01 00 00    	jns    c0026f87 <__addsf3+0x2d1>
c0026e09:	46                   	inc    esi
c0026e0a:	89 f2                	mov    edx,esi
c0026e0c:	f7 d2                	not    edx
c0026e0e:	84 d2                	test   dl,dl
c0026e10:	0f 84 6f 01 00 00    	je     c0026f85 <__addsf3+0x2cf>
c0026e16:	89 c2                	mov    edx,eax
c0026e18:	83 e2 01             	and    edx,0x1
c0026e1b:	d1 e8                	shr    eax,1
c0026e1d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026e22:	09 d0                	or     eax,edx
c0026e24:	e9 5e 01 00 00       	jmp    c0026f87 <__addsf3+0x2d1>
c0026e29:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e30:	89 f0                	mov    eax,esi
c0026e32:	0f b6 c0             	movzx  eax,al
c0026e35:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e38:	29 c1                	sub    ecx,eax
c0026e3a:	85 c9                	test   ecx,ecx
c0026e3c:	7e 55                	jle    c0026e93 <__addsf3+0x1dd>
c0026e3e:	85 c0                	test   eax,eax
c0026e40:	75 11                	jne    c0026e53 <__addsf3+0x19d>
c0026e42:	85 db                	test   ebx,ebx
c0026e44:	0f 84 65 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026e4a:	49                   	dec    ecx
c0026e4b:	75 19                	jne    c0026e66 <__addsf3+0x1b0>
c0026e4d:	89 d0                	mov    eax,edx
c0026e4f:	29 d8                	sub    eax,ebx
c0026e51:	eb 38                	jmp    c0026e8b <__addsf3+0x1d5>
c0026e53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e56:	f7 d0                	not    eax
c0026e58:	84 c0                	test   al,al
c0026e5a:	0f 84 4f 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026e60:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e66:	83 f9 1f             	cmp    ecx,0x1f
c0026e69:	0f 8f 40 01 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026e6f:	89 de                	mov    esi,ebx
c0026e71:	d3 ee                	shr    esi,cl
c0026e73:	b8 20 00 00 00       	mov    eax,0x20
c0026e78:	29 c8                	sub    eax,ecx
c0026e7a:	89 c1                	mov    ecx,eax
c0026e7c:	d3 e3                	shl    ebx,cl
c0026e7e:	31 c0                	xor    eax,eax
c0026e80:	85 db                	test   ebx,ebx
c0026e82:	0f 95 c0             	setne  al
c0026e85:	09 f0                	or     eax,esi
c0026e87:	29 c2                	sub    edx,eax
c0026e89:	89 d0                	mov    eax,edx
c0026e8b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e8e:	e9 af 00 00 00       	jmp    c0026f42 <__addsf3+0x28c>
c0026e93:	74 5c                	je     c0026ef1 <__addsf3+0x23b>
c0026e95:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e98:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e9b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e9f:	75 14                	jne    c0026eb5 <__addsf3+0x1ff>
c0026ea1:	85 d2                	test   edx,edx
c0026ea3:	0f 84 06 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026ea9:	48                   	dec    eax
c0026eaa:	75 1b                	jne    c0026ec7 <__addsf3+0x211>
c0026eac:	89 d8                	mov    eax,ebx
c0026eae:	29 d0                	sub    eax,edx
c0026eb0:	e9 8d 00 00 00       	jmp    c0026f42 <__addsf3+0x28c>
c0026eb5:	89 f1                	mov    ecx,esi
c0026eb7:	f7 d1                	not    ecx
c0026eb9:	84 c9                	test   cl,cl
c0026ebb:	0f 84 ee 00 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026ec1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ec7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eca:	83 f8 1f             	cmp    eax,0x1f
c0026ecd:	0f 8f dc 00 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026ed3:	89 d7                	mov    edi,edx
c0026ed5:	88 c1                	mov    cl,al
c0026ed7:	d3 ef                	shr    edi,cl
c0026ed9:	b9 20 00 00 00       	mov    ecx,0x20
c0026ede:	29 c1                	sub    ecx,eax
c0026ee0:	d3 e2                	shl    edx,cl
c0026ee2:	31 c0                	xor    eax,eax
c0026ee4:	85 d2                	test   edx,edx
c0026ee6:	0f 95 c0             	setne  al
c0026ee9:	09 f8                	or     eax,edi
c0026eeb:	29 c3                	sub    ebx,eax
c0026eed:	89 d8                	mov    eax,ebx
c0026eef:	eb 51                	jmp    c0026f42 <__addsf3+0x28c>
c0026ef1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ef4:	40                   	inc    eax
c0026ef5:	a8 fe                	test   al,0xfe
c0026ef7:	75 3d                	jne    c0026f36 <__addsf3+0x280>
c0026ef9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026efd:	0f 85 a7 00 00 00    	jne    c0026faa <__addsf3+0x2f4>
c0026f03:	85 d2                	test   edx,edx
c0026f05:	75 12                	jne    c0026f19 <__addsf3+0x263>
c0026f07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f0a:	85 db                	test   ebx,ebx
c0026f0c:	0f 85 9d 00 00 00    	jne    c0026faf <__addsf3+0x2f9>
c0026f12:	31 ff                	xor    edi,edi
c0026f14:	e9 96 00 00 00       	jmp    c0026faf <__addsf3+0x2f9>
c0026f19:	85 db                	test   ebx,ebx
c0026f1b:	0f 84 8e 00 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026f21:	89 d0                	mov    eax,edx
c0026f23:	29 d8                	sub    eax,ebx
c0026f25:	79 06                	jns    c0026f2d <__addsf3+0x277>
c0026f27:	89 d8                	mov    eax,ebx
c0026f29:	29 d0                	sub    eax,edx
c0026f2b:	eb 5a                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f2d:	bf 00 00 00 00       	mov    edi,0x0
c0026f32:	74 7b                	je     c0026faf <__addsf3+0x2f9>
c0026f34:	eb 4a                	jmp    c0026f80 <__addsf3+0x2ca>
c0026f36:	89 d0                	mov    eax,edx
c0026f38:	29 d8                	sub    eax,ebx
c0026f3a:	79 12                	jns    c0026f4e <__addsf3+0x298>
c0026f3c:	89 d8                	mov    eax,ebx
c0026f3e:	29 d0                	sub    eax,edx
c0026f40:	eb 09                	jmp    c0026f4b <__addsf3+0x295>
c0026f42:	85 c0                	test   eax,eax
c0026f44:	79 41                	jns    c0026f87 <__addsf3+0x2d1>
c0026f46:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f4b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f4e:	31 f6                	xor    esi,esi
c0026f50:	85 c0                	test   eax,eax
c0026f52:	74 33                	je     c0026f87 <__addsf3+0x2d1>
c0026f54:	0f bd c8             	bsr    ecx,eax
c0026f57:	83 f1 1f             	xor    ecx,0x1f
c0026f5a:	d3 e0                	shl    eax,cl
c0026f5c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f60:	39 ca                	cmp    edx,ecx
c0026f62:	7f 10                	jg     c0026f74 <__addsf3+0x2be>
c0026f64:	29 d1                	sub    ecx,edx
c0026f66:	41                   	inc    ecx
c0026f67:	d3 e8                	shr    eax,cl
c0026f69:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f6c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f72:	eb 13                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f74:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f77:	29 ce                	sub    esi,ecx
c0026f79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f7e:	eb 07                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f80:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f83:	eb 02                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f85:	31 c0                	xor    eax,eax
c0026f87:	89 c2                	mov    edx,eax
c0026f89:	c1 ea 08             	shr    edx,0x8
c0026f8c:	a8 7f                	test   al,0x7f
c0026f8e:	0f 95 c1             	setne  cl
c0026f91:	09 d1                	or     ecx,edx
c0026f93:	83 e1 01             	and    ecx,0x1
c0026f96:	c1 e8 07             	shr    eax,0x7
c0026f99:	21 c8                	and    eax,ecx
c0026f9b:	c1 e6 17             	shl    esi,0x17
c0026f9e:	09 d6                	or     esi,edx
c0026fa0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026fa3:	eb 0a                	jmp    c0026faf <__addsf3+0x2f9>
c0026fa5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fa8:	eb 05                	jmp    c0026faf <__addsf3+0x2f9>
c0026faa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026faf:	89 f8                	mov    eax,edi
c0026fb1:	5a                   	pop    edx
c0026fb2:	59                   	pop    ecx
c0026fb3:	5b                   	pop    ebx
c0026fb4:	5e                   	pop    esi
c0026fb5:	5f                   	pop    edi
c0026fb6:	5d                   	pop    ebp
c0026fb7:	c3                   	ret    

c0026fb8 <__subsf3>:
c0026fb8:	55                   	push   ebp
c0026fb9:	89 e5                	mov    ebp,esp
c0026fbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fbe:	05 00 00 00 80       	add    eax,0x80000000
c0026fc3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026fc6:	5d                   	pop    ebp
c0026fc7:	e9 ea fc ff ff       	jmp    c0026cb6 <__addsf3>

c0026fcc <__negsf2>:
c0026fcc:	55                   	push   ebp
c0026fcd:	89 e5                	mov    ebp,esp
c0026fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fd2:	05 00 00 00 80       	add    eax,0x80000000
c0026fd7:	5d                   	pop    ebp
c0026fd8:	c3                   	ret    

c0026fd9 <__mulsf3>:
c0026fd9:	55                   	push   ebp
c0026fda:	89 e5                	mov    ebp,esp
c0026fdc:	57                   	push   edi
c0026fdd:	56                   	push   esi
c0026fde:	53                   	push   ebx
c0026fdf:	83 ec 1c             	sub    esp,0x1c
c0026fe2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026fe5:	89 f0                	mov    eax,esi
c0026fe7:	89 f1                	mov    ecx,esi
c0026fe9:	c1 f9 17             	sar    ecx,0x17
c0026fec:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026fef:	c1 e0 08             	shl    eax,0x8
c0026ff2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ff7:	89 c1                	mov    ecx,eax
c0026ff9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ffc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fff:	89 c7                	mov    edi,eax
c0027001:	c1 ff 17             	sar    edi,0x17
c0027004:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027008:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002700b:	89 f8                	mov    eax,edi
c002700d:	0f b6 c0             	movzx  eax,al
c0027010:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027013:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027017:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002701a:	42                   	inc    edx
c002701b:	80 e2 fe             	and    dl,0xfe
c002701e:	75 7b                	jne    c002709b <__mulsf3+0xc2>
c0027020:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027024:	74 54                	je     c002707a <__mulsf3+0xa1>
c0027026:	85 c9                	test   ecx,ecx
c0027028:	0f 85 64 01 00 00    	jne    c0027192 <__mulsf3+0x1b9>
c002702e:	8d 57 01             	lea    edx,[edi+0x1]
c0027031:	80 e2 fe             	and    dl,0xfe
c0027034:	75 1f                	jne    c0027055 <__mulsf3+0x7c>
c0027036:	85 c0                	test   eax,eax
c0027038:	b8 00 00 00 00       	mov    eax,0x0
c002703d:	74 29                	je     c0027068 <__mulsf3+0x8f>
c002703f:	53                   	push   ebx
c0027040:	53                   	push   ebx
c0027041:	50                   	push   eax
c0027042:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027045:	e8 96 05 00 00       	call   c00275e0 <__nesf2>
c002704a:	83 c4 10             	add    esp,0x10
c002704d:	85 c0                	test   eax,eax
c002704f:	0f 85 3a 01 00 00    	jne    c002718f <__mulsf3+0x1b6>
c0027055:	85 ff                	test   edi,edi
c0027057:	0f 89 35 01 00 00    	jns    c0027192 <__mulsf3+0x1b9>
c002705d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027063:	e9 2a 01 00 00       	jmp    c0027192 <__mulsf3+0x1b9>
c0027068:	51                   	push   ecx
c0027069:	51                   	push   ecx
c002706a:	50                   	push   eax
c002706b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002706e:	e8 6d 05 00 00       	call   c00275e0 <__nesf2>
c0027073:	83 c4 10             	add    esp,0x10
c0027076:	85 c0                	test   eax,eax
c0027078:	eb 15                	jmp    c002708f <__mulsf3+0xb6>
c002707a:	85 c9                	test   ecx,ecx
c002707c:	74 0b                	je     c0027089 <__mulsf3+0xb0>
c002707e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027081:	01 c9                	add    ecx,ecx
c0027083:	78 16                	js     c002709b <__mulsf3+0xc2>
c0027085:	89 d3                	mov    ebx,edx
c0027087:	eb f5                	jmp    c002707e <__mulsf3+0xa5>
c0027089:	89 f8                	mov    eax,edi
c002708b:	f7 d0                	not    eax
c002708d:	84 c0                	test   al,al
c002708f:	75 c4                	jne    c0027055 <__mulsf3+0x7c>
c0027091:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027096:	e9 f7 00 00 00       	jmp    c0027192 <__mulsf3+0x1b9>
c002709b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002709e:	c1 e6 08             	shl    esi,0x8
c00270a1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00270a7:	8d 57 01             	lea    edx,[edi+0x1]
c00270aa:	80 e2 fe             	and    dl,0xfe
c00270ad:	75 63                	jne    c0027112 <__mulsf3+0x139>
c00270af:	85 c0                	test   eax,eax
c00270b1:	74 2f                	je     c00270e2 <__mulsf3+0x109>
c00270b3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270b7:	0f 89 d2 00 00 00    	jns    c002718f <__mulsf3+0x1b6>
c00270bd:	52                   	push   edx
c00270be:	52                   	push   edx
c00270bf:	6a 00                	push   0x0
c00270c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270c4:	e8 dc 04 00 00       	call   c00275a5 <__eqsf2>
c00270c9:	83 c4 10             	add    esp,0x10
c00270cc:	85 c0                	test   eax,eax
c00270ce:	0f 85 bb 00 00 00    	jne    c002718f <__mulsf3+0x1b6>
c00270d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270d7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00270dd:	e9 b0 00 00 00       	jmp    c0027192 <__mulsf3+0x1b9>
c00270e2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270e5:	50                   	push   eax
c00270e6:	50                   	push   eax
c00270e7:	6a 00                	push   0x0
c00270e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ec:	e8 b4 04 00 00       	call   c00275a5 <__eqsf2>
c00270f1:	83 c4 10             	add    esp,0x10
c00270f4:	85 c0                	test   eax,eax
c00270f6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270f9:	75 0c                	jne    c0027107 <__mulsf3+0x12e>
c00270fb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270ff:	0f 89 8a 00 00 00    	jns    c002718f <__mulsf3+0x1b6>
c0027105:	eb cd                	jmp    c00270d4 <__mulsf3+0xfb>
c0027107:	8d 43 ff             	lea    eax,[ebx-0x1]
c002710a:	01 f6                	add    esi,esi
c002710c:	78 04                	js     c0027112 <__mulsf3+0x139>
c002710e:	89 c3                	mov    ebx,eax
c0027110:	eb f5                	jmp    c0027107 <__mulsf3+0x12e>
c0027112:	89 c8                	mov    eax,ecx
c0027114:	0d 00 00 00 80       	or     eax,0x80000000
c0027119:	81 ce 00 00 00 80    	or     esi,0x80000000
c002711f:	f7 e6                	mul    esi
c0027121:	85 c0                	test   eax,eax
c0027123:	0f 95 c0             	setne  al
c0027126:	0f b6 c0             	movzx  eax,al
c0027129:	09 c2                	or     edx,eax
c002712b:	78 03                	js     c0027130 <__mulsf3+0x157>
c002712d:	01 d2                	add    edx,edx
c002712f:	4b                   	dec    ebx
c0027130:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027136:	7f 22                	jg     c002715a <__mulsf3+0x181>
c0027138:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002713e:	85 db                	test   ebx,ebx
c0027140:	7f 23                	jg     c0027165 <__mulsf3+0x18c>
c0027142:	83 fb e9             	cmp    ebx,0xffffffe9
c0027145:	7c 1a                	jl     c0027161 <__mulsf3+0x188>
c0027147:	81 ca 00 00 00 80    	or     edx,0x80000000
c002714d:	b9 01 00 00 00       	mov    ecx,0x1
c0027152:	29 d9                	sub    ecx,ebx
c0027154:	d3 ea                	shr    edx,cl
c0027156:	31 db                	xor    ebx,ebx
c0027158:	eb 0b                	jmp    c0027165 <__mulsf3+0x18c>
c002715a:	bb ff 00 00 00       	mov    ebx,0xff
c002715f:	eb 02                	jmp    c0027163 <__mulsf3+0x18a>
c0027161:	31 db                	xor    ebx,ebx
c0027163:	31 d2                	xor    edx,edx
c0027165:	89 d0                	mov    eax,edx
c0027167:	c1 e8 08             	shr    eax,0x8
c002716a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002716d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027173:	09 fb                	or     ebx,edi
c0027175:	c1 e3 17             	shl    ebx,0x17
c0027178:	09 c3                	or     ebx,eax
c002717a:	f6 c2 7f             	test   dl,0x7f
c002717d:	0f 95 c1             	setne  cl
c0027180:	09 c8                	or     eax,ecx
c0027182:	83 e0 01             	and    eax,0x1
c0027185:	c1 ea 07             	shr    edx,0x7
c0027188:	21 c2                	and    edx,eax
c002718a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002718d:	eb 03                	jmp    c0027192 <__mulsf3+0x1b9>
c002718f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027192:	89 f0                	mov    eax,esi
c0027194:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027197:	5b                   	pop    ebx
c0027198:	5e                   	pop    esi
c0027199:	5f                   	pop    edi
c002719a:	5d                   	pop    ebp
c002719b:	c3                   	ret    

c002719c <__divsf3>:
c002719c:	55                   	push   ebp
c002719d:	89 e5                	mov    ebp,esp
c002719f:	57                   	push   edi
c00271a0:	56                   	push   esi
c00271a1:	53                   	push   ebx
c00271a2:	83 ec 1c             	sub    esp,0x1c
c00271a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00271a8:	89 d8                	mov    eax,ebx
c00271aa:	89 d9                	mov    ecx,ebx
c00271ac:	c1 f9 17             	sar    ecx,0x17
c00271af:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00271b2:	c1 e0 08             	shl    eax,0x8
c00271b5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271ba:	89 c1                	mov    ecx,eax
c00271bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271bf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271c2:	89 c7                	mov    edi,eax
c00271c4:	c1 ff 17             	sar    edi,0x17
c00271c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00271cb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00271ce:	89 f8                	mov    eax,edi
c00271d0:	0f b6 c0             	movzx  eax,al
c00271d3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271d6:	29 c6                	sub    esi,eax
c00271d8:	83 c6 7f             	add    esi,0x7f
c00271db:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271de:	42                   	inc    edx
c00271df:	80 e2 fe             	and    dl,0xfe
c00271e2:	0f 85 9c 00 00 00    	jne    c0027284 <__divsf3+0xe8>
c00271e8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271ec:	74 33                	je     c0027221 <__divsf3+0x85>
c00271ee:	85 c9                	test   ecx,ecx
c00271f0:	0f 85 c7 01 00 00    	jne    c00273bd <__divsf3+0x221>
c00271f6:	8d 57 01             	lea    edx,[edi+0x1]
c00271f9:	80 e2 fe             	and    dl,0xfe
c00271fc:	75 2f                	jne    c002722d <__divsf3+0x91>
c00271fe:	85 c0                	test   eax,eax
c0027200:	74 2b                	je     c002722d <__divsf3+0x91>
c0027202:	51                   	push   ecx
c0027203:	51                   	push   ecx
c0027204:	6a 00                	push   0x0
c0027206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027209:	e8 d2 03 00 00       	call   c00275e0 <__nesf2>
c002720e:	83 c4 10             	add    esp,0x10
c0027211:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027214:	85 c0                	test   eax,eax
c0027216:	0f 85 a1 01 00 00    	jne    c00273bd <__divsf3+0x221>
c002721c:	e9 92 01 00 00       	jmp    c00273b3 <__divsf3+0x217>
c0027221:	85 c9                	test   ecx,ecx
c0027223:	75 1b                	jne    c0027240 <__divsf3+0xa4>
c0027225:	8d 57 01             	lea    edx,[edi+0x1]
c0027228:	80 e2 fe             	and    dl,0xfe
c002722b:	74 1e                	je     c002724b <__divsf3+0xaf>
c002722d:	85 ff                	test   edi,edi
c002722f:	0f 89 88 01 00 00    	jns    c00273bd <__divsf3+0x221>
c0027235:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002723b:	e9 7d 01 00 00       	jmp    c00273bd <__divsf3+0x221>
c0027240:	8d 56 ff             	lea    edx,[esi-0x1]
c0027243:	01 c9                	add    ecx,ecx
c0027245:	78 3d                	js     c0027284 <__divsf3+0xe8>
c0027247:	89 d6                	mov    esi,edx
c0027249:	eb f5                	jmp    c0027240 <__divsf3+0xa4>
c002724b:	85 c0                	test   eax,eax
c002724d:	b8 00 00 00 00       	mov    eax,0x0
c0027252:	74 18                	je     c002726c <__divsf3+0xd0>
c0027254:	52                   	push   edx
c0027255:	52                   	push   edx
c0027256:	50                   	push   eax
c0027257:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002725a:	e8 81 03 00 00       	call   c00275e0 <__nesf2>
c002725f:	83 c4 10             	add    esp,0x10
c0027262:	85 c0                	test   eax,eax
c0027264:	0f 85 50 01 00 00    	jne    c00273ba <__divsf3+0x21e>
c002726a:	eb c1                	jmp    c002722d <__divsf3+0x91>
c002726c:	56                   	push   esi
c002726d:	56                   	push   esi
c002726e:	50                   	push   eax
c002726f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027272:	e8 69 03 00 00       	call   c00275e0 <__nesf2>
c0027277:	83 c4 10             	add    esp,0x10
c002727a:	85 c0                	test   eax,eax
c002727c:	0f 84 31 01 00 00    	je     c00273b3 <__divsf3+0x217>
c0027282:	eb a9                	jmp    c002722d <__divsf3+0x91>
c0027284:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027287:	c1 e3 08             	shl    ebx,0x8
c002728a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027290:	8d 57 01             	lea    edx,[edi+0x1]
c0027293:	80 e2 fe             	and    dl,0xfe
c0027296:	75 71                	jne    c0027309 <__divsf3+0x16d>
c0027298:	85 c0                	test   eax,eax
c002729a:	ba 00 00 00 00       	mov    edx,0x0
c002729f:	74 2f                	je     c00272d0 <__divsf3+0x134>
c00272a1:	51                   	push   ecx
c00272a2:	51                   	push   ecx
c00272a3:	52                   	push   edx
c00272a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272a7:	e8 f9 02 00 00       	call   c00275a5 <__eqsf2>
c00272ac:	83 c4 10             	add    esp,0x10
c00272af:	85 c0                	test   eax,eax
c00272b1:	0f 85 03 01 00 00    	jne    c00273ba <__divsf3+0x21e>
c00272b7:	31 d2                	xor    edx,edx
c00272b9:	89 d3                	mov    ebx,edx
c00272bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272be:	31 f8                	xor    eax,edi
c00272c0:	0f 89 f7 00 00 00    	jns    c00273bd <__divsf3+0x221>
c00272c6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00272cb:	e9 ed 00 00 00       	jmp    c00273bd <__divsf3+0x221>
c00272d0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272d3:	50                   	push   eax
c00272d4:	50                   	push   eax
c00272d5:	52                   	push   edx
c00272d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272d9:	e8 c7 02 00 00       	call   c00275a5 <__eqsf2>
c00272de:	83 c4 10             	add    esp,0x10
c00272e1:	85 c0                	test   eax,eax
c00272e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272e6:	75 16                	jne    c00272fe <__divsf3+0x162>
c00272e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272eb:	31 fb                	xor    ebx,edi
c00272ed:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00272f3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00272f9:	e9 bf 00 00 00       	jmp    c00273bd <__divsf3+0x221>
c00272fe:	8d 46 01             	lea    eax,[esi+0x1]
c0027301:	01 db                	add    ebx,ebx
c0027303:	78 04                	js     c0027309 <__divsf3+0x16d>
c0027305:	89 c6                	mov    esi,eax
c0027307:	eb f5                	jmp    c00272fe <__divsf3+0x162>
c0027309:	89 c8                	mov    eax,ecx
c002730b:	0d 00 00 00 80       	or     eax,0x80000000
c0027310:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027316:	31 d2                	xor    edx,edx
c0027318:	39 d8                	cmp    eax,ebx
c002731a:	72 07                	jb     c0027323 <__divsf3+0x187>
c002731c:	29 d8                	sub    eax,ebx
c002731e:	ba 01 00 00 00       	mov    edx,0x1
c0027323:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002732a:	01 d2                	add    edx,edx
c002732c:	89 c1                	mov    ecx,eax
c002732e:	01 c0                	add    eax,eax
c0027330:	85 c9                	test   ecx,ecx
c0027332:	78 04                	js     c0027338 <__divsf3+0x19c>
c0027334:	39 c3                	cmp    ebx,eax
c0027336:	77 05                	ja     c002733d <__divsf3+0x1a1>
c0027338:	29 d8                	sub    eax,ebx
c002733a:	83 ca 01             	or     edx,0x1
c002733d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027340:	75 e8                	jne    c002732a <__divsf3+0x18e>
c0027342:	85 c0                	test   eax,eax
c0027344:	0f 95 c0             	setne  al
c0027347:	0f b6 c0             	movzx  eax,al
c002734a:	c1 e2 06             	shl    edx,0x6
c002734d:	09 c2                	or     edx,eax
c002734f:	78 03                	js     c0027354 <__divsf3+0x1b8>
c0027351:	01 d2                	add    edx,edx
c0027353:	4e                   	dec    esi
c0027354:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002735a:	7f 22                	jg     c002737e <__divsf3+0x1e2>
c002735c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027362:	85 f6                	test   esi,esi
c0027364:	7f 23                	jg     c0027389 <__divsf3+0x1ed>
c0027366:	83 fe e9             	cmp    esi,0xffffffe9
c0027369:	7c 1a                	jl     c0027385 <__divsf3+0x1e9>
c002736b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027371:	b9 01 00 00 00       	mov    ecx,0x1
c0027376:	29 f1                	sub    ecx,esi
c0027378:	d3 ea                	shr    edx,cl
c002737a:	31 f6                	xor    esi,esi
c002737c:	eb 0b                	jmp    c0027389 <__divsf3+0x1ed>
c002737e:	be ff 00 00 00       	mov    esi,0xff
c0027383:	eb 02                	jmp    c0027387 <__divsf3+0x1eb>
c0027385:	31 f6                	xor    esi,esi
c0027387:	31 d2                	xor    edx,edx
c0027389:	89 d0                	mov    eax,edx
c002738b:	c1 e8 08             	shr    eax,0x8
c002738e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027391:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027397:	09 fe                	or     esi,edi
c0027399:	c1 e6 17             	shl    esi,0x17
c002739c:	09 c6                	or     esi,eax
c002739e:	f6 c2 7f             	test   dl,0x7f
c00273a1:	0f 95 c1             	setne  cl
c00273a4:	09 c8                	or     eax,ecx
c00273a6:	83 e0 01             	and    eax,0x1
c00273a9:	c1 ea 07             	shr    edx,0x7
c00273ac:	21 c2                	and    edx,eax
c00273ae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00273b1:	eb 0a                	jmp    c00273bd <__divsf3+0x221>
c00273b3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00273b8:	eb 03                	jmp    c00273bd <__divsf3+0x221>
c00273ba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273bd:	89 d8                	mov    eax,ebx
c00273bf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273c2:	5b                   	pop    ebx
c00273c3:	5e                   	pop    esi
c00273c4:	5f                   	pop    edi
c00273c5:	5d                   	pop    ebp
c00273c6:	c3                   	ret    

c00273c7 <__floatsisf>:
c00273c7:	55                   	push   ebp
c00273c8:	89 e5                	mov    ebp,esp
c00273ca:	53                   	push   ebx
c00273cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273ce:	85 d2                	test   edx,edx
c00273d0:	7e 2b                	jle    c00273fd <__floatsisf+0x36>
c00273d2:	0f bd ca             	bsr    ecx,edx
c00273d5:	83 f1 1f             	xor    ecx,0x1f
c00273d8:	d3 e2                	shl    edx,cl
c00273da:	89 d0                	mov    eax,edx
c00273dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273e1:	89 c3                	mov    ebx,eax
c00273e3:	c1 eb 08             	shr    ebx,0x8
c00273e6:	80 e2 7f             	and    dl,0x7f
c00273e9:	0f 95 c2             	setne  dl
c00273ec:	09 da                	or     edx,ebx
c00273ee:	83 e2 01             	and    edx,0x1
c00273f1:	c1 e8 07             	shr    eax,0x7
c00273f4:	21 c2                	and    edx,eax
c00273f6:	b8 9e 00 00 00       	mov    eax,0x9e
c00273fb:	eb 32                	jmp    c002742f <__floatsisf+0x68>
c00273fd:	b8 00 00 00 00       	mov    eax,0x0
c0027402:	74 34                	je     c0027438 <__floatsisf+0x71>
c0027404:	f7 da                	neg    edx
c0027406:	0f bd ca             	bsr    ecx,edx
c0027409:	83 f1 1f             	xor    ecx,0x1f
c002740c:	d3 e2                	shl    edx,cl
c002740e:	89 d0                	mov    eax,edx
c0027410:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027415:	89 c3                	mov    ebx,eax
c0027417:	c1 eb 08             	shr    ebx,0x8
c002741a:	80 e2 7f             	and    dl,0x7f
c002741d:	0f 95 c2             	setne  dl
c0027420:	09 da                	or     edx,ebx
c0027422:	83 e2 01             	and    edx,0x1
c0027425:	c1 e8 07             	shr    eax,0x7
c0027428:	21 c2                	and    edx,eax
c002742a:	b8 9e 01 00 00       	mov    eax,0x19e
c002742f:	29 c8                	sub    eax,ecx
c0027431:	c1 e0 17             	shl    eax,0x17
c0027434:	09 d8                	or     eax,ebx
c0027436:	01 d0                	add    eax,edx
c0027438:	5b                   	pop    ebx
c0027439:	5d                   	pop    ebp
c002743a:	c3                   	ret    

c002743b <__floatunsisf>:
c002743b:	55                   	push   ebp
c002743c:	89 e5                	mov    ebp,esp
c002743e:	53                   	push   ebx
c002743f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027442:	31 c0                	xor    eax,eax
c0027444:	85 d2                	test   edx,edx
c0027446:	74 32                	je     c002747a <__floatunsisf+0x3f>
c0027448:	0f bd ca             	bsr    ecx,edx
c002744b:	83 f1 1f             	xor    ecx,0x1f
c002744e:	d3 e2                	shl    edx,cl
c0027450:	89 d0                	mov    eax,edx
c0027452:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027457:	89 c3                	mov    ebx,eax
c0027459:	c1 eb 08             	shr    ebx,0x8
c002745c:	80 e2 7f             	and    dl,0x7f
c002745f:	0f 95 c2             	setne  dl
c0027462:	09 da                	or     edx,ebx
c0027464:	83 e2 01             	and    edx,0x1
c0027467:	c1 e8 07             	shr    eax,0x7
c002746a:	21 c2                	and    edx,eax
c002746c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027471:	29 c8                	sub    eax,ecx
c0027473:	c1 e0 17             	shl    eax,0x17
c0027476:	09 d8                	or     eax,ebx
c0027478:	01 d0                	add    eax,edx
c002747a:	5b                   	pop    ebx
c002747b:	5d                   	pop    ebp
c002747c:	c3                   	ret    

c002747d <__fixsfsi>:
c002747d:	55                   	push   ebp
c002747e:	89 e5                	mov    ebp,esp
c0027480:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027483:	89 d1                	mov    ecx,edx
c0027485:	c1 e1 08             	shl    ecx,0x8
c0027488:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002748e:	c1 fa 17             	sar    edx,0x17
c0027491:	78 1c                	js     c00274af <__fixsfsi+0x32>
c0027493:	83 ea 7f             	sub    edx,0x7f
c0027496:	31 c0                	xor    eax,eax
c0027498:	83 fa 1e             	cmp    edx,0x1e
c002749b:	77 40                	ja     c00274dd <__fixsfsi+0x60>
c002749d:	89 c8                	mov    eax,ecx
c002749f:	0d 00 00 00 80       	or     eax,0x80000000
c00274a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274a9:	29 d1                	sub    ecx,edx
c00274ab:	d3 e8                	shr    eax,cl
c00274ad:	eb 2e                	jmp    c00274dd <__fixsfsi+0x60>
c00274af:	31 c0                	xor    eax,eax
c00274b1:	81 c2 81 00 00 00    	add    edx,0x81
c00274b7:	78 24                	js     c00274dd <__fixsfsi+0x60>
c00274b9:	83 fa 1e             	cmp    edx,0x1e
c00274bc:	7e 09                	jle    c00274c7 <__fixsfsi+0x4a>
c00274be:	83 fa 1f             	cmp    edx,0x1f
c00274c1:	75 18                	jne    c00274db <__fixsfsi+0x5e>
c00274c3:	85 c9                	test   ecx,ecx
c00274c5:	75 14                	jne    c00274db <__fixsfsi+0x5e>
c00274c7:	89 c8                	mov    eax,ecx
c00274c9:	0d 00 00 00 80       	or     eax,0x80000000
c00274ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274d3:	29 d1                	sub    ecx,edx
c00274d5:	d3 e8                	shr    eax,cl
c00274d7:	f7 d8                	neg    eax
c00274d9:	eb 02                	jmp    c00274dd <__fixsfsi+0x60>
c00274db:	31 c0                	xor    eax,eax
c00274dd:	5d                   	pop    ebp
c00274de:	c3                   	ret    

c00274df <__fixunssfsi>:
c00274df:	55                   	push   ebp
c00274e0:	89 e5                	mov    ebp,esp
c00274e2:	53                   	push   ebx
c00274e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274e6:	89 d3                	mov    ebx,edx
c00274e8:	c1 fb 17             	sar    ebx,0x17
c00274eb:	83 eb 7f             	sub    ebx,0x7f
c00274ee:	31 c0                	xor    eax,eax
c00274f0:	83 fb 1f             	cmp    ebx,0x1f
c00274f3:	77 18                	ja     c002750d <__fixunssfsi+0x2e>
c00274f5:	89 d0                	mov    eax,edx
c00274f7:	c1 e0 08             	shl    eax,0x8
c00274fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274ff:	0d 00 00 00 80       	or     eax,0x80000000
c0027504:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027509:	29 d9                	sub    ecx,ebx
c002750b:	d3 e8                	shr    eax,cl
c002750d:	5b                   	pop    ebx
c002750e:	5d                   	pop    ebp
c002750f:	c3                   	ret    

c0027510 <__cmpsf2>:
c0027510:	55                   	push   ebp
c0027511:	89 e5                	mov    ebp,esp
c0027513:	57                   	push   edi
c0027514:	56                   	push   esi
c0027515:	53                   	push   ebx
c0027516:	83 ec 24             	sub    esp,0x24
c0027519:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002751c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002751f:	e8 4f 10 00 00       	call   c0028573 <__truncdfsf2>
c0027524:	5a                   	pop    edx
c0027525:	59                   	pop    ecx
c0027526:	89 c3                	mov    ebx,eax
c0027528:	c1 e8 17             	shr    eax,0x17
c002752b:	0f b6 f0             	movzx  esi,al
c002752e:	89 d8                	mov    eax,ebx
c0027530:	c1 e8 1f             	shr    eax,0x1f
c0027533:	31 c6                	xor    esi,eax
c0027535:	c1 e3 08             	shl    ebx,0x8
c0027538:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002753b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002753e:	e8 30 10 00 00       	call   c0028573 <__truncdfsf2>
c0027543:	83 c4 10             	add    esp,0x10
c0027546:	89 c1                	mov    ecx,eax
c0027548:	c1 e9 17             	shr    ecx,0x17
c002754b:	0f b6 c9             	movzx  ecx,cl
c002754e:	89 c7                	mov    edi,eax
c0027550:	c1 ef 1f             	shr    edi,0x1f
c0027553:	89 ca                	mov    edx,ecx
c0027555:	31 fa                	xor    edx,edi
c0027557:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002755a:	c1 e0 08             	shl    eax,0x8
c002755d:	89 c2                	mov    edx,eax
c002755f:	89 d8                	mov    eax,ebx
c0027561:	09 d0                	or     eax,edx
c0027563:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027568:	09 f0                	or     eax,esi
c002756a:	75 08                	jne    c0027574 <__cmpsf2+0x64>
c002756c:	31 c0                	xor    eax,eax
c002756e:	39 f9                	cmp    ecx,edi
c0027570:	75 0c                	jne    c002757e <__cmpsf2+0x6e>
c0027572:	eb 29                	jmp    c002759d <__cmpsf2+0x8d>
c0027574:	b8 01 00 00 00       	mov    eax,0x1
c0027579:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002757c:	7f 1f                	jg     c002759d <__cmpsf2+0x8d>
c002757e:	83 c8 ff             	or     eax,0xffffffff
c0027581:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027584:	7c 17                	jl     c002759d <__cmpsf2+0x8d>
c0027586:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002758c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027592:	b8 01 00 00 00       	mov    eax,0x1
c0027597:	39 d3                	cmp    ebx,edx
c0027599:	77 02                	ja     c002759d <__cmpsf2+0x8d>
c002759b:	19 c0                	sbb    eax,eax
c002759d:	8d 65 f4             	lea    esp,[ebp-0xc]
c00275a0:	5b                   	pop    ebx
c00275a1:	5e                   	pop    esi
c00275a2:	5f                   	pop    edi
c00275a3:	5d                   	pop    ebp
c00275a4:	c3                   	ret    

c00275a5 <__eqsf2>:
c00275a5:	55                   	push   ebp
c00275a6:	89 e5                	mov    ebp,esp
c00275a8:	83 ec 24             	sub    esp,0x24
c00275ab:	6a 01                	push   0x1
c00275ad:	83 ec 0c             	sub    esp,0xc
c00275b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275b3:	e8 df 10 00 00       	call   c0028697 <__extendsfdf2>
c00275b8:	83 c4 10             	add    esp,0x10
c00275bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275c1:	52                   	push   edx
c00275c2:	50                   	push   eax
c00275c3:	50                   	push   eax
c00275c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275c7:	e8 cb 10 00 00       	call   c0028697 <__extendsfdf2>
c00275cc:	59                   	pop    ecx
c00275cd:	59                   	pop    ecx
c00275ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275d4:	52                   	push   edx
c00275d5:	50                   	push   eax
c00275d6:	e8 35 ff ff ff       	call   c0027510 <__cmpsf2>
c00275db:	83 c4 20             	add    esp,0x20
c00275de:	c9                   	leave  
c00275df:	c3                   	ret    

c00275e0 <__nesf2>:
c00275e0:	eb c3                	jmp    c00275a5 <__eqsf2>

c00275e2 <__gtsf2>:
c00275e2:	55                   	push   ebp
c00275e3:	89 e5                	mov    ebp,esp
c00275e5:	83 ec 24             	sub    esp,0x24
c00275e8:	6a ff                	push   0xffffffff
c00275ea:	83 ec 0c             	sub    esp,0xc
c00275ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275f0:	e8 a2 10 00 00       	call   c0028697 <__extendsfdf2>
c00275f5:	83 c4 10             	add    esp,0x10
c00275f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275fe:	52                   	push   edx
c00275ff:	50                   	push   eax
c0027600:	50                   	push   eax
c0027601:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027604:	e8 8e 10 00 00       	call   c0028697 <__extendsfdf2>
c0027609:	59                   	pop    ecx
c002760a:	59                   	pop    ecx
c002760b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002760e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027611:	52                   	push   edx
c0027612:	50                   	push   eax
c0027613:	e8 f8 fe ff ff       	call   c0027510 <__cmpsf2>
c0027618:	83 c4 20             	add    esp,0x20
c002761b:	c9                   	leave  
c002761c:	c3                   	ret    

c002761d <__gesf2>:
c002761d:	eb c3                	jmp    c00275e2 <__gtsf2>

c002761f <__ltsf2>:
c002761f:	eb 84                	jmp    c00275a5 <__eqsf2>

c0027621 <__lesf2>:
c0027621:	eb 82                	jmp    c00275a5 <__eqsf2>

c0027623 <__adddf3>:
c0027623:	55                   	push   ebp
c0027624:	89 e5                	mov    ebp,esp
c0027626:	57                   	push   edi
c0027627:	56                   	push   esi
c0027628:	53                   	push   ebx
c0027629:	83 ec 24             	sub    esp,0x24
c002762c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002762f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027632:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027635:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027638:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002763b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002763e:	89 c8                	mov    eax,ecx
c0027640:	89 ce                	mov    esi,ecx
c0027642:	c1 fe 14             	sar    esi,0x14
c0027645:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027648:	89 fb                	mov    ebx,edi
c002764a:	89 fa                	mov    edx,edi
c002764c:	c1 e2 0b             	shl    edx,0xb
c002764f:	c1 e0 0b             	shl    eax,0xb
c0027652:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027657:	c1 eb 15             	shr    ebx,0x15
c002765a:	09 d8                	or     eax,ebx
c002765c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002765f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027662:	c1 fe 14             	sar    esi,0x14
c0027665:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027668:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002766b:	89 f3                	mov    ebx,esi
c002766d:	c1 e3 0b             	shl    ebx,0xb
c0027670:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027673:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027676:	c1 e3 0b             	shl    ebx,0xb
c0027679:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002767f:	c1 ee 15             	shr    esi,0x15
c0027682:	09 f3                	or     ebx,esi
c0027684:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027687:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002768a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002768d:	0f 88 5f 02 00 00    	js     c00278f2 <__adddf3+0x2cf>
c0027693:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027696:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027699:	85 db                	test   ebx,ebx
c002769b:	0f 8e c7 00 00 00    	jle    c0027768 <__adddf3+0x145>
c00276a1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00276a8:	75 1a                	jne    c00276c4 <__adddf3+0xa1>
c00276aa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276ad:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276b0:	0f 84 b2 05 00 00    	je     c0027c68 <__adddf3+0x645>
c00276b6:	4b                   	dec    ebx
c00276b7:	75 23                	jne    c00276dc <__adddf3+0xb9>
c00276b9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276bc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276bf:	e9 99 00 00 00       	jmp    c002775d <__adddf3+0x13a>
c00276c4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276c7:	f7 d6                	not    esi
c00276c9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276cf:	0f 84 93 05 00 00    	je     c0027c68 <__adddf3+0x645>
c00276d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276dc:	83 fb 1f             	cmp    ebx,0x1f
c00276df:	7e 42                	jle    c0027723 <__adddf3+0x100>
c00276e1:	83 fb 3f             	cmp    ebx,0x3f
c00276e4:	0f 8f 7e 05 00 00    	jg     c0027c68 <__adddf3+0x645>
c00276ea:	83 e3 1f             	and    ebx,0x1f
c00276ed:	89 d9                	mov    ecx,ebx
c00276ef:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276f2:	d3 ef                	shr    edi,cl
c00276f4:	31 db                	xor    ebx,ebx
c00276f6:	85 c9                	test   ecx,ecx
c00276f8:	74 15                	je     c002770f <__adddf3+0xec>
c00276fa:	be 20 00 00 00       	mov    esi,0x20
c00276ff:	29 ce                	sub    esi,ecx
c0027701:	89 f1                	mov    ecx,esi
c0027703:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027706:	d3 e6                	shl    esi,cl
c0027708:	31 db                	xor    ebx,ebx
c002770a:	85 f6                	test   esi,esi
c002770c:	0f 95 c3             	setne  bl
c002770f:	31 c9                	xor    ecx,ecx
c0027711:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027715:	0f 95 c1             	setne  cl
c0027718:	09 cf                	or     edi,ecx
c002771a:	09 fb                	or     ebx,edi
c002771c:	01 da                	add    edx,ebx
c002771e:	83 d0 00             	adc    eax,0x0
c0027721:	eb 3a                	jmp    c002775d <__adddf3+0x13a>
c0027723:	bf 20 00 00 00       	mov    edi,0x20
c0027728:	29 df                	sub    edi,ebx
c002772a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002772d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027730:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027733:	d3 e6                	shl    esi,cl
c0027735:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027738:	88 d9                	mov    cl,bl
c002773a:	d3 ef                	shr    edi,cl
c002773c:	09 fe                	or     esi,edi
c002773e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027741:	88 d9                	mov    cl,bl
c0027743:	d3 ef                	shr    edi,cl
c0027745:	89 fb                	mov    ebx,edi
c0027747:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002774a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002774d:	d3 e7                	shl    edi,cl
c002774f:	85 ff                	test   edi,edi
c0027751:	0f 95 c1             	setne  cl
c0027754:	0f b6 c9             	movzx  ecx,cl
c0027757:	09 ce                	or     esi,ecx
c0027759:	01 f2                	add    edx,esi
c002775b:	11 d8                	adc    eax,ebx
c002775d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027760:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027763:	e9 52 01 00 00       	jmp    c00278ba <__adddf3+0x297>
c0027768:	0f 84 d5 00 00 00    	je     c0027843 <__adddf3+0x220>
c002776e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027771:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027774:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027777:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002777a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027781:	75 20                	jne    c00277a3 <__adddf3+0x180>
c0027783:	89 d6                	mov    esi,edx
c0027785:	09 c6                	or     esi,eax
c0027787:	0f 84 db 04 00 00    	je     c0027c68 <__adddf3+0x645>
c002778d:	4b                   	dec    ebx
c002778e:	75 29                	jne    c00277b9 <__adddf3+0x196>
c0027790:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027793:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027796:	01 d1                	add    ecx,edx
c0027798:	11 c6                	adc    esi,eax
c002779a:	89 f0                	mov    eax,esi
c002779c:	89 ca                	mov    edx,ecx
c002779e:	e9 17 01 00 00       	jmp    c00278ba <__adddf3+0x297>
c00277a3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277a6:	f7 d6                	not    esi
c00277a8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277ae:	0f 84 b4 04 00 00    	je     c0027c68 <__adddf3+0x645>
c00277b4:	0d 00 00 00 80       	or     eax,0x80000000
c00277b9:	83 fb 1f             	cmp    ebx,0x1f
c00277bc:	7e 48                	jle    c0027806 <__adddf3+0x1e3>
c00277be:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277c1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277c4:	83 fb 3f             	cmp    ebx,0x3f
c00277c7:	0f 8f 9b 04 00 00    	jg     c0027c68 <__adddf3+0x645>
c00277cd:	83 e3 1f             	and    ebx,0x1f
c00277d0:	89 d9                	mov    ecx,ebx
c00277d2:	89 c7                	mov    edi,eax
c00277d4:	d3 ef                	shr    edi,cl
c00277d6:	31 db                	xor    ebx,ebx
c00277d8:	85 c9                	test   ecx,ecx
c00277da:	74 12                	je     c00277ee <__adddf3+0x1cb>
c00277dc:	be 20 00 00 00       	mov    esi,0x20
c00277e1:	29 ce                	sub    esi,ecx
c00277e3:	89 f1                	mov    ecx,esi
c00277e5:	d3 e0                	shl    eax,cl
c00277e7:	31 db                	xor    ebx,ebx
c00277e9:	85 c0                	test   eax,eax
c00277eb:	0f 95 c3             	setne  bl
c00277ee:	31 c0                	xor    eax,eax
c00277f0:	85 d2                	test   edx,edx
c00277f2:	0f 95 c0             	setne  al
c00277f5:	09 c7                	or     edi,eax
c00277f7:	09 fb                	or     ebx,edi
c00277f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277ff:	01 da                	add    edx,ebx
c0027801:	83 d6 00             	adc    esi,0x0
c0027804:	eb 39                	jmp    c002783f <__adddf3+0x21c>
c0027806:	be 20 00 00 00       	mov    esi,0x20
c002780b:	29 de                	sub    esi,ebx
c002780d:	89 c7                	mov    edi,eax
c002780f:	89 f1                	mov    ecx,esi
c0027811:	d3 e7                	shl    edi,cl
c0027813:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027816:	89 d7                	mov    edi,edx
c0027818:	88 d9                	mov    cl,bl
c002781a:	d3 ef                	shr    edi,cl
c002781c:	89 f9                	mov    ecx,edi
c002781e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027821:	09 cf                	or     edi,ecx
c0027823:	88 d9                	mov    cl,bl
c0027825:	d3 e8                	shr    eax,cl
c0027827:	89 f1                	mov    ecx,esi
c0027829:	d3 e2                	shl    edx,cl
c002782b:	85 d2                	test   edx,edx
c002782d:	0f 95 c2             	setne  dl
c0027830:	0f b6 d2             	movzx  edx,dl
c0027833:	09 d7                	or     edi,edx
c0027835:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027838:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002783b:	01 fa                	add    edx,edi
c002783d:	11 c6                	adc    esi,eax
c002783f:	89 f0                	mov    eax,esi
c0027841:	eb 77                	jmp    c00278ba <__adddf3+0x297>
c0027843:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027846:	46                   	inc    esi
c0027847:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002784a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027850:	75 41                	jne    c0027893 <__adddf3+0x270>
c0027852:	89 d3                	mov    ebx,edx
c0027854:	09 c3                	or     ebx,eax
c0027856:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002785d:	75 27                	jne    c0027886 <__adddf3+0x263>
c002785f:	85 db                	test   ebx,ebx
c0027861:	0f 84 fb 03 00 00    	je     c0027c62 <__adddf3+0x63f>
c0027867:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002786a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002786d:	0f 84 f5 03 00 00    	je     c0027c68 <__adddf3+0x645>
c0027873:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027876:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027879:	85 c0                	test   eax,eax
c002787b:	0f 89 91 03 00 00    	jns    c0027c12 <__adddf3+0x5ef>
c0027881:	e9 85 03 00 00       	jmp    c0027c0b <__adddf3+0x5e8>
c0027886:	85 db                	test   ebx,ebx
c0027888:	0f 85 da 03 00 00    	jne    c0027c68 <__adddf3+0x645>
c002788e:	e9 cf 03 00 00       	jmp    c0027c62 <__adddf3+0x63f>
c0027893:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027896:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027899:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002789c:	f7 d1                	not    ecx
c002789e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278a4:	0f 84 70 03 00 00    	je     c0027c1a <__adddf3+0x5f7>
c00278aa:	d1 ea                	shr    edx,1
c00278ac:	89 c1                	mov    ecx,eax
c00278ae:	c1 e1 1f             	shl    ecx,0x1f
c00278b1:	09 ca                	or     edx,ecx
c00278b3:	d1 e8                	shr    eax,1
c00278b5:	e9 6f 03 00 00       	jmp    c0027c29 <__adddf3+0x606>
c00278ba:	85 c0                	test   eax,eax
c00278bc:	0f 89 67 03 00 00    	jns    c0027c29 <__adddf3+0x606>
c00278c2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00278c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278c8:	f7 d1                	not    ecx
c00278ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278d0:	0f 84 44 03 00 00    	je     c0027c1a <__adddf3+0x5f7>
c00278d6:	89 d1                	mov    ecx,edx
c00278d8:	d1 e9                	shr    ecx,1
c00278da:	83 e2 01             	and    edx,0x1
c00278dd:	09 ca                	or     edx,ecx
c00278df:	89 c1                	mov    ecx,eax
c00278e1:	c1 e1 1f             	shl    ecx,0x1f
c00278e4:	09 ca                	or     edx,ecx
c00278e6:	d1 e8                	shr    eax,1
c00278e8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00278ed:	e9 37 03 00 00       	jmp    c0027c29 <__adddf3+0x606>
c00278f2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278f5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278fb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00278fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027901:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027907:	29 de                	sub    esi,ebx
c0027909:	85 f6                	test   esi,esi
c002790b:	0f 8e bd 00 00 00    	jle    c00279ce <__adddf3+0x3ab>
c0027911:	85 db                	test   ebx,ebx
c0027913:	75 17                	jne    c002792c <__adddf3+0x309>
c0027915:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027918:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002791b:	0f 84 47 03 00 00    	je     c0027c68 <__adddf3+0x645>
c0027921:	4e                   	dec    esi
c0027922:	75 20                	jne    c0027944 <__adddf3+0x321>
c0027924:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027927:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002792a:	eb 5b                	jmp    c0027987 <__adddf3+0x364>
c002792c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002792f:	f7 d3                	not    ebx
c0027931:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027937:	0f 84 2b 03 00 00    	je     c0027c68 <__adddf3+0x645>
c002793d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027944:	83 fe 1f             	cmp    esi,0x1f
c0027947:	7e 49                	jle    c0027992 <__adddf3+0x36f>
c0027949:	83 fe 3f             	cmp    esi,0x3f
c002794c:	0f 8f 16 03 00 00    	jg     c0027c68 <__adddf3+0x645>
c0027952:	83 e6 1f             	and    esi,0x1f
c0027955:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027958:	89 f1                	mov    ecx,esi
c002795a:	d3 ef                	shr    edi,cl
c002795c:	31 db                	xor    ebx,ebx
c002795e:	85 f6                	test   esi,esi
c0027960:	74 13                	je     c0027975 <__adddf3+0x352>
c0027962:	b9 20 00 00 00       	mov    ecx,0x20
c0027967:	29 f1                	sub    ecx,esi
c0027969:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002796c:	d3 e6                	shl    esi,cl
c002796e:	31 db                	xor    ebx,ebx
c0027970:	85 f6                	test   esi,esi
c0027972:	0f 95 c3             	setne  bl
c0027975:	31 c9                	xor    ecx,ecx
c0027977:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002797b:	0f 95 c1             	setne  cl
c002797e:	09 cf                	or     edi,ecx
c0027980:	09 fb                	or     ebx,edi
c0027982:	29 da                	sub    edx,ebx
c0027984:	83 d8 00             	sbb    eax,0x0
c0027987:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002798a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002798d:	e9 aa 01 00 00       	jmp    c0027b3c <__adddf3+0x519>
c0027992:	bf 20 00 00 00       	mov    edi,0x20
c0027997:	29 f7                	sub    edi,esi
c0027999:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002799c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002799f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279a2:	d3 e3                	shl    ebx,cl
c00279a4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279a7:	89 f1                	mov    ecx,esi
c00279a9:	d3 ef                	shr    edi,cl
c00279ab:	09 fb                	or     ebx,edi
c00279ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279b0:	89 f1                	mov    ecx,esi
c00279b2:	d3 ef                	shr    edi,cl
c00279b4:	89 fe                	mov    esi,edi
c00279b6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279b9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279bc:	d3 e7                	shl    edi,cl
c00279be:	85 ff                	test   edi,edi
c00279c0:	0f 95 c1             	setne  cl
c00279c3:	0f b6 c9             	movzx  ecx,cl
c00279c6:	09 cb                	or     ebx,ecx
c00279c8:	29 da                	sub    edx,ebx
c00279ca:	19 f0                	sbb    eax,esi
c00279cc:	eb b9                	jmp    c0027987 <__adddf3+0x364>
c00279ce:	0f 84 cd 00 00 00    	je     c0027aa1 <__adddf3+0x47e>
c00279d4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279d7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279da:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279dd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279e1:	75 1b                	jne    c00279fe <__adddf3+0x3db>
c00279e3:	89 d6                	mov    esi,edx
c00279e5:	09 c6                	or     esi,eax
c00279e7:	0f 84 7b 02 00 00    	je     c0027c68 <__adddf3+0x645>
c00279ed:	4b                   	dec    ebx
c00279ee:	75 24                	jne    c0027a14 <__adddf3+0x3f1>
c00279f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279f6:	29 d1                	sub    ecx,edx
c00279f8:	19 c6                	sbb    esi,eax
c00279fa:	89 ca                	mov    edx,ecx
c00279fc:	eb 61                	jmp    c0027a5f <__adddf3+0x43c>
c00279fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a01:	f7 d6                	not    esi
c0027a03:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a09:	0f 84 59 02 00 00    	je     c0027c68 <__adddf3+0x645>
c0027a0f:	0d 00 00 00 80       	or     eax,0x80000000
c0027a14:	83 fb 1f             	cmp    ebx,0x1f
c0027a17:	7e 4d                	jle    c0027a66 <__adddf3+0x443>
c0027a19:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a1c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a1f:	83 fb 3f             	cmp    ebx,0x3f
c0027a22:	0f 8f 40 02 00 00    	jg     c0027c68 <__adddf3+0x645>
c0027a28:	83 e3 1f             	and    ebx,0x1f
c0027a2b:	89 d9                	mov    ecx,ebx
c0027a2d:	89 c7                	mov    edi,eax
c0027a2f:	d3 ef                	shr    edi,cl
c0027a31:	31 db                	xor    ebx,ebx
c0027a33:	85 c9                	test   ecx,ecx
c0027a35:	74 12                	je     c0027a49 <__adddf3+0x426>
c0027a37:	be 20 00 00 00       	mov    esi,0x20
c0027a3c:	29 ce                	sub    esi,ecx
c0027a3e:	89 f1                	mov    ecx,esi
c0027a40:	d3 e0                	shl    eax,cl
c0027a42:	31 db                	xor    ebx,ebx
c0027a44:	85 c0                	test   eax,eax
c0027a46:	0f 95 c3             	setne  bl
c0027a49:	31 c0                	xor    eax,eax
c0027a4b:	85 d2                	test   edx,edx
c0027a4d:	0f 95 c0             	setne  al
c0027a50:	09 c7                	or     edi,eax
c0027a52:	09 fb                	or     ebx,edi
c0027a54:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a57:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a5a:	29 da                	sub    edx,ebx
c0027a5c:	83 de 00             	sbb    esi,0x0
c0027a5f:	89 f0                	mov    eax,esi
c0027a61:	e9 d6 00 00 00       	jmp    c0027b3c <__adddf3+0x519>
c0027a66:	be 20 00 00 00       	mov    esi,0x20
c0027a6b:	29 de                	sub    esi,ebx
c0027a6d:	89 c7                	mov    edi,eax
c0027a6f:	89 f1                	mov    ecx,esi
c0027a71:	d3 e7                	shl    edi,cl
c0027a73:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a76:	89 d7                	mov    edi,edx
c0027a78:	88 d9                	mov    cl,bl
c0027a7a:	d3 ef                	shr    edi,cl
c0027a7c:	89 f9                	mov    ecx,edi
c0027a7e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a81:	09 cf                	or     edi,ecx
c0027a83:	88 d9                	mov    cl,bl
c0027a85:	d3 e8                	shr    eax,cl
c0027a87:	89 f1                	mov    ecx,esi
c0027a89:	d3 e2                	shl    edx,cl
c0027a8b:	85 d2                	test   edx,edx
c0027a8d:	0f 95 c2             	setne  dl
c0027a90:	0f b6 d2             	movzx  edx,dl
c0027a93:	09 d7                	or     edi,edx
c0027a95:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a98:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a9b:	29 fa                	sub    edx,edi
c0027a9d:	19 c6                	sbb    esi,eax
c0027a9f:	eb be                	jmp    c0027a5f <__adddf3+0x43c>
c0027aa1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027aa4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027aa7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027aad:	75 6a                	jne    c0027b19 <__adddf3+0x4f6>
c0027aaf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ab3:	75 58                	jne    c0027b0d <__adddf3+0x4ea>
c0027ab5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027ab8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027abb:	89 d6                	mov    esi,edx
c0027abd:	09 c6                	or     esi,eax
c0027abf:	75 17                	jne    c0027ad8 <__adddf3+0x4b5>
c0027ac1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ac4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ac7:	85 db                	test   ebx,ebx
c0027ac9:	0f 85 99 01 00 00    	jne    c0027c68 <__adddf3+0x645>
c0027acf:	31 ff                	xor    edi,edi
c0027ad1:	31 c9                	xor    ecx,ecx
c0027ad3:	e9 90 01 00 00       	jmp    c0027c68 <__adddf3+0x645>
c0027ad8:	85 db                	test   ebx,ebx
c0027ada:	0f 84 88 01 00 00    	je     c0027c68 <__adddf3+0x645>
c0027ae0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027ae3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027ae6:	85 c0                	test   eax,eax
c0027ae8:	79 10                	jns    c0027afa <__adddf3+0x4d7>
c0027aea:	31 c9                	xor    ecx,ecx
c0027aec:	f7 da                	neg    edx
c0027aee:	0f 95 c1             	setne  cl
c0027af1:	01 c8                	add    eax,ecx
c0027af3:	f7 d8                	neg    eax
c0027af5:	e9 2f 01 00 00       	jmp    c0027c29 <__adddf3+0x606>
c0027afa:	31 ff                	xor    edi,edi
c0027afc:	31 c9                	xor    ecx,ecx
c0027afe:	89 c3                	mov    ebx,eax
c0027b00:	09 d3                	or     ebx,edx
c0027b02:	0f 84 60 01 00 00    	je     c0027c68 <__adddf3+0x645>
c0027b08:	e9 05 01 00 00       	jmp    c0027c12 <__adddf3+0x5ef>
c0027b0d:	31 ff                	xor    edi,edi
c0027b0f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b14:	e9 4f 01 00 00       	jmp    c0027c68 <__adddf3+0x645>
c0027b19:	89 c1                	mov    ecx,eax
c0027b1b:	89 d0                	mov    eax,edx
c0027b1d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027b20:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027b23:	89 ca                	mov    edx,ecx
c0027b25:	85 c9                	test   ecx,ecx
c0027b27:	79 2c                	jns    c0027b55 <__adddf3+0x532>
c0027b29:	31 c9                	xor    ecx,ecx
c0027b2b:	f7 d8                	neg    eax
c0027b2d:	0f 95 c1             	setne  cl
c0027b30:	01 ca                	add    edx,ecx
c0027b32:	f7 da                	neg    edx
c0027b34:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b37:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b3a:	eb 19                	jmp    c0027b55 <__adddf3+0x532>
c0027b3c:	85 c0                	test   eax,eax
c0027b3e:	0f 89 e5 00 00 00    	jns    c0027c29 <__adddf3+0x606>
c0027b44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b49:	89 c1                	mov    ecx,eax
c0027b4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b4e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b51:	89 d0                	mov    eax,edx
c0027b53:	89 ca                	mov    edx,ecx
c0027b55:	85 d2                	test   edx,edx
c0027b57:	74 59                	je     c0027bb2 <__adddf3+0x58f>
c0027b59:	0f bd da             	bsr    ebx,edx
c0027b5c:	83 f3 1f             	xor    ebx,0x1f
c0027b5f:	88 d9                	mov    cl,bl
c0027b61:	d3 e2                	shl    edx,cl
c0027b63:	bf 20 00 00 00       	mov    edi,0x20
c0027b68:	89 f9                	mov    ecx,edi
c0027b6a:	29 d9                	sub    ecx,ebx
c0027b6c:	89 c6                	mov    esi,eax
c0027b6e:	d3 ee                	shr    esi,cl
c0027b70:	09 d6                	or     esi,edx
c0027b72:	88 d9                	mov    cl,bl
c0027b74:	d3 e0                	shl    eax,cl
c0027b76:	89 c2                	mov    edx,eax
c0027b78:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b7b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b80:	39 d8                	cmp    eax,ebx
c0027b82:	7f 22                	jg     c0027ba6 <__adddf3+0x583>
c0027b84:	29 c3                	sub    ebx,eax
c0027b86:	43                   	inc    ebx
c0027b87:	88 d9                	mov    cl,bl
c0027b89:	d3 ea                	shr    edx,cl
c0027b8b:	29 df                	sub    edi,ebx
c0027b8d:	89 f9                	mov    ecx,edi
c0027b8f:	89 f0                	mov    eax,esi
c0027b91:	d3 e0                	shl    eax,cl
c0027b93:	09 c2                	or     edx,eax
c0027b95:	89 f0                	mov    eax,esi
c0027b97:	88 d9                	mov    cl,bl
c0027b99:	d3 e8                	shr    eax,cl
c0027b9b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b9e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ba4:	eb 6f                	jmp    c0027c15 <__adddf3+0x5f2>
c0027ba6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ba9:	29 d8                	sub    eax,ebx
c0027bab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bae:	89 f0                	mov    eax,esi
c0027bb0:	eb 59                	jmp    c0027c0b <__adddf3+0x5e8>
c0027bb2:	85 c0                	test   eax,eax
c0027bb4:	74 6a                	je     c0027c20 <__adddf3+0x5fd>
c0027bb6:	0f bd c8             	bsr    ecx,eax
c0027bb9:	83 f1 1f             	xor    ecx,0x1f
c0027bbc:	d3 e0                	shl    eax,cl
c0027bbe:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027bc1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027bc7:	83 c1 20             	add    ecx,0x20
c0027bca:	39 cb                	cmp    ebx,ecx
c0027bcc:	7f 35                	jg     c0027c03 <__adddf3+0x5e0>
c0027bce:	29 d9                	sub    ecx,ebx
c0027bd0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027bd3:	83 fe 1f             	cmp    esi,0x1f
c0027bd6:	7e 09                	jle    c0027be1 <__adddf3+0x5be>
c0027bd8:	83 e9 1f             	sub    ecx,0x1f
c0027bdb:	d3 e8                	shr    eax,cl
c0027bdd:	89 c3                	mov    ebx,eax
c0027bdf:	eb 11                	jmp    c0027bf2 <__adddf3+0x5cf>
c0027be1:	b9 20 00 00 00       	mov    ecx,0x20
c0027be6:	29 f1                	sub    ecx,esi
c0027be8:	89 c3                	mov    ebx,eax
c0027bea:	d3 e3                	shl    ebx,cl
c0027bec:	89 f1                	mov    ecx,esi
c0027bee:	d3 e8                	shr    eax,cl
c0027bf0:	89 c2                	mov    edx,eax
c0027bf2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bf5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bfa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bfd:	89 d0                	mov    eax,edx
c0027bff:	89 da                	mov    edx,ebx
c0027c01:	eb 26                	jmp    c0027c29 <__adddf3+0x606>
c0027c03:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c06:	29 cf                	sub    edi,ecx
c0027c08:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c0b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c10:	eb 17                	jmp    c0027c29 <__adddf3+0x606>
c0027c12:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c15:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c18:	eb 0f                	jmp    c0027c29 <__adddf3+0x606>
c0027c1a:	31 d2                	xor    edx,edx
c0027c1c:	31 c0                	xor    eax,eax
c0027c1e:	eb 09                	jmp    c0027c29 <__adddf3+0x606>
c0027c20:	89 c2                	mov    edx,eax
c0027c22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027c29:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c2c:	c1 e1 14             	shl    ecx,0x14
c0027c2f:	89 c3                	mov    ebx,eax
c0027c31:	c1 eb 0b             	shr    ebx,0xb
c0027c34:	09 d9                	or     ecx,ebx
c0027c36:	89 d3                	mov    ebx,edx
c0027c38:	c1 eb 0b             	shr    ebx,0xb
c0027c3b:	c1 e0 15             	shl    eax,0x15
c0027c3e:	09 d8                	or     eax,ebx
c0027c40:	89 c7                	mov    edi,eax
c0027c42:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c48:	0f 95 c0             	setne  al
c0027c4b:	89 c6                	mov    esi,eax
c0027c4d:	09 f3                	or     ebx,esi
c0027c4f:	83 e3 01             	and    ebx,0x1
c0027c52:	c1 ea 0a             	shr    edx,0xa
c0027c55:	21 da                	and    edx,ebx
c0027c57:	89 f8                	mov    eax,edi
c0027c59:	01 d0                	add    eax,edx
c0027c5b:	83 d1 00             	adc    ecx,0x0
c0027c5e:	89 c7                	mov    edi,eax
c0027c60:	eb 06                	jmp    c0027c68 <__adddf3+0x645>
c0027c62:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c65:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c68:	89 f8                	mov    eax,edi
c0027c6a:	89 ca                	mov    edx,ecx
c0027c6c:	83 c4 24             	add    esp,0x24
c0027c6f:	5b                   	pop    ebx
c0027c70:	5e                   	pop    esi
c0027c71:	5f                   	pop    edi
c0027c72:	5d                   	pop    ebp
c0027c73:	c3                   	ret    

c0027c74 <__subdf3>:
c0027c74:	55                   	push   ebp
c0027c75:	89 e5                	mov    ebp,esp
c0027c77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c7d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c83:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c86:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c89:	5d                   	pop    ebp
c0027c8a:	e9 94 f9 ff ff       	jmp    c0027623 <__adddf3>

c0027c8f <__negdf2>:
c0027c8f:	55                   	push   ebp
c0027c90:	89 e5                	mov    ebp,esp
c0027c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c95:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c98:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c9e:	5d                   	pop    ebp
c0027c9f:	c3                   	ret    

c0027ca0 <__muldf3>:
c0027ca0:	55                   	push   ebp
c0027ca1:	89 e5                	mov    ebp,esp
c0027ca3:	57                   	push   edi
c0027ca4:	56                   	push   esi
c0027ca5:	53                   	push   ebx
c0027ca6:	83 ec 24             	sub    esp,0x24
c0027ca9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027cac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027caf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cb2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cb5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027cb8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027cbb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cbe:	89 c8                	mov    eax,ecx
c0027cc0:	c1 f8 14             	sar    eax,0x14
c0027cc3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027cc6:	89 f8                	mov    eax,edi
c0027cc8:	89 fb                	mov    ebx,edi
c0027cca:	c1 e3 0b             	shl    ebx,0xb
c0027ccd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027cd0:	c1 e1 0b             	shl    ecx,0xb
c0027cd3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027cd9:	c1 e8 15             	shr    eax,0x15
c0027cdc:	09 c1                	or     ecx,eax
c0027cde:	89 d6                	mov    esi,edx
c0027ce0:	89 d0                	mov    eax,edx
c0027ce2:	c1 f8 14             	sar    eax,0x14
c0027ce5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ce8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027ceb:	89 c3                	mov    ebx,eax
c0027ced:	c1 e3 0b             	shl    ebx,0xb
c0027cf0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027cf3:	c1 e6 0b             	shl    esi,0xb
c0027cf6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cfc:	c1 e8 15             	shr    eax,0x15
c0027cff:	09 c6                	or     esi,eax
c0027d01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d04:	25 ff 07 00 00       	and    eax,0x7ff
c0027d09:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d0c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d0f:	25 ff 07 00 00       	and    eax,0x7ff
c0027d14:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d17:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d1a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d1d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027d24:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d27:	40                   	inc    eax
c0027d28:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d2d:	0f 85 8d 00 00 00    	jne    c0027dc0 <__muldf3+0x120>
c0027d33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d36:	09 c8                	or     eax,ecx
c0027d38:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d3c:	74 44                	je     c0027d82 <__muldf3+0xe2>
c0027d3e:	85 c0                	test   eax,eax
c0027d40:	0f 85 31 02 00 00    	jne    c0027f77 <__muldf3+0x2d7>
c0027d46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d49:	40                   	inc    eax
c0027d4a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d4f:	75 13                	jne    c0027d64 <__muldf3+0xc4>
c0027d51:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d54:	09 f1                	or     ecx,esi
c0027d56:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d5a:	74 22                	je     c0027d7e <__muldf3+0xde>
c0027d5c:	85 c9                	test   ecx,ecx
c0027d5e:	0f 85 0d 02 00 00    	jne    c0027f71 <__muldf3+0x2d1>
c0027d64:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d68:	0f 89 09 02 00 00    	jns    c0027f77 <__muldf3+0x2d7>
c0027d6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d71:	05 00 00 00 80       	add    eax,0x80000000
c0027d76:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d79:	e9 f9 01 00 00       	jmp    c0027f77 <__muldf3+0x2d7>
c0027d7e:	85 c9                	test   ecx,ecx
c0027d80:	eb 2e                	jmp    c0027db0 <__muldf3+0x110>
c0027d82:	85 c0                	test   eax,eax
c0027d84:	74 20                	je     c0027da6 <__muldf3+0x106>
c0027d86:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d8c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d8f:	c1 ef 1f             	shr    edi,0x1f
c0027d92:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d95:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d98:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d9e:	09 f9                	or     ecx,edi
c0027da0:	78 1e                	js     c0027dc0 <__muldf3+0x120>
c0027da2:	89 c3                	mov    ebx,eax
c0027da4:	eb e0                	jmp    c0027d86 <__muldf3+0xe6>
c0027da6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027da9:	f7 d0                	not    eax
c0027dab:	a9 ff 07 00 00       	test   eax,0x7ff
c0027db0:	75 b2                	jne    c0027d64 <__muldf3+0xc4>
c0027db2:	31 ff                	xor    edi,edi
c0027db4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027dbb:	e9 b7 01 00 00       	jmp    c0027f77 <__muldf3+0x2d7>
c0027dc0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027dc3:	40                   	inc    eax
c0027dc4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027dc9:	75 57                	jne    c0027e22 <__muldf3+0x182>
c0027dcb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027dce:	09 f0                	or     eax,esi
c0027dd0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027dd4:	74 23                	je     c0027df9 <__muldf3+0x159>
c0027dd6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dda:	0f 89 91 01 00 00    	jns    c0027f71 <__muldf3+0x2d1>
c0027de0:	85 c0                	test   eax,eax
c0027de2:	0f 85 89 01 00 00    	jne    c0027f71 <__muldf3+0x2d1>
c0027de8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027deb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027df1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027df4:	e9 7e 01 00 00       	jmp    c0027f77 <__muldf3+0x2d7>
c0027df9:	85 c0                	test   eax,eax
c0027dfb:	75 0c                	jne    c0027e09 <__muldf3+0x169>
c0027dfd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e01:	0f 89 6a 01 00 00    	jns    c0027f71 <__muldf3+0x2d1>
c0027e07:	eb df                	jmp    c0027de8 <__muldf3+0x148>
c0027e09:	01 f6                	add    esi,esi
c0027e0b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e0e:	c1 ea 1f             	shr    edx,0x1f
c0027e11:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e14:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e1a:	09 d6                	or     esi,edx
c0027e1c:	78 04                	js     c0027e22 <__muldf3+0x182>
c0027e1e:	89 c3                	mov    ebx,eax
c0027e20:	eb e7                	jmp    c0027e09 <__muldf3+0x169>
c0027e22:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027e28:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e2e:	89 c8                	mov    eax,ecx
c0027e30:	f7 e6                	mul    esi
c0027e32:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e35:	89 c7                	mov    edi,eax
c0027e37:	89 c8                	mov    eax,ecx
c0027e39:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e3c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e3f:	89 c1                	mov    ecx,eax
c0027e41:	89 f0                	mov    eax,esi
c0027e43:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e46:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e49:	89 c6                	mov    esi,eax
c0027e4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e4e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e51:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e54:	31 c0                	xor    eax,eax
c0027e56:	01 f1                	add    ecx,esi
c0027e58:	0f 92 c0             	setb   al
c0027e5b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e5e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e61:	83 d6 00             	adc    esi,0x0
c0027e64:	01 c7                	add    edi,eax
c0027e66:	83 d6 00             	adc    esi,0x0
c0027e69:	01 ca                	add    edx,ecx
c0027e6b:	0f 92 c1             	setb   cl
c0027e6e:	0f b6 c9             	movzx  ecx,cl
c0027e71:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e74:	83 d6 00             	adc    esi,0x0
c0027e77:	01 cf                	add    edi,ecx
c0027e79:	83 d6 00             	adc    esi,0x0
c0027e7c:	31 c9                	xor    ecx,ecx
c0027e7e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e81:	0f 95 c1             	setne  cl
c0027e84:	09 cf                	or     edi,ecx
c0027e86:	85 f6                	test   esi,esi
c0027e88:	78 0c                	js     c0027e96 <__muldf3+0x1f6>
c0027e8a:	01 f6                	add    esi,esi
c0027e8c:	89 f8                	mov    eax,edi
c0027e8e:	c1 e8 1f             	shr    eax,0x1f
c0027e91:	09 c6                	or     esi,eax
c0027e93:	01 ff                	add    edi,edi
c0027e95:	4b                   	dec    ebx
c0027e96:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e9c:	0f 8f 85 00 00 00    	jg     c0027f27 <__muldf3+0x287>
c0027ea2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027ea8:	85 db                	test   ebx,ebx
c0027eaa:	0f 8f 84 00 00 00    	jg     c0027f34 <__muldf3+0x294>
c0027eb0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027eb3:	7c 79                	jl     c0027f2e <__muldf3+0x28e>
c0027eb5:	ba 01 00 00 00       	mov    edx,0x1
c0027eba:	29 da                	sub    edx,ebx
c0027ebc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ec2:	83 fa 1f             	cmp    edx,0x1f
c0027ec5:	7e 30                	jle    c0027ef7 <__muldf3+0x257>
c0027ec7:	83 fa 20             	cmp    edx,0x20
c0027eca:	75 0b                	jne    c0027ed7 <__muldf3+0x237>
c0027ecc:	31 c0                	xor    eax,eax
c0027ece:	85 ff                	test   edi,edi
c0027ed0:	0f 95 c0             	setne  al
c0027ed3:	89 c7                	mov    edi,eax
c0027ed5:	eb 1a                	jmp    c0027ef1 <__muldf3+0x251>
c0027ed7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027eda:	89 f0                	mov    eax,esi
c0027edc:	d3 e0                	shl    eax,cl
c0027ede:	09 f8                	or     eax,edi
c0027ee0:	0f 95 c0             	setne  al
c0027ee3:	0f b6 c0             	movzx  eax,al
c0027ee6:	89 c7                	mov    edi,eax
c0027ee8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027eed:	29 d9                	sub    ecx,ebx
c0027eef:	d3 ee                	shr    esi,cl
c0027ef1:	09 f7                	or     edi,esi
c0027ef3:	31 db                	xor    ebx,ebx
c0027ef5:	eb 3b                	jmp    c0027f32 <__muldf3+0x292>
c0027ef7:	83 c3 1f             	add    ebx,0x1f
c0027efa:	89 f0                	mov    eax,esi
c0027efc:	88 d9                	mov    cl,bl
c0027efe:	d3 e0                	shl    eax,cl
c0027f00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f03:	89 f8                	mov    eax,edi
c0027f05:	88 d1                	mov    cl,dl
c0027f07:	d3 e8                	shr    eax,cl
c0027f09:	89 c1                	mov    ecx,eax
c0027f0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f0e:	09 c8                	or     eax,ecx
c0027f10:	88 d9                	mov    cl,bl
c0027f12:	d3 e7                	shl    edi,cl
c0027f14:	31 db                	xor    ebx,ebx
c0027f16:	85 ff                	test   edi,edi
c0027f18:	0f 95 c3             	setne  bl
c0027f1b:	89 df                	mov    edi,ebx
c0027f1d:	09 c7                	or     edi,eax
c0027f1f:	88 d1                	mov    cl,dl
c0027f21:	d3 ee                	shr    esi,cl
c0027f23:	31 db                	xor    ebx,ebx
c0027f25:	eb 0d                	jmp    c0027f34 <__muldf3+0x294>
c0027f27:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f2c:	eb 02                	jmp    c0027f30 <__muldf3+0x290>
c0027f2e:	31 db                	xor    ebx,ebx
c0027f30:	31 ff                	xor    edi,edi
c0027f32:	31 f6                	xor    esi,esi
c0027f34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f37:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f3a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f3f:	09 c3                	or     ebx,eax
c0027f41:	c1 e3 14             	shl    ebx,0x14
c0027f44:	89 f0                	mov    eax,esi
c0027f46:	c1 e8 0b             	shr    eax,0xb
c0027f49:	09 c3                	or     ebx,eax
c0027f4b:	89 f8                	mov    eax,edi
c0027f4d:	c1 e8 0b             	shr    eax,0xb
c0027f50:	c1 e6 15             	shl    esi,0x15
c0027f53:	09 c6                	or     esi,eax
c0027f55:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f5b:	0f 95 c1             	setne  cl
c0027f5e:	09 c8                	or     eax,ecx
c0027f60:	83 e0 01             	and    eax,0x1
c0027f63:	c1 ef 0a             	shr    edi,0xa
c0027f66:	21 c7                	and    edi,eax
c0027f68:	01 f7                	add    edi,esi
c0027f6a:	83 d3 00             	adc    ebx,0x0
c0027f6d:	89 da                	mov    edx,ebx
c0027f6f:	eb 03                	jmp    c0027f74 <__muldf3+0x2d4>
c0027f71:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f74:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f77:	89 f8                	mov    eax,edi
c0027f79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f7c:	83 c4 24             	add    esp,0x24
c0027f7f:	5b                   	pop    ebx
c0027f80:	5e                   	pop    esi
c0027f81:	5f                   	pop    edi
c0027f82:	5d                   	pop    ebp
c0027f83:	c3                   	ret    

c0027f84 <__divdf3>:
c0027f84:	55                   	push   ebp
c0027f85:	89 e5                	mov    ebp,esp
c0027f87:	57                   	push   edi
c0027f88:	56                   	push   esi
c0027f89:	53                   	push   ebx
c0027f8a:	83 ec 2c             	sub    esp,0x2c
c0027f8d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f90:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f96:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f99:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f9f:	89 ce                	mov    esi,ecx
c0027fa1:	89 c8                	mov    eax,ecx
c0027fa3:	c1 f8 14             	sar    eax,0x14
c0027fa6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fa9:	89 f8                	mov    eax,edi
c0027fab:	89 fb                	mov    ebx,edi
c0027fad:	c1 e3 0b             	shl    ebx,0xb
c0027fb0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027fb3:	c1 e6 0b             	shl    esi,0xb
c0027fb6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027fbc:	c1 e8 15             	shr    eax,0x15
c0027fbf:	09 c6                	or     esi,eax
c0027fc1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027fc4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027fc7:	89 c2                	mov    edx,eax
c0027fc9:	c1 fa 14             	sar    edx,0x14
c0027fcc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027fcf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027fd2:	89 de                	mov    esi,ebx
c0027fd4:	c1 e6 0b             	shl    esi,0xb
c0027fd7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027fda:	c1 e0 0b             	shl    eax,0xb
c0027fdd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fe2:	c1 eb 15             	shr    ebx,0x15
c0027fe5:	09 d8                	or     eax,ebx
c0027fe7:	89 c2                	mov    edx,eax
c0027fe9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fec:	25 ff 07 00 00       	and    eax,0x7ff
c0027ff1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027ff4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ff7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ffd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028000:	29 d8                	sub    eax,ebx
c0028002:	05 ff 03 00 00       	add    eax,0x3ff
c0028007:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002800a:	46                   	inc    esi
c002800b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028011:	0f 85 a5 00 00 00    	jne    c00280bc <__divdf3+0x138>
c0028017:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002801a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002801d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028021:	74 2a                	je     c002804d <__divdf3+0xc9>
c0028023:	85 f6                	test   esi,esi
c0028025:	0f 85 cc 02 00 00    	jne    c00282f7 <__divdf3+0x373>
c002802b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002802e:	40                   	inc    eax
c002802f:	a9 fe 07 00 00       	test   eax,0x7fe
c0028034:	75 26                	jne    c002805c <__divdf3+0xd8>
c0028036:	85 db                	test   ebx,ebx
c0028038:	74 22                	je     c002805c <__divdf3+0xd8>
c002803a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002803d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028040:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028043:	09 d0                	or     eax,edx
c0028045:	0f 85 ac 02 00 00    	jne    c00282f7 <__divdf3+0x373>
c002804b:	eb 63                	jmp    c00280b0 <__divdf3+0x12c>
c002804d:	85 f6                	test   esi,esi
c002804f:	75 22                	jne    c0028073 <__divdf3+0xef>
c0028051:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028054:	40                   	inc    eax
c0028055:	a9 fe 07 00 00       	test   eax,0x7fe
c002805a:	74 36                	je     c0028092 <__divdf3+0x10e>
c002805c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028060:	0f 89 91 02 00 00    	jns    c00282f7 <__divdf3+0x373>
c0028066:	89 f8                	mov    eax,edi
c0028068:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002806e:	e9 80 02 00 00       	jmp    c00282f3 <__divdf3+0x36f>
c0028073:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028076:	01 f6                	add    esi,esi
c0028078:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002807b:	c1 ef 1f             	shr    edi,0x1f
c002807e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028081:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028084:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028087:	09 f7                	or     edi,esi
c0028089:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002808c:	78 2e                	js     c00280bc <__divdf3+0x138>
c002808e:	89 c8                	mov    eax,ecx
c0028090:	eb e1                	jmp    c0028073 <__divdf3+0xef>
c0028092:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028095:	09 d0                	or     eax,edx
c0028097:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002809b:	74 0f                	je     c00280ac <__divdf3+0x128>
c002809d:	85 c0                	test   eax,eax
c002809f:	74 bb                	je     c002805c <__divdf3+0xd8>
c00280a1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280a4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280a7:	e9 4b 02 00 00       	jmp    c00282f7 <__divdf3+0x373>
c00280ac:	85 c0                	test   eax,eax
c00280ae:	75 ac                	jne    c002805c <__divdf3+0xd8>
c00280b0:	31 ff                	xor    edi,edi
c00280b2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00280b7:	e9 3b 02 00 00       	jmp    c00282f7 <__divdf3+0x373>
c00280bc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280bf:	8d 4f 01             	lea    ecx,[edi+0x1]
c00280c2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00280c8:	75 6b                	jne    c0028135 <__divdf3+0x1b1>
c00280ca:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280cd:	09 d6                	or     esi,edx
c00280cf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280d3:	74 28                	je     c00280fd <__divdf3+0x179>
c00280d5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280d8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280db:	85 f6                	test   esi,esi
c00280dd:	0f 85 14 02 00 00    	jne    c00282f7 <__divdf3+0x373>
c00280e3:	31 ff                	xor    edi,edi
c00280e5:	31 c9                	xor    ecx,ecx
c00280e7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280ea:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280ed:	0f 89 04 02 00 00    	jns    c00282f7 <__divdf3+0x373>
c00280f3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00280f8:	e9 fa 01 00 00       	jmp    c00282f7 <__divdf3+0x373>
c00280fd:	85 f6                	test   esi,esi
c00280ff:	75 1b                	jne    c002811c <__divdf3+0x198>
c0028101:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028104:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028107:	25 00 00 00 80       	and    eax,0x80000000
c002810c:	31 c9                	xor    ecx,ecx
c002810e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028113:	89 cf                	mov    edi,ecx
c0028115:	89 c1                	mov    ecx,eax
c0028117:	e9 db 01 00 00       	jmp    c00282f7 <__divdf3+0x373>
c002811c:	01 d2                	add    edx,edx
c002811e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028121:	c1 eb 1f             	shr    ebx,0x1f
c0028124:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028127:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002812a:	8d 48 01             	lea    ecx,[eax+0x1]
c002812d:	09 da                	or     edx,ebx
c002812f:	78 04                	js     c0028135 <__divdf3+0x1b1>
c0028131:	89 c8                	mov    eax,ecx
c0028133:	eb e7                	jmp    c002811c <__divdf3+0x198>
c0028135:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028138:	81 ce 00 00 00 80    	or     esi,0x80000000
c002813e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028144:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028147:	39 d6                	cmp    esi,edx
c0028149:	77 0d                	ja     c0028158 <__divdf3+0x1d4>
c002814b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002814e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028151:	72 1b                	jb     c002816e <__divdf3+0x1ea>
c0028153:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028156:	75 16                	jne    c002816e <__divdf3+0x1ea>
c0028158:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002815b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002815e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028161:	83 de 00             	sbb    esi,0x0
c0028164:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028167:	ba 01 00 00 00       	mov    edx,0x1
c002816c:	eb 02                	jmp    c0028170 <__divdf3+0x1ec>
c002816e:	31 d2                	xor    edx,edx
c0028170:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028177:	31 ff                	xor    edi,edi
c0028179:	01 ff                	add    edi,edi
c002817b:	89 d1                	mov    ecx,edx
c002817d:	c1 e9 1f             	shr    ecx,0x1f
c0028180:	09 cf                	or     edi,ecx
c0028182:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028185:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028188:	89 da                	mov    edx,ebx
c002818a:	89 f3                	mov    ebx,esi
c002818c:	8d 34 36             	lea    esi,[esi+esi*1]
c002818f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028192:	c1 e9 1f             	shr    ecx,0x1f
c0028195:	09 ce                	or     esi,ecx
c0028197:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002819a:	01 c9                	add    ecx,ecx
c002819c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002819f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281a2:	85 db                	test   ebx,ebx
c00281a4:	78 29                	js     c00281cf <__divdf3+0x24b>
c00281a6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00281a9:	72 07                	jb     c00281b2 <__divdf3+0x22e>
c00281ab:	75 3c                	jne    c00281e9 <__divdf3+0x265>
c00281ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281b0:	77 37                	ja     c00281e9 <__divdf3+0x265>
c00281b2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281b5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00281b8:	31 d2                	xor    edx,edx
c00281ba:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00281bd:	0f 97 c2             	seta   dl
c00281c0:	29 d6                	sub    esi,edx
c00281c2:	89 d9                	mov    ecx,ebx
c00281c4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00281c7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281ca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00281cd:	eb 17                	jmp    c00281e6 <__divdf3+0x262>
c00281cf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281d2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281d8:	0f 97 c1             	seta   cl
c00281db:	0f b6 c9             	movzx  ecx,cl
c00281de:	29 ce                	sub    esi,ecx
c00281e0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00281e3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00281e6:	83 ca 01             	or     edx,0x1
c00281e9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00281ec:	75 8b                	jne    c0028179 <__divdf3+0x1f5>
c00281ee:	c1 e7 09             	shl    edi,0x9
c00281f1:	89 d1                	mov    ecx,edx
c00281f3:	c1 e9 17             	shr    ecx,0x17
c00281f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281f9:	09 f3                	or     ebx,esi
c00281fb:	0f 95 c3             	setne  bl
c00281fe:	0f b6 db             	movzx  ebx,bl
c0028201:	c1 e2 09             	shl    edx,0x9
c0028204:	09 d3                	or     ebx,edx
c0028206:	89 ca                	mov    edx,ecx
c0028208:	09 fa                	or     edx,edi
c002820a:	78 0c                	js     c0028218 <__divdf3+0x294>
c002820c:	01 d2                	add    edx,edx
c002820e:	89 d9                	mov    ecx,ebx
c0028210:	c1 e9 1f             	shr    ecx,0x1f
c0028213:	09 ca                	or     edx,ecx
c0028215:	01 db                	add    ebx,ebx
c0028217:	48                   	dec    eax
c0028218:	3d fe 07 00 00       	cmp    eax,0x7fe
c002821d:	0f 8f 83 00 00 00    	jg     c00282a6 <__divdf3+0x322>
c0028223:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028229:	85 c0                	test   eax,eax
c002822b:	0f 8f 82 00 00 00    	jg     c00282b3 <__divdf3+0x32f>
c0028231:	83 f8 cc             	cmp    eax,0xffffffcc
c0028234:	7c 77                	jl     c00282ad <__divdf3+0x329>
c0028236:	be 01 00 00 00       	mov    esi,0x1
c002823b:	29 c6                	sub    esi,eax
c002823d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028243:	83 fe 1f             	cmp    esi,0x1f
c0028246:	7e 2f                	jle    c0028277 <__divdf3+0x2f3>
c0028248:	83 fe 20             	cmp    esi,0x20
c002824b:	75 0a                	jne    c0028257 <__divdf3+0x2d3>
c002824d:	85 db                	test   ebx,ebx
c002824f:	0f 95 c3             	setne  bl
c0028252:	0f b6 db             	movzx  ebx,bl
c0028255:	eb 1a                	jmp    c0028271 <__divdf3+0x2ed>
c0028257:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002825a:	89 d7                	mov    edi,edx
c002825c:	d3 e7                	shl    edi,cl
c002825e:	89 f9                	mov    ecx,edi
c0028260:	09 d9                	or     ecx,ebx
c0028262:	0f 95 c3             	setne  bl
c0028265:	0f b6 db             	movzx  ebx,bl
c0028268:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002826d:	29 c1                	sub    ecx,eax
c002826f:	d3 ea                	shr    edx,cl
c0028271:	09 d3                	or     ebx,edx
c0028273:	31 c0                	xor    eax,eax
c0028275:	eb 3a                	jmp    c00282b1 <__divdf3+0x32d>
c0028277:	83 c0 1f             	add    eax,0x1f
c002827a:	89 d7                	mov    edi,edx
c002827c:	88 c1                	mov    cl,al
c002827e:	d3 e7                	shl    edi,cl
c0028280:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028283:	89 df                	mov    edi,ebx
c0028285:	89 f1                	mov    ecx,esi
c0028287:	d3 ef                	shr    edi,cl
c0028289:	89 f9                	mov    ecx,edi
c002828b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002828e:	09 cf                	or     edi,ecx
c0028290:	88 c1                	mov    cl,al
c0028292:	d3 e3                	shl    ebx,cl
c0028294:	85 db                	test   ebx,ebx
c0028296:	0f 95 c3             	setne  bl
c0028299:	0f b6 db             	movzx  ebx,bl
c002829c:	09 fb                	or     ebx,edi
c002829e:	89 f1                	mov    ecx,esi
c00282a0:	d3 ea                	shr    edx,cl
c00282a2:	31 c0                	xor    eax,eax
c00282a4:	eb 0d                	jmp    c00282b3 <__divdf3+0x32f>
c00282a6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00282ab:	eb 02                	jmp    c00282af <__divdf3+0x32b>
c00282ad:	31 c0                	xor    eax,eax
c00282af:	31 db                	xor    ebx,ebx
c00282b1:	31 d2                	xor    edx,edx
c00282b3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00282b6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00282b9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00282bf:	09 c8                	or     eax,ecx
c00282c1:	c1 e0 14             	shl    eax,0x14
c00282c4:	89 d1                	mov    ecx,edx
c00282c6:	c1 e9 0b             	shr    ecx,0xb
c00282c9:	09 c8                	or     eax,ecx
c00282cb:	89 c6                	mov    esi,eax
c00282cd:	89 d9                	mov    ecx,ebx
c00282cf:	c1 e9 0b             	shr    ecx,0xb
c00282d2:	c1 e2 15             	shl    edx,0x15
c00282d5:	09 ca                	or     edx,ecx
c00282d7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00282dd:	0f 95 c0             	setne  al
c00282e0:	09 c1                	or     ecx,eax
c00282e2:	83 e1 01             	and    ecx,0x1
c00282e5:	c1 eb 0a             	shr    ebx,0xa
c00282e8:	21 cb                	and    ebx,ecx
c00282ea:	01 d3                	add    ebx,edx
c00282ec:	89 d8                	mov    eax,ebx
c00282ee:	83 d6 00             	adc    esi,0x0
c00282f1:	89 f2                	mov    edx,esi
c00282f3:	89 c7                	mov    edi,eax
c00282f5:	89 d1                	mov    ecx,edx
c00282f7:	89 f8                	mov    eax,edi
c00282f9:	89 ca                	mov    edx,ecx
c00282fb:	83 c4 2c             	add    esp,0x2c
c00282fe:	5b                   	pop    ebx
c00282ff:	5e                   	pop    esi
c0028300:	5f                   	pop    edi
c0028301:	5d                   	pop    ebp
c0028302:	c3                   	ret    

c0028303 <__floatsidf>:
c0028303:	55                   	push   ebp
c0028304:	89 e5                	mov    ebp,esp
c0028306:	56                   	push   esi
c0028307:	53                   	push   ebx
c0028308:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002830b:	85 db                	test   ebx,ebx
c002830d:	7e 15                	jle    c0028324 <__floatsidf+0x21>
c002830f:	0f bd cb             	bsr    ecx,ebx
c0028312:	83 f1 1f             	xor    ecx,0x1f
c0028315:	d3 e3                	shl    ebx,cl
c0028317:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002831d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028322:	eb 21                	jmp    c0028345 <__floatsidf+0x42>
c0028324:	b8 00 00 00 00       	mov    eax,0x0
c0028329:	ba 00 00 00 00       	mov    edx,0x0
c002832e:	74 2a                	je     c002835a <__floatsidf+0x57>
c0028330:	f7 db                	neg    ebx
c0028332:	0f bd cb             	bsr    ecx,ebx
c0028335:	83 f1 1f             	xor    ecx,0x1f
c0028338:	d3 e3                	shl    ebx,cl
c002833a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028340:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028345:	29 c8                	sub    eax,ecx
c0028347:	c1 e0 14             	shl    eax,0x14
c002834a:	89 c1                	mov    ecx,eax
c002834c:	89 de                	mov    esi,ebx
c002834e:	c1 ee 0b             	shr    esi,0xb
c0028351:	09 f1                	or     ecx,esi
c0028353:	89 ca                	mov    edx,ecx
c0028355:	c1 e3 15             	shl    ebx,0x15
c0028358:	89 d8                	mov    eax,ebx
c002835a:	5b                   	pop    ebx
c002835b:	5e                   	pop    esi
c002835c:	5d                   	pop    ebp
c002835d:	c3                   	ret    

c002835e <__floatunsidf>:
c002835e:	55                   	push   ebp
c002835f:	89 e5                	mov    ebp,esp
c0028361:	56                   	push   esi
c0028362:	53                   	push   ebx
c0028363:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028366:	85 db                	test   ebx,ebx
c0028368:	74 2a                	je     c0028394 <__floatunsidf+0x36>
c002836a:	0f bd cb             	bsr    ecx,ebx
c002836d:	83 f1 1f             	xor    ecx,0x1f
c0028370:	d3 e3                	shl    ebx,cl
c0028372:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028378:	b8 1e 04 00 00       	mov    eax,0x41e
c002837d:	29 c8                	sub    eax,ecx
c002837f:	c1 e0 14             	shl    eax,0x14
c0028382:	89 c1                	mov    ecx,eax
c0028384:	89 de                	mov    esi,ebx
c0028386:	c1 ee 0b             	shr    esi,0xb
c0028389:	09 f1                	or     ecx,esi
c002838b:	89 ca                	mov    edx,ecx
c002838d:	c1 e3 15             	shl    ebx,0x15
c0028390:	89 d8                	mov    eax,ebx
c0028392:	eb 04                	jmp    c0028398 <__floatunsidf+0x3a>
c0028394:	31 c0                	xor    eax,eax
c0028396:	31 d2                	xor    edx,edx
c0028398:	5b                   	pop    ebx
c0028399:	5e                   	pop    esi
c002839a:	5d                   	pop    ebp
c002839b:	c3                   	ret    

c002839c <__fixdfsi>:
c002839c:	55                   	push   ebp
c002839d:	89 e5                	mov    ebp,esp
c002839f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283a2:	89 d1                	mov    ecx,edx
c00283a4:	c1 e1 0b             	shl    ecx,0xb
c00283a7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283b0:	c1 e8 15             	shr    eax,0x15
c00283b3:	09 c1                	or     ecx,eax
c00283b5:	c1 fa 14             	sar    edx,0x14
c00283b8:	78 1f                	js     c00283d9 <__fixdfsi+0x3d>
c00283ba:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00283c0:	31 c0                	xor    eax,eax
c00283c2:	83 fa 1e             	cmp    edx,0x1e
c00283c5:	77 40                	ja     c0028407 <__fixdfsi+0x6b>
c00283c7:	89 c8                	mov    eax,ecx
c00283c9:	0d 00 00 00 80       	or     eax,0x80000000
c00283ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283d3:	29 d1                	sub    ecx,edx
c00283d5:	d3 e8                	shr    eax,cl
c00283d7:	eb 2e                	jmp    c0028407 <__fixdfsi+0x6b>
c00283d9:	31 c0                	xor    eax,eax
c00283db:	81 c2 01 04 00 00    	add    edx,0x401
c00283e1:	78 24                	js     c0028407 <__fixdfsi+0x6b>
c00283e3:	83 fa 1e             	cmp    edx,0x1e
c00283e6:	7e 09                	jle    c00283f1 <__fixdfsi+0x55>
c00283e8:	83 fa 1f             	cmp    edx,0x1f
c00283eb:	75 18                	jne    c0028405 <__fixdfsi+0x69>
c00283ed:	85 c9                	test   ecx,ecx
c00283ef:	75 14                	jne    c0028405 <__fixdfsi+0x69>
c00283f1:	89 c8                	mov    eax,ecx
c00283f3:	0d 00 00 00 80       	or     eax,0x80000000
c00283f8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283fd:	29 d1                	sub    ecx,edx
c00283ff:	d3 e8                	shr    eax,cl
c0028401:	f7 d8                	neg    eax
c0028403:	eb 02                	jmp    c0028407 <__fixdfsi+0x6b>
c0028405:	31 c0                	xor    eax,eax
c0028407:	5d                   	pop    ebp
c0028408:	c3                   	ret    

c0028409 <__fixunsdfsi>:
c0028409:	55                   	push   ebp
c002840a:	89 e5                	mov    ebp,esp
c002840c:	53                   	push   ebx
c002840d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028410:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028413:	89 d3                	mov    ebx,edx
c0028415:	c1 fb 14             	sar    ebx,0x14
c0028418:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002841e:	31 c0                	xor    eax,eax
c0028420:	83 fb 1f             	cmp    ebx,0x1f
c0028423:	77 1d                	ja     c0028442 <__fixunsdfsi+0x39>
c0028425:	89 d0                	mov    eax,edx
c0028427:	c1 e0 0b             	shl    eax,0xb
c002842a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002842f:	c1 e9 15             	shr    ecx,0x15
c0028432:	09 c8                	or     eax,ecx
c0028434:	0d 00 00 00 80       	or     eax,0x80000000
c0028439:	b9 1f 00 00 00       	mov    ecx,0x1f
c002843e:	29 d9                	sub    ecx,ebx
c0028440:	d3 e8                	shr    eax,cl
c0028442:	5b                   	pop    ebx
c0028443:	5d                   	pop    ebp
c0028444:	c3                   	ret    

c0028445 <__cmpdf2>:
c0028445:	55                   	push   ebp
c0028446:	89 e5                	mov    ebp,esp
c0028448:	57                   	push   edi
c0028449:	56                   	push   esi
c002844a:	53                   	push   ebx
c002844b:	83 ec 0c             	sub    esp,0xc
c002844e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028451:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028454:	89 ca                	mov    edx,ecx
c0028456:	c1 ea 14             	shr    edx,0x14
c0028459:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002845f:	89 cb                	mov    ebx,ecx
c0028461:	c1 fb 1f             	sar    ebx,0x1f
c0028464:	31 da                	xor    edx,ebx
c0028466:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028469:	89 df                	mov    edi,ebx
c002846b:	c1 e7 0b             	shl    edi,0xb
c002846e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028471:	c1 e1 0b             	shl    ecx,0xb
c0028474:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002847a:	c1 eb 15             	shr    ebx,0x15
c002847d:	09 d9                	or     ecx,ebx
c002847f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028482:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028485:	89 ce                	mov    esi,ecx
c0028487:	c1 ee 14             	shr    esi,0x14
c002848a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028490:	89 cb                	mov    ebx,ecx
c0028492:	c1 fb 1f             	sar    ebx,0x1f
c0028495:	31 de                	xor    esi,ebx
c0028497:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002849a:	89 df                	mov    edi,ebx
c002849c:	c1 e7 0b             	shl    edi,0xb
c002849f:	c1 e1 0b             	shl    ecx,0xb
c00284a2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284a8:	c1 eb 15             	shr    ebx,0x15
c00284ab:	09 d9                	or     ecx,ebx
c00284ad:	89 d3                	mov    ebx,edx
c00284af:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284b5:	43                   	inc    ebx
c00284b6:	83 fb 01             	cmp    ebx,0x1
c00284b9:	77 08                	ja     c00284c3 <__cmpdf2+0x7e>
c00284bb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00284be:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00284c1:	75 68                	jne    c002852b <__cmpdf2+0xe6>
c00284c3:	89 f3                	mov    ebx,esi
c00284c5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284cb:	43                   	inc    ebx
c00284cc:	83 fb 01             	cmp    ebx,0x1
c00284cf:	77 06                	ja     c00284d7 <__cmpdf2+0x92>
c00284d1:	89 fb                	mov    ebx,edi
c00284d3:	09 cb                	or     ebx,ecx
c00284d5:	75 54                	jne    c002852b <__cmpdf2+0xe6>
c00284d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284da:	09 f8                	or     eax,edi
c00284dc:	09 c8                	or     eax,ecx
c00284de:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00284e1:	75 12                	jne    c00284f5 <__cmpdf2+0xb0>
c00284e3:	8d 42 01             	lea    eax,[edx+0x1]
c00284e6:	83 f8 01             	cmp    eax,0x1
c00284e9:	77 0a                	ja     c00284f5 <__cmpdf2+0xb0>
c00284eb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00284ee:	31 c0                	xor    eax,eax
c00284f0:	83 fb 01             	cmp    ebx,0x1
c00284f3:	76 36                	jbe    c002852b <__cmpdf2+0xe6>
c00284f5:	b8 01 00 00 00       	mov    eax,0x1
c00284fa:	39 f2                	cmp    edx,esi
c00284fc:	7f 2d                	jg     c002852b <__cmpdf2+0xe6>
c00284fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028503:	7c 26                	jl     c002852b <__cmpdf2+0xe6>
c0028505:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028508:	77 07                	ja     c0028511 <__cmpdf2+0xcc>
c002850a:	72 16                	jb     c0028522 <__cmpdf2+0xdd>
c002850c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002850f:	76 0a                	jbe    c002851b <__cmpdf2+0xd6>
c0028511:	89 d0                	mov    eax,edx
c0028513:	c1 f8 1f             	sar    eax,0x1f
c0028516:	83 c8 01             	or     eax,0x1
c0028519:	eb 10                	jmp    c002852b <__cmpdf2+0xe6>
c002851b:	b8 00 00 00 00       	mov    eax,0x0
c0028520:	73 09                	jae    c002852b <__cmpdf2+0xe6>
c0028522:	89 d0                	mov    eax,edx
c0028524:	c1 f8 1f             	sar    eax,0x1f
c0028527:	83 e0 02             	and    eax,0x2
c002852a:	48                   	dec    eax
c002852b:	83 c4 0c             	add    esp,0xc
c002852e:	5b                   	pop    ebx
c002852f:	5e                   	pop    esi
c0028530:	5f                   	pop    edi
c0028531:	5d                   	pop    ebp
c0028532:	c3                   	ret    

c0028533 <__eqdf2>:
c0028533:	55                   	push   ebp
c0028534:	89 e5                	mov    ebp,esp
c0028536:	50                   	push   eax
c0028537:	6a 01                	push   0x1
c0028539:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002853c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002853f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028542:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028545:	e8 fb fe ff ff       	call   c0028445 <__cmpdf2>
c002854a:	83 c4 18             	add    esp,0x18
c002854d:	c9                   	leave  
c002854e:	c3                   	ret    

c002854f <__nedf2>:
c002854f:	eb e2                	jmp    c0028533 <__eqdf2>

c0028551 <__gtdf2>:
c0028551:	55                   	push   ebp
c0028552:	89 e5                	mov    ebp,esp
c0028554:	50                   	push   eax
c0028555:	6a ff                	push   0xffffffff
c0028557:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002855a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002855d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028560:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028563:	e8 dd fe ff ff       	call   c0028445 <__cmpdf2>
c0028568:	83 c4 18             	add    esp,0x18
c002856b:	c9                   	leave  
c002856c:	c3                   	ret    

c002856d <__gedf2>:
c002856d:	eb e2                	jmp    c0028551 <__gtdf2>

c002856f <__ltdf2>:
c002856f:	eb c2                	jmp    c0028533 <__eqdf2>

c0028571 <__ledf2>:
c0028571:	eb c0                	jmp    c0028533 <__eqdf2>

c0028573 <__truncdfsf2>:
c0028573:	55                   	push   ebp
c0028574:	89 e5                	mov    ebp,esp
c0028576:	57                   	push   edi
c0028577:	56                   	push   esi
c0028578:	53                   	push   ebx
c0028579:	83 ec 0c             	sub    esp,0xc
c002857c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002857f:	89 d1                	mov    ecx,edx
c0028581:	c1 f9 14             	sar    ecx,0x14
c0028584:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028587:	89 df                	mov    edi,ebx
c0028589:	c1 e7 0b             	shl    edi,0xb
c002858c:	89 d0                	mov    eax,edx
c002858e:	c1 e0 0b             	shl    eax,0xb
c0028591:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028596:	c1 eb 15             	shr    ebx,0x15
c0028599:	09 d8                	or     eax,ebx
c002859b:	89 cb                	mov    ebx,ecx
c002859d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00285a3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00285a9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00285af:	0f 86 9e 00 00 00    	jbe    c0028653 <__truncdfsf2+0xe0>
c00285b5:	85 db                	test   ebx,ebx
c00285b7:	75 0a                	jne    c00285c3 <__truncdfsf2+0x50>
c00285b9:	c1 fa 17             	sar    edx,0x17
c00285bc:	30 d2                	xor    dl,dl
c00285be:	e9 84 00 00 00       	jmp    c0028647 <__truncdfsf2+0xd4>
c00285c3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00285c9:	83 fe 83             	cmp    esi,0xffffff83
c00285cc:	7d 4b                	jge    c0028619 <__truncdfsf2+0xa6>
c00285ce:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285d3:	29 f1                	sub    ecx,esi
c00285d5:	83 f9 1f             	cmp    ecx,0x1f
c00285d8:	7f 6b                	jg     c0028645 <__truncdfsf2+0xd2>
c00285da:	0d 00 00 00 80       	or     eax,0x80000000
c00285df:	89 c3                	mov    ebx,eax
c00285e1:	d3 eb                	shr    ebx,cl
c00285e3:	be 01 00 00 00       	mov    esi,0x1
c00285e8:	d3 e6                	shl    esi,cl
c00285ea:	4e                   	dec    esi
c00285eb:	21 f0                	and    eax,esi
c00285ed:	09 f8                	or     eax,edi
c00285ef:	0f 95 c0             	setne  al
c00285f2:	0f b6 c0             	movzx  eax,al
c00285f5:	09 c3                	or     ebx,eax
c00285f7:	89 d9                	mov    ecx,ebx
c00285f9:	c1 e9 08             	shr    ecx,0x8
c00285fc:	f6 c3 7f             	test   bl,0x7f
c00285ff:	0f 95 c0             	setne  al
c0028602:	09 c8                	or     eax,ecx
c0028604:	83 e0 01             	and    eax,0x1
c0028607:	c1 eb 07             	shr    ebx,0x7
c002860a:	21 c3                	and    ebx,eax
c002860c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028612:	09 d1                	or     ecx,edx
c0028614:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028617:	eb 76                	jmp    c002868f <__truncdfsf2+0x11c>
c0028619:	83 c6 80             	add    esi,0xffffff80
c002861c:	7e 1d                	jle    c002863b <__truncdfsf2+0xc8>
c002861e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028624:	75 0b                	jne    c0028631 <__truncdfsf2+0xbe>
c0028626:	09 f8                	or     eax,edi
c0028628:	74 09                	je     c0028633 <__truncdfsf2+0xc0>
c002862a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002862f:	eb 02                	jmp    c0028633 <__truncdfsf2+0xc0>
c0028631:	31 c0                	xor    eax,eax
c0028633:	c1 fa 17             	sar    edx,0x17
c0028636:	80 ca ff             	or     dl,0xff
c0028639:	eb 0e                	jmp    c0028649 <__truncdfsf2+0xd6>
c002863b:	c1 fa 1f             	sar    edx,0x1f
c002863e:	c1 e2 08             	shl    edx,0x8
c0028641:	09 ca                	or     edx,ecx
c0028643:	eb 04                	jmp    c0028649 <__truncdfsf2+0xd6>
c0028645:	31 d2                	xor    edx,edx
c0028647:	31 c0                	xor    eax,eax
c0028649:	c1 e2 17             	shl    edx,0x17
c002864c:	c1 e8 08             	shr    eax,0x8
c002864f:	09 d0                	or     eax,edx
c0028651:	eb 3c                	jmp    c002868f <__truncdfsf2+0x11c>
c0028653:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028659:	89 ca                	mov    edx,ecx
c002865b:	c1 fa 0b             	sar    edx,0xb
c002865e:	c1 e2 08             	shl    edx,0x8
c0028661:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028664:	31 db                	xor    ebx,ebx
c0028666:	85 ff                	test   edi,edi
c0028668:	0f 95 c3             	setne  bl
c002866b:	09 d8                	or     eax,ebx
c002866d:	89 c3                	mov    ebx,eax
c002866f:	c1 eb 08             	shr    ebx,0x8
c0028672:	a8 7f                	test   al,0x7f
c0028674:	0f 95 c2             	setne  dl
c0028677:	89 d6                	mov    esi,edx
c0028679:	09 de                	or     esi,ebx
c002867b:	83 e6 01             	and    esi,0x1
c002867e:	c1 e8 07             	shr    eax,0x7
c0028681:	21 f0                	and    eax,esi
c0028683:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028686:	09 ca                	or     edx,ecx
c0028688:	c1 e2 17             	shl    edx,0x17
c002868b:	09 da                	or     edx,ebx
c002868d:	01 d0                	add    eax,edx
c002868f:	83 c4 0c             	add    esp,0xc
c0028692:	5b                   	pop    ebx
c0028693:	5e                   	pop    esi
c0028694:	5f                   	pop    edi
c0028695:	5d                   	pop    ebp
c0028696:	c3                   	ret    

c0028697 <__extendsfdf2>:
c0028697:	55                   	push   ebp
c0028698:	89 e5                	mov    ebp,esp
c002869a:	57                   	push   edi
c002869b:	56                   	push   esi
c002869c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002869f:	89 d1                	mov    ecx,edx
c00286a1:	c1 f9 17             	sar    ecx,0x17
c00286a4:	c1 e2 08             	shl    edx,0x8
c00286a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00286ad:	89 c8                	mov    eax,ecx
c00286af:	80 e4 f8             	and    ah,0xf8
c00286b2:	8d 71 01             	lea    esi,[ecx+0x1]
c00286b5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00286bb:	75 27                	jne    c00286e4 <__extendsfdf2+0x4d>
c00286bd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00286c3:	75 18                	jne    c00286dd <__extendsfdf2+0x46>
c00286c5:	85 d2                	test   edx,edx
c00286c7:	74 20                	je     c00286e9 <__extendsfdf2+0x52>
c00286c9:	41                   	inc    ecx
c00286ca:	01 d2                	add    edx,edx
c00286cc:	79 fb                	jns    c00286c9 <__extendsfdf2+0x32>
c00286ce:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286d4:	29 c8                	sub    eax,ecx
c00286d6:	05 81 03 00 00       	add    eax,0x381
c00286db:	eb 0c                	jmp    c00286e9 <__extendsfdf2+0x52>
c00286dd:	05 00 07 00 00       	add    eax,0x700
c00286e2:	eb 05                	jmp    c00286e9 <__extendsfdf2+0x52>
c00286e4:	05 80 03 00 00       	add    eax,0x380
c00286e9:	c1 e0 14             	shl    eax,0x14
c00286ec:	89 c1                	mov    ecx,eax
c00286ee:	89 d0                	mov    eax,edx
c00286f0:	c1 e8 0b             	shr    eax,0xb
c00286f3:	09 c1                	or     ecx,eax
c00286f5:	c1 e2 15             	shl    edx,0x15
c00286f8:	89 d0                	mov    eax,edx
c00286fa:	89 ca                	mov    edx,ecx
c00286fc:	5e                   	pop    esi
c00286fd:	5f                   	pop    edi
c00286fe:	5d                   	pop    ebp
c00286ff:	c3                   	ret    

c0028700 <fabs>:
c0028700:	83 ec 0c             	sub    esp,0xc
c0028703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028707:	89 04 24             	mov    DWORD PTR [esp],eax
c002870a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002870e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028713:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028717:	dd 04 24             	fld    QWORD PTR [esp]
c002871a:	83 c4 0c             	add    esp,0xc
c002871d:	c3                   	ret    
c002871e:	66 90                	xchg   ax,ax

c0028720 <lrint>:
c0028720:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028724:	83 ec 04             	sub    esp,0x4
c0028727:	db 1c 24             	fistp  DWORD PTR [esp]
c002872a:	58                   	pop    eax
c002872b:	c3                   	ret    

c002872c <lrintf>:
c002872c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028730:	83 ec 04             	sub    esp,0x4
c0028733:	db 1c 24             	fistp  DWORD PTR [esp]
c0028736:	58                   	pop    eax
c0028737:	c3                   	ret    

Disassembly of section .init:

c0028738 <_init>:
c0028738:	55                   	push   ebp
c0028739:	89 e5                	mov    ebp,esp
c002873b:	e8 d8 79 fd ff       	call   c0000118 <frame_dummy>
c0028740:	e8 63 e0 ff ff       	call   c00267a8 <__do_global_ctors_aux>
c0028745:	5d                   	pop    ebp
c0028746:	c3                   	ret    

Disassembly of section .fini:

c0028747 <_fini>:
c0028747:	55                   	push   ebp
c0028748:	89 e5                	mov    ebp,esp
c002874a:	e8 59 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002874f:	5d                   	pop    ebp
c0028750:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028752 <Computer::~Computer()>:
c0028752:	83 ec 0c             	sub    esp,0xc
c0028755:	ba 88 a2 02 c0       	mov    edx,0xc002a288
c002875a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875e:	89 10                	mov    DWORD PTR [eax],edx
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	83 ec 0c             	sub    esp,0xc
c0028767:	50                   	push   eax
c0028768:	e8 c1 bb fe ff       	call   c001432e <Device::~Device()>
c002876d:	83 c4 10             	add    esp,0x10
c0028770:	90                   	nop
c0028771:	83 c4 0c             	add    esp,0xc
c0028774:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028776 <Computer::~Computer()>:
c0028776:	83 ec 0c             	sub    esp,0xc
c0028779:	83 ec 0c             	sub    esp,0xc
c002877c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028780:	e8 cd ff ff ff       	call   c0028752 <Computer::~Computer()>
c0028785:	83 c4 10             	add    esp,0x10
c0028788:	83 ec 08             	sub    esp,0x8
c002878b:	68 ec 01 00 00       	push   0x1ec
c0028790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028794:	e8 bd a7 fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0028799:	83 c4 10             	add    esp,0x10
c002879c:	83 c4 0c             	add    esp,0xc
c002879f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00287a0 <idleCommon()>:
c00287a0:	83 ec 0c             	sub    esp,0xc
c00287a3:	e8 1a 57 ff ff       	call   c001dec2 <lockScheduler()>
c00287a8:	e8 51 5a ff ff       	call   c001e1fe <schedule()>
c00287ad:	83 c4 0c             	add    esp,0xc
c00287b0:	e9 0f 57 ff ff       	jmp    c001dec4 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00287b6 <LinkedList<UnixFile>::~LinkedList()>:
c00287b6:	90                   	nop
c00287b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00287b8 <LinkedList<UnixFile>::LinkedList()>:
c00287b8:	83 ec 0c             	sub    esp,0xc
c00287bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287fb:	83 ec 0c             	sub    esp,0xc
c00287fe:	68 96 a5 02 c0       	push   0xc002a596
c0028803:	e8 2e a8 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0028808:	83 c4 10             	add    esp,0x10
c002880b:	90                   	nop
c002880c:	83 c4 0c             	add    esp,0xc
c002880f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028810 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028818:	75 10                	jne    c002882a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	68 b0 a5 02 c0       	push   0xc002a5b0
c0028822:	e8 c0 1e ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028827:	83 c4 10             	add    esp,0x10
c002882a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028830:	85 c0                	test   eax,eax
c0028832:	74 34                	je     c0028868 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028838:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883b:	85 c0                	test   eax,eax
c002883d:	74 29                	je     c0028868 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002883f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028843:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028846:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002884a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002884d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028855:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028866:	eb 65                	jmp    c00288cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886c:	8b 00                	mov    eax,DWORD PTR [eax]
c002886e:	85 c0                	test   eax,eax
c0028870:	75 4b                	jne    c00288bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028879:	85 c0                	test   eax,eax
c002887b:	75 40                	jne    c00288bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028885:	89 10                	mov    DWORD PTR [eax],edx
c0028887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002888f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028899:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a7:	85 c0                	test   eax,eax
c00288a9:	74 22                	je     c00288cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288ab:	83 ec 0c             	sub    esp,0xc
c00288ae:	68 d2 a5 02 c0       	push   0xc002a5d2
c00288b3:	e8 2f 1e ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c00288b8:	83 c4 10             	add    esp,0x10
c00288bb:	eb 10                	jmp    c00288cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288bd:	83 ec 0c             	sub    esp,0xc
c00288c0:	68 dc a5 02 c0       	push   0xc002a5dc
c00288c5:	e8 1d 1e ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c00288ca:	83 c4 10             	add    esp,0x10
c00288cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d4:	8d 50 01             	lea    edx,[eax+0x1]
c00288d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288de:	90                   	nop
c00288df:	83 c4 0c             	add    esp,0xc
c00288e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00288e4 <LinkedList<UnixFile>::getFirstElement()>:
c00288e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00288ec <LinkedList<UnixFile>::removeFirst()>:
c00288ec:	83 ec 0c             	sub    esp,0xc
c00288ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00288f5:	85 c0                	test   eax,eax
c00288f7:	75 12                	jne    c002890b <LinkedList<UnixFile>::removeFirst()+0x1f>
c00288f9:	83 ec 0c             	sub    esp,0xc
c00288fc:	68 e8 a5 02 c0       	push   0xc002a5e8
c0028901:	e8 e1 1d ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028906:	83 c4 10             	add    esp,0x10
c0028909:	eb 7e                	jmp    c0028989 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028912:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028915:	85 c0                	test   eax,eax
c0028917:	74 10                	je     c0028929 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028919:	83 ec 0c             	sub    esp,0xc
c002891c:	68 33 a6 02 c0       	push   0xc002a633
c0028921:	e8 c1 1d ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028926:	83 c4 10             	add    esp,0x10
c0028929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892d:	8b 00                	mov    eax,DWORD PTR [eax]
c002892f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028932:	85 c0                	test   eax,eax
c0028934:	75 33                	jne    c0028969 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028944:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002894b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028952:	83 f8 01             	cmp    eax,0x1
c0028955:	74 21                	je     c0028978 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028957:	83 ec 0c             	sub    esp,0xc
c002895a:	68 0c a6 02 c0       	push   0xc002a60c
c002895f:	e8 83 1d ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028964:	83 c4 10             	add    esp,0x10
c0028967:	eb 0f                	jmp    c0028978 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896d:	8b 00                	mov    eax,DWORD PTR [eax]
c002896f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028976:	89 10                	mov    DWORD PTR [eax],edx
c0028978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002897f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028989:	83 c4 0c             	add    esp,0xc
c002898c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002898e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002898e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028992:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028995:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028996 <DriverlessDevice::~DriverlessDevice()>:
c0028996:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c002899b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002899f:	89 10                	mov    DWORD PTR [eax],edx
c00289a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a5:	50                   	push   eax
c00289a6:	e8 83 b9 fe ff       	call   c001432e <Device::~Device()>
c00289ab:	83 c4 04             	add    esp,0x4
c00289ae:	90                   	nop
c00289af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00289b0 <DriverlessDevice::~DriverlessDevice()>:
c00289b0:	83 ec 0c             	sub    esp,0xc
c00289b3:	83 ec 0c             	sub    esp,0xc
c00289b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ba:	e8 d7 ff ff ff       	call   c0028996 <DriverlessDevice::~DriverlessDevice()>
c00289bf:	83 c4 10             	add    esp,0x10
c00289c2:	83 ec 08             	sub    esp,0x8
c00289c5:	68 58 01 00 00       	push   0x158
c00289ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ce:	e8 83 a5 fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c00289d3:	83 c4 10             	add    esp,0x10
c00289d6:	83 c4 0c             	add    esp,0xc
c00289d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289da <LinkedList<Device>::addElement(Device*)>:
c00289da:	83 ec 0c             	sub    esp,0xc
c00289dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289e2:	75 10                	jne    c00289f4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00289e4:	83 ec 0c             	sub    esp,0xc
c00289e7:	68 b0 a5 02 c0       	push   0xc002a5b0
c00289ec:	e8 f6 1c ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c00289f1:	83 c4 10             	add    esp,0x10
c00289f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fa:	85 c0                	test   eax,eax
c00289fc:	74 3a                	je     c0028a38 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a05:	85 c0                	test   eax,eax
c0028a07:	74 2f                	je     c0028a38 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a14:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a2c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a36:	eb 68                	jmp    c0028aa0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3e:	85 c0                	test   eax,eax
c0028a40:	75 4e                	jne    c0028a90 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a49:	85 c0                	test   eax,eax
c0028a4b:	75 43                	jne    c0028a90 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a55:	89 10                	mov    DWORD PTR [eax],edx
c0028a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a69:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a7a:	85 c0                	test   eax,eax
c0028a7c:	74 22                	je     c0028aa0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a7e:	83 ec 0c             	sub    esp,0xc
c0028a81:	68 d2 a5 02 c0       	push   0xc002a5d2
c0028a86:	e8 5c 1c ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028a8b:	83 c4 10             	add    esp,0x10
c0028a8e:	eb 10                	jmp    c0028aa0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a90:	83 ec 0c             	sub    esp,0xc
c0028a93:	68 dc a5 02 c0       	push   0xc002a5dc
c0028a98:	e8 4a 1c ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028a9d:	83 c4 10             	add    esp,0x10
c0028aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0028aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ab1:	90                   	nop
c0028ab2:	83 c4 0c             	add    esp,0xc
c0028ab5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028ab6 <LinkedList<Device>::LinkedList()>:
c0028ab6:	83 ec 0c             	sub    esp,0xc
c0028ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028add:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af9:	83 ec 0c             	sub    esp,0xc
c0028afc:	68 96 a5 02 c0       	push   0xc002a596
c0028b01:	e8 30 a5 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0028b06:	83 c4 10             	add    esp,0x10
c0028b09:	90                   	nop
c0028b0a:	83 c4 0c             	add    esp,0xc
c0028b0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b1c:	85 c0                	test   eax,eax
c0028b1e:	75 0e                	jne    c0028b2e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b27:	85 c0                	test   eax,eax
c0028b29:	75 03                	jne    c0028b2e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b2b:	b0 01                	mov    al,0x1
c0028b2d:	c3                   	ret    
c0028b2e:	b0 00                	mov    al,0x0
c0028b30:	90                   	nop
c0028b31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b32:	83 ec 0c             	sub    esp,0xc
c0028b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b3b:	85 c0                	test   eax,eax
c0028b3d:	75 15                	jne    c0028b54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b3f:	83 ec 0c             	sub    esp,0xc
c0028b42:	68 e8 a5 02 c0       	push   0xc002a5e8
c0028b47:	e8 9b 1b ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028b4c:	83 c4 10             	add    esp,0x10
c0028b4f:	e9 88 00 00 00       	jmp    c0028bdc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b5e:	85 c0                	test   eax,eax
c0028b60:	0f 95 c0             	setne  al
c0028b63:	84 c0                	test   al,al
c0028b65:	74 10                	je     c0028b77 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b67:	83 ec 0c             	sub    esp,0xc
c0028b6a:	68 33 a6 02 c0       	push   0xc002a633
c0028b6f:	e8 73 1b ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028b74:	83 c4 10             	add    esp,0x10
c0028b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b7d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b80:	85 c0                	test   eax,eax
c0028b82:	0f 94 c0             	sete   al
c0028b85:	84 c0                	test   al,al
c0028b87:	74 33                	je     c0028bbc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ba5:	83 f8 01             	cmp    eax,0x1
c0028ba8:	74 21                	je     c0028bcb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028baa:	83 ec 0c             	sub    esp,0xc
c0028bad:	68 0c a6 02 c0       	push   0xc002a60c
c0028bb2:	e8 30 1b ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028bb7:	83 c4 10             	add    esp,0x10
c0028bba:	eb 0f                	jmp    c0028bcb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bc2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc9:	89 10                	mov    DWORD PTR [eax],edx
c0028bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bd2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bdc:	83 c4 0c             	add    esp,0xc
c0028bdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028be0:	83 ec 0c             	sub    esp,0xc
c0028be3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028be8:	75 10                	jne    c0028bfa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028bea:	83 ec 0c             	sub    esp,0xc
c0028bed:	68 b0 a5 02 c0       	push   0xc002a5b0
c0028bf2:	e8 f0 1a ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c00:	85 c0                	test   eax,eax
c0028c02:	74 34                	je     c0028c38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c0b:	85 c0                	test   eax,eax
c0028c0d:	74 29                	je     c0028c38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c1a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c2f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c36:	eb 65                	jmp    c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c3e:	85 c0                	test   eax,eax
c0028c40:	75 4b                	jne    c0028c8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c49:	85 c0                	test   eax,eax
c0028c4b:	75 40                	jne    c0028c8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c55:	89 10                	mov    DWORD PTR [eax],edx
c0028c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c77:	85 c0                	test   eax,eax
c0028c79:	74 22                	je     c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c7b:	83 ec 0c             	sub    esp,0xc
c0028c7e:	68 d2 a5 02 c0       	push   0xc002a5d2
c0028c83:	e8 5f 1a ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028c88:	83 c4 10             	add    esp,0x10
c0028c8b:	eb 10                	jmp    c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c8d:	83 ec 0c             	sub    esp,0xc
c0028c90:	68 dc a5 02 c0       	push   0xc002a5dc
c0028c95:	e8 4d 1a ff ff       	call   c001a6e7 <Krnl::panic(char const*)>
c0028c9a:	83 c4 10             	add    esp,0x10
c0028c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ca4:	8d 50 01             	lea    edx,[eax+0x1]
c0028ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cae:	90                   	nop
c0028caf:	83 c4 0c             	add    esp,0xc
c0028cb2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028cb4 <ACPI::~ACPI()>:
c0028cb4:	83 ec 0c             	sub    esp,0xc
c0028cb7:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c0028cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc0:	89 10                	mov    DWORD PTR [eax],edx
c0028cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc6:	83 ec 0c             	sub    esp,0xc
c0028cc9:	50                   	push   eax
c0028cca:	e8 5f b6 fe ff       	call   c001432e <Device::~Device()>
c0028ccf:	83 c4 10             	add    esp,0x10
c0028cd2:	90                   	nop
c0028cd3:	83 c4 0c             	add    esp,0xc
c0028cd6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028cd8 <ACPI::~ACPI()>:
c0028cd8:	83 ec 0c             	sub    esp,0xc
c0028cdb:	83 ec 0c             	sub    esp,0xc
c0028cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce2:	e8 cd ff ff ff       	call   c0028cb4 <ACPI::~ACPI()>
c0028ce7:	83 c4 10             	add    esp,0x10
c0028cea:	83 ec 08             	sub    esp,0x8
c0028ced:	68 68 12 00 00       	push   0x1268
c0028cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf6:	e8 5b a2 fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0028cfb:	83 c4 10             	add    esp,0x10
c0028cfe:	83 c4 0c             	add    esp,0xc
c0028d01:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028d02 <CPU::~CPU()>:
c0028d02:	83 ec 0c             	sub    esp,0xc
c0028d05:	ba 68 bb 02 c0       	mov    edx,0xc002bb68
c0028d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0e:	89 10                	mov    DWORD PTR [eax],edx
c0028d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d14:	83 ec 0c             	sub    esp,0xc
c0028d17:	50                   	push   eax
c0028d18:	e8 11 b6 fe ff       	call   c001432e <Device::~Device()>
c0028d1d:	83 c4 10             	add    esp,0x10
c0028d20:	90                   	nop
c0028d21:	83 c4 0c             	add    esp,0xc
c0028d24:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028d26 <CPU::~CPU()>:
c0028d26:	83 ec 0c             	sub    esp,0xc
c0028d29:	83 ec 0c             	sub    esp,0xc
c0028d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d30:	e8 cd ff ff ff       	call   c0028d02 <CPU::~CPU()>
c0028d35:	83 c4 10             	add    esp,0x10
c0028d38:	83 ec 08             	sub    esp,0x8
c0028d3b:	68 98 11 00 00       	push   0x1198
c0028d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d44:	e8 0d a2 fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	83 c4 0c             	add    esp,0xc
c0028d4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d50 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d50:	90                   	nop
c0028d51:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d52 <ThreadControlBlock::ThreadControlBlock()>:
c0028d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d56:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d61:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d6c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d77:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d82:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d8a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d8e:	90                   	nop
c0028d8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d90:	83 ec 0c             	sub    esp,0xc
c0028d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dd3:	83 ec 0c             	sub    esp,0xc
c0028dd6:	68 96 a5 02 c0       	push   0xc002a596
c0028ddb:	e8 56 a2 fe ff       	call   c0013036 <Dbg::kprintf(char const*, ...)>
c0028de0:	83 c4 10             	add    esp,0x10
c0028de3:	90                   	nop
c0028de4:	83 c4 0c             	add    esp,0xc
c0028de7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028de8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028def:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028df0 <Vm::_FPUState::_FPUState()>:
c0028df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028df4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028dfb:	90                   	nop
c0028dfc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028dfe <PCI::~PCI()>:
c0028dfe:	83 ec 0c             	sub    esp,0xc
c0028e01:	ba dc cb 02 c0       	mov    edx,0xc002cbdc
c0028e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0a:	89 10                	mov    DWORD PTR [eax],edx
c0028e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e10:	83 ec 0c             	sub    esp,0xc
c0028e13:	50                   	push   eax
c0028e14:	e8 ed ae fe ff       	call   c0013d06 <Bus::~Bus()>
c0028e19:	83 c4 10             	add    esp,0x10
c0028e1c:	90                   	nop
c0028e1d:	83 c4 0c             	add    esp,0xc
c0028e20:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028e22 <PCI::~PCI()>:
c0028e22:	83 ec 0c             	sub    esp,0xc
c0028e25:	83 ec 0c             	sub    esp,0xc
c0028e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2c:	e8 cd ff ff ff       	call   c0028dfe <PCI::~PCI()>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	83 ec 08             	sub    esp,0x8
c0028e37:	68 58 01 00 00       	push   0x158
c0028e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e40:	e8 11 a1 fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0028e45:	83 c4 10             	add    esp,0x10
c0028e48:	83 c4 0c             	add    esp,0xc
c0028e4b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e4c <IDE::~IDE()>:
c0028e4c:	83 ec 0c             	sub    esp,0xc
c0028e4f:	ba 40 ce 02 c0       	mov    edx,0xc002ce40
c0028e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e58:	89 10                	mov    DWORD PTR [eax],edx
c0028e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5e:	83 ec 0c             	sub    esp,0xc
c0028e61:	50                   	push   eax
c0028e62:	e8 b7 b9 fe ff       	call   c001481e <HardDiskController::~HardDiskController()>
c0028e67:	83 c4 10             	add    esp,0x10
c0028e6a:	90                   	nop
c0028e6b:	83 c4 0c             	add    esp,0xc
c0028e6e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e70 <IDE::~IDE()>:
c0028e70:	83 ec 0c             	sub    esp,0xc
c0028e73:	83 ec 0c             	sub    esp,0xc
c0028e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7a:	e8 cd ff ff ff       	call   c0028e4c <IDE::~IDE()>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	83 ec 08             	sub    esp,0x8
c0028e85:	68 70 02 00 00       	push   0x270
c0028e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8e:	e8 c3 a0 fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0028e93:	83 c4 10             	add    esp,0x10
c0028e96:	83 c4 0c             	add    esp,0xc
c0028e99:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e9a <SATABus::~SATABus()>:
c0028e9a:	83 ec 0c             	sub    esp,0xc
c0028e9d:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c0028ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea6:	89 10                	mov    DWORD PTR [eax],edx
c0028ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eac:	83 ec 0c             	sub    esp,0xc
c0028eaf:	50                   	push   eax
c0028eb0:	e8 69 b9 fe ff       	call   c001481e <HardDiskController::~HardDiskController()>
c0028eb5:	83 c4 10             	add    esp,0x10
c0028eb8:	90                   	nop
c0028eb9:	83 c4 0c             	add    esp,0xc
c0028ebc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ebe <SATABus::~SATABus()>:
c0028ebe:	83 ec 0c             	sub    esp,0xc
c0028ec1:	83 ec 0c             	sub    esp,0xc
c0028ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec8:	e8 cd ff ff ff       	call   c0028e9a <SATABus::~SATABus()>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	83 ec 08             	sub    esp,0x8
c0028ed3:	68 64 01 00 00       	push   0x164
c0028ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028edc:	e8 75 a0 fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0028ee1:	83 c4 10             	add    esp,0x10
c0028ee4:	83 c4 0c             	add    esp,0xc
c0028ee7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ee8 <ATA::~ATA()>:
c0028ee8:	83 ec 0c             	sub    esp,0xc
c0028eeb:	ba 6c cf 02 c0       	mov    edx,0xc002cf6c
c0028ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef4:	89 10                	mov    DWORD PTR [eax],edx
c0028ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efa:	83 ec 0c             	sub    esp,0xc
c0028efd:	50                   	push   eax
c0028efe:	e8 0d ba fe ff       	call   c0014910 <PhysicalDisk::~PhysicalDisk()>
c0028f03:	83 c4 10             	add    esp,0x10
c0028f06:	90                   	nop
c0028f07:	83 c4 0c             	add    esp,0xc
c0028f0a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028f0c <ATA::~ATA()>:
c0028f0c:	83 ec 0c             	sub    esp,0xc
c0028f0f:	83 ec 0c             	sub    esp,0xc
c0028f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f16:	e8 cd ff ff ff       	call   c0028ee8 <ATA::~ATA()>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	83 ec 08             	sub    esp,0x8
c0028f21:	68 7c 01 00 00       	push   0x17c
c0028f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2a:	e8 27 a0 fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0028f2f:	83 c4 10             	add    esp,0x10
c0028f32:	83 c4 0c             	add    esp,0xc
c0028f35:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f36 <ATAPI::~ATAPI()>:
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	ba a4 cf 02 c0       	mov    edx,0xc002cfa4
c0028f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f42:	89 10                	mov    DWORD PTR [eax],edx
c0028f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f48:	83 ec 0c             	sub    esp,0xc
c0028f4b:	50                   	push   eax
c0028f4c:	e8 bf b9 fe ff       	call   c0014910 <PhysicalDisk::~PhysicalDisk()>
c0028f51:	83 c4 10             	add    esp,0x10
c0028f54:	90                   	nop
c0028f55:	83 c4 0c             	add    esp,0xc
c0028f58:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f5a <ATAPI::~ATAPI()>:
c0028f5a:	83 ec 0c             	sub    esp,0xc
c0028f5d:	83 ec 0c             	sub    esp,0xc
c0028f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f64:	e8 cd ff ff ff       	call   c0028f36 <ATAPI::~ATAPI()>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	83 ec 08             	sub    esp,0x8
c0028f6f:	68 80 01 00 00       	push   0x180
c0028f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f78:	e8 d9 9f fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0028f7d:	83 c4 10             	add    esp,0x10
c0028f80:	83 c4 0c             	add    esp,0xc
c0028f83:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f84 <SATA::~SATA()>:
c0028f84:	83 ec 0c             	sub    esp,0xc
c0028f87:	ba 58 d0 02 c0       	mov    edx,0xc002d058
c0028f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f90:	89 10                	mov    DWORD PTR [eax],edx
c0028f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f96:	83 ec 0c             	sub    esp,0xc
c0028f99:	50                   	push   eax
c0028f9a:	e8 71 b9 fe ff       	call   c0014910 <PhysicalDisk::~PhysicalDisk()>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	90                   	nop
c0028fa3:	83 c4 0c             	add    esp,0xc
c0028fa6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028fa8 <SATA::~SATA()>:
c0028fa8:	83 ec 0c             	sub    esp,0xc
c0028fab:	83 ec 0c             	sub    esp,0xc
c0028fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb2:	e8 cd ff ff ff       	call   c0028f84 <SATA::~SATA()>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	83 ec 08             	sub    esp,0x8
c0028fbd:	68 7c 01 00 00       	push   0x17c
c0028fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc6:	e8 8b 9f fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0028fcb:	83 c4 10             	add    esp,0x10
c0028fce:	83 c4 0c             	add    esp,0xc
c0028fd1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028fd2 <SATAPI::~SATAPI()>:
c0028fd2:	83 ec 0c             	sub    esp,0xc
c0028fd5:	ba 34 d1 02 c0       	mov    edx,0xc002d134
c0028fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fde:	89 10                	mov    DWORD PTR [eax],edx
c0028fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe4:	83 ec 0c             	sub    esp,0xc
c0028fe7:	50                   	push   eax
c0028fe8:	e8 23 b9 fe ff       	call   c0014910 <PhysicalDisk::~PhysicalDisk()>
c0028fed:	83 c4 10             	add    esp,0x10
c0028ff0:	90                   	nop
c0028ff1:	83 c4 0c             	add    esp,0xc
c0028ff4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028ff6 <SATAPI::~SATAPI()>:
c0028ff6:	83 ec 0c             	sub    esp,0xc
c0028ff9:	83 ec 0c             	sub    esp,0xc
c0028ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029000:	e8 cd ff ff ff       	call   c0028fd2 <SATAPI::~SATAPI()>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	83 ec 08             	sub    esp,0x8
c002900b:	68 80 01 00 00       	push   0x180
c0029010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029014:	e8 3d 9f fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0029019:	83 c4 10             	add    esp,0x10
c002901c:	83 c4 0c             	add    esp,0xc
c002901f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029020 <AVX::~AVX()>:
c0029020:	83 ec 0c             	sub    esp,0xc
c0029023:	ba 74 d1 02 c0       	mov    edx,0xc002d174
c0029028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902c:	89 10                	mov    DWORD PTR [eax],edx
c002902e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029032:	83 ec 0c             	sub    esp,0xc
c0029035:	50                   	push   eax
c0029036:	e8 59 b9 fe ff       	call   c0014994 <FPU::~FPU()>
c002903b:	83 c4 10             	add    esp,0x10
c002903e:	90                   	nop
c002903f:	83 c4 0c             	add    esp,0xc
c0029042:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029044 <AVX::~AVX()>:
c0029044:	83 ec 0c             	sub    esp,0xc
c0029047:	83 ec 0c             	sub    esp,0xc
c002904a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904e:	e8 cd ff ff ff       	call   c0029020 <AVX::~AVX()>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	83 ec 08             	sub    esp,0x8
c0029059:	68 58 01 00 00       	push   0x158
c002905e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029062:	e8 ef 9e fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0029067:	83 c4 10             	add    esp,0x10
c002906a:	83 c4 0c             	add    esp,0xc
c002906d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002906e <MMX::~MMX()>:
c002906e:	83 ec 0c             	sub    esp,0xc
c0029071:	ba b4 d1 02 c0       	mov    edx,0xc002d1b4
c0029076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907a:	89 10                	mov    DWORD PTR [eax],edx
c002907c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029080:	83 ec 0c             	sub    esp,0xc
c0029083:	50                   	push   eax
c0029084:	e8 0b b9 fe ff       	call   c0014994 <FPU::~FPU()>
c0029089:	83 c4 10             	add    esp,0x10
c002908c:	90                   	nop
c002908d:	83 c4 0c             	add    esp,0xc
c0029090:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029092 <MMX::~MMX()>:
c0029092:	83 ec 0c             	sub    esp,0xc
c0029095:	83 ec 0c             	sub    esp,0xc
c0029098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909c:	e8 cd ff ff ff       	call   c002906e <MMX::~MMX()>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	83 ec 08             	sub    esp,0x8
c00290a7:	68 58 01 00 00       	push   0x158
c00290ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b0:	e8 a1 9e fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c00290b5:	83 c4 10             	add    esp,0x10
c00290b8:	83 c4 0c             	add    esp,0xc
c00290bb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00290bc <SSE::~SSE()>:
c00290bc:	83 ec 0c             	sub    esp,0xc
c00290bf:	ba f4 d1 02 c0       	mov    edx,0xc002d1f4
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	89 10                	mov    DWORD PTR [eax],edx
c00290ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ce:	83 ec 0c             	sub    esp,0xc
c00290d1:	50                   	push   eax
c00290d2:	e8 bd b8 fe ff       	call   c0014994 <FPU::~FPU()>
c00290d7:	83 c4 10             	add    esp,0x10
c00290da:	90                   	nop
c00290db:	83 c4 0c             	add    esp,0xc
c00290de:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00290e0 <SSE::~SSE()>:
c00290e0:	83 ec 0c             	sub    esp,0xc
c00290e3:	83 ec 0c             	sub    esp,0xc
c00290e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ea:	e8 cd ff ff ff       	call   c00290bc <SSE::~SSE()>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	83 ec 08             	sub    esp,0x8
c00290f5:	68 58 01 00 00       	push   0x158
c00290fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290fe:	e8 53 9e fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0029103:	83 c4 10             	add    esp,0x10
c0029106:	83 c4 0c             	add    esp,0xc
c0029109:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002910a <x87::~x87()>:
c002910a:	83 ec 0c             	sub    esp,0xc
c002910d:	ba 34 d2 02 c0       	mov    edx,0xc002d234
c0029112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029116:	89 10                	mov    DWORD PTR [eax],edx
c0029118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911c:	83 ec 0c             	sub    esp,0xc
c002911f:	50                   	push   eax
c0029120:	e8 6f b8 fe ff       	call   c0014994 <FPU::~FPU()>
c0029125:	83 c4 10             	add    esp,0x10
c0029128:	90                   	nop
c0029129:	83 c4 0c             	add    esp,0xc
c002912c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002912e <x87::~x87()>:
c002912e:	83 ec 0c             	sub    esp,0xc
c0029131:	83 ec 0c             	sub    esp,0xc
c0029134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029138:	e8 cd ff ff ff       	call   c002910a <x87::~x87()>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	83 ec 08             	sub    esp,0x8
c0029143:	68 58 01 00 00       	push   0x158
c0029148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002914c:	e8 05 9e fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0029151:	83 c4 10             	add    esp,0x10
c0029154:	83 c4 0c             	add    esp,0xc
c0029157:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029158 <IOAPIC::~IOAPIC()>:
c0029158:	83 ec 0c             	sub    esp,0xc
c002915b:	ba 8c d3 02 c0       	mov    edx,0xc002d38c
c0029160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029164:	89 10                	mov    DWORD PTR [eax],edx
c0029166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916a:	83 ec 0c             	sub    esp,0xc
c002916d:	50                   	push   eax
c002916e:	e8 bb b1 fe ff       	call   c001432e <Device::~Device()>
c0029173:	83 c4 10             	add    esp,0x10
c0029176:	90                   	nop
c0029177:	83 c4 0c             	add    esp,0xc
c002917a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002917c <IOAPIC::~IOAPIC()>:
c002917c:	83 ec 0c             	sub    esp,0xc
c002917f:	83 ec 0c             	sub    esp,0xc
c0029182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029186:	e8 cd ff ff ff       	call   c0029158 <IOAPIC::~IOAPIC()>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	83 ec 08             	sub    esp,0x8
c0029191:	68 68 01 00 00       	push   0x168
c0029196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002919a:	e8 b7 9d fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c002919f:	83 c4 10             	add    esp,0x10
c00291a2:	83 c4 0c             	add    esp,0xc
c00291a5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00291a6 <APIC::~APIC()>:
c00291a6:	83 ec 0c             	sub    esp,0xc
c00291a9:	ba 44 d3 02 c0       	mov    edx,0xc002d344
c00291ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b2:	89 10                	mov    DWORD PTR [eax],edx
c00291b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b8:	83 ec 0c             	sub    esp,0xc
c00291bb:	50                   	push   eax
c00291bc:	e8 9d bc fe ff       	call   c0014e5e <InterruptController::~InterruptController()>
c00291c1:	83 c4 10             	add    esp,0x10
c00291c4:	90                   	nop
c00291c5:	83 c4 0c             	add    esp,0xc
c00291c8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00291ca <APIC::~APIC()>:
c00291ca:	83 ec 0c             	sub    esp,0xc
c00291cd:	83 ec 0c             	sub    esp,0xc
c00291d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d4:	e8 cd ff ff ff       	call   c00291a6 <APIC::~APIC()>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	83 ec 08             	sub    esp,0x8
c00291df:	68 58 21 00 00       	push   0x2158
c00291e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e8:	e8 69 9d fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c00291ed:	83 c4 10             	add    esp,0x10
c00291f0:	83 c4 0c             	add    esp,0xc
c00291f3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00291f4 <PIC::~PIC()>:
c00291f4:	83 ec 0c             	sub    esp,0xc
c00291f7:	ba dc d3 02 c0       	mov    edx,0xc002d3dc
c00291fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029200:	89 10                	mov    DWORD PTR [eax],edx
c0029202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029206:	83 ec 0c             	sub    esp,0xc
c0029209:	50                   	push   eax
c002920a:	e8 4f bc fe ff       	call   c0014e5e <InterruptController::~InterruptController()>
c002920f:	83 c4 10             	add    esp,0x10
c0029212:	90                   	nop
c0029213:	83 c4 0c             	add    esp,0xc
c0029216:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029218 <PIC::~PIC()>:
c0029218:	83 ec 0c             	sub    esp,0xc
c002921b:	83 ec 0c             	sub    esp,0xc
c002921e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029222:	e8 cd ff ff ff       	call   c00291f4 <PIC::~PIC()>
c0029227:	83 c4 10             	add    esp,0x10
c002922a:	83 ec 08             	sub    esp,0x8
c002922d:	68 58 21 00 00       	push   0x2158
c0029232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029236:	e8 1b 9d fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c002923b:	83 c4 10             	add    esp,0x10
c002923e:	83 c4 0c             	add    esp,0xc
c0029241:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029242 <APICTimer::~APICTimer()>:
c0029242:	83 ec 0c             	sub    esp,0xc
c0029245:	ba 30 d4 02 c0       	mov    edx,0xc002d430
c002924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924e:	89 10                	mov    DWORD PTR [eax],edx
c0029250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029254:	83 ec 0c             	sub    esp,0xc
c0029257:	50                   	push   eax
c0029258:	e8 5d db fe ff       	call   c0016dba <Timer::~Timer()>
c002925d:	83 c4 10             	add    esp,0x10
c0029260:	90                   	nop
c0029261:	83 c4 0c             	add    esp,0xc
c0029264:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029266 <APICTimer::~APICTimer()>:
c0029266:	83 ec 0c             	sub    esp,0xc
c0029269:	83 ec 0c             	sub    esp,0xc
c002926c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029270:	e8 cd ff ff ff       	call   c0029242 <APICTimer::~APICTimer()>
c0029275:	83 c4 10             	add    esp,0x10
c0029278:	83 ec 08             	sub    esp,0x8
c002927b:	68 60 01 00 00       	push   0x160
c0029280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029284:	e8 cd 9c fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c0029289:	83 c4 10             	add    esp,0x10
c002928c:	83 c4 0c             	add    esp,0xc
c002928f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029290 <PIT::~PIT()>:
c0029290:	83 ec 0c             	sub    esp,0xc
c0029293:	ba 80 d4 02 c0       	mov    edx,0xc002d480
c0029298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929c:	89 10                	mov    DWORD PTR [eax],edx
c002929e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a2:	83 ec 0c             	sub    esp,0xc
c00292a5:	50                   	push   eax
c00292a6:	e8 0f db fe ff       	call   c0016dba <Timer::~Timer()>
c00292ab:	83 c4 10             	add    esp,0x10
c00292ae:	90                   	nop
c00292af:	83 c4 0c             	add    esp,0xc
c00292b2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00292b4 <PIT::~PIT()>:
c00292b4:	83 ec 0c             	sub    esp,0xc
c00292b7:	83 ec 0c             	sub    esp,0xc
c00292ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292be:	e8 cd ff ff ff       	call   c0029290 <PIT::~PIT()>
c00292c3:	83 c4 10             	add    esp,0x10
c00292c6:	83 ec 08             	sub    esp,0x8
c00292c9:	68 5c 01 00 00       	push   0x15c
c00292ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292d2:	e8 7f 9c fe ff       	call   c0012f56 <operator delete(void*, unsigned long)>
c00292d7:	83 c4 10             	add    esp,0x10
c00292da:	83 c4 0c             	add    esp,0xc
c00292dd:	c3                   	ret    
