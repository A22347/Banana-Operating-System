
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 42 f6 00 00       	call   c000f662 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 81 02 00       	call   c00281b8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 0c 8e 02 c0       	mov    ebx,0xc0028e0c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 18 8e 02 c0    	cmp    ebx,0xc0028e18
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 cb 02 c0       	mov    eax,0xc002cb18
c0000049:	3d 18 cb 02 c0       	cmp    eax,0xc002cb18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 cb 02 c0       	push   0xc002cb18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 cb 02 c0       	mov    eax,0xc002cb18
c0000075:	2d 18 cb 02 c0       	sub    eax,0xc002cb18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 cb 02 c0       	push   0xc002cb18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d148,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 20 8e 02 c0       	mov    ebx,0xc0028e20
c00000bb:	81 eb 1c 8e 02 c0    	sub    ebx,0xc0028e1c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 1c 8e 02 c0       	mov    esi,0xc0028e1c
c00000ca:	a1 4c d1 02 c0       	mov    eax,ds:0xc002d14c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c d1 02 c0       	mov    ds:0xc002d14c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c d1 02 c0       	mov    eax,ds:0xc002d14c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 cb 02 c0       	push   0xc002cb18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d148,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 d1 02 c0       	push   0xc002d150
c000012c:	68 18 cb 02 c0       	push   0xc002cb18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 f7 cc 01 00       	call   c001d09a <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 36 1f 01 00       	call   c00122f1 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 d5 cc 01 00       	call   c001d09a <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 7d d1 01 00       	call   c001d561 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 93 d7 01 00       	call   c001db80 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 90 d5 02 c0 	lgdtd  ds:0xc002d590
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 2f 3c 01 00       	call   c0014211 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 68 d1 02 c0       	mov    ds:0xc002d168,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 68 d1 02 c0    	mov    DWORD PTR ds:0xc002d168,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 68 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d168
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 40 8e 02 c0 02 	test   BYTE PTR [edx-0x3ffd71c0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 40 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd71c0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 40 8e 02 c0 08 	test   BYTE PTR [edx-0x3ffd71c0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 40 8e 02 c0 04 	test   BYTE PTR [ebx-0x3ffd71c0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 40 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd71c0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 80 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d180
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 80 d1 02 c0    	mov    DWORD PTR ds:0xc002d180,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 84 d1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2e7c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 84 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e7c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 80 d1 02 c0    	mov    DWORD PTR ds:0xc002d180,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ac d1 02 c0    	cmp    DWORD PTR ds:0xc002d1ac,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d bc d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1bc
c0000e38:	c7 42 0c b4 d1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d1b4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 bc d1 02 c0    	mov    DWORD PTR ds:0xc002d1bc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ac d1 02 c0    	mov    DWORD PTR ds:0xc002d1ac,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 80 d1 02 c0 02 	test   BYTE PTR ds:0xc002d180,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 80 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d180
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 84 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2e7c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 84 d1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2e7c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 b4 d1 02 c0 	lea    edx,[eax*8-0x3ffd2e4c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d c0 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d1c0
c00011ba:	81 fb b4 d1 02 c0    	cmp    ebx,0xc002d1b4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d b4 d1 02 c0       	cmp    eax,0xc002d1b4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d b0 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1b0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 bc d1 02 c0       	mov    ds:0xc002d1bc,eax
c00011f6:	a3 c0 d1 02 c0       	mov    ds:0xc002d1c0,eax
c00011fb:	a3 b0 d1 02 c0       	mov    ds:0xc002d1b0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 b4 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d1b4
c0001209:	c7 40 0c b4 d1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d1b4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 c0 d1 02 c0       	mov    ds:0xc002d1c0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 b4 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d1b4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 78 d1 02 c0 	lea    ebp,[edx*4-0x3ffd2e88]
c000125a:	8b 14 95 80 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e80]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 80 d1 02 c0 	lea    ecx,[edx*4-0x3ffd2e80]
c0001275:	8b 14 95 80 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e80]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd b4 d4 02 c0 	or     DWORD PTR [edi*4-0x3ffd2b4c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 b4 d1 02 c0 	lea    eax,[eax*8-0x3ffd2e4c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d bc d1 02 c0    	mov    DWORD PTR ds:0xc002d1bc,ecx
c000132f:	89 0d c0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c0,ecx
c0001335:	c7 41 08 b4 d1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d1b4
c000133c:	c7 41 0c b4 d1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d1b4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ac d1 02 c0 	lea    edx,[ecx*8-0x3ffd2e54]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d b4 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2b4c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d b4 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2b4c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ac d1 02 c0 	lea    edx,[eax*4-0x3ffd2e54]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d b4 d4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2b4c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d bc d1 02 c0    	mov    DWORD PTR ds:0xc002d1bc,edi
c0001402:	89 3d c0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c0,edi
c0001408:	c7 47 08 b4 d1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d1b4
c000140f:	c7 47 0c b4 d1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d1b4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d b0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1b0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ac d1 02 c0       	mov    eax,ds:0xc002d1ac
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ac d1 02 c0    	mov    DWORD PTR ds:0xc002d1ac,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 80 d1 02 c0       	mov    edx,0xc002d180
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 80 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d180,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d d4 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4d4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 d4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4d4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d d4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4d4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ac d1 02 c0    	cmp    DWORD PTR ds:0xc002d1ac,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ac d1 02 c0    	mov    DWORD PTR ds:0xc002d1ac,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 80 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d180,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 dc d4 02 c0    	push   DWORD PTR ds:0xc002d4dc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 80 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d180,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 dc d4 02 c0       	mov    eax,ds:0xc002d4dc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ac d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1ac,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ac d1 02 c0       	mov    eax,ds:0xc002d1ac
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 84 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2e7c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 b4 d1 02 c0       	mov    eax,0xc002d1b4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ac d4 02 c0       	cmp    eax,0xc002d4ac
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 e8 d4 02 c0       	mov    eax,ds:0xc002d4e8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 d0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4d0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 e4 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4e4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 f4 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4f4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 44 8f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd70bc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 80 d1 02 c0       	mov    eax,ds:0xc002d180
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 80 d1 02 c0       	mov    ds:0xc002d180,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d c4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d c8 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d cc d4 02 c0    	mov    DWORD PTR ds:0xc002d4cc,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 d4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4d4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 40 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf3c0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 be e9 01 00       	jmp    c00205b0 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 40 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf3c0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 ef e9 01 00       	jmp    c00205f7 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 40 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf3c0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 17 ea 01 00       	jmp    c002063e <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 0a 46 02 00       	call   c0026514 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 60 90 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6fa0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 60 90 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6fa0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 60 8f 02 c0       	mov    edx,0xc0028f60
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 80 90 02 c0       	mov    edx,0xc0029080
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 4c ba 02 c0       	mov    edx,0xc002ba4c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 8c 90 02 c0       	mov    edx,0xc002908c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 70 90 02 c0       	mov    edx,0xc0029070
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 20 d5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2ae0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 00 d5 02 c0    	mov    ax,ds:0xc002d500
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 00 d5 02 c0    	mov    ds:0xc002d500,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 07 34 02 00       	call   c0026514 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 92 90 02 c0       	mov    eax,0xc0029092
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad e0 8f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7020]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 9b 90 02 c0       	mov    eax,0xc002909b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 60 90 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6fa0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 d2 1d 02 00       	call   c0026514 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 70 90 02 c0       	mov    edx,0xc0029070
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 60 8f 02 c0       	mov    edx,0xc0028f60
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 20 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2ae0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 20 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2ae0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 99 07 02 00       	call   c0026514 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 7f 07 02 00       	call   c0026514 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 b7 8f 02 c0       	mov    eax,0xc0028fb7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 b0 8f 02 c0       	mov    eax,0xc0028fb0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 20 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ae0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be a0 8f 02 c0       	mov    esi,0xc0028fa0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 c2 ee 01 00       	call   c0026514 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 80 90 02 c0       	mov    edx,0xc0029080
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 80 8f 02 c0       	mov    edx,0xc0028f80
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 90 8f 02 c0       	mov    edx,0xc0028f90
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba a2 90 02 c0       	mov    edx,0xc00290a2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ae 90 02 c0       	mov    edx,0xc00290ae
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba c2 90 02 c0       	mov    edx,0xc00290c2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 33 71 00 00       	call   c000f59c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2d 71 00 00       	call   c000f5ac <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c e0 93 02 c0 	mov    DWORD PTR [esp+0xc],0xc00293e0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 e0 93 02 c0 	mov    DWORD PTR [esp+0x10],0xc00293e0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 e0 91 02 c0       	mov    eax,0xc00291e0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 20 91 02 c0       	mov    eax,0xc0029120
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 e0 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f20]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 72 6e 00 00       	call   c000f5ac <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 5c 6e 00 00       	call   c000f5ac <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 16 f8 01 00       	call   c0027fe7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 d9 f7 01 00       	call   c0027fc9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 ad f7 01 00       	call   c0027fe7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 60 ee 01 00       	call   c00276ec <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 e2 f8 01 00       	call   c0028180 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 27 f7 01 00       	call   c0027fe7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 69 f6 01 00       	call   c0027fe7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 36 f6 01 00       	call   c0027fc9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 23 f5 01 00       	call   c0027fe7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 eb f4 01 00       	call   c0027fc9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 3b 6a 00 00       	call   c000f5cc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d6 69 00 00       	call   c000f5ac <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 e0 94 02 c0       	mov    eax,0xc00294e0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 f7 f2 01 00       	call   c0027fe7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 bc f2 01 00       	call   c0027fc9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 40 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd66c0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 cc ef 01 00       	call   c0027d7b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 4a e9 01 00       	call   c0027718 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 06 f2 01 00       	call   c0027feb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 f4 f2 01 00       	call   c002810f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 de e8 01 00       	call   c0027718 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 89 f1 01 00       	call   c0027fe5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 6a f1 01 00       	call   c0027fe9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 00 f3 01 00       	call   c00281a0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 aa ee 01 00       	call   c0027d7b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 28 e8 01 00       	call   c0027718 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 e4 f0 01 00       	call   c0027feb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 d2 f1 01 00       	call   c002810f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 bc e7 01 00       	call   c0027718 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 67 f0 01 00       	call   c0027fe5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 47 f0 01 00       	call   c0027fe9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 dc f1 01 00       	call   c00281a0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 82 ef 01 00       	call   c0027fe7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 40 ef 01 00       	call   c0027fc9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 28 ef 01 00       	call   c0027fe7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 9a ec 01 00       	call   c0027d7b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 9c df 01 00       	call   c002709b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ff e5 01 00       	call   c0027718 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 51 ec 01 00       	call   c0027d7b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 57 df 01 00       	call   c002709b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 26 ec 01 00       	call   c0027d7b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 76 ee 01 00       	call   c0027fe5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 53 e5 01 00       	call   c00276ec <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 d5 ef 01 00       	call   c0028180 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 fc ed 01 00       	call   c0027fc9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 f7 e4 01 00       	call   c00276ec <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 75 eb 01 00       	call   c0027d7b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 f8 e4 01 00       	call   c0027718 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 4a eb 01 00       	call   c0027d7b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 b1 e7 01 00       	call   c00279fc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 30 de 01 00       	call   c002709b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 90 d7 01 00       	call   c0026a30 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 67 ee 01 00       	call   c002810f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 50 e4 01 00       	call   c0027718 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 37 ee 01 00       	call   c002810f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 a9 dd 01 00       	call   c002709b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 e2 ec 01 00       	call   c0027feb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ca e6 01 00       	call   c00279fc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 50 dd 01 00       	call   c002709b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 3e ee 01 00       	call   c00281a0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 10 ea 01 00       	call   c0027d7b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 67 e3 01 00       	call   c00276ec <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 46 ec 01 00       	call   c0027fe7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 df dc 01 00       	call   c002709b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 0b e3 01 00       	call   c00276ec <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 ad ed 01 00       	call   c00281a0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 5e e9 01 00       	call   c0027d7b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 db e2 01 00       	call   c0027718 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 2e e9 01 00       	call   c0027d7b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 34 dc 01 00       	call   c002709b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 04 e9 01 00       	call   c0027d7b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 56 eb 01 00       	call   c0027fe7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 2d e2 01 00       	call   c00276ec <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 af ec 01 00       	call   c0028180 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 d6 ea 01 00       	call   c0027fc9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 d0 e1 01 00       	call   c00276ec <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 4e e8 01 00       	call   c0027d7b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 d1 e1 01 00       	call   c0027718 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 23 e8 01 00       	call   c0027d7b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 8a e4 01 00       	call   c00279fc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 09 db 01 00       	call   c002709b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 59 d4 01 00       	call   c0026a30 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 30 eb 01 00       	call   c002810f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 19 e1 01 00       	call   c0027718 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 00 eb 01 00       	call   c002810f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 72 da 01 00       	call   c002709b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 ab e9 01 00       	call   c0027feb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 92 e3 01 00       	call   c00279fc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 11 da 01 00       	call   c002709b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ff ea 01 00       	call   c00281a0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 d1 e6 01 00       	call   c0027d7b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 28 e0 01 00       	call   c00276ec <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 07 e9 01 00       	call   c0027fe7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 a0 d9 01 00       	call   c002709b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 cc df 01 00       	call   c00276ec <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 41 e6 01 00       	call   c0027d7b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 47 d9 01 00       	call   c002709b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 b4 99 02 c0       	mov    eax,0xc00299b4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6f 5d 00 00       	call   c000f5ac <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 71 5d 00 00       	call   c000f5cc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 bc e4 01 00       	call   c0027d7b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 3a de 01 00       	call   c0027718 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 cc d0 01 00       	call   c0026a30 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 a3 e7 01 00       	call   c002810f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 8c dd 01 00       	call   c0027718 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 6f e7 01 00       	call   c002810f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 e1 d6 01 00       	call   c002709b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 41 e7 01 00       	call   c002810f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 30 dd 01 00       	call   c0027718 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 99 d6 01 00       	call   c002709b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ba cf 01 00       	call   c0026a30 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 91 e6 01 00       	call   c002810f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 7a dc 01 00       	call   c0027718 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 5d e6 01 00       	call   c002810f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 cf d5 01 00       	call   c002709b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 2f e6 01 00       	call   c002810f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 1e dc 01 00       	call   c0027718 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 87 d5 01 00       	call   c002709b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 65 d5 01 00       	call   c002709b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 41 ce 01 00       	call   c0026a30 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 18 e5 01 00       	call   c002810f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 01 db 01 00       	call   c0027718 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 e4 e4 01 00       	call   c002810f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 56 d4 01 00       	call   c002709b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 b6 e4 01 00       	call   c002810f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 9f da 01 00       	call   c0027718 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 08 d4 01 00       	call   c002709b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 68 e4 01 00       	call   c002810f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 51 da 01 00       	call   c0027718 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ba d3 01 00       	call   c002709b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 cf cc 01 00       	call   c0026a30 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 a6 e3 01 00       	call   c002810f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 8f d9 01 00       	call   c0027718 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 76 e3 01 00       	call   c002810f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 e8 d2 01 00       	call   c002709b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 48 e3 01 00       	call   c002810f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 31 d9 01 00       	call   c0027718 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 9a d2 01 00       	call   c002709b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 fa e2 01 00       	call   c002810f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 e3 d8 01 00       	call   c0027718 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 4c d2 01 00       	call   c002709b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 20 d2 01 00       	call   c002709b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 7d d8 01 00       	call   c0027718 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 39 e1 01 00       	call   c0027feb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 c8 d1 01 00       	call   c002709b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 25 d8 01 00       	call   c0027718 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 e1 e0 01 00       	call   c0027feb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 5b ca 01 00       	call   c0026a30 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 32 e1 01 00       	call   c002810f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 1b d7 01 00       	call   c0027718 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 fe e0 01 00       	call   c002810f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 70 d0 01 00       	call   c002709b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 d0 e0 01 00       	call   c002810f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 b9 d6 01 00       	call   c0027718 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 22 d0 01 00       	call   c002709b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 82 e0 01 00       	call   c002810f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 6b d6 01 00       	call   c0027718 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 d4 cf 01 00       	call   c002709b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 34 e0 01 00       	call   c002810f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 1d d6 01 00       	call   c0027718 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 86 cf 01 00       	call   c002709b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 e6 df 01 00       	call   c002810f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 cf d5 01 00       	call   c0027718 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 38 cf 01 00       	call   c002709b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 3a c8 01 00       	call   c0026a30 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 11 df 01 00       	call   c002810f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 fa d4 01 00       	call   c0027718 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 e1 de 01 00       	call   c002810f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 53 ce 01 00       	call   c002709b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 b3 de 01 00       	call   c002810f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 9c d4 01 00       	call   c0027718 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 05 ce 01 00       	call   c002709b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 65 de 01 00       	call   c002810f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 4e d4 01 00       	call   c0027718 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 b7 cd 01 00       	call   c002709b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 17 de 01 00       	call   c002810f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 00 d4 01 00       	call   c0027718 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 69 cd 01 00       	call   c002709b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 c9 dd 01 00       	call   c002810f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 b2 d3 01 00       	call   c0027718 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 1b cd 01 00       	call   c002709b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 ef cc 01 00       	call   c002709b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 4c d3 01 00       	call   c0027718 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 08 dc 01 00       	call   c0027feb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 97 cc 01 00       	call   c002709b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 f4 d2 01 00       	call   c0027718 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 b0 db 01 00       	call   c0027feb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 3e cc 01 00       	call   c002709b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 9b d2 01 00       	call   c0027718 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 57 db 01 00       	call   c0027feb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 e5 cb 01 00       	call   c002709b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 42 d2 01 00       	call   c0027718 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 fe da 01 00       	call   c0027feb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 5c c4 01 00       	call   c0026a30 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 33 db 01 00       	call   c002810f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 1c d1 01 00       	call   c0027718 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ff da 01 00       	call   c002810f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 71 ca 01 00       	call   c002709b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 d1 da 01 00       	call   c002810f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ba d0 01 00       	call   c0027718 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 23 ca 01 00       	call   c002709b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 83 da 01 00       	call   c002810f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 6c d0 01 00       	call   c0027718 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 d5 c9 01 00       	call   c002709b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 35 da 01 00       	call   c002810f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 1e d0 01 00       	call   c0027718 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 87 c9 01 00       	call   c002709b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 e7 d9 01 00       	call   c002810f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 d0 cf 01 00       	call   c0027718 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 39 c9 01 00       	call   c002709b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 99 d9 01 00       	call   c002810f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 82 cf 01 00       	call   c0027718 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 e8 c8 01 00       	call   c002709b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 48 d9 01 00       	call   c002810f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 31 cf 01 00       	call   c0027718 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 9a c8 01 00       	call   c002709b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 94 c1 01 00       	call   c0026a30 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 6b d8 01 00       	call   c002810f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 54 ce 01 00       	call   c0027718 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 34 d8 01 00       	call   c002810f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 a6 c7 01 00       	call   c002709b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 06 d8 01 00       	call   c002810f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 ef cd 01 00       	call   c0027718 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 58 c7 01 00       	call   c002709b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 b8 d7 01 00       	call   c002810f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 a1 cd 01 00       	call   c0027718 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 0a c7 01 00       	call   c002709b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 6a d7 01 00       	call   c002810f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 53 cd 01 00       	call   c0027718 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 bc c6 01 00       	call   c002709b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 1c d7 01 00       	call   c002810f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 05 cd 01 00       	call   c0027718 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 6e c6 01 00       	call   c002709b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ce d6 01 00       	call   c002810f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 b7 cc 01 00       	call   c0027718 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 1d c6 01 00       	call   c002709b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 7d d6 01 00       	call   c002810f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 66 cc 01 00       	call   c0027718 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 d5 c5 01 00       	call   c002709b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 ae c5 01 00       	call   c002709b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 0c cc 01 00       	call   c0027718 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 c8 d4 01 00       	call   c0027feb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 57 c5 01 00       	call   c002709b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 b5 cb 01 00       	call   c0027718 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 71 d4 01 00       	call   c0027feb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ff c4 01 00       	call   c002709b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 5d cb 01 00       	call   c0027718 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 19 d4 01 00       	call   c0027feb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 a7 c4 01 00       	call   c002709b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 05 cb 01 00       	call   c0027718 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 c1 d3 01 00       	call   c0027feb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 4f c4 01 00       	call   c002709b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 ad ca 01 00       	call   c0027718 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 69 d3 01 00       	call   c0027feb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 fd c3 01 00       	call   c002709b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 5b ca 01 00       	call   c0027718 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 17 d3 01 00       	call   c0027feb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 2b bc 01 00       	call   c0026a30 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 02 d3 01 00       	call   c002810f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 eb c8 01 00       	call   c0027718 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 d2 d2 01 00       	call   c002810f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 44 c2 01 00       	call   c002709b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 e4 99 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd661c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 78 d2 01 00       	call   c002810f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 61 c8 01 00       	call   c0027718 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 cc c1 01 00       	call   c002709b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 19 d2 01 00       	call   c002810f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 02 c8 01 00       	call   c0027718 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 6d c1 01 00       	call   c002709b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ba d1 01 00       	call   c002810f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 a3 c7 01 00       	call   c0027718 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 0e c1 01 00       	call   c002709b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 5b d1 01 00       	call   c002810f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 44 c7 01 00       	call   c0027718 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 af c0 01 00       	call   c002709b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 fc d0 01 00       	call   c002810f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 e5 c6 01 00       	call   c0027718 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 50 c0 01 00       	call   c002709b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 9d d0 01 00       	call   c002810f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 86 c6 01 00       	call   c0027718 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 f1 bf 01 00       	call   c002709b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 3e d0 01 00       	call   c002810f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 27 c6 01 00       	call   c0027718 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 92 bf 01 00       	call   c002709b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 df cf 01 00       	call   c002810f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 c8 c5 01 00       	call   c0027718 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 33 bf 01 00       	call   c002709b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 3d b8 01 00       	call   c0026a30 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 14 cf 01 00       	call   c002810f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 fd c4 01 00       	call   c0027718 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 e4 ce 01 00       	call   c002810f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 56 be 01 00       	call   c002709b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 00 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6600]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 89 ce 01 00       	call   c002810f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 72 c4 01 00       	call   c0027718 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 dd bd 01 00       	call   c002709b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 29 ce 01 00       	call   c002810f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 12 c4 01 00       	call   c0027718 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 7d bd 01 00       	call   c002709b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 c9 cd 01 00       	call   c002810f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 b2 c3 01 00       	call   c0027718 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 1d bd 01 00       	call   c002709b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 69 cd 01 00       	call   c002810f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 52 c3 01 00       	call   c0027718 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 bd bc 01 00       	call   c002709b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 09 cd 01 00       	call   c002810f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 f2 c2 01 00       	call   c0027718 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 5d bc 01 00       	call   c002709b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 a9 cc 01 00       	call   c002810f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 92 c2 01 00       	call   c0027718 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 fd bb 01 00       	call   c002709b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 49 cc 01 00       	call   c002810f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 32 c2 01 00       	call   c0027718 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 9d bb 01 00       	call   c002709b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 e9 cb 01 00       	call   c002810f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 d2 c1 01 00       	call   c0027718 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 3d bb 01 00       	call   c002709b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 1c 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65e4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 e2 ba 01 00       	call   c002709b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 3f c1 01 00       	call   c0027718 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 fb c9 01 00       	call   c0027feb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 85 ba 01 00       	call   c002709b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 e2 c0 01 00       	call   c0027718 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 9e c9 01 00       	call   c0027feb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 28 ba 01 00       	call   c002709b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 85 c0 01 00       	call   c0027718 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 41 c9 01 00       	call   c0027feb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 cb b9 01 00       	call   c002709b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 28 c0 01 00       	call   c0027718 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 e4 c8 01 00       	call   c0027feb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 6e b9 01 00       	call   c002709b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 cb bf 01 00       	call   c0027718 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 87 c8 01 00       	call   c0027feb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 11 b9 01 00       	call   c002709b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 6e bf 01 00       	call   c0027718 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 2a c8 01 00       	call   c0027feb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 b4 b8 01 00       	call   c002709b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 11 bf 01 00       	call   c0027718 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 cd c7 01 00       	call   c0027feb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 57 b8 01 00       	call   c002709b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 b4 be 01 00       	call   c0027718 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 70 c7 01 00       	call   c0027feb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 6c be 01 00       	call   c0027718 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 e4 c8 01 00       	jmp    c00281a0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 4e c5 01 00       	call   c0027fe7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 0c c5 01 00       	call   c0027fc9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 a3 c2 01 00       	call   c0027d7b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 a4 b5 01 00       	call   c002709b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 73 c2 01 00       	call   c0027d7b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 da be 01 00       	call   c00279fc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 79 c4 01 00       	call   c0027fc9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 7c c4 01 00       	call   c0027fe7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 4f c4 01 00       	call   c0027fe7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 48 be 01 00       	call   c00279fc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 d2 c5 01 00       	call   c00281a0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 ad c5 01 00       	call   c00281a0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 7f c1 01 00       	call   c0027d7b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 d6 ba 01 00       	call   c00276ec <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 b5 c3 01 00       	call   c0027fe7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 4e b4 01 00       	call   c002709b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 72 ba 01 00       	call   c00276ec <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 14 c5 01 00       	call   c00281a0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 4c bd 01 00       	call   c00279fc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 c9 b3 01 00       	call   c002709b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 f5 bf 01 00       	call   c0027d7b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 f5 b2 01 00       	call   c002709b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 d5 b2 01 00       	call   c002709b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 a5 bf 01 00       	call   c0027d7b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 f5 c1 01 00       	call   c0027fe5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 d4 b8 01 00       	call   c00276ec <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 56 c3 01 00       	call   c0028180 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 7d c1 01 00       	call   c0027fc9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 7b b8 01 00       	call   c00276ec <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 f9 be 01 00       	call   c0027d7b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 7c b8 01 00       	call   c0027718 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ce be 01 00       	call   c0027d7b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 35 bb 01 00       	call   c00279fc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 b4 b1 01 00       	call   c002709b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 7e be 01 00       	call   c0027d7b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ca c0 01 00       	call   c0027fe7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 bf b7 01 00       	call   c0027718 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 91 b7 01 00       	call   c0027718 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ca bd 01 00       	call   c0027d7b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 2e ba 01 00       	call   c00279fc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 f6 b9 01 00       	call   c00279fc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 75 b0 01 00       	call   c002709b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 62 c1 01 00       	call   c00281a0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 34 bd 01 00       	call   c0027d7b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 8b b6 01 00       	call   c00276ec <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 6a bf 01 00       	call   c0027fe7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 02 b0 01 00       	call   c002709b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 26 b6 01 00       	call   c00276ec <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 c8 c0 01 00       	call   c00281a0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 89 be 01 00       	call   c0027fe7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 47 be 01 00       	call   c0027fc9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 de bb 01 00       	call   c0027d7b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 df ae 01 00       	call   c002709b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 ae bb 01 00       	call   c0027d7b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 15 b8 01 00       	call   c00279fc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 b4 bd 01 00       	call   c0027fc9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 b7 bd 01 00       	call   c0027fe7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 8a bd 01 00       	call   c0027fe7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 83 b7 01 00       	call   c00279fc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 0d bf 01 00       	call   c00281a0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 e8 be 01 00       	call   c00281a0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ba ba 01 00       	call   c0027d7b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 11 b4 01 00       	call   c00276ec <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 f0 bc 01 00       	call   c0027fe7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 89 ad 01 00       	call   c002709b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 ad b3 01 00       	call   c00276ec <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 4f be 01 00       	call   c00281a0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 87 b6 01 00       	call   c00279fc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 04 ad 01 00       	call   c002709b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 2f b9 01 00       	call   c0027d7b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 2f ac 01 00       	call   c002709b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 0f ac 01 00       	call   c002709b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 df b8 01 00       	call   c0027d7b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 2f bb 01 00       	call   c0027fe5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 0d b2 01 00       	call   c00276ec <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 8f bc 01 00       	call   c0028180 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 b6 ba 01 00       	call   c0027fc9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 b3 b1 01 00       	call   c00276ec <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 31 b8 01 00       	call   c0027d7b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 b4 b1 01 00       	call   c0027718 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 06 b8 01 00       	call   c0027d7b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 6d b4 01 00       	call   c00279fc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 ec aa 01 00       	call   c002709b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 b6 b7 01 00       	call   c0027d7b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 02 ba 01 00       	call   c0027fe7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 f7 b0 01 00       	call   c0027718 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 c9 b0 01 00       	call   c0027718 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 00 b7 01 00       	call   c0027d7b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 64 b3 01 00       	call   c00279fc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 31 b3 01 00       	call   c00279fc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 b0 a9 01 00       	call   c002709b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 9d ba 01 00       	call   c00281a0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 6f b6 01 00       	call   c0027d7b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 c6 af 01 00       	call   c00276ec <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 a5 b8 01 00       	call   c0027fe7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 3d a9 01 00       	call   c002709b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 61 af 01 00       	call   c00276ec <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 03 ba 01 00       	call   c00281a0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 c4 b7 01 00       	call   c0027fe7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 82 b7 01 00       	call   c0027fc9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 19 b5 01 00       	call   c0027d7b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 1a a8 01 00       	call   c002709b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 e9 b4 01 00       	call   c0027d7b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 50 b1 01 00       	call   c00279fc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 ef b6 01 00       	call   c0027fc9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 f2 b6 01 00       	call   c0027fe7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 c5 b6 01 00       	call   c0027fe7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 be b0 01 00       	call   c00279fc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 48 b8 01 00       	call   c00281a0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 23 b8 01 00       	call   c00281a0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 f5 b3 01 00       	call   c0027d7b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 4c ad 01 00       	call   c00276ec <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 2b b6 01 00       	call   c0027fe7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 c4 a6 01 00       	call   c002709b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 e8 ac 01 00       	call   c00276ec <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 8a b7 01 00       	call   c00281a0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 c2 af 01 00       	call   c00279fc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 3f a6 01 00       	call   c002709b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 6a b2 01 00       	call   c0027d7b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 6a a5 01 00       	call   c002709b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 4a a5 01 00       	call   c002709b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 1a b2 01 00       	call   c0027d7b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 6a b4 01 00       	call   c0027fe5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 48 ab 01 00       	call   c00276ec <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ca b5 01 00       	call   c0028180 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 f1 b3 01 00       	call   c0027fc9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ee aa 01 00       	call   c00276ec <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 6c b1 01 00       	call   c0027d7b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 ef aa 01 00       	call   c0027718 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 41 b1 01 00       	call   c0027d7b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 a8 ad 01 00       	call   c00279fc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 27 a4 01 00       	call   c002709b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 f1 b0 01 00       	call   c0027d7b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 3d b3 01 00       	call   c0027fe7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 32 aa 01 00       	call   c0027718 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 04 aa 01 00       	call   c0027718 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 3b b0 01 00       	call   c0027d7b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 9f ac 01 00       	call   c00279fc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 6c ac 01 00       	call   c00279fc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 eb a2 01 00       	call   c002709b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 d8 b3 01 00       	call   c00281a0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 aa af 01 00       	call   c0027d7b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 01 a9 01 00       	call   c00276ec <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 e0 b1 01 00       	call   c0027fe7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 78 a2 01 00       	call   c002709b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 9c a8 01 00       	call   c00276ec <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 3e b3 01 00       	call   c00281a0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ff b0 01 00       	call   c0027fe7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 bd b0 01 00       	call   c0027fc9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 54 ae 01 00       	call   c0027d7b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 55 a1 01 00       	call   c002709b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 24 ae 01 00       	call   c0027d7b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 8b aa 01 00       	call   c00279fc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 2a b0 01 00       	call   c0027fc9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 2d b0 01 00       	call   c0027fe7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 00 b0 01 00       	call   c0027fe7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 f9 a9 01 00       	call   c00279fc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 83 b1 01 00       	call   c00281a0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 5e b1 01 00       	call   c00281a0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 30 ad 01 00       	call   c0027d7b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 87 a6 01 00       	call   c00276ec <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 66 af 01 00       	call   c0027fe7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ff 9f 01 00       	call   c002709b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 23 a6 01 00       	call   c00276ec <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 c5 b0 01 00       	call   c00281a0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 fd a8 01 00       	call   c00279fc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 7a 9f 01 00       	call   c002709b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 a5 ab 01 00       	call   c0027d7b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 a5 9e 01 00       	call   c002709b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 85 9e 01 00       	call   c002709b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 55 ab 01 00       	call   c0027d7b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 a5 ad 01 00       	call   c0027fe5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 83 a4 01 00       	call   c00276ec <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 05 af 01 00       	call   c0028180 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 2c ad 01 00       	call   c0027fc9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 29 a4 01 00       	call   c00276ec <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 a7 aa 01 00       	call   c0027d7b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 2a a4 01 00       	call   c0027718 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 7c aa 01 00       	call   c0027d7b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 e3 a6 01 00       	call   c00279fc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 62 9d 01 00       	call   c002709b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 2c aa 01 00       	call   c0027d7b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 78 ac 01 00       	call   c0027fe7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 6d a3 01 00       	call   c0027718 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 3f a3 01 00       	call   c0027718 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 76 a9 01 00       	call   c0027d7b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 da a5 01 00       	call   c00279fc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 a7 a5 01 00       	call   c00279fc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 26 9c 01 00       	call   c002709b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 13 ad 01 00       	call   c00281a0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 e5 a8 01 00       	call   c0027d7b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 3c a2 01 00       	call   c00276ec <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 1b ab 01 00       	call   c0027fe7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 b3 9b 01 00       	call   c002709b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 d7 a1 01 00       	call   c00276ec <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 79 ac 01 00       	call   c00281a0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 37 aa 01 00       	call   c0027fe7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 f5 a9 01 00       	call   c0027fc9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 8c a7 01 00       	call   c0027d7b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 8d 9a 01 00       	call   c002709b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 5c a7 01 00       	call   c0027d7b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 c3 a3 01 00       	call   c00279fc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 62 a9 01 00       	call   c0027fc9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 65 a9 01 00       	call   c0027fe7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 38 a9 01 00       	call   c0027fe7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 31 a3 01 00       	call   c00279fc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 bb aa 01 00       	call   c00281a0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 92 aa 01 00       	call   c00281a0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 64 a6 01 00       	call   c0027d7b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 bb 9f 01 00       	call   c00276ec <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 9a a8 01 00       	call   c0027fe7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 33 99 01 00       	call   c002709b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 5b 9f 01 00       	call   c00276ec <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 fd a9 01 00       	call   c00281a0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 36 a2 01 00       	call   c00279fc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 b3 98 01 00       	call   c002709b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 df a4 01 00       	call   c0027d7b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 df 97 01 00       	call   c002709b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 bf 97 01 00       	call   c002709b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 8f a4 01 00       	call   c0027d7b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 c3 a6 01 00       	call   c0027fc9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ba 9d 01 00       	call   c00276ec <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 3c a8 01 00       	call   c0028180 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 63 a6 01 00       	call   c0027fc9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 5d 9d 01 00       	call   c00276ec <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 db a3 01 00       	call   c0027d7b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 5e 9d 01 00       	call   c0027718 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 b0 a3 01 00       	call   c0027d7b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 17 a0 01 00       	call   c00279fc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 96 96 01 00       	call   c002709b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 60 a3 01 00       	call   c0027d7b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 ac a5 01 00       	call   c0027fe7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 a1 9c 01 00       	call   c0027718 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 73 9c 01 00       	call   c0027718 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 b7 a2 01 00       	call   c0027d7b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 1e 9f 01 00       	call   c00279fc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 07 9c 01 00       	call   c0027718 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 c3 a4 01 00       	call   c0027feb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 b6 9e 01 00       	call   c00279fc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 35 95 01 00       	call   c002709b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 22 a6 01 00       	call   c00281a0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 f4 a1 01 00       	call   c0027d7b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 4b 9b 01 00       	call   c00276ec <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 2a a4 01 00       	call   c0027fe7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 c2 94 01 00       	call   c002709b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ea 9a 01 00       	call   c00276ec <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 8c a5 01 00       	call   c00281a0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 44 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65bc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 38 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65c8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 35 19 00 00       	call   c000f5ac <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 3f a2 01 00       	call   c0027fe7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 fd a1 01 00       	call   c0027fc9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 e9 a1 01 00       	call   c0027fe7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 5b 9f 01 00       	call   c0027d7b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 d9 98 01 00       	call   c0027718 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 2b 9f 01 00       	call   c0027d7b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 31 92 01 00       	call   c002709b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 00 9f 01 00       	call   c0027d7b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 50 a1 01 00       	call   c0027fe5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 31 98 01 00       	call   c00276ec <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 b3 a2 01 00       	call   c0028180 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 da a0 01 00       	call   c0027fc9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 d9 97 01 00       	call   c00276ec <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 57 9e 01 00       	call   c0027d7b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 da 97 01 00       	call   c0027718 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 2c 9e 01 00       	call   c0027d7b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 93 9a 01 00       	call   c00279fc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 12 91 01 00       	call   c002709b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 3a 9a 01 00       	call   c00279fc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 c0 90 01 00       	call   c002709b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 ae a1 01 00       	call   c00281a0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 80 9d 01 00       	call   c0027d7b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 d7 96 01 00       	call   c00276ec <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 b6 9f 01 00       	call   c0027fe7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 4f 90 01 00       	call   c002709b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 7b 96 01 00       	call   c00276ec <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 1d a1 01 00       	call   c00281a0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ca 9c 01 00       	call   c0027d7b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 47 96 01 00       	call   c0027718 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 98 9c 01 00       	call   c0027d7b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 9e 8f 01 00       	call   c002709b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 6e 9c 01 00       	call   c0027d7b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 c2 9e 01 00       	call   c0027fe9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 9b 95 01 00       	call   c00276ec <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 1d a0 01 00       	call   c0028180 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 44 9e 01 00       	call   c0027fc9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 42 95 01 00       	call   c00276ec <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 c0 9b 01 00       	call   c0027d7b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 43 95 01 00       	call   c0027718 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 95 9b 01 00       	call   c0027d7b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 fc 97 01 00       	call   c00279fc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 7b 8e 01 00       	call   c002709b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 97 97 01 00       	call   c00279fc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 16 8e 01 00       	call   c002709b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 04 9f 01 00       	call   c00281a0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 d6 9a 01 00       	call   c0027d7b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 2d 94 01 00       	call   c00276ec <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 0c 9d 01 00       	call   c0027fe7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 a5 8d 01 00       	call   c002709b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 d1 93 01 00       	call   c00276ec <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 42 9a 01 00       	call   c0027d7b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 48 8d 01 00       	call   c002709b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 5e 9b 02 c0       	mov    eax,0xc0029b5e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 6f 9b 02 c0       	mov    eax,0xc0029b6f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 77 11 00 00       	call   c000f5ac <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 79 11 00 00       	call   c000f5cc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f3 10 00 00       	jmp    c000f59c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0e 11 00 00       	jmp    c000f5bc <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c000e4e3:	ff 05 a4 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d a0 0a 03 c0 00 	cmp    DWORD PTR ds:0xc0030aa0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c000e50d:	e8 bd f2 00 00       	call   c001d7cf <schedule()>
c000e512:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c000e517:	48                   	dec    eax
c000e518:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 f0 d6 02 c0       	mov    eax,ds:0xc002d6f0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 a6 9b 02 c0       	push   0xc0029ba6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 88 d5 02 c0       	mov    eax,0xc002d588
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 af 9b 02 c0       	push   0xc0029baf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 14 65 02 c0       	mov    eax,0xc0026514
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 b9 9b 02 c0       	push   0xc0029bb9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 48 62 02 c0       	mov    eax,0xc0026248
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 c2 9b 02 c0       	push   0xc0029bc2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 14 66 02 c0       	mov    eax,0xc0026614
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 cc 9b 02 c0       	push   0xc0029bcc
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 94 63 02 c0       	mov    eax,0xc0026394
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 d5 9b 02 c0       	push   0xc0029bd5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 8c d5 02 c0       	mov    eax,0xc002d58c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 e2 9b 02 c0       	push   0xc0029be2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 8d d5 02 c0       	mov    eax,0xc002d58d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 61 54 00 00       	call   c0013ace <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 ef 9b 02 c0       	push   0xc0029bef
c000e69e:	e8 53 0f 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ed 0e 00 00       	call   c000f59c <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c000e6be:	68 08 9c 02 c0       	push   0xc0029c08
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 e7 ec 00 00       	call   c001d3b2 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 ca ee 00 00       	call   c001d5aa <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 8e df 01 c0       	push   0xc001df8e
c000e6e9:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c000e6ef:	e8 b6 ee 00 00       	call   c001d5aa <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 88 0a 03 c0       	mov    ds:0xc0030a88,eax
c000e6fc:	68 ec 9c 02 c0       	push   0xc0029cec
c000e701:	c6 05 8d d5 02 c0 01 	mov    BYTE PTR ds:0xc002d58d,0x1
c000e708:	e8 e9 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 27 fc 00 00       	call   c001e339 <Vm::initialise8086()>
c000e712:	e8 7f 41 00 00       	call   c0012896 <Fs::initVFS()>
c000e717:	c7 04 24 15 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c15
c000e71e:	e8 d3 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e723:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ec 9c 02 c0       	push   0xc0029cec
c000e742:	e8 af 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e747:	e8 f3 d4 00 00       	call   c001bc3f <Sys::loadSyscalls()>
c000e74c:	e8 eb b3 00 00       	call   c0019b3c <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 2f 9c 02 c0       	push   0xc0029c2f
c000e75b:	68 38 9c 02 c0       	push   0xc0029c38
c000e760:	e8 9c c2 00 00       	call   c001aa01 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 19 4c 00 00       	call   c0013386 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 10 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d10
c000e774:	e8 7d 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 04 53 00 00       	call   c0013a8e <Device::loadDriversForAll()>
c000e78a:	c7 04 24 40 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c40
c000e791:	e8 60 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e796:	e8 09 af 00 00       	call   c00196a4 <Krnl::startCPUs()>
c000e79b:	c7 04 24 5a 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c5a
c000e7a2:	e8 4f 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 88 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d588
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 6b 9c 02 c0       	push   0xc0029c6b
c000e7b6:	e8 54 e6 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 76 e8 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 d4 f1 00 00       	call   c001d9a5 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 87 9c 02 c0       	push   0xc0029c87
c000e7e5:	50                   	push   eax
c000e7e6:	e8 5d 53 00 00       	call   c0013b48 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 5c 9d 02 c0       	mov    edx,0xc0029d5c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 a1 d5 02 c0 04 	test   BYTE PTR ds:0xc002d5a1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 57 78 01 00       	call   c00261d6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 7c 9c 00 00       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 55 9c 00 00       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 33 9c 00 00       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 11 9c 00 00       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 a0 d5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d5a0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 1f 9b 00 00       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 fa 9a 00 00       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 c1 76 01 00       	call   c0026190 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 7e 76 01 00       	call   c0026170 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 16 9b 00 00       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 90 9c 02 c0       	push   0xc0029c90
c000eb62:	e8 de b0 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 96 9c 02 c0       	push   0xc0029c96
c000eb9a:	e8 a6 b0 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 30 9d 02 c0       	push   0xc0029d30
c000ebf0:	e8 01 0a 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 a0 d5 02 c0 04 	test   BYTE PTR ds:0xc002d5a0,0x4
c000ec03:	0f 94 05 c0 c4 02 c0 	sete   BYTE PTR ds:0xc002c4c0
c000ec0a:	e8 8d 09 00 00       	call   c000f59c <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 91 8c 00 00       	call   c00178aa <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 1c 4d 00 00       	call   c0013944 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 40 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c40
c000ec41:	e8 b0 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 4a 09 00 00       	call   c000f59c <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 92 9a 00 00       	call   c00186ee <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 d9 4c 00 00       	call   c0013944 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 55 52 00 00       	call   c0013edc <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 a9 4c 00 00       	call   c0013944 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 9c 9c 02 c0       	push   0xc0029c9c
c000ecb8:	e8 39 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 03 ea 00 00       	call   c001d6cc <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 b7 9c 02 c0       	push   0xc0029cb7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 f4 37 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 c8 9c 02 c0       	push   0xc0029cc8
c000ed34:	e8 0c af 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 d5 9c 02 c0       	push   0xc0029cd5
c000ed49:	e8 f7 ae 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 df 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029cdf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 e0 ae 00 00       	jmp    c0019c45 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 92 d5 02 c0       	mov    ds:0xc002d592,eax
c000ee21:	66 89 15 90 d5 02 c0 	mov    WORD PTR ds:0xc002d590,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c000ef38:	48                   	dec    eax
c000ef39:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 88 d5 02 c0    	push   DWORD PTR ds:0xc002d588
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 91 92 01 00       	call   c0028220 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 88 92 01 00       	call   c0028220 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 98 d5 02 c0 ff 07 	mov    WORD PTR ds:0xc002d598,0x7ff
c000f085:	a3 9a d5 02 c0       	mov    ds:0xc002d59a,eax
c000f08a:	0f 01 1d 98 d5 02 c0 	lidtd  ds:0xc002d598
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 f0 d6 02 c0    	push   DWORD PTR ds:0xc002d6f0
c000f37c:	e8 df 26 00 00       	call   c0011a60 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0d 02 00 00       	call   c000f59c <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 49 17 00 00       	call   c0010ae8 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 7a 17 00 00       	call   c0010b28 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 88 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d588
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 54 c3 02 c0    	mov    ecx,DWORD PTR ds:0xc002c354
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 54 c3 02 c0       	mov    eax,ds:0xc002c354
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 80 9d 02 c0       	push   0xc0029d80
c000f455:	e8 b1 30 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 54 c3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c354,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d f0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f0
c000f481:	8b 2d 54 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c354
c000f487:	e8 b4 04 00 00       	call   c000f940 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 c5 24 00 00       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 54 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c354
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 b0 9d 02 c0       	push   0xc0029db0
c000f50d:	e8 33 a7 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 b5 9d 02 c0       	push   0xc0029db5
c000f523:	e8 1d a7 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c000f543:	48                   	dec    eax
c000f544:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	68 01 08 00 00       	push   0x801
c000f55a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55e:	ff 35 f0 d6 02 c0    	push   DWORD PTR ds:0xc002d6f0
c000f564:	e8 f7 24 00 00       	call   c0011a60 <VAS::allocatePages(int, int)>
c000f569:	83 c4 1c             	add    esp,0x1c
c000f56c:	c3                   	ret    

c000f56d <liballoc_free(void*, int)>:
c000f56d:	83 ec 14             	sub    esp,0x14
c000f570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f574:	ff 35 f0 d6 02 c0    	push   DWORD PTR ds:0xc002d6f0
c000f57a:	e8 8b 21 00 00       	call   c001170a <VAS::freeAllocatedPages(unsigned long)>
c000f57f:	b8 00 00 00 00       	mov    eax,0x0
c000f584:	83 c4 1c             	add    esp,0x1c
c000f587:	c3                   	ret    

c000f588 <realloc>:
c000f588:	83 ec 14             	sub    esp,0x14
c000f58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f593:	e8 94 20 ff ff       	call   c000162c <dlrealloc>
c000f598:	83 c4 1c             	add    esp,0x1c
c000f59b:	c3                   	ret    

c000f59c <malloc>:
c000f59c:	83 ec 18             	sub    esp,0x18
c000f59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a3:	e8 47 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a8:	83 c4 1c             	add    esp,0x1c
c000f5ab:	c3                   	ret    

c000f5ac <free>:
c000f5ac:	83 ec 18             	sub    esp,0x18
c000f5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b3:	e8 dc 17 ff ff       	call   c0000d94 <dlfree>
c000f5b8:	83 c4 1c             	add    esp,0x1c
c000f5bb:	c3                   	ret    

c000f5bc <rfree>:
c000f5bc:	83 ec 18             	sub    esp,0x18
c000f5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c3:	e8 cc 17 ff ff       	call   c0000d94 <dlfree>
c000f5c8:	83 c4 1c             	add    esp,0x1c
c000f5cb:	c3                   	ret    

c000f5cc <calloc>:
c000f5cc:	56                   	push   esi
c000f5cd:	53                   	push   ebx
c000f5ce:	83 ec 10             	sub    esp,0x10
c000f5d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5da:	53                   	push   ebx
c000f5db:	e8 bc ff ff ff       	call   c000f59c <malloc>
c000f5e0:	89 c6                	mov    esi,eax
c000f5e2:	83 c4 0c             	add    esp,0xc
c000f5e5:	53                   	push   ebx
c000f5e6:	6a 00                	push   0x0
c000f5e8:	50                   	push   eax
c000f5e9:	e8 62 11 ff ff       	call   c0000750 <memset>
c000f5ee:	89 f0                	mov    eax,esi
c000f5f0:	83 c4 14             	add    esp,0x14
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    

c000f5f6 <Krnl::setBootMessage(char const*)>:
c000f5f6:	57                   	push   edi
c000f5f7:	56                   	push   esi
c000f5f8:	53                   	push   ebx
c000f5f9:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5ff:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f606:	68 9e 00 00 00       	push   0x9e
c000f60b:	6a 00                	push   0x0
c000f60d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f611:	56                   	push   esi
c000f612:	e8 39 11 ff ff       	call   c0000750 <memset>
c000f617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f61a:	e8 4d 11 ff ff       	call   c000076c <strlen>
c000f61f:	ba 50 00 00 00       	mov    edx,0x50
c000f624:	83 c4 10             	add    esp,0x10
c000f627:	29 c2                	sub    edx,eax
c000f629:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62d:	d1 ea                	shr    edx,1
c000f62f:	84 c0                	test   al,al
c000f631:	74 19                	je     c000f64c <Krnl::setBootMessage(char const*)+0x56>
c000f633:	01 d2                	add    edx,edx
c000f635:	43                   	inc    ebx
c000f636:	01 f2                	add    edx,esi
c000f638:	80 cc 0f             	or     ah,0xf
c000f63b:	83 c2 02             	add    edx,0x2
c000f63e:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f642:	43                   	inc    ebx
c000f643:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f648:	84 c0                	test   al,al
c000f64a:	75 ec                	jne    c000f638 <Krnl::setBootMessage(char const*)+0x42>
c000f64c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f651:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f656:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f658:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65e:	5b                   	pop    ebx
c000f65f:	5e                   	pop    esi
c000f660:	5f                   	pop    edi
c000f661:	c3                   	ret    

c000f662 <kernel_main>:
c000f662:	57                   	push   edi
c000f663:	bf f9 03 00 00       	mov    edi,0x3f9
c000f668:	56                   	push   esi
c000f669:	89 fa                	mov    edx,edi
c000f66b:	53                   	push   ebx
c000f66c:	31 f6                	xor    esi,esi
c000f66e:	83 ec 2c             	sub    esp,0x2c
c000f671:	89 f0                	mov    eax,esi
c000f673:	ee                   	out    dx,al
c000f674:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f679:	b0 80                	mov    al,0x80
c000f67b:	89 da                	mov    edx,ebx
c000f67d:	ee                   	out    dx,al
c000f67e:	b1 03                	mov    cl,0x3
c000f680:	ba f8 03 00 00       	mov    edx,0x3f8
c000f685:	88 c8                	mov    al,cl
c000f687:	ee                   	out    dx,al
c000f688:	89 f0                	mov    eax,esi
c000f68a:	89 fa                	mov    edx,edi
c000f68c:	ee                   	out    dx,al
c000f68d:	88 c8                	mov    al,cl
c000f68f:	89 da                	mov    edx,ebx
c000f691:	ee                   	out    dx,al
c000f692:	b0 c7                	mov    al,0xc7
c000f694:	ba fa 03 00 00       	mov    edx,0x3fa
c000f699:	ee                   	out    dx,al
c000f69a:	b0 0b                	mov    al,0xb
c000f69c:	ba fc 03 00 00       	mov    edx,0x3fc
c000f6a1:	ee                   	out    dx,al
c000f6a2:	68 bc 9d 02 c0       	push   0xc0029dbc
c000f6a7:	e8 5f 2e 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000f6ac:	e8 39 09 00 00       	call   c000ffea <installVgaTextImplementation()>
c000f6b1:	0f b6 05 60 c3 02 c0 	movzx  eax,BYTE PTR ds:0xc002c360
c000f6b8:	83 c4 10             	add    esp,0x10
c000f6bb:	84 c0                	test   al,al
c000f6bd:	74 6c                	je     c000f72b <kernel_main+0xc9>
c000f6bf:	31 db                	xor    ebx,ebx
c000f6c1:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c6:	be 05 00 00 00       	mov    esi,0x5
c000f6cb:	31 c9                	xor    ecx,ecx
c000f6cd:	eb 2a                	jmp    c000f6f9 <kernel_main+0x97>
c000f6cf:	3c 0d                	cmp    al,0xd
c000f6d1:	74 1a                	je     c000f6ed <kernel_main+0x8b>
c000f6d3:	3c 0a                	cmp    al,0xa
c000f6d5:	74 40                	je     c000f717 <kernel_main+0xb5>
c000f6d7:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6da:	80 cc 0e             	or     ah,0xe
c000f6dd:	c1 e2 04             	shl    edx,0x4
c000f6e0:	01 ca                	add    edx,ecx
c000f6e2:	41                   	inc    ecx
c000f6e3:	01 fa                	add    edx,edi
c000f6e5:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ed:	43                   	inc    ebx
c000f6ee:	0f b6 83 60 c3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3ca0]
c000f6f5:	84 c0                	test   al,al
c000f6f7:	74 32                	je     c000f72b <kernel_main+0xc9>
c000f6f9:	80 b9 96 c3 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd3c6a],0xdb
c000f700:	75 cd                	jne    c000f6cf <kernel_main+0x6d>
c000f702:	0f b6 91 95 c3 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd3c6b]
c000f709:	83 e2 fe             	and    edx,0xfffffffe
c000f70c:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f712:	75 bb                	jne    c000f6cf <kernel_main+0x6d>
c000f714:	47                   	inc    edi
c000f715:	eb b8                	jmp    c000f6cf <kernel_main+0x6d>
c000f717:	43                   	inc    ebx
c000f718:	46                   	inc    esi
c000f719:	31 c9                	xor    ecx,ecx
c000f71b:	0f b6 83 60 c3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3ca0]
c000f722:	bf 0a 00 00 00       	mov    edi,0xa
c000f727:	84 c0                	test   al,al
c000f729:	75 ce                	jne    c000f6f9 <kernel_main+0x97>
c000f72b:	83 ec 0c             	sub    esp,0xc
c000f72e:	68 d4 9d 02 c0       	push   0xc0029dd4
c000f733:	e8 be fe ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000f738:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73d:	a3 a0 d5 02 c0       	mov    ds:0xc002d5a0,eax
c000f742:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f747:	05 ff 0f 00 00       	add    eax,0xfff
c000f74c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f751:	89 04 24             	mov    DWORD PTR [esp],eax
c000f754:	e8 24 03 00 00       	call   c000fa7d <Phys::physicalMemorySetup(unsigned int)>
c000f759:	e8 02 1c 00 00       	call   c0011360 <Virt::virtualMemorySetup()>
c000f75e:	58                   	pop    eax
c000f75f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f763:	53                   	push   ebx
c000f764:	e8 c9 1d 00 00       	call   c0011532 <VAS::VAS()>
c000f769:	89 1d f0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f0,ebx
c000f76f:	e8 ac 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f774:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f77b:	e8 1c fe ff ff       	call   c000f59c <malloc>
c000f780:	89 04 24             	mov    DWORD PTR [esp],eax
c000f783:	89 c6                	mov    esi,eax
c000f785:	e8 4c f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f78a:	6a 00                	push   0x0
c000f78c:	89 35 88 d5 02 c0    	mov    DWORD PTR ds:0xc002d588,esi
c000f792:	6a 00                	push   0x0
c000f794:	6a 00                	push   0x0
c000f796:	56                   	push   esi
c000f797:	e8 46 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f79c:	83 c4 14             	add    esp,0x14
c000f79f:	53                   	push   ebx
c000f7a0:	e8 3d 20 00 00       	call   c00117e2 <VAS::~VAS()>
c000f7a5:	83 c4 30             	add    esp,0x30
c000f7a8:	5b                   	pop    ebx
c000f7a9:	5e                   	pop    esi
c000f7aa:	5f                   	pop    edi
c000f7ab:	c3                   	ret    

c000f7ac <Phys::allocateDMA(unsigned long)>:
c000f7ac:	55                   	push   ebp
c000f7ad:	31 d2                	xor    edx,edx
c000f7af:	57                   	push   edi
c000f7b0:	31 ed                	xor    ebp,ebp
c000f7b2:	56                   	push   esi
c000f7b3:	31 c9                	xor    ecx,ecx
c000f7b5:	53                   	push   ebx
c000f7b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ba:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c0:	31 c0                	xor    eax,eax
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x23>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d0                	mov    eax,edx
c000f7cf:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7d2:	39 de                	cmp    esi,ebx
c000f7d4:	74 20                	je     c000f7f6 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 d9                	mov    ecx,ebx
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x43>
c000f7de:	80 ba e0 d5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2a20],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1b>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7ef:	5b                   	pop    ebx
c000f7f0:	31 c0                	xor    eax,eax
c000f7f2:	5e                   	pop    esi
c000f7f3:	5f                   	pop    edi
c000f7f4:	5d                   	pop    ebp
c000f7f5:	c3                   	ret    
c000f7f6:	8d 14 30             	lea    edx,[eax+esi*1]
c000f7f9:	89 d7                	mov    edi,edx
c000f7fb:	4f                   	dec    edi
c000f7fc:	79 03                	jns    c000f801 <Phys::allocateDMA(unsigned long)+0x55>
c000f7fe:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f801:	c1 ff 04             	sar    edi,0x4
c000f804:	89 c2                	mov    edx,eax
c000f806:	c1 fa 04             	sar    edx,0x4
c000f809:	39 fa                	cmp    edx,edi
c000f80b:	75 2f                	jne    c000f83c <Phys::allocateDMA(unsigned long)+0x90>
c000f80d:	85 db                	test   ebx,ebx
c000f80f:	74 1a                	je     c000f82b <Phys::allocateDMA(unsigned long)+0x7f>
c000f811:	be e0 d5 02 c0       	mov    esi,0xc002d5e0
c000f816:	8d 90 e0 d5 02 c0    	lea    edx,[eax-0x3ffd2a20]
c000f81c:	f7 d6                	not    esi
c000f81e:	29 c6                	sub    esi,eax
c000f820:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f823:	42                   	inc    edx
c000f824:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f827:	39 d9                	cmp    ecx,ebx
c000f829:	7f f5                	jg     c000f820 <Phys::allocateDMA(unsigned long)+0x74>
c000f82b:	85 ff                	test   edi,edi
c000f82d:	74 13                	je     c000f842 <Phys::allocateDMA(unsigned long)+0x96>
c000f82f:	5b                   	pop    ebx
c000f830:	05 50 20 0c 00       	add    eax,0xc2050
c000f835:	5e                   	pop    esi
c000f836:	c1 e0 0c             	shl    eax,0xc
c000f839:	5f                   	pop    edi
c000f83a:	5d                   	pop    ebp
c000f83b:	c3                   	ret    
c000f83c:	89 ea                	mov    edx,ebp
c000f83e:	31 c9                	xor    ecx,ecx
c000f840:	eb a7                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x3d>
c000f842:	5b                   	pop    ebx
c000f843:	c1 e0 0c             	shl    eax,0xc
c000f846:	5e                   	pop    esi
c000f847:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f84c:	5f                   	pop    edi
c000f84d:	5d                   	pop    ebp
c000f84e:	c3                   	ret    

c000f84f <Phys::freeDMA(unsigned long, unsigned long)>:
c000f84f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f853:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f857:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f85d:	c1 e9 0c             	shr    ecx,0xc
c000f860:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f865:	76 25                	jbe    c000f88c <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f867:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f86c:	c1 e8 0c             	shr    eax,0xc
c000f86f:	8d 50 10             	lea    edx,[eax+0x10]
c000f872:	85 c9                	test   ecx,ecx
c000f874:	74 15                	je     c000f88b <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f876:	8d 82 e0 d5 02 c0    	lea    eax,[edx-0x3ffd2a20]
c000f87c:	8d 94 11 e0 d5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2a20]
c000f883:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f886:	40                   	inc    eax
c000f887:	39 d0                	cmp    eax,edx
c000f889:	75 f8                	jne    c000f883 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f88b:	c3                   	ret    
c000f88c:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f892:	c1 ea 0c             	shr    edx,0xc
c000f895:	eb db                	jmp    c000f872 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f897 <Phys::setPageState(unsigned long, bool)>:
c000f897:	56                   	push   esi
c000f898:	ba 01 00 00 00       	mov    edx,0x1
c000f89d:	53                   	push   ebx
c000f89e:	8b 35 a4 c4 02 c0    	mov    esi,DWORD PTR ds:0xc002c4a4
c000f8a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8ac:	89 c8                	mov    eax,ecx
c000f8ae:	83 e1 07             	and    ecx,0x7
c000f8b1:	c1 e8 03             	shr    eax,0x3
c000f8b4:	d3 e3                	shl    ebx,cl
c000f8b6:	01 c6                	add    esi,eax
c000f8b8:	d3 e2                	shl    edx,cl
c000f8ba:	f7 d2                	not    edx
c000f8bc:	20 16                	and    BYTE PTR [esi],dl
c000f8be:	03 05 a4 c4 02 c0    	add    eax,DWORD PTR ds:0xc002c4a4
c000f8c4:	08 18                	or     BYTE PTR [eax],bl
c000f8c6:	5b                   	pop    ebx
c000f8c7:	5e                   	pop    esi
c000f8c8:	c3                   	ret    

c000f8c9 <Phys::getPageState(unsigned long)>:
c000f8c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8cd:	8b 15 a4 c4 02 c0    	mov    edx,DWORD PTR ds:0xc002c4a4
c000f8d3:	89 c8                	mov    eax,ecx
c000f8d5:	83 e1 07             	and    ecx,0x7
c000f8d8:	c1 e8 03             	shr    eax,0x3
c000f8db:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8df:	d3 f8                	sar    eax,cl
c000f8e1:	83 e0 01             	and    eax,0x1
c000f8e4:	c3                   	ret    

c000f8e5 <Phys::freePage(unsigned long)>:
c000f8e5:	53                   	push   ebx
c000f8e6:	83 ec 08             	sub    esp,0x8
c000f8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ed:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f8f2:	76 3a                	jbe    c000f92e <Phys::freePage(unsigned long)+0x49>
c000f8f4:	c1 e8 0c             	shr    eax,0xc
c000f8f7:	50                   	push   eax
c000f8f8:	89 c3                	mov    ebx,eax
c000f8fa:	e8 ca ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f8ff:	5a                   	pop    edx
c000f900:	84 c0                	test   al,al
c000f902:	74 19                	je     c000f91d <Phys::freePage(unsigned long)+0x38>
c000f904:	83 ec 08             	sub    esp,0x8
c000f907:	ff 0d d0 d5 02 c0    	dec    DWORD PTR ds:0xc002d5d0
c000f90d:	6a 00                	push   0x0
c000f90f:	53                   	push   ebx
c000f910:	e8 82 ff ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	83 c4 08             	add    esp,0x8
c000f91b:	5b                   	pop    ebx
c000f91c:	c3                   	ret    
c000f91d:	c7 44 24 10 f3 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029df3
c000f925:	83 c4 08             	add    esp,0x8
c000f928:	5b                   	pop    ebx
c000f929:	e9 17 a3 00 00       	jmp    c0019c45 <Krnl::panic(char const*)>
c000f92e:	68 00 10 00 00       	push   0x1000
c000f933:	50                   	push   eax
c000f934:	e8 16 ff ff ff       	call   c000f84f <Phys::freeDMA(unsigned long, unsigned long)>
c000f939:	59                   	pop    ecx
c000f93a:	5b                   	pop    ebx
c000f93b:	83 c4 08             	add    esp,0x8
c000f93e:	5b                   	pop    ebx
c000f93f:	c3                   	ret    

c000f940 <Phys::allocatePage()>:
c000f940:	56                   	push   esi
c000f941:	53                   	push   ebx
c000f942:	51                   	push   ecx
c000f943:	8b 35 c4 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5c4
c000f949:	89 f3                	mov    ebx,esi
c000f94b:	eb 0a                	jmp    c000f957 <Phys::allocatePage()+0x17>
c000f94d:	89 1d c4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5c4,ebx
c000f953:	39 de                	cmp    esi,ebx
c000f955:	74 24                	je     c000f97b <Phys::allocatePage()+0x3b>
c000f957:	53                   	push   ebx
c000f958:	e8 6c ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f95d:	5a                   	pop    edx
c000f95e:	84 c0                	test   al,al
c000f960:	74 6b                	je     c000f9cd <Phys::allocatePage()+0x8d>
c000f962:	43                   	inc    ebx
c000f963:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f969:	75 e2                	jne    c000f94d <Phys::allocatePage()+0xd>
c000f96b:	31 db                	xor    ebx,ebx
c000f96d:	c7 05 c4 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d5c4,0x0
c000f977:	39 de                	cmp    esi,ebx
c000f979:	75 dc                	jne    c000f957 <Phys::allocatePage()+0x17>
c000f97b:	83 ec 0c             	sub    esp,0xc
c000f97e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f983:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f986:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f98c:	e8 b7 28 00 00       	call   c0012248 <VAS::scanForEviction()>
c000f991:	83 c4 10             	add    esp,0x10
c000f994:	85 c0                	test   eax,eax
c000f996:	75 4d                	jne    c000f9e5 <Phys::allocatePage()+0xa5>
c000f998:	83 ec 0c             	sub    esp,0xc
c000f99b:	68 00 10 00 00       	push   0x1000
c000f9a0:	e8 07 fe ff ff       	call   c000f7ac <Phys::allocateDMA(unsigned long)>
c000f9a5:	83 c4 10             	add    esp,0x10
c000f9a8:	85 c0                	test   eax,eax
c000f9aa:	75 39                	jne    c000f9e5 <Phys::allocatePage()+0xa5>
c000f9ac:	83 ec 0c             	sub    esp,0xc
c000f9af:	68 09 9e 02 c0       	push   0xc0029e09
c000f9b4:	e8 8c a2 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 1d c4 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5c4
c000f9c2:	53                   	push   ebx
c000f9c3:	e8 01 ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f9c8:	5a                   	pop    edx
c000f9c9:	84 c0                	test   al,al
c000f9cb:	75 95                	jne    c000f962 <Phys::allocatePage()+0x22>
c000f9cd:	6a 01                	push   0x1
c000f9cf:	53                   	push   ebx
c000f9d0:	e8 c2 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f9d5:	a1 c4 d5 02 c0       	mov    eax,ds:0xc002d5c4
c000f9da:	59                   	pop    ecx
c000f9db:	ff 05 d0 d5 02 c0    	inc    DWORD PTR ds:0xc002d5d0
c000f9e1:	c1 e0 0c             	shl    eax,0xc
c000f9e4:	5b                   	pop    ebx
c000f9e5:	5a                   	pop    edx
c000f9e6:	5b                   	pop    ebx
c000f9e7:	5e                   	pop    esi
c000f9e8:	c3                   	ret    

c000f9e9 <Phys::allocateContiguousPages(int)>:
c000f9e9:	57                   	push   edi
c000f9ea:	56                   	push   esi
c000f9eb:	53                   	push   ebx
c000f9ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f9f0:	fa                   	cli    
c000f9f1:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c000f9f7:	31 db                	xor    ebx,ebx
c000f9f9:	85 db                	test   ebx,ebx
c000f9fb:	75 11                	jne    c000fa0e <Phys::allocateContiguousPages(int)+0x25>
c000f9fd:	e8 3e ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa02:	83 fe 01             	cmp    esi,0x1
c000fa05:	89 c7                	mov    edi,eax
c000fa07:	74 21                	je     c000fa2a <Phys::allocateContiguousPages(int)+0x41>
c000fa09:	bb 01 00 00 00       	mov    ebx,0x1
c000fa0e:	e8 2d ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa13:	89 da                	mov    edx,ebx
c000fa15:	c1 e2 0c             	shl    edx,0xc
c000fa18:	01 fa                	add    edx,edi
c000fa1a:	39 c2                	cmp    edx,eax
c000fa1c:	74 20                	je     c000fa3e <Phys::allocateContiguousPages(int)+0x55>
c000fa1e:	bb 01 00 00 00       	mov    ebx,0x1
c000fa23:	89 c7                	mov    edi,eax
c000fa25:	83 fe 01             	cmp    esi,0x1
c000fa28:	75 e4                	jne    c000fa0e <Phys::allocateContiguousPages(int)+0x25>
c000fa2a:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c000fa2f:	48                   	dec    eax
c000fa30:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c000fa35:	75 01                	jne    c000fa38 <Phys::allocateContiguousPages(int)+0x4f>
c000fa37:	fb                   	sti    
c000fa38:	89 f8                	mov    eax,edi
c000fa3a:	5b                   	pop    ebx
c000fa3b:	5e                   	pop    esi
c000fa3c:	5f                   	pop    edi
c000fa3d:	c3                   	ret    
c000fa3e:	43                   	inc    ebx
c000fa3f:	39 f3                	cmp    ebx,esi
c000fa41:	75 b6                	jne    c000f9f9 <Phys::allocateContiguousPages(int)+0x10>
c000fa43:	eb e5                	jmp    c000fa2a <Phys::allocateContiguousPages(int)+0x41>

c000fa45 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa45:	56                   	push   esi
c000fa46:	53                   	push   ebx
c000fa47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa4b:	39 1d c8 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5c8,ebx
c000fa51:	73 06                	jae    c000fa59 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa53:	89 1d c8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5c8,ebx
c000fa59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa5d:	c1 eb 0c             	shr    ebx,0xc
c000fa60:	c1 e8 0c             	shr    eax,0xc
c000fa63:	39 d8                	cmp    eax,ebx
c000fa65:	73 13                	jae    c000fa7a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa67:	6a 00                	push   0x0
c000fa69:	8d 70 01             	lea    esi,[eax+0x1]
c000fa6c:	50                   	push   eax
c000fa6d:	e8 25 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fa72:	5a                   	pop    edx
c000fa73:	89 f0                	mov    eax,esi
c000fa75:	59                   	pop    ecx
c000fa76:	39 f3                	cmp    ebx,esi
c000fa78:	75 ed                	jne    c000fa67 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fa7a:	5b                   	pop    ebx
c000fa7b:	5e                   	pop    esi
c000fa7c:	c3                   	ret    

c000fa7d <Phys::physicalMemorySetup(unsigned int)>:
c000fa7d:	55                   	push   ebp
c000fa7e:	57                   	push   edi
c000fa7f:	56                   	push   esi
c000fa80:	53                   	push   ebx
c000fa81:	31 db                	xor    ebx,ebx
c000fa83:	83 ec 40             	sub    esp,0x40
c000fa86:	6a 30                	push   0x30
c000fa88:	6a 00                	push   0x0
c000fa8a:	68 e0 d5 02 c0       	push   0xc002d5e0
c000fa8f:	e8 bc 0c ff ff       	call   c0000750 <memset>
c000fa94:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fa98:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa9d:	05 00 10 00 00       	add    eax,0x1000
c000faa2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000faa6:	5a                   	pop    edx
c000faa7:	59                   	pop    ecx
c000faa8:	50                   	push   eax
c000faa9:	68 17 9e 02 c0       	push   0xc0029e17
c000faae:	e8 58 2a 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000fab3:	83 c4 10             	add    esp,0x10
c000fab6:	83 ec 08             	sub    esp,0x8
c000fab9:	6a 01                	push   0x1
c000fabb:	53                   	push   ebx
c000fabc:	43                   	inc    ebx
c000fabd:	e8 d5 fd ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fac2:	83 c4 10             	add    esp,0x10
c000fac5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000facb:	75 e9                	jne    c000fab6 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000facd:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fad4:	66 85 c0             	test   ax,ax
c000fad7:	0f 84 b5 01 00 00    	je     c000fc92 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fadd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fae1:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fae7:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000faec:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000faf2:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000faf8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fafc:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb00:	01 c1                	add    ecx,eax
c000fb02:	11 d3                	adc    ebx,edx
c000fb04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb08:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb0c:	31 ff                	xor    edi,edi
c000fb0e:	89 d3                	mov    ebx,edx
c000fb10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb14:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb1a:	09 cb                	or     ebx,ecx
c000fb1c:	0f 85 80 01 00 00    	jne    c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb22:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb2e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb33:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb37:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb3f:	eb 49                	jmp    c000fb8a <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fb41:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb45:	83 c3 18             	add    ebx,0x18
c000fb48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb50:	39 d0                	cmp    eax,edx
c000fb52:	0f 84 4a 01 00 00    	je     c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb58:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fb5b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fb5e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fb61:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb63:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb67:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fb6b:	01 c6                	add    esi,eax
c000fb6d:	89 d5                	mov    ebp,edx
c000fb6f:	11 d7                	adc    edi,edx
c000fb71:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb75:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fb79:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fb7c:	31 ff                	xor    edi,edi
c000fb7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb82:	09 cd                	or     ebp,ecx
c000fb84:	0f 85 18 01 00 00    	jne    c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb8a:	89 f1                	mov    ecx,esi
c000fb8c:	83 f1 01             	xor    ecx,0x1
c000fb8f:	09 f9                	or     ecx,edi
c000fb91:	75 ae                	jne    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fb93:	be 00 00 08 00       	mov    esi,0x80000
c000fb98:	89 cf                	mov    edi,ecx
c000fb9a:	39 c6                	cmp    esi,eax
c000fb9c:	19 d7                	sbb    edi,edx
c000fb9e:	0f 82 98 00 00 00    	jb     c000fc3c <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fba4:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fba8:	89 cd                	mov    ebp,ecx
c000fbaa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbb2:	19 fd                	sbb    ebp,edi
c000fbb4:	0f 83 82 00 00 00    	jae    c000fc3c <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbba:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fbbf:	39 f0                	cmp    eax,esi
c000fbc1:	19 f9                	sbb    ecx,edi
c000fbc3:	0f 82 03 01 00 00    	jb     c000fccc <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fbc9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbd2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbd6:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fbdc:	83 d7 ff             	adc    edi,0xffffffff
c000fbdf:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fbe3:	31 c0                	xor    eax,eax
c000fbe5:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fbe9:	39 f2                	cmp    edx,esi
c000fbeb:	89 c2                	mov    edx,eax
c000fbed:	19 fa                	sbb    edx,edi
c000fbef:	0f 83 4c ff ff ff    	jae    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbf5:	b8 00 00 08 00       	mov    eax,0x80000
c000fbfa:	83 ec 08             	sub    esp,0x8
c000fbfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc01:	50                   	push   eax
c000fc02:	e8 3e fe ff ff       	call   c000fa45 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc07:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc0f:	83 c4 0c             	add    esp,0xc
c000fc12:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc16:	03 05 d4 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5d4
c000fc1c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc23:	a3 d4 d5 02 c0       	mov    ds:0xc002d5d4,eax
c000fc28:	52                   	push   edx
c000fc29:	50                   	push   eax
c000fc2a:	68 3d 9e 02 c0       	push   0xc0029e3d
c000fc2f:	e8 d7 28 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000fc34:	83 c4 10             	add    esp,0x10
c000fc37:	e9 05 ff ff ff       	jmp    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc3c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc40:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc44:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc48:	39 ee                	cmp    esi,ebp
c000fc4a:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fc4e:	0f 82 ed fe ff ff    	jb     c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc54:	be ff 1f 00 00       	mov    esi,0x1fff
c000fc59:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fc5d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fc61:	0f 83 da fe ff ff    	jae    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc67:	39 e8                	cmp    eax,ebp
c000fc69:	89 d1                	mov    ecx,edx
c000fc6b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc6f:	73 89                	jae    c000fbfa <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc79:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fc7d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fc81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc89:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc8d:	e9 68 ff ff ff       	jmp    c000fbfa <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc92:	83 ec 0c             	sub    esp,0xc
c000fc95:	68 2f 9e 02 c0       	push   0xc0029e2f
c000fc9a:	e8 a6 9f 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000fc9f:	83 c4 10             	add    esp,0x10
c000fca2:	bb 40 01 00 00       	mov    ebx,0x140
c000fca7:	83 ec 08             	sub    esp,0x8
c000fcaa:	6a 00                	push   0x0
c000fcac:	53                   	push   ebx
c000fcad:	43                   	inc    ebx
c000fcae:	e8 e4 fb ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fcb3:	ff 05 d4 d5 02 c0    	inc    DWORD PTR ds:0xc002d5d4
c000fcb9:	83 c4 10             	add    esp,0x10
c000fcbc:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fcc2:	75 e3                	jne    c000fca7 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fcc4:	83 c4 3c             	add    esp,0x3c
c000fcc7:	5b                   	pop    ebx
c000fcc8:	5e                   	pop    esi
c000fcc9:	5f                   	pop    edi
c000fcca:	5d                   	pop    ebp
c000fccb:	c3                   	ret    
c000fccc:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fcd4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fcdc:	e9 e8 fe ff ff       	jmp    c000fbc9 <Phys::physicalMemorySetup(unsigned int)+0x14c>
c000fce1:	90                   	nop

c000fce2 <Pipe::isAtty()>:
c000fce2:	31 c0                	xor    eax,eax
c000fce4:	c3                   	ret    
c000fce5:	90                   	nop

c000fce6 <Pipe::~Pipe()>:
c000fce6:	83 ec 0c             	sub    esp,0xc
c000fce9:	ba 9c 9e 02 c0       	mov    edx,0xc0029e9c
c000fcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf2:	89 10                	mov    DWORD PTR [eax],edx
c000fcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf8:	83 ec 0c             	sub    esp,0xc
c000fcfb:	50                   	push   eax
c000fcfc:	e8 3f 12 00 00       	call   c0010f40 <UnixFile::~UnixFile()>
c000fd01:	83 c4 10             	add    esp,0x10
c000fd04:	90                   	nop
c000fd05:	83 c4 0c             	add    esp,0xc
c000fd08:	c3                   	ret    
c000fd09:	90                   	nop

c000fd0a <Pipe::~Pipe()>:
c000fd0a:	83 ec 0c             	sub    esp,0xc
c000fd0d:	83 ec 0c             	sub    esp,0xc
c000fd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd14:	e8 cd ff ff ff       	call   c000fce6 <Pipe::~Pipe()>
c000fd19:	83 c4 10             	add    esp,0x10
c000fd1c:	83 ec 08             	sub    esp,0x8
c000fd1f:	6a 20                	push   0x20
c000fd21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd25:	e8 09 27 00 00       	call   c0012433 <operator delete(void*, unsigned long)>
c000fd2a:	83 c4 10             	add    esp,0x10
c000fd2d:	83 c4 0c             	add    esp,0xc
c000fd30:	c3                   	ret    
c000fd31:	90                   	nop

c000fd32 <Pipe::read(unsigned long long, void*, int*)>:
c000fd32:	55                   	push   ebp
c000fd33:	57                   	push   edi
c000fd34:	56                   	push   esi
c000fd35:	53                   	push   ebx
c000fd36:	83 ec 1c             	sub    esp,0x1c
c000fd39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd3d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd41:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd45:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd48:	89 c8                	mov    eax,ecx
c000fd4a:	99                   	cdq    
c000fd4b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd4f:	74 24                	je     c000fd75 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd51:	39 f9                	cmp    ecx,edi
c000fd53:	89 d1                	mov    ecx,edx
c000fd55:	19 f1                	sbb    ecx,esi
c000fd57:	73 1c                	jae    c000fd75 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd59:	fa                   	cli    
c000fd5a:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c000fd60:	e8 6a da 00 00       	call   c001d7cf <schedule()>
c000fd65:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c000fd6a:	48                   	dec    eax
c000fd6b:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c000fd70:	75 d3                	jne    c000fd45 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd72:	fb                   	sti    
c000fd73:	eb d0                	jmp    c000fd45 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd75:	39 f8                	cmp    eax,edi
c000fd77:	89 d1                	mov    ecx,edx
c000fd79:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fd7c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fd80:	19 f1                	sbb    ecx,esi
c000fd82:	73 07                	jae    c000fd8b <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fd84:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fd8b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fd8e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fd91:	29 f7                	sub    edi,esi
c000fd93:	89 f8                	mov    eax,edi
c000fd95:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fd99:	99                   	cdq    
c000fd9a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fd9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fda1:	19 d0                	sbb    eax,edx
c000fda3:	73 07                	jae    c000fdac <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fda5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fda8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdac:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fdb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fdba:	74 0d                	je     c000fdc9 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fdbc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fdbf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fdc3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc9:	85 d2                	test   edx,edx
c000fdcb:	74 11                	je     c000fdde <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdd1:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fdd4:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fdd8:	89 d1                	mov    ecx,edx
c000fdda:	89 c7                	mov    edi,eax
c000fddc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fde1:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fde4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fde7:	99                   	cdq    
c000fde8:	89 f7                	mov    edi,esi
c000fdea:	03 04 24             	add    eax,DWORD PTR [esp]
c000fded:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fdf1:	c1 ff 1f             	sar    edi,0x1f
c000fdf4:	57                   	push   edi
c000fdf5:	56                   	push   esi
c000fdf6:	52                   	push   edx
c000fdf7:	50                   	push   eax
c000fdf8:	e8 17 68 01 00       	call   c0026614 <__umoddi3>
c000fdfd:	83 c4 10             	add    esp,0x10
c000fe00:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe03:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe08:	75 10                	jne    c000fe1a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe0a:	83 ec 0c             	sub    esp,0xc
c000fe0d:	68 59 9e 02 c0       	push   0xc0029e59
c000fe12:	e8 2e 9e 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe1e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe21:	89 10                	mov    DWORD PTR [eax],edx
c000fe23:	83 c4 1c             	add    esp,0x1c
c000fe26:	31 c0                	xor    eax,eax
c000fe28:	5b                   	pop    ebx
c000fe29:	5e                   	pop    esi
c000fe2a:	5f                   	pop    edi
c000fe2b:	5d                   	pop    ebp
c000fe2c:	c3                   	ret    
c000fe2d:	90                   	nop

c000fe2e <Pipe::write(unsigned long long, void*, int*)>:
c000fe2e:	55                   	push   ebp
c000fe2f:	57                   	push   edi
c000fe30:	56                   	push   esi
c000fe31:	53                   	push   ebx
c000fe32:	83 ec 1c             	sub    esp,0x1c
c000fe35:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe3d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe40:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe44:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe4b:	89 d8                	mov    eax,ebx
c000fe4d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe50:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe54:	89 d6                	mov    esi,edx
c000fe56:	89 d7                	mov    edi,edx
c000fe58:	c1 ff 1f             	sar    edi,0x1f
c000fe5b:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe5e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe62:	c1 f8 1f             	sar    eax,0x1f
c000fe65:	39 f3                	cmp    ebx,esi
c000fe67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe6f:	19 f8                	sbb    eax,edi
c000fe71:	b8 01 00 00 00       	mov    eax,0x1
c000fe76:	72 6e                	jb     c000fee6 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fe78:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fe7b:	01 d0                	add    eax,edx
c000fe7d:	99                   	cdq    
c000fe7e:	f7 fb                	idiv   ebx
c000fe80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe84:	29 d3                	sub    ebx,edx
c000fe86:	89 d7                	mov    edi,edx
c000fe88:	89 de                	mov    esi,ebx
c000fe8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe8d:	c1 fb 1f             	sar    ebx,0x1f
c000fe90:	39 f2                	cmp    edx,esi
c000fe92:	19 d8                	sbb    eax,ebx
c000fe94:	b8 00 00 00 00       	mov    eax,0x0
c000fe99:	72 04                	jb     c000fe9f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fe9b:	89 d0                	mov    eax,edx
c000fe9d:	29 f0                	sub    eax,esi
c000fe9f:	89 d3                	mov    ebx,edx
c000fea1:	29 c3                	sub    ebx,eax
c000fea3:	74 0b                	je     c000feb0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fea5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fea8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000feac:	89 d9                	mov    ecx,ebx
c000feae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feb0:	85 c0                	test   eax,eax
c000feb2:	74 0d                	je     c000fec1 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000feb4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000feb8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000febb:	89 de                	mov    esi,ebx
c000febd:	89 c1                	mov    ecx,eax
c000febf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fec1:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fec4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fec9:	75 10                	jne    c000fedb <Pipe::write(unsigned long long, void*, int*)+0xad>
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	68 75 9e 02 c0       	push   0xc0029e75
c000fed3:	e8 6d 9d 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c000fed8:	83 c4 10             	add    esp,0x10
c000fedb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fedf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000fee2:	89 08                	mov    DWORD PTR [eax],ecx
c000fee4:	31 c0                	xor    eax,eax
c000fee6:	83 c4 1c             	add    esp,0x1c
c000fee9:	5b                   	pop    ebx
c000feea:	5e                   	pop    esi
c000feeb:	5f                   	pop    edi
c000feec:	5d                   	pop    ebp
c000feed:	c3                   	ret    

c000feee <Pipe::Pipe(int)>:
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef5:	83 ec 08             	sub    esp,0x8
c000fef8:	6a 00                	push   0x0
c000fefa:	50                   	push   eax
c000fefb:	e8 5e 0e 00 00       	call   c0010d5e <UnixFile::UnixFile(int)>
c000ff00:	83 c4 10             	add    esp,0x10
c000ff03:	ba 9c 9e 02 c0       	mov    edx,0xc0029e9c
c000ff08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff0c:	89 10                	mov    DWORD PTR [eax],edx
c000ff0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff16:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff28:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff33:	83 ec 0c             	sub    esp,0xc
c000ff36:	50                   	push   eax
c000ff37:	e8 60 f6 ff ff       	call   c000f59c <malloc>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	89 c2                	mov    edx,eax
c000ff41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff45:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff50:	90                   	nop
c000ff51:	83 c4 0c             	add    esp,0xc
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <VgaText::isAtty()>:
c000ff56:	b0 01                	mov    al,0x1
c000ff58:	c3                   	ret    
c000ff59:	90                   	nop

c000ff5a <VgaText::~VgaText()>:
c000ff5a:	83 ec 0c             	sub    esp,0xc
c000ff5d:	ba 24 9f 02 c0       	mov    edx,0xc0029f24
c000ff62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff66:	89 10                	mov    DWORD PTR [eax],edx
c000ff68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6c:	83 ec 0c             	sub    esp,0xc
c000ff6f:	50                   	push   eax
c000ff70:	e8 cb 0f 00 00       	call   c0010f40 <UnixFile::~UnixFile()>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	90                   	nop
c000ff79:	83 c4 0c             	add    esp,0xc
c000ff7c:	c3                   	ret    
c000ff7d:	90                   	nop

c000ff7e <VgaText::~VgaText()>:
c000ff7e:	83 ec 0c             	sub    esp,0xc
c000ff81:	83 ec 0c             	sub    esp,0xc
c000ff84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff88:	e8 cd ff ff ff       	call   c000ff5a <VgaText::~VgaText()>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	83 ec 08             	sub    esp,0x8
c000ff93:	68 c4 02 00 00       	push   0x2c4
c000ff98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff9c:	e8 92 24 00 00       	call   c0012433 <operator delete(void*, unsigned long)>
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	83 c4 0c             	add    esp,0xc
c000ffa7:	c3                   	ret    

c000ffa8 <VgaText::read(unsigned long long, void*, int*)>:
c000ffa8:	83 ec 10             	sub    esp,0x10
c000ffab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb7:	e8 e4 59 00 00       	call   c00159a0 <readKeyboard(VgaText*, char*, unsigned long)>
c000ffbc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffc0:	89 02                	mov    DWORD PTR [edx],eax
c000ffc2:	31 c0                	xor    eax,eax
c000ffc4:	83 c4 1c             	add    esp,0x1c
c000ffc7:	c3                   	ret    

c000ffc8 <setTerminalScrollLock(bool)>:
c000ffc8:	c3                   	ret    

c000ffc9 <addToTerminalCycle(VgaText*)>:
c000ffc9:	8b 15 40 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d640
c000ffcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffd3:	85 d2                	test   edx,edx
c000ffd5:	75 09                	jne    c000ffe0 <addToTerminalCycle(VgaText*)+0x17>
c000ffd7:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ffda:	a3 40 d6 02 c0       	mov    ds:0xc002d640,eax
c000ffdf:	c3                   	ret    
c000ffe0:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ffe3:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ffe6:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ffe9:	c3                   	ret    

c000ffea <installVgaTextImplementation()>:
c000ffea:	83 ec 10             	sub    esp,0x10
c000ffed:	6a 20                	push   0x20
c000ffef:	6a 00                	push   0x0
c000fff1:	68 20 d6 02 c0       	push   0xc002d620
c000fff6:	e8 55 07 ff ff       	call   c0000750 <memset>
c000fffb:	83 c4 1c             	add    esp,0x1c
c000fffe:	c3                   	ret    

c000ffff <scrollTerminalScrollLock(int)>:
c000ffff:	c3                   	ret    

c0010000 <VgaText::updateTitle()>:
c0010000:	53                   	push   ebx
c0010001:	31 c0                	xor    eax,eax
c0010003:	83 ec 58             	sub    esp,0x58
c0010006:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001000a:	89 e1                	mov    ecx,esp
c001000c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010010:	40                   	inc    eax
c0010011:	83 f8 50             	cmp    eax,0x50
c0010014:	75 f6                	jne    c001000c <VgaText::updateTitle()+0xc>
c0010016:	31 c0                	xor    eax,eax
c0010018:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001001f:	84 db                	test   bl,bl
c0010021:	74 06                	je     c0010029 <VgaText::updateTitle()+0x29>
c0010023:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010026:	40                   	inc    eax
c0010027:	eb ef                	jmp    c0010018 <VgaText::updateTitle()+0x18>
c0010029:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001002c:	85 c0                	test   eax,eax
c001002e:	74 09                	je     c0010039 <VgaText::updateTitle()+0x39>
c0010030:	53                   	push   ebx
c0010031:	53                   	push   ebx
c0010032:	51                   	push   ecx
c0010033:	52                   	push   edx
c0010034:	ff d0                	call   eax
c0010036:	83 c4 10             	add    esp,0x10
c0010039:	83 c4 58             	add    esp,0x58
c001003c:	5b                   	pop    ebx
c001003d:	c3                   	ret    

c001003e <VgaText::load()>:
c001003e:	53                   	push   ebx
c001003f:	31 c0                	xor    eax,eax
c0010041:	83 ec 58             	sub    esp,0x58
c0010044:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010048:	89 e2                	mov    edx,esp
c001004a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001004e:	40                   	inc    eax
c001004f:	83 f8 50             	cmp    eax,0x50
c0010052:	75 f6                	jne    c001004a <VgaText::load()+0xc>
c0010054:	31 c0                	xor    eax,eax
c0010056:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001005d:	84 c9                	test   cl,cl
c001005f:	74 06                	je     c0010067 <VgaText::load()+0x29>
c0010061:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010064:	40                   	inc    eax
c0010065:	eb ef                	jmp    c0010056 <VgaText::load()+0x18>
c0010067:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001006a:	85 c0                	test   eax,eax
c001006c:	74 09                	je     c0010077 <VgaText::load()+0x39>
c001006e:	51                   	push   ecx
c001006f:	51                   	push   ecx
c0010070:	52                   	push   edx
c0010071:	53                   	push   ebx
c0010072:	ff d0                	call   eax
c0010074:	83 c4 10             	add    esp,0x10
c0010077:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001007a:	85 c0                	test   eax,eax
c001007c:	74 09                	je     c0010087 <VgaText::load()+0x49>
c001007e:	83 ec 0c             	sub    esp,0xc
c0010081:	53                   	push   ebx
c0010082:	ff d0                	call   eax
c0010084:	83 c4 10             	add    esp,0x10
c0010087:	83 c4 58             	add    esp,0x58
c001008a:	5b                   	pop    ebx
c001008b:	c3                   	ret    

c001008c <VgaText::updateCursor()>:
c001008c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010090:	39 05 44 d6 02 c0    	cmp    DWORD PTR ds:0xc002d644,eax
c0010096:	75 09                	jne    c00100a1 <VgaText::updateCursor()+0x15>
c0010098:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001009b:	85 c0                	test   eax,eax
c001009d:	74 02                	je     c00100a1 <VgaText::updateCursor()+0x15>
c001009f:	ff e0                	jmp    eax
c00100a1:	c3                   	ret    

c00100a2 <VgaText::doANSI_SGR(int)>:
c00100a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100aa:	85 d2                	test   edx,edx
c00100ac:	75 0b                	jne    c00100b9 <VgaText::doANSI_SGR(int)+0x17>
c00100ae:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100b1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100b4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100b7:	eb 59                	jmp    c0010112 <VgaText::doANSI_SGR(int)+0x70>
c00100b9:	83 fa 07             	cmp    edx,0x7
c00100bc:	75 0b                	jne    c00100c9 <VgaText::doANSI_SGR(int)+0x27>
c00100be:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100c1:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100c4:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100c7:	eb 49                	jmp    c0010112 <VgaText::doANSI_SGR(int)+0x70>
c00100c9:	83 fa 1b             	cmp    edx,0x1b
c00100cc:	74 e0                	je     c00100ae <VgaText::doANSI_SGR(int)+0xc>
c00100ce:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100d1:	83 f9 07             	cmp    ecx,0x7
c00100d4:	77 09                	ja     c00100df <VgaText::doANSI_SGR(int)+0x3d>
c00100d6:	8b 14 8d e0 c4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3b20]
c00100dd:	eb 20                	jmp    c00100ff <VgaText::doANSI_SGR(int)+0x5d>
c00100df:	8d 4a d8             	lea    ecx,[edx-0x28]
c00100e2:	83 f9 07             	cmp    ecx,0x7
c00100e5:	77 09                	ja     c00100f0 <VgaText::doANSI_SGR(int)+0x4e>
c00100e7:	8b 14 8d e0 c4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3b20]
c00100ee:	eb 22                	jmp    c0010112 <VgaText::doANSI_SGR(int)+0x70>
c00100f0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00100f3:	83 f9 07             	cmp    ecx,0x7
c00100f6:	77 0b                	ja     c0010103 <VgaText::doANSI_SGR(int)+0x61>
c00100f8:	8b 14 95 98 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c68]
c00100ff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010102:	c3                   	ret    
c0010103:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010106:	83 f9 07             	cmp    ecx,0x7
c0010109:	77 0a                	ja     c0010115 <VgaText::doANSI_SGR(int)+0x73>
c001010b:	8b 14 95 70 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c90]
c0010112:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010115:	c3                   	ret    

c0010116 <VgaText::setDefaultBgColour(VgaColour)>:
c0010116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001011e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010121:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010124:	c3                   	ret    
c0010125:	90                   	nop

c0010126 <VgaText::setDefaultFgColour(VgaColour)>:
c0010126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001012a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001012e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010131:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010134:	c3                   	ret    
c0010135:	90                   	nop

c0010136 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010136:	53                   	push   ebx
c0010137:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001013b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001013f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010143:	51                   	push   ecx
c0010144:	e8 cd ff ff ff       	call   c0010116 <VgaText::setDefaultBgColour(VgaColour)>
c0010149:	58                   	pop    eax
c001014a:	5a                   	pop    edx
c001014b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001014f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010153:	5b                   	pop    ebx
c0010154:	eb d0                	jmp    c0010126 <VgaText::setDefaultFgColour(VgaColour)>

c0010156 <VgaText::setTitleTextColour(VgaColour)>:
c0010156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001015a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001015e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010161:	e9 9a fe ff ff       	jmp    c0010000 <VgaText::updateTitle()>

c0010166 <VgaText::setTitleColour(VgaColour)>:
c0010166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001016a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001016e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010171:	e9 8a fe ff ff       	jmp    c0010000 <VgaText::updateTitle()>

c0010176 <VgaText::setTitle(char*)>:
c0010176:	53                   	push   ebx
c0010177:	83 ec 10             	sub    esp,0x10
c001017a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001017e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010182:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010188:	50                   	push   eax
c0010189:	e8 7e 06 ff ff       	call   c000080c <strcpy>
c001018e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010192:	83 c4 18             	add    esp,0x18
c0010195:	5b                   	pop    ebx
c0010196:	e9 65 fe ff ff       	jmp    c0010000 <VgaText::updateTitle()>
c001019b:	90                   	nop

c001019c <VgaText::combineColours(unsigned char, unsigned char)>:
c001019c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101a0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101a5:	83 e0 0f             	and    eax,0xf
c00101a8:	c1 e2 04             	shl    edx,0x4
c00101ab:	09 d0                	or     eax,edx
c00101ad:	c3                   	ret    

c00101ae <VgaText::scrollScreen()>:
c00101ae:	55                   	push   ebp
c00101af:	b9 01 00 00 00       	mov    ecx,0x1
c00101b4:	57                   	push   edi
c00101b5:	56                   	push   esi
c00101b6:	53                   	push   ebx
c00101b7:	83 ec 0c             	sub    esp,0xc
c00101ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101be:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101c4:	31 ff                	xor    edi,edi
c00101c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101c9:	83 f9 17             	cmp    ecx,0x17
c00101cc:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101cf:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00101d6:	75 27                	jne    c00101ff <VgaText::scrollScreen()+0x51>
c00101d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00101db:	01 f5                	add    ebp,esi
c00101dd:	f7 c7 01 00 00 00    	test   edi,0x1
c00101e3:	74 16                	je     c00101fb <VgaText::scrollScreen()+0x4d>
c00101e5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00101e9:	50                   	push   eax
c00101ea:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00101ee:	50                   	push   eax
c00101ef:	e8 a8 ff ff ff       	call   c001019c <VgaText::combineColours(unsigned char, unsigned char)>
c00101f4:	5a                   	pop    edx
c00101f5:	5a                   	pop    edx
c00101f6:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00101f9:	eb 04                	jmp    c00101ff <VgaText::scrollScreen()+0x51>
c00101fb:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00101ff:	47                   	inc    edi
c0010200:	46                   	inc    esi
c0010201:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010207:	75 bd                	jne    c00101c6 <VgaText::scrollScreen()+0x18>
c0010209:	41                   	inc    ecx
c001020a:	83 f9 18             	cmp    ecx,0x18
c001020d:	75 af                	jne    c00101be <VgaText::scrollScreen()+0x10>
c001020f:	39 1d 44 d6 02 c0    	cmp    DWORD PTR ds:0xc002d644,ebx
c0010215:	75 1b                	jne    c0010232 <VgaText::scrollScreen()+0x84>
c0010217:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001021b:	74 05                	je     c0010222 <VgaText::scrollScreen()+0x74>
c001021d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010220:	eb 10                	jmp    c0010232 <VgaText::scrollScreen()+0x84>
c0010222:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010225:	85 c0                	test   eax,eax
c0010227:	74 09                	je     c0010232 <VgaText::scrollScreen()+0x84>
c0010229:	83 ec 0c             	sub    esp,0xc
c001022c:	53                   	push   ebx
c001022d:	ff d0                	call   eax
c001022f:	83 c4 10             	add    esp,0x10
c0010232:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010236:	83 c4 0c             	add    esp,0xc
c0010239:	5b                   	pop    ebx
c001023a:	5e                   	pop    esi
c001023b:	5f                   	pop    edi
c001023c:	5d                   	pop    ebp
c001023d:	e9 4a fe ff ff       	jmp    c001008c <VgaText::updateCursor()>

c0010242 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010242:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010247:	c1 e0 08             	shl    eax,0x8
c001024a:	89 c2                	mov    edx,eax
c001024c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010251:	09 d0                	or     eax,edx
c0010253:	c3                   	ret    

c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010254:	56                   	push   esi
c0010255:	53                   	push   ebx
c0010256:	51                   	push   ecx
c0010257:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001025b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010260:	50                   	push   eax
c0010261:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010266:	50                   	push   eax
c0010267:	e8 30 ff ff ff       	call   c001019c <VgaText::combineColours(unsigned char, unsigned char)>
c001026c:	5b                   	pop    ebx
c001026d:	0f b6 c0             	movzx  eax,al
c0010270:	5e                   	pop    esi
c0010271:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010276:	50                   	push   eax
c0010277:	53                   	push   ebx
c0010278:	e8 c5 ff ff ff       	call   c0010242 <VgaText::combineCharAndColour(char, unsigned char)>
c001027d:	5a                   	pop    edx
c001027e:	5e                   	pop    esi
c001027f:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010282:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010288:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001028c:	0f b7 d2             	movzx  edx,dx
c001028f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010293:	39 0d 44 d6 02 c0    	cmp    DWORD PTR ds:0xc002d644,ecx
c0010299:	75 10                	jne    c00102ab <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001029b:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001029e:	85 c0                	test   eax,eax
c00102a0:	74 09                	je     c00102ab <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102a6:	5a                   	pop    edx
c00102a7:	5b                   	pop    ebx
c00102a8:	5e                   	pop    esi
c00102a9:	ff e0                	jmp    eax
c00102ab:	58                   	pop    eax
c00102ac:	5b                   	pop    ebx
c00102ad:	5e                   	pop    esi
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <VgaText::getCursorX()>:
c00102b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102b7:	c3                   	ret    

c00102b8 <VgaText::getCursorY()>:
c00102b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102bc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102bf:	c3                   	ret    

c00102c0 <VgaText::setCursor(int, int)>:
c00102c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102c8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102d2:	e9 b5 fd ff ff       	jmp    c001008c <VgaText::updateCursor()>

c00102d7 <setActiveTerminal(VgaText*)>:
c00102d7:	53                   	push   ebx
c00102d8:	83 ec 08             	sub    esp,0x8
c00102db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102df:	85 db                	test   ebx,ebx
c00102e1:	75 11                	jne    c00102f4 <setActiveTerminal(VgaText*)+0x1d>
c00102e3:	c7 44 24 10 b0 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029eb0
c00102eb:	83 c4 08             	add    esp,0x8
c00102ee:	5b                   	pop    ebx
c00102ef:	e9 51 99 00 00       	jmp    c0019c45 <Krnl::panic(char const*)>
c00102f4:	a1 44 d6 02 c0       	mov    eax,ds:0xc002d644
c00102f9:	85 c0                	test   eax,eax
c00102fb:	74 0c                	je     c0010309 <setActiveTerminal(VgaText*)+0x32>
c00102fd:	83 ec 0c             	sub    esp,0xc
c0010300:	50                   	push   eax
c0010301:	e8 86 fd ff ff       	call   c001008c <VgaText::updateCursor()>
c0010306:	83 c4 10             	add    esp,0x10
c0010309:	89 1d 44 d6 02 c0    	mov    DWORD PTR ds:0xc002d644,ebx
c001030f:	51                   	push   ecx
c0010310:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010313:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010316:	53                   	push   ebx
c0010317:	e8 a4 ff ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010323:	75 07                	jne    c001032c <setActiveTerminal(VgaText*)+0x55>
c0010325:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001032c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010330:	83 c4 08             	add    esp,0x8
c0010333:	5b                   	pop    ebx
c0010334:	e9 05 fd ff ff       	jmp    c001003e <VgaText::load()>

c0010339 <doTerminalCycle()>:
c0010339:	83 ec 18             	sub    esp,0x18
c001033c:	a1 40 d6 02 c0       	mov    eax,ds:0xc002d640
c0010341:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010344:	50                   	push   eax
c0010345:	a3 40 d6 02 c0       	mov    ds:0xc002d640,eax
c001034a:	e8 88 ff ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001034f:	83 c4 1c             	add    esp,0x1c
c0010352:	c3                   	ret    
c0010353:	90                   	nop

c0010354 <VgaText::setCursorX(int)>:
c0010354:	83 ec 10             	sub    esp,0x10
c0010357:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001035b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001035e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010362:	50                   	push   eax
c0010363:	e8 58 ff ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c0010368:	83 c4 1c             	add    esp,0x1c
c001036b:	c3                   	ret    

c001036c <VgaText::setCursorY(int)>:
c001036c:	83 ec 10             	sub    esp,0x10
c001036f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010373:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010377:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001037a:	50                   	push   eax
c001037b:	e8 40 ff ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c0010380:	83 c4 1c             	add    esp,0x1c
c0010383:	c3                   	ret    

c0010384 <VgaText::incrementCursor(bool)>:
c0010384:	56                   	push   esi
c0010385:	53                   	push   ebx
c0010386:	51                   	push   ecx
c0010387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001038b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001038f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010392:	40                   	inc    eax
c0010393:	83 f8 50             	cmp    eax,0x50
c0010396:	74 05                	je     c001039d <VgaText::incrementCursor(bool)+0x19>
c0010398:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001039b:	eb 24                	jmp    c00103c1 <VgaText::incrementCursor(bool)+0x3d>
c001039d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103a7:	8d 50 01             	lea    edx,[eax+0x1]
c00103aa:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00103ad:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103b0:	75 0f                	jne    c00103c1 <VgaText::incrementCursor(bool)+0x3d>
c00103b2:	83 ec 0c             	sub    esp,0xc
c00103b5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103b8:	53                   	push   ebx
c00103b9:	e8 f0 fd ff ff       	call   c00101ae <VgaText::scrollScreen()>
c00103be:	83 c4 10             	add    esp,0x10
c00103c1:	89 f0                	mov    eax,esi
c00103c3:	84 c0                	test   al,al
c00103c5:	74 0c                	je     c00103d3 <VgaText::incrementCursor(bool)+0x4f>
c00103c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103cb:	5a                   	pop    edx
c00103cc:	5b                   	pop    ebx
c00103cd:	5e                   	pop    esi
c00103ce:	e9 b9 fc ff ff       	jmp    c001008c <VgaText::updateCursor()>
c00103d3:	58                   	pop    eax
c00103d4:	5b                   	pop    ebx
c00103d5:	5e                   	pop    esi
c00103d6:	c3                   	ret    
c00103d7:	90                   	nop

c00103d8 <VgaText::decrementCursor(bool)>:
c00103d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103e0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00103e3:	85 c0                	test   eax,eax
c00103e5:	74 04                	je     c00103eb <VgaText::decrementCursor(bool)+0x13>
c00103e7:	48                   	dec    eax
c00103e8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00103eb:	84 c9                	test   cl,cl
c00103ed:	74 09                	je     c00103f8 <VgaText::decrementCursor(bool)+0x20>
c00103ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f3:	e9 94 fc ff ff       	jmp    c001008c <VgaText::updateCursor()>
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <VgaText::putchar(char, VgaColour, VgaColour)>:
c00103fa:	53                   	push   ebx
c00103fb:	83 ec 08             	sub    esp,0x8
c00103fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010402:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010406:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001040a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001040e:	3c 07                	cmp    al,0x7
c0010410:	75 2a                	jne    c001043c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010412:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0010417:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001041f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010427:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001042f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010433:	83 c4 08             	add    esp,0x8
c0010436:	5b                   	pop    ebx
c0010437:	e9 dc 2e 00 00       	jmp    c0013318 <Buzzer::beep(int, int, bool)>
c001043c:	3c 0d                	cmp    al,0xd
c001043e:	75 09                	jne    c0010449 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010440:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010447:	eb 2c                	jmp    c0010475 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010449:	3c 0a                	cmp    al,0xa
c001044b:	75 31                	jne    c001047e <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001044d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010450:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010457:	8d 50 01             	lea    edx,[eax+0x1]
c001045a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001045d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010460:	75 0f                	jne    c0010471 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010462:	83 ec 0c             	sub    esp,0xc
c0010465:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010468:	53                   	push   ebx
c0010469:	e8 40 fd ff ff       	call   c00101ae <VgaText::scrollScreen()>
c001046e:	83 c4 10             	add    esp,0x10
c0010471:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010475:	83 c4 08             	add    esp,0x8
c0010478:	5b                   	pop    ebx
c0010479:	e9 0e fc ff ff       	jmp    c001008c <VgaText::updateCursor()>
c001047e:	3c 08                	cmp    al,0x8
c0010480:	75 25                	jne    c00104a7 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010482:	50                   	push   eax
c0010483:	50                   	push   eax
c0010484:	6a 01                	push   0x1
c0010486:	53                   	push   ebx
c0010487:	e8 4c ff ff ff       	call   c00103d8 <VgaText::decrementCursor(bool)>
c001048c:	5a                   	pop    edx
c001048d:	59                   	pop    ecx
c001048e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010491:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010494:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010497:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001049a:	6a 20                	push   0x20
c001049c:	53                   	push   ebx
c001049d:	e8 b2 fd ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104a2:	83 c4 28             	add    esp,0x28
c00104a5:	5b                   	pop    ebx
c00104a6:	c3                   	ret    
c00104a7:	83 ec 08             	sub    esp,0x8
c00104aa:	0f be c0             	movsx  eax,al
c00104ad:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104b3:	51                   	push   ecx
c00104b4:	52                   	push   edx
c00104b5:	50                   	push   eax
c00104b6:	53                   	push   ebx
c00104b7:	e8 98 fd ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104bc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104c0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104c8:	83 c4 28             	add    esp,0x28
c00104cb:	5b                   	pop    ebx
c00104cc:	e9 b3 fe ff ff       	jmp    c0010384 <VgaText::incrementCursor(bool)>
c00104d1:	90                   	nop

c00104d2 <VgaText::doUpdate()>:
c00104d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d6:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00104d9:	85 c0                	test   eax,eax
c00104db:	74 02                	je     c00104df <VgaText::doUpdate()+0xd>
c00104dd:	ff e0                	jmp    eax
c00104df:	c3                   	ret    

c00104e0 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00104e0:	55                   	push   ebp
c00104e1:	31 ed                	xor    ebp,ebp
c00104e3:	57                   	push   edi
c00104e4:	56                   	push   esi
c00104e5:	53                   	push   ebx
c00104e6:	83 ec 1c             	sub    esp,0x1c
c00104e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00104ed:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104f2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00104f9:	50                   	push   eax
c00104fa:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104ff:	50                   	push   eax
c0010500:	e8 97 fc ff ff       	call   c001019c <VgaText::combineColours(unsigned char, unsigned char)>
c0010505:	59                   	pop    ecx
c0010506:	0f b6 c0             	movzx  eax,al
c0010509:	5e                   	pop    esi
c001050a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001050f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010513:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010516:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001051a:	0f b7 f6             	movzx  esi,si
c001051d:	01 f6                	add    esi,esi
c001051f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010522:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010525:	84 c0                	test   al,al
c0010527:	0f 84 fd 00 00 00    	je     c001062a <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001052d:	3c 0d                	cmp    al,0xd
c001052f:	75 0c                	jne    c001053d <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010531:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010538:	e9 e7 00 00 00       	jmp    c0010624 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001053d:	3c 0a                	cmp    al,0xa
c001053f:	75 47                	jne    c0010588 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010541:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010544:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001054b:	8d 48 01             	lea    ecx,[eax+0x1]
c001054e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010551:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010554:	75 0f                	jne    c0010565 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010556:	83 ec 0c             	sub    esp,0xc
c0010559:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001055c:	53                   	push   ebx
c001055d:	e8 4c fc ff ff       	call   c00101ae <VgaText::scrollScreen()>
c0010562:	83 c4 10             	add    esp,0x10
c0010565:	83 ec 0c             	sub    esp,0xc
c0010568:	31 ed                	xor    ebp,ebp
c001056a:	53                   	push   ebx
c001056b:	e8 1c fb ff ff       	call   c001008c <VgaText::updateCursor()>
c0010570:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010575:	83 c4 10             	add    esp,0x10
c0010578:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001057b:	0f b7 f6             	movzx  esi,si
c001057e:	01 f6                	add    esi,esi
c0010580:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010583:	e9 9c 00 00 00       	jmp    c0010624 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010588:	3c 08                	cmp    al,0x8
c001058a:	75 35                	jne    c00105c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c001058c:	56                   	push   esi
c001058d:	56                   	push   esi
c001058e:	6a 01                	push   0x1
c0010590:	53                   	push   ebx
c0010591:	e8 42 fe ff ff       	call   c00103d8 <VgaText::decrementCursor(bool)>
c0010596:	58                   	pop    eax
c0010597:	5a                   	pop    edx
c0010598:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001059b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001059e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105a1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105a4:	6a 20                	push   0x20
c00105a6:	53                   	push   ebx
c00105a7:	e8 a8 fc ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105ac:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105b1:	83 c4 20             	add    esp,0x20
c00105b4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105b7:	0f b7 f6             	movzx  esi,si
c00105ba:	01 f6                	add    esi,esi
c00105bc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105bf:	eb 63                	jmp    c0010624 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105c1:	51                   	push   ecx
c00105c2:	51                   	push   ecx
c00105c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105c7:	50                   	push   eax
c00105c8:	e8 75 fc ff ff       	call   c0010242 <VgaText::combineCharAndColour(char, unsigned char)>
c00105cd:	83 c4 10             	add    esp,0x10
c00105d0:	66 89 06             	mov    WORD PTR [esi],ax
c00105d3:	39 1d 44 d6 02 c0    	cmp    DWORD PTR ds:0xc002d644,ebx
c00105d9:	75 21                	jne    c00105fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105db:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00105de:	85 c0                	test   eax,eax
c00105e0:	74 1a                	je     c00105fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105e2:	52                   	push   edx
c00105e3:	52                   	push   edx
c00105e4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105f2:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00105f5:	51                   	push   ecx
c00105f6:	53                   	push   ebx
c00105f7:	ff d0                	call   eax
c00105f9:	83 c4 20             	add    esp,0x20
c00105fc:	83 c6 02             	add    esi,0x2
c00105ff:	50                   	push   eax
c0010600:	50                   	push   eax
c0010601:	6a 00                	push   0x0
c0010603:	53                   	push   ebx
c0010604:	e8 7b fd ff ff       	call   c0010384 <VgaText::incrementCursor(bool)>
c0010609:	83 c4 10             	add    esp,0x10
c001060c:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010610:	75 0d                	jne    c001061f <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010612:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010617:	0f b7 f6             	movzx  esi,si
c001061a:	01 f6                	add    esi,esi
c001061c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001061f:	bd 01 00 00 00       	mov    ebp,0x1
c0010624:	47                   	inc    edi
c0010625:	e9 f8 fe ff ff       	jmp    c0010522 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001062a:	83 ec 0c             	sub    esp,0xc
c001062d:	53                   	push   ebx
c001062e:	e8 59 fa ff ff       	call   c001008c <VgaText::updateCursor()>
c0010633:	83 c4 10             	add    esp,0x10
c0010636:	89 e8                	mov    eax,ebp
c0010638:	84 c0                	test   al,al
c001063a:	74 0c                	je     c0010648 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001063c:	83 ec 0c             	sub    esp,0xc
c001063f:	53                   	push   ebx
c0010640:	e8 8d fe ff ff       	call   c00104d2 <VgaText::doUpdate()>
c0010645:	83 c4 10             	add    esp,0x10
c0010648:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001064f:	83 c4 1c             	add    esp,0x1c
c0010652:	5b                   	pop    ebx
c0010653:	5e                   	pop    esi
c0010654:	5f                   	pop    edi
c0010655:	5d                   	pop    ebp
c0010656:	c3                   	ret    
c0010657:	90                   	nop

c0010658 <VgaText::clearScreen()>:
c0010658:	57                   	push   edi
c0010659:	56                   	push   esi
c001065a:	31 f6                	xor    esi,esi
c001065c:	53                   	push   ebx
c001065d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010661:	52                   	push   edx
c0010662:	6a 00                	push   0x0
c0010664:	6a 00                	push   0x0
c0010666:	53                   	push   ebx
c0010667:	e8 54 fc ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c001066c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010679:	7e 20                	jle    c001069b <VgaText::clearScreen()+0x43>
c001067b:	31 ff                	xor    edi,edi
c001067d:	50                   	push   eax
c001067e:	50                   	push   eax
c001067f:	56                   	push   esi
c0010680:	57                   	push   edi
c0010681:	47                   	inc    edi
c0010682:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010685:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010688:	6a 20                	push   0x20
c001068a:	53                   	push   ebx
c001068b:	e8 c4 fb ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010690:	83 c4 20             	add    esp,0x20
c0010693:	83 ff 50             	cmp    edi,0x50
c0010696:	75 e5                	jne    c001067d <VgaText::clearScreen()+0x25>
c0010698:	46                   	inc    esi
c0010699:	eb db                	jmp    c0010676 <VgaText::clearScreen()+0x1e>
c001069b:	83 ec 0c             	sub    esp,0xc
c001069e:	53                   	push   ebx
c001069f:	e8 2e fe ff ff       	call   c00104d2 <VgaText::doUpdate()>
c00106a4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106ab:	83 c4 10             	add    esp,0x10
c00106ae:	5b                   	pop    ebx
c00106af:	5e                   	pop    esi
c00106b0:	5f                   	pop    edi
c00106b1:	c3                   	ret    

c00106b2 <VgaText::putchar(char)>:
c00106b2:	56                   	push   esi
c00106b3:	53                   	push   ebx
c00106b4:	83 ec 14             	sub    esp,0x14
c00106b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106bf:	3c 5b                	cmp    al,0x5b
c00106c1:	75 18                	jne    c00106db <VgaText::putchar(char)+0x29>
c00106c3:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106c7:	74 1f                	je     c00106e8 <VgaText::putchar(char)+0x36>
c00106c9:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106cf:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00106d6:	e9 bd 00 00 00       	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c00106db:	3c 1b                	cmp    al,0x1b
c00106dd:	75 09                	jne    c00106e8 <VgaText::putchar(char)+0x36>
c00106df:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00106e3:	e9 b0 00 00 00       	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c00106e8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00106eb:	84 c9                	test   cl,cl
c00106ed:	0f 84 92 00 00 00    	je     c0010785 <VgaText::putchar(char)+0xd3>
c00106f3:	8d 50 c0             	lea    edx,[eax-0x40]
c00106f6:	80 fa 3e             	cmp    dl,0x3e
c00106f9:	77 76                	ja     c0010771 <VgaText::putchar(char)+0xbf>
c00106fb:	3c 6d                	cmp    al,0x6d
c00106fd:	75 47                	jne    c0010746 <VgaText::putchar(char)+0x94>
c00106ff:	31 f6                	xor    esi,esi
c0010701:	31 d2                	xor    edx,edx
c0010703:	31 c0                	xor    eax,eax
c0010705:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010708:	7e 2d                	jle    c0010737 <VgaText::putchar(char)+0x85>
c001070a:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001070f:	80 fa 3b             	cmp    dl,0x3b
c0010712:	75 17                	jne    c001072b <VgaText::putchar(char)+0x79>
c0010714:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010718:	50                   	push   eax
c0010719:	53                   	push   ebx
c001071a:	e8 83 f9 ff ff       	call   c00100a2 <VgaText::doANSI_SGR(int)>
c001071f:	59                   	pop    ecx
c0010720:	31 d2                	xor    edx,edx
c0010722:	58                   	pop    eax
c0010723:	31 c0                	xor    eax,eax
c0010725:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010729:	eb 09                	jmp    c0010734 <VgaText::putchar(char)+0x82>
c001072b:	6b c0 0a             	imul   eax,eax,0xa
c001072e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010732:	88 ca                	mov    dl,cl
c0010734:	46                   	inc    esi
c0010735:	eb ce                	jmp    c0010705 <VgaText::putchar(char)+0x53>
c0010737:	84 d2                	test   dl,dl
c0010739:	74 2e                	je     c0010769 <VgaText::putchar(char)+0xb7>
c001073b:	50                   	push   eax
c001073c:	53                   	push   ebx
c001073d:	e8 60 f9 ff ff       	call   c00100a2 <VgaText::doANSI_SGR(int)>
c0010742:	58                   	pop    eax
c0010743:	5a                   	pop    edx
c0010744:	eb 23                	jmp    c0010769 <VgaText::putchar(char)+0xb7>
c0010746:	3c 4a                	cmp    al,0x4a
c0010748:	75 1f                	jne    c0010769 <VgaText::putchar(char)+0xb7>
c001074a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001074e:	75 19                	jne    c0010769 <VgaText::putchar(char)+0xb7>
c0010750:	83 ec 0c             	sub    esp,0xc
c0010753:	53                   	push   ebx
c0010754:	e8 ff fe ff ff       	call   c0010658 <VgaText::clearScreen()>
c0010759:	83 c4 0c             	add    esp,0xc
c001075c:	6a 00                	push   0x0
c001075e:	6a 00                	push   0x0
c0010760:	53                   	push   ebx
c0010761:	e8 5a fb ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c0010766:	83 c4 10             	add    esp,0x10
c0010769:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001076f:	eb 27                	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c0010771:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010774:	83 fa 0e             	cmp    edx,0xe
c0010777:	7f 1f                	jg     c0010798 <VgaText::putchar(char)+0xe6>
c0010779:	8d 4a 01             	lea    ecx,[edx+0x1]
c001077c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001077f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010783:	eb 13                	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c0010785:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010788:	0f be c0             	movsx  eax,al
c001078b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001078e:	50                   	push   eax
c001078f:	53                   	push   ebx
c0010790:	e8 65 fc ff ff       	call   c00103fa <VgaText::putchar(char, VgaColour, VgaColour)>
c0010795:	83 c4 10             	add    esp,0x10
c0010798:	83 c4 14             	add    esp,0x14
c001079b:	5b                   	pop    ebx
c001079c:	5e                   	pop    esi
c001079d:	c3                   	ret    

c001079e <VgaText::putx(unsigned int)>:
c001079e:	57                   	push   edi
c001079f:	b9 11 00 00 00       	mov    ecx,0x11
c00107a4:	56                   	push   esi
c00107a5:	be be 9e 02 c0       	mov    esi,0xc0029ebe
c00107aa:	53                   	push   ebx
c00107ab:	83 ec 20             	sub    esp,0x20
c00107ae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107b2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107b6:	fc                   	cld    
c00107b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107b9:	be 08 00 00 00       	mov    esi,0x8
c00107be:	50                   	push   eax
c00107bf:	50                   	push   eax
c00107c0:	89 d8                	mov    eax,ebx
c00107c2:	c1 e3 04             	shl    ebx,0x4
c00107c5:	c1 e8 1c             	shr    eax,0x1c
c00107c8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107cd:	50                   	push   eax
c00107ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107d2:	e8 db fe ff ff       	call   c00106b2 <VgaText::putchar(char)>
c00107d7:	83 c4 10             	add    esp,0x10
c00107da:	4e                   	dec    esi
c00107db:	75 e1                	jne    c00107be <VgaText::putx(unsigned int)+0x20>
c00107dd:	83 c4 20             	add    esp,0x20
c00107e0:	5b                   	pop    ebx
c00107e1:	5e                   	pop    esi
c00107e2:	5f                   	pop    edi
c00107e3:	c3                   	ret    

c00107e4 <VgaText::puts(char const*)>:
c00107e4:	53                   	push   ebx
c00107e5:	83 ec 08             	sub    esp,0x8
c00107e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00107ef:	84 c0                	test   al,al
c00107f1:	74 12                	je     c0010805 <VgaText::puts(char const*)+0x21>
c00107f3:	43                   	inc    ebx
c00107f4:	51                   	push   ecx
c00107f5:	51                   	push   ecx
c00107f6:	50                   	push   eax
c00107f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107fb:	e8 b2 fe ff ff       	call   c00106b2 <VgaText::putchar(char)>
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	eb e7                	jmp    c00107ec <VgaText::puts(char const*)+0x8>
c0010805:	83 c4 08             	add    esp,0x8
c0010808:	5b                   	pop    ebx
c0010809:	c3                   	ret    

c001080a <VgaText::VgaText(char const*)>:
c001080a:	57                   	push   edi
c001080b:	56                   	push   esi
c001080c:	53                   	push   ebx
c001080d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010811:	83 ec 08             	sub    esp,0x8
c0010814:	6a 00                	push   0x0
c0010816:	50                   	push   eax
c0010817:	e8 42 05 00 00       	call   c0010d5e <UnixFile::UnixFile(int)>
c001081c:	83 c4 10             	add    esp,0x10
c001081f:	ba 24 9f 02 c0       	mov    edx,0xc0029f24
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	89 10                	mov    DWORD PTR [eax],edx
c001082a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010839:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010844:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001085b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010875:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001087c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010880:	8d 50 60             	lea    edx,[eax+0x60]
c0010883:	bb 20 d6 02 c0       	mov    ebx,0xc002d620
c0010888:	b8 08 00 00 00       	mov    eax,0x8
c001088d:	fc                   	cld    
c001088e:	89 d7                	mov    edi,edx
c0010890:	89 de                	mov    esi,ebx
c0010892:	89 c1                	mov    ecx,eax
c0010894:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089a:	05 82 00 00 00       	add    eax,0x82
c001089f:	83 ec 08             	sub    esp,0x8
c00108a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a6:	50                   	push   eax
c00108a7:	e8 60 ff fe ff       	call   c000080c <strcpy>
c00108ac:	83 c4 10             	add    esp,0x10
c00108af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b3:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108ba:	83 ec 0c             	sub    esp,0xc
c00108bd:	6a 01                	push   0x1
c00108bf:	e8 dd 08 00 00       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c00108c4:	83 c4 10             	add    esp,0x10
c00108c7:	89 c2                	mov    edx,eax
c00108c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108d0:	8b 1d f0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f0
c00108d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108dd:	89 c6                	mov    esi,eax
c00108df:	e8 5c f0 ff ff       	call   c000f940 <Phys::allocatePage()>
c00108e4:	6a 05                	push   0x5
c00108e6:	56                   	push   esi
c00108e7:	50                   	push   eax
c00108e8:	53                   	push   ebx
c00108e9:	e8 70 10 00 00       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c00108ee:	83 c4 10             	add    esp,0x10
c00108f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108f8:	83 ec 04             	sub    esp,0x4
c00108fb:	68 00 0f 00 00       	push   0xf00
c0010900:	6a 00                	push   0x0
c0010902:	50                   	push   eax
c0010903:	e8 48 fe fe ff       	call   c0000750 <memset>
c0010908:	83 c4 10             	add    esp,0x10
c001090b:	83 ec 04             	sub    esp,0x4
c001090e:	6a 00                	push   0x0
c0010910:	6a 07                	push   0x7
c0010912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010916:	e8 1b f8 ff ff       	call   c0010136 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	83 ec 04             	sub    esp,0x4
c0010921:	6a 00                	push   0x0
c0010923:	6a 00                	push   0x0
c0010925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010929:	e8 92 f9 ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c001092e:	83 c4 10             	add    esp,0x10
c0010931:	83 ec 0c             	sub    esp,0xc
c0010934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010938:	e8 1b fd ff ff       	call   c0010658 <VgaText::clearScreen()>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094c:	05 02 01 00 00       	add    eax,0x102
c0010951:	83 ec 04             	sub    esp,0x4
c0010954:	68 96 00 00 00       	push   0x96
c0010959:	6a 00                	push   0x0
c001095b:	50                   	push   eax
c001095c:	e8 ef fd fe ff       	call   c0000750 <memset>
c0010961:	83 c4 10             	add    esp,0x10
c0010964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010968:	05 98 01 00 00       	add    eax,0x198
c001096d:	83 ec 04             	sub    esp,0x4
c0010970:	68 2c 01 00 00       	push   0x12c
c0010975:	6a 00                	push   0x0
c0010977:	50                   	push   eax
c0010978:	e8 d3 fd fe ff       	call   c0000750 <memset>
c001097d:	83 c4 10             	add    esp,0x10
c0010980:	90                   	nop
c0010981:	5b                   	pop    ebx
c0010982:	5e                   	pop    esi
c0010983:	5f                   	pop    edi
c0010984:	c3                   	ret    
c0010985:	90                   	nop

c0010986 <VgaText::receiveKey(unsigned char)>:
c0010986:	55                   	push   ebp
c0010987:	57                   	push   edi
c0010988:	56                   	push   esi
c0010989:	53                   	push   ebx
c001098a:	83 ec 1c             	sub    esp,0x1c
c001098d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010991:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010995:	84 db                	test   bl,bl
c0010997:	0f 84 c9 00 00 00    	je     c0010a66 <VgaText::receiveKey(unsigned char)+0xe0>
c001099d:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00109a3:	80 fb 08             	cmp    bl,0x8
c00109a6:	75 2c                	jne    c00109d4 <VgaText::receiveKey(unsigned char)+0x4e>
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	57                   	push   edi
c00109ac:	e8 bb fd fe ff       	call   c000076c <strlen>
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	85 c0                	test   eax,eax
c00109b6:	74 41                	je     c00109f9 <VgaText::receiveKey(unsigned char)+0x73>
c00109b8:	50                   	push   eax
c00109b9:	50                   	push   eax
c00109ba:	6a 08                	push   0x8
c00109bc:	56                   	push   esi
c00109bd:	e8 f0 fc ff ff       	call   c00106b2 <VgaText::putchar(char)>
c00109c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109c5:	e8 a2 fd fe ff       	call   c000076c <strlen>
c00109ca:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00109d2:	eb 22                	jmp    c00109f6 <VgaText::receiveKey(unsigned char)+0x70>
c00109d4:	0f be c3             	movsx  eax,bl
c00109d7:	52                   	push   edx
c00109d8:	52                   	push   edx
c00109d9:	50                   	push   eax
c00109da:	56                   	push   esi
c00109db:	e8 d2 fc ff ff       	call   c00106b2 <VgaText::putchar(char)>
c00109e0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00109e4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00109e9:	59                   	pop    ecx
c00109ea:	5d                   	pop    ebp
c00109eb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00109ef:	50                   	push   eax
c00109f0:	57                   	push   edi
c00109f1:	e8 56 ff fe ff       	call   c000094c <strcat>
c00109f6:	83 c4 10             	add    esp,0x10
c00109f9:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a00:	75 05                	jne    c0010a07 <VgaText::receiveKey(unsigned char)+0x81>
c0010a02:	80 fb 0a             	cmp    bl,0xa
c0010a05:	75 53                	jne    c0010a5a <VgaText::receiveKey(unsigned char)+0xd4>
c0010a07:	83 ec 0c             	sub    esp,0xc
c0010a0a:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a10:	53                   	push   ebx
c0010a11:	e8 56 fd fe ff       	call   c000076c <strlen>
c0010a16:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a19:	89 c5                	mov    ebp,eax
c0010a1b:	e8 4c fd fe ff       	call   c000076c <strlen>
c0010a20:	83 c4 10             	add    esp,0x10
c0010a23:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a27:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a2c:	76 10                	jbe    c0010a3e <VgaText::receiveKey(unsigned char)+0xb8>
c0010a2e:	83 ec 0c             	sub    esp,0xc
c0010a31:	68 cf 9e 02 c0       	push   0xc0029ecf
c0010a36:	e8 0a 92 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	50                   	push   eax
c0010a3f:	50                   	push   eax
c0010a40:	57                   	push   edi
c0010a41:	53                   	push   ebx
c0010a42:	e8 05 ff fe ff       	call   c000094c <strcat>
c0010a47:	83 c4 0c             	add    esp,0xc
c0010a4a:	68 96 00 00 00       	push   0x96
c0010a4f:	6a 00                	push   0x0
c0010a51:	57                   	push   edi
c0010a52:	e8 f9 fc fe ff       	call   c0000750 <memset>
c0010a57:	83 c4 10             	add    esp,0x10
c0010a5a:	83 ec 0c             	sub    esp,0xc
c0010a5d:	56                   	push   esi
c0010a5e:	e8 6f fa ff ff       	call   c00104d2 <VgaText::doUpdate()>
c0010a63:	83 c4 10             	add    esp,0x10
c0010a66:	83 c4 1c             	add    esp,0x1c
c0010a69:	5b                   	pop    ebx
c0010a6a:	5e                   	pop    esi
c0010a6b:	5f                   	pop    edi
c0010a6c:	5d                   	pop    ebp
c0010a6d:	c3                   	ret    

c0010a6e <VgaText::write(unsigned long long, void*, int*)>:
c0010a6e:	55                   	push   ebp
c0010a6f:	57                   	push   edi
c0010a70:	56                   	push   esi
c0010a71:	53                   	push   ebx
c0010a72:	83 ec 0c             	sub    esp,0xc
c0010a75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a79:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010a7d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a81:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010a88:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010a8b:	39 eb                	cmp    ebx,ebp
c0010a8d:	74 13                	je     c0010aa2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010a8f:	43                   	inc    ebx
c0010a90:	50                   	push   eax
c0010a91:	50                   	push   eax
c0010a92:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010a96:	50                   	push   eax
c0010a97:	56                   	push   esi
c0010a98:	e8 15 fc ff ff       	call   c00106b2 <VgaText::putchar(char)>
c0010a9d:	83 c4 10             	add    esp,0x10
c0010aa0:	eb e9                	jmp    c0010a8b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010aa2:	83 ec 0c             	sub    esp,0xc
c0010aa5:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010aac:	56                   	push   esi
c0010aad:	e8 20 fa ff ff       	call   c00104d2 <VgaText::doUpdate()>
c0010ab2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ab6:	89 38                	mov    DWORD PTR [eax],edi
c0010ab8:	83 c4 1c             	add    esp,0x1c
c0010abb:	31 c0                	xor    eax,eax
c0010abd:	5b                   	pop    ebx
c0010abe:	5e                   	pop    esi
c0010abf:	5f                   	pop    edi
c0010ac0:	5d                   	pop    ebp
c0010ac1:	c3                   	ret    

c0010ac2 <newTerminal(char*)>:
c0010ac2:	83 ec 28             	sub    esp,0x28
c0010ac5:	68 c4 02 00 00       	push   0x2c4
c0010aca:	e8 cd ea ff ff       	call   c000f59c <malloc>
c0010acf:	5a                   	pop    edx
c0010ad0:	59                   	pop    ecx
c0010ad1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ad5:	50                   	push   eax
c0010ad6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ada:	e8 2b fd ff ff       	call   c001080a <VgaText::VgaText(char const*)>
c0010adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ae3:	83 c4 2c             	add    esp,0x2c
c0010ae6:	c3                   	ret    
c0010ae7:	90                   	nop

c0010ae8 <TSS::TSS()>:
c0010ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010af3:	90                   	nop
c0010af4:	c3                   	ret    
c0010af5:	90                   	nop

c0010af6 <TSS::setESP(unsigned long)>:
c0010af6:	55                   	push   ebp
c0010af7:	89 e5                	mov    ebp,esp
c0010af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010aff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b02:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b05:	90                   	nop
c0010b06:	5d                   	pop    ebp
c0010b07:	c3                   	ret    

c0010b08 <TSS::flush()>:
c0010b08:	55                   	push   ebp
c0010b09:	89 e5                	mov    ebp,esp
c0010b0b:	83 ec 10             	sub    esp,0x10
c0010b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b13:	83 c8 03             	or     eax,0x3
c0010b16:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b1a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b1e:	66 89 d0             	mov    ax,dx
c0010b21:	0f 00 d8             	ltr    ax
c0010b24:	90                   	nop
c0010b25:	c9                   	leave  
c0010b26:	c3                   	ret    
c0010b27:	90                   	nop

c0010b28 <TSS::setup(unsigned long, unsigned long)>:
c0010b28:	55                   	push   ebp
c0010b29:	89 e5                	mov    ebp,esp
c0010b2b:	83 ec 18             	sub    esp,0x18
c0010b2e:	83 ec 0c             	sub    esp,0xc
c0010b31:	6a 68                	push   0x68
c0010b33:	e8 64 ea ff ff       	call   c000f59c <malloc>
c0010b38:	83 c4 10             	add    esp,0x10
c0010b3b:	89 c2                	mov    edx,eax
c0010b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b49:	83 ec 04             	sub    esp,0x4
c0010b4c:	6a 68                	push   0x68
c0010b4e:	6a 00                	push   0x0
c0010b50:	50                   	push   eax
c0010b51:	e8 fa fb fe ff       	call   c0000750 <memset>
c0010b56:	83 c4 10             	add    esp,0x10
c0010b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b5f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b6b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b7a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b83:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b9b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bcb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bda:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf0:	0f 20 da             	mov    edx,cr3
c0010bf3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010bf6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010bf9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010bfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c02:	83 ec 08             	sub    esp,0x8
c0010c05:	50                   	push   eax
c0010c06:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c09:	50                   	push   eax
c0010c0a:	e8 83 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c0f:	83 c4 10             	add    esp,0x10
c0010c12:	83 ec 08             	sub    esp,0x8
c0010c15:	6a 68                	push   0x68
c0010c17:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c1a:	50                   	push   eax
c0010c1b:	e8 8e e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c20:	83 c4 10             	add    esp,0x10
c0010c23:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c27:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c2a:	83 e0 0f             	and    eax,0xf
c0010c2d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c30:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c33:	83 c8 40             	or     eax,0x40
c0010c36:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c39:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0010c3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c44:	05 78 01 00 00       	add    eax,0x178
c0010c49:	83 ec 04             	sub    esp,0x4
c0010c4c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c4f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c52:	50                   	push   eax
c0010c53:	e8 8a e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c58:	83 c4 10             	add    esp,0x10
c0010c5b:	89 c2                	mov    edx,eax
c0010c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c60:	89 10                	mov    DWORD PTR [eax],edx
c0010c62:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0010c67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c6d:	05 78 01 00 00       	add    eax,0x178
c0010c72:	83 ec 0c             	sub    esp,0xc
c0010c75:	50                   	push   eax
c0010c76:	e8 91 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c83:	c9                   	leave  
c0010c84:	c3                   	ret    
c0010c85:	90                   	nop

c0010c86 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010c8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c91:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010c96:	75 08                	jne    c0010ca0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010c98:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010c9e:	eb 38                	jmp    c0010cd8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010ca0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ca5:	75 17                	jne    c0010cbe <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010ca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010caf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cb5:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cbb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010cbe:	89 c1                	mov    ecx,eax
c0010cc0:	83 e1 fd             	and    ecx,0xfffffffd
c0010cc3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010cc9:	74 cd                	je     c0010c98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010ccb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010cd0:	83 e0 ef             	and    eax,0xffffffef
c0010cd3:	83 f8 08             	cmp    eax,0x8
c0010cd6:	76 c0                	jbe    c0010c98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cd8:	31 c0                	xor    eax,eax
c0010cda:	c3                   	ret    
c0010cdb:	90                   	nop

c0010cdc <ReservedFilename::isAtty()>:
c0010cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ce3:	31 c0                	xor    eax,eax
c0010ce5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010ceb:	74 09                	je     c0010cf6 <ReservedFilename::isAtty()+0x1a>
c0010ced:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010cf3:	0f 94 c0             	sete   al
c0010cf6:	c3                   	ret    
c0010cf7:	90                   	nop

c0010cf8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d07:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d0c:	75 08                	jne    c0010d16 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d0e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d14:	eb 3d                	jmp    c0010d53 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d16:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d1b:	75 17                	jne    c0010d34 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d31:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d34:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d39:	75 04                	jne    c0010d3f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d3b:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d3d:	eb 14                	jmp    c0010d53 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d3f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d44:	74 c8                	je     c0010d0e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d46:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4b:	83 e0 ef             	and    eax,0xffffffef
c0010d4e:	83 f8 08             	cmp    eax,0x8
c0010d51:	76 bb                	jbe    c0010d0e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d53:	31 c0                	xor    eax,eax
c0010d55:	c3                   	ret    

c0010d56 <UnixFile::getFileDescriptor()>:
c0010d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d5d:	c3                   	ret    

c0010d5e <UnixFile::UnixFile(int)>:
c0010d5e:	53                   	push   ebx
c0010d5f:	83 ec 28             	sub    esp,0x28
c0010d62:	ba ec 9f 02 c0       	mov    edx,0xc0029fec
c0010d67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d6b:	89 10                	mov    DWORD PTR [eax],edx
c0010d6d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010d75:	0f 8f 8c 01 00 00    	jg     c0010f07 <UnixFile::UnixFile(int)+0x1a9>
c0010d7b:	a1 20 c5 02 c0       	mov    eax,ds:0xc002c520
c0010d80:	8d 50 01             	lea    edx,[eax+0x1]
c0010d83:	89 15 20 c5 02 c0    	mov    DWORD PTR ds:0xc002c520,edx
c0010d89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010d8d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d90:	83 ec 08             	sub    esp,0x8
c0010d93:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010d97:	68 d8 d6 02 c0       	push   0xc002d6d8
c0010d9c:	e8 e5 74 01 00       	call   c0028286 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	a0 d4 d6 02 c0       	mov    al,ds:0xc002d6d4
c0010da9:	83 f0 01             	xor    eax,0x1
c0010dac:	84 c0                	test   al,al
c0010dae:	0f 84 54 01 00 00    	je     c0010f08 <UnixFile::UnixFile(int)+0x1aa>
c0010db4:	c6 05 d4 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d6d4,0x1
c0010dbb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010dc3:	83 ec 0c             	sub    esp,0xc
c0010dc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dca:	e8 cd e7 ff ff       	call   c000f59c <malloc>
c0010dcf:	83 c4 10             	add    esp,0x10
c0010dd2:	89 c3                	mov    ebx,eax
c0010dd4:	83 ec 08             	sub    esp,0x8
c0010dd7:	68 03 ff ff 0f       	push   0xfffff03
c0010ddc:	53                   	push   ebx
c0010ddd:	e8 2c 01 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010de2:	83 c4 10             	add    esp,0x10
c0010de5:	89 1d cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,ebx
c0010deb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010df3:	83 ec 0c             	sub    esp,0xc
c0010df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfa:	e8 9d e7 ff ff       	call   c000f59c <malloc>
c0010dff:	83 c4 10             	add    esp,0x10
c0010e02:	89 c3                	mov    ebx,eax
c0010e04:	83 ec 08             	sub    esp,0x8
c0010e07:	68 01 ff ff 0f       	push   0xfffff01
c0010e0c:	53                   	push   ebx
c0010e0d:	e8 fc 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010e12:	83 c4 10             	add    esp,0x10
c0010e15:	89 1d d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,ebx
c0010e1b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e23:	83 ec 0c             	sub    esp,0xc
c0010e26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e2a:	e8 6d e7 ff ff       	call   c000f59c <malloc>
c0010e2f:	83 c4 10             	add    esp,0x10
c0010e32:	89 c3                	mov    ebx,eax
c0010e34:	83 ec 08             	sub    esp,0x8
c0010e37:	68 00 ff ff 0f       	push   0xfffff00
c0010e3c:	53                   	push   ebx
c0010e3d:	e8 cc 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010e42:	83 c4 10             	add    esp,0x10
c0010e45:	89 1d c4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c4,ebx
c0010e4b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e53:	83 ec 0c             	sub    esp,0xc
c0010e56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e5a:	e8 3d e7 ff ff       	call   c000f59c <malloc>
c0010e5f:	83 c4 10             	add    esp,0x10
c0010e62:	89 c3                	mov    ebx,eax
c0010e64:	83 ec 08             	sub    esp,0x8
c0010e67:	68 02 ff ff 0f       	push   0xfffff02
c0010e6c:	53                   	push   ebx
c0010e6d:	e8 9c 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	89 1d c8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c8,ebx
c0010e7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010e83:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010e88:	7f 7e                	jg     c0010f08 <UnixFile::UnixFile(int)+0x1aa>
c0010e8a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010e92:	83 ec 0c             	sub    esp,0xc
c0010e95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e99:	e8 fe e6 ff ff       	call   c000f59c <malloc>
c0010e9e:	83 c4 10             	add    esp,0x10
c0010ea1:	89 c3                	mov    ebx,eax
c0010ea3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ea7:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010eac:	83 ec 08             	sub    esp,0x8
c0010eaf:	50                   	push   eax
c0010eb0:	53                   	push   ebx
c0010eb1:	e8 58 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010eb6:	83 c4 10             	add    esp,0x10
c0010eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ebd:	89 1c 85 a0 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2960],ebx
c0010ec4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010ecc:	83 ec 0c             	sub    esp,0xc
c0010ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ed3:	e8 c4 e6 ff ff       	call   c000f59c <malloc>
c0010ed8:	83 c4 10             	add    esp,0x10
c0010edb:	89 c3                	mov    ebx,eax
c0010edd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee1:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010ee6:	83 ec 08             	sub    esp,0x8
c0010ee9:	50                   	push   eax
c0010eea:	53                   	push   ebx
c0010eeb:	e8 1e 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ef7:	89 1c 85 60 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd29a0],ebx
c0010efe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f02:	e9 7c ff ff ff       	jmp    c0010e83 <UnixFile::UnixFile(int)+0x125>
c0010f07:	90                   	nop
c0010f08:	83 c4 28             	add    esp,0x28
c0010f0b:	5b                   	pop    ebx
c0010f0c:	c3                   	ret    
c0010f0d:	90                   	nop

c0010f0e <ReservedFilename::ReservedFilename(int)>:
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f15:	83 ec 08             	sub    esp,0x8
c0010f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f1c:	50                   	push   eax
c0010f1d:	e8 3c fe ff ff       	call   c0010d5e <UnixFile::UnixFile(int)>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	ba 08 a0 02 c0       	mov    edx,0xc002a008
c0010f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2e:	89 10                	mov    DWORD PTR [eax],edx
c0010f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f3b:	90                   	nop
c0010f3c:	83 c4 0c             	add    esp,0xc
c0010f3f:	c3                   	ret    

c0010f40 <UnixFile::~UnixFile()>:
c0010f40:	83 ec 1c             	sub    esp,0x1c
c0010f43:	ba ec 9f 02 c0       	mov    edx,0xc0029fec
c0010f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f4c:	89 10                	mov    DWORD PTR [eax],edx
c0010f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f55:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f5a:	7f 73                	jg     c0010fcf <UnixFile::~UnixFile()+0x8f>
c0010f5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f64:	83 ec 0c             	sub    esp,0xc
c0010f67:	68 d8 d6 02 c0       	push   0xc002d6d8
c0010f6c:	e8 e9 73 01 00       	call   c002835a <LinkedList<UnixFile>::getFirstElement()>
c0010f71:	83 c4 10             	add    esp,0x10
c0010f74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f78:	83 ec 0c             	sub    esp,0xc
c0010f7b:	68 d8 d6 02 c0       	push   0xc002d6d8
c0010f80:	e8 dd 73 01 00       	call   c0028362 <LinkedList<UnixFile>::removeFirst()>
c0010f85:	83 c4 10             	add    esp,0x10
c0010f88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f8c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010f90:	74 40                	je     c0010fd2 <UnixFile::~UnixFile()+0x92>
c0010f92:	83 ec 08             	sub    esp,0x8
c0010f95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f99:	68 d8 d6 02 c0       	push   0xc002d6d8
c0010f9e:	e8 e3 72 01 00       	call   c0028286 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010faa:	8d 50 01             	lea    edx,[eax+0x1]
c0010fad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fb1:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fb6:	0f 94 c0             	sete   al
c0010fb9:	84 c0                	test   al,al
c0010fbb:	74 a7                	je     c0010f64 <UnixFile::~UnixFile()+0x24>
c0010fbd:	83 ec 0c             	sub    esp,0xc
c0010fc0:	68 c4 9f 02 c0       	push   0xc0029fc4
c0010fc5:	e8 7b 8c 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	eb 95                	jmp    c0010f64 <UnixFile::~UnixFile()+0x24>
c0010fcf:	90                   	nop
c0010fd0:	eb 01                	jmp    c0010fd3 <UnixFile::~UnixFile()+0x93>
c0010fd2:	90                   	nop
c0010fd3:	90                   	nop
c0010fd4:	83 c4 1c             	add    esp,0x1c
c0010fd7:	c3                   	ret    

c0010fd8 <UnixFile::~UnixFile()>:
c0010fd8:	83 ec 0c             	sub    esp,0xc
c0010fdb:	83 ec 0c             	sub    esp,0xc
c0010fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe2:	e8 59 ff ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	83 ec 08             	sub    esp,0x8
c0010fed:	6a 0c                	push   0xc
c0010fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff3:	e8 3b 14 00 00       	call   c0012433 <operator delete(void*, unsigned long)>
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	83 c4 0c             	add    esp,0xc
c0010ffe:	c3                   	ret    
c0010fff:	90                   	nop

c0011000 <ReservedFilename::~ReservedFilename()>:
c0011000:	83 ec 0c             	sub    esp,0xc
c0011003:	ba 08 a0 02 c0       	mov    edx,0xc002a008
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	89 10                	mov    DWORD PTR [eax],edx
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	83 ec 0c             	sub    esp,0xc
c0011015:	50                   	push   eax
c0011016:	e8 25 ff ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c001101b:	83 c4 10             	add    esp,0x10
c001101e:	90                   	nop
c001101f:	83 c4 0c             	add    esp,0xc
c0011022:	c3                   	ret    
c0011023:	90                   	nop

c0011024 <ReservedFilename::~ReservedFilename()>:
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	83 ec 0c             	sub    esp,0xc
c001102a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102e:	e8 cd ff ff ff       	call   c0011000 <ReservedFilename::~ReservedFilename()>
c0011033:	83 c4 10             	add    esp,0x10
c0011036:	83 ec 08             	sub    esp,0x8
c0011039:	6a 0c                	push   0xc
c001103b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103f:	e8 ef 13 00 00       	call   c0012433 <operator delete(void*, unsigned long)>
c0011044:	83 c4 10             	add    esp,0x10
c0011047:	83 c4 0c             	add    esp,0xc
c001104a:	c3                   	ret    

c001104b <getFromFileDescriptor(int)>:
c001104b:	53                   	push   ebx
c001104c:	83 ec 08             	sub    esp,0x8
c001104f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011053:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011059:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001105f:	7f 2c                	jg     c001108d <getFromFileDescriptor(int)+0x42>
c0011061:	83 ec 0c             	sub    esp,0xc
c0011064:	68 d8 d6 02 c0       	push   0xc002d6d8
c0011069:	e8 ec 72 01 00       	call   c002835a <LinkedList<UnixFile>::getFirstElement()>
c001106e:	83 c4 10             	add    esp,0x10
c0011071:	85 c0                	test   eax,eax
c0011073:	75 04                	jne    c0011079 <getFromFileDescriptor(int)+0x2e>
c0011075:	31 c0                	xor    eax,eax
c0011077:	eb 6e                	jmp    c00110e7 <getFromFileDescriptor(int)+0x9c>
c0011079:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001107c:	74 69                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c001107e:	52                   	push   edx
c001107f:	52                   	push   edx
c0011080:	50                   	push   eax
c0011081:	68 d8 d6 02 c0       	push   0xc002d6d8
c0011086:	e8 79 73 01 00       	call   c0028404 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001108b:	eb e1                	jmp    c001106e <getFromFileDescriptor(int)+0x23>
c001108d:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0011092:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011098:	74 4d                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c001109a:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001109f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110a5:	74 40                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110a7:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c00110ac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110b2:	74 33                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110b4:	a1 c4 d6 02 c0       	mov    eax,ds:0xc002d6c4
c00110b9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110bf:	74 26                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110c1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110c7:	83 f8 08             	cmp    eax,0x8
c00110ca:	77 09                	ja     c00110d5 <getFromFileDescriptor(int)+0x8a>
c00110cc:	8b 04 85 a0 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2960]
c00110d3:	eb 12                	jmp    c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110d5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00110db:	83 fb 08             	cmp    ebx,0x8
c00110de:	77 95                	ja     c0011075 <getFromFileDescriptor(int)+0x2a>
c00110e0:	8b 04 9d 60 d6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd29a0]
c00110e7:	83 c4 08             	add    esp,0x8
c00110ea:	5b                   	pop    ebx
c00110eb:	c3                   	ret    

c00110ec <__static_initialization_and_destruction_0(int, int)>:
c00110ec:	83 ec 0c             	sub    esp,0xc
c00110ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00110f4:	75 34                	jne    c001112a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00110f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00110fe:	75 2a                	jne    c001112a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011100:	83 ec 0c             	sub    esp,0xc
c0011103:	68 d8 d6 02 c0       	push   0xc002d6d8
c0011108:	e8 37 71 01 00       	call   c0028244 <LinkedList<UnixFile>::LinkedList()>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	83 ec 04             	sub    esp,0x4
c0011113:	68 50 c3 02 c0       	push   0xc002c350
c0011118:	68 d8 d6 02 c0       	push   0xc002d6d8
c001111d:	68 42 82 02 c0       	push   0xc0028242
c0011122:	e8 86 12 00 00       	call   c00123ad <__cxa_atexit>
c0011127:	83 c4 10             	add    esp,0x10
c001112a:	90                   	nop
c001112b:	83 c4 0c             	add    esp,0xc
c001112e:	c3                   	ret    

c001112f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001112f:	83 ec 0c             	sub    esp,0xc
c0011132:	83 ec 08             	sub    esp,0x8
c0011135:	68 ff ff 00 00       	push   0xffff
c001113a:	6a 01                	push   0x1
c001113c:	e8 ab ff ff ff       	call   c00110ec <__static_initialization_and_destruction_0(int, int)>
c0011141:	83 c4 10             	add    esp,0x10
c0011144:	83 c4 0c             	add    esp,0xc
c0011147:	c3                   	ret    

c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011148:	53                   	push   ebx
c0011149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001114d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011151:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011157:	89 c8                	mov    eax,ecx
c0011159:	d1 e8                	shr    eax,1
c001115b:	03 05 28 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c528
c0011161:	83 e1 01             	and    ecx,0x1
c0011164:	8a 10                	mov    dl,BYTE PTR [eax]
c0011166:	75 09                	jne    c0011171 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011168:	83 e2 f0             	and    edx,0xfffffff0
c001116b:	09 da                	or     edx,ebx
c001116d:	88 10                	mov    BYTE PTR [eax],dl
c001116f:	5b                   	pop    ebx
c0011170:	c3                   	ret    
c0011171:	c1 e3 04             	shl    ebx,0x4
c0011174:	83 e2 0f             	and    edx,0xf
c0011177:	09 da                	or     edx,ebx
c0011179:	88 10                	mov    BYTE PTR [eax],dl
c001117b:	5b                   	pop    ebx
c001117c:	c3                   	ret    

c001117d <Virt::getPageState(unsigned long)>:
c001117d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011181:	8b 0d 28 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c528
c0011187:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001118d:	89 d0                	mov    eax,edx
c001118f:	d1 e8                	shr    eax,1
c0011191:	83 e2 01             	and    edx,0x1
c0011194:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011197:	75 04                	jne    c001119d <Virt::getPageState(unsigned long)+0x20>
c0011199:	83 e0 0f             	and    eax,0xf
c001119c:	c3                   	ret    
c001119d:	c0 e8 04             	shr    al,0x4
c00111a0:	c3                   	ret    

c00111a1 <Virt::allocateKernelVirtualPages(int)>:
c00111a1:	55                   	push   ebp
c00111a2:	31 ed                	xor    ebp,ebp
c00111a4:	57                   	push   edi
c00111a5:	56                   	push   esi
c00111a6:	53                   	push   ebx
c00111a7:	31 db                	xor    ebx,ebx
c00111a9:	83 ec 1c             	sub    esp,0x1c
c00111ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111b0:	8b 3d 24 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c524
c00111b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111bb:	57                   	push   edi
c00111bc:	e8 bc ff ff ff       	call   c001117d <Virt::getPageState(unsigned long)>
c00111c1:	5a                   	pop    edx
c00111c2:	84 c0                	test   al,al
c00111c4:	75 3a                	jne    c0011200 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111c6:	85 db                	test   ebx,ebx
c00111c8:	75 02                	jne    c00111cc <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111ca:	89 fd                	mov    ebp,edi
c00111cc:	43                   	inc    ebx
c00111cd:	39 f3                	cmp    ebx,esi
c00111cf:	74 5a                	je     c001122b <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111d1:	47                   	inc    edi
c00111d2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00111d8:	76 31                	jbe    c001120b <Virt::allocateKernelVirtualPages(int)+0x6a>
c00111da:	c7 05 24 c5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c524,0xc8000
c00111e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00111e9:	75 28                	jne    c0011213 <Virt::allocateKernelVirtualPages(int)+0x72>
c00111eb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00111f0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00111f5:	57                   	push   edi
c00111f6:	e8 82 ff ff ff       	call   c001117d <Virt::getPageState(unsigned long)>
c00111fb:	5a                   	pop    edx
c00111fc:	84 c0                	test   al,al
c00111fe:	74 c6                	je     c00111c6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011200:	31 db                	xor    ebx,ebx
c0011202:	47                   	inc    edi
c0011203:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011209:	77 cf                	ja     c00111da <Virt::allocateKernelVirtualPages(int)+0x39>
c001120b:	89 3d 24 c5 02 c0    	mov    DWORD PTR ds:0xc002c524,edi
c0011211:	eb a8                	jmp    c00111bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011213:	83 ec 0c             	sub    esp,0xc
c0011216:	68 1c a0 02 c0       	push   0xc002a01c
c001121b:	e8 25 8a 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0011220:	8b 3d 24 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c524
c0011226:	83 c4 10             	add    esp,0x10
c0011229:	eb 90                	jmp    c00111bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c001122b:	89 2d 24 c5 02 c0    	mov    DWORD PTR ds:0xc002c524,ebp
c0011231:	4b                   	dec    ebx
c0011232:	74 5f                	je     c0011293 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011234:	85 f6                	test   esi,esi
c0011236:	74 3d                	je     c0011275 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011238:	89 e8                	mov    eax,ebp
c001123a:	31 db                	xor    ebx,ebx
c001123c:	8d 7e ff             	lea    edi,[esi-0x1]
c001123f:	eb 14                	jmp    c0011255 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011241:	6a 01                	push   0x1
c0011243:	43                   	inc    ebx
c0011244:	50                   	push   eax
c0011245:	e8 fe fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001124a:	58                   	pop    eax
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	5a                   	pop    edx
c001124e:	74 25                	je     c0011275 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011250:	a1 24 c5 02 c0       	mov    eax,ds:0xc002c524
c0011255:	8d 50 01             	lea    edx,[eax+0x1]
c0011258:	85 db                	test   ebx,ebx
c001125a:	89 15 24 c5 02 c0    	mov    DWORD PTR ds:0xc002c524,edx
c0011260:	74 20                	je     c0011282 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011262:	39 df                	cmp    edi,ebx
c0011264:	75 db                	jne    c0011241 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011266:	6a 03                	push   0x3
c0011268:	43                   	inc    ebx
c0011269:	50                   	push   eax
c001126a:	e8 d9 fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001126f:	59                   	pop    ecx
c0011270:	39 f3                	cmp    ebx,esi
c0011272:	58                   	pop    eax
c0011273:	75 db                	jne    c0011250 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011275:	83 c4 1c             	add    esp,0x1c
c0011278:	89 e8                	mov    eax,ebp
c001127a:	5b                   	pop    ebx
c001127b:	c1 e0 0c             	shl    eax,0xc
c001127e:	5e                   	pop    esi
c001127f:	5f                   	pop    edi
c0011280:	5d                   	pop    ebp
c0011281:	c3                   	ret    
c0011282:	6a 02                	push   0x2
c0011284:	bb 01 00 00 00       	mov    ebx,0x1
c0011289:	50                   	push   eax
c001128a:	e8 b9 fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001128f:	58                   	pop    eax
c0011290:	5a                   	pop    edx
c0011291:	eb bd                	jmp    c0011250 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011293:	6a 04                	push   0x4
c0011295:	8d 45 01             	lea    eax,[ebp+0x1]
c0011298:	55                   	push   ebp
c0011299:	a3 24 c5 02 c0       	mov    ds:0xc002c524,eax
c001129e:	e8 a5 fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112a3:	59                   	pop    ecx
c00112a4:	89 e8                	mov    eax,ebp
c00112a6:	5b                   	pop    ebx
c00112a7:	c1 e0 0c             	shl    eax,0xc
c00112aa:	83 c4 1c             	add    esp,0x1c
c00112ad:	5b                   	pop    ebx
c00112ae:	5e                   	pop    esi
c00112af:	5f                   	pop    edi
c00112b0:	5d                   	pop    ebp
c00112b1:	c3                   	ret    

c00112b2 <Virt::freeSwapfilePage(unsigned long)>:
c00112b2:	53                   	push   ebx
c00112b3:	8b 15 ec d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ec
c00112b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112bd:	b8 01 00 00 00       	mov    eax,0x1
c00112c2:	89 cb                	mov    ebx,ecx
c00112c4:	d3 e0                	shl    eax,cl
c00112c6:	c1 eb 05             	shr    ebx,0x5
c00112c9:	f7 d0                	not    eax
c00112cb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112ce:	5b                   	pop    ebx
c00112cf:	c3                   	ret    

c00112d0 <Virt::swapIDToSector(unsigned long)>:
c00112d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d4:	0f af 05 2c c5 02 c0 	imul   eax,DWORD PTR ds:0xc002c52c
c00112db:	03 05 34 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c534
c00112e1:	c3                   	ret    

c00112e2 <Virt::allocateSwapfilePage()>:
c00112e2:	55                   	push   ebp
c00112e3:	31 d2                	xor    edx,edx
c00112e5:	57                   	push   edi
c00112e6:	56                   	push   esi
c00112e7:	53                   	push   ebx
c00112e8:	83 ec 0c             	sub    esp,0xc
c00112eb:	8b 0d 2c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c52c
c00112f1:	a1 30 c5 02 c0       	mov    eax,ds:0xc002c530
c00112f6:	f7 f1                	div    ecx
c00112f8:	39 0d 30 c5 02 c0    	cmp    DWORD PTR ds:0xc002c530,ecx
c00112fe:	72 2d                	jb     c001132d <Virt::allocateSwapfilePage()+0x4b>
c0011300:	8b 35 ec d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6ec
c0011306:	8b 16                	mov    edx,DWORD PTR [esi]
c0011308:	f6 c2 01             	test   dl,0x1
c001130b:	74 3c                	je     c0011349 <Virt::allocateSwapfilePage()+0x67>
c001130d:	31 c9                	xor    ecx,ecx
c001130f:	bf 01 00 00 00       	mov    edi,0x1
c0011314:	eb 12                	jmp    c0011328 <Virt::allocateSwapfilePage()+0x46>
c0011316:	89 fd                	mov    ebp,edi
c0011318:	89 ca                	mov    edx,ecx
c001131a:	d3 e5                	shl    ebp,cl
c001131c:	c1 ea 05             	shr    edx,0x5
c001131f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011322:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011324:	85 ea                	test   edx,ebp
c0011326:	74 2a                	je     c0011352 <Virt::allocateSwapfilePage()+0x70>
c0011328:	41                   	inc    ecx
c0011329:	39 c8                	cmp    eax,ecx
c001132b:	77 e9                	ja     c0011316 <Virt::allocateSwapfilePage()+0x34>
c001132d:	83 ec 0c             	sub    esp,0xc
c0011330:	68 a3 a1 02 c0       	push   0xc002a1a3
c0011335:	e8 0b 89 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c001133a:	83 c4 10             	add    esp,0x10
c001133d:	31 c9                	xor    ecx,ecx
c001133f:	83 c4 0c             	add    esp,0xc
c0011342:	89 c8                	mov    eax,ecx
c0011344:	5b                   	pop    ebx
c0011345:	5e                   	pop    esi
c0011346:	5f                   	pop    edi
c0011347:	5d                   	pop    ebp
c0011348:	c3                   	ret    
c0011349:	89 f3                	mov    ebx,esi
c001134b:	bd 01 00 00 00       	mov    ebp,0x1
c0011350:	31 c9                	xor    ecx,ecx
c0011352:	09 ea                	or     edx,ebp
c0011354:	89 c8                	mov    eax,ecx
c0011356:	89 13                	mov    DWORD PTR [ebx],edx
c0011358:	83 c4 0c             	add    esp,0xc
c001135b:	5b                   	pop    ebx
c001135c:	5e                   	pop    esi
c001135d:	5f                   	pop    edi
c001135e:	5d                   	pop    ebp
c001135f:	c3                   	ret    

c0011360 <Virt::virtualMemorySetup()>:
c0011360:	53                   	push   ebx
c0011361:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011366:	6a 0f                	push   0xf
c0011368:	53                   	push   ebx
c0011369:	43                   	inc    ebx
c001136a:	e8 d9 fd ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136f:	58                   	pop    eax
c0011370:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011376:	5a                   	pop    edx
c0011377:	75 ed                	jne    c0011366 <Virt::virtualMemorySetup()+0x6>
c0011379:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001137e:	6a 00                	push   0x0
c0011380:	53                   	push   ebx
c0011381:	43                   	inc    ebx
c0011382:	e8 c1 fd ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011387:	59                   	pop    ecx
c0011388:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001138e:	58                   	pop    eax
c001138f:	75 ed                	jne    c001137e <Virt::virtualMemorySetup()+0x1e>
c0011391:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011396:	6a 0f                	push   0xf
c0011398:	53                   	push   ebx
c0011399:	43                   	inc    ebx
c001139a:	e8 a9 fd ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001139f:	58                   	pop    eax
c00113a0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113a6:	5a                   	pop    edx
c00113a7:	75 ed                	jne    c0011396 <Virt::virtualMemorySetup()+0x36>
c00113a9:	5b                   	pop    ebx
c00113aa:	c3                   	ret    

c00113ab <Virt::setupPageSwapping(int)>:
c00113ab:	57                   	push   edi
c00113ac:	56                   	push   esi
c00113ad:	53                   	push   ebx
c00113ae:	83 ec 1c             	sub    esp,0x1c
c00113b1:	68 14 01 00 00       	push   0x114
c00113b6:	e8 e1 e1 ff ff       	call   c000f59c <malloc>
c00113bb:	83 c4 0c             	add    esp,0xc
c00113be:	89 c6                	mov    esi,eax
c00113c0:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c00113c6:	68 ba a1 02 c0       	push   0xc002a1ba
c00113cb:	50                   	push   eax
c00113cc:	e8 99 16 00 00       	call   c0012a6a <File::File(char const*, Process*)>
c00113d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00113d4:	e8 6d 18 00 00       	call   c0012c46 <File::unlink()>
c00113d9:	58                   	pop    eax
c00113da:	5a                   	pop    edx
c00113db:	6a 12                	push   0x12
c00113dd:	56                   	push   esi
c00113de:	e8 eb 16 00 00       	call   c0012ace <File::open(FileOpenMode)>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	85 c0                	test   eax,eax
c00113e8:	0f 85 2f 01 00 00    	jne    c001151d <Virt::setupPageSwapping(int)+0x172>
c00113ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113fa:	c1 e3 08             	shl    ebx,0x8
c00113fd:	83 ec 0c             	sub    esp,0xc
c0011400:	68 00 00 01 00       	push   0x10000
c0011405:	e8 92 e1 ff ff       	call   c000f59c <malloc>
c001140a:	83 c4 0c             	add    esp,0xc
c001140d:	89 c7                	mov    edi,eax
c001140f:	68 00 00 01 00       	push   0x10000
c0011414:	68 ee 00 00 00       	push   0xee
c0011419:	50                   	push   eax
c001141a:	e8 31 f3 fe ff       	call   c0000750 <memset>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	85 db                	test   ebx,ebx
c0011424:	79 03                	jns    c0011429 <Virt::setupPageSwapping(int)+0x7e>
c0011426:	83 c3 0f             	add    ebx,0xf
c0011429:	c1 fb 04             	sar    ebx,0x4
c001142c:	4b                   	dec    ebx
c001142d:	83 fb ff             	cmp    ebx,0xffffffff
c0011430:	74 41                	je     c0011473 <Virt::setupPageSwapping(int)+0xc8>
c0011432:	83 ec 0c             	sub    esp,0xc
c0011435:	8b 06                	mov    eax,DWORD PTR [esi]
c0011437:	8d 54 24 18          	lea    edx,[esp+0x18]
c001143b:	52                   	push   edx
c001143c:	57                   	push   edi
c001143d:	6a 00                	push   0x0
c001143f:	68 00 00 01 00       	push   0x10000
c0011444:	56                   	push   esi
c0011445:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011448:	83 c4 20             	add    esp,0x20
c001144b:	85 c0                	test   eax,eax
c001144d:	0f 85 b5 00 00 00    	jne    c0011508 <Virt::setupPageSwapping(int)+0x15d>
c0011453:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c001145b:	74 cf                	je     c001142c <Virt::setupPageSwapping(int)+0x81>
c001145d:	83 ec 0c             	sub    esp,0xc
c0011460:	4b                   	dec    ebx
c0011461:	68 ec a1 02 c0       	push   0xc002a1ec
c0011466:	e8 da 87 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c001146b:	83 c4 10             	add    esp,0x10
c001146e:	83 fb ff             	cmp    ebx,0xffffffff
c0011471:	75 bf                	jne    c0011432 <Virt::setupPageSwapping(int)+0x87>
c0011473:	83 ec 0c             	sub    esp,0xc
c0011476:	56                   	push   esi
c0011477:	e8 b0 16 00 00       	call   c0012b2c <File::close()>
c001147c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001147f:	e8 38 e1 ff ff       	call   c000f5bc <rfree>
c0011484:	83 c4 10             	add    esp,0x10
c0011487:	85 f6                	test   esi,esi
c0011489:	74 0c                	je     c0011497 <Virt::setupPageSwapping(int)+0xec>
c001148b:	83 ec 0c             	sub    esp,0xc
c001148e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011490:	56                   	push   esi
c0011491:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011494:	83 c4 10             	add    esp,0x10
c0011497:	83 ec 08             	sub    esp,0x8
c001149a:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001149f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00114a7:	68 ba a1 02 c0       	push   0xc002a1ba
c00114ac:	50                   	push   eax
c00114ad:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114b4:	c6 05 38 c5 02 c0 43 	mov    BYTE PTR ds:0xc002c538,0x43
c00114bb:	c1 e2 0b             	shl    edx,0xb
c00114be:	a3 34 c5 02 c0       	mov    ds:0xc002c534,eax
c00114c3:	89 15 30 c5 02 c0    	mov    DWORD PTR ds:0xc002c530,edx
c00114c9:	c7 05 2c c5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c52c,0x8
c00114d3:	c1 ea 08             	shr    edx,0x8
c00114d6:	89 14 24             	mov    DWORD PTR [esp],edx
c00114d9:	e8 be e0 ff ff       	call   c000f59c <malloc>
c00114de:	83 c4 0c             	add    esp,0xc
c00114e1:	89 c1                	mov    ecx,eax
c00114e3:	a3 ec d6 02 c0       	mov    ds:0xc002d6ec,eax
c00114e8:	31 d2                	xor    edx,edx
c00114ea:	a1 30 c5 02 c0       	mov    eax,ds:0xc002c530
c00114ef:	f7 35 2c c5 02 c0    	div    DWORD PTR ds:0xc002c52c
c00114f5:	c1 e8 05             	shr    eax,0x5
c00114f8:	50                   	push   eax
c00114f9:	6a 00                	push   0x0
c00114fb:	51                   	push   ecx
c00114fc:	e8 4f f2 fe ff       	call   c0000750 <memset>
c0011501:	83 c4 20             	add    esp,0x20
c0011504:	5b                   	pop    ebx
c0011505:	5e                   	pop    esi
c0011506:	5f                   	pop    edi
c0011507:	c3                   	ret    
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	68 ec a1 02 c0       	push   0xc002a1ec
c0011510:	e8 30 87 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	e9 36 ff ff ff       	jmp    c0011453 <Virt::setupPageSwapping(int)+0xa8>
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	68 d1 a1 02 c0       	push   0xc002a1d1
c0011525:	e8 1b 87 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	e9 bc fe ff ff       	jmp    c00113ee <Virt::setupPageSwapping(int)+0x43>

c0011532 <VAS::VAS()>:
c0011532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011536:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001153d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011541:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154c:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c0011551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011555:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155d:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011564:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001156b:	90                   	nop
c001156c:	c3                   	ret    
c001156d:	90                   	nop

c001156e <VAS::VAS(VAS*)>:
c001156e:	83 ec 0c             	sub    esp,0xc
c0011571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011575:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001157c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011580:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011587:	83 ec 0c             	sub    esp,0xc
c001158a:	68 3c a0 02 c0       	push   0xc002a03c
c001158f:	e8 b1 86 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0011594:	83 c4 10             	add    esp,0x10
c0011597:	90                   	nop
c0011598:	83 c4 0c             	add    esp,0xc
c001159b:	c3                   	ret    

c001159c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001159c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115a0:	89 c2                	mov    edx,eax
c00115a2:	c1 e8 0a             	shr    eax,0xa
c00115a5:	c1 ea 16             	shr    edx,0x16
c00115a8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115ad:	19 c9                	sbb    ecx,ecx
c00115af:	c1 e2 0c             	shl    edx,0xc
c00115b2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115b8:	25 fc 0f 00 00       	and    eax,0xffc
c00115bd:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115c4:	01 d0                	add    eax,edx
c00115c6:	c3                   	ret    
c00115c7:	90                   	nop

c00115c8 <VAS::getPageTableEntry(unsigned long)>:
c00115c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115cc:	89 ca                	mov    edx,ecx
c00115ce:	c1 e9 0a             	shr    ecx,0xa
c00115d1:	c1 ea 16             	shr    edx,0x16
c00115d4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115da:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115e0:	c1 e0 0c             	shl    eax,0xc
c00115e3:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115e6:	c3                   	ret    

c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115e7:	57                   	push   edi
c00115e8:	56                   	push   esi
c00115e9:	be 01 00 00 00       	mov    esi,0x1
c00115ee:	53                   	push   ebx
c00115ef:	83 ec 10             	sub    esp,0x10
c00115f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115f6:	c1 eb 0c             	shr    ebx,0xc
c00115f9:	eb 3f                	jmp    c001163a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115fb:	83 ec 08             	sub    esp,0x8
c00115fe:	57                   	push   edi
c00115ff:	ff 35 f0 d6 02 c0    	push   DWORD PTR ds:0xc002d6f0
c0011605:	e8 be ff ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001160a:	83 c4 10             	add    esp,0x10
c001160d:	8b 00                	mov    eax,DWORD PTR [eax]
c001160f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011613:	f6 c4 04             	test   ah,0x4
c0011616:	75 5f                	jne    c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011618:	80 fa 04             	cmp    dl,0x4
c001161b:	74 78                	je     c0011695 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001161d:	80 fa 02             	cmp    dl,0x2
c0011620:	0f 84 88 00 00 00    	je     c00116ae <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011626:	80 fa 03             	cmp    dl,0x3
c0011629:	0f 84 ad 00 00 00    	je     c00116dc <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001162f:	fe ca                	dec    dl
c0011631:	0f 84 92 00 00 00    	je     c00116c9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011637:	43                   	inc    ebx
c0011638:	31 f6                	xor    esi,esi
c001163a:	53                   	push   ebx
c001163b:	89 df                	mov    edi,ebx
c001163d:	e8 3b fb ff ff       	call   c001117d <Virt::getPageState(unsigned long)>
c0011642:	c1 e7 0c             	shl    edi,0xc
c0011645:	59                   	pop    ecx
c0011646:	84 c0                	test   al,al
c0011648:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001164c:	75 ad                	jne    c00115fb <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001164e:	83 ec 0c             	sub    esp,0xc
c0011651:	68 f2 a1 02 c0       	push   0xc002a1f2
c0011656:	e8 ea 85 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c001165b:	58                   	pop    eax
c001165c:	5a                   	pop    edx
c001165d:	57                   	push   edi
c001165e:	ff 35 f0 d6 02 c0    	push   DWORD PTR ds:0xc002d6f0
c0011664:	e8 5f ff ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	8b 00                	mov    eax,DWORD PTR [eax]
c001166e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011672:	f6 c4 04             	test   ah,0x4
c0011675:	74 c0                	je     c0011637 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011677:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001167b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	50                   	push   eax
c0011684:	e8 5c e2 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011690:	80 fa 04             	cmp    dl,0x4
c0011693:	75 88                	jne    c001161d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011695:	89 f0                	mov    eax,esi
c0011697:	84 c0                	test   al,al
c0011699:	75 47                	jne    c00116e2 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001169b:	c7 44 24 20 60 a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a060
c00116a3:	83 c4 10             	add    esp,0x10
c00116a6:	5b                   	pop    ebx
c00116a7:	5e                   	pop    esi
c00116a8:	5f                   	pop    edi
c00116a9:	e9 97 85 00 00       	jmp    c0019c45 <Krnl::panic(char const*)>
c00116ae:	89 f0                	mov    eax,esi
c00116b0:	84 c0                	test   al,al
c00116b2:	75 15                	jne    c00116c9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b4:	83 ec 0c             	sub    esp,0xc
c00116b7:	68 0e a2 02 c0       	push   0xc002a20e
c00116bc:	e8 84 85 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c00116c1:	83 c4 10             	add    esp,0x10
c00116c4:	e9 6e ff ff ff       	jmp    c0011637 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116c9:	83 ec 08             	sub    esp,0x8
c00116cc:	6a 00                	push   0x0
c00116ce:	53                   	push   ebx
c00116cf:	e8 74 fa ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d4:	83 c4 10             	add    esp,0x10
c00116d7:	e9 5b ff ff ff       	jmp    c0011637 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116dc:	89 f0                	mov    eax,esi
c00116de:	84 c0                	test   al,al
c00116e0:	75 15                	jne    c00116f7 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116e2:	83 ec 08             	sub    esp,0x8
c00116e5:	6a 00                	push   0x0
c00116e7:	53                   	push   ebx
c00116e8:	e8 5b fa ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ed:	83 c4 10             	add    esp,0x10
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	5b                   	pop    ebx
c00116f4:	5e                   	pop    esi
c00116f5:	5f                   	pop    edi
c00116f6:	c3                   	ret    
c00116f7:	c7 44 24 20 2a a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a22a
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	5b                   	pop    ebx
c0011703:	5e                   	pop    esi
c0011704:	5f                   	pop    edi
c0011705:	e9 3b 85 00 00       	jmp    c0019c45 <Krnl::panic(char const*)>

c001170a <VAS::freeAllocatedPages(unsigned long)>:
c001170a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001170e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011712:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011716:	74 09                	je     c0011721 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001171c:	e9 c6 fe ff ff       	jmp    c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011721:	c7 44 24 04 84 a0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a084
c0011729:	e9 dd 0d 00 00       	jmp    c001250b <Dbg::kprintf(char const*, ...)>

c001172e <VAS::virtualToPhysical(unsigned long)>:
c001172e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011732:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011736:	e8 8d fe ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001173b:	5a                   	pop    edx
c001173c:	8b 00                	mov    eax,DWORD PTR [eax]
c001173e:	59                   	pop    ecx
c001173f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011744:	c3                   	ret    
c0011745:	90                   	nop

c0011746 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011746:	55                   	push   ebp
c0011747:	57                   	push   edi
c0011748:	56                   	push   esi
c0011749:	53                   	push   ebx
c001174a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001174e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011752:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011756:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001175a:	85 db                	test   ebx,ebx
c001175c:	7e 22                	jle    c0011780 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001175e:	c1 e3 0c             	shl    ebx,0xc
c0011761:	01 f3                	add    ebx,esi
c0011763:	56                   	push   esi
c0011764:	81 c6 00 10 00 00    	add    esi,0x1000
c001176a:	55                   	push   ebp
c001176b:	e8 58 fe ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0011770:	5a                   	pop    edx
c0011771:	59                   	pop    ecx
c0011772:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011774:	21 f9                	and    ecx,edi
c0011776:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001177a:	39 f3                	cmp    ebx,esi
c001177c:	89 08                	mov    DWORD PTR [eax],ecx
c001177e:	75 e3                	jne    c0011763 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011780:	5b                   	pop    ebx
c0011781:	5e                   	pop    esi
c0011782:	5f                   	pop    edi
c0011783:	5d                   	pop    ebp
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <VAS::setToWriteCombining(unsigned long, int)>:
c0011786:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001178b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011791:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011798:	75 01                	jne    c001179b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001179a:	c3                   	ret    
c001179b:	68 80 00 00 00       	push   0x80
c00117a0:	6a ff                	push   0xffffffff
c00117a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117ae:	e8 93 ff ff ff       	call   c0011746 <VAS::reflagRange(unsigned long, int, int, int)>
c00117b3:	83 c4 14             	add    esp,0x14
c00117b6:	c3                   	ret    
c00117b7:	90                   	nop

c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117c1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00117c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00117cb:	19 c0                	sbb    eax,eax
c00117cd:	83 ca 03             	or     edx,0x3
c00117d0:	83 e0 fc             	and    eax,0xfffffffc
c00117d3:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117da:	0f 20 d8             	mov    eax,cr3
c00117dd:	0f 22 d8             	mov    cr3,eax
c00117e0:	c3                   	ret    
c00117e1:	90                   	nop

c00117e2 <VAS::~VAS()>:
c00117e2:	83 ec 2c             	sub    esp,0x2c
c00117e5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117ed:	fa                   	cli    
c00117ee:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c00117f3:	40                   	inc    eax
c00117f4:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c00117f9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011800:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011803:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011809:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001180d:	6a 01                	push   0x1
c001180f:	50                   	push   eax
c0011810:	e8 a3 ff ff ff       	call   c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>
c0011815:	83 c4 0c             	add    esp,0xc
c0011818:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011820:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011828:	0f 8f d4 00 00 00    	jg     c0011902 <VAS::~VAS()+0x120>
c001182e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011832:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011839:	c1 e2 02             	shl    edx,0x2
c001183c:	01 d0                	add    eax,edx
c001183e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011848:	83 e0 01             	and    eax,0x1
c001184b:	0f 84 a8 00 00 00    	je     c00118f9 <VAS::~VAS()+0x117>
c0011851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011859:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011861:	7f 72                	jg     c00118d5 <VAS::~VAS()+0xf3>
c0011863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011867:	c1 e0 0a             	shl    eax,0xa
c001186a:	89 c2                	mov    edx,eax
c001186c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011870:	01 d0                	add    eax,edx
c0011872:	c1 e0 0c             	shl    eax,0xc
c0011875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011879:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011883:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011889:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001188d:	6a 01                	push   0x1
c001188f:	50                   	push   eax
c0011890:	e8 07 fd ff ff       	call   c001159c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011895:	83 c4 0c             	add    esp,0xc
c0011898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001189c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118aa:	25 01 04 00 00       	and    eax,0x401
c00118af:	3d 01 04 00 00       	cmp    eax,0x401
c00118b4:	75 19                	jne    c00118cf <VAS::~VAS()+0xed>
c00118b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118bf:	83 ec 0c             	sub    esp,0xc
c00118c2:	50                   	push   eax
c00118c3:	e8 1d e0 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118cf:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118d3:	eb 84                	jmp    c0011859 <VAS::~VAS()+0x77>
c00118d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d9:	25 00 04 00 00       	and    eax,0x400
c00118de:	74 19                	je     c00118f9 <VAS::~VAS()+0x117>
c00118e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e9:	83 ec 0c             	sub    esp,0xc
c00118ec:	50                   	push   eax
c00118ed:	e8 f3 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118fd:	e9 1e ff ff ff       	jmp    c0011820 <VAS::~VAS()+0x3e>
c0011902:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011906:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011909:	83 ec 0c             	sub    esp,0xc
c001190c:	50                   	push   eax
c001190d:	e8 d5 fc ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011912:	83 c4 10             	add    esp,0x10
c0011915:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011919:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001191c:	83 ec 0c             	sub    esp,0xc
c001191f:	50                   	push   eax
c0011920:	e8 c0 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001192c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011930:	c1 e0 02             	shl    eax,0x2
c0011933:	83 ec 08             	sub    esp,0x8
c0011936:	50                   	push   eax
c0011937:	68 a8 a0 02 c0       	push   0xc002a0a8
c001193c:	e8 ca 0b 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0011949:	48                   	dec    eax
c001194a:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001194f:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0011954:	85 c0                	test   eax,eax
c0011956:	75 01                	jne    c0011959 <VAS::~VAS()+0x177>
c0011958:	fb                   	sti    
c0011959:	90                   	nop
c001195a:	83 c4 2c             	add    esp,0x2c
c001195d:	c3                   	ret    

c001195e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001195e:	55                   	push   ebp
c001195f:	57                   	push   edi
c0011960:	56                   	push   esi
c0011961:	53                   	push   ebx
c0011962:	83 ec 1c             	sub    esp,0x1c
c0011965:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011969:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001196d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011973:	77 08                	ja     c001197d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011975:	0f 20 d8             	mov    eax,cr3
c0011978:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001197b:	75 47                	jne    c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001197d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011981:	09 d8                	or     eax,ebx
c0011983:	a9 ff 0f 00 00       	test   eax,0xfff
c0011988:	75 57                	jne    c00119e1 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001198a:	89 de                	mov    esi,ebx
c001198c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001198f:	c1 ee 16             	shr    esi,0x16
c0011992:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011999:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001199d:	74 54                	je     c00119f3 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001199f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119a3:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119a9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119ad:	c1 e6 0c             	shl    esi,0xc
c00119b0:	c1 eb 0a             	shr    ebx,0xa
c00119b3:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119b9:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119bc:	83 c4 1c             	add    esp,0x1c
c00119bf:	5b                   	pop    ebx
c00119c0:	5e                   	pop    esi
c00119c1:	5f                   	pop    edi
c00119c2:	5d                   	pop    ebp
c00119c3:	c3                   	ret    
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	68 c8 a0 02 c0       	push   0xc002a0c8
c00119cc:	e8 3a 0b 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119d8:	09 d8                	or     eax,ebx
c00119da:	a9 ff 0f 00 00       	test   eax,0xfff
c00119df:	74 a9                	je     c001198a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119e1:	83 ec 0c             	sub    esp,0xc
c00119e4:	68 30 a1 02 c0       	push   0xc002a130
c00119e9:	e8 57 82 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	eb 97                	jmp    c001198a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f7:	e8 44 df ff ff       	call   c000f940 <Phys::allocatePage()>
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	89 c5                	mov    ebp,eax
c0011a01:	8b 0d f0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6f0
c0011a07:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a0b:	6a 01                	push   0x1
c0011a0d:	e8 8f f7 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011a12:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a19:	6a 01                	push   0x1
c0011a1b:	50                   	push   eax
c0011a1c:	55                   	push   ebp
c0011a1d:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a23:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a27:	51                   	push   ecx
c0011a28:	e8 27 02 00 00       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a2d:	83 c4 1c             	add    esp,0x1c
c0011a30:	68 00 10 00 00       	push   0x1000
c0011a35:	6a 00                	push   0x0
c0011a37:	50                   	push   eax
c0011a38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a3c:	e8 0f ed fe ff       	call   c0000750 <memset>
c0011a41:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a45:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a48:	e8 9a fb ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a51:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a5a:	e9 40 ff ff ff       	jmp    c001199f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011a5f:	90                   	nop

c0011a60 <VAS::allocatePages(int, int)>:
c0011a60:	55                   	push   ebp
c0011a61:	57                   	push   edi
c0011a62:	56                   	push   esi
c0011a63:	53                   	push   ebx
c0011a64:	83 ec 1c             	sub    esp,0x1c
c0011a67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a6b:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0011a70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a76:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a7c:	83 e0 01             	and    eax,0x1
c0011a7f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a87:	0f 85 cc 00 00 00    	jne    c0011b59 <VAS::allocatePages(int, int)+0xf9>
c0011a8d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a94:	85 c0                	test   eax,eax
c0011a96:	0f 84 a1 00 00 00    	je     c0011b3d <VAS::allocatePages(int, int)+0xdd>
c0011a9c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011aa0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aa4:	c1 e6 0c             	shl    esi,0xc
c0011aa7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011aab:	85 c0                	test   eax,eax
c0011aad:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ab0:	7e 33                	jle    c0011ae5 <VAS::allocatePages(int, int)+0x85>
c0011ab2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ab6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aba:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ac0:	e8 7b de ff ff       	call   c000f940 <Phys::allocatePage()>
c0011ac5:	55                   	push   ebp
c0011ac6:	53                   	push   ebx
c0011ac7:	50                   	push   eax
c0011ac8:	57                   	push   edi
c0011ac9:	e8 90 fe ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ace:	83 c4 10             	add    esp,0x10
c0011ad1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ad6:	74 03                	je     c0011adb <VAS::allocatePages(int, int)+0x7b>
c0011ad8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011adb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ae1:	39 de                	cmp    esi,ebx
c0011ae3:	75 db                	jne    c0011ac0 <VAS::allocatePages(int, int)+0x60>
c0011ae5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011aea:	75 12                	jne    c0011afe <VAS::allocatePages(int, int)+0x9e>
c0011aec:	0f 20 d8             	mov    eax,cr3
c0011aef:	0f 22 d8             	mov    cr3,eax
c0011af2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af6:	83 c4 1c             	add    esp,0x1c
c0011af9:	5b                   	pop    ebx
c0011afa:	5e                   	pop    esi
c0011afb:	5f                   	pop    edi
c0011afc:	5d                   	pop    ebp
c0011afd:	c3                   	ret    
c0011afe:	c1 ee 0a             	shr    esi,0xa
c0011b01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b05:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b0b:	c1 eb 0a             	shr    ebx,0xa
c0011b0e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b14:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b1a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b20:	39 c3                	cmp    ebx,eax
c0011b22:	77 ce                	ja     c0011af2 <VAS::allocatePages(int, int)+0x92>
c0011b24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b2d:	39 d8                	cmp    eax,ebx
c0011b2f:	73 f3                	jae    c0011b24 <VAS::allocatePages(int, int)+0xc4>
c0011b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b35:	83 c4 1c             	add    esp,0x1c
c0011b38:	5b                   	pop    ebx
c0011b39:	5e                   	pop    esi
c0011b3a:	5f                   	pop    edi
c0011b3b:	5d                   	pop    ebp
c0011b3c:	c3                   	ret    
c0011b3d:	83 ec 0c             	sub    esp,0xc
c0011b40:	68 54 a1 02 c0       	push   0xc002a154
c0011b45:	e8 fb 80 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0011b4a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b51:	83 c4 10             	add    esp,0x10
c0011b54:	e9 43 ff ff ff       	jmp    c0011a9c <VAS::allocatePages(int, int)+0x3c>
c0011b59:	83 ec 0c             	sub    esp,0xc
c0011b5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b60:	e8 3c f6 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b71:	0f 87 9b 00 00 00    	ja     c0011c12 <VAS::allocatePages(int, int)+0x1b2>
c0011b77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b7b:	85 d2                	test   edx,edx
c0011b7d:	7e 3c                	jle    c0011bbb <VAS::allocatePages(int, int)+0x15b>
c0011b7f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b8b:	c1 e5 0c             	shl    ebp,0xc
c0011b8e:	81 ce 00 04 00 00    	or     esi,0x400
c0011b94:	01 dd                	add    ebp,ebx
c0011b96:	e8 a5 dd ff ff       	call   c000f940 <Phys::allocatePage()>
c0011b9b:	56                   	push   esi
c0011b9c:	53                   	push   ebx
c0011b9d:	50                   	push   eax
c0011b9e:	57                   	push   edi
c0011b9f:	e8 ba fd ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bac:	74 03                	je     c0011bb1 <VAS::allocatePages(int, int)+0x151>
c0011bae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bb7:	39 dd                	cmp    ebp,ebx
c0011bb9:	75 db                	jne    c0011b96 <VAS::allocatePages(int, int)+0x136>
c0011bbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bc0:	0f 84 26 ff ff ff    	je     c0011aec <VAS::allocatePages(int, int)+0x8c>
c0011bc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bce:	89 d3                	mov    ebx,edx
c0011bd0:	c1 e0 0c             	shl    eax,0xc
c0011bd3:	c1 eb 0a             	shr    ebx,0xa
c0011bd6:	01 d0                	add    eax,edx
c0011bd8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bde:	c1 e8 0a             	shr    eax,0xa
c0011be1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011be7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bec:	2d 00 00 40 00       	sub    eax,0x400000
c0011bf1:	39 c3                	cmp    ebx,eax
c0011bf3:	0f 87 f9 fe ff ff    	ja     c0011af2 <VAS::allocatePages(int, int)+0x92>
c0011bf9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bfc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c02:	39 d8                	cmp    eax,ebx
c0011c04:	73 f3                	jae    c0011bf9 <VAS::allocatePages(int, int)+0x199>
c0011c06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c0a:	83 c4 1c             	add    esp,0x1c
c0011c0d:	5b                   	pop    ebx
c0011c0e:	5e                   	pop    esi
c0011c0f:	5f                   	pop    edi
c0011c10:	5d                   	pop    ebp
c0011c11:	c3                   	ret    
c0011c12:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0011c17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c1d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c24:	0f 84 4d ff ff ff    	je     c0011b77 <VAS::allocatePages(int, int)+0x117>
c0011c2a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c32:	e9 40 ff ff ff       	jmp    c0011b77 <VAS::allocatePages(int, int)+0x117>
c0011c37:	90                   	nop

c0011c38 <VAS::setCPUSpecific(unsigned long)>:
c0011c38:	83 ec 0c             	sub    esp,0xc
c0011c3b:	6a 05                	push   0x5
c0011c3d:	68 00 00 40 c2       	push   0xc2400000
c0011c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c4a:	e8 0f fd ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c4f:	83 c4 1c             	add    esp,0x1c
c0011c52:	c3                   	ret    
c0011c53:	90                   	nop

c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c54:	55                   	push   ebp
c0011c55:	57                   	push   edi
c0011c56:	56                   	push   esi
c0011c57:	53                   	push   ebx
c0011c58:	83 ec 1c             	sub    esp,0x1c
c0011c5b:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0011c60:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c6a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c6e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c74:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c78:	83 e0 01             	and    eax,0x1
c0011c7b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c83:	85 c0                	test   eax,eax
c0011c85:	7e 39                	jle    c0011cc0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011c87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c8b:	89 f3                	mov    ebx,esi
c0011c8d:	c1 e0 0c             	shl    eax,0xc
c0011c90:	01 f0                	add    eax,esi
c0011c92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c96:	55                   	push   ebp
c0011c97:	53                   	push   ebx
c0011c98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c9c:	29 f0                	sub    eax,esi
c0011c9e:	01 d8                	add    eax,ebx
c0011ca0:	50                   	push   eax
c0011ca1:	57                   	push   edi
c0011ca2:	e8 b7 fc ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011caf:	74 03                	je     c0011cb4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011cb1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cb4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cba:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011cbe:	75 d6                	jne    c0011c96 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011cc0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc5:	75 10                	jne    c0011cd7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011cc7:	0f 20 d8             	mov    eax,cr3
c0011cca:	0f 22 d8             	mov    cr3,eax
c0011ccd:	83 c4 1c             	add    esp,0x1c
c0011cd0:	89 f0                	mov    eax,esi
c0011cd2:	5b                   	pop    ebx
c0011cd3:	5e                   	pop    esi
c0011cd4:	5f                   	pop    edi
c0011cd5:	5d                   	pop    ebp
c0011cd6:	c3                   	ret    
c0011cd7:	89 f3                	mov    ebx,esi
c0011cd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cdd:	c1 eb 0a             	shr    ebx,0xa
c0011ce0:	c1 e0 0c             	shl    eax,0xc
c0011ce3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ce9:	01 f0                	add    eax,esi
c0011ceb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cf1:	c1 e8 0a             	shr    eax,0xa
c0011cf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cf9:	2d 00 00 40 00       	sub    eax,0x400000
c0011cfe:	39 c3                	cmp    ebx,eax
c0011d00:	77 cb                	ja     c0011ccd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d02:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d05:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d0b:	39 d8                	cmp    eax,ebx
c0011d0d:	73 f3                	jae    c0011d02 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d0f:	83 c4 1c             	add    esp,0x1c
c0011d12:	89 f0                	mov    eax,esi
c0011d14:	5b                   	pop    ebx
c0011d15:	5e                   	pop    esi
c0011d16:	5f                   	pop    edi
c0011d17:	5d                   	pop    ebp
c0011d18:	c3                   	ret    
c0011d19:	90                   	nop

c0011d1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d1a:	55                   	push   ebp
c0011d1b:	57                   	push   edi
c0011d1c:	56                   	push   esi
c0011d1d:	53                   	push   ebx
c0011d1e:	83 ec 1c             	sub    esp,0x1c
c0011d21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d29:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d2d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d31:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d36:	75 4a                	jne    c0011d82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d38:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d3f:	c1 eb 16             	shr    ebx,0x16
c0011d42:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d49:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d4d:	74 4d                	je     c0011d9c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d53:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d57:	c1 e8 0a             	shr    eax,0xa
c0011d5a:	80 fa 01             	cmp    dl,0x1
c0011d5d:	19 d2                	sbb    edx,edx
c0011d5f:	c1 e3 0c             	shl    ebx,0xc
c0011d62:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d66:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d6c:	25 fc 0f 00 00       	and    eax,0xffc
c0011d71:	01 d8                	add    eax,ebx
c0011d73:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d7a:	83 c4 1c             	add    esp,0x1c
c0011d7d:	5b                   	pop    ebx
c0011d7e:	5e                   	pop    esi
c0011d7f:	5f                   	pop    edi
c0011d80:	5d                   	pop    ebp
c0011d81:	c3                   	ret    
c0011d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	68 80 a1 02 c0       	push   0xc002a180
c0011d8e:	e8 b2 7e 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d9a:	eb 9c                	jmp    c0011d38 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011da0:	e8 9b db ff ff       	call   c000f940 <Phys::allocatePage()>
c0011da5:	83 ec 0c             	sub    esp,0xc
c0011da8:	89 c5                	mov    ebp,eax
c0011daa:	8b 0d f0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6f0
c0011db0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011db4:	6a 01                	push   0x1
c0011db6:	e8 e6 f3 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011dbb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dc2:	6a 01                	push   0x1
c0011dc4:	50                   	push   eax
c0011dc5:	55                   	push   ebp
c0011dc6:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dcc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dd0:	51                   	push   ecx
c0011dd1:	e8 7e fe ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dd6:	83 c4 1c             	add    esp,0x1c
c0011dd9:	68 00 10 00 00       	push   0x1000
c0011dde:	6a 00                	push   0x0
c0011de0:	50                   	push   eax
c0011de1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011de5:	e8 66 e9 fe ff       	call   c0000750 <memset>
c0011dea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011df1:	e8 f1 f7 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011df6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e03:	e9 47 ff ff ff       	jmp    c0011d4f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e08 <VAS::VAS(bool)>:
c0011e08:	53                   	push   ebx
c0011e09:	83 ec 28             	sub    esp,0x28
c0011e0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e23:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e32:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e35:	e8 06 db ff ff       	call   c000f940 <Phys::allocatePage()>
c0011e3a:	89 c2                	mov    edx,eax
c0011e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e40:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e43:	8b 1d f0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f0
c0011e49:	83 ec 0c             	sub    esp,0xc
c0011e4c:	6a 01                	push   0x1
c0011e4e:	e8 4e f3 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	89 c2                	mov    edx,eax
c0011e58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011e5f:	83 ec 0c             	sub    esp,0xc
c0011e62:	6a 03                	push   0x3
c0011e64:	6a 01                	push   0x1
c0011e66:	52                   	push   edx
c0011e67:	50                   	push   eax
c0011e68:	53                   	push   ebx
c0011e69:	e8 e6 fd ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e6e:	83 c4 20             	add    esp,0x20
c0011e71:	89 c2                	mov    edx,eax
c0011e73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e77:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e7a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e82:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e8a:	7f 1c                	jg     c0011ea8 <VAS::VAS(bool)+0xa0>
c0011e8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e97:	c1 e2 02             	shl    edx,0x2
c0011e9a:	01 d0                	add    eax,edx
c0011e9c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ea2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ea6:	eb da                	jmp    c0011e82 <VAS::VAS(bool)+0x7a>
c0011ea8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011eb0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011eb8:	7f 7a                	jg     c0011f34 <VAS::VAS(bool)+0x12c>
c0011eba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ebe:	2d 00 02 00 00       	sub    eax,0x200
c0011ec3:	c1 e0 0c             	shl    eax,0xc
c0011ec6:	83 c8 03             	or     eax,0x3
c0011ec9:	89 c2                	mov    edx,eax
c0011ecb:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0011ed0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ed6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011edc:	83 e0 10             	and    eax,0x10
c0011edf:	84 c0                	test   al,al
c0011ee1:	74 07                	je     c0011eea <VAS::VAS(bool)+0xe2>
c0011ee3:	b8 00 01 00 00       	mov    eax,0x100
c0011ee8:	eb 05                	jmp    c0011eef <VAS::VAS(bool)+0xe7>
c0011eea:	b8 00 00 00 00       	mov    eax,0x0
c0011eef:	09 d0                	or     eax,edx
c0011ef1:	89 c1                	mov    ecx,eax
c0011ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011efa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efe:	c1 e2 02             	shl    edx,0x2
c0011f01:	01 d0                	add    eax,edx
c0011f03:	89 ca                	mov    edx,ecx
c0011f05:	89 10                	mov    DWORD PTR [eax],edx
c0011f07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f0b:	2d 40 03 00 00       	sub    eax,0x340
c0011f10:	83 f8 7f             	cmp    eax,0x7f
c0011f13:	77 16                	ja     c0011f2b <VAS::VAS(bool)+0x123>
c0011f15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f20:	c1 e2 02             	shl    edx,0x2
c0011f23:	01 d0                	add    eax,edx
c0011f25:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f2b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f2f:	e9 7c ff ff ff       	jmp    c0011eb0 <VAS::VAS(bool)+0xa8>
c0011f34:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0011f39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f3f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f45:	83 e0 10             	and    eax,0x10
c0011f48:	84 c0                	test   al,al
c0011f4a:	74 07                	je     c0011f53 <VAS::VAS(bool)+0x14b>
c0011f4c:	b8 03 41 00 00       	mov    eax,0x4103
c0011f51:	eb 05                	jmp    c0011f58 <VAS::VAS(bool)+0x150>
c0011f53:	b8 03 40 00 00       	mov    eax,0x4003
c0011f58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f5c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011f5f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f65:	89 02                	mov    DWORD PTR [edx],eax
c0011f67:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0011f6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f72:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f78:	83 ec 08             	sub    esp,0x8
c0011f7b:	50                   	push   eax
c0011f7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f80:	e8 b3 fc ff ff       	call   c0011c38 <VAS::setCPUSpecific(unsigned long)>
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011f8f:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0011f94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f9a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fa0:	83 e0 10             	and    eax,0x10
c0011fa3:	84 c0                	test   al,al
c0011fa5:	74 07                	je     c0011fae <VAS::VAS(bool)+0x1a6>
c0011fa7:	b8 00 01 00 00       	mov    eax,0x100
c0011fac:	eb 05                	jmp    c0011fb3 <VAS::VAS(bool)+0x1ab>
c0011fae:	b8 00 00 00 00       	mov    eax,0x0
c0011fb3:	09 c2                	or     edx,eax
c0011fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fbc:	05 fc 0f 00 00       	add    eax,0xffc
c0011fc1:	83 ca 03             	or     edx,0x3
c0011fc4:	89 10                	mov    DWORD PTR [eax],edx
c0011fc6:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0011fcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fd1:	83 ec 0c             	sub    esp,0xc
c0011fd4:	50                   	push   eax
c0011fd5:	e8 6a 1c 00 00       	call   c0013c44 <Device::getName()>
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	83 ec 08             	sub    esp,0x8
c0011fe0:	68 44 a2 02 c0       	push   0xc002a244
c0011fe5:	50                   	push   eax
c0011fe6:	e8 ad e8 fe ff       	call   c0000898 <strcmp>
c0011feb:	83 c4 10             	add    esp,0x10
c0011fee:	85 c0                	test   eax,eax
c0011ff0:	0f 94 c0             	sete   al
c0011ff3:	84 c0                	test   al,al
c0011ff5:	0f 84 87 00 00 00    	je     c0012082 <VAS::VAS(bool)+0x27a>
c0011ffb:	fa                   	cli    
c0011ffc:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0012001:	40                   	inc    eax
c0012002:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c0012007:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001200c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012012:	05 7c 09 00 00       	add    eax,0x97c
c0012017:	83 ec 0c             	sub    esp,0xc
c001201a:	50                   	push   eax
c001201b:	e8 fe cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012020:	83 c4 10             	add    esp,0x10
c0012023:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012028:	89 c3                	mov    ebx,eax
c001202a:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001202f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012035:	05 7c 09 00 00       	add    eax,0x97c
c001203a:	83 ec 0c             	sub    esp,0xc
c001203d:	50                   	push   eax
c001203e:	e8 db cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012043:	83 c4 10             	add    esp,0x10
c0012046:	83 ec 08             	sub    esp,0x8
c0012049:	50                   	push   eax
c001204a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001204e:	e8 75 f5 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	8b 00                	mov    eax,DWORD PTR [eax]
c0012058:	25 00 f0 ff ff       	and    eax,0xfffff000
c001205d:	6a 11                	push   0x11
c001205f:	53                   	push   ebx
c0012060:	50                   	push   eax
c0012061:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012065:	e8 f4 f8 ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c001206a:	83 c4 10             	add    esp,0x10
c001206d:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0012072:	48                   	dec    eax
c0012073:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c0012078:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001207d:	85 c0                	test   eax,eax
c001207f:	75 01                	jne    c0012082 <VAS::VAS(bool)+0x27a>
c0012081:	fb                   	sti    
c0012082:	90                   	nop
c0012083:	83 c4 28             	add    esp,0x28
c0012086:	5b                   	pop    ebx
c0012087:	c3                   	ret    

c0012088 <VAS::evict(unsigned long)>:
c0012088:	55                   	push   ebp
c0012089:	57                   	push   edi
c001208a:	56                   	push   esi
c001208b:	53                   	push   ebx
c001208c:	83 ec 1c             	sub    esp,0x1c
c001208f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012093:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012097:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001209b:	e8 42 f2 ff ff       	call   c00112e2 <Virt::allocateSwapfilePage()>
c00120a0:	89 c7                	mov    edi,eax
c00120a2:	a1 2c c5 02 c0       	mov    eax,ds:0xc002c52c
c00120a7:	85 c0                	test   eax,eax
c00120a9:	7e 3d                	jle    c00120e8 <VAS::evict(unsigned long)+0x60>
c00120ab:	89 ee                	mov    esi,ebp
c00120ad:	31 db                	xor    ebx,ebx
c00120af:	83 ec 0c             	sub    esp,0xc
c00120b2:	57                   	push   edi
c00120b3:	e8 18 f2 ff ff       	call   c00112d0 <Virt::swapIDToSector(unsigned long)>
c00120b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00120bb:	01 d8                	add    eax,ebx
c00120bd:	6a 01                	push   0x1
c00120bf:	31 d2                	xor    edx,edx
c00120c1:	43                   	inc    ebx
c00120c2:	52                   	push   edx
c00120c3:	81 c6 00 02 00 00    	add    esi,0x200
c00120c9:	50                   	push   eax
c00120ca:	0f be 05 38 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c538
c00120d1:	ff 34 85 7c da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2584]
c00120d8:	e8 bd 3d 00 00       	call   c0015e9a <LogicalDisk::write(unsigned long long, int, void*)>
c00120dd:	83 c4 20             	add    esp,0x20
c00120e0:	39 1d 2c c5 02 c0    	cmp    DWORD PTR ds:0xc002c52c,ebx
c00120e6:	7f c7                	jg     c00120af <VAS::evict(unsigned long)+0x27>
c00120e8:	83 ec 08             	sub    esp,0x8
c00120eb:	c1 e7 0b             	shl    edi,0xb
c00120ee:	55                   	push   ebp
c00120ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120f3:	e8 d0 f4 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c00120f8:	83 c4 0c             	add    esp,0xc
c00120fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00120fd:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012103:	09 d7                	or     edi,edx
c0012105:	89 38                	mov    DWORD PTR [eax],edi
c0012107:	a1 e8 d6 02 c0       	mov    eax,ds:0xc002d6e8
c001210c:	40                   	inc    eax
c001210d:	a3 e8 d6 02 c0       	mov    ds:0xc002d6e8,eax
c0012112:	0f 20 da             	mov    edx,cr3
c0012115:	0f 22 da             	mov    cr3,edx
c0012118:	50                   	push   eax
c0012119:	55                   	push   ebp
c001211a:	68 52 a2 02 c0       	push   0xc002a252
c001211f:	e8 e7 03 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0012124:	a1 e4 d6 02 c0       	mov    eax,ds:0xc002d6e4
c0012129:	c7 44 24 40 67 a2 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a267
c0012131:	8d 50 01             	lea    edx,[eax+0x1]
c0012134:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012138:	89 15 e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,edx
c001213e:	83 c4 2c             	add    esp,0x2c
c0012141:	5b                   	pop    ebx
c0012142:	5e                   	pop    esi
c0012143:	5f                   	pop    edi
c0012144:	5d                   	pop    ebp
c0012145:	e9 c1 03 00 00       	jmp    c001250b <Dbg::kprintf(char const*, ...)>

c001214a <VAS::tryLoadBackOffDisk(unsigned long)>:
c001214a:	55                   	push   ebp
c001214b:	57                   	push   edi
c001214c:	56                   	push   esi
c001214d:	53                   	push   ebx
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012155:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c001215b:	74 1c                	je     c0012179 <VAS::tryLoadBackOffDisk(unsigned long)+0x2f>
c001215d:	55                   	push   ebp
c001215e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012162:	e8 61 f4 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0012167:	5b                   	pop    ebx
c0012168:	85 c0                	test   eax,eax
c001216a:	5e                   	pop    esi
c001216b:	89 c3                	mov    ebx,eax
c001216d:	74 0a                	je     c0012179 <VAS::tryLoadBackOffDisk(unsigned long)+0x2f>
c001216f:	8b 38                	mov    edi,DWORD PTR [eax]
c0012171:	f7 c7 01 00 00 00    	test   edi,0x1
c0012177:	74 0a                	je     c0012183 <VAS::tryLoadBackOffDisk(unsigned long)+0x39>
c0012179:	31 c0                	xor    eax,eax
c001217b:	83 c4 0c             	add    esp,0xc
c001217e:	5b                   	pop    ebx
c001217f:	5e                   	pop    esi
c0012180:	5f                   	pop    edi
c0012181:	5d                   	pop    ebp
c0012182:	c3                   	ret    
c0012183:	e8 b8 d7 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012188:	c1 ef 0b             	shr    edi,0xb
c001218b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001218d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012193:	09 c2                	or     edx,eax
c0012195:	81 ca 01 08 00 00    	or     edx,0x801
c001219b:	89 13                	mov    DWORD PTR [ebx],edx
c001219d:	8b 0d 2c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c52c
c00121a3:	85 c9                	test   ecx,ecx
c00121a5:	7e 3d                	jle    c00121e4 <VAS::tryLoadBackOffDisk(unsigned long)+0x9a>
c00121a7:	89 ee                	mov    esi,ebp
c00121a9:	31 db                	xor    ebx,ebx
c00121ab:	83 ec 0c             	sub    esp,0xc
c00121ae:	57                   	push   edi
c00121af:	e8 1c f1 ff ff       	call   c00112d0 <Virt::swapIDToSector(unsigned long)>
c00121b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00121b7:	01 d8                	add    eax,ebx
c00121b9:	6a 01                	push   0x1
c00121bb:	31 d2                	xor    edx,edx
c00121bd:	43                   	inc    ebx
c00121be:	52                   	push   edx
c00121bf:	81 c6 00 02 00 00    	add    esi,0x200
c00121c5:	50                   	push   eax
c00121c6:	0f be 05 38 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c538
c00121cd:	ff 34 85 7c da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2584]
c00121d4:	e8 55 3c 00 00       	call   c0015e2e <LogicalDisk::read(unsigned long long, int, void*)>
c00121d9:	83 c4 20             	add    esp,0x20
c00121dc:	39 1d 2c c5 02 c0    	cmp    DWORD PTR ds:0xc002c52c,ebx
c00121e2:	7f c7                	jg     c00121ab <VAS::tryLoadBackOffDisk(unsigned long)+0x61>
c00121e4:	a1 e8 d6 02 c0       	mov    eax,ds:0xc002d6e8
c00121e9:	48                   	dec    eax
c00121ea:	52                   	push   edx
c00121eb:	a3 e8 d6 02 c0       	mov    ds:0xc002d6e8,eax
c00121f0:	50                   	push   eax
c00121f1:	55                   	push   ebp
c00121f2:	68 78 a2 02 c0       	push   0xc002a278
c00121f7:	e8 0f 03 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00121fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121ff:	e8 ae f0 ff ff       	call   c00112b2 <Virt::freeSwapfilePage(unsigned long)>
c0012204:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0012209:	83 c4 10             	add    esp,0x10
c001220c:	48                   	dec    eax
c001220d:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c0012212:	85 c0                	test   eax,eax
c0012214:	74 1d                	je     c0012233 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012216:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001221a:	25 ff 0f 00 00       	and    eax,0xfff
c001221f:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012224:	77 10                	ja     c0012236 <VAS::tryLoadBackOffDisk(unsigned long)+0xec>
c0012226:	0f 20 d8             	mov    eax,cr3
c0012229:	0f 22 d8             	mov    cr3,eax
c001222c:	b0 01                	mov    al,0x1
c001222e:	e9 48 ff ff ff       	jmp    c001217b <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0012233:	fb                   	sti    
c0012234:	eb e0                	jmp    c0012216 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0012236:	83 ec 0c             	sub    esp,0xc
c0012239:	68 8d a2 02 c0       	push   0xc002a28d
c001223e:	e8 c8 02 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0012243:	83 c4 10             	add    esp,0x10
c0012246:	eb de                	jmp    c0012226 <VAS::tryLoadBackOffDisk(unsigned long)+0xdc>

c0012248 <VAS::scanForEviction()>:
c0012248:	57                   	push   edi
c0012249:	56                   	push   esi
c001224a:	53                   	push   ebx
c001224b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001224f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012252:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012258:	75 0e                	jne    c0012268 <VAS::scanForEviction()+0x20>
c001225a:	89 da                	mov    edx,ebx
c001225c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001225f:	c1 ea 16             	shr    edx,0x16
c0012262:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012266:	74 48                	je     c00122b0 <VAS::scanForEviction()+0x68>
c0012268:	53                   	push   ebx
c0012269:	56                   	push   esi
c001226a:	e8 59 f3 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001226f:	5a                   	pop    edx
c0012270:	8b 38                	mov    edi,DWORD PTR [eax]
c0012272:	59                   	pop    ecx
c0012273:	89 fa                	mov    edx,edi
c0012275:	81 e2 01 08 00 00    	and    edx,0x801
c001227b:	81 fa 01 08 00 00    	cmp    edx,0x801
c0012281:	74 3d                	je     c00122c0 <VAS::scanForEviction()+0x78>
c0012283:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012289:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001228f:	76 2a                	jbe    c00122bb <VAS::scanForEviction()+0x73>
c0012291:	31 db                	xor    ebx,ebx
c0012293:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001229a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00122a0:	75 c6                	jne    c0012268 <VAS::scanForEviction()+0x20>
c00122a2:	89 da                	mov    edx,ebx
c00122a4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00122a7:	c1 ea 16             	shr    edx,0x16
c00122aa:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00122ae:	75 b8                	jne    c0012268 <VAS::scanForEviction()+0x20>
c00122b0:	81 c3 00 00 40 00    	add    ebx,0x400000
c00122b6:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00122b9:	eb 97                	jmp    c0012252 <VAS::scanForEviction()+0xa>
c00122bb:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00122be:	eb 92                	jmp    c0012252 <VAS::scanForEviction()+0xa>
c00122c0:	f7 c7 20 00 00 00    	test   edi,0x20
c00122c6:	74 0a                	je     c00122d2 <VAS::scanForEviction()+0x8a>
c00122c8:	83 e7 df             	and    edi,0xffffffdf
c00122cb:	89 38                	mov    DWORD PTR [eax],edi
c00122cd:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122d0:	eb b1                	jmp    c0012283 <VAS::scanForEviction()+0x3b>
c00122d2:	83 ec 08             	sub    esp,0x8
c00122d5:	53                   	push   ebx
c00122d6:	56                   	push   esi
c00122d7:	e8 ac fd ff ff       	call   c0012088 <VAS::evict(unsigned long)>
c00122dc:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00122e3:	83 c4 10             	add    esp,0x10
c00122e6:	89 f8                	mov    eax,edi
c00122e8:	5b                   	pop    ebx
c00122e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ee:	5e                   	pop    esi
c00122ef:	5f                   	pop    edi
c00122f0:	c3                   	ret    

c00122f1 <mapVASFirstTime>:
c00122f1:	55                   	push   ebp
c00122f2:	57                   	push   edi
c00122f3:	56                   	push   esi
c00122f4:	53                   	push   ebx
c00122f5:	83 ec 0c             	sub    esp,0xc
c00122f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122fd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012300:	4a                   	dec    edx
c0012301:	0f 84 8e 00 00 00    	je     c0012395 <mapVASFirstTime+0xa4>
c0012307:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001230a:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001230d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012312:	c1 e5 15             	shl    ebp,0x15
c0012315:	be 00 90 e7 01       	mov    esi,0x1e79000
c001231a:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012320:	29 eb                	sub    ebx,ebp
c0012322:	29 ee                	sub    esi,ebp
c0012324:	e8 17 d6 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012329:	83 ec 0c             	sub    esp,0xc
c001232c:	68 03 04 00 00       	push   0x403
c0012331:	6a 01                	push   0x1
c0012333:	53                   	push   ebx
c0012334:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001233a:	50                   	push   eax
c001233b:	57                   	push   edi
c001233c:	e8 13 f9 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012341:	83 c4 20             	add    esp,0x20
c0012344:	39 f3                	cmp    ebx,esi
c0012346:	75 dc                	jne    c0012324 <mapVASFirstTime+0x33>
c0012348:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001234d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012352:	29 ee                	sub    esi,ebp
c0012354:	29 e8                	sub    eax,ebp
c0012356:	89 c5                	mov    ebp,eax
c0012358:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001235c:	19 db                	sbb    ebx,ebx
c001235e:	e8 dd d5 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012363:	83 e3 04             	and    ebx,0x4
c0012366:	83 ec 0c             	sub    esp,0xc
c0012369:	81 c3 03 04 00 00    	add    ebx,0x403
c001236f:	53                   	push   ebx
c0012370:	6a 01                	push   0x1
c0012372:	56                   	push   esi
c0012373:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012379:	50                   	push   eax
c001237a:	57                   	push   edi
c001237b:	e8 d4 f8 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012380:	83 c4 20             	add    esp,0x20
c0012383:	39 f5                	cmp    ebp,esi
c0012385:	75 d1                	jne    c0012358 <mapVASFirstTime+0x67>
c0012387:	0f 20 d8             	mov    eax,cr3
c001238a:	0f 22 d8             	mov    cr3,eax
c001238d:	83 c4 0c             	add    esp,0xc
c0012390:	5b                   	pop    ebx
c0012391:	5e                   	pop    esi
c0012392:	5f                   	pop    edi
c0012393:	5d                   	pop    ebp
c0012394:	c3                   	ret    
c0012395:	83 ec 0c             	sub    esp,0xc
c0012398:	68 9d a2 02 c0       	push   0xc002a29d
c001239d:	e8 69 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	83 c4 0c             	add    esp,0xc
c00123a8:	5b                   	pop    ebx
c00123a9:	5e                   	pop    esi
c00123aa:	5f                   	pop    edi
c00123ab:	5d                   	pop    ebp
c00123ac:	c3                   	ret    

c00123ad <__cxa_atexit>:
c00123ad:	31 c0                	xor    eax,eax
c00123af:	c3                   	ret    

c00123b0 <__cxa_finalize>:
c00123b0:	c3                   	ret    

c00123b1 <__stack_chk_fail>:
c00123b1:	55                   	push   ebp
c00123b2:	89 e5                	mov    ebp,esp
c00123b4:	83 ec 14             	sub    esp,0x14
c00123b7:	68 b6 a2 02 c0       	push   0xc002a2b6
c00123bc:	e8 4a 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123c1:	58                   	pop    eax
c00123c2:	5a                   	pop    edx
c00123c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00123c6:	68 06 a3 02 c0       	push   0xc002a306
c00123cb:	e8 3b 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123d0:	59                   	pop    ecx
c00123d1:	58                   	pop    eax
c00123d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123d5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123d8:	68 06 a3 02 c0       	push   0xc002a306
c00123dd:	e8 29 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123e2:	5a                   	pop    edx
c00123e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123e6:	59                   	pop    ecx
c00123e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00123e9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123ec:	68 06 a3 02 c0       	push   0xc002a306
c00123f1:	e8 15 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123f6:	5a                   	pop    edx
c00123f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123fa:	59                   	pop    ecx
c00123fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00123fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00123ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012402:	68 06 a3 02 c0       	push   0xc002a306
c0012407:	e8 ff 00 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001240c:	c7 04 24 0e a3 02 c0 	mov    DWORD PTR [esp],0xc002a30e
c0012413:	e8 2d 78 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	c9                   	leave  
c001241c:	c3                   	ret    

c001241d <__cxa_pure_virtual>:
c001241d:	83 ec 18             	sub    esp,0x18
c0012420:	68 26 a3 02 c0       	push   0xc002a326
c0012425:	e8 1b 78 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c001242a:	83 c4 1c             	add    esp,0x1c
c001242d:	c3                   	ret    

c001242e <operator new[](unsigned long)>:
c001242e:	e9 69 d1 ff ff       	jmp    c000f59c <malloc>

c0012433 <operator delete(void*, unsigned long)>:
c0012433:	e9 84 d1 ff ff       	jmp    c000f5bc <rfree>

c0012438 <operator delete[](void*)>:
c0012438:	e9 7f d1 ff ff       	jmp    c000f5bc <rfree>

c001243d <operator delete[](void*, unsigned long)>:
c001243d:	e9 7a d1 ff ff       	jmp    c000f5bc <rfree>

c0012442 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012442:	55                   	push   ebp
c0012443:	b9 11 00 00 00       	mov    ecx,0x11
c0012448:	57                   	push   edi
c0012449:	56                   	push   esi
c001244a:	be be 9e 02 c0       	mov    esi,0xc0029ebe
c001244f:	53                   	push   ebx
c0012450:	83 ec 20             	sub    esp,0x20
c0012453:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012457:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001245b:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001245f:	fc                   	cld    
c0012460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012462:	89 ee                	mov    esi,ebp
c0012464:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012468:	eb 02                	jmp    c001246c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c001246a:	89 c6                	mov    esi,eax
c001246c:	31 d2                	xor    edx,edx
c001246e:	41                   	inc    ecx
c001246f:	89 f0                	mov    eax,esi
c0012471:	f7 f3                	div    ebx
c0012473:	39 de                	cmp    esi,ebx
c0012475:	73 f3                	jae    c001246a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012477:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001247a:	eb 02                	jmp    c001247e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001247c:	89 c5                	mov    ebp,eax
c001247e:	31 d2                	xor    edx,edx
c0012480:	49                   	dec    ecx
c0012481:	89 e8                	mov    eax,ebp
c0012483:	f7 f3                	div    ebx
c0012485:	39 dd                	cmp    ebp,ebx
c0012487:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001248b:	88 11                	mov    BYTE PTR [ecx],dl
c001248d:	73 ed                	jae    c001247c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c001248f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012493:	83 c4 20             	add    esp,0x20
c0012496:	5b                   	pop    ebx
c0012497:	5e                   	pop    esi
c0012498:	5f                   	pop    edi
c0012499:	5d                   	pop    ebp
c001249a:	c3                   	ret    

c001249b <Dbg::logc(char)>:
c001249b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001249f:	ba fd 03 00 00       	mov    edx,0x3fd
c00124a4:	ec                   	in     al,dx
c00124a5:	a8 20                	test   al,0x20
c00124a7:	74 fb                	je     c00124a4 <Dbg::logc(char)+0x9>
c00124a9:	ba f8 03 00 00       	mov    edx,0x3f8
c00124ae:	88 c8                	mov    al,cl
c00124b0:	ee                   	out    dx,al
c00124b1:	c3                   	ret    

c00124b2 <Dbg::logs(char*)>:
c00124b2:	53                   	push   ebx
c00124b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00124b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00124ba:	84 c0                	test   al,al
c00124bc:	74 0f                	je     c00124cd <Dbg::logs(char*)+0x1b>
c00124be:	50                   	push   eax
c00124bf:	43                   	inc    ebx
c00124c0:	e8 d6 ff ff ff       	call   c001249b <Dbg::logc(char)>
c00124c5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00124c8:	5a                   	pop    edx
c00124c9:	84 c0                	test   al,al
c00124cb:	75 f1                	jne    c00124be <Dbg::logs(char*)+0xc>
c00124cd:	5b                   	pop    ebx
c00124ce:	c3                   	ret    

c00124cf <Dbg::logWriteInt(unsigned int)>:
c00124cf:	83 ec 10             	sub    esp,0x10
c00124d2:	6a 0a                	push   0xa
c00124d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00124d8:	50                   	push   eax
c00124d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124dd:	e8 60 ff ff ff       	call   c0012442 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00124e2:	50                   	push   eax
c00124e3:	e8 ca ff ff ff       	call   c00124b2 <Dbg::logs(char*)>
c00124e8:	83 c4 20             	add    esp,0x20
c00124eb:	c3                   	ret    

c00124ec <Dbg::logWriteIntBase(unsigned int, int)>:
c00124ec:	83 ec 10             	sub    esp,0x10
c00124ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124f3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00124f7:	50                   	push   eax
c00124f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124fc:	e8 41 ff ff ff       	call   c0012442 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012501:	50                   	push   eax
c0012502:	e8 ab ff ff ff       	call   c00124b2 <Dbg::logs(char*)>
c0012507:	83 c4 20             	add    esp,0x20
c001250a:	c3                   	ret    

c001250b <Dbg::kprintf(char const*, ...)>:
c001250b:	55                   	push   ebp
c001250c:	57                   	push   edi
c001250d:	56                   	push   esi
c001250e:	53                   	push   ebx
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012516:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001251a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001251e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012521:	84 c0                	test   al,al
c0012523:	74 4a                	je     c001256f <Dbg::kprintf(char const*, ...)+0x64>
c0012525:	31 db                	xor    ebx,ebx
c0012527:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001252a:	3c 25                	cmp    al,0x25
c001252c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001252f:	0f 85 e4 00 00 00    	jne    c0012619 <Dbg::kprintf(char const*, ...)+0x10e>
c0012535:	83 c3 02             	add    ebx,0x2
c0012538:	8a 07                	mov    al,BYTE PTR [edi]
c001253a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001253d:	83 e8 25             	sub    eax,0x25
c0012540:	3c 53                	cmp    al,0x53
c0012542:	0f 87 ba 00 00 00    	ja     c0012602 <Dbg::kprintf(char const*, ...)+0xf7>
c0012548:	0f b6 c0             	movzx  eax,al
c001254b:	ff 24 85 3c a3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5cc4]
c0012552:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012556:	89 c8                	mov    eax,ecx
c0012558:	83 c1 04             	add    ecx,0x4
c001255b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001255f:	ff 30                	push   DWORD PTR [eax]
c0012561:	e8 69 ff ff ff       	call   c00124cf <Dbg::logWriteInt(unsigned int)>
c0012566:	5f                   	pop    edi
c0012567:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001256b:	84 c0                	test   al,al
c001256d:	75 b8                	jne    c0012527 <Dbg::kprintf(char const*, ...)+0x1c>
c001256f:	83 c4 0c             	add    esp,0xc
c0012572:	5b                   	pop    ebx
c0012573:	5e                   	pop    esi
c0012574:	5f                   	pop    edi
c0012575:	5d                   	pop    ebp
c0012576:	c3                   	ret    
c0012577:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001257b:	89 c8                	mov    eax,ecx
c001257d:	83 c1 04             	add    ecx,0x4
c0012580:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012584:	ff 30                	push   DWORD PTR [eax]
c0012586:	e8 27 ff ff ff       	call   c00124b2 <Dbg::logs(char*)>
c001258b:	58                   	pop    eax
c001258c:	eb d9                	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c001258e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012592:	89 d0                	mov    eax,edx
c0012594:	83 c2 04             	add    edx,0x4
c0012597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001259b:	ff 30                	push   DWORD PTR [eax]
c001259d:	e8 2d ff ff ff       	call   c00124cf <Dbg::logWriteInt(unsigned int)>
c00125a2:	58                   	pop    eax
c00125a3:	eb c2                	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c00125a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125a9:	89 d0                	mov    eax,edx
c00125ab:	83 c2 04             	add    edx,0x4
c00125ae:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00125b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125b5:	50                   	push   eax
c00125b6:	e8 e0 fe ff ff       	call   c001249b <Dbg::logc(char)>
c00125bb:	58                   	pop    eax
c00125bc:	eb a9                	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c00125be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125c2:	89 c8                	mov    eax,ecx
c00125c4:	83 c1 04             	add    ecx,0x4
c00125c7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00125cb:	6a 10                	push   0x10
c00125cd:	ff 30                	push   DWORD PTR [eax]
c00125cf:	e8 18 ff ff ff       	call   c00124ec <Dbg::logWriteIntBase(unsigned int, int)>
c00125d4:	59                   	pop    ecx
c00125d5:	5f                   	pop    edi
c00125d6:	eb 8f                	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c00125d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125dc:	89 d0                	mov    eax,edx
c00125de:	83 c2 08             	add    edx,0x8
c00125e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125e5:	6a 10                	push   0x10
c00125e7:	ff 30                	push   DWORD PTR [eax]
c00125e9:	e8 fe fe ff ff       	call   c00124ec <Dbg::logWriteIntBase(unsigned int, int)>
c00125ee:	58                   	pop    eax
c00125ef:	5a                   	pop    edx
c00125f0:	e9 72 ff ff ff       	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c00125f5:	6a 25                	push   0x25
c00125f7:	e8 9f fe ff ff       	call   c001249b <Dbg::logc(char)>
c00125fc:	58                   	pop    eax
c00125fd:	e9 65 ff ff ff       	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c0012602:	6a 25                	push   0x25
c0012604:	e8 92 fe ff ff       	call   c001249b <Dbg::logc(char)>
c0012609:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001260c:	50                   	push   eax
c001260d:	e8 89 fe ff ff       	call   c001249b <Dbg::logc(char)>
c0012612:	5a                   	pop    edx
c0012613:	59                   	pop    ecx
c0012614:	e9 4e ff ff ff       	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c0012619:	50                   	push   eax
c001261a:	89 eb                	mov    ebx,ebp
c001261c:	e8 7a fe ff ff       	call   c001249b <Dbg::logc(char)>
c0012621:	89 fd                	mov    ebp,edi
c0012623:	58                   	pop    eax
c0012624:	e9 3e ff ff ff       	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c0012629:	90                   	nop

c001262a <File::read(unsigned long long, void*, int*)>:
c001262a:	53                   	push   ebx
c001262b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001262f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012633:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001263a:	3c 19                	cmp    al,0x19
c001263c:	77 35                	ja     c0012673 <File::read(unsigned long long, void*, int*)+0x49>
c001263e:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c0012645:	85 c0                	test   eax,eax
c0012647:	74 2a                	je     c0012673 <File::read(unsigned long long, void*, int*)+0x49>
c0012649:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001264f:	85 c0                	test   eax,eax
c0012651:	74 20                	je     c0012673 <File::read(unsigned long long, void*, int*)+0x49>
c0012653:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012657:	74 21                	je     c001267a <File::read(unsigned long long, void*, int*)+0x50>
c0012659:	8b 08                	mov    ecx,DWORD PTR [eax]
c001265b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001265f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012665:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012669:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001266d:	5b                   	pop    ebx
c001266e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012671:	ff e0                	jmp    eax
c0012673:	b8 0b 00 00 00       	mov    eax,0xb
c0012678:	eb 05                	jmp    c001267f <File::read(unsigned long long, void*, int*)+0x55>
c001267a:	b8 05 00 00 00       	mov    eax,0x5
c001267f:	5b                   	pop    ebx
c0012680:	c3                   	ret    
c0012681:	90                   	nop

c0012682 <File::write(unsigned long long, void*, int*)>:
c0012682:	53                   	push   ebx
c0012683:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012687:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001268b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012692:	3c 19                	cmp    al,0x19
c0012694:	77 35                	ja     c00126cb <File::write(unsigned long long, void*, int*)+0x49>
c0012696:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c001269d:	85 c0                	test   eax,eax
c001269f:	74 2a                	je     c00126cb <File::write(unsigned long long, void*, int*)+0x49>
c00126a1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00126a7:	85 c0                	test   eax,eax
c00126a9:	74 20                	je     c00126cb <File::write(unsigned long long, void*, int*)+0x49>
c00126ab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00126af:	74 21                	je     c00126d2 <File::write(unsigned long long, void*, int*)+0x50>
c00126b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00126b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00126b7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00126bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00126c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126c5:	5b                   	pop    ebx
c00126c6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00126c9:	ff e0                	jmp    eax
c00126cb:	b8 0b 00 00 00       	mov    eax,0xb
c00126d0:	eb 05                	jmp    c00126d7 <File::write(unsigned long long, void*, int*)+0x55>
c00126d2:	b8 05 00 00 00       	mov    eax,0x5
c00126d7:	5b                   	pop    ebx
c00126d8:	c3                   	ret    
c00126d9:	90                   	nop

c00126da <Directory::read(unsigned long long, void*, int*)>:
c00126da:	53                   	push   ebx
c00126db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126df:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126e3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00126ea:	3c 19                	cmp    al,0x19
c00126ec:	77 35                	ja     c0012723 <Directory::read(unsigned long long, void*, int*)+0x49>
c00126ee:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c00126f5:	85 c0                	test   eax,eax
c00126f7:	74 2a                	je     c0012723 <Directory::read(unsigned long long, void*, int*)+0x49>
c00126f9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00126ff:	85 c0                	test   eax,eax
c0012701:	74 20                	je     c0012723 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012703:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012707:	74 21                	je     c001272a <Directory::read(unsigned long long, void*, int*)+0x50>
c0012709:	8b 08                	mov    ecx,DWORD PTR [eax]
c001270b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001270f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001271d:	5b                   	pop    ebx
c001271e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012721:	ff e0                	jmp    eax
c0012723:	b8 0b 00 00 00       	mov    eax,0xb
c0012728:	eb 05                	jmp    c001272f <Directory::read(unsigned long long, void*, int*)+0x55>
c001272a:	b8 05 00 00 00       	mov    eax,0x5
c001272f:	5b                   	pop    ebx
c0012730:	c3                   	ret    
c0012731:	90                   	nop

c0012732 <Directory::write(unsigned long long, void*, int*)>:
c0012732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012736:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001273d:	b8 0b 00 00 00       	mov    eax,0xb
c0012742:	80 fa 19             	cmp    dl,0x19
c0012745:	77 18                	ja     c001275f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012747:	8b 14 95 80 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2480]
c001274e:	85 d2                	test   edx,edx
c0012750:	74 0d                	je     c001275f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012752:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012759:	19 c0                	sbb    eax,eax
c001275b:	83 e0 0a             	and    eax,0xa
c001275e:	40                   	inc    eax
c001275f:	c3                   	ret    

c0012760 <File::isAtty()>:
c0012760:	31 c0                	xor    eax,eax
c0012762:	c3                   	ret    
c0012763:	90                   	nop

c0012764 <Directory::isAtty()>:
c0012764:	31 c0                	xor    eax,eax
c0012766:	c3                   	ret    
c0012767:	90                   	nop

c0012768 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012768:	b8 0a 00 00 00       	mov    eax,0xa
c001276d:	c3                   	ret    

c001276e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001276e:	b8 0a 00 00 00       	mov    eax,0xa
c0012773:	c3                   	ret    

c0012774 <Filesystem::getFileFirstSector(char const*)>:
c0012774:	31 c0                	xor    eax,eax
c0012776:	31 d2                	xor    edx,edx
c0012778:	c3                   	ret    
c0012779:	90                   	nop

c001277a <File::~File()>:
c001277a:	83 ec 0c             	sub    esp,0xc
c001277d:	ba fc a4 02 c0       	mov    edx,0xc002a4fc
c0012782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012786:	89 10                	mov    DWORD PTR [eax],edx
c0012788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278c:	83 ec 0c             	sub    esp,0xc
c001278f:	50                   	push   eax
c0012790:	e8 ab e7 ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	90                   	nop
c0012799:	83 c4 0c             	add    esp,0xc
c001279c:	c3                   	ret    
c001279d:	90                   	nop

c001279e <File::~File()>:
c001279e:	83 ec 0c             	sub    esp,0xc
c00127a1:	83 ec 0c             	sub    esp,0xc
c00127a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127a8:	e8 cd ff ff ff       	call   c001277a <File::~File()>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	83 ec 08             	sub    esp,0x8
c00127b3:	68 14 01 00 00       	push   0x114
c00127b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127bc:	e8 72 fc ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	83 c4 0c             	add    esp,0xc
c00127c7:	c3                   	ret    

c00127c8 <Directory::~Directory()>:
c00127c8:	83 ec 0c             	sub    esp,0xc
c00127cb:	ba 18 a5 02 c0       	mov    edx,0xc002a518
c00127d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d4:	89 10                	mov    DWORD PTR [eax],edx
c00127d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127da:	83 ec 0c             	sub    esp,0xc
c00127dd:	50                   	push   eax
c00127de:	e8 5d e7 ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c00127e3:	83 c4 10             	add    esp,0x10
c00127e6:	90                   	nop
c00127e7:	83 c4 0c             	add    esp,0xc
c00127ea:	c3                   	ret    
c00127eb:	90                   	nop

c00127ec <Directory::~Directory()>:
c00127ec:	83 ec 0c             	sub    esp,0xc
c00127ef:	83 ec 0c             	sub    esp,0xc
c00127f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127f6:	e8 cd ff ff ff       	call   c00127c8 <Directory::~Directory()>
c00127fb:	83 c4 10             	add    esp,0x10
c00127fe:	83 ec 08             	sub    esp,0x8
c0012801:	68 14 01 00 00       	push   0x114
c0012806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001280a:	e8 24 fc ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001280f:	83 c4 10             	add    esp,0x10
c0012812:	83 c4 0c             	add    esp,0xc
c0012815:	c3                   	ret    

c0012816 <Filesystem::Filesystem()>:
c0012816:	ba 94 a4 02 c0       	mov    edx,0xc002a494
c001281b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001281f:	89 10                	mov    DWORD PTR [eax],edx
c0012821:	8b 15 f4 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6f4
c0012827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001282b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001282e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012832:	a3 f4 d6 02 c0       	mov    ds:0xc002d6f4,eax
c0012837:	90                   	nop
c0012838:	c3                   	ret    
c0012839:	90                   	nop

c001283a <Filesystem::~Filesystem()>:
c001283a:	ba 94 a4 02 c0       	mov    edx,0xc002a494
c001283f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012843:	89 10                	mov    DWORD PTR [eax],edx
c0012845:	90                   	nop
c0012846:	c3                   	ret    
c0012847:	90                   	nop

c0012848 <Filesystem::~Filesystem()>:
c0012848:	83 ec 0c             	sub    esp,0xc
c001284b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001284f:	e8 e6 ff ff ff       	call   c001283a <Filesystem::~Filesystem()>
c0012854:	83 c4 04             	add    esp,0x4
c0012857:	83 ec 08             	sub    esp,0x8
c001285a:	6a 08                	push   0x8
c001285c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012860:	e8 ce fb ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	83 c4 0c             	add    esp,0xc
c001286b:	c3                   	ret    

c001286c <Fs::getcwd(Process*, char*, int)>:
c001286c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012870:	31 c0                	xor    eax,eax
c0012872:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012875:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012879:	7d 15                	jge    c0012890 <Fs::getcwd(Process*, char*, int)+0x24>
c001287b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001287f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012886:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012889:	84 c9                	test   cl,cl
c001288b:	74 06                	je     c0012893 <Fs::getcwd(Process*, char*, int)+0x27>
c001288d:	40                   	inc    eax
c001288e:	eb e2                	jmp    c0012872 <Fs::getcwd(Process*, char*, int)+0x6>
c0012890:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012893:	31 c0                	xor    eax,eax
c0012895:	c3                   	ret    

c0012896 <Fs::initVFS()>:
c0012896:	83 ec 18             	sub    esp,0x18
c0012899:	6a 08                	push   0x8
c001289b:	e8 fc cc ff ff       	call   c000f59c <malloc>
c00128a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00128a3:	e8 9a de 00 00       	call   c0020742 <FAT::FAT()>
c00128a8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00128af:	e8 e8 cc ff ff       	call   c000f59c <malloc>
c00128b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00128b7:	e8 92 f0 00 00       	call   c002194e <ISO9660::ISO9660()>
c00128bc:	83 c4 1c             	add    esp,0x1c
c00128bf:	c3                   	ret    

c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00128c0:	55                   	push   ebp
c00128c1:	57                   	push   edi
c00128c2:	56                   	push   esi
c00128c3:	53                   	push   ebx
c00128c4:	81 ec 10 04 00 00    	sub    esp,0x410
c00128ca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00128d1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00128d8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00128df:	68 00 04 00 00       	push   0x400
c00128e4:	6a 00                	push   0x0
c00128e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128ea:	56                   	push   esi
c00128eb:	e8 60 de fe ff       	call   c0000750 <memset>
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00128f7:	75 0b                	jne    c0012904 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00128f9:	50                   	push   eax
c00128fa:	50                   	push   eax
c00128fb:	57                   	push   edi
c00128fc:	56                   	push   esi
c00128fd:	e8 0a df fe ff       	call   c000080c <strcpy>
c0012902:	eb 41                	jmp    c0012945 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012904:	8a 07                	mov    al,BYTE PTR [edi]
c0012906:	3c 5c                	cmp    al,0x5c
c0012908:	74 04                	je     c001290e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001290a:	3c 2f                	cmp    al,0x2f
c001290c:	75 18                	jne    c0012926 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001290e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012911:	3c 60                	cmp    al,0x60
c0012913:	7e 03                	jle    c0012918 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012915:	83 e8 20             	sub    eax,0x20
c0012918:	88 04 24             	mov    BYTE PTR [esp],al
c001291b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012922:	50                   	push   eax
c0012923:	50                   	push   eax
c0012924:	eb 18                	jmp    c001293e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012926:	50                   	push   eax
c0012927:	50                   	push   eax
c0012928:	55                   	push   ebp
c0012929:	56                   	push   esi
c001292a:	e8 dd de fe ff       	call   c000080c <strcpy>
c001292f:	5a                   	pop    edx
c0012930:	59                   	pop    ecx
c0012931:	68 82 b7 02 c0       	push   0xc002b782
c0012936:	56                   	push   esi
c0012937:	e8 10 e0 fe ff       	call   c000094c <strcat>
c001293c:	5d                   	pop    ebp
c001293d:	58                   	pop    eax
c001293e:	57                   	push   edi
c001293f:	56                   	push   esi
c0012940:	e8 07 e0 fe ff       	call   c000094c <strcat>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	8a 04 24             	mov    al,BYTE PTR [esp]
c001294b:	3c 60                	cmp    al,0x60
c001294d:	7e 03                	jle    c0012952 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001294f:	83 e8 20             	sub    eax,0x20
c0012952:	88 04 24             	mov    BYTE PTR [esp],al
c0012955:	88 03                	mov    BYTE PTR [ebx],al
c0012957:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001295e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012964:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012968:	bf 03 00 00 00       	mov    edi,0x3
c001296d:	b8 03 00 00 00       	mov    eax,0x3
c0012972:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012975:	84 d2                	test   dl,dl
c0012977:	0f 84 91 00 00 00    	je     c0012a0e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001297d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012980:	80 fa 5c             	cmp    dl,0x5c
c0012983:	74 05                	je     c001298a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012985:	80 fa 2f             	cmp    dl,0x2f
c0012988:	75 12                	jne    c001299c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001298a:	89 c5                	mov    ebp,eax
c001298c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012991:	74 09                	je     c001299c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012993:	40                   	inc    eax
c0012994:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012998:	89 cf                	mov    edi,ecx
c001299a:	eb d6                	jmp    c0012972 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001299c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00129a1:	75 5b                	jne    c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00129a3:	80 fa 2e             	cmp    dl,0x2e
c00129a6:	75 56                	jne    c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00129a8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00129ac:	74 19                	je     c00129c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00129ae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00129b3:	74 53                	je     c0012a08 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00129b5:	89 f9                	mov    ecx,edi
c00129b7:	41                   	inc    ecx
c00129b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00129bb:	80 fa 2f             	cmp    dl,0x2f
c00129be:	74 f7                	je     c00129b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00129c0:	80 fa 5c             	cmp    dl,0x5c
c00129c3:	74 f2                	je     c00129b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00129c5:	eb d1                	jmp    c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129c7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00129cc:	74 3a                	je     c0012a08 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00129ce:	83 f8 03             	cmp    eax,0x3
c00129d1:	74 c5                	je     c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129d3:	41                   	inc    ecx
c00129d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00129d7:	80 fa 2f             	cmp    dl,0x2f
c00129da:	74 f7                	je     c00129d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00129dc:	80 fa 5c             	cmp    dl,0x5c
c00129df:	74 f2                	je     c00129d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00129e1:	48                   	dec    eax
c00129e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00129e6:	75 06                	jne    c00129ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00129e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00129ec:	eb f3                	jmp    c00129e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00129ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00129f2:	74 07                	je     c00129fb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00129f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00129f8:	48                   	dec    eax
c00129f9:	eb f3                	jmp    c00129ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00129fb:	40                   	inc    eax
c00129fc:	eb 9a                	jmp    c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129fe:	80 fa 2f             	cmp    dl,0x2f
c0012a01:	74 95                	je     c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a03:	80 fa 5c             	cmp    dl,0x5c
c0012a06:	74 90                	je     c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a08:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012a0b:	40                   	inc    eax
c0012a0c:	eb 8a                	jmp    c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a12:	83 ec 0c             	sub    esp,0xc
c0012a15:	53                   	push   ebx
c0012a16:	e8 51 dd fe ff       	call   c000076c <strlen>
c0012a1b:	83 c4 10             	add    esp,0x10
c0012a1e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012a23:	75 26                	jne    c0012a4b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012a25:	83 ec 0c             	sub    esp,0xc
c0012a28:	53                   	push   ebx
c0012a29:	e8 3e dd fe ff       	call   c000076c <strlen>
c0012a2e:	83 c4 10             	add    esp,0x10
c0012a31:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012a36:	74 26                	je     c0012a5e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012a38:	83 ec 0c             	sub    esp,0xc
c0012a3b:	53                   	push   ebx
c0012a3c:	e8 2b dd fe ff       	call   c000076c <strlen>
c0012a41:	83 c4 10             	add    esp,0x10
c0012a44:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012a49:	eb c7                	jmp    c0012a12 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012a4b:	83 ec 0c             	sub    esp,0xc
c0012a4e:	53                   	push   ebx
c0012a4f:	e8 18 dd fe ff       	call   c000076c <strlen>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a5c:	74 c7                	je     c0012a25 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012a5e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012a64:	5b                   	pop    ebx
c0012a65:	5e                   	pop    esi
c0012a66:	5f                   	pop    edi
c0012a67:	5d                   	pop    ebp
c0012a68:	c3                   	ret    
c0012a69:	90                   	nop

c0012a6a <File::File(char const*, Process*)>:
c0012a6a:	83 ec 0c             	sub    esp,0xc
c0012a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a71:	83 ec 08             	sub    esp,0x8
c0012a74:	6a 00                	push   0x0
c0012a76:	50                   	push   eax
c0012a77:	e8 e2 e2 ff ff       	call   c0010d5e <UnixFile::UnixFile(int)>
c0012a7c:	83 c4 10             	add    esp,0x10
c0012a7f:	ba fc a4 02 c0       	mov    edx,0xc002a4fc
c0012a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a88:	89 10                	mov    DWORD PTR [eax],edx
c0012a8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a8e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a98:	83 c0 0d             	add    eax,0xd
c0012a9b:	83 ec 04             	sub    esp,0x4
c0012a9e:	52                   	push   edx
c0012a9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aa3:	50                   	push   eax
c0012aa4:	e8 17 fe ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012aa9:	83 c4 10             	add    esp,0x10
c0012aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ab0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012ab3:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ac8:	90                   	nop
c0012ac9:	83 c4 0c             	add    esp,0xc
c0012acc:	c3                   	ret    
c0012acd:	90                   	nop

c0012ace <File::open(FileOpenMode)>:
c0012ace:	53                   	push   ebx
c0012acf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ad4:	83 ec 08             	sub    esp,0x8
c0012ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012adb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ae2:	80 fa 19             	cmp    dl,0x19
c0012ae5:	77 40                	ja     c0012b27 <File::open(FileOpenMode)+0x59>
c0012ae7:	8b 14 95 80 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2480]
c0012aee:	85 d2                	test   edx,edx
c0012af0:	74 35                	je     c0012b27 <File::open(FileOpenMode)+0x59>
c0012af2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012af8:	85 d2                	test   edx,edx
c0012afa:	74 2b                	je     c0012b27 <File::open(FileOpenMode)+0x59>
c0012afc:	b8 06 00 00 00       	mov    eax,0x6
c0012b01:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012b05:	75 20                	jne    c0012b27 <File::open(FileOpenMode)+0x59>
c0012b07:	8b 02                	mov    eax,DWORD PTR [edx]
c0012b09:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012b0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b13:	51                   	push   ecx
c0012b14:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012b17:	51                   	push   ecx
c0012b18:	52                   	push   edx
c0012b19:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012b1c:	83 c4 10             	add    esp,0x10
c0012b1f:	85 c0                	test   eax,eax
c0012b21:	75 04                	jne    c0012b27 <File::open(FileOpenMode)+0x59>
c0012b23:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012b27:	83 c4 08             	add    esp,0x8
c0012b2a:	5b                   	pop    ebx
c0012b2b:	c3                   	ret    

c0012b2c <File::close()>:
c0012b2c:	53                   	push   ebx
c0012b2d:	b8 0b 00 00 00       	mov    eax,0xb
c0012b32:	83 ec 08             	sub    esp,0x8
c0012b35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012b39:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012b40:	80 fa 19             	cmp    dl,0x19
c0012b43:	77 41                	ja     c0012b86 <File::close()+0x5a>
c0012b45:	8b 1c 95 80 db 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2480]
c0012b4c:	85 db                	test   ebx,ebx
c0012b4e:	74 36                	je     c0012b86 <File::close()+0x5a>
c0012b50:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012b57:	74 2d                	je     c0012b86 <File::close()+0x5a>
c0012b59:	b8 05 00 00 00       	mov    eax,0x5
c0012b5e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012b62:	74 22                	je     c0012b86 <File::close()+0x5a>
c0012b64:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012b68:	8b 04 95 80 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2480]
c0012b6f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b75:	53                   	push   ebx
c0012b76:	53                   	push   ebx
c0012b77:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b79:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012b7f:	50                   	push   eax
c0012b80:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	83 c4 08             	add    esp,0x8
c0012b89:	5b                   	pop    ebx
c0012b8a:	c3                   	ret    
c0012b8b:	90                   	nop

c0012b8c <File::seek(unsigned long long)>:
c0012b8c:	56                   	push   esi
c0012b8d:	53                   	push   ebx
c0012b8e:	b8 0b 00 00 00       	mov    eax,0xb
c0012b93:	51                   	push   ecx
c0012b94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012b9c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012ba3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ba7:	80 fa 19             	cmp    dl,0x19
c0012baa:	77 31                	ja     c0012bdd <File::seek(unsigned long long)+0x51>
c0012bac:	8b 14 95 80 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2480]
c0012bb3:	85 d2                	test   edx,edx
c0012bb5:	74 26                	je     c0012bdd <File::seek(unsigned long long)+0x51>
c0012bb7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bbd:	85 d2                	test   edx,edx
c0012bbf:	74 1c                	je     c0012bdd <File::seek(unsigned long long)+0x51>
c0012bc1:	b8 05 00 00 00       	mov    eax,0x5
c0012bc6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012bca:	74 11                	je     c0012bdd <File::seek(unsigned long long)+0x51>
c0012bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0012bce:	53                   	push   ebx
c0012bcf:	51                   	push   ecx
c0012bd0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012bd6:	52                   	push   edx
c0012bd7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012bda:	83 c4 10             	add    esp,0x10
c0012bdd:	5a                   	pop    edx
c0012bde:	5b                   	pop    ebx
c0012bdf:	5e                   	pop    esi
c0012be0:	c3                   	ret    
c0012be1:	90                   	nop

c0012be2 <File::tell(unsigned long long*)>:
c0012be2:	83 ec 0c             	sub    esp,0xc
c0012be5:	b8 0b 00 00 00       	mov    eax,0xb
c0012bea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012bee:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012bf5:	80 fa 19             	cmp    dl,0x19
c0012bf8:	77 34                	ja     c0012c2e <File::tell(unsigned long long*)+0x4c>
c0012bfa:	8b 14 95 80 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2480]
c0012c01:	85 d2                	test   edx,edx
c0012c03:	74 29                	je     c0012c2e <File::tell(unsigned long long*)+0x4c>
c0012c05:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c0b:	85 d2                	test   edx,edx
c0012c0d:	74 1f                	je     c0012c2e <File::tell(unsigned long long*)+0x4c>
c0012c0f:	b8 05 00 00 00       	mov    eax,0x5
c0012c14:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c18:	74 14                	je     c0012c2e <File::tell(unsigned long long*)+0x4c>
c0012c1a:	50                   	push   eax
c0012c1b:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c21:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c27:	52                   	push   edx
c0012c28:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012c2b:	83 c4 10             	add    esp,0x10
c0012c2e:	83 c4 0c             	add    esp,0xc
c0012c31:	c3                   	ret    

c0012c32 <File::rewind()>:
c0012c32:	83 ec 10             	sub    esp,0x10
c0012c35:	6a 00                	push   0x0
c0012c37:	6a 00                	push   0x0
c0012c39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c3d:	e8 4a ff ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c0012c42:	83 c4 1c             	add    esp,0x1c
c0012c45:	c3                   	ret    

c0012c46 <File::unlink()>:
c0012c46:	83 ec 0c             	sub    esp,0xc
c0012c49:	b8 0b 00 00 00       	mov    eax,0xb
c0012c4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c52:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c59:	80 f9 19             	cmp    cl,0x19
c0012c5c:	77 2f                	ja     c0012c8d <File::unlink()+0x47>
c0012c5e:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c0012c65:	85 c9                	test   ecx,ecx
c0012c67:	74 24                	je     c0012c8d <File::unlink()+0x47>
c0012c69:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c6f:	85 c9                	test   ecx,ecx
c0012c71:	74 1a                	je     c0012c8d <File::unlink()+0x47>
c0012c73:	b8 06 00 00 00       	mov    eax,0x6
c0012c78:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c7c:	75 0f                	jne    c0012c8d <File::unlink()+0x47>
c0012c7e:	83 c2 0d             	add    edx,0xd
c0012c81:	50                   	push   eax
c0012c82:	50                   	push   eax
c0012c83:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c85:	52                   	push   edx
c0012c86:	51                   	push   ecx
c0012c87:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012c8a:	83 c4 10             	add    esp,0x10
c0012c8d:	83 c4 0c             	add    esp,0xc
c0012c90:	c3                   	ret    
c0012c91:	90                   	nop

c0012c92 <File::rename(char const*)>:
c0012c92:	83 ec 0c             	sub    esp,0xc
c0012c95:	b8 0b 00 00 00       	mov    eax,0xb
c0012c9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c9e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ca5:	80 f9 19             	cmp    cl,0x19
c0012ca8:	77 32                	ja     c0012cdc <File::rename(char const*)+0x4a>
c0012caa:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c0012cb1:	85 c9                	test   ecx,ecx
c0012cb3:	74 27                	je     c0012cdc <File::rename(char const*)+0x4a>
c0012cb5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012cbb:	85 c9                	test   ecx,ecx
c0012cbd:	74 1d                	je     c0012cdc <File::rename(char const*)+0x4a>
c0012cbf:	b8 06 00 00 00       	mov    eax,0x6
c0012cc4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cc8:	75 12                	jne    c0012cdc <File::rename(char const*)+0x4a>
c0012cca:	83 c2 0d             	add    edx,0xd
c0012ccd:	50                   	push   eax
c0012cce:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012cd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cd4:	52                   	push   edx
c0012cd5:	51                   	push   ecx
c0012cd6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	83 c4 0c             	add    esp,0xc
c0012cdf:	c3                   	ret    

c0012ce0 <File::chfatattr(unsigned char, unsigned char)>:
c0012ce0:	57                   	push   edi
c0012ce1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ce6:	56                   	push   esi
c0012ce7:	53                   	push   ebx
c0012ce8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012cf0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012cf7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012cfb:	80 f9 19             	cmp    cl,0x19
c0012cfe:	77 37                	ja     c0012d37 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d00:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c0012d07:	85 c9                	test   ecx,ecx
c0012d09:	74 2c                	je     c0012d37 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d0b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d11:	85 c9                	test   ecx,ecx
c0012d13:	74 22                	je     c0012d37 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d15:	b8 06 00 00 00       	mov    eax,0x6
c0012d1a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d1e:	75 17                	jne    c0012d37 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d20:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012d22:	89 f0                	mov    eax,esi
c0012d24:	83 c2 0d             	add    edx,0xd
c0012d27:	0f b6 f0             	movzx  esi,al
c0012d2a:	0f b6 db             	movzx  ebx,bl
c0012d2d:	56                   	push   esi
c0012d2e:	53                   	push   ebx
c0012d2f:	52                   	push   edx
c0012d30:	51                   	push   ecx
c0012d31:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	5b                   	pop    ebx
c0012d38:	5e                   	pop    esi
c0012d39:	5f                   	pop    edi
c0012d3a:	c3                   	ret    
c0012d3b:	90                   	nop

c0012d3c <File::exists()>:
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	31 c0                	xor    eax,eax
c0012d41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d45:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d4c:	80 f9 19             	cmp    cl,0x19
c0012d4f:	77 24                	ja     c0012d75 <File::exists()+0x39>
c0012d51:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c0012d58:	85 c9                	test   ecx,ecx
c0012d5a:	74 19                	je     c0012d75 <File::exists()+0x39>
c0012d5c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d62:	85 c9                	test   ecx,ecx
c0012d64:	74 0f                	je     c0012d75 <File::exists()+0x39>
c0012d66:	83 c2 0d             	add    edx,0xd
c0012d69:	50                   	push   eax
c0012d6a:	50                   	push   eax
c0012d6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d6d:	52                   	push   edx
c0012d6e:	51                   	push   ecx
c0012d6f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012d72:	83 c4 10             	add    esp,0x10
c0012d75:	83 c4 0c             	add    esp,0xc
c0012d78:	c3                   	ret    
c0012d79:	90                   	nop

c0012d7a <File::stat(unsigned long long*, bool*)>:
c0012d7a:	56                   	push   esi
c0012d7b:	53                   	push   ebx
c0012d7c:	50                   	push   eax
c0012d7d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d8a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d95:	80 f9 19             	cmp    cl,0x19
c0012d98:	77 3d                	ja     c0012dd7 <File::stat(unsigned long long*, bool*)+0x5d>
c0012d9a:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c0012da1:	85 c9                	test   ecx,ecx
c0012da3:	74 32                	je     c0012dd7 <File::stat(unsigned long long*, bool*)+0x5d>
c0012da5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dab:	85 c9                	test   ecx,ecx
c0012dad:	74 28                	je     c0012dd7 <File::stat(unsigned long long*, bool*)+0x5d>
c0012daf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012db1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012db5:	74 13                	je     c0012dca <File::stat(unsigned long long*, bool*)+0x50>
c0012db7:	83 ec 04             	sub    esp,0x4
c0012dba:	56                   	push   esi
c0012dbb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012dc1:	51                   	push   ecx
c0012dc2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012dc5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012dc8:	eb 0a                	jmp    c0012dd4 <File::stat(unsigned long long*, bool*)+0x5a>
c0012dca:	53                   	push   ebx
c0012dcb:	83 c2 0d             	add    edx,0xd
c0012dce:	56                   	push   esi
c0012dcf:	52                   	push   edx
c0012dd0:	51                   	push   ecx
c0012dd1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012dd4:	83 c4 10             	add    esp,0x10
c0012dd7:	5a                   	pop    edx
c0012dd8:	5b                   	pop    ebx
c0012dd9:	5e                   	pop    esi
c0012dda:	c3                   	ret    

c0012ddb <Fs::setcwd(Process*, char*)>:
c0012ddb:	55                   	push   ebp
c0012ddc:	57                   	push   edi
c0012ddd:	56                   	push   esi
c0012dde:	53                   	push   ebx
c0012ddf:	81 ec 20 02 00 00    	sub    esp,0x220
c0012de5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012dec:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012df2:	57                   	push   edi
c0012df3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012dfa:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012dfe:	56                   	push   esi
c0012dff:	e8 bc fa ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e04:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e07:	e8 60 d9 fe ff       	call   c000076c <strlen>
c0012e0c:	83 c4 10             	add    esp,0x10
c0012e0f:	83 f8 02             	cmp    eax,0x2
c0012e12:	77 17                	ja     c0012e2b <Fs::setcwd(Process*, char*)+0x50>
c0012e14:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012e19:	83 e8 41             	sub    eax,0x41
c0012e1c:	83 f8 19             	cmp    eax,0x19
c0012e1f:	76 24                	jbe    c0012e45 <Fs::setcwd(Process*, char*)+0x6a>
c0012e21:	b8 03 00 00 00       	mov    eax,0x3
c0012e26:	e9 e0 00 00 00       	jmp    c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012e2b:	83 ec 0c             	sub    esp,0xc
c0012e2e:	56                   	push   esi
c0012e2f:	e8 38 d9 fe ff       	call   c000076c <strlen>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	83 f8 03             	cmp    eax,0x3
c0012e3a:	75 34                	jne    c0012e70 <Fs::setcwd(Process*, char*)+0x95>
c0012e3c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012e41:	75 2d                	jne    c0012e70 <Fs::setcwd(Process*, char*)+0x95>
c0012e43:	eb cf                	jmp    c0012e14 <Fs::setcwd(Process*, char*)+0x39>
c0012e45:	8b 14 85 80 db 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2480]
c0012e4c:	b8 05 00 00 00       	mov    eax,0x5
c0012e51:	85 d2                	test   edx,edx
c0012e53:	0f 84 b2 00 00 00    	je     c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012e59:	b8 06 00 00 00       	mov    eax,0x6
c0012e5e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e65:	0f 85 92 00 00 00    	jne    c0012efd <Fs::setcwd(Process*, char*)+0x122>
c0012e6b:	e9 9b 00 00 00       	jmp    c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012e70:	83 ec 0c             	sub    esp,0xc
c0012e73:	68 14 01 00 00       	push   0x114
c0012e78:	e8 1f c7 ff ff       	call   c000f59c <malloc>
c0012e7d:	83 c4 0c             	add    esp,0xc
c0012e80:	89 c3                	mov    ebx,eax
c0012e82:	55                   	push   ebp
c0012e83:	56                   	push   esi
c0012e84:	50                   	push   eax
c0012e85:	e8 e0 fb ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0012e8a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012e8f:	83 c4 0c             	add    esp,0xc
c0012e92:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012e96:	50                   	push   eax
c0012e97:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e9b:	50                   	push   eax
c0012e9c:	53                   	push   ebx
c0012e9d:	e8 d8 fe ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c0012ea2:	83 c4 10             	add    esp,0x10
c0012ea5:	83 f8 02             	cmp    eax,0x2
c0012ea8:	74 04                	je     c0012eae <Fs::setcwd(Process*, char*)+0xd3>
c0012eaa:	85 c0                	test   eax,eax
c0012eac:	74 1c                	je     c0012eca <Fs::setcwd(Process*, char*)+0xef>
c0012eae:	b8 01 00 00 00       	mov    eax,0x1
c0012eb3:	85 db                	test   ebx,ebx
c0012eb5:	74 54                	je     c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012eb7:	83 ec 0c             	sub    esp,0xc
c0012eba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ebc:	53                   	push   ebx
c0012ebd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	b8 01 00 00 00       	mov    eax,0x1
c0012ec8:	eb 41                	jmp    c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012eca:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012ecf:	75 1c                	jne    c0012eed <Fs::setcwd(Process*, char*)+0x112>
c0012ed1:	b8 02 00 00 00       	mov    eax,0x2
c0012ed6:	85 db                	test   ebx,ebx
c0012ed8:	74 31                	je     c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012eda:	83 ec 0c             	sub    esp,0xc
c0012edd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012edf:	53                   	push   ebx
c0012ee0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	b8 02 00 00 00       	mov    eax,0x2
c0012eeb:	eb 1e                	jmp    c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012eed:	85 db                	test   ebx,ebx
c0012eef:	74 0c                	je     c0012efd <Fs::setcwd(Process*, char*)+0x122>
c0012ef1:	83 ec 0c             	sub    esp,0xc
c0012ef4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ef6:	53                   	push   ebx
c0012ef7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012efa:	83 c4 10             	add    esp,0x10
c0012efd:	50                   	push   eax
c0012efe:	50                   	push   eax
c0012eff:	56                   	push   esi
c0012f00:	57                   	push   edi
c0012f01:	e8 06 d9 fe ff       	call   c000080c <strcpy>
c0012f06:	83 c4 10             	add    esp,0x10
c0012f09:	31 c0                	xor    eax,eax
c0012f0b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012f11:	5b                   	pop    ebx
c0012f12:	5e                   	pop    esi
c0012f13:	5f                   	pop    edi
c0012f14:	5d                   	pop    ebp
c0012f15:	c3                   	ret    

c0012f16 <Directory::Directory(char const*, Process*)>:
c0012f16:	83 ec 0c             	sub    esp,0xc
c0012f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1d:	83 ec 08             	sub    esp,0x8
c0012f20:	6a 00                	push   0x0
c0012f22:	50                   	push   eax
c0012f23:	e8 36 de ff ff       	call   c0010d5e <UnixFile::UnixFile(int)>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	ba 18 a5 02 c0       	mov    edx,0xc002a518
c0012f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f34:	89 10                	mov    DWORD PTR [eax],edx
c0012f36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f44:	83 c0 0d             	add    eax,0xd
c0012f47:	83 ec 04             	sub    esp,0x4
c0012f4a:	52                   	push   edx
c0012f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4f:	50                   	push   eax
c0012f50:	e8 6b f9 ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012f5f:	8d 50 bf             	lea    edx,[eax-0x41]
c0012f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f66:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f70:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012f74:	90                   	nop
c0012f75:	83 c4 0c             	add    esp,0xc
c0012f78:	c3                   	ret    
c0012f79:	90                   	nop

c0012f7a <Directory::open()>:
c0012f7a:	53                   	push   ebx
c0012f7b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f80:	83 ec 08             	sub    esp,0x8
c0012f83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f87:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012f8e:	80 fa 19             	cmp    dl,0x19
c0012f91:	77 3d                	ja     c0012fd0 <Directory::open()+0x56>
c0012f93:	8b 14 95 80 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2480]
c0012f9a:	85 d2                	test   edx,edx
c0012f9c:	74 32                	je     c0012fd0 <Directory::open()+0x56>
c0012f9e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fa4:	85 d2                	test   edx,edx
c0012fa6:	74 28                	je     c0012fd0 <Directory::open()+0x56>
c0012fa8:	b8 06 00 00 00       	mov    eax,0x6
c0012fad:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012fb1:	75 1d                	jne    c0012fd0 <Directory::open()+0x56>
c0012fb3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012fb9:	50                   	push   eax
c0012fba:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fbc:	51                   	push   ecx
c0012fbd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012fc0:	51                   	push   ecx
c0012fc1:	52                   	push   edx
c0012fc2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012fc5:	83 c4 10             	add    esp,0x10
c0012fc8:	85 c0                	test   eax,eax
c0012fca:	75 04                	jne    c0012fd0 <Directory::open()+0x56>
c0012fcc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012fd0:	83 c4 08             	add    esp,0x8
c0012fd3:	5b                   	pop    ebx
c0012fd4:	c3                   	ret    
c0012fd5:	90                   	nop

c0012fd6 <Directory::close()>:
c0012fd6:	53                   	push   ebx
c0012fd7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fdc:	83 ec 08             	sub    esp,0x8
c0012fdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fe3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fea:	80 fa 19             	cmp    dl,0x19
c0012fed:	77 41                	ja     c0013030 <Directory::close()+0x5a>
c0012fef:	8b 1c 95 80 db 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2480]
c0012ff6:	85 db                	test   ebx,ebx
c0012ff8:	74 36                	je     c0013030 <Directory::close()+0x5a>
c0012ffa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013001:	74 2d                	je     c0013030 <Directory::close()+0x5a>
c0013003:	b8 05 00 00 00       	mov    eax,0x5
c0013008:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001300c:	74 22                	je     c0013030 <Directory::close()+0x5a>
c001300e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013012:	8b 04 95 80 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2480]
c0013019:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001301f:	53                   	push   ebx
c0013020:	53                   	push   ebx
c0013021:	8b 10                	mov    edx,DWORD PTR [eax]
c0013023:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013029:	50                   	push   eax
c001302a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001302d:	83 c4 10             	add    esp,0x10
c0013030:	83 c4 08             	add    esp,0x8
c0013033:	5b                   	pop    ebx
c0013034:	c3                   	ret    
c0013035:	90                   	nop

c0013036 <Directory::unlink()>:
c0013036:	83 ec 0c             	sub    esp,0xc
c0013039:	b8 0b 00 00 00       	mov    eax,0xb
c001303e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013042:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013049:	80 f9 19             	cmp    cl,0x19
c001304c:	77 2f                	ja     c001307d <Directory::unlink()+0x47>
c001304e:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c0013055:	85 c9                	test   ecx,ecx
c0013057:	74 24                	je     c001307d <Directory::unlink()+0x47>
c0013059:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001305f:	85 c9                	test   ecx,ecx
c0013061:	74 1a                	je     c001307d <Directory::unlink()+0x47>
c0013063:	b8 06 00 00 00       	mov    eax,0x6
c0013068:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001306c:	75 0f                	jne    c001307d <Directory::unlink()+0x47>
c001306e:	83 c2 0d             	add    edx,0xd
c0013071:	50                   	push   eax
c0013072:	50                   	push   eax
c0013073:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013075:	52                   	push   edx
c0013076:	51                   	push   ecx
c0013077:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001307a:	83 c4 10             	add    esp,0x10
c001307d:	83 c4 0c             	add    esp,0xc
c0013080:	c3                   	ret    
c0013081:	90                   	nop

c0013082 <Directory::rename(char const*)>:
c0013082:	83 ec 0c             	sub    esp,0xc
c0013085:	b8 0b 00 00 00       	mov    eax,0xb
c001308a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001308e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013095:	80 f9 19             	cmp    cl,0x19
c0013098:	77 32                	ja     c00130cc <Directory::rename(char const*)+0x4a>
c001309a:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c00130a1:	85 c9                	test   ecx,ecx
c00130a3:	74 27                	je     c00130cc <Directory::rename(char const*)+0x4a>
c00130a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130ab:	85 c9                	test   ecx,ecx
c00130ad:	74 1d                	je     c00130cc <Directory::rename(char const*)+0x4a>
c00130af:	b8 06 00 00 00       	mov    eax,0x6
c00130b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130b8:	75 12                	jne    c00130cc <Directory::rename(char const*)+0x4a>
c00130ba:	83 c2 0d             	add    edx,0xd
c00130bd:	50                   	push   eax
c00130be:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130c4:	52                   	push   edx
c00130c5:	51                   	push   ecx
c00130c6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130c9:	83 c4 10             	add    esp,0x10
c00130cc:	83 c4 0c             	add    esp,0xc
c00130cf:	c3                   	ret    

c00130d0 <Directory::exists()>:
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	31 c0                	xor    eax,eax
c00130d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130d9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130e0:	80 f9 19             	cmp    cl,0x19
c00130e3:	77 24                	ja     c0013109 <Directory::exists()+0x39>
c00130e5:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c00130ec:	85 c9                	test   ecx,ecx
c00130ee:	74 19                	je     c0013109 <Directory::exists()+0x39>
c00130f0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130f6:	85 c9                	test   ecx,ecx
c00130f8:	74 0f                	je     c0013109 <Directory::exists()+0x39>
c00130fa:	83 c2 0d             	add    edx,0xd
c00130fd:	50                   	push   eax
c00130fe:	50                   	push   eax
c00130ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013101:	52                   	push   edx
c0013102:	51                   	push   ecx
c0013103:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013106:	83 c4 10             	add    esp,0x10
c0013109:	83 c4 0c             	add    esp,0xc
c001310c:	c3                   	ret    
c001310d:	90                   	nop

c001310e <Directory::read(dirent*)>:
c001310e:	83 ec 1c             	sub    esp,0x1c
c0013111:	b8 0b 00 00 00       	mov    eax,0xb
c0013116:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001311a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013121:	80 fa 19             	cmp    dl,0x19
c0013124:	77 30                	ja     c0013156 <Directory::read(dirent*)+0x48>
c0013126:	8b 14 95 80 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2480]
c001312d:	85 d2                	test   edx,edx
c001312f:	74 25                	je     c0013156 <Directory::read(dirent*)+0x48>
c0013131:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013138:	74 1c                	je     c0013156 <Directory::read(dirent*)+0x48>
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001313f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013143:	52                   	push   edx
c0013144:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013148:	6a 00                	push   0x0
c001314a:	68 10 01 00 00       	push   0x110
c001314f:	51                   	push   ecx
c0013150:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013153:	83 c4 20             	add    esp,0x20
c0013156:	83 c4 1c             	add    esp,0x1c
c0013159:	c3                   	ret    

c001315a <Directory::create()>:
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	b8 0b 00 00 00       	mov    eax,0xb
c0013162:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013166:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001316d:	80 f9 19             	cmp    cl,0x19
c0013170:	77 2f                	ja     c00131a1 <Directory::create()+0x47>
c0013172:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c0013179:	85 c9                	test   ecx,ecx
c001317b:	74 24                	je     c00131a1 <Directory::create()+0x47>
c001317d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013183:	85 c9                	test   ecx,ecx
c0013185:	74 1a                	je     c00131a1 <Directory::create()+0x47>
c0013187:	b8 06 00 00 00       	mov    eax,0x6
c001318c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013190:	75 0f                	jne    c00131a1 <Directory::create()+0x47>
c0013192:	83 c2 0d             	add    edx,0xd
c0013195:	50                   	push   eax
c0013196:	50                   	push   eax
c0013197:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013199:	52                   	push   edx
c001319a:	51                   	push   ecx
c001319b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001319e:	83 c4 10             	add    esp,0x10
c00131a1:	83 c4 0c             	add    esp,0xc
c00131a4:	c3                   	ret    
c00131a5:	90                   	nop

c00131a6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00131a6:	b8 0a 00 00 00       	mov    eax,0xa
c00131ab:	c3                   	ret    

c00131ac <Bus::Bus(char const*)>:
c00131ac:	83 ec 0c             	sub    esp,0xc
c00131af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b3:	83 ec 08             	sub    esp,0x8
c00131b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ba:	50                   	push   eax
c00131bb:	e8 88 09 00 00       	call   c0013b48 <Device::Device(char const*)>
c00131c0:	83 c4 10             	add    esp,0x10
c00131c3:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c00131c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131cc:	89 10                	mov    DWORD PTR [eax],edx
c00131ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00131dc:	90                   	nop
c00131dd:	83 c4 0c             	add    esp,0xc
c00131e0:	c3                   	ret    
c00131e1:	90                   	nop

c00131e2 <Bus::~Bus()>:
c00131e2:	83 ec 0c             	sub    esp,0xc
c00131e5:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c00131ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ee:	89 10                	mov    DWORD PTR [eax],edx
c00131f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	50                   	push   eax
c00131f8:	e8 15 06 00 00       	call   c0013812 <Device::~Device()>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	90                   	nop
c0013201:	83 c4 0c             	add    esp,0xc
c0013204:	c3                   	ret    
c0013205:	90                   	nop

c0013206 <Bus::~Bus()>:
c0013206:	83 ec 0c             	sub    esp,0xc
c0013209:	83 ec 0c             	sub    esp,0xc
c001320c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013210:	e8 cd ff ff ff       	call   c00131e2 <Bus::~Bus()>
c0013215:	83 c4 10             	add    esp,0x10
c0013218:	83 ec 08             	sub    esp,0x8
c001321b:	68 58 01 00 00       	push   0x158
c0013220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013224:	e8 0a f2 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	83 c4 0c             	add    esp,0xc
c001322f:	c3                   	ret    

c0013230 <Buzzer::Buzzer(char const*)>:
c0013230:	83 ec 0c             	sub    esp,0xc
c0013233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013237:	83 ec 08             	sub    esp,0x8
c001323a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323e:	50                   	push   eax
c001323f:	e8 04 09 00 00       	call   c0013b48 <Device::Device(char const*)>
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	ba 60 a5 02 c0       	mov    edx,0xc002a560
c001324c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013250:	89 10                	mov    DWORD PTR [eax],edx
c0013252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013256:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013264:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001326e:	90                   	nop
c001326f:	83 c4 0c             	add    esp,0xc
c0013272:	c3                   	ret    
c0013273:	90                   	nop

c0013274 <Buzzer::~Buzzer()>:
c0013274:	83 ec 0c             	sub    esp,0xc
c0013277:	ba 60 a5 02 c0       	mov    edx,0xc002a560
c001327c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013280:	89 10                	mov    DWORD PTR [eax],edx
c0013282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013286:	83 ec 0c             	sub    esp,0xc
c0013289:	50                   	push   eax
c001328a:	e8 83 05 00 00       	call   c0013812 <Device::~Device()>
c001328f:	83 c4 10             	add    esp,0x10
c0013292:	90                   	nop
c0013293:	83 c4 0c             	add    esp,0xc
c0013296:	c3                   	ret    
c0013297:	90                   	nop

c0013298 <Buzzer::~Buzzer()>:
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	83 ec 0c             	sub    esp,0xc
c001329e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a2:	e8 cd ff ff ff       	call   c0013274 <Buzzer::~Buzzer()>
c00132a7:	83 c4 10             	add    esp,0x10
c00132aa:	83 ec 08             	sub    esp,0x8
c00132ad:	68 5c 01 00 00       	push   0x15c
c00132b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b6:	e8 78 f1 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	83 c4 0c             	add    esp,0xc
c00132c1:	c3                   	ret    

c00132c2 <Buzzer::stop()>:
c00132c2:	83 ec 14             	sub    esp,0x14
c00132c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00132cb:	6a 00                	push   0x0
c00132cd:	50                   	push   eax
c00132ce:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132d1:	83 c4 1c             	add    esp,0x1c
c00132d4:	c3                   	ret    

c00132d5 <beepThread(void*)>:
c00132d5:	53                   	push   ebx
c00132d6:	83 ec 08             	sub    esp,0x8
c00132d9:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c00132de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132e2:	48                   	dec    eax
c00132e3:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c00132e8:	75 01                	jne    c00132eb <beepThread(void*)+0x16>
c00132ea:	fb                   	sti    
c00132eb:	50                   	push   eax
c00132ec:	50                   	push   eax
c00132ed:	b8 40 42 0f 00       	mov    eax,0xf4240
c00132f2:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00132f8:	52                   	push   edx
c00132f9:	50                   	push   eax
c00132fa:	e8 aa a7 00 00       	call   c001daa9 <nanoSleep(unsigned long long)>
c00132ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013302:	e8 bb ff ff ff       	call   c00132c2 <Buzzer::stop()>
c0013307:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001330f:	83 c4 18             	add    esp,0x18
c0013312:	5b                   	pop    ebx
c0013313:	e9 8d a6 00 00       	jmp    c001d9a5 <blockTask(TaskState)>

c0013318 <Buzzer::beep(int, int, bool)>:
c0013318:	57                   	push   edi
c0013319:	56                   	push   esi
c001331a:	53                   	push   ebx
c001331b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001331f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013323:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013327:	52                   	push   edx
c0013328:	52                   	push   edx
c0013329:	8b 06                	mov    eax,DWORD PTR [esi]
c001332b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001332f:	56                   	push   esi
c0013330:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013333:	83 c4 10             	add    esp,0x10
c0013336:	89 f8                	mov    eax,edi
c0013338:	84 c0                	test   al,al
c001333a:	74 1f                	je     c001335b <Buzzer::beep(int, int, bool)+0x43>
c001333c:	50                   	push   eax
c001333d:	50                   	push   eax
c001333e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013344:	99                   	cdq    
c0013345:	52                   	push   edx
c0013346:	50                   	push   eax
c0013347:	e8 5d a7 00 00       	call   c001daa9 <nanoSleep(unsigned long long)>
c001334c:	83 c4 10             	add    esp,0x10
c001334f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013353:	5b                   	pop    ebx
c0013354:	5e                   	pop    esi
c0013355:	5f                   	pop    edi
c0013356:	e9 67 ff ff ff       	jmp    c00132c2 <Buzzer::stop()>
c001335b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013361:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0013366:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001336e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013372:	c7 44 24 14 d5 32 01 c0 	mov    DWORD PTR [esp+0x14],0xc00132d5
c001337a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001337e:	5b                   	pop    ebx
c001337f:	5e                   	pop    esi
c0013380:	5f                   	pop    edi
c0013381:	e9 24 a2 00 00       	jmp    c001d5aa <Process::createThread(void (*)(void*), void*, int)>

c0013386 <User::loadClockSettings(int)>:
c0013386:	53                   	push   ebx
c0013387:	83 ec 14             	sub    esp,0x14
c001338a:	68 14 01 00 00       	push   0x114
c001338f:	e8 08 c2 ff ff       	call   c000f59c <malloc>
c0013394:	83 c4 0c             	add    esp,0xc
c0013397:	89 c3                	mov    ebx,eax
c0013399:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c001339f:	68 88 a5 02 c0       	push   0xc002a588
c00133a4:	50                   	push   eax
c00133a5:	e8 c0 f6 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c00133aa:	58                   	pop    eax
c00133ab:	5a                   	pop    edx
c00133ac:	6a 01                	push   0x1
c00133ae:	53                   	push   ebx
c00133af:	e8 1a f7 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c00133b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133b7:	e8 70 f7 ff ff       	call   c0012b2c <File::close()>
c00133bc:	83 c4 10             	add    esp,0x10
c00133bf:	85 db                	test   ebx,ebx
c00133c1:	74 0f                	je     c00133d2 <User::loadClockSettings(int)+0x4c>
c00133c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00133c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00133cc:	83 c4 08             	add    esp,0x8
c00133cf:	5b                   	pop    ebx
c00133d0:	ff e0                	jmp    eax
c00133d2:	83 c4 08             	add    esp,0x8
c00133d5:	5b                   	pop    ebx
c00133d6:	c3                   	ret    
c00133d7:	90                   	nop

c00133d8 <Clock::Clock(char const*)>:
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133df:	83 ec 08             	sub    esp,0x8
c00133e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e6:	50                   	push   eax
c00133e7:	e8 5c 07 00 00       	call   c0013b48 <Device::Device(char const*)>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	ba b0 a5 02 c0       	mov    edx,0xc002a5b0
c00133f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f8:	89 10                	mov    DWORD PTR [eax],edx
c00133fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fe:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013408:	90                   	nop
c0013409:	83 c4 0c             	add    esp,0xc
c001340c:	c3                   	ret    
c001340d:	90                   	nop

c001340e <Clock::~Clock()>:
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	ba b0 a5 02 c0       	mov    edx,0xc002a5b0
c0013416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341a:	89 10                	mov    DWORD PTR [eax],edx
c001341c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013420:	83 ec 0c             	sub    esp,0xc
c0013423:	50                   	push   eax
c0013424:	e8 e9 03 00 00       	call   c0013812 <Device::~Device()>
c0013429:	83 c4 10             	add    esp,0x10
c001342c:	90                   	nop
c001342d:	83 c4 0c             	add    esp,0xc
c0013430:	c3                   	ret    
c0013431:	90                   	nop

c0013432 <Clock::~Clock()>:
c0013432:	83 ec 0c             	sub    esp,0xc
c0013435:	83 ec 0c             	sub    esp,0xc
c0013438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001343c:	e8 cd ff ff ff       	call   c001340e <Clock::~Clock()>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	83 ec 08             	sub    esp,0x8
c0013447:	68 58 01 00 00       	push   0x158
c001344c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013450:	e8 de ef ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	83 c4 0c             	add    esp,0xc
c001345b:	c3                   	ret    

c001345c <Clock::timeInSecondsLocal()>:
c001345c:	53                   	push   ebx
c001345d:	83 ec 14             	sub    esp,0x14
c0013460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013464:	8b 10                	mov    edx,DWORD PTR [eax]
c0013466:	50                   	push   eax
c0013467:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001346a:	0f b6 0d fc d6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d6fc
c0013471:	03 0d 00 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d700
c0013477:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001347d:	89 cb                	mov    ebx,ecx
c001347f:	c1 fb 1f             	sar    ebx,0x1f
c0013482:	01 c8                	add    eax,ecx
c0013484:	11 da                	adc    edx,ebx
c0013486:	83 c4 10             	add    esp,0x10
c0013489:	31 c9                	xor    ecx,ecx
c001348b:	80 3d fd d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d6fd,0x0
c0013492:	74 05                	je     c0013499 <Clock::timeInSecondsLocal()+0x3d>
c0013494:	b9 08 07 00 00       	mov    ecx,0x708
c0013499:	31 db                	xor    ebx,ebx
c001349b:	01 c8                	add    eax,ecx
c001349d:	11 da                	adc    edx,ebx
c001349f:	83 c4 08             	add    esp,0x8
c00134a2:	5b                   	pop    ebx
c00134a3:	c3                   	ret    

c00134a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00134a4:	57                   	push   edi
c00134a5:	56                   	push   esi
c00134a6:	53                   	push   ebx
c00134a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00134af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00134b5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00134b8:	0f b6 05 fc d6 02 c0 	movzx  eax,BYTE PTR ds:0xc002d6fc
c00134bf:	03 05 00 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d700
c00134c5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00134cb:	99                   	cdq    
c00134cc:	29 c6                	sub    esi,eax
c00134ce:	19 d7                	sbb    edi,edx
c00134d0:	89 f0                	mov    eax,esi
c00134d2:	89 fa                	mov    edx,edi
c00134d4:	31 f6                	xor    esi,esi
c00134d6:	80 3d fd d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d6fd,0x0
c00134dd:	74 05                	je     c00134e4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00134df:	be 08 07 00 00       	mov    esi,0x708
c00134e4:	31 ff                	xor    edi,edi
c00134e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00134ea:	29 f0                	sub    eax,esi
c00134ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134f0:	19 fa                	sbb    edx,edi
c00134f2:	89 d8                	mov    eax,ebx
c00134f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00134f8:	5b                   	pop    ebx
c00134f9:	5e                   	pop    esi
c00134fa:	5f                   	pop    edi
c00134fb:	ff e0                	jmp    eax

c00134fd <datetimeToSeconds(datetime_t)>:
c00134fd:	55                   	push   ebp
c00134fe:	57                   	push   edi
c00134ff:	56                   	push   esi
c0013500:	53                   	push   ebx
c0013501:	83 ec 14             	sub    esp,0x14
c0013504:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013508:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001350c:	89 d3                	mov    ebx,edx
c001350e:	0f b6 c6             	movzx  eax,dh
c0013511:	c1 eb 10             	shr    ebx,0x10
c0013514:	48                   	dec    eax
c0013515:	66 81 eb 6c 07       	sub    bx,0x76c
c001351a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001351e:	0f b6 f5             	movzx  esi,ch
c0013521:	89 cf                	mov    edi,ecx
c0013523:	6b f6 3c             	imul   esi,esi,0x3c
c0013526:	c1 ef 10             	shr    edi,0x10
c0013529:	0f b6 c9             	movzx  ecx,cl
c001352c:	89 f8                	mov    eax,edi
c001352e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013534:	0f b6 f8             	movzx  edi,al
c0013537:	0f b6 d2             	movzx  edx,dl
c001353a:	01 fe                	add    esi,edi
c001353c:	01 f1                	add    ecx,esi
c001353e:	0f b7 f3             	movzx  esi,bx
c0013541:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013545:	c1 f9 1f             	sar    ecx,0x1f
c0013548:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001354d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013551:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013556:	8b 0c 8d 00 a6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5a00]
c001355d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013561:	76 29                	jbe    c001358c <datetimeToSeconds(datetime_t)+0x8f>
c0013563:	f6 c3 03             	test   bl,0x3
c0013566:	75 24                	jne    c001358c <datetimeToSeconds(datetime_t)+0x8f>
c0013568:	31 d2                	xor    edx,edx
c001356a:	bf 64 00 00 00       	mov    edi,0x64
c001356f:	89 d8                	mov    eax,ebx
c0013571:	66 f7 f7             	div    di
c0013574:	66 85 d2             	test   dx,dx
c0013577:	75 12                	jne    c001358b <datetimeToSeconds(datetime_t)+0x8e>
c0013579:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001357f:	bf 90 01 00 00       	mov    edi,0x190
c0013584:	99                   	cdq    
c0013585:	f7 ff                	idiv   edi
c0013587:	85 d2                	test   edx,edx
c0013589:	75 01                	jne    c001358c <datetimeToSeconds(datetime_t)+0x8f>
c001358b:	41                   	inc    ecx
c001358c:	66 83 fb 46          	cmp    bx,0x46
c0013590:	76 45                	jbe    c00135d7 <datetimeToSeconds(datetime_t)+0xda>
c0013592:	bb 46 00 00 00       	mov    ebx,0x46
c0013597:	bf 64 00 00 00       	mov    edi,0x64
c001359c:	bd 90 01 00 00       	mov    ebp,0x190
c00135a1:	b8 6d 01 00 00       	mov    eax,0x16d
c00135a6:	f6 c3 03             	test   bl,0x3
c00135a9:	75 23                	jne    c00135ce <datetimeToSeconds(datetime_t)+0xd1>
c00135ab:	89 d8                	mov    eax,ebx
c00135ad:	99                   	cdq    
c00135ae:	f7 ff                	idiv   edi
c00135b0:	b8 6e 01 00 00       	mov    eax,0x16e
c00135b5:	85 d2                	test   edx,edx
c00135b7:	75 15                	jne    c00135ce <datetimeToSeconds(datetime_t)+0xd1>
c00135b9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00135bf:	99                   	cdq    
c00135c0:	f7 fd                	idiv   ebp
c00135c2:	83 fa 01             	cmp    edx,0x1
c00135c5:	19 c0                	sbb    eax,eax
c00135c7:	f7 d0                	not    eax
c00135c9:	05 6e 01 00 00       	add    eax,0x16e
c00135ce:	01 c1                	add    ecx,eax
c00135d0:	43                   	inc    ebx
c00135d1:	39 f3                	cmp    ebx,esi
c00135d3:	7c cc                	jl     c00135a1 <datetimeToSeconds(datetime_t)+0xa4>
c00135d5:	eb 35                	jmp    c001360c <datetimeToSeconds(datetime_t)+0x10f>
c00135d7:	74 33                	je     c001360c <datetimeToSeconds(datetime_t)+0x10f>
c00135d9:	b8 45 00 00 00       	mov    eax,0x45
c00135de:	89 c2                	mov    edx,eax
c00135e0:	83 e2 03             	and    edx,0x3
c00135e3:	39 f0                	cmp    eax,esi
c00135e5:	7e 0f                	jle    c00135f6 <datetimeToSeconds(datetime_t)+0xf9>
c00135e7:	83 fa 01             	cmp    edx,0x1
c00135ea:	19 d2                	sbb    edx,edx
c00135ec:	48                   	dec    eax
c00135ed:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00135f4:	eb e8                	jmp    c00135de <datetimeToSeconds(datetime_t)+0xe1>
c00135f6:	b8 6d 01 00 00       	mov    eax,0x16d
c00135fb:	85 d2                	test   edx,edx
c00135fd:	75 0b                	jne    c001360a <datetimeToSeconds(datetime_t)+0x10d>
c00135ff:	66 83 fb 01          	cmp    bx,0x1
c0013603:	19 c0                	sbb    eax,eax
c0013605:	05 6e 01 00 00       	add    eax,0x16e
c001360a:	29 c1                	sub    ecx,eax
c001360c:	b8 80 51 01 00       	mov    eax,0x15180
c0013611:	f7 e9                	imul   ecx
c0013613:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013617:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001361b:	83 c4 14             	add    esp,0x14
c001361e:	5b                   	pop    ebx
c001361f:	5e                   	pop    esi
c0013620:	5f                   	pop    edi
c0013621:	5d                   	pop    ebp
c0013622:	c3                   	ret    
c0013623:	90                   	nop

c0013624 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013624:	57                   	push   edi
c0013625:	56                   	push   esi
c0013626:	53                   	push   ebx
c0013627:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001362b:	8b 06                	mov    eax,DWORD PTR [esi]
c001362d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013630:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013634:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013638:	e8 c0 fe ff ff       	call   c00134fd <datetimeToSeconds(datetime_t)>
c001363d:	59                   	pop    ecx
c001363e:	0f b6 0d fc d6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d6fc
c0013645:	5b                   	pop    ebx
c0013646:	03 0d 00 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d700
c001364c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013652:	89 cb                	mov    ebx,ecx
c0013654:	c1 fb 1f             	sar    ebx,0x1f
c0013657:	29 c8                	sub    eax,ecx
c0013659:	19 da                	sbb    edx,ebx
c001365b:	31 c9                	xor    ecx,ecx
c001365d:	80 3d fd d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d6fd,0x0
c0013664:	74 05                	je     c001366b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013666:	b9 08 07 00 00       	mov    ecx,0x708
c001366b:	31 db                	xor    ebx,ebx
c001366d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013671:	29 c8                	sub    eax,ecx
c0013673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013677:	19 da                	sbb    edx,ebx
c0013679:	89 f8                	mov    eax,edi
c001367b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001367f:	5b                   	pop    ebx
c0013680:	5e                   	pop    esi
c0013681:	5f                   	pop    edi
c0013682:	ff e0                	jmp    eax

c0013684 <secondsToDatetime(unsigned long long)>:
c0013684:	55                   	push   ebp
c0013685:	57                   	push   edi
c0013686:	56                   	push   esi
c0013687:	53                   	push   ebx
c0013688:	83 ec 1c             	sub    esp,0x1c
c001368b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001368f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013693:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013697:	6a 00                	push   0x0
c0013699:	68 80 51 01 00       	push   0x15180
c001369e:	55                   	push   ebp
c001369f:	57                   	push   edi
c00136a0:	e8 6f 2e 01 00       	call   c0026514 <__udivdi3>
c00136a5:	83 c4 10             	add    esp,0x10
c00136a8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00136ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136b2:	6a 00                	push   0x0
c00136b4:	68 80 51 01 00       	push   0x15180
c00136b9:	55                   	push   ebp
c00136ba:	57                   	push   edi
c00136bb:	bf 10 0e 00 00       	mov    edi,0xe10
c00136c0:	e8 4f 2f 01 00       	call   c0026614 <__umoddi3>
c00136c5:	83 c4 10             	add    esp,0x10
c00136c8:	99                   	cdq    
c00136c9:	f7 ff                	idiv   edi
c00136cb:	bf 3c 00 00 00       	mov    edi,0x3c
c00136d0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00136d3:	89 d0                	mov    eax,edx
c00136d5:	99                   	cdq    
c00136d6:	f7 ff                	idiv   edi
c00136d8:	85 db                	test   ebx,ebx
c00136da:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00136dd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00136e0:	79 11                	jns    c00136f3 <secondsToDatetime(unsigned long long)+0x6f>
c00136e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00136e6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00136ec:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00136f1:	eb 07                	jmp    c00136fa <secondsToDatetime(unsigned long long)+0x76>
c00136f3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00136f8:	89 d8                	mov    eax,ebx
c00136fa:	bf b4 05 00 00       	mov    edi,0x5b4
c00136ff:	99                   	cdq    
c0013700:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013705:	f7 f9                	idiv   ecx
c0013707:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001370c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013710:	31 d2                	xor    edx,edx
c0013712:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001371a:	01 c3                	add    ebx,eax
c001371c:	89 d8                	mov    eax,ebx
c001371e:	f7 f1                	div    ecx
c0013720:	31 d2                	xor    edx,edx
c0013722:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013725:	89 d8                	mov    eax,ebx
c0013727:	f7 f7                	div    edi
c0013729:	31 d2                	xor    edx,edx
c001372b:	29 c1                	sub    ecx,eax
c001372d:	89 d8                	mov    eax,ebx
c001372f:	f7 f5                	div    ebp
c0013731:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013736:	29 c1                	sub    ecx,eax
c0013738:	31 d2                	xor    edx,edx
c001373a:	89 c8                	mov    eax,ecx
c001373c:	f7 f5                	div    ebp
c001373e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013743:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013747:	31 d2                	xor    edx,edx
c0013749:	89 c8                	mov    eax,ecx
c001374b:	f7 f5                	div    ebp
c001374d:	31 d2                	xor    edx,edx
c001374f:	01 c3                	add    ebx,eax
c0013751:	89 c8                	mov    eax,ecx
c0013753:	f7 f7                	div    edi
c0013755:	bf 99 00 00 00       	mov    edi,0x99
c001375a:	29 c3                	sub    ebx,eax
c001375c:	31 d2                	xor    edx,edx
c001375e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013766:	29 c3                	sub    ebx,eax
c0013768:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001376b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001376e:	bb 05 00 00 00       	mov    ebx,0x5
c0013773:	83 c1 02             	add    ecx,0x2
c0013776:	89 c8                	mov    eax,ecx
c0013778:	f7 f7                	div    edi
c001377a:	31 d2                	xor    edx,edx
c001377c:	89 c7                	mov    edi,eax
c001377e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013784:	83 c0 02             	add    eax,0x2
c0013787:	f7 f3                	div    ebx
c0013789:	89 eb                	mov    ebx,ebp
c001378b:	29 c3                	sub    ebx,eax
c001378d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013793:	88 1e                	mov    BYTE PTR [esi],bl
c0013795:	19 c0                	sbb    eax,eax
c0013797:	31 d2                	xor    edx,edx
c0013799:	83 e0 0c             	and    eax,0xc
c001379c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00137a0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00137a8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00137ac:	83 f9 01             	cmp    ecx,0x1
c00137af:	0f 96 c2             	setbe  dl
c00137b2:	41                   	inc    ecx
c00137b3:	01 d0                	add    eax,edx
c00137b5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00137b8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00137bc:	83 c4 1c             	add    esp,0x1c
c00137bf:	89 f0                	mov    eax,esi
c00137c1:	5b                   	pop    ebx
c00137c2:	5e                   	pop    esi
c00137c3:	5f                   	pop    edi
c00137c4:	5d                   	pop    ebp
c00137c5:	c2 04 00             	ret    0x4

c00137c8 <Clock::timeInDatetimeLocal()>:
c00137c8:	53                   	push   ebx
c00137c9:	83 ec 14             	sub    esp,0x14
c00137cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00137d4:	e8 83 fc ff ff       	call   c001345c <Clock::timeInSecondsLocal()>
c00137d9:	83 c4 0c             	add    esp,0xc
c00137dc:	52                   	push   edx
c00137dd:	50                   	push   eax
c00137de:	53                   	push   ebx
c00137df:	e8 a0 fe ff ff       	call   c0013684 <secondsToDatetime(unsigned long long)>
c00137e4:	89 d8                	mov    eax,ebx
c00137e6:	83 c4 14             	add    esp,0x14
c00137e9:	5b                   	pop    ebx
c00137ea:	c2 04 00             	ret    0x4
c00137ed:	90                   	nop

c00137ee <Device::hibernate()>:
c00137ee:	c3                   	ret    
c00137ef:	90                   	nop

c00137f0 <Device::wake()>:
c00137f0:	c3                   	ret    
c00137f1:	90                   	nop

c00137f2 <Device::detect()>:
c00137f2:	c3                   	ret    
c00137f3:	90                   	nop

c00137f4 <Device::disableLegacy()>:
c00137f4:	c3                   	ret    
c00137f5:	90                   	nop

c00137f6 <Device::powerSaving(PowerSavingLevel)>:
c00137f6:	c3                   	ret    
c00137f7:	90                   	nop

c00137f8 <DriverlessDevice::close(int, int, void*)>:
c00137f8:	31 c0                	xor    eax,eax
c00137fa:	c3                   	ret    
c00137fb:	90                   	nop

c00137fc <DriverlessDevice::detect()>:
c00137fc:	c3                   	ret    
c00137fd:	90                   	nop

c00137fe <DriverlessDevice::open(int, int, void*)>:
c00137fe:	83 ec 18             	sub    esp,0x18
c0013801:	68 30 a6 02 c0       	push   0xc002a630
c0013806:	e8 3a 64 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c001380b:	83 c8 ff             	or     eax,0xffffffff
c001380e:	83 c4 1c             	add    esp,0x1c
c0013811:	c3                   	ret    

c0013812 <Device::~Device()>:
c0013812:	ba 90 a6 02 c0       	mov    edx,0xc002a690
c0013817:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001381b:	89 10                	mov    DWORD PTR [eax],edx
c001381d:	90                   	nop
c001381e:	c3                   	ret    
c001381f:	90                   	nop

c0013820 <Device::~Device()>:
c0013820:	83 ec 0c             	sub    esp,0xc
c0013823:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013827:	e8 e6 ff ff ff       	call   c0013812 <Device::~Device()>
c001382c:	83 c4 04             	add    esp,0x4
c001382f:	83 ec 08             	sub    esp,0x8
c0013832:	68 58 01 00 00       	push   0x158
c0013837:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001383b:	e8 f3 eb ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	83 c4 0c             	add    esp,0xc
c0013846:	c3                   	ret    
c0013847:	90                   	nop

c0013848 <Device::findAndLoadDriver()>:
c0013848:	c7 44 24 04 4e a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a64e
c0013850:	e9 b6 ec ff ff       	jmp    c001250b <Dbg::kprintf(char const*, ...)>
c0013855:	90                   	nop

c0013856 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013856:	57                   	push   edi
c0013857:	b9 09 00 00 00       	mov    ecx,0x9
c001385c:	56                   	push   esi
c001385d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013861:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013865:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001386f:	81 c7 18 01 00 00    	add    edi,0x118
c0013875:	fc                   	cld    
c0013876:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013878:	5e                   	pop    esi
c0013879:	5f                   	pop    edi
c001387a:	c3                   	ret    
c001387b:	90                   	nop

c001387c <Device::preOpenACPI(void*, char*, char*)>:
c001387c:	57                   	push   edi
c001387d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013882:	56                   	push   esi
c0013883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013887:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001388b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013895:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001389b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00138a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138a7:	b9 0e 00 00 00       	mov    ecx,0xe
c00138ac:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00138b2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00138b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138b8:	5e                   	pop    esi
c00138b9:	5f                   	pop    edi
c00138ba:	c3                   	ret    
c00138bb:	90                   	nop

c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00138bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138c0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00138c5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00138cc:	75 0b                	jne    c00138d9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00138ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00138d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00138d7:	eb 1e                	jmp    c00138f7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00138d9:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00138de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00138e4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00138ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00138ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138f4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00138f7:	ff e0                	jmp    eax
c00138f9:	90                   	nop

c00138fa <Device::getParent()>:
c00138fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138fe:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013904:	c3                   	ret    
c0013905:	90                   	nop

c0013906 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001390a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001390f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013916:	75 0b                	jne    c0013923 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013918:	8b 00                	mov    eax,DWORD PTR [eax]
c001391a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001391e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013921:	eb 1e                	jmp    c0013941 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013923:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0013928:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001392e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013934:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013936:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001393a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001393e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013941:	ff e0                	jmp    eax
c0013943:	90                   	nop

c0013944 <Device::addChild(Device*)>:
c0013944:	53                   	push   ebx
c0013945:	83 ec 08             	sub    esp,0x8
c0013948:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001394c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013950:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013956:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001395c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001395e:	85 d2                	test   edx,edx
c0013960:	74 04                	je     c0013966 <Device::addChild(Device*)+0x22>
c0013962:	89 d3                	mov    ebx,edx
c0013964:	eb f6                	jmp    c001395c <Device::addChild(Device*)+0x18>
c0013966:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013969:	83 ec 0c             	sub    esp,0xc
c001396c:	6a 08                	push   0x8
c001396e:	e8 29 bc ff ff       	call   c000f59c <malloc>
c0013973:	89 03                	mov    DWORD PTR [ebx],eax
c0013975:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001397b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013982:	83 c4 18             	add    esp,0x18
c0013985:	5b                   	pop    ebx
c0013986:	c3                   	ret    
c0013987:	90                   	nop

c0013988 <Device::removeAllChildren()>:
c0013988:	56                   	push   esi
c0013989:	53                   	push   ebx
c001398a:	52                   	push   edx
c001398b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001398f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013995:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013998:	74 17                	je     c00139b1 <Device::removeAllChildren()+0x29>
c001399a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001399d:	85 c0                	test   eax,eax
c001399f:	74 0c                	je     c00139ad <Device::removeAllChildren()+0x25>
c00139a1:	83 ec 0c             	sub    esp,0xc
c00139a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00139a6:	50                   	push   eax
c00139a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00139aa:	83 c4 10             	add    esp,0x10
c00139ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139af:	eb e4                	jmp    c0013995 <Device::removeAllChildren()+0xd>
c00139b1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00139b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139bd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00139c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139ca:	58                   	pop    eax
c00139cb:	5b                   	pop    ebx
c00139cc:	5e                   	pop    esi
c00139cd:	c3                   	ret    

c00139ce <Device::hibernateAll()>:
c00139ce:	53                   	push   ebx
c00139cf:	83 ec 14             	sub    esp,0x14
c00139d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139d8:	53                   	push   ebx
c00139d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00139dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00139e2:	83 c4 10             	add    esp,0x10
c00139e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139e8:	74 0f                	je     c00139f9 <Device::hibernateAll()+0x2b>
c00139ea:	83 ec 0c             	sub    esp,0xc
c00139ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139f0:	e8 d9 ff ff ff       	call   c00139ce <Device::hibernateAll()>
c00139f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139f7:	eb e9                	jmp    c00139e2 <Device::hibernateAll()+0x14>
c00139f9:	83 c4 08             	add    esp,0x8
c00139fc:	5b                   	pop    ebx
c00139fd:	c3                   	ret    

c00139fe <Device::wakeAll()>:
c00139fe:	53                   	push   ebx
c00139ff:	83 ec 14             	sub    esp,0x14
c0013a02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a08:	53                   	push   ebx
c0013a09:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013a0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a12:	83 c4 10             	add    esp,0x10
c0013a15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a18:	74 0f                	je     c0013a29 <Device::wakeAll()+0x2b>
c0013a1a:	83 ec 0c             	sub    esp,0xc
c0013a1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a20:	e8 d9 ff ff ff       	call   c00139fe <Device::wakeAll()>
c0013a25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a27:	eb e9                	jmp    c0013a12 <Device::wakeAll()+0x14>
c0013a29:	83 c4 08             	add    esp,0x8
c0013a2c:	5b                   	pop    ebx
c0013a2d:	c3                   	ret    

c0013a2e <Device::detectAll()>:
c0013a2e:	53                   	push   ebx
c0013a2f:	83 ec 14             	sub    esp,0x14
c0013a32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a38:	53                   	push   ebx
c0013a39:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013a3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a48:	74 0f                	je     c0013a59 <Device::detectAll()+0x2b>
c0013a4a:	83 ec 0c             	sub    esp,0xc
c0013a4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a50:	e8 d9 ff ff ff       	call   c0013a2e <Device::detectAll()>
c0013a55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a57:	eb e9                	jmp    c0013a42 <Device::detectAll()+0x14>
c0013a59:	83 c4 08             	add    esp,0x8
c0013a5c:	5b                   	pop    ebx
c0013a5d:	c3                   	ret    

c0013a5e <Device::disableLegacyAll()>:
c0013a5e:	53                   	push   ebx
c0013a5f:	83 ec 14             	sub    esp,0x14
c0013a62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a68:	53                   	push   ebx
c0013a69:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013a6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a78:	74 0f                	je     c0013a89 <Device::disableLegacyAll()+0x2b>
c0013a7a:	83 ec 0c             	sub    esp,0xc
c0013a7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a80:	e8 d9 ff ff ff       	call   c0013a5e <Device::disableLegacyAll()>
c0013a85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a87:	eb e9                	jmp    c0013a72 <Device::disableLegacyAll()+0x14>
c0013a89:	83 c4 08             	add    esp,0x8
c0013a8c:	5b                   	pop    ebx
c0013a8d:	c3                   	ret    

c0013a8e <Device::loadDriversForAll()>:
c0013a8e:	53                   	push   ebx
c0013a8f:	83 ec 08             	sub    esp,0x8
c0013a92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a96:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013a9d:	75 0c                	jne    c0013aab <Device::loadDriversForAll()+0x1d>
c0013a9f:	83 ec 0c             	sub    esp,0xc
c0013aa2:	53                   	push   ebx
c0013aa3:	e8 a0 fd ff ff       	call   c0013848 <Device::findAndLoadDriver()>
c0013aa8:	83 c4 10             	add    esp,0x10
c0013aab:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ab1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ab4:	74 12                	je     c0013ac8 <Device::loadDriversForAll()+0x3a>
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013abc:	e8 cd ff ff ff       	call   c0013a8e <Device::loadDriversForAll()>
c0013ac1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ac3:	83 c4 10             	add    esp,0x10
c0013ac6:	eb e9                	jmp    c0013ab1 <Device::loadDriversForAll()+0x23>
c0013ac8:	83 c4 08             	add    esp,0x8
c0013acb:	5b                   	pop    ebx
c0013acc:	c3                   	ret    
c0013acd:	90                   	nop

c0013ace <Device::closeAll()>:
c0013ace:	53                   	push   ebx
c0013acf:	83 ec 08             	sub    esp,0x8
c0013ad2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ad8:	6a 00                	push   0x0
c0013ada:	6a 00                	push   0x0
c0013adc:	6a 00                	push   0x0
c0013ade:	53                   	push   ebx
c0013adf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ae2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ae8:	83 c4 10             	add    esp,0x10
c0013aeb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013aee:	74 0f                	je     c0013aff <Device::closeAll()+0x31>
c0013af0:	83 ec 0c             	sub    esp,0xc
c0013af3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013af6:	e8 d3 ff ff ff       	call   c0013ace <Device::closeAll()>
c0013afb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013afd:	eb e9                	jmp    c0013ae8 <Device::closeAll()+0x1a>
c0013aff:	83 c4 08             	add    esp,0x8
c0013b02:	5b                   	pop    ebx
c0013b03:	c3                   	ret    

c0013b04 <Device::powerSavingAll(PowerSavingLevel)>:
c0013b04:	56                   	push   esi
c0013b05:	53                   	push   ebx
c0013b06:	83 ec 0c             	sub    esp,0xc
c0013b09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013b0d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013b11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b13:	56                   	push   esi
c0013b14:	53                   	push   ebx
c0013b15:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013b18:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b1e:	83 c4 10             	add    esp,0x10
c0013b21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b24:	74 0f                	je     c0013b35 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013b26:	52                   	push   edx
c0013b27:	52                   	push   edx
c0013b28:	56                   	push   esi
c0013b29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b2c:	e8 d3 ff ff ff       	call   c0013b04 <Device::powerSavingAll(PowerSavingLevel)>
c0013b31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b33:	eb e9                	jmp    c0013b1e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013b35:	58                   	pop    eax
c0013b36:	5b                   	pop    ebx
c0013b37:	5e                   	pop    esi
c0013b38:	c3                   	ret    
c0013b39:	90                   	nop

c0013b3a <Device::setName(char const*)>:
c0013b3a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013b42:	e9 c5 cc fe ff       	jmp    c000080c <strcpy>
c0013b47:	90                   	nop

c0013b48 <Device::Device(char const*)>:
c0013b48:	83 ec 1c             	sub    esp,0x1c
c0013b4b:	ba 90 a6 02 c0       	mov    edx,0xc002a690
c0013b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b54:	89 10                	mov    DWORD PTR [eax],edx
c0013b56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b5a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b68:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b76:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b84:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013b8e:	83 ec 08             	sub    esp,0x8
c0013b91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b99:	e8 9c ff ff ff       	call   c0013b3a <Device::setName(char const*)>
c0013b9e:	83 c4 10             	add    esp,0x10
c0013ba1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013ba9:	83 ec 0c             	sub    esp,0xc
c0013bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bb0:	e8 e7 b9 ff ff       	call   c000f59c <malloc>
c0013bb5:	83 c4 10             	add    esp,0x10
c0013bb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bbe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bc5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013bc9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bd3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013bd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013be3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013be9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bf4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bff:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c0a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c18:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c26:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c34:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013c3e:	90                   	nop
c0013c3f:	83 c4 1c             	add    esp,0x1c
c0013c42:	c3                   	ret    
c0013c43:	90                   	nop

c0013c44 <Device::getName()>:
c0013c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c48:	05 d0 00 00 00       	add    eax,0xd0
c0013c4d:	c3                   	ret    

c0013c4e <DriverlessDevice::DriverlessDevice(char const*)>:
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c55:	83 ec 08             	sub    esp,0x8
c0013c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c5c:	50                   	push   eax
c0013c5d:	e8 e6 fe ff ff       	call   c0013b48 <Device::Device(char const*)>
c0013c62:	83 c4 10             	add    esp,0x10
c0013c65:	ba bc a6 02 c0       	mov    edx,0xc002a6bc
c0013c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6e:	89 10                	mov    DWORD PTR [eax],edx
c0013c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c74:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013c7e:	90                   	nop
c0013c7f:	83 c4 0c             	add    esp,0xc
c0013c82:	c3                   	ret    
c0013c83:	90                   	nop

c0013c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013c84:	57                   	push   edi
c0013c85:	56                   	push   esi
c0013c86:	53                   	push   ebx
c0013c87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c93:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013c99:	75 0c                	jne    c0013ca7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013c9b:	52                   	push   edx
c0013c9c:	52                   	push   edx
c0013c9d:	53                   	push   ebx
c0013c9e:	56                   	push   esi
c0013c9f:	e8 ac 47 01 00       	call   c0028450 <LinkedList<Device>::addElement(Device*)>
c0013ca4:	83 c4 10             	add    esp,0x10
c0013ca7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cb0:	74 12                	je     c0013cc4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013cb2:	50                   	push   eax
c0013cb3:	57                   	push   edi
c0013cb4:	56                   	push   esi
c0013cb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb8:	e8 c7 ff ff ff       	call   c0013c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013cbd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	eb e9                	jmp    c0013cad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013cc4:	5b                   	pop    ebx
c0013cc5:	5e                   	pop    esi
c0013cc6:	5f                   	pop    edi
c0013cc7:	c3                   	ret    

c0013cc8 <getDevicesOfType(DeviceType)>:
c0013cc8:	53                   	push   ebx
c0013cc9:	83 ec 14             	sub    esp,0x14
c0013ccc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cd0:	53                   	push   ebx
c0013cd1:	e8 56 48 01 00       	call   c002852c <LinkedList<Device>::LinkedList()>
c0013cd6:	83 c4 0c             	add    esp,0xc
c0013cd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cdd:	53                   	push   ebx
c0013cde:	ff 35 88 d5 02 c0    	push   DWORD PTR ds:0xc002d588
c0013ce4:	e8 9b ff ff ff       	call   c0013c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ce9:	89 d8                	mov    eax,ebx
c0013ceb:	83 c4 18             	add    esp,0x18
c0013cee:	5b                   	pop    ebx
c0013cef:	c2 04 00             	ret    0x4

c0013cf2 <HardDiskController::HardDiskController(char const*)>:
c0013cf2:	83 ec 0c             	sub    esp,0xc
c0013cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf9:	83 ec 08             	sub    esp,0x8
c0013cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d00:	50                   	push   eax
c0013d01:	e8 42 fe ff ff       	call   c0013b48 <Device::Device(char const*)>
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	ba e8 a6 02 c0       	mov    edx,0xc002a6e8
c0013d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d12:	89 10                	mov    DWORD PTR [eax],edx
c0013d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d18:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013d22:	90                   	nop
c0013d23:	83 c4 0c             	add    esp,0xc
c0013d26:	c3                   	ret    
c0013d27:	90                   	nop

c0013d28 <HardDiskController::~HardDiskController()>:
c0013d28:	83 ec 0c             	sub    esp,0xc
c0013d2b:	ba e8 a6 02 c0       	mov    edx,0xc002a6e8
c0013d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d34:	89 10                	mov    DWORD PTR [eax],edx
c0013d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	50                   	push   eax
c0013d3e:	e8 cf fa ff ff       	call   c0013812 <Device::~Device()>
c0013d43:	83 c4 10             	add    esp,0x10
c0013d46:	90                   	nop
c0013d47:	83 c4 0c             	add    esp,0xc
c0013d4a:	c3                   	ret    
c0013d4b:	90                   	nop

c0013d4c <HardDiskController::~HardDiskController()>:
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	83 ec 0c             	sub    esp,0xc
c0013d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d56:	e8 cd ff ff ff       	call   c0013d28 <HardDiskController::~HardDiskController()>
c0013d5b:	83 c4 10             	add    esp,0x10
c0013d5e:	83 ec 08             	sub    esp,0x8
c0013d61:	68 58 01 00 00       	push   0x158
c0013d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6a:	e8 c4 e6 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013d6f:	83 c4 10             	add    esp,0x10
c0013d72:	83 c4 0c             	add    esp,0xc
c0013d75:	c3                   	ret    

c0013d76 <PhysicalDisk::eject()>:
c0013d76:	83 c8 ff             	or     eax,0xffffffff
c0013d79:	c3                   	ret    

c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013d7a:	83 ec 0c             	sub    esp,0xc
c0013d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d81:	83 ec 08             	sub    esp,0x8
c0013d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d88:	50                   	push   eax
c0013d89:	e8 ba fd ff ff       	call   c0013b48 <Device::Device(char const*)>
c0013d8e:	83 c4 10             	add    esp,0x10
c0013d91:	ba 14 a7 02 c0       	mov    edx,0xc002a714
c0013d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9a:	89 10                	mov    DWORD PTR [eax],edx
c0013d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dc8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ddc:	90                   	nop
c0013ddd:	83 c4 0c             	add    esp,0xc
c0013de0:	c3                   	ret    
c0013de1:	90                   	nop

c0013de2 <PhysicalDisk::startCache()>:
c0013de2:	56                   	push   esi
c0013de3:	53                   	push   ebx
c0013de4:	83 ec 10             	sub    esp,0x10
c0013de7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013deb:	6a 44                	push   0x44
c0013ded:	e8 aa b7 ff ff       	call   c000f59c <malloc>
c0013df2:	89 c6                	mov    esi,eax
c0013df4:	58                   	pop    eax
c0013df5:	5a                   	pop    edx
c0013df6:	53                   	push   ebx
c0013df7:	56                   	push   esi
c0013df8:	e8 3f 28 00 00       	call   c001663c <VCache::VCache(PhysicalDisk*)>
c0013dfd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013e03:	83 c4 14             	add    esp,0x14
c0013e06:	5b                   	pop    ebx
c0013e07:	5e                   	pop    esi
c0013e08:	c3                   	ret    
c0013e09:	90                   	nop

c0013e0a <PhysicalDisk::~PhysicalDisk()>:
c0013e0a:	83 ec 0c             	sub    esp,0xc
c0013e0d:	ba 14 a7 02 c0       	mov    edx,0xc002a714
c0013e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e16:	89 10                	mov    DWORD PTR [eax],edx
c0013e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	50                   	push   eax
c0013e20:	e8 ed f9 ff ff       	call   c0013812 <Device::~Device()>
c0013e25:	83 c4 10             	add    esp,0x10
c0013e28:	90                   	nop
c0013e29:	83 c4 0c             	add    esp,0xc
c0013e2c:	c3                   	ret    
c0013e2d:	90                   	nop

c0013e2e <PhysicalDisk::~PhysicalDisk()>:
c0013e2e:	83 ec 0c             	sub    esp,0xc
c0013e31:	83 ec 0c             	sub    esp,0xc
c0013e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e38:	e8 cd ff ff ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0013e3d:	83 c4 10             	add    esp,0x10
c0013e40:	83 ec 08             	sub    esp,0x8
c0013e43:	68 6c 01 00 00       	push   0x16c
c0013e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e4c:	e8 e2 e5 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013e51:	83 c4 10             	add    esp,0x10
c0013e54:	83 c4 0c             	add    esp,0xc
c0013e57:	c3                   	ret    

c0013e58 <FPU::FPU(char const*)>:
c0013e58:	83 ec 0c             	sub    esp,0xc
c0013e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5f:	83 ec 08             	sub    esp,0x8
c0013e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e66:	50                   	push   eax
c0013e67:	e8 dc fc ff ff       	call   c0013b48 <Device::Device(char const*)>
c0013e6c:	83 c4 10             	add    esp,0x10
c0013e6f:	ba 58 a7 02 c0       	mov    edx,0xc002a758
c0013e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e78:	89 10                	mov    DWORD PTR [eax],edx
c0013e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013e88:	90                   	nop
c0013e89:	83 c4 0c             	add    esp,0xc
c0013e8c:	c3                   	ret    
c0013e8d:	90                   	nop

c0013e8e <FPU::~FPU()>:
c0013e8e:	83 ec 0c             	sub    esp,0xc
c0013e91:	ba 58 a7 02 c0       	mov    edx,0xc002a758
c0013e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e9a:	89 10                	mov    DWORD PTR [eax],edx
c0013e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	50                   	push   eax
c0013ea4:	e8 69 f9 ff ff       	call   c0013812 <Device::~Device()>
c0013ea9:	83 c4 10             	add    esp,0x10
c0013eac:	90                   	nop
c0013ead:	83 c4 0c             	add    esp,0xc
c0013eb0:	c3                   	ret    
c0013eb1:	90                   	nop

c0013eb2 <FPU::~FPU()>:
c0013eb2:	83 ec 0c             	sub    esp,0xc
c0013eb5:	83 ec 0c             	sub    esp,0xc
c0013eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ebc:	e8 cd ff ff ff       	call   c0013e8e <FPU::~FPU()>
c0013ec1:	83 c4 10             	add    esp,0x10
c0013ec4:	83 ec 08             	sub    esp,0x8
c0013ec7:	68 58 01 00 00       	push   0x158
c0013ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ed0:	e8 5e e5 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013ed5:	83 c4 10             	add    esp,0x10
c0013ed8:	83 c4 0c             	add    esp,0xc
c0013edb:	c3                   	ret    

c0013edc <setupFPU()>:
c0013edc:	53                   	push   ebx
c0013edd:	83 ec 08             	sub    esp,0x8
c0013ee0:	8b 15 88 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d588
c0013ee6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013eed:	74 19                	je     c0013f08 <setupFPU()+0x2c>
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	68 58 01 00 00       	push   0x158
c0013ef7:	e8 a0 b6 ff ff       	call   c000f59c <malloc>
c0013efc:	89 c3                	mov    ebx,eax
c0013efe:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f01:	e8 94 11 01 00       	call   c002509a <AVX::AVX()>
c0013f06:	eb 5b                	jmp    c0013f63 <setupFPU()+0x87>
c0013f08:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013f0e:	84 c0                	test   al,al
c0013f10:	79 19                	jns    c0013f2b <setupFPU()+0x4f>
c0013f12:	83 ec 0c             	sub    esp,0xc
c0013f15:	68 58 01 00 00       	push   0x158
c0013f1a:	e8 7d b6 ff ff       	call   c000f59c <malloc>
c0013f1f:	89 c3                	mov    ebx,eax
c0013f21:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f24:	e8 97 12 01 00       	call   c00251c0 <SSE::SSE()>
c0013f29:	eb 38                	jmp    c0013f63 <setupFPU()+0x87>
c0013f2b:	a8 20                	test   al,0x20
c0013f2d:	74 19                	je     c0013f48 <setupFPU()+0x6c>
c0013f2f:	83 ec 0c             	sub    esp,0xc
c0013f32:	68 58 01 00 00       	push   0x158
c0013f37:	e8 60 b6 ff ff       	call   c000f59c <malloc>
c0013f3c:	89 c3                	mov    ebx,eax
c0013f3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f41:	e8 e4 11 01 00       	call   c002512a <MMX::MMX()>
c0013f46:	eb 1b                	jmp    c0013f63 <setupFPU()+0x87>
c0013f48:	a8 10                	test   al,0x10
c0013f4a:	74 1c                	je     c0013f68 <setupFPU()+0x8c>
c0013f4c:	83 ec 0c             	sub    esp,0xc
c0013f4f:	68 58 01 00 00       	push   0x158
c0013f54:	e8 43 b6 ff ff       	call   c000f59c <malloc>
c0013f59:	89 c3                	mov    ebx,eax
c0013f5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f5e:	e8 eb 12 01 00       	call   c002524e <x87::x87()>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	eb 24                	jmp    c0013f8c <setupFPU()+0xb0>
c0013f68:	83 e0 ef             	and    eax,0xffffffef
c0013f6b:	83 ec 0c             	sub    esp,0xc
c0013f6e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013f74:	68 44 a7 02 c0       	push   0xc002a744
c0013f79:	e8 8d e5 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0013f7e:	0f 20 c0             	mov    eax,cr0
c0013f81:	83 c8 04             	or     eax,0x4
c0013f84:	0f 22 c0             	mov    cr0,eax
c0013f87:	31 db                	xor    ebx,ebx
c0013f89:	83 c4 10             	add    esp,0x10
c0013f8c:	89 d8                	mov    eax,ebx
c0013f8e:	83 c4 08             	add    esp,0x8
c0013f91:	5b                   	pop    ebx
c0013f92:	c3                   	ret    
c0013f93:	90                   	nop

c0013f94 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013f94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f9c:	c1 e0 04             	shl    eax,0x4
c0013f9f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013fa3:	8d 50 10             	lea    edx,[eax+0x10]
c0013fa6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013fac:	74 08                	je     c0013fb6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013fae:	83 c0 04             	add    eax,0x4
c0013fb1:	39 d0                	cmp    eax,edx
c0013fb3:	75 f1                	jne    c0013fa6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013fb5:	c3                   	ret    
c0013fb6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fc0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013fca:	eb e2                	jmp    c0013fae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013fcc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013fcc:	57                   	push   edi
c0013fcd:	31 c0                	xor    eax,eax
c0013fcf:	56                   	push   esi
c0013fd0:	53                   	push   ebx
c0013fd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013fd5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013fd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013fdd:	89 da                	mov    edx,ebx
c0013fdf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013fe3:	c1 e2 04             	shl    edx,0x4
c0013fe6:	01 ca                	add    edx,ecx
c0013fe8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013ff0:	74 16                	je     c0014008 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013ff2:	40                   	inc    eax
c0013ff3:	83 f8 04             	cmp    eax,0x4
c0013ff6:	75 f0                	jne    c0013fe8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013ff8:	c7 44 24 10 88 a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a788
c0014000:	5b                   	pop    ebx
c0014001:	5e                   	pop    esi
c0014002:	5f                   	pop    edi
c0014003:	e9 3d 5c 00 00       	jmp    c0019c45 <Krnl::panic(char const*)>
c0014008:	8d 04 98             	lea    eax,[eax+ebx*4]
c001400b:	8d 04 81             	lea    eax,[ecx+eax*4]
c001400e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014014:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001401a:	5b                   	pop    ebx
c001401b:	5e                   	pop    esi
c001401c:	5f                   	pop    edi
c001401d:	c3                   	ret    

c001401e <doubleFault(regs*, void*)>:
c001401e:	55                   	push   ebp
c001401f:	89 e5                	mov    ebp,esp
c0014021:	83 ec 08             	sub    esp,0x8
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	68 95 a7 02 c0       	push   0xc002a795
c001402c:	e8 14 5c 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	90                   	nop
c0014035:	c9                   	leave  
c0014036:	c3                   	ret    
c0014037:	90                   	nop

c0014038 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014038:	56                   	push   esi
c0014039:	53                   	push   ebx
c001403a:	50                   	push   eax
c001403b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001403f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014043:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014048:	75 35                	jne    c001407f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001404a:	8d 43 20             	lea    eax,[ebx+0x20]
c001404d:	31 d2                	xor    edx,edx
c001404f:	89 c1                	mov    ecx,eax
c0014051:	c1 e1 04             	shl    ecx,0x4
c0014054:	01 f1                	add    ecx,esi
c0014056:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001405e:	74 3e                	je     c001409e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014060:	42                   	inc    edx
c0014061:	83 fa 04             	cmp    edx,0x4
c0014064:	75 f0                	jne    c0014056 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014066:	83 ec 0c             	sub    esp,0xc
c0014069:	68 af a7 02 c0       	push   0xc002a7af
c001406e:	e8 d2 5b 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001407b:	5a                   	pop    edx
c001407c:	5b                   	pop    ebx
c001407d:	5e                   	pop    esi
c001407e:	c3                   	ret    
c001407f:	83 ec 0c             	sub    esp,0xc
c0014082:	56                   	push   esi
c0014083:	e8 bc fb ff ff       	call   c0013c44 <Device::getName()>
c0014088:	83 c4 10             	add    esp,0x10
c001408b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001408e:	75 ba                	jne    c001404a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014090:	83 fb 0f             	cmp    ebx,0xf
c0014093:	7f 29                	jg     c00140be <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014095:	0f b6 9b e0 c7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3820]
c001409c:	eb ac                	jmp    c001404a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001409e:	8d 04 82             	lea    eax,[edx+eax*4]
c00140a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140a5:	8d 04 86             	lea    eax,[esi+eax*4]
c00140a8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00140ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140b2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00140b8:	89 d8                	mov    eax,ebx
c00140ba:	5a                   	pop    edx
c00140bb:	5b                   	pop    ebx
c00140bc:	5e                   	pop    esi
c00140bd:	c3                   	ret    
c00140be:	83 ec 0c             	sub    esp,0xc
c00140c1:	68 a2 a7 02 c0       	push   0xc002a7a2
c00140c6:	e8 7a 5b 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c00140cb:	83 c4 10             	add    esp,0x10
c00140ce:	e9 77 ff ff ff       	jmp    c001404a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00140d3:	90                   	nop

c00140d4 <InterruptController::clearAllHandlers(int, bool)>:
c00140d4:	56                   	push   esi
c00140d5:	53                   	push   ebx
c00140d6:	52                   	push   edx
c00140d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00140df:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00140e4:	75 61                	jne    c0014147 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00140e6:	8d 46 20             	lea    eax,[esi+0x20]
c00140e9:	c1 e6 04             	shl    esi,0x4
c00140ec:	c1 e0 04             	shl    eax,0x4
c00140ef:	01 de                	add    esi,ebx
c00140f1:	01 d8                	add    eax,ebx
c00140f3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00140fd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014107:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014111:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001411b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014125:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001412f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014139:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014143:	58                   	pop    eax
c0014144:	5b                   	pop    ebx
c0014145:	5e                   	pop    esi
c0014146:	c3                   	ret    
c0014147:	83 ec 0c             	sub    esp,0xc
c001414a:	53                   	push   ebx
c001414b:	e8 f4 fa ff ff       	call   c0013c44 <Device::getName()>
c0014150:	83 c4 10             	add    esp,0x10
c0014153:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014156:	75 8e                	jne    c00140e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014158:	83 fe 0f             	cmp    esi,0xf
c001415b:	7f 09                	jg     c0014166 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001415d:	0f b6 b6 e0 c7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3820]
c0014164:	eb 80                	jmp    c00140e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014166:	83 ec 0c             	sub    esp,0xc
c0014169:	68 bc a7 02 c0       	push   0xc002a7bc
c001416e:	e8 d2 5a 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0014173:	83 c4 10             	add    esp,0x10
c0014176:	e9 6b ff ff ff       	jmp    c00140e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001417b:	90                   	nop

c001417c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001417c:	56                   	push   esi
c001417d:	53                   	push   ebx
c001417e:	52                   	push   edx
c001417f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014183:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014187:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001418c:	75 3a                	jne    c00141c8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001418e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014192:	8d 50 20             	lea    edx,[eax+0x20]
c0014195:	c1 e2 04             	shl    edx,0x4
c0014198:	8d 04 16             	lea    eax,[esi+edx*1]
c001419b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001419f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00141a5:	74 0b                	je     c00141b2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00141a7:	83 c0 04             	add    eax,0x4
c00141aa:	39 d0                	cmp    eax,edx
c00141ac:	75 f1                	jne    c001419f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00141ae:	58                   	pop    eax
c00141af:	5b                   	pop    ebx
c00141b0:	5e                   	pop    esi
c00141b1:	c3                   	ret    
c00141b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141bc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141c6:	eb df                	jmp    c00141a7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00141c8:	83 ec 0c             	sub    esp,0xc
c00141cb:	56                   	push   esi
c00141cc:	e8 73 fa ff ff       	call   c0013c44 <Device::getName()>
c00141d1:	83 c4 10             	add    esp,0x10
c00141d4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141d7:	75 b5                	jne    c001418e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00141d9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00141de:	7f 11                	jg     c00141f1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00141e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141e4:	0f b6 80 e0 c7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3820]
c00141eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141ef:	eb 9d                	jmp    c001418e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00141f1:	83 ec 0c             	sub    esp,0xc
c00141f4:	68 c9 a7 02 c0       	push   0xc002a7c9
c00141f9:	e8 47 5a 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	eb 8b                	jmp    c001418e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014203 <nmiHandler(regs*, void*)>:
c0014203:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0014208:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001420c:	e9 ef aa ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c0014211 <int_handler>:
c0014211:	55                   	push   ebp
c0014212:	57                   	push   edi
c0014213:	56                   	push   esi
c0014214:	53                   	push   ebx
c0014215:	83 ec 0c             	sub    esp,0xc
c0014218:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001421c:	80 3d c4 00 03 c0 00 	cmp    BYTE PTR ds:0xc00300c4,0x0
c0014223:	74 0b                	je     c0014230 <int_handler+0x1f>
c0014225:	fa                   	cli    
c0014226:	f4                   	hlt    
c0014227:	80 3d c4 00 03 c0 00 	cmp    BYTE PTR ds:0xc00300c4,0x0
c001422e:	75 f5                	jne    c0014225 <int_handler+0x14>
c0014230:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0014235:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014238:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001423e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014244:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014247:	83 f8 17             	cmp    eax,0x17
c001424a:	77 13                	ja     c001425f <int_handler+0x4e>
c001424c:	83 ec 08             	sub    esp,0x8
c001424f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014251:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014254:	0f b6 c0             	movzx  eax,al
c0014257:	50                   	push   eax
c0014258:	57                   	push   edi
c0014259:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001425c:	83 c4 10             	add    esp,0x10
c001425f:	83 c3 15             	add    ebx,0x15
c0014262:	c1 e3 04             	shl    ebx,0x4
c0014265:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014269:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014270:	31 db                	xor    ebx,ebx
c0014272:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014276:	85 c0                	test   eax,eax
c0014278:	74 13                	je     c001428d <int_handler+0x7c>
c001427a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001427d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014281:	74 1c                	je     c001429f <int_handler+0x8e>
c0014283:	83 ec 08             	sub    esp,0x8
c0014286:	52                   	push   edx
c0014287:	56                   	push   esi
c0014288:	ff d0                	call   eax
c001428a:	83 c4 10             	add    esp,0x10
c001428d:	43                   	inc    ebx
c001428e:	83 fb 04             	cmp    ebx,0x4
c0014291:	75 df                	jne    c0014272 <int_handler+0x61>
c0014293:	83 c4 0c             	add    esp,0xc
c0014296:	31 c0                	xor    eax,eax
c0014298:	5b                   	pop    ebx
c0014299:	31 d2                	xor    edx,edx
c001429b:	5e                   	pop    esi
c001429c:	5f                   	pop    edi
c001429d:	5d                   	pop    ebp
c001429e:	c3                   	ret    
c001429f:	83 ec 08             	sub    esp,0x8
c00142a2:	52                   	push   edx
c00142a3:	56                   	push   esi
c00142a4:	ff d0                	call   eax
c00142a6:	83 c4 10             	add    esp,0x10
c00142a9:	83 c4 0c             	add    esp,0xc
c00142ac:	5b                   	pop    ebx
c00142ad:	5e                   	pop    esi
c00142ae:	5f                   	pop    edi
c00142af:	5d                   	pop    ebp
c00142b0:	c3                   	ret    
c00142b1:	90                   	nop

c00142b2 <InterruptController::InterruptController(char const*)>:
c00142b2:	83 ec 1c             	sub    esp,0x1c
c00142b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142b9:	83 ec 08             	sub    esp,0x8
c00142bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142c0:	50                   	push   eax
c00142c1:	e8 82 f8 ff ff       	call   c0013b48 <Device::Device(char const*)>
c00142c6:	83 c4 10             	add    esp,0x10
c00142c9:	ba 7c aa 02 c0       	mov    edx,0xc002aa7c
c00142ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142d2:	89 10                	mov    DWORD PTR [eax],edx
c00142d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142d8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00142e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00142ea:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00142f2:	7f 5e                	jg     c0014352 <InterruptController::InterruptController(char const*)+0xa0>
c00142f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00142fc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014301:	7f 49                	jg     c001434c <InterruptController::InterruptController(char const*)+0x9a>
c0014303:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014307:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001430b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014312:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014316:	01 ca                	add    edx,ecx
c0014318:	83 c2 54             	add    edx,0x54
c001431b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014327:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001432b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014336:	01 ca                	add    edx,ecx
c0014338:	81 c2 54 04 00 00    	add    edx,0x454
c001433e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014346:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001434a:	eb b0                	jmp    c00142fc <InterruptController::InterruptController(char const*)+0x4a>
c001434c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014350:	eb 98                	jmp    c00142ea <InterruptController::InterruptController(char const*)+0x38>
c0014352:	90                   	nop
c0014353:	83 c4 1c             	add    esp,0x1c
c0014356:	c3                   	ret    
c0014357:	90                   	nop

c0014358 <InterruptController::~InterruptController()>:
c0014358:	83 ec 0c             	sub    esp,0xc
c001435b:	ba 7c aa 02 c0       	mov    edx,0xc002aa7c
c0014360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014364:	89 10                	mov    DWORD PTR [eax],edx
c0014366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001436a:	83 ec 0c             	sub    esp,0xc
c001436d:	50                   	push   eax
c001436e:	e8 9f f4 ff ff       	call   c0013812 <Device::~Device()>
c0014373:	83 c4 10             	add    esp,0x10
c0014376:	90                   	nop
c0014377:	83 c4 0c             	add    esp,0xc
c001437a:	c3                   	ret    
c001437b:	90                   	nop

c001437c <InterruptController::~InterruptController()>:
c001437c:	83 ec 0c             	sub    esp,0xc
c001437f:	83 ec 0c             	sub    esp,0xc
c0014382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014386:	e8 cd ff ff ff       	call   c0014358 <InterruptController::~InterruptController()>
c001438b:	83 c4 10             	add    esp,0x10
c001438e:	83 ec 08             	sub    esp,0x8
c0014391:	68 58 21 00 00       	push   0x2158
c0014396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001439a:	e8 94 e0 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001439f:	83 c4 10             	add    esp,0x10
c00143a2:	83 c4 0c             	add    esp,0xc
c00143a5:	c3                   	ret    

c00143a6 <displayDebugInfo(regs*)>:
c00143a6:	55                   	push   ebp
c00143a7:	57                   	push   edi
c00143a8:	56                   	push   esi
c00143a9:	53                   	push   ebx
c00143aa:	83 ec 24             	sub    esp,0x24
c00143ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00143b1:	0f 20 c2             	mov    edx,cr0
c00143b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00143b8:	0f 20 d7             	mov    edi,cr2
c00143bb:	0f 20 de             	mov    esi,cr3
c00143be:	0f 20 e5             	mov    ebp,cr4
c00143c1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00143c4:	68 d6 a7 02 c0       	push   0xc002a7d6
c00143c9:	e8 3d e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00143ce:	59                   	pop    ecx
c00143cf:	58                   	pop    eax
c00143d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143d3:	68 e1 a7 02 c0       	push   0xc002a7e1
c00143d8:	e8 2e e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00143dd:	58                   	pop    eax
c00143de:	5a                   	pop    edx
c00143df:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143e2:	68 ec a7 02 c0       	push   0xc002a7ec
c00143e7:	e8 1f e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00143ec:	59                   	pop    ecx
c00143ed:	58                   	pop    eax
c00143ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00143f1:	68 f7 a7 02 c0       	push   0xc002a7f7
c00143f6:	e8 10 e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00143fb:	58                   	pop    eax
c00143fc:	5a                   	pop    edx
c00143fd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014400:	68 02 a8 02 c0       	push   0xc002a802
c0014405:	e8 01 e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001440a:	59                   	pop    ecx
c001440b:	58                   	pop    eax
c001440c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001440f:	68 0d a8 02 c0       	push   0xc002a80d
c0014414:	e8 f2 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014419:	58                   	pop    eax
c001441a:	5a                   	pop    edx
c001441b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001441e:	68 18 a8 02 c0       	push   0xc002a818
c0014423:	e8 e3 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014428:	59                   	pop    ecx
c0014429:	58                   	pop    eax
c001442a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001442d:	68 23 a8 02 c0       	push   0xc002a823
c0014432:	e8 d4 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014437:	58                   	pop    eax
c0014438:	5a                   	pop    edx
c0014439:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001443c:	68 2e a8 02 c0       	push   0xc002a82e
c0014441:	e8 c5 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014446:	59                   	pop    ecx
c0014447:	58                   	pop    eax
c0014448:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001444b:	68 3d a8 02 c0       	push   0xc002a83d
c0014450:	e8 b6 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014455:	58                   	pop    eax
c0014456:	5a                   	pop    edx
c0014457:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001445a:	68 48 a8 02 c0       	push   0xc002a848
c001445f:	e8 a7 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014464:	59                   	pop    ecx
c0014465:	58                   	pop    eax
c0014466:	57                   	push   edi
c0014467:	68 53 a8 02 c0       	push   0xc002a853
c001446c:	e8 9a e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014471:	58                   	pop    eax
c0014472:	5a                   	pop    edx
c0014473:	56                   	push   esi
c0014474:	68 5e a8 02 c0       	push   0xc002a85e
c0014479:	e8 8d e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001447e:	59                   	pop    ecx
c001447f:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014484:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001448a:	e8 48 be ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001448f:	58                   	pop    eax
c0014490:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014493:	5a                   	pop    edx
c0014494:	c1 e0 05             	shl    eax,0x5
c0014497:	05 40 c5 02 c0       	add    eax,0xc002c540
c001449c:	50                   	push   eax
c001449d:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00144a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144a8:	e8 37 c3 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144ad:	59                   	pop    ecx
c00144ae:	58                   	pop    eax
c00144af:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00144b4:	68 69 a8 02 c0       	push   0xc002a869
c00144b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144bf:	e8 20 c3 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144c4:	58                   	pop    eax
c00144c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144ca:	5a                   	pop    edx
c00144cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00144ce:	83 c0 0c             	add    eax,0xc
c00144d1:	50                   	push   eax
c00144d2:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00144d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144dd:	e8 02 c3 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144e2:	59                   	pop    ecx
c00144e3:	58                   	pop    eax
c00144e4:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00144e9:	68 72 a8 02 c0       	push   0xc002a872
c00144ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144f4:	e8 eb c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144f9:	58                   	pop    eax
c00144fa:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00144ff:	5a                   	pop    edx
c0014500:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014503:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014509:	e8 90 c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001450e:	59                   	pop    ecx
c001450f:	58                   	pop    eax
c0014510:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014515:	68 7a a8 02 c0       	push   0xc002a87a
c001451a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014520:	e8 bf c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014525:	58                   	pop    eax
c0014526:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001452b:	5a                   	pop    edx
c001452c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001452f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014535:	e8 64 c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001453a:	59                   	pop    ecx
c001453b:	58                   	pop    eax
c001453c:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014541:	68 82 a8 02 c0       	push   0xc002a882
c0014546:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001454c:	e8 93 c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014551:	58                   	pop    eax
c0014552:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014557:	5a                   	pop    edx
c0014558:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001455b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014561:	e8 38 c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014566:	59                   	pop    ecx
c0014567:	58                   	pop    eax
c0014568:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001456d:	68 8a a8 02 c0       	push   0xc002a88a
c0014572:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014578:	e8 67 c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001457d:	58                   	pop    eax
c001457e:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014583:	5a                   	pop    edx
c0014584:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014587:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001458d:	e8 0c c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014592:	59                   	pop    ecx
c0014593:	58                   	pop    eax
c0014594:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014599:	68 92 a8 02 c0       	push   0xc002a892
c001459e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145a4:	e8 3b c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00145a9:	58                   	pop    eax
c00145aa:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00145af:	5a                   	pop    edx
c00145b0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00145b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b9:	e8 e0 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00145be:	59                   	pop    ecx
c00145bf:	58                   	pop    eax
c00145c0:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00145c5:	68 9a a8 02 c0       	push   0xc002a89a
c00145ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d0:	e8 0f c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00145d5:	58                   	pop    eax
c00145d6:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00145db:	5a                   	pop    edx
c00145dc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00145df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e5:	e8 b4 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00145ea:	59                   	pop    ecx
c00145eb:	58                   	pop    eax
c00145ec:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00145f1:	68 a2 a8 02 c0       	push   0xc002a8a2
c00145f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145fc:	e8 e3 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014601:	58                   	pop    eax
c0014602:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014607:	5a                   	pop    edx
c0014608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001460c:	52                   	push   edx
c001460d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014613:	e8 86 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014618:	59                   	pop    ecx
c0014619:	58                   	pop    eax
c001461a:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001461f:	68 ab a8 02 c0       	push   0xc002a8ab
c0014624:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462a:	e8 b5 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001462f:	58                   	pop    eax
c0014630:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014635:	5a                   	pop    edx
c0014636:	57                   	push   edi
c0014637:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001463d:	e8 5c c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014642:	59                   	pop    ecx
c0014643:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014648:	5f                   	pop    edi
c0014649:	68 b3 a8 02 c0       	push   0xc002a8b3
c001464e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014654:	e8 8b c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014659:	58                   	pop    eax
c001465a:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001465f:	5a                   	pop    edx
c0014660:	56                   	push   esi
c0014661:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014667:	e8 32 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001466c:	59                   	pop    ecx
c001466d:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014672:	5e                   	pop    esi
c0014673:	68 bb a8 02 c0       	push   0xc002a8bb
c0014678:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467e:	e8 61 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014683:	5f                   	pop    edi
c0014684:	58                   	pop    eax
c0014685:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001468a:	55                   	push   ebp
c001468b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014691:	e8 08 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014696:	58                   	pop    eax
c0014697:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001469c:	5a                   	pop    edx
c001469d:	68 c3 a8 02 c0       	push   0xc002a8c3
c00146a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a8:	e8 37 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00146ad:	0f 21 c0             	mov    eax,db0
c00146b0:	59                   	pop    ecx
c00146b1:	5e                   	pop    esi
c00146b2:	50                   	push   eax
c00146b3:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00146b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146be:	e8 db c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00146c3:	5f                   	pop    edi
c00146c4:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00146c9:	5d                   	pop    ebp
c00146ca:	68 cc a8 02 c0       	push   0xc002a8cc
c00146cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d5:	e8 0a c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00146da:	0f 21 c8             	mov    eax,db1
c00146dd:	5a                   	pop    edx
c00146de:	59                   	pop    ecx
c00146df:	50                   	push   eax
c00146e0:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00146e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146eb:	e8 ae c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00146f0:	5e                   	pop    esi
c00146f1:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00146f6:	5f                   	pop    edi
c00146f7:	68 d4 a8 02 c0       	push   0xc002a8d4
c00146fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014702:	e8 dd c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014707:	0f 21 d0             	mov    eax,db2
c001470a:	5d                   	pop    ebp
c001470b:	5a                   	pop    edx
c001470c:	50                   	push   eax
c001470d:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014712:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014718:	e8 81 c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001471d:	59                   	pop    ecx
c001471e:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014723:	5e                   	pop    esi
c0014724:	68 dc a8 02 c0       	push   0xc002a8dc
c0014729:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472f:	e8 b0 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014734:	0f 21 d8             	mov    eax,db3
c0014737:	5f                   	pop    edi
c0014738:	5d                   	pop    ebp
c0014739:	50                   	push   eax
c001473a:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001473f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014745:	e8 54 c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001474a:	58                   	pop    eax
c001474b:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014750:	5a                   	pop    edx
c0014751:	68 e4 a8 02 c0       	push   0xc002a8e4
c0014756:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475c:	e8 83 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014761:	0f 21 f0             	mov    eax,db6
c0014764:	59                   	pop    ecx
c0014765:	5e                   	pop    esi
c0014766:	50                   	push   eax
c0014767:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001476c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014772:	e8 27 c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014777:	5f                   	pop    edi
c0014778:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001477d:	5d                   	pop    ebp
c001477e:	68 ec a8 02 c0       	push   0xc002a8ec
c0014783:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014789:	e8 56 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001478e:	0f 21 f8             	mov    eax,db7
c0014791:	5a                   	pop    edx
c0014792:	59                   	pop    ecx
c0014793:	50                   	push   eax
c0014794:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0014799:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479f:	e8 fa bf ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00147a4:	5e                   	pop    esi
c00147a5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147a8:	e8 11 86 00 00       	call   c001cdbe <Thr::getDriverNameFromAddress(unsigned long)>
c00147ad:	83 c4 10             	add    esp,0x10
c00147b0:	85 c0                	test   eax,eax
c00147b2:	74 7d                	je     c0014831 <displayDebugInfo(regs*)+0x48b>
c00147b4:	89 c6                	mov    esi,eax
c00147b6:	50                   	push   eax
c00147b7:	50                   	push   eax
c00147b8:	56                   	push   esi
c00147b9:	68 f4 a8 02 c0       	push   0xc002a8f4
c00147be:	e8 48 dd ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00147c3:	5a                   	pop    edx
c00147c4:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00147c9:	59                   	pop    ecx
c00147ca:	68 02 a9 02 c0       	push   0xc002a902
c00147cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d5:	e8 0a c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00147da:	5f                   	pop    edi
c00147db:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00147e0:	5d                   	pop    ebp
c00147e1:	56                   	push   esi
c00147e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e8:	e8 f7 bf ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00147ed:	58                   	pop    eax
c00147ee:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c00147f3:	5a                   	pop    edx
c00147f4:	68 0e a9 02 c0       	push   0xc002a90e
c00147f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ff:	e8 e0 bf ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014804:	59                   	pop    ecx
c0014805:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001480a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014810:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014813:	e8 dd 85 00 00       	call   c001cdf5 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014818:	5b                   	pop    ebx
c0014819:	5d                   	pop    ebp
c001481a:	50                   	push   eax
c001481b:	57                   	push   edi
c001481c:	e8 7d bf ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014821:	58                   	pop    eax
c0014822:	5a                   	pop    edx
c0014823:	56                   	push   esi
c0014824:	68 1a a9 02 c0       	push   0xc002a91a
c0014829:	e8 dd dc ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001482e:	83 c4 10             	add    esp,0x10
c0014831:	fa                   	cli    
c0014832:	f4                   	hlt    
c0014833:	eb fe                	jmp    c0014833 <displayDebugInfo(regs*)+0x48d>

c0014835 <x87EmulHandler(regs*, void*)>:
c0014835:	83 ec 0c             	sub    esp,0xc
c0014838:	0f 20 c2             	mov    edx,cr0
c001483b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014840:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014844:	75 4b                	jne    c0014891 <x87EmulHandler(regs*, void*)+0x5c>
c0014846:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001484b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014851:	85 c0                	test   eax,eax
c0014853:	74 05                	je     c001485a <x87EmulHandler(regs*, void*)+0x25>
c0014855:	83 e2 08             	and    edx,0x8
c0014858:	75 17                	jne    c0014871 <x87EmulHandler(regs*, void*)+0x3c>
c001485a:	83 ec 0c             	sub    esp,0xc
c001485d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014861:	e8 29 a9 00 00       	call   c001f18f <Vm::x87Handler(regs*)>
c0014866:	83 c4 10             	add    esp,0x10
c0014869:	84 c0                	test   al,al
c001486b:	74 24                	je     c0014891 <x87EmulHandler(regs*, void*)+0x5c>
c001486d:	83 c4 0c             	add    esp,0xc
c0014870:	c3                   	ret    
c0014871:	83 ec 0c             	sub    esp,0xc
c0014874:	68 40 a9 02 c0       	push   0xc002a940
c0014879:	e8 8d dc ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001487e:	0f 06                	clts   
c0014880:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014885:	83 c4 10             	add    esp,0x10
c0014888:	a3 08 d7 02 c0       	mov    ds:0xc002d708,eax
c001488d:	83 c4 0c             	add    esp,0xc
c0014890:	c3                   	ret    
c0014891:	83 ec 0c             	sub    esp,0xc
c0014894:	68 2a a9 02 c0       	push   0xc002a92a
c0014899:	e8 6d dc ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001489e:	5a                   	pop    edx
c001489f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148a3:	e8 fe fa ff ff       	call   c00143a6 <displayDebugInfo(regs*)>

c00148a8 <gpFault(regs*, void*)>:
c00148a8:	53                   	push   ebx
c00148a9:	83 ec 14             	sub    esp,0x14
c00148ac:	c7 05 04 d7 02 c0 68 e6 01 c0 	mov    DWORD PTR ds:0xc002d704,0xc001e668
c00148b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148ba:	53                   	push   ebx
c00148bb:	e8 a8 9d 00 00       	call   c001e668 <Vm::faultHandler(regs*)>
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	84 c0                	test   al,al
c00148c5:	74 05                	je     c00148cc <gpFault(regs*, void*)+0x24>
c00148c7:	83 c4 08             	add    esp,0x8
c00148ca:	5b                   	pop    ebx
c00148cb:	c3                   	ret    
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	68 4d a9 02 c0       	push   0xc002a94d
c00148d4:	e8 32 dc ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00148d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148dc:	e8 c5 fa ff ff       	call   c00143a6 <displayDebugInfo(regs*)>

c00148e1 <pgFault(regs*, void*)>:
c00148e1:	83 ec 18             	sub    esp,0x18
c00148e4:	68 68 a9 02 c0       	push   0xc002a968
c00148e9:	e8 1d dc ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00148ee:	58                   	pop    eax
c00148ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148f3:	e8 ae fa ff ff       	call   c00143a6 <displayDebugInfo(regs*)>

c00148f8 <otherISRHandler(regs*, void*)>:
c00148f8:	53                   	push   ebx
c00148f9:	83 ec 0c             	sub    esp,0xc
c00148fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014900:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014903:	50                   	push   eax
c0014904:	50                   	push   eax
c0014905:	68 75 a9 02 c0       	push   0xc002a975
c001490a:	e8 fc db ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001490f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014912:	e8 8f fa ff ff       	call   c00143a6 <displayDebugInfo(regs*)>

c0014917 <opcodeFault(regs*, void*)>:
c0014917:	55                   	push   ebp
c0014918:	89 e5                	mov    ebp,esp
c001491a:	56                   	push   esi
c001491b:	53                   	push   ebx
c001491c:	83 ec 40             	sub    esp,0x40
c001491f:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0014924:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001492a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014930:	84 c0                	test   al,al
c0014932:	74 24                	je     c0014958 <opcodeFault(regs*, void*)+0x41>
c0014934:	83 ec 0c             	sub    esp,0xc
c0014937:	68 94 a9 02 c0       	push   0xc002a994
c001493c:	e8 ca db ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014941:	83 c4 10             	add    esp,0x10
c0014944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014947:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001494a:	8d 50 19             	lea    edx,[eax+0x19]
c001494d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014950:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014953:	e9 d5 05 00 00       	jmp    c0014f2d <opcodeFault(regs*, void*)+0x616>
c0014958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001495b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001495e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014961:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014965:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001496c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001496f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014972:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014975:	8a 00                	mov    al,BYTE PTR [eax]
c0014977:	3c f0                	cmp    al,0xf0
c0014979:	75 17                	jne    c0014992 <opcodeFault(regs*, void*)+0x7b>
c001497b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001497e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014981:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014984:	8d 50 01             	lea    edx,[eax+0x1]
c0014987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001498a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001498d:	e9 da 00 00 00       	jmp    c0014a6c <opcodeFault(regs*, void*)+0x155>
c0014992:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014995:	8a 00                	mov    al,BYTE PTR [eax]
c0014997:	3c f2                	cmp    al,0xf2
c0014999:	74 09                	je     c00149a4 <opcodeFault(regs*, void*)+0x8d>
c001499b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001499e:	8a 00                	mov    al,BYTE PTR [eax]
c00149a0:	3c f3                	cmp    al,0xf3
c00149a2:	75 1b                	jne    c00149bf <opcodeFault(regs*, void*)+0xa8>
c00149a4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149a8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149b1:	8d 50 01             	lea    edx,[eax+0x1]
c00149b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149ba:	e9 ad 00 00 00       	jmp    c0014a6c <opcodeFault(regs*, void*)+0x155>
c00149bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149c2:	8a 00                	mov    al,BYTE PTR [eax]
c00149c4:	3c 66                	cmp    al,0x66
c00149c6:	75 1f                	jne    c00149e7 <opcodeFault(regs*, void*)+0xd0>
c00149c8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149cc:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00149d0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149d9:	8d 50 01             	lea    edx,[eax+0x1]
c00149dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149df:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149e2:	e9 85 00 00 00       	jmp    c0014a6c <opcodeFault(regs*, void*)+0x155>
c00149e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149ea:	8a 00                	mov    al,BYTE PTR [eax]
c00149ec:	3c 67                	cmp    al,0x67
c00149ee:	75 18                	jne    c0014a08 <opcodeFault(regs*, void*)+0xf1>
c00149f0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149f4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149fd:	8d 50 01             	lea    edx,[eax+0x1]
c0014a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a03:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a06:	eb 64                	jmp    c0014a6c <opcodeFault(regs*, void*)+0x155>
c0014a08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a0b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a0d:	3c 2e                	cmp    al,0x2e
c0014a0f:	74 09                	je     c0014a1a <opcodeFault(regs*, void*)+0x103>
c0014a11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a14:	8a 00                	mov    al,BYTE PTR [eax]
c0014a16:	3c 3e                	cmp    al,0x3e
c0014a18:	75 18                	jne    c0014a32 <opcodeFault(regs*, void*)+0x11b>
c0014a1a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a1e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a27:	8d 50 01             	lea    edx,[eax+0x1]
c0014a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a30:	eb 3a                	jmp    c0014a6c <opcodeFault(regs*, void*)+0x155>
c0014a32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a35:	8a 00                	mov    al,BYTE PTR [eax]
c0014a37:	3c 36                	cmp    al,0x36
c0014a39:	74 1b                	je     c0014a56 <opcodeFault(regs*, void*)+0x13f>
c0014a3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a3e:	8a 00                	mov    al,BYTE PTR [eax]
c0014a40:	3c 26                	cmp    al,0x26
c0014a42:	74 12                	je     c0014a56 <opcodeFault(regs*, void*)+0x13f>
c0014a44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a47:	8a 00                	mov    al,BYTE PTR [eax]
c0014a49:	3c 64                	cmp    al,0x64
c0014a4b:	74 09                	je     c0014a56 <opcodeFault(regs*, void*)+0x13f>
c0014a4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a50:	8a 00                	mov    al,BYTE PTR [eax]
c0014a52:	3c 65                	cmp    al,0x65
c0014a54:	75 16                	jne    c0014a6c <opcodeFault(regs*, void*)+0x155>
c0014a56:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a5a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a60:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a63:	8d 50 01             	lea    edx,[eax+0x1]
c0014a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a69:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a6f:	8a 00                	mov    al,BYTE PTR [eax]
c0014a71:	3c 0f                	cmp    al,0xf
c0014a73:	0f 85 ad 00 00 00    	jne    c0014b26 <opcodeFault(regs*, void*)+0x20f>
c0014a79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a7c:	40                   	inc    eax
c0014a7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a7f:	3c c2                	cmp    al,0xc2
c0014a81:	74 0e                	je     c0014a91 <opcodeFault(regs*, void*)+0x17a>
c0014a83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a86:	40                   	inc    eax
c0014a87:	8a 00                	mov    al,BYTE PTR [eax]
c0014a89:	3c c3                	cmp    al,0xc3
c0014a8b:	0f 85 95 00 00 00    	jne    c0014b26 <opcodeFault(regs*, void*)+0x20f>
c0014a91:	83 ec 0c             	sub    esp,0xc
c0014a94:	68 b7 a9 02 c0       	push   0xc002a9b7
c0014a99:	e8 6d da ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014a9e:	83 c4 10             	add    esp,0x10
c0014aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0014aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ab0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ab3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ab6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab8:	8d 50 fe             	lea    edx,[eax-0x2]
c0014abb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014abe:	88 10                	mov    BYTE PTR [eax],dl
c0014ac0:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ac3:	50                   	push   eax
c0014ac4:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ac7:	50                   	push   eax
c0014ac8:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014acb:	50                   	push   eax
c0014acc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014acf:	e8 8a 48 00 00       	call   c001935e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ad4:	83 c4 10             	add    esp,0x10
c0014ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ada:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014add:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ae0:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014ae3:	01 d0                	add    eax,edx
c0014ae5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aeb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aee:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014af1:	48                   	dec    eax
c0014af2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014afb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b01:	83 ec 04             	sub    esp,0x4
c0014b04:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b07:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b0a:	50                   	push   eax
c0014b0b:	e8 a4 b6 fe ff       	call   c00001b4 <voodooXADD>
c0014b10:	83 c4 10             	add    esp,0x10
c0014b13:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b19:	01 c2                	add    edx,eax
c0014b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b21:	e9 07 04 00 00       	jmp    c0014f2d <opcodeFault(regs*, void*)+0x616>
c0014b26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b29:	8a 00                	mov    al,BYTE PTR [eax]
c0014b2b:	3c 0f                	cmp    al,0xf
c0014b2d:	0f 85 8b 01 00 00    	jne    c0014cbe <opcodeFault(regs*, void*)+0x3a7>
c0014b33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b36:	40                   	inc    eax
c0014b37:	8a 00                	mov    al,BYTE PTR [eax]
c0014b39:	3c c7                	cmp    al,0xc7
c0014b3b:	0f 86 7d 01 00 00    	jbe    c0014cbe <opcodeFault(regs*, void*)+0x3a7>
c0014b41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b44:	40                   	inc    eax
c0014b45:	8a 00                	mov    al,BYTE PTR [eax]
c0014b47:	3c cf                	cmp    al,0xcf
c0014b49:	0f 87 6f 01 00 00    	ja     c0014cbe <opcodeFault(regs*, void*)+0x3a7>
c0014b4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b52:	40                   	inc    eax
c0014b53:	8a 00                	mov    al,BYTE PTR [eax]
c0014b55:	83 c0 38             	add    eax,0x38
c0014b58:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b5b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014b5f:	75 0b                	jne    c0014b6c <opcodeFault(regs*, void*)+0x255>
c0014b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b64:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014b67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b6a:	eb 75                	jmp    c0014be1 <opcodeFault(regs*, void*)+0x2ca>
c0014b6c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014b70:	75 0b                	jne    c0014b7d <opcodeFault(regs*, void*)+0x266>
c0014b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b75:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014b78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b7b:	eb 64                	jmp    c0014be1 <opcodeFault(regs*, void*)+0x2ca>
c0014b7d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014b81:	75 0b                	jne    c0014b8e <opcodeFault(regs*, void*)+0x277>
c0014b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b86:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014b89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b8c:	eb 53                	jmp    c0014be1 <opcodeFault(regs*, void*)+0x2ca>
c0014b8e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014b92:	75 0b                	jne    c0014b9f <opcodeFault(regs*, void*)+0x288>
c0014b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014b9a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b9d:	eb 42                	jmp    c0014be1 <opcodeFault(regs*, void*)+0x2ca>
c0014b9f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014ba3:	75 0b                	jne    c0014bb0 <opcodeFault(regs*, void*)+0x299>
c0014ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014bab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bae:	eb 31                	jmp    c0014be1 <opcodeFault(regs*, void*)+0x2ca>
c0014bb0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014bb4:	75 0b                	jne    c0014bc1 <opcodeFault(regs*, void*)+0x2aa>
c0014bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014bbc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bbf:	eb 20                	jmp    c0014be1 <opcodeFault(regs*, void*)+0x2ca>
c0014bc1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014bc5:	75 0b                	jne    c0014bd2 <opcodeFault(regs*, void*)+0x2bb>
c0014bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bca:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014bcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bd0:	eb 0f                	jmp    c0014be1 <opcodeFault(regs*, void*)+0x2ca>
c0014bd2:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014bd6:	75 09                	jne    c0014be1 <opcodeFault(regs*, void*)+0x2ca>
c0014bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014bde:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014be1:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014be5:	74 10                	je     c0014bf7 <opcodeFault(regs*, void*)+0x2e0>
c0014be7:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014bee:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014bf5:	eb 2d                	jmp    c0014c24 <opcodeFault(regs*, void*)+0x30d>
c0014bf7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014bfa:	c1 e0 18             	shl    eax,0x18
c0014bfd:	89 c2                	mov    edx,eax
c0014bff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c02:	c1 e0 08             	shl    eax,0x8
c0014c05:	25 00 00 ff 00       	and    eax,0xff0000
c0014c0a:	09 c2                	or     edx,eax
c0014c0c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c0f:	c1 e8 08             	shr    eax,0x8
c0014c12:	25 00 ff 00 00       	and    eax,0xff00
c0014c17:	09 c2                	or     edx,eax
c0014c19:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c1c:	c1 e8 18             	shr    eax,0x18
c0014c1f:	09 d0                	or     eax,edx
c0014c21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c24:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c28:	75 0b                	jne    c0014c35 <opcodeFault(regs*, void*)+0x31e>
c0014c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c2d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c30:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c33:	eb 75                	jmp    c0014caa <opcodeFault(regs*, void*)+0x393>
c0014c35:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c39:	75 0b                	jne    c0014c46 <opcodeFault(regs*, void*)+0x32f>
c0014c3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c41:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c44:	eb 64                	jmp    c0014caa <opcodeFault(regs*, void*)+0x393>
c0014c46:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c4a:	75 0b                	jne    c0014c57 <opcodeFault(regs*, void*)+0x340>
c0014c4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c52:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c55:	eb 53                	jmp    c0014caa <opcodeFault(regs*, void*)+0x393>
c0014c57:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c5b:	75 0b                	jne    c0014c68 <opcodeFault(regs*, void*)+0x351>
c0014c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c60:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c63:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014c66:	eb 42                	jmp    c0014caa <opcodeFault(regs*, void*)+0x393>
c0014c68:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c6c:	75 0b                	jne    c0014c79 <opcodeFault(regs*, void*)+0x362>
c0014c6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c71:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c74:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014c77:	eb 31                	jmp    c0014caa <opcodeFault(regs*, void*)+0x393>
c0014c79:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c7d:	75 0b                	jne    c0014c8a <opcodeFault(regs*, void*)+0x373>
c0014c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c85:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014c88:	eb 20                	jmp    c0014caa <opcodeFault(regs*, void*)+0x393>
c0014c8a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c8e:	75 0b                	jne    c0014c9b <opcodeFault(regs*, void*)+0x384>
c0014c90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c93:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c96:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014c99:	eb 0f                	jmp    c0014caa <opcodeFault(regs*, void*)+0x393>
c0014c9b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c9f:	75 09                	jne    c0014caa <opcodeFault(regs*, void*)+0x393>
c0014ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ca7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cb0:	8d 50 02             	lea    edx,[eax+0x2]
c0014cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cb9:	e9 6f 02 00 00       	jmp    c0014f2d <opcodeFault(regs*, void*)+0x616>
c0014cbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc1:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc3:	3c 0f                	cmp    al,0xf
c0014cc5:	0f 85 8d 01 00 00    	jne    c0014e58 <opcodeFault(regs*, void*)+0x541>
c0014ccb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cce:	40                   	inc    eax
c0014ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd1:	3c c7                	cmp    al,0xc7
c0014cd3:	0f 85 7f 01 00 00    	jne    c0014e58 <opcodeFault(regs*, void*)+0x541>
c0014cd9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce2:	8d 50 01             	lea    edx,[eax+0x1]
c0014ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ceb:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014cee:	50                   	push   eax
c0014cef:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014cf2:	50                   	push   eax
c0014cf3:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014cf6:	50                   	push   eax
c0014cf7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cfa:	e8 5f 46 00 00       	call   c001935e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cff:	83 c4 10             	add    esp,0x10
c0014d02:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d05:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d08:	83 f0 01             	xor    eax,0x1
c0014d0b:	84 c0                	test   al,al
c0014d0d:	0f 84 45 01 00 00    	je     c0014e58 <opcodeFault(regs*, void*)+0x541>
c0014d13:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d16:	3c 01                	cmp    al,0x1
c0014d18:	0f 85 3a 01 00 00    	jne    c0014e58 <opcodeFault(regs*, void*)+0x541>
c0014d1e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d21:	83 f0 01             	xor    eax,0x1
c0014d24:	84 c0                	test   al,al
c0014d26:	0f 84 2c 01 00 00    	je     c0014e58 <opcodeFault(regs*, void*)+0x541>
c0014d2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d32:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d35:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d3c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d3f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d42:	89 c2                	mov    edx,eax
c0014d44:	b8 00 00 00 00       	mov    eax,0x0
c0014d49:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d4c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d52:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d55:	ba 00 00 00 00       	mov    edx,0x0
c0014d5a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014d5d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014d60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d63:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d66:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d69:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014d70:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014d73:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014d76:	89 c2                	mov    edx,eax
c0014d78:	b8 00 00 00 00       	mov    eax,0x0
c0014d7d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d80:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d89:	ba 00 00 00 00       	mov    edx,0x0
c0014d8e:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014d91:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014d94:	fa                   	cli    
c0014d95:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0014d9a:	40                   	inc    eax
c0014d9b:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c0014da0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014da3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014da6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014da8:	89 c1                	mov    ecx,eax
c0014daa:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014dad:	89 cb                	mov    ebx,ecx
c0014daf:	89 d0                	mov    eax,edx
c0014db1:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014db4:	89 c6                	mov    esi,eax
c0014db6:	89 f0                	mov    eax,esi
c0014db8:	09 d8                	or     eax,ebx
c0014dba:	85 c0                	test   eax,eax
c0014dbc:	75 21                	jne    c0014ddf <opcodeFault(regs*, void*)+0x4c8>
c0014dbe:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014dc1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014dc4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dc7:	89 01                	mov    DWORD PTR [ecx],eax
c0014dc9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dd2:	83 c8 40             	or     eax,0x40
c0014dd5:	89 c2                	mov    edx,eax
c0014dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dda:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014ddd:	eb 3e                	jmp    c0014e1d <opcodeFault(regs*, void*)+0x506>
c0014ddf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014de2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014de5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014dea:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014ded:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014df6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014df9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014dfc:	89 d0                	mov    eax,edx
c0014dfe:	31 d2                	xor    edx,edx
c0014e00:	89 c3                	mov    ebx,eax
c0014e02:	89 d6                	mov    esi,edx
c0014e04:	89 da                	mov    edx,ebx
c0014e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e09:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e12:	83 e0 bf             	and    eax,0xffffffbf
c0014e15:	89 c2                	mov    edx,eax
c0014e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e1d:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0014e22:	48                   	dec    eax
c0014e23:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c0014e28:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0014e2d:	85 c0                	test   eax,eax
c0014e2f:	75 01                	jne    c0014e32 <opcodeFault(regs*, void*)+0x51b>
c0014e31:	fb                   	sti    
c0014e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e38:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e3b:	01 c2                	add    edx,eax
c0014e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e40:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e43:	83 ec 0c             	sub    esp,0xc
c0014e46:	68 c6 a9 02 c0       	push   0xc002a9c6
c0014e4b:	e8 bb d6 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014e50:	83 c4 10             	add    esp,0x10
c0014e53:	e9 d5 00 00 00       	jmp    c0014f2d <opcodeFault(regs*, void*)+0x616>
c0014e58:	83 ec 0c             	sub    esp,0xc
c0014e5b:	68 d9 a9 02 c0       	push   0xc002a9d9
c0014e60:	e8 a6 d6 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014e65:	83 c4 10             	add    esp,0x10
c0014e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e74:	c1 e0 04             	shl    eax,0x4
c0014e77:	01 d0                	add    eax,edx
c0014e79:	83 c0 03             	add    eax,0x3
c0014e7c:	8a 00                	mov    al,BYTE PTR [eax]
c0014e7e:	0f b6 d8             	movzx  ebx,al
c0014e81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e84:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e8d:	c1 e0 04             	shl    eax,0x4
c0014e90:	01 d0                	add    eax,edx
c0014e92:	83 c0 02             	add    eax,0x2
c0014e95:	8a 00                	mov    al,BYTE PTR [eax]
c0014e97:	0f b6 c8             	movzx  ecx,al
c0014e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ea6:	c1 e0 04             	shl    eax,0x4
c0014ea9:	01 d0                	add    eax,edx
c0014eab:	40                   	inc    eax
c0014eac:	8a 00                	mov    al,BYTE PTR [eax]
c0014eae:	0f b6 d0             	movzx  edx,al
c0014eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb4:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ebd:	c1 e0 04             	shl    eax,0x4
c0014ec0:	01 f0                	add    eax,esi
c0014ec2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec4:	0f b6 c0             	movzx  eax,al
c0014ec7:	83 ec 0c             	sub    esp,0xc
c0014eca:	53                   	push   ebx
c0014ecb:	51                   	push   ecx
c0014ecc:	52                   	push   edx
c0014ecd:	50                   	push   eax
c0014ece:	68 ec a9 02 c0       	push   0xc002a9ec
c0014ed3:	e8 33 d6 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014ed8:	83 c4 20             	add    esp,0x20
c0014edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ede:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ee1:	83 c0 03             	add    eax,0x3
c0014ee4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ee6:	0f b6 d8             	movzx  ebx,al
c0014ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eef:	83 c0 02             	add    eax,0x2
c0014ef2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef4:	0f b6 c8             	movzx  ecx,al
c0014ef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014efd:	40                   	inc    eax
c0014efe:	8a 00                	mov    al,BYTE PTR [eax]
c0014f00:	0f b6 d0             	movzx  edx,al
c0014f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f06:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f09:	8a 00                	mov    al,BYTE PTR [eax]
c0014f0b:	0f b6 c0             	movzx  eax,al
c0014f0e:	83 ec 0c             	sub    esp,0xc
c0014f11:	53                   	push   ebx
c0014f12:	51                   	push   ecx
c0014f13:	52                   	push   edx
c0014f14:	50                   	push   eax
c0014f15:	68 14 aa 02 c0       	push   0xc002aa14
c0014f1a:	e8 ec d5 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014f1f:	83 c4 20             	add    esp,0x20
c0014f22:	83 ec 0c             	sub    esp,0xc
c0014f25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f28:	e8 79 f4 ff ff       	call   c00143a6 <displayDebugInfo(regs*)>
c0014f2d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f30:	5b                   	pop    ebx
c0014f31:	5e                   	pop    esi
c0014f32:	5d                   	pop    ebp
c0014f33:	c3                   	ret    

c0014f34 <displayProgramFault(char const*)>:
c0014f34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f3c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f42:	85 c0                	test   eax,eax
c0014f44:	74 15                	je     c0014f5b <displayProgramFault(char const*)+0x27>
c0014f46:	83 ec 0c             	sub    esp,0xc
c0014f49:	6a 04                	push   0x4
c0014f4b:	6a 0f                	push   0xf
c0014f4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f51:	50                   	push   eax
c0014f52:	e8 89 b5 ff ff       	call   c00104e0 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f57:	83 c4 1c             	add    esp,0x1c
c0014f5a:	c3                   	ret    
c0014f5b:	c3                   	ret    

c0014f5c <setupInterruptController()>:
c0014f5c:	55                   	push   ebp
c0014f5d:	89 e5                	mov    ebp,esp
c0014f5f:	53                   	push   ebx
c0014f60:	83 ec 24             	sub    esp,0x24
c0014f63:	b8 00 00 00 00       	mov    eax,0x0
c0014f68:	85 c0                	test   eax,eax
c0014f6a:	0f 95 c0             	setne  al
c0014f6d:	84 c0                	test   al,al
c0014f6f:	74 5b                	je     c0014fcc <setupInterruptController()+0x70>
c0014f71:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f78:	83 ec 0c             	sub    esp,0xc
c0014f7b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f7e:	e8 19 a6 ff ff       	call   c000f59c <malloc>
c0014f83:	83 c4 10             	add    esp,0x10
c0014f86:	89 c3                	mov    ebx,eax
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	53                   	push   ebx
c0014f8c:	e8 fb 04 01 00       	call   c002548c <APIC::APIC()>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f97:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f9f:	83 c0 08             	add    eax,0x8
c0014fa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fa4:	6a 00                	push   0x0
c0014fa6:	6a 00                	push   0x0
c0014fa8:	6a 00                	push   0x0
c0014faa:	52                   	push   edx
c0014fab:	ff d0                	call   eax
c0014fad:	83 c4 10             	add    esp,0x10
c0014fb0:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0014fb5:	83 ec 08             	sub    esp,0x8
c0014fb8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fbb:	50                   	push   eax
c0014fbc:	e8 83 e9 ff ff       	call   c0013944 <Device::addChild(Device*)>
c0014fc1:	83 c4 10             	add    esp,0x10
c0014fc4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fc7:	e9 79 03 00 00       	jmp    c0015345 <setupInterruptController()+0x3e9>
c0014fcc:	a0 00 ff 02 c0       	mov    al,ds:0xc002ff00
c0014fd1:	84 c0                	test   al,al
c0014fd3:	75 14                	jne    c0014fe9 <setupInterruptController()+0x8d>
c0014fd5:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0014fda:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0014fe0:	83 e2 fe             	and    edx,0xfffffffe
c0014fe3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0014fe9:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0014fee:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014ff4:	83 e0 01             	and    eax,0x1
c0014ff7:	84 c0                	test   al,al
c0014ff9:	0f 95 c0             	setne  al
c0014ffc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014fff:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015006:	83 ec 0c             	sub    esp,0xc
c0015009:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001500c:	e8 8b a5 ff ff       	call   c000f59c <malloc>
c0015011:	83 c4 10             	add    esp,0x10
c0015014:	89 c3                	mov    ebx,eax
c0015016:	83 ec 0c             	sub    esp,0xc
c0015019:	53                   	push   ebx
c001501a:	e8 c5 09 01 00       	call   c00259e4 <PIC::PIC()>
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015025:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015028:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001502b:	8b 00                	mov    eax,DWORD PTR [eax]
c001502d:	83 c0 08             	add    eax,0x8
c0015030:	8b 00                	mov    eax,DWORD PTR [eax]
c0015032:	6a 00                	push   0x0
c0015034:	6a 00                	push   0x0
c0015036:	6a 00                	push   0x0
c0015038:	52                   	push   edx
c0015039:	ff d0                	call   eax
c001503b:	83 c4 10             	add    esp,0x10
c001503e:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015042:	74 73                	je     c00150b7 <setupInterruptController()+0x15b>
c0015044:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015047:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001504a:	8b 00                	mov    eax,DWORD PTR [eax]
c001504c:	83 c0 0c             	add    eax,0xc
c001504f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015051:	6a 00                	push   0x0
c0015053:	6a 00                	push   0x0
c0015055:	6a 00                	push   0x0
c0015057:	52                   	push   edx
c0015058:	ff d0                	call   eax
c001505a:	83 c4 10             	add    esp,0x10
c001505d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015061:	74 15                	je     c0015078 <setupInterruptController()+0x11c>
c0015063:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015066:	8b 00                	mov    eax,DWORD PTR [eax]
c0015068:	83 c0 04             	add    eax,0x4
c001506b:	8b 00                	mov    eax,DWORD PTR [eax]
c001506d:	83 ec 0c             	sub    esp,0xc
c0015070:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015073:	ff d0                	call   eax
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001507f:	83 ec 0c             	sub    esp,0xc
c0015082:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015085:	e8 12 a5 ff ff       	call   c000f59c <malloc>
c001508a:	83 c4 10             	add    esp,0x10
c001508d:	89 c3                	mov    ebx,eax
c001508f:	83 ec 0c             	sub    esp,0xc
c0015092:	53                   	push   ebx
c0015093:	e8 f4 03 01 00       	call   c002548c <APIC::APIC()>
c0015098:	83 c4 10             	add    esp,0x10
c001509b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001509e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a6:	83 c0 08             	add    eax,0x8
c00150a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ab:	6a 00                	push   0x0
c00150ad:	6a 00                	push   0x0
c00150af:	6a 00                	push   0x0
c00150b1:	52                   	push   edx
c00150b2:	ff d0                	call   eax
c00150b4:	83 c4 10             	add    esp,0x10
c00150b7:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00150bc:	83 ec 08             	sub    esp,0x8
c00150bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150c2:	50                   	push   eax
c00150c3:	e8 7c e8 ff ff       	call   c0013944 <Device::addChild(Device*)>
c00150c8:	83 c4 10             	add    esp,0x10
c00150cb:	c7 05 08 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d708,0x0
c00150d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150da:	83 c0 24             	add    eax,0x24
c00150dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150df:	6a 00                	push   0x0
c00150e1:	68 f8 48 01 c0       	push   0xc00148f8
c00150e6:	6a 00                	push   0x0
c00150e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150eb:	ff d0                	call   eax
c00150ed:	83 c4 10             	add    esp,0x10
c00150f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f5:	83 c0 24             	add    eax,0x24
c00150f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fa:	6a 00                	push   0x0
c00150fc:	68 f8 48 01 c0       	push   0xc00148f8
c0015101:	6a 01                	push   0x1
c0015103:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015106:	ff d0                	call   eax
c0015108:	83 c4 10             	add    esp,0x10
c001510b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001510e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015110:	83 c0 24             	add    eax,0x24
c0015113:	8b 00                	mov    eax,DWORD PTR [eax]
c0015115:	6a 00                	push   0x0
c0015117:	68 03 42 01 c0       	push   0xc0014203
c001511c:	6a 02                	push   0x2
c001511e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015121:	ff d0                	call   eax
c0015123:	83 c4 10             	add    esp,0x10
c0015126:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015129:	8b 00                	mov    eax,DWORD PTR [eax]
c001512b:	83 c0 24             	add    eax,0x24
c001512e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015130:	6a 00                	push   0x0
c0015132:	68 f8 48 01 c0       	push   0xc00148f8
c0015137:	6a 03                	push   0x3
c0015139:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001513c:	ff d0                	call   eax
c001513e:	83 c4 10             	add    esp,0x10
c0015141:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015144:	8b 00                	mov    eax,DWORD PTR [eax]
c0015146:	83 c0 24             	add    eax,0x24
c0015149:	8b 00                	mov    eax,DWORD PTR [eax]
c001514b:	6a 00                	push   0x0
c001514d:	68 f8 48 01 c0       	push   0xc00148f8
c0015152:	6a 04                	push   0x4
c0015154:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015157:	ff d0                	call   eax
c0015159:	83 c4 10             	add    esp,0x10
c001515c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001515f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015161:	83 c0 24             	add    eax,0x24
c0015164:	8b 00                	mov    eax,DWORD PTR [eax]
c0015166:	6a 00                	push   0x0
c0015168:	68 f8 48 01 c0       	push   0xc00148f8
c001516d:	6a 05                	push   0x5
c001516f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015172:	ff d0                	call   eax
c0015174:	83 c4 10             	add    esp,0x10
c0015177:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001517a:	8b 00                	mov    eax,DWORD PTR [eax]
c001517c:	83 c0 24             	add    eax,0x24
c001517f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015181:	6a 00                	push   0x0
c0015183:	68 17 49 01 c0       	push   0xc0014917
c0015188:	6a 06                	push   0x6
c001518a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001518d:	ff d0                	call   eax
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015195:	8b 00                	mov    eax,DWORD PTR [eax]
c0015197:	83 c0 24             	add    eax,0x24
c001519a:	8b 00                	mov    eax,DWORD PTR [eax]
c001519c:	6a 00                	push   0x0
c001519e:	68 35 48 01 c0       	push   0xc0014835
c00151a3:	6a 07                	push   0x7
c00151a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151a8:	ff d0                	call   eax
c00151aa:	83 c4 10             	add    esp,0x10
c00151ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b2:	83 c0 24             	add    eax,0x24
c00151b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b7:	6a 00                	push   0x0
c00151b9:	68 1e 40 01 c0       	push   0xc001401e
c00151be:	6a 08                	push   0x8
c00151c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c3:	ff d0                	call   eax
c00151c5:	83 c4 10             	add    esp,0x10
c00151c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cd:	83 c0 24             	add    eax,0x24
c00151d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d2:	6a 00                	push   0x0
c00151d4:	68 f8 48 01 c0       	push   0xc00148f8
c00151d9:	6a 09                	push   0x9
c00151db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151de:	ff d0                	call   eax
c00151e0:	83 c4 10             	add    esp,0x10
c00151e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e8:	83 c0 24             	add    eax,0x24
c00151eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ed:	6a 00                	push   0x0
c00151ef:	68 f8 48 01 c0       	push   0xc00148f8
c00151f4:	6a 0a                	push   0xa
c00151f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f9:	ff d0                	call   eax
c00151fb:	83 c4 10             	add    esp,0x10
c00151fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015201:	8b 00                	mov    eax,DWORD PTR [eax]
c0015203:	83 c0 24             	add    eax,0x24
c0015206:	8b 00                	mov    eax,DWORD PTR [eax]
c0015208:	6a 00                	push   0x0
c001520a:	68 f8 48 01 c0       	push   0xc00148f8
c001520f:	6a 0b                	push   0xb
c0015211:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015214:	ff d0                	call   eax
c0015216:	83 c4 10             	add    esp,0x10
c0015219:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521c:	8b 00                	mov    eax,DWORD PTR [eax]
c001521e:	83 c0 24             	add    eax,0x24
c0015221:	8b 00                	mov    eax,DWORD PTR [eax]
c0015223:	6a 00                	push   0x0
c0015225:	68 f8 48 01 c0       	push   0xc00148f8
c001522a:	6a 0c                	push   0xc
c001522c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522f:	ff d0                	call   eax
c0015231:	83 c4 10             	add    esp,0x10
c0015234:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015237:	8b 00                	mov    eax,DWORD PTR [eax]
c0015239:	83 c0 24             	add    eax,0x24
c001523c:	8b 00                	mov    eax,DWORD PTR [eax]
c001523e:	6a 00                	push   0x0
c0015240:	68 a8 48 01 c0       	push   0xc00148a8
c0015245:	6a 0d                	push   0xd
c0015247:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001524a:	ff d0                	call   eax
c001524c:	83 c4 10             	add    esp,0x10
c001524f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015252:	8b 00                	mov    eax,DWORD PTR [eax]
c0015254:	83 c0 24             	add    eax,0x24
c0015257:	8b 00                	mov    eax,DWORD PTR [eax]
c0015259:	6a 00                	push   0x0
c001525b:	68 e1 48 01 c0       	push   0xc00148e1
c0015260:	6a 0e                	push   0xe
c0015262:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015265:	ff d0                	call   eax
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526d:	8b 00                	mov    eax,DWORD PTR [eax]
c001526f:	83 c0 24             	add    eax,0x24
c0015272:	8b 00                	mov    eax,DWORD PTR [eax]
c0015274:	6a 00                	push   0x0
c0015276:	68 f8 48 01 c0       	push   0xc00148f8
c001527b:	6a 0f                	push   0xf
c001527d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015280:	ff d0                	call   eax
c0015282:	83 c4 10             	add    esp,0x10
c0015285:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015288:	8b 00                	mov    eax,DWORD PTR [eax]
c001528a:	83 c0 24             	add    eax,0x24
c001528d:	8b 00                	mov    eax,DWORD PTR [eax]
c001528f:	6a 00                	push   0x0
c0015291:	68 f8 48 01 c0       	push   0xc00148f8
c0015296:	6a 10                	push   0x10
c0015298:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001529b:	ff d0                	call   eax
c001529d:	83 c4 10             	add    esp,0x10
c00152a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a5:	83 c0 24             	add    eax,0x24
c00152a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152aa:	6a 00                	push   0x0
c00152ac:	68 f8 48 01 c0       	push   0xc00148f8
c00152b1:	6a 11                	push   0x11
c00152b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b6:	ff d0                	call   eax
c00152b8:	83 c4 10             	add    esp,0x10
c00152bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152be:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c0:	83 c0 24             	add    eax,0x24
c00152c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c5:	6a 00                	push   0x0
c00152c7:	68 f8 48 01 c0       	push   0xc00148f8
c00152cc:	6a 12                	push   0x12
c00152ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d1:	ff d0                	call   eax
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152db:	83 c0 24             	add    eax,0x24
c00152de:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e0:	6a 00                	push   0x0
c00152e2:	68 f8 48 01 c0       	push   0xc00148f8
c00152e7:	6a 13                	push   0x13
c00152e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ec:	ff d0                	call   eax
c00152ee:	83 c4 10             	add    esp,0x10
c00152f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f6:	83 c0 24             	add    eax,0x24
c00152f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fb:	6a 00                	push   0x0
c00152fd:	68 f8 48 01 c0       	push   0xc00148f8
c0015302:	6a 14                	push   0x14
c0015304:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015307:	ff d0                	call   eax
c0015309:	83 c4 10             	add    esp,0x10
c001530c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015311:	83 c0 24             	add    eax,0x24
c0015314:	8b 00                	mov    eax,DWORD PTR [eax]
c0015316:	6a 00                	push   0x0
c0015318:	68 f8 48 01 c0       	push   0xc00148f8
c001531d:	6a 1e                	push   0x1e
c001531f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015322:	ff d0                	call   eax
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532a:	8b 00                	mov    eax,DWORD PTR [eax]
c001532c:	83 c0 24             	add    eax,0x24
c001532f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015331:	6a 00                	push   0x0
c0015333:	68 34 be 01 c0       	push   0xc001be34
c0015338:	6a 60                	push   0x60
c001533a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533d:	ff d0                	call   eax
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015345:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015348:	c9                   	leave  
c0015349:	c3                   	ret    

c001534a <InterruptController::convertLegacyIRQNumber(int)>:
c001534a:	55                   	push   ebp
c001534b:	89 e5                	mov    ebp,esp
c001534d:	83 ec 08             	sub    esp,0x8
c0015350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015353:	83 ec 0c             	sub    esp,0xc
c0015356:	50                   	push   eax
c0015357:	e8 e8 e8 ff ff       	call   c0013c44 <Device::getName()>
c001535c:	83 c4 10             	add    esp,0x10
c001535f:	8a 00                	mov    al,BYTE PTR [eax]
c0015361:	3c 41                	cmp    al,0x41
c0015363:	0f 94 c0             	sete   al
c0015366:	84 c0                	test   al,al
c0015368:	74 28                	je     c0015392 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001536a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001536e:	7f 12                	jg     c0015382 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015370:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015373:	05 e0 c7 02 c0       	add    eax,0xc002c7e0
c0015378:	8a 00                	mov    al,BYTE PTR [eax]
c001537a:	0f b6 c0             	movzx  eax,al
c001537d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015380:	eb 10                	jmp    c0015392 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015382:	83 ec 0c             	sub    esp,0xc
c0015385:	68 3c aa 02 c0       	push   0xc002aa3c
c001538a:	e8 b6 48 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015395:	c9                   	leave  
c0015396:	c3                   	ret    
c0015397:	90                   	nop

c0015398 <startGUI(void*)>:
c0015398:	55                   	push   ebp
c0015399:	89 e5                	mov    ebp,esp
c001539b:	53                   	push   ebx
c001539c:	83 ec 04             	sub    esp,0x4
c001539f:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c00153a4:	48                   	dec    eax
c00153a5:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c00153aa:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c00153af:	85 c0                	test   eax,eax
c00153b1:	75 01                	jne    c00153b4 <startGUI(void*)+0x1c>
c00153b3:	fb                   	sti    
c00153b4:	8b 1d 88 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d588
c00153ba:	83 ec 08             	sub    esp,0x8
c00153bd:	6a 01                	push   0x1
c00153bf:	68 bc aa 02 c0       	push   0xc002aabc
c00153c4:	e8 46 7a 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c00153c9:	83 c4 10             	add    esp,0x10
c00153cc:	83 ec 08             	sub    esp,0x8
c00153cf:	53                   	push   ebx
c00153d0:	50                   	push   eax
c00153d1:	e8 64 7c 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	8b 1d 88 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d588
c00153df:	83 ec 08             	sub    esp,0x8
c00153e2:	6a 01                	push   0x1
c00153e4:	68 d6 aa 02 c0       	push   0xc002aad6
c00153e9:	e8 21 7a 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c00153ee:	83 c4 10             	add    esp,0x10
c00153f1:	83 ec 08             	sub    esp,0x8
c00153f4:	53                   	push   ebx
c00153f5:	50                   	push   eax
c00153f6:	e8 3f 7c 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c00153fb:	83 c4 10             	add    esp,0x10
c00153fe:	90                   	nop
c00153ff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015402:	c9                   	leave  
c0015403:	c3                   	ret    

c0015404 <startGUIVESA(void*)>:
c0015404:	55                   	push   ebp
c0015405:	89 e5                	mov    ebp,esp
c0015407:	53                   	push   ebx
c0015408:	83 ec 04             	sub    esp,0x4
c001540b:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0015410:	48                   	dec    eax
c0015411:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c0015416:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001541b:	85 c0                	test   eax,eax
c001541d:	75 01                	jne    c0015420 <startGUIVESA(void*)+0x1c>
c001541f:	fb                   	sti    
c0015420:	8b 1d 88 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d588
c0015426:	83 ec 08             	sub    esp,0x8
c0015429:	6a 01                	push   0x1
c001542b:	68 f0 aa 02 c0       	push   0xc002aaf0
c0015430:	e8 da 79 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c0015435:	83 c4 10             	add    esp,0x10
c0015438:	83 ec 08             	sub    esp,0x8
c001543b:	53                   	push   ebx
c001543c:	50                   	push   eax
c001543d:	e8 f8 7b 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c0015442:	83 c4 10             	add    esp,0x10
c0015445:	8b 1d 88 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d588
c001544b:	83 ec 08             	sub    esp,0x8
c001544e:	6a 01                	push   0x1
c0015450:	68 d6 aa 02 c0       	push   0xc002aad6
c0015455:	e8 b5 79 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c001545a:	83 c4 10             	add    esp,0x10
c001545d:	83 ec 08             	sub    esp,0x8
c0015460:	53                   	push   ebx
c0015461:	50                   	push   eax
c0015462:	e8 d3 7b 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c0015467:	83 c4 10             	add    esp,0x10
c001546a:	90                   	nop
c001546b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001546e:	c9                   	leave  
c001546f:	c3                   	ret    

c0015470 <sendKeyToTerminal(unsigned char)>:
c0015470:	55                   	push   ebp
c0015471:	89 e5                	mov    ebp,esp
c0015473:	83 ec 28             	sub    esp,0x28
c0015476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015479:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001547c:	a1 44 d6 02 c0       	mov    eax,ds:0xc002d644
c0015481:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015485:	83 ec 08             	sub    esp,0x8
c0015488:	52                   	push   edx
c0015489:	50                   	push   eax
c001548a:	e8 f7 b4 ff ff       	call   c0010986 <VgaText::receiveKey(unsigned char)>
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015496:	0f 85 8f 00 00 00    	jne    c001552b <sendKeyToTerminal(unsigned char)+0xbb>
c001549c:	fa                   	cli    
c001549d:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c00154a2:	40                   	inc    eax
c00154a3:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c00154a8:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c00154ad:	40                   	inc    eax
c00154ae:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c00154b3:	a1 20 d7 02 c0       	mov    eax,ds:0xc002d720
c00154b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00154bb:	c7 05 20 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d720,0x0
c00154c5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00154c9:	74 1f                	je     c00154ea <sendKeyToTerminal(unsigned char)+0x7a>
c00154cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00154d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00154da:	83 ec 0c             	sub    esp,0xc
c00154dd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00154e0:	e8 6d 87 00 00       	call   c001dc52 <unblockTask(ThreadControlBlock*)>
c00154e5:	83 c4 10             	add    esp,0x10
c00154e8:	eb db                	jmp    c00154c5 <sendKeyToTerminal(unsigned char)+0x55>
c00154ea:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c00154ef:	48                   	dec    eax
c00154f0:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c00154f5:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c00154fa:	85 c0                	test   eax,eax
c00154fc:	75 18                	jne    c0015516 <sendKeyToTerminal(unsigned char)+0xa6>
c00154fe:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c0015503:	85 c0                	test   eax,eax
c0015505:	74 0f                	je     c0015516 <sendKeyToTerminal(unsigned char)+0xa6>
c0015507:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c0015511:	e8 b9 82 00 00       	call   c001d7cf <schedule()>
c0015516:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001551b:	48                   	dec    eax
c001551c:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c0015521:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0015526:	85 c0                	test   eax,eax
c0015528:	75 01                	jne    c001552b <sendKeyToTerminal(unsigned char)+0xbb>
c001552a:	fb                   	sti    
c001552b:	90                   	nop
c001552c:	c9                   	leave  
c001552d:	c3                   	ret    

c001552e <sendKeyboardToken(KeyboardToken)>:
c001552e:	55                   	push   ebp
c001552f:	89 e5                	mov    ebp,esp
c0015531:	83 ec 18             	sub    esp,0x18
c0015534:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553a:	0f b7 c0             	movzx  eax,ax
c001553d:	83 f2 01             	xor    edx,0x1
c0015540:	88 90 40 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd28c0],dl
c0015546:	a1 28 d7 02 c0       	mov    eax,ds:0xc002d728
c001554b:	85 c0                	test   eax,eax
c001554d:	74 24                	je     c0015573 <sendKeyboardToken(KeyboardToken)+0x45>
c001554f:	8b 0d 28 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d728
c0015555:	83 ec 04             	sub    esp,0x4
c0015558:	68 40 d7 02 c0       	push   0xc002d740
c001555d:	83 ec 08             	sub    esp,0x8
c0015560:	89 e2                	mov    edx,esp
c0015562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015565:	89 02                	mov    DWORD PTR [edx],eax
c0015567:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001556a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001556e:	ff d1                	call   ecx
c0015570:	83 c4 10             	add    esp,0x10
c0015573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015576:	66 3d 03 02          	cmp    ax,0x203
c001557a:	75 07                	jne    c0015583 <sendKeyboardToken(KeyboardToken)+0x55>
c001557c:	a0 40 d8 02 c0       	mov    al,ds:0xc002d840
c0015581:	84 c0                	test   al,al
c0015583:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015587:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001558a:	a0 48 db 02 c0       	mov    al,ds:0xc002db48
c001558f:	38 c2                	cmp    dl,al
c0015591:	74 1c                	je     c00155af <sendKeyboardToken(KeyboardToken)+0x81>
c0015593:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015596:	a2 48 db 02 c0       	mov    ds:0xc002db48,al
c001559b:	a0 48 db 02 c0       	mov    al,ds:0xc002db48
c00155a0:	0f b6 c0             	movzx  eax,al
c00155a3:	83 ec 0c             	sub    esp,0xc
c00155a6:	50                   	push   eax
c00155a7:	e8 1c aa ff ff       	call   c000ffc8 <setTerminalScrollLock(bool)>
c00155ac:	83 c4 10             	add    esp,0x10
c00155af:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00155b2:	84 c0                	test   al,al
c00155b4:	0f 84 ae 00 00 00    	je     c0015668 <sendKeyboardToken(KeyboardToken)+0x13a>
c00155ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bd:	66 3d 10 03          	cmp    ax,0x310
c00155c1:	75 06                	jne    c00155c9 <sendKeyboardToken(KeyboardToken)+0x9b>
c00155c3:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00155c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cc:	66 3d 11 03          	cmp    ax,0x311
c00155d0:	75 06                	jne    c00155d8 <sendKeyboardToken(KeyboardToken)+0xaa>
c00155d2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00155d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155db:	66 3d 12 03          	cmp    ax,0x312
c00155df:	75 06                	jne    c00155e7 <sendKeyboardToken(KeyboardToken)+0xb9>
c00155e1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00155e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ea:	66 3d 13 03          	cmp    ax,0x313
c00155ee:	75 06                	jne    c00155f6 <sendKeyboardToken(KeyboardToken)+0xc8>
c00155f0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00155f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f9:	66 3d 14 03          	cmp    ax,0x314
c00155fd:	75 06                	jne    c0015605 <sendKeyboardToken(KeyboardToken)+0xd7>
c00155ff:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015608:	66 3d 15 03          	cmp    ax,0x315
c001560c:	75 06                	jne    c0015614 <sendKeyboardToken(KeyboardToken)+0xe6>
c001560e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015617:	66 3d 16 03          	cmp    ax,0x316
c001561b:	75 06                	jne    c0015623 <sendKeyboardToken(KeyboardToken)+0xf5>
c001561d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015626:	66 3d 17 03          	cmp    ax,0x317
c001562a:	75 06                	jne    c0015632 <sendKeyboardToken(KeyboardToken)+0x104>
c001562c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015635:	66 3d 18 03          	cmp    ax,0x318
c0015639:	75 06                	jne    c0015641 <sendKeyboardToken(KeyboardToken)+0x113>
c001563b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015644:	66 3d 19 03          	cmp    ax,0x319
c0015648:	75 06                	jne    c0015650 <sendKeyboardToken(KeyboardToken)+0x122>
c001564a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	66 3d 1a 03          	cmp    ax,0x31a
c0015657:	0f 85 c9 00 00 00    	jne    c0015726 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001565d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015663:	e9 be 00 00 00       	jmp    c0015726 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566b:	66 3d 10 03          	cmp    ax,0x310
c001566f:	75 0a                	jne    c001567b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015671:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015677:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001567b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567e:	66 3d 11 03          	cmp    ax,0x311
c0015682:	75 0a                	jne    c001568e <sendKeyboardToken(KeyboardToken)+0x160>
c0015684:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001568a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001568e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015691:	66 3d 12 03          	cmp    ax,0x312
c0015695:	75 0a                	jne    c00156a1 <sendKeyboardToken(KeyboardToken)+0x173>
c0015697:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001569d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a4:	66 3d 13 03          	cmp    ax,0x313
c00156a8:	75 0a                	jne    c00156b4 <sendKeyboardToken(KeyboardToken)+0x186>
c00156aa:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00156b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b7:	66 3d 14 03          	cmp    ax,0x314
c00156bb:	75 0a                	jne    c00156c7 <sendKeyboardToken(KeyboardToken)+0x199>
c00156bd:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00156c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ca:	66 3d 15 03          	cmp    ax,0x315
c00156ce:	75 0a                	jne    c00156da <sendKeyboardToken(KeyboardToken)+0x1ac>
c00156d0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156dd:	66 3d 16 03          	cmp    ax,0x316
c00156e1:	75 0a                	jne    c00156ed <sendKeyboardToken(KeyboardToken)+0x1bf>
c00156e3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00156e9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f0:	66 3d 17 03          	cmp    ax,0x317
c00156f4:	75 0a                	jne    c0015700 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00156f6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00156fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015703:	66 3d 18 03          	cmp    ax,0x318
c0015707:	75 0a                	jne    c0015713 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015709:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001570f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	66 3d 19 03          	cmp    ax,0x319
c001571a:	75 0a                	jne    c0015726 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001571c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015722:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015729:	66 3d 00 02          	cmp    ax,0x200
c001572d:	75 2c                	jne    c001575b <sendKeyboardToken(KeyboardToken)+0x22d>
c001572f:	a0 40 db 02 c0       	mov    al,ds:0xc002db40
c0015734:	83 f0 01             	xor    eax,0x1
c0015737:	84 c0                	test   al,al
c0015739:	74 20                	je     c001575b <sendKeyboardToken(KeyboardToken)+0x22d>
c001573b:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0015740:	6a 01                	push   0x1
c0015742:	6a 00                	push   0x0
c0015744:	68 98 53 01 c0       	push   0xc0015398
c0015749:	50                   	push   eax
c001574a:	e8 5b 7e 00 00       	call   c001d5aa <Process::createThread(void (*)(void*), void*, int)>
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	c6 05 40 db 02 c0 01 	mov    BYTE PTR ds:0xc002db40,0x1
c0015759:	eb 33                	jmp    c001578e <sendKeyboardToken(KeyboardToken)+0x260>
c001575b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575e:	66 3d 01 02          	cmp    ax,0x201
c0015762:	75 2a                	jne    c001578e <sendKeyboardToken(KeyboardToken)+0x260>
c0015764:	a0 40 db 02 c0       	mov    al,ds:0xc002db40
c0015769:	83 f0 01             	xor    eax,0x1
c001576c:	84 c0                	test   al,al
c001576e:	74 1e                	je     c001578e <sendKeyboardToken(KeyboardToken)+0x260>
c0015770:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0015775:	6a 01                	push   0x1
c0015777:	6a 00                	push   0x0
c0015779:	68 04 54 01 c0       	push   0xc0015404
c001577e:	50                   	push   eax
c001577f:	e8 26 7e 00 00       	call   c001d5aa <Process::createThread(void (*)(void*), void*, int)>
c0015784:	83 c4 10             	add    esp,0x10
c0015787:	c6 05 40 db 02 c0 01 	mov    BYTE PTR ds:0xc002db40,0x1
c001578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015791:	66 3d 1d 03          	cmp    ax,0x31d
c0015795:	75 06                	jne    c001579d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015797:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001579d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a0:	66 3d 1c 03          	cmp    ax,0x31c
c00157a4:	75 06                	jne    c00157ac <sendKeyboardToken(KeyboardToken)+0x27e>
c00157a6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157af:	66 3d 1b 03          	cmp    ax,0x31b
c00157b3:	75 06                	jne    c00157bb <sendKeyboardToken(KeyboardToken)+0x28d>
c00157b5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00157bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157be:	66 3d 1e 03          	cmp    ax,0x31e
c00157c2:	75 06                	jne    c00157ca <sendKeyboardToken(KeyboardToken)+0x29c>
c00157c4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00157ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cd:	66 3d 1f 03          	cmp    ax,0x31f
c00157d1:	75 06                	jne    c00157d9 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00157d3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00157d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dc:	66 3d 1a 03          	cmp    ax,0x31a
c00157e0:	75 06                	jne    c00157e8 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00157e2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00157e8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00157ec:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157ef:	83 f0 01             	xor    eax,0x1
c00157f2:	84 c0                	test   al,al
c00157f4:	74 77                	je     c001586d <sendKeyboardToken(KeyboardToken)+0x33f>
c00157f6:	a0 41 d8 02 c0       	mov    al,ds:0xc002d841
c00157fb:	84 c0                	test   al,al
c00157fd:	74 41                	je     c0015840 <sendKeyboardToken(KeyboardToken)+0x312>
c00157ff:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015803:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015807:	74 2b                	je     c0015834 <sendKeyboardToken(KeyboardToken)+0x306>
c0015809:	8b 15 44 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db44
c001580f:	89 d0                	mov    eax,edx
c0015811:	c1 e0 02             	shl    eax,0x2
c0015814:	01 d0                	add    eax,edx
c0015816:	01 c0                	add    eax,eax
c0015818:	a3 44 db 02 c0       	mov    ds:0xc002db44,eax
c001581d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015820:	0f b7 c0             	movzx  eax,ax
c0015823:	8d 50 d0             	lea    edx,[eax-0x30]
c0015826:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c001582b:	01 d0                	add    eax,edx
c001582d:	a3 44 db 02 c0       	mov    ds:0xc002db44,eax
c0015832:	eb 6d                	jmp    c00158a1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015834:	c7 05 44 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db44,0x0
c001583e:	eb 61                	jmp    c00158a1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015840:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c0015845:	85 c0                	test   eax,eax
c0015847:	74 18                	je     c0015861 <sendKeyboardToken(KeyboardToken)+0x333>
c0015849:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c001584e:	0f b6 c0             	movzx  eax,al
c0015851:	83 ec 0c             	sub    esp,0xc
c0015854:	50                   	push   eax
c0015855:	e8 16 fc ff ff       	call   c0015470 <sendKeyToTerminal(unsigned char)>
c001585a:	83 c4 10             	add    esp,0x10
c001585d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015861:	c7 05 44 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db44,0x0
c001586b:	eb 34                	jmp    c00158a1 <sendKeyboardToken(KeyboardToken)+0x373>
c001586d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015870:	66 3d 01 01          	cmp    ax,0x101
c0015874:	75 2b                	jne    c00158a1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015876:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c001587b:	85 c0                	test   eax,eax
c001587d:	74 18                	je     c0015897 <sendKeyboardToken(KeyboardToken)+0x369>
c001587f:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c0015884:	0f b6 c0             	movzx  eax,al
c0015887:	83 ec 0c             	sub    esp,0xc
c001588a:	50                   	push   eax
c001588b:	e8 e0 fb ff ff       	call   c0015470 <sendKeyToTerminal(unsigned char)>
c0015890:	83 c4 10             	add    esp,0x10
c0015893:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015897:	c7 05 44 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db44,0x0
c00158a1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158a4:	83 f0 01             	xor    eax,0x1
c00158a7:	84 c0                	test   al,al
c00158a9:	74 4c                	je     c00158f7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158ab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158ae:	83 f0 01             	xor    eax,0x1
c00158b1:	84 c0                	test   al,al
c00158b3:	74 42                	je     c00158f7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158b5:	a0 40 d8 02 c0       	mov    al,ds:0xc002d840
c00158ba:	83 f0 01             	xor    eax,0x1
c00158bd:	84 c0                	test   al,al
c00158bf:	74 36                	je     c00158f7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c4:	66 83 f8 1f          	cmp    ax,0x1f
c00158c8:	76 09                	jbe    c00158d3 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00158ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cd:	66 83 f8 7e          	cmp    ax,0x7e
c00158d1:	76 12                	jbe    c00158e5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00158d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d6:	66 83 f8 0a          	cmp    ax,0xa
c00158da:	74 09                	je     c00158e5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00158dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158df:	66 83 f8 08          	cmp    ax,0x8
c00158e3:	75 12                	jne    c00158f7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e8:	0f b6 c0             	movzx  eax,al
c00158eb:	83 ec 0c             	sub    esp,0xc
c00158ee:	50                   	push   eax
c00158ef:	e8 7c fb ff ff       	call   c0015470 <sendKeyToTerminal(unsigned char)>
c00158f4:	83 c4 10             	add    esp,0x10
c00158f7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158fa:	83 f0 01             	xor    eax,0x1
c00158fd:	84 c0                	test   al,al
c00158ff:	74 4f                	je     c0015950 <sendKeyboardToken(KeyboardToken)+0x422>
c0015901:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015904:	83 f0 01             	xor    eax,0x1
c0015907:	84 c0                	test   al,al
c0015909:	74 45                	je     c0015950 <sendKeyboardToken(KeyboardToken)+0x422>
c001590b:	a0 40 d8 02 c0       	mov    al,ds:0xc002d840
c0015910:	84 c0                	test   al,al
c0015912:	74 3c                	je     c0015950 <sendKeyboardToken(KeyboardToken)+0x422>
c0015914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015917:	66 83 f8 3f          	cmp    ax,0x3f
c001591b:	76 33                	jbe    c0015950 <sendKeyboardToken(KeyboardToken)+0x422>
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	66 83 f8 7f          	cmp    ax,0x7f
c0015924:	77 2a                	ja     c0015950 <sendKeyboardToken(KeyboardToken)+0x422>
c0015926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015929:	88 c2                	mov    dl,al
c001592b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592e:	66 83 f8 5f          	cmp    ax,0x5f
c0015932:	76 04                	jbe    c0015938 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015934:	b0 20                	mov    al,0x20
c0015936:	eb 02                	jmp    c001593a <sendKeyboardToken(KeyboardToken)+0x40c>
c0015938:	b0 00                	mov    al,0x0
c001593a:	29 c2                	sub    edx,eax
c001593c:	88 d0                	mov    al,dl
c001593e:	83 e8 40             	sub    eax,0x40
c0015941:	0f b6 c0             	movzx  eax,al
c0015944:	83 ec 0c             	sub    esp,0xc
c0015947:	50                   	push   eax
c0015948:	e8 23 fb ff ff       	call   c0015470 <sendKeyToTerminal(unsigned char)>
c001594d:	83 c4 10             	add    esp,0x10
c0015950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015953:	66 3d 00 03          	cmp    ax,0x300
c0015957:	75 0f                	jne    c0015968 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015959:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001595c:	83 f0 01             	xor    eax,0x1
c001595f:	84 c0                	test   al,al
c0015961:	74 05                	je     c0015968 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015963:	e8 d1 a9 ff ff       	call   c0010339 <doTerminalCycle()>
c0015968:	90                   	nop
c0015969:	c9                   	leave  
c001596a:	c3                   	ret    

c001596b <clearInternalKeybuffer(VgaText*)>:
c001596b:	55                   	push   ebp
c001596c:	89 e5                	mov    ebp,esp
c001596e:	83 ec 08             	sub    esp,0x8
c0015971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015974:	05 98 01 00 00       	add    eax,0x198
c0015979:	83 ec 0c             	sub    esp,0xc
c001597c:	50                   	push   eax
c001597d:	e8 ea ad fe ff       	call   c000076c <strlen>
c0015982:	83 c4 10             	add    esp,0x10
c0015985:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015988:	81 c2 98 01 00 00    	add    edx,0x198
c001598e:	83 ec 04             	sub    esp,0x4
c0015991:	50                   	push   eax
c0015992:	6a 00                	push   0x0
c0015994:	52                   	push   edx
c0015995:	e8 b6 ad fe ff       	call   c0000750 <memset>
c001599a:	83 c4 10             	add    esp,0x10
c001599d:	90                   	nop
c001599e:	c9                   	leave  
c001599f:	c3                   	ret    

c00159a0 <readKeyboard(VgaText*, char*, unsigned long)>:
c00159a0:	55                   	push   ebp
c00159a1:	89 e5                	mov    ebp,esp
c00159a3:	83 ec 18             	sub    esp,0x18
c00159a6:	a1 28 d7 02 c0       	mov    eax,ds:0xc002d728
c00159ab:	85 c0                	test   eax,eax
c00159ad:	74 2a                	je     c00159d9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00159af:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00159b5:	8b 0d 28 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d728
c00159bb:	83 ec 04             	sub    esp,0x4
c00159be:	68 40 d7 02 c0       	push   0xc002d740
c00159c3:	83 ec 08             	sub    esp,0x8
c00159c6:	89 e2                	mov    edx,esp
c00159c8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00159cb:	89 02                	mov    DWORD PTR [edx],eax
c00159cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159d0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00159d4:	ff d1                	call   ecx
c00159d6:	83 c4 10             	add    esp,0x10
c00159d9:	fb                   	sti    
c00159da:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00159e1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00159e5:	0f 84 a1 00 00 00    	je     c0015a8c <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c00159eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ee:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00159f4:	84 c0                	test   al,al
c00159f6:	75 28                	jne    c0015a20 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c00159f8:	fa                   	cli    
c00159f9:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c00159fe:	40                   	inc    eax
c00159ff:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c0015a04:	e8 c6 7d 00 00       	call   c001d7cf <schedule()>
c0015a09:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0015a0e:	48                   	dec    eax
c0015a0f:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c0015a14:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0015a19:	85 c0                	test   eax,eax
c0015a1b:	75 ce                	jne    c00159eb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015a1d:	fb                   	sti    
c0015a1e:	eb cb                	jmp    c00159eb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015a20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a23:	8d 50 01             	lea    edx,[eax+0x1]
c0015a26:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015a29:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a2c:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015a32:	88 10                	mov    BYTE PTR [eax],dl
c0015a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a37:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015a3d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a43:	05 98 01 00 00       	add    eax,0x198
c0015a48:	83 ec 0c             	sub    esp,0xc
c0015a4b:	50                   	push   eax
c0015a4c:	e8 1b ad fe ff       	call   c000076c <strlen>
c0015a51:	83 c4 10             	add    esp,0x10
c0015a54:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a57:	81 c2 98 01 00 00    	add    edx,0x198
c0015a5d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a60:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a63:	81 c2 98 01 00 00    	add    edx,0x198
c0015a69:	83 ec 04             	sub    esp,0x4
c0015a6c:	50                   	push   eax
c0015a6d:	51                   	push   ecx
c0015a6e:	52                   	push   edx
c0015a6f:	e8 14 ac fe ff       	call   c0000688 <memmove>
c0015a74:	83 c4 10             	add    esp,0x10
c0015a77:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a7a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a7d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a81:	0f 85 5a ff ff ff    	jne    c00159e1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015a87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8a:	eb 03                	jmp    c0015a8f <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015a8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8f:	c9                   	leave  
c0015a90:	c3                   	ret    
c0015a91:	90                   	nop

c0015a92 <Keyboard::Keyboard(char const*)>:
c0015a92:	83 ec 0c             	sub    esp,0xc
c0015a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a99:	83 ec 08             	sub    esp,0x8
c0015a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015aa0:	50                   	push   eax
c0015aa1:	e8 a2 e0 ff ff       	call   c0013b48 <Device::Device(char const*)>
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	ba 14 ab 02 c0       	mov    edx,0xc002ab14
c0015aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab2:	89 10                	mov    DWORD PTR [eax],edx
c0015ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015ac2:	c6 05 24 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d724,0x1
c0015ac9:	90                   	nop
c0015aca:	83 c4 0c             	add    esp,0xc
c0015acd:	c3                   	ret    

c0015ace <Keyboard::~Keyboard()>:
c0015ace:	83 ec 0c             	sub    esp,0xc
c0015ad1:	ba 14 ab 02 c0       	mov    edx,0xc002ab14
c0015ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ada:	89 10                	mov    DWORD PTR [eax],edx
c0015adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae0:	83 ec 0c             	sub    esp,0xc
c0015ae3:	50                   	push   eax
c0015ae4:	e8 29 dd ff ff       	call   c0013812 <Device::~Device()>
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	90                   	nop
c0015aed:	83 c4 0c             	add    esp,0xc
c0015af0:	c3                   	ret    
c0015af1:	90                   	nop

c0015af2 <Keyboard::~Keyboard()>:
c0015af2:	83 ec 0c             	sub    esp,0xc
c0015af5:	83 ec 0c             	sub    esp,0xc
c0015af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015afc:	e8 cd ff ff ff       	call   c0015ace <Keyboard::~Keyboard()>
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	83 ec 08             	sub    esp,0x8
c0015b07:	68 5c 01 00 00       	push   0x15c
c0015b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b10:	e8 1e c9 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0015b15:	83 c4 10             	add    esp,0x10
c0015b18:	83 c4 0c             	add    esp,0xc
c0015b1b:	c3                   	ret    

c0015b1c <LogicalDisk::close(int, int, void*)>:
c0015b1c:	83 c8 ff             	or     eax,0xffffffff
c0015b1f:	c3                   	ret    

c0015b20 <LogicalDisk::~LogicalDisk()>:
c0015b20:	83 ec 0c             	sub    esp,0xc
c0015b23:	ba 8c ab 02 c0       	mov    edx,0xc002ab8c
c0015b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b2c:	89 10                	mov    DWORD PTR [eax],edx
c0015b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b32:	83 ec 0c             	sub    esp,0xc
c0015b35:	50                   	push   eax
c0015b36:	e8 d7 dc ff ff       	call   c0013812 <Device::~Device()>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	90                   	nop
c0015b3f:	83 c4 0c             	add    esp,0xc
c0015b42:	c3                   	ret    
c0015b43:	90                   	nop

c0015b44 <LogicalDisk::~LogicalDisk()>:
c0015b44:	83 ec 0c             	sub    esp,0xc
c0015b47:	83 ec 0c             	sub    esp,0xc
c0015b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b4e:	e8 cd ff ff ff       	call   c0015b20 <LogicalDisk::~LogicalDisk()>
c0015b53:	83 c4 10             	add    esp,0x10
c0015b56:	83 ec 08             	sub    esp,0x8
c0015b59:	68 74 01 00 00       	push   0x174
c0015b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b62:	e8 cc c8 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0015b67:	83 c4 10             	add    esp,0x10
c0015b6a:	83 c4 0c             	add    esp,0xc
c0015b6d:	c3                   	ret    

c0015b6e <LogicalDisk::open(int, int, void*)>:
c0015b6e:	83 ec 18             	sub    esp,0x18
c0015b71:	68 40 ab 02 c0       	push   0xc002ab40
c0015b76:	e8 ca 40 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0015b7b:	83 c8 ff             	or     eax,0xffffffff
c0015b7e:	83 c4 1c             	add    esp,0x1c
c0015b81:	c3                   	ret    

c0015b82 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b82:	53                   	push   ebx
c0015b83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015b87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b8f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015b95:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015b9b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015ba1:	77 10                	ja     c0015bb3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015ba3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015ba9:	89 d3                	mov    ebx,edx
c0015bab:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015bb1:	72 05                	jb     c0015bb8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015bb3:	83 c8 ff             	or     eax,0xffffffff
c0015bb6:	89 c2                	mov    edx,eax
c0015bb8:	5b                   	pop    ebx
c0015bb9:	c3                   	ret    

c0015bba <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015bba:	56                   	push   esi
c0015bbb:	83 c8 ff             	or     eax,0xffffffff
c0015bbe:	53                   	push   ebx
c0015bbf:	89 c2                	mov    edx,eax
c0015bc1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015bc5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015bc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bcd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015bd3:	77 27                	ja     c0015bfc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bd5:	89 d8                	mov    eax,ebx
c0015bd7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015bdd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015be3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015be8:	89 c2                	mov    edx,eax
c0015bea:	73 10                	jae    c0015bfc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bec:	89 c8                	mov    eax,ecx
c0015bee:	89 da                	mov    edx,ebx
c0015bf0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015bf6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015bfc:	5b                   	pop    ebx
c0015bfd:	5e                   	pop    esi
c0015bfe:	c3                   	ret    
c0015bff:	90                   	nop

c0015c00 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015c00:	83 ec 1c             	sub    esp,0x1c
c0015c03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c17:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c26:	83 ec 08             	sub    esp,0x8
c0015c29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c2d:	50                   	push   eax
c0015c2e:	e8 15 df ff ff       	call   c0013b48 <Device::Device(char const*)>
c0015c33:	83 c4 10             	add    esp,0x10
c0015c36:	ba 8c ab 02 c0       	mov    edx,0xc002ab8c
c0015c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c3f:	89 10                	mov    DWORD PTR [eax],edx
c0015c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c45:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c50:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c65:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c71:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c77:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c7d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c88:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015c8e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015c94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c9c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015cb0:	90                   	nop
c0015cb1:	83 c4 1c             	add    esp,0x1c
c0015cb4:	c3                   	ret    
c0015cb5:	90                   	nop

c0015cb6 <LogicalDisk::assignDriveLetter()>:
c0015cb6:	55                   	push   ebp
c0015cb7:	57                   	push   edi
c0015cb8:	56                   	push   esi
c0015cb9:	53                   	push   ebx
c0015cba:	83 ec 14             	sub    esp,0x14
c0015cbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015cc1:	8b 3d 60 db 02 c0    	mov    edi,DWORD PTR ds:0xc002db60
c0015cc7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ccd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015cd1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015cd7:	8b 3d 64 db 02 c0    	mov    edi,DWORD PTR ds:0xc002db64
c0015cdd:	3c 01                	cmp    al,0x1
c0015cdf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ce3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015ce7:	19 c0                	sbb    eax,eax
c0015ce9:	83 e0 02             	and    eax,0x2
c0015cec:	83 c0 41             	add    eax,0x41
c0015cef:	0f be e8             	movsx  ebp,al
c0015cf2:	3c 43                	cmp    al,0x43
c0015cf4:	75 10                	jne    c0015d06 <LogicalDisk::assignDriveLetter()+0x50>
c0015cf6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015cfd:	75 5d                	jne    c0015d5c <LogicalDisk::assignDriveLetter()+0xa6>
c0015cff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d04:	75 56                	jne    c0015d5c <LogicalDisk::assignDriveLetter()+0xa6>
c0015d06:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015d09:	ba 01 00 00 00       	mov    edx,0x1
c0015d0e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015d12:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015d16:	d3 e2                	shl    edx,cl
c0015d18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d1c:	89 d7                	mov    edi,edx
c0015d1e:	89 d6                	mov    esi,edx
c0015d20:	c1 ff 1f             	sar    edi,0x1f
c0015d23:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015d27:	21 f9                	and    ecx,edi
c0015d29:	09 d1                	or     ecx,edx
c0015d2b:	75 2f                	jne    c0015d5c <LogicalDisk::assignDriveLetter()+0xa6>
c0015d2d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015d31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d35:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015d3b:	09 f2                	or     edx,esi
c0015d3d:	89 15 60 db 02 c0    	mov    DWORD PTR ds:0xc002db60,edx
c0015d43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d47:	09 fa                	or     edx,edi
c0015d49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d4d:	89 15 64 db 02 c0    	mov    DWORD PTR ds:0xc002db64,edx
c0015d53:	89 1c bd 80 db 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2480],ebx
c0015d5a:	eb 08                	jmp    c0015d64 <LogicalDisk::assignDriveLetter()+0xae>
c0015d5c:	45                   	inc    ebp
c0015d5d:	40                   	inc    eax
c0015d5e:	3c 5b                	cmp    al,0x5b
c0015d60:	75 90                	jne    c0015cf2 <LogicalDisk::assignDriveLetter()+0x3c>
c0015d62:	31 c0                	xor    eax,eax
c0015d64:	83 c4 14             	add    esp,0x14
c0015d67:	5b                   	pop    ebx
c0015d68:	5e                   	pop    esi
c0015d69:	5f                   	pop    edi
c0015d6a:	5d                   	pop    ebp
c0015d6b:	c3                   	ret    

c0015d6c <LogicalDisk::mount()>:
c0015d6c:	56                   	push   esi
c0015d6d:	53                   	push   ebx
c0015d6e:	53                   	push   ebx
c0015d6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d73:	8b 1d f4 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f4
c0015d79:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d83:	85 db                	test   ebx,ebx
c0015d85:	74 27                	je     c0015dae <LogicalDisk::mount()+0x42>
c0015d87:	51                   	push   ecx
c0015d88:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015d8f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d91:	83 e8 41             	sub    eax,0x41
c0015d94:	50                   	push   eax
c0015d95:	56                   	push   esi
c0015d96:	53                   	push   ebx
c0015d97:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015d9a:	83 c4 10             	add    esp,0x10
c0015d9d:	84 c0                	test   al,al
c0015d9f:	74 08                	je     c0015da9 <LogicalDisk::mount()+0x3d>
c0015da1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015da7:	eb 07                	jmp    c0015db0 <LogicalDisk::mount()+0x44>
c0015da9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015dac:	eb d5                	jmp    c0015d83 <LogicalDisk::mount()+0x17>
c0015dae:	31 c0                	xor    eax,eax
c0015db0:	5a                   	pop    edx
c0015db1:	5b                   	pop    ebx
c0015db2:	5e                   	pop    esi
c0015db3:	c3                   	ret    

c0015db4 <LogicalDisk::unmount()>:
c0015db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015db8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015dc2:	c3                   	ret    
c0015dc3:	90                   	nop

c0015dc4 <LogicalDisk::eject()>:
c0015dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dc8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015dce:	8b 10                	mov    edx,DWORD PTR [eax]
c0015dd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015dd4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015dd7:	90                   	nop

c0015dd8 <LogicalDisk::unassignDriveLetter()>:
c0015dd8:	57                   	push   edi
c0015dd9:	56                   	push   esi
c0015dda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dde:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015de5:	84 c9                	test   cl,cl
c0015de7:	75 0f                	jne    c0015df8 <LogicalDisk::unassignDriveLetter()+0x20>
c0015de9:	c7 44 24 0c 64 ab 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ab64
c0015df1:	5e                   	pop    esi
c0015df2:	5f                   	pop    edi
c0015df3:	e9 4d 3e 00 00       	jmp    c0019c45 <Krnl::panic(char const*)>
c0015df8:	83 e9 41             	sub    ecx,0x41
c0015dfb:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015e02:	b8 01 00 00 00       	mov    eax,0x1
c0015e07:	c7 04 8d 80 db 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2480],0x0
c0015e12:	d3 e0                	shl    eax,cl
c0015e14:	89 c7                	mov    edi,eax
c0015e16:	f7 d0                	not    eax
c0015e18:	c1 ff 1f             	sar    edi,0x1f
c0015e1b:	21 05 60 db 02 c0    	and    DWORD PTR ds:0xc002db60,eax
c0015e21:	89 fe                	mov    esi,edi
c0015e23:	f7 d6                	not    esi
c0015e25:	21 35 64 db 02 c0    	and    DWORD PTR ds:0xc002db64,esi
c0015e2b:	5e                   	pop    esi
c0015e2c:	5f                   	pop    edi
c0015e2d:	c3                   	ret    

c0015e2e <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e2e:	57                   	push   edi
c0015e2f:	56                   	push   esi
c0015e30:	53                   	push   ebx
c0015e31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e41:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e47:	77 41                	ja     c0015e8a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e49:	99                   	cdq    
c0015e4a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e50:	01 c8                	add    eax,ecx
c0015e52:	11 da                	adc    edx,ebx
c0015e54:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e5a:	19 d7                	sbb    edi,edx
c0015e5c:	72 33                	jb     c0015e91 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e5e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e64:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e6e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e72:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e82:	5b                   	pop    ebx
c0015e83:	5e                   	pop    esi
c0015e84:	5f                   	pop    edi
c0015e85:	e9 cc 0a 00 00       	jmp    c0016956 <VCache::read(unsigned long long, int, void*)>
c0015e8a:	b8 05 00 00 00       	mov    eax,0x5
c0015e8f:	eb 05                	jmp    c0015e96 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015e91:	b8 07 00 00 00       	mov    eax,0x7
c0015e96:	5b                   	pop    ebx
c0015e97:	5e                   	pop    esi
c0015e98:	5f                   	pop    edi
c0015e99:	c3                   	ret    

c0015e9a <LogicalDisk::write(unsigned long long, int, void*)>:
c0015e9a:	57                   	push   edi
c0015e9b:	56                   	push   esi
c0015e9c:	53                   	push   ebx
c0015e9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ea5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ea9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ead:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015eb3:	77 41                	ja     c0015ef6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015eb5:	99                   	cdq    
c0015eb6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015ebc:	01 c8                	add    eax,ecx
c0015ebe:	11 da                	adc    edx,ebx
c0015ec0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015ec6:	19 d7                	sbb    edi,edx
c0015ec8:	72 33                	jb     c0015efd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015eca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ed0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ed6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015eda:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015ede:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015ee4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015eea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015eee:	5b                   	pop    ebx
c0015eef:	5e                   	pop    esi
c0015ef0:	5f                   	pop    edi
c0015ef1:	e9 76 09 00 00       	jmp    c001686c <VCache::write(unsigned long long, int, void*)>
c0015ef6:	b8 05 00 00 00       	mov    eax,0x5
c0015efb:	eb 05                	jmp    c0015f02 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015efd:	b8 07 00 00 00       	mov    eax,0x7
c0015f02:	5b                   	pop    ebx
c0015f03:	5e                   	pop    esi
c0015f04:	5f                   	pop    edi
c0015f05:	c3                   	ret    

c0015f06 <Mouse::Mouse(char const*)>:
c0015f06:	83 ec 0c             	sub    esp,0xc
c0015f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f0d:	83 ec 08             	sub    esp,0x8
c0015f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f14:	50                   	push   eax
c0015f15:	e8 2e dc ff ff       	call   c0013b48 <Device::Device(char const*)>
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	ba b8 ab 02 c0       	mov    edx,0xc002abb8
c0015f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f26:	89 10                	mov    DWORD PTR [eax],edx
c0015f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f2c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f36:	90                   	nop
c0015f37:	83 c4 0c             	add    esp,0xc
c0015f3a:	c3                   	ret    
c0015f3b:	90                   	nop

c0015f3c <Mouse::~Mouse()>:
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	ba b8 ab 02 c0       	mov    edx,0xc002abb8
c0015f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f48:	89 10                	mov    DWORD PTR [eax],edx
c0015f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f4e:	83 ec 0c             	sub    esp,0xc
c0015f51:	50                   	push   eax
c0015f52:	e8 bb d8 ff ff       	call   c0013812 <Device::~Device()>
c0015f57:	83 c4 10             	add    esp,0x10
c0015f5a:	90                   	nop
c0015f5b:	83 c4 0c             	add    esp,0xc
c0015f5e:	c3                   	ret    
c0015f5f:	90                   	nop

c0015f60 <Mouse::~Mouse()>:
c0015f60:	83 ec 0c             	sub    esp,0xc
c0015f63:	83 ec 0c             	sub    esp,0xc
c0015f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f6a:	e8 cd ff ff ff       	call   c0015f3c <Mouse::~Mouse()>
c0015f6f:	83 c4 10             	add    esp,0x10
c0015f72:	83 ec 08             	sub    esp,0x8
c0015f75:	68 58 01 00 00       	push   0x158
c0015f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f7e:	e8 b0 c4 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0015f83:	83 c4 10             	add    esp,0x10
c0015f86:	83 c4 0c             	add    esp,0xc
c0015f89:	c3                   	ret    

c0015f8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f8a:	55                   	push   ebp
c0015f8b:	57                   	push   edi
c0015f8c:	56                   	push   esi
c0015f8d:	53                   	push   ebx
c0015f8e:	81 ec 28 01 00 00    	sub    esp,0x128
c0015f94:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015f9b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015fa2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015fa9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015fb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015fb4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015fb8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015fbf:	e8 80 dc ff ff       	call   c0013c44 <Device::getName()>
c0015fc4:	5a                   	pop    edx
c0015fc5:	59                   	pop    ecx
c0015fc6:	50                   	push   eax
c0015fc7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015fcb:	55                   	push   ebp
c0015fcc:	e8 3b a8 fe ff       	call   c000080c <strcpy>
c0015fd1:	5b                   	pop    ebx
c0015fd2:	58                   	pop    eax
c0015fd3:	68 dc ab 02 c0       	push   0xc002abdc
c0015fd8:	55                   	push   ebp
c0015fd9:	e8 6e a9 fe ff       	call   c000094c <strcat>
c0015fde:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015fe5:	e8 b2 95 ff ff       	call   c000f59c <malloc>
c0015fea:	83 c4 0c             	add    esp,0xc
c0015fed:	89 c3                	mov    ebx,eax
c0015fef:	57                   	push   edi
c0015ff0:	56                   	push   esi
c0015ff1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ff5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ff9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016000:	55                   	push   ebp
c0016001:	50                   	push   eax
c0016002:	e8 f9 fb ff ff       	call   c0015c00 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016007:	83 c4 14             	add    esp,0x14
c001600a:	53                   	push   ebx
c001600b:	e8 a6 fc ff ff       	call   c0015cb6 <LogicalDisk::assignDriveLetter()>
c0016010:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016013:	e8 54 fd ff ff       	call   c0015d6c <LogicalDisk::mount()>
c0016018:	58                   	pop    eax
c0016019:	5a                   	pop    edx
c001601a:	53                   	push   ebx
c001601b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016022:	e8 1d d9 ff ff       	call   c0013944 <Device::addChild(Device*)>
c0016027:	81 c4 2c 01 00 00    	add    esp,0x12c
c001602d:	5b                   	pop    ebx
c001602e:	5e                   	pop    esi
c001602f:	5f                   	pop    edi
c0016030:	5d                   	pop    ebp
c0016031:	c3                   	ret    

c0016032 <createPartitionsForDisk(PhysicalDisk*)>:
c0016032:	55                   	push   ebp
c0016033:	57                   	push   edi
c0016034:	56                   	push   esi
c0016035:	53                   	push   ebx
c0016036:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001603c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016043:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016049:	3d 00 02 00 00       	cmp    eax,0x200
c001604e:	74 27                	je     c0016077 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016050:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016056:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001605c:	83 ec 10             	sub    esp,0x10
c001605f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016063:	99                   	cdq    
c0016064:	c1 e6 0a             	shl    esi,0xa
c0016067:	52                   	push   edx
c0016068:	89 fd                	mov    ebp,edi
c001606a:	50                   	push   eax
c001606b:	55                   	push   ebp
c001606c:	56                   	push   esi
c001606d:	e8 a2 04 01 00       	call   c0026514 <__udivdi3>
c0016072:	e9 b1 00 00 00       	jmp    c0016128 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016077:	83 ec 0c             	sub    esp,0xc
c001607a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001607c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016080:	56                   	push   esi
c0016081:	6a 01                	push   0x1
c0016083:	6a 00                	push   0x0
c0016085:	6a 00                	push   0x0
c0016087:	53                   	push   ebx
c0016088:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001608b:	83 c4 20             	add    esp,0x20
c001608e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016096:	75 0a                	jne    c00160a2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016098:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00160a0:	74 2c                	je     c00160ce <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00160a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160b4:	83 ec 10             	sub    esp,0x10
c00160b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160bb:	89 f7                	mov    edi,esi
c00160bd:	c1 e0 0a             	shl    eax,0xa
c00160c0:	c1 ff 1f             	sar    edi,0x1f
c00160c3:	57                   	push   edi
c00160c4:	56                   	push   esi
c00160c5:	52                   	push   edx
c00160c6:	50                   	push   eax
c00160c7:	e8 48 04 01 00       	call   c0026514 <__udivdi3>
c00160cc:	eb 5a                	jmp    c0016128 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160ce:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160d5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00160dc:	83 e1 7f             	and    ecx,0x7f
c00160df:	83 e0 7f             	and    eax,0x7f
c00160e2:	01 c1                	add    ecx,eax
c00160e4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00160eb:	83 e0 7f             	and    eax,0x7f
c00160ee:	01 c1                	add    ecx,eax
c00160f0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00160f7:	83 e0 7f             	and    eax,0x7f
c00160fa:	00 c1                	add    cl,al
c00160fc:	74 41                	je     c001613f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00160fe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016104:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001610a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016110:	83 ec 10             	sub    esp,0x10
c0016113:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016117:	89 f7                	mov    edi,esi
c0016119:	c1 e0 0a             	shl    eax,0xa
c001611c:	c1 ff 1f             	sar    edi,0x1f
c001611f:	57                   	push   edi
c0016120:	56                   	push   esi
c0016121:	52                   	push   edx
c0016122:	50                   	push   eax
c0016123:	e8 ec 03 01 00       	call   c0026514 <__udivdi3>
c0016128:	83 c4 14             	add    esp,0x14
c001612b:	52                   	push   edx
c001612c:	50                   	push   eax
c001612d:	6a 00                	push   0x0
c001612f:	6a 00                	push   0x0
c0016131:	53                   	push   ebx
c0016132:	e8 53 fe ff ff       	call   c0015f8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016137:	83 c4 20             	add    esp,0x20
c001613a:	e9 79 01 00 00       	jmp    c00162b8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001613f:	89 f0                	mov    eax,esi
c0016141:	31 f6                	xor    esi,esi
c0016143:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001614a:	75 02                	jne    c001614e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001614c:	89 f1                	mov    ecx,esi
c001614e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016155:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001615c:	c1 e2 08             	shl    edx,0x8
c001615f:	c1 e7 10             	shl    edi,0x10
c0016162:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001616a:	09 fa                	or     edx,edi
c001616c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016174:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001617b:	83 c0 10             	add    eax,0x10
c001617e:	09 fa                	or     edx,edi
c0016180:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016187:	c1 e7 18             	shl    edi,0x18
c001618a:	09 fa                	or     edx,edi
c001618c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016193:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016197:	c1 e7 10             	shl    edi,0x10
c001619a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00161a1:	c1 e2 08             	shl    edx,0x8
c00161a4:	09 fa                	or     edx,edi
c00161a6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00161ad:	09 fa                	or     edx,edi
c00161af:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00161b6:	c1 e7 18             	shl    edi,0x18
c00161b9:	09 fa                	or     edx,edi
c00161bb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00161bf:	46                   	inc    esi
c00161c0:	83 fe 04             	cmp    esi,0x4
c00161c3:	0f 85 7a ff ff ff    	jne    c0016143 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00161c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161cd:	83 f0 01             	xor    eax,0x1
c00161d0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161d4:	75 57                	jne    c001622d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161da:	83 f0 01             	xor    eax,0x1
c00161dd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00161e1:	75 4a                	jne    c001622d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161e3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00161e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00161ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00161f7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161fd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016203:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016209:	0f a4 c2 0a          	shld   edx,eax,0xa
c001620d:	89 f7                	mov    edi,esi
c001620f:	c1 e0 0a             	shl    eax,0xa
c0016212:	c1 ff 1f             	sar    edi,0x1f
c0016215:	57                   	push   edi
c0016216:	56                   	push   esi
c0016217:	52                   	push   edx
c0016218:	50                   	push   eax
c0016219:	e8 f6 02 01 00       	call   c0026514 <__udivdi3>
c001621e:	83 c4 10             	add    esp,0x10
c0016221:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016225:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016229:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001622d:	84 c9                	test   cl,cl
c001622f:	74 53                	je     c0016284 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016231:	0f b6 c9             	movzx  ecx,cl
c0016234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016238:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001623c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016240:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016244:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016248:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001624c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016250:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016254:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016258:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001625c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016260:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016264:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016268:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001626c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016270:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016274:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016278:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001627c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016280:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016284:	31 ed                	xor    ebp,ebp
c0016286:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001628a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001628e:	89 f8                	mov    eax,edi
c0016290:	09 f0                	or     eax,esi
c0016292:	74 1e                	je     c00162b2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016294:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016298:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001629c:	89 d1                	mov    ecx,edx
c001629e:	09 c1                	or     ecx,eax
c00162a0:	74 10                	je     c00162b2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162a2:	83 ec 0c             	sub    esp,0xc
c00162a5:	57                   	push   edi
c00162a6:	56                   	push   esi
c00162a7:	52                   	push   edx
c00162a8:	50                   	push   eax
c00162a9:	53                   	push   ebx
c00162aa:	e8 db fc ff ff       	call   c0015f8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162af:	83 c4 20             	add    esp,0x20
c00162b2:	45                   	inc    ebp
c00162b3:	83 fd 04             	cmp    ebp,0x4
c00162b6:	75 ce                	jne    c0016286 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00162b8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00162be:	5b                   	pop    ebx
c00162bf:	5e                   	pop    esi
c00162c0:	5f                   	pop    edi
c00162c1:	5d                   	pop    ebp
c00162c2:	c3                   	ret    
c00162c3:	90                   	nop

c00162c4 <Serial::Serial(char const*)>:
c00162c4:	83 ec 0c             	sub    esp,0xc
c00162c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162cb:	83 ec 08             	sub    esp,0x8
c00162ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162d2:	50                   	push   eax
c00162d3:	e8 70 d8 ff ff       	call   c0013b48 <Device::Device(char const*)>
c00162d8:	83 c4 10             	add    esp,0x10
c00162db:	ba f0 ab 02 c0       	mov    edx,0xc002abf0
c00162e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162e4:	89 10                	mov    DWORD PTR [eax],edx
c00162e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ea:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00162f4:	90                   	nop
c00162f5:	83 c4 0c             	add    esp,0xc
c00162f8:	c3                   	ret    
c00162f9:	90                   	nop

c00162fa <Serial::~Serial()>:
c00162fa:	83 ec 0c             	sub    esp,0xc
c00162fd:	ba f0 ab 02 c0       	mov    edx,0xc002abf0
c0016302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016306:	89 10                	mov    DWORD PTR [eax],edx
c0016308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001630c:	83 ec 0c             	sub    esp,0xc
c001630f:	50                   	push   eax
c0016310:	e8 fd d4 ff ff       	call   c0013812 <Device::~Device()>
c0016315:	83 c4 10             	add    esp,0x10
c0016318:	90                   	nop
c0016319:	83 c4 0c             	add    esp,0xc
c001631c:	c3                   	ret    
c001631d:	90                   	nop

c001631e <Serial::~Serial()>:
c001631e:	83 ec 0c             	sub    esp,0xc
c0016321:	83 ec 0c             	sub    esp,0xc
c0016324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016328:	e8 cd ff ff ff       	call   c00162fa <Serial::~Serial()>
c001632d:	83 c4 10             	add    esp,0x10
c0016330:	83 ec 08             	sub    esp,0x8
c0016333:	68 58 01 00 00       	push   0x158
c0016338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001633c:	e8 f2 c0 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0016341:	83 c4 10             	add    esp,0x10
c0016344:	83 c4 0c             	add    esp,0xc
c0016347:	c3                   	ret    

c0016348 <Timer::Timer(char const*)>:
c0016348:	83 ec 0c             	sub    esp,0xc
c001634b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001634f:	83 ec 08             	sub    esp,0x8
c0016352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016356:	50                   	push   eax
c0016357:	e8 ec d7 ff ff       	call   c0013b48 <Device::Device(char const*)>
c001635c:	83 c4 10             	add    esp,0x10
c001635f:	ba 34 ac 02 c0       	mov    edx,0xc002ac34
c0016364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016368:	89 10                	mov    DWORD PTR [eax],edx
c001636a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016378:	90                   	nop
c0016379:	83 c4 0c             	add    esp,0xc
c001637c:	c3                   	ret    
c001637d:	90                   	nop

c001637e <Timer::~Timer()>:
c001637e:	83 ec 0c             	sub    esp,0xc
c0016381:	ba 34 ac 02 c0       	mov    edx,0xc002ac34
c0016386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001638a:	89 10                	mov    DWORD PTR [eax],edx
c001638c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016390:	83 ec 0c             	sub    esp,0xc
c0016393:	50                   	push   eax
c0016394:	e8 79 d4 ff ff       	call   c0013812 <Device::~Device()>
c0016399:	83 c4 10             	add    esp,0x10
c001639c:	90                   	nop
c001639d:	83 c4 0c             	add    esp,0xc
c00163a0:	c3                   	ret    
c00163a1:	90                   	nop

c00163a2 <Timer::~Timer()>:
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	83 ec 0c             	sub    esp,0xc
c00163a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ac:	e8 cd ff ff ff       	call   c001637e <Timer::~Timer()>
c00163b1:	83 c4 10             	add    esp,0x10
c00163b4:	83 ec 08             	sub    esp,0x8
c00163b7:	68 5c 01 00 00       	push   0x15c
c00163bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c0:	e8 6e c0 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c00163c5:	83 c4 10             	add    esp,0x10
c00163c8:	83 c4 0c             	add    esp,0xc
c00163cb:	c3                   	ret    

c00163cc <Timer::read()>:
c00163cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163d6:	c3                   	ret    

c00163d7 <timerHandler(unsigned long long)>:
c00163d7:	55                   	push   ebp
c00163d8:	57                   	push   edi
c00163d9:	56                   	push   esi
c00163da:	53                   	push   ebx
c00163db:	83 ec 0c             	sub    esp,0xc
c00163de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163e2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00163e6:	01 35 f0 db 02 c0    	add    DWORD PTR ds:0xc002dbf0,esi
c00163ec:	11 3d f4 db 02 c0    	adc    DWORD PTR ds:0xc002dbf4,edi
c00163f2:	80 3d 8d d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d58d,0x0
c00163f9:	0f 84 42 01 00 00    	je     c0016541 <timerHandler(unsigned long long)+0x16a>
c00163ff:	fa                   	cli    
c0016400:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c0016406:	83 ec 0c             	sub    esp,0xc
c0016409:	ff 05 a4 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa4
c001640f:	68 b8 0a 03 c0       	push   0xc0030ab8
c0016414:	e8 55 21 01 00       	call   c002856e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016419:	83 c4 10             	add    esp,0x10
c001641c:	84 c0                	test   al,al
c001641e:	0f 85 a2 00 00 00    	jne    c00164c6 <timerHandler(unsigned long long)+0xef>
c0016424:	83 ec 0c             	sub    esp,0xc
c0016427:	68 b8 0a 03 c0       	push   0xc0030ab8
c001642c:	e8 59 21 01 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016431:	83 c4 10             	add    esp,0x10
c0016434:	89 c3                	mov    ebx,eax
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	68 b8 0a 03 c0       	push   0xc0030ab8
c001643e:	e8 47 21 01 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016443:	c7 04 24 b8 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ab8
c001644a:	89 c5                	mov    ebp,eax
c001644c:	e8 41 21 01 00       	call   c0028592 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016451:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016454:	83 c4 10             	add    esp,0x10
c0016457:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001645a:	39 15 f0 db 02 c0    	cmp    DWORD PTR ds:0xc002dbf0,edx
c0016460:	a1 f4 db 02 c0       	mov    eax,ds:0xc002dbf4
c0016465:	19 c8                	sbb    eax,ecx
c0016467:	72 21                	jb     c001648a <timerHandler(unsigned long long)+0xb3>
c0016469:	83 ec 0c             	sub    esp,0xc
c001646c:	55                   	push   ebp
c001646d:	e8 e0 77 00 00       	call   c001dc52 <unblockTask(ThreadControlBlock*)>
c0016472:	83 c4 10             	add    esp,0x10
c0016475:	39 eb                	cmp    ebx,ebp
c0016477:	75 21                	jne    c001649a <timerHandler(unsigned long long)+0xc3>
c0016479:	83 ec 0c             	sub    esp,0xc
c001647c:	68 b8 0a 03 c0       	push   0xc0030ab8
c0016481:	e8 04 21 01 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016486:	89 c3                	mov    ebx,eax
c0016488:	eb 0d                	jmp    c0016497 <timerHandler(unsigned long long)+0xc0>
c001648a:	50                   	push   eax
c001648b:	50                   	push   eax
c001648c:	55                   	push   ebp
c001648d:	68 b8 0a 03 c0       	push   0xc0030ab8
c0016492:	e8 a9 21 01 00       	call   c0028640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016497:	83 c4 10             	add    esp,0x10
c001649a:	83 ec 0c             	sub    esp,0xc
c001649d:	68 b8 0a 03 c0       	push   0xc0030ab8
c00164a2:	e8 c7 20 01 00       	call   c002856e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164a7:	83 c4 10             	add    esp,0x10
c00164aa:	84 c0                	test   al,al
c00164ac:	75 18                	jne    c00164c6 <timerHandler(unsigned long long)+0xef>
c00164ae:	83 ec 0c             	sub    esp,0xc
c00164b1:	68 b8 0a 03 c0       	push   0xc0030ab8
c00164b6:	e8 cf 20 01 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164bb:	83 c4 10             	add    esp,0x10
c00164be:	39 d8                	cmp    eax,ebx
c00164c0:	0f 85 70 ff ff ff    	jne    c0016436 <timerHandler(unsigned long long)+0x5f>
c00164c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164cb:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00164cf:	74 3d                	je     c001650e <timerHandler(unsigned long long)+0x137>
c00164d1:	80 3d 8c d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d58c,0x0
c00164d8:	74 34                	je     c001650e <timerHandler(unsigned long long)+0x137>
c00164da:	fa                   	cli    
c00164db:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c00164e1:	31 d2                	xor    edx,edx
c00164e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e8:	89 f9                	mov    ecx,edi
c00164ea:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00164ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00164f5:	39 c6                	cmp    esi,eax
c00164f7:	19 d1                	sbb    ecx,edx
c00164f9:	72 05                	jb     c0016500 <timerHandler(unsigned long long)+0x129>
c00164fb:	e8 cf 72 00 00       	call   c001d7cf <schedule()>
c0016500:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0016505:	48                   	dec    eax
c0016506:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001650b:	75 01                	jne    c001650e <timerHandler(unsigned long long)+0x137>
c001650d:	fb                   	sti    
c001650e:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c0016513:	48                   	dec    eax
c0016514:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c0016519:	75 18                	jne    c0016533 <timerHandler(unsigned long long)+0x15c>
c001651b:	83 3d a0 0a 03 c0 00 	cmp    DWORD PTR ds:0xc0030aa0,0x0
c0016522:	74 0f                	je     c0016533 <timerHandler(unsigned long long)+0x15c>
c0016524:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c001652e:	e8 9c 72 00 00       	call   c001d7cf <schedule()>
c0016533:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0016538:	48                   	dec    eax
c0016539:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001653e:	75 01                	jne    c0016541 <timerHandler(unsigned long long)+0x16a>
c0016540:	fb                   	sti    
c0016541:	83 c4 0c             	add    esp,0xc
c0016544:	5b                   	pop    ebx
c0016545:	5e                   	pop    esi
c0016546:	5f                   	pop    edi
c0016547:	5d                   	pop    ebp
c0016548:	c3                   	ret    

c0016549 <setupTimer(int)>:
c0016549:	57                   	push   edi
c001654a:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001654f:	56                   	push   esi
c0016550:	53                   	push   ebx
c0016551:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016555:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001655b:	83 ec 0c             	sub    esp,0xc
c001655e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016564:	e8 db d6 ff ff       	call   c0013c44 <Device::getName()>
c0016569:	83 c4 10             	add    esp,0x10
c001656c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001656f:	0f 85 8d 00 00 00    	jne    c0016602 <setupTimer(int)+0xb9>
c0016575:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001657a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016581:	74 7f                	je     c0016602 <setupTimer(int)+0xb9>
c0016583:	83 ec 0c             	sub    esp,0xc
c0016586:	68 5c 01 00 00       	push   0x15c
c001658b:	e8 0c 90 ff ff       	call   c000f59c <malloc>
c0016590:	89 04 24             	mov    DWORD PTR [esp],eax
c0016593:	89 c3                	mov    ebx,eax
c0016595:	e8 54 fb 00 00       	call   c00260ee <PIT::PIT()>
c001659a:	59                   	pop    ecx
c001659b:	5f                   	pop    edi
c001659c:	53                   	push   ebx
c001659d:	ff 35 88 d5 02 c0    	push   DWORD PTR ds:0xc002d588
c00165a3:	e8 9c d3 ff ff       	call   c0013944 <Device::addChild(Device*)>
c00165a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165aa:	6a 00                	push   0x0
c00165ac:	6a 00                	push   0x0
c00165ae:	56                   	push   esi
c00165af:	53                   	push   ebx
c00165b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165b3:	83 c4 14             	add    esp,0x14
c00165b6:	68 60 01 00 00       	push   0x160
c00165bb:	e8 dc 8f ff ff       	call   c000f59c <malloc>
c00165c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00165c3:	89 c7                	mov    edi,eax
c00165c5:	e8 d4 f9 00 00       	call   c0025f9e <APICTimer::APICTimer()>
c00165ca:	6a 00                	push   0x0
c00165cc:	6a 00                	push   0x0
c00165ce:	56                   	push   esi
c00165cf:	57                   	push   edi
c00165d0:	e8 cb f8 00 00       	call   c0025ea0 <APICTimer::open(int, int, void*)>
c00165d5:	83 c4 20             	add    esp,0x20
c00165d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165da:	6a 00                	push   0x0
c00165dc:	6a 00                	push   0x0
c00165de:	6a 00                	push   0x0
c00165e0:	53                   	push   ebx
c00165e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00165e4:	58                   	pop    eax
c00165e5:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00165ea:	5a                   	pop    edx
c00165eb:	57                   	push   edi
c00165ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165f2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00165f8:	e8 47 d3 ff ff       	call   c0013944 <Device::addChild(Device*)>
c00165fd:	83 c4 10             	add    esp,0x10
c0016600:	eb 33                	jmp    c0016635 <setupTimer(int)+0xec>
c0016602:	83 ec 0c             	sub    esp,0xc
c0016605:	68 5c 01 00 00       	push   0x15c
c001660a:	e8 8d 8f ff ff       	call   c000f59c <malloc>
c001660f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016612:	89 c3                	mov    ebx,eax
c0016614:	e8 d5 fa 00 00       	call   c00260ee <PIT::PIT()>
c0016619:	58                   	pop    eax
c001661a:	5a                   	pop    edx
c001661b:	53                   	push   ebx
c001661c:	ff 35 88 d5 02 c0    	push   DWORD PTR ds:0xc002d588
c0016622:	e8 1d d3 ff ff       	call   c0013944 <Device::addChild(Device*)>
c0016627:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016629:	6a 00                	push   0x0
c001662b:	6a 00                	push   0x0
c001662d:	56                   	push   esi
c001662e:	53                   	push   ebx
c001662f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016632:	83 c4 20             	add    esp,0x20
c0016635:	89 d8                	mov    eax,ebx
c0016637:	5b                   	pop    ebx
c0016638:	5e                   	pop    esi
c0016639:	5f                   	pop    edi
c001663a:	c3                   	ret    
c001663b:	90                   	nop

c001663c <VCache::VCache(PhysicalDisk*)>:
c001663c:	53                   	push   ebx
c001663d:	83 ec 18             	sub    esp,0x18
c0016640:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c0016645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016649:	89 10                	mov    DWORD PTR [eax],edx
c001664b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016665:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001666c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016673:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016677:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001667e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016685:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016689:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016694:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001669c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00166a3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00166aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00166b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00166ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166be:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00166c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00166cd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00166d5:	83 ec 0c             	sub    esp,0xc
c00166d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166dc:	e8 bb 8e ff ff       	call   c000f59c <malloc>
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	89 c3                	mov    ebx,eax
c00166e6:	83 ec 0c             	sub    esp,0xc
c00166e9:	53                   	push   ebx
c00166ea:	e8 a9 6e 00 00       	call   c001d598 <Mutex::Mutex()>
c00166ef:	83 c4 10             	add    esp,0x10
c00166f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00166f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166fd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016701:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016708:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001670f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016713:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001671d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016720:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016724:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001672a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016730:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016734:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016737:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001673a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001673e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016742:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016746:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001674c:	05 00 01 00 00       	add    eax,0x100
c0016751:	c1 e0 04             	shl    eax,0x4
c0016754:	83 ec 0c             	sub    esp,0xc
c0016757:	50                   	push   eax
c0016758:	e8 3f 8e ff ff       	call   c000f59c <malloc>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	89 c2                	mov    edx,eax
c0016762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016766:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001676d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016778:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001677c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016780:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016786:	c1 e0 07             	shl    eax,0x7
c0016789:	83 ec 0c             	sub    esp,0xc
c001678c:	50                   	push   eax
c001678d:	e8 0a 8e ff ff       	call   c000f59c <malloc>
c0016792:	83 c4 10             	add    esp,0x10
c0016795:	89 c2                	mov    edx,eax
c0016797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001679e:	90                   	nop
c001679f:	83 c4 18             	add    esp,0x18
c00167a2:	5b                   	pop    ebx
c00167a3:	c3                   	ret    

c00167a4 <VCache::invalidateReadBuffer()>:
c00167a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167a8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00167ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00167b2:	c3                   	ret    
c00167b3:	90                   	nop

c00167b4 <VCache::writeWriteBuffer()>:
c00167b4:	53                   	push   ebx
c00167b5:	83 ec 14             	sub    esp,0x14
c00167b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00167bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00167c1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00167c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00167ca:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00167cd:	50                   	push   eax
c00167ce:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00167d1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00167d8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00167df:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00167e3:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00167ea:	83 c4 28             	add    esp,0x28
c00167ed:	5b                   	pop    ebx
c00167ee:	c3                   	ret    
c00167ef:	90                   	nop

c00167f0 <VCache::~VCache()>:
c00167f0:	83 ec 0c             	sub    esp,0xc
c00167f3:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c00167f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167fc:	89 10                	mov    DWORD PTR [eax],edx
c00167fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016802:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016805:	84 c0                	test   al,al
c0016807:	74 0f                	je     c0016818 <VCache::~VCache()+0x28>
c0016809:	83 ec 0c             	sub    esp,0xc
c001680c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016810:	e8 9f ff ff ff       	call   c00167b4 <VCache::writeWriteBuffer()>
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001681c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001681f:	83 ec 0c             	sub    esp,0xc
c0016822:	50                   	push   eax
c0016823:	e8 84 8d ff ff       	call   c000f5ac <free>
c0016828:	83 c4 10             	add    esp,0x10
c001682b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001682f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016832:	83 ec 0c             	sub    esp,0xc
c0016835:	50                   	push   eax
c0016836:	e8 71 8d ff ff       	call   c000f5ac <free>
c001683b:	83 c4 10             	add    esp,0x10
c001683e:	90                   	nop
c001683f:	83 c4 0c             	add    esp,0xc
c0016842:	c3                   	ret    
c0016843:	90                   	nop

c0016844 <VCache::~VCache()>:
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	83 ec 0c             	sub    esp,0xc
c001684a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001684e:	e8 9d ff ff ff       	call   c00167f0 <VCache::~VCache()>
c0016853:	83 c4 10             	add    esp,0x10
c0016856:	83 ec 08             	sub    esp,0x8
c0016859:	6a 44                	push   0x44
c001685b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001685f:	e8 cf bb ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0016864:	83 c4 10             	add    esp,0x10
c0016867:	83 c4 0c             	add    esp,0xc
c001686a:	c3                   	ret    
c001686b:	90                   	nop

c001686c <VCache::write(unsigned long long, int, void*)>:
c001686c:	55                   	push   ebp
c001686d:	57                   	push   edi
c001686e:	56                   	push   esi
c001686f:	53                   	push   ebx
c0016870:	83 ec 18             	sub    esp,0x18
c0016873:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016877:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001687b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001687f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016882:	e8 57 72 00 00       	call   c001dade <Semaphore::acquire()>
c0016887:	83 c4 10             	add    esp,0x10
c001688a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001688e:	74 0c                	je     c001689c <VCache::write(unsigned long long, int, void*)+0x30>
c0016890:	83 ec 0c             	sub    esp,0xc
c0016893:	53                   	push   ebx
c0016894:	e8 0b ff ff ff       	call   c00167a4 <VCache::invalidateReadBuffer()>
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00168a0:	74 5c                	je     c00168fe <VCache::write(unsigned long long, int, void*)+0x92>
c00168a2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00168a5:	89 e8                	mov    eax,ebp
c00168a7:	99                   	cdq    
c00168a8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00168ab:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00168ae:	89 c1                	mov    ecx,eax
c00168b0:	89 d0                	mov    eax,edx
c00168b2:	31 f1                	xor    ecx,esi
c00168b4:	31 f8                	xor    eax,edi
c00168b6:	09 c1                	or     ecx,eax
c00168b8:	75 38                	jne    c00168f2 <VCache::write(unsigned long long, int, void*)+0x86>
c00168ba:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00168bf:	75 31                	jne    c00168f2 <VCache::write(unsigned long long, int, void*)+0x86>
c00168c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168c4:	89 ef                	mov    edi,ebp
c00168c6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00168cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168d0:	0f af f9             	imul   edi,ecx
c00168d3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00168d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168d8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00168db:	40                   	inc    eax
c00168dc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00168df:	83 c0 80             	add    eax,0xffffff80
c00168e2:	75 5c                	jne    c0016940 <VCache::write(unsigned long long, int, void*)+0xd4>
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	53                   	push   ebx
c00168e8:	e8 c7 fe ff ff       	call   c00167b4 <VCache::writeWriteBuffer()>
c00168ed:	83 c4 10             	add    esp,0x10
c00168f0:	eb 4e                	jmp    c0016940 <VCache::write(unsigned long long, int, void*)+0xd4>
c00168f2:	83 ec 0c             	sub    esp,0xc
c00168f5:	53                   	push   ebx
c00168f6:	e8 b9 fe ff ff       	call   c00167b4 <VCache::writeWriteBuffer()>
c00168fb:	83 c4 10             	add    esp,0x10
c00168fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016901:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016906:	7f 22                	jg     c001692a <VCache::write(unsigned long long, int, void*)+0xbe>
c0016908:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001690b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001690e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016912:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016916:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016919:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001691c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016922:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016928:	eb 16                	jmp    c0016940 <VCache::write(unsigned long long, int, void*)+0xd4>
c001692a:	83 ec 0c             	sub    esp,0xc
c001692d:	8b 10                	mov    edx,DWORD PTR [eax]
c001692f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016933:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016937:	57                   	push   edi
c0016938:	56                   	push   esi
c0016939:	50                   	push   eax
c001693a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001693d:	83 c4 20             	add    esp,0x20
c0016940:	83 ec 0c             	sub    esp,0xc
c0016943:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016946:	e8 ef 77 00 00       	call   c001e13a <Semaphore::release()>
c001694b:	83 c4 1c             	add    esp,0x1c
c001694e:	31 c0                	xor    eax,eax
c0016950:	5b                   	pop    ebx
c0016951:	5e                   	pop    esi
c0016952:	5f                   	pop    edi
c0016953:	5d                   	pop    ebp
c0016954:	c3                   	ret    
c0016955:	90                   	nop

c0016956 <VCache::read(unsigned long long, int, void*)>:
c0016956:	55                   	push   ebp
c0016957:	57                   	push   edi
c0016958:	56                   	push   esi
c0016959:	53                   	push   ebx
c001695a:	83 ec 28             	sub    esp,0x28
c001695d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016961:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016965:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016969:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001696d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016970:	e8 69 71 00 00       	call   c001dade <Semaphore::acquire()>
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001697c:	74 0c                	je     c001698a <VCache::read(unsigned long long, int, void*)+0x34>
c001697e:	83 ec 0c             	sub    esp,0xc
c0016981:	53                   	push   ebx
c0016982:	e8 2d fe ff ff       	call   c00167b4 <VCache::writeWriteBuffer()>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	83 fd 01             	cmp    ebp,0x1
c001698d:	0f 85 80 00 00 00    	jne    c0016a13 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016993:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016996:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001699a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00169a1:	75 70                	jne    c0016a13 <VCache::read(unsigned long long, int, void*)+0xbd>
c00169a3:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00169a6:	89 e9                	mov    ecx,ebp
c00169a8:	f7 d9                	neg    ecx
c00169aa:	89 c8                	mov    eax,ecx
c00169ac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00169b0:	c1 f8 1f             	sar    eax,0x1f
c00169b3:	21 f1                	and    ecx,esi
c00169b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169b9:	89 c8                	mov    eax,ecx
c00169bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169bf:	21 f9                	and    ecx,edi
c00169c1:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00169c5:	89 ca                	mov    edx,ecx
c00169c7:	74 0a                	je     c00169d3 <VCache::read(unsigned long long, int, void*)+0x7d>
c00169c9:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00169cc:	75 05                	jne    c00169d3 <VCache::read(unsigned long long, int, void*)+0x7d>
c00169ce:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00169d1:	74 23                	je     c00169f6 <VCache::read(unsigned long long, int, void*)+0xa0>
c00169d3:	83 ec 0c             	sub    esp,0xc
c00169d6:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00169da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00169de:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00169e1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00169e4:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00169e6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00169e9:	55                   	push   ebp
c00169ea:	52                   	push   edx
c00169eb:	50                   	push   eax
c00169ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00169f0:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00169f3:	83 c4 20             	add    esp,0x20
c00169f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169f9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00169fd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a03:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016a06:	48                   	dec    eax
c0016a07:	21 c6                	and    esi,eax
c0016a09:	0f af f1             	imul   esi,ecx
c0016a0c:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016a0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a11:	eb 1d                	jmp    c0016a30 <VCache::read(unsigned long long, int, void*)+0xda>
c0016a13:	83 ec 0c             	sub    esp,0xc
c0016a16:	53                   	push   ebx
c0016a17:	e8 88 fd ff ff       	call   c00167a4 <VCache::invalidateReadBuffer()>
c0016a1c:	5a                   	pop    edx
c0016a1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a20:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016a26:	55                   	push   ebp
c0016a27:	57                   	push   edi
c0016a28:	56                   	push   esi
c0016a29:	50                   	push   eax
c0016a2a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016a2d:	83 c4 20             	add    esp,0x20
c0016a30:	83 ec 0c             	sub    esp,0xc
c0016a33:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a36:	e8 ff 76 00 00       	call   c001e13a <Semaphore::release()>
c0016a3b:	83 c4 2c             	add    esp,0x2c
c0016a3e:	31 c0                	xor    eax,eax
c0016a40:	5b                   	pop    ebx
c0016a41:	5e                   	pop    esi
c0016a42:	5f                   	pop    edi
c0016a43:	5d                   	pop    ebp
c0016a44:	c3                   	ret    
c0016a45:	90                   	nop

c0016a46 <Video::putrect(int, int, int, int, unsigned int)>:
c0016a46:	55                   	push   ebp
c0016a47:	57                   	push   edi
c0016a48:	56                   	push   esi
c0016a49:	53                   	push   ebx
c0016a4a:	83 ec 1c             	sub    esp,0x1c
c0016a4d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016a51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a59:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016a5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a65:	01 df                	add    edi,ebx
c0016a67:	39 fb                	cmp    ebx,edi
c0016a69:	7d 1f                	jge    c0016a8a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016a6b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016a6f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016a73:	7d 12                	jge    c0016a87 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016a75:	8b 16                	mov    edx,DWORD PTR [esi]
c0016a77:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016a7b:	53                   	push   ebx
c0016a7c:	55                   	push   ebp
c0016a7d:	45                   	inc    ebp
c0016a7e:	56                   	push   esi
c0016a7f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	eb e8                	jmp    c0016a6f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016a87:	43                   	inc    ebx
c0016a88:	eb dd                	jmp    c0016a67 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016a8a:	83 c4 1c             	add    esp,0x1c
c0016a8d:	5b                   	pop    ebx
c0016a8e:	5e                   	pop    esi
c0016a8f:	5f                   	pop    edi
c0016a90:	5d                   	pop    ebp
c0016a91:	c3                   	ret    

c0016a92 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016a92:	55                   	push   ebp
c0016a93:	57                   	push   edi
c0016a94:	31 ff                	xor    edi,edi
c0016a96:	56                   	push   esi
c0016a97:	53                   	push   ebx
c0016a98:	83 ec 1c             	sub    esp,0x1c
c0016a9b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016a9f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016aa3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016aaa:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016aaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ab3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ab7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016abb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016abe:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016ac2:	01 f9                	add    ecx,edi
c0016ac4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016ac8:	7d 2f                	jge    c0016af9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016aca:	31 f6                	xor    esi,esi
c0016acc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ad0:	01 f2                	add    edx,esi
c0016ad2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ad6:	7d 1a                	jge    c0016af2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ad8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016adb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ade:	46                   	inc    esi
c0016adf:	51                   	push   ecx
c0016ae0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016ae4:	52                   	push   edx
c0016ae5:	55                   	push   ebp
c0016ae6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ae9:	83 c4 10             	add    esp,0x10
c0016aec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016af0:	eb da                	jmp    c0016acc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016af2:	47                   	inc    edi
c0016af3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016af7:	eb c5                	jmp    c0016abe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016af9:	83 c4 1c             	add    esp,0x1c
c0016afc:	5b                   	pop    ebx
c0016afd:	5e                   	pop    esi
c0016afe:	5f                   	pop    edi
c0016aff:	5d                   	pop    ebp
c0016b00:	c3                   	ret    
c0016b01:	90                   	nop

c0016b02 <Video::blit(unsigned int*, int, int, int, int)>:
c0016b02:	55                   	push   ebp
c0016b03:	57                   	push   edi
c0016b04:	56                   	push   esi
c0016b05:	53                   	push   ebx
c0016b06:	83 ec 1c             	sub    esp,0x1c
c0016b09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b11:	85 c0                	test   eax,eax
c0016b13:	79 02                	jns    c0016b17 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016b15:	31 c0                	xor    eax,eax
c0016b17:	c1 e0 02             	shl    eax,0x2
c0016b1a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b26:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016b2a:	39 d8                	cmp    eax,ebx
c0016b2c:	7e 49                	jle    c0016b77 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b2e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b34:	7c 41                	jl     c0016b77 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b36:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016b3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b3e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b42:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016b46:	39 f9                	cmp    ecx,edi
c0016b48:	7e 22                	jle    c0016b6c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016b4a:	83 c5 04             	add    ebp,0x4
c0016b4d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b53:	7c 14                	jl     c0016b69 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016b55:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016b57:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016b5a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b62:	56                   	push   esi
c0016b63:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016b66:	83 c4 10             	add    esp,0x10
c0016b69:	47                   	inc    edi
c0016b6a:	eb d2                	jmp    c0016b3e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b70:	43                   	inc    ebx
c0016b71:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016b75:	eb ab                	jmp    c0016b22 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016b77:	83 c4 1c             	add    esp,0x1c
c0016b7a:	5b                   	pop    ebx
c0016b7b:	5e                   	pop    esi
c0016b7c:	5f                   	pop    edi
c0016b7d:	5d                   	pop    ebp
c0016b7e:	c3                   	ret    
c0016b7f:	90                   	nop

c0016b80 <Video::clearScreen(unsigned int)>:
c0016b80:	57                   	push   edi
c0016b81:	56                   	push   esi
c0016b82:	53                   	push   ebx
c0016b83:	31 db                	xor    ebx,ebx
c0016b85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b89:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b8f:	7e 1f                	jle    c0016bb0 <Video::clearScreen(unsigned int)+0x30>
c0016b91:	31 ff                	xor    edi,edi
c0016b93:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b99:	7e 12                	jle    c0016bad <Video::clearScreen(unsigned int)+0x2d>
c0016b9b:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ba1:	53                   	push   ebx
c0016ba2:	57                   	push   edi
c0016ba3:	47                   	inc    edi
c0016ba4:	56                   	push   esi
c0016ba5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ba8:	83 c4 10             	add    esp,0x10
c0016bab:	eb e6                	jmp    c0016b93 <Video::clearScreen(unsigned int)+0x13>
c0016bad:	43                   	inc    ebx
c0016bae:	eb d9                	jmp    c0016b89 <Video::clearScreen(unsigned int)+0x9>
c0016bb0:	5b                   	pop    ebx
c0016bb1:	5e                   	pop    esi
c0016bb2:	5f                   	pop    edi
c0016bb3:	c3                   	ret    

c0016bb4 <Video::putpixel(int, int, unsigned int)>:
c0016bb4:	c7 44 24 04 6c ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ac6c
c0016bbc:	e9 84 30 00 00       	jmp    c0019c45 <Krnl::panic(char const*)>
c0016bc1:	90                   	nop

c0016bc2 <Video::Video(char const*)>:
c0016bc2:	83 ec 0c             	sub    esp,0xc
c0016bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc9:	83 ec 08             	sub    esp,0x8
c0016bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bd0:	50                   	push   eax
c0016bd1:	e8 72 cf ff ff       	call   c0013b48 <Device::Device(char const*)>
c0016bd6:	83 c4 10             	add    esp,0x10
c0016bd9:	ba dc ac 02 c0       	mov    edx,0xc002acdc
c0016bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be2:	89 10                	mov    DWORD PTR [eax],edx
c0016be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016bf2:	90                   	nop
c0016bf3:	83 c4 0c             	add    esp,0xc
c0016bf6:	c3                   	ret    
c0016bf7:	90                   	nop

c0016bf8 <Video::~Video()>:
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	ba dc ac 02 c0       	mov    edx,0xc002acdc
c0016c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c04:	89 10                	mov    DWORD PTR [eax],edx
c0016c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0a:	83 ec 0c             	sub    esp,0xc
c0016c0d:	50                   	push   eax
c0016c0e:	e8 ff cb ff ff       	call   c0013812 <Device::~Device()>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	90                   	nop
c0016c17:	83 c4 0c             	add    esp,0xc
c0016c1a:	c3                   	ret    
c0016c1b:	90                   	nop

c0016c1c <Video::~Video()>:
c0016c1c:	83 ec 0c             	sub    esp,0xc
c0016c1f:	83 ec 0c             	sub    esp,0xc
c0016c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c26:	e8 cd ff ff ff       	call   c0016bf8 <Video::~Video()>
c0016c2b:	83 c4 10             	add    esp,0x10
c0016c2e:	83 ec 08             	sub    esp,0x8
c0016c31:	68 64 01 00 00       	push   0x164
c0016c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c3a:	e8 f4 b7 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	83 c4 0c             	add    esp,0xc
c0016c45:	c3                   	ret    

c0016c46 <Video::isMonochrome()>:
c0016c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c4a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016c50:	c3                   	ret    
c0016c51:	90                   	nop

c0016c52 <Video::getWidth()>:
c0016c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c5c:	c3                   	ret    
c0016c5d:	90                   	nop

c0016c5e <Video::getHeight()>:
c0016c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c68:	c3                   	ret    
c0016c69:	90                   	nop

c0016c6a <Video::drawCursor(int, int, unsigned char*, int)>:
c0016c6a:	55                   	push   ebp
c0016c6b:	57                   	push   edi
c0016c6c:	56                   	push   esi
c0016c6d:	53                   	push   ebx
c0016c6e:	83 ec 2c             	sub    esp,0x2c
c0016c71:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c75:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c79:	83 f8 01             	cmp    eax,0x1
c0016c7c:	19 c9                	sbb    ecx,ecx
c0016c7e:	31 db                	xor    ebx,ebx
c0016c80:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016c84:	89 cd                	mov    ebp,ecx
c0016c86:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016c8e:	f7 d5                	not    ebp
c0016c90:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016c9a:	01 d8                	add    eax,ebx
c0016c9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ca0:	56                   	push   esi
c0016ca1:	e8 b8 ff ff ff       	call   c0016c5e <Video::getHeight()>
c0016ca6:	59                   	pop    ecx
c0016ca7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016cab:	7e 70                	jle    c0016d1d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016cad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cb1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016cb5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016cb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cbc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cc0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016cc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ccb:	89 f8                	mov    eax,edi
c0016ccd:	83 c0 20             	add    eax,0x20
c0016cd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cd4:	56                   	push   esi
c0016cd5:	e8 78 ff ff ff       	call   c0016c52 <Video::getWidth()>
c0016cda:	5a                   	pop    edx
c0016cdb:	39 c7                	cmp    edi,eax
c0016cdd:	7d 34                	jge    c0016d13 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016cdf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016ce4:	74 05                	je     c0016ceb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016ce6:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ce8:	55                   	push   ebp
c0016ce9:	eb 0d                	jmp    c0016cf8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ceb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016cf0:	74 12                	je     c0016d04 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016cf2:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cf8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016cfc:	57                   	push   edi
c0016cfd:	56                   	push   esi
c0016cfe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016d08:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016d0c:	47                   	inc    edi
c0016d0d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d11:	75 c1                	jne    c0016cd4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016d13:	43                   	inc    ebx
c0016d14:	83 fb 20             	cmp    ebx,0x20
c0016d17:	0f 85 79 ff ff ff    	jne    c0016c96 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016d1d:	83 c4 2c             	add    esp,0x2c
c0016d20:	5b                   	pop    ebx
c0016d21:	5e                   	pop    esi
c0016d22:	5f                   	pop    edi
c0016d23:	5d                   	pop    ebp
c0016d24:	c3                   	ret    
c0016d25:	90                   	nop

c0016d26 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016d26:	55                   	push   ebp
c0016d27:	57                   	push   edi
c0016d28:	56                   	push   esi
c0016d29:	53                   	push   ebx
c0016d2a:	83 ec 28             	sub    esp,0x28
c0016d2d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d31:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016d35:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016d39:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016d3d:	c1 e6 08             	shl    esi,0x8
c0016d40:	01 c6                	add    esi,eax
c0016d42:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016d46:	c1 e0 08             	shl    eax,0x8
c0016d49:	01 d0                	add    eax,edx
c0016d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d53:	0f af c6             	imul   eax,esi
c0016d56:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016d5d:	50                   	push   eax
c0016d5e:	e8 39 88 ff ff       	call   c000f59c <malloc>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	89 c7                	mov    edi,eax
c0016d68:	85 c0                	test   eax,eax
c0016d6a:	75 10                	jne    c0016d7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016d6c:	83 ec 0c             	sub    esp,0xc
c0016d6f:	68 8d ac 02 c0       	push   0xc002ac8d
c0016d74:	e8 cc 2e 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0016d79:	83 c4 10             	add    esp,0x10
c0016d7c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016d7f:	ba 12 00 00 00       	mov    edx,0x12
c0016d84:	84 c0                	test   al,al
c0016d86:	74 11                	je     c0016d99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016d88:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016d8c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016d90:	c1 fa 03             	sar    edx,0x3
c0016d93:	0f af d1             	imul   edx,ecx
c0016d96:	83 c2 12             	add    edx,0x12
c0016d99:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016d9d:	74 04                	je     c0016da3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016d9f:	85 f6                	test   esi,esi
c0016da1:	75 12                	jne    c0016db5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016da3:	83 ec 0c             	sub    esp,0xc
c0016da6:	68 9d ac 02 c0       	push   0xc002ac9d
c0016dab:	e8 5b b7 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0016db0:	e9 b8 00 00 00       	jmp    c0016e6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016db5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016db9:	80 f9 02             	cmp    cl,0x2
c0016dbc:	0f 85 96 00 00 00    	jne    c0016e58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016dc2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016dc7:	75 0e                	jne    c0016dd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016dc9:	84 c0                	test   al,al
c0016dcb:	75 0a                	jne    c0016dd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016dcd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016dd0:	83 e8 18             	sub    eax,0x18
c0016dd3:	a8 f7                	test   al,0xf7
c0016dd5:	74 0a                	je     c0016de1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016dd7:	83 ec 0c             	sub    esp,0xc
c0016dda:	68 b2 ac 02 c0       	push   0xc002acb2
c0016ddf:	eb 7f                	jmp    c0016e60 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016de1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016de9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016df1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016df5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016dfd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016e01:	75 0c                	jne    c0016e0f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016e03:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016e08:	c1 e0 18             	shl    eax,0x18
c0016e0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e0f:	45                   	inc    ebp
c0016e10:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016e15:	c1 e1 10             	shl    ecx,0x10
c0016e18:	89 c8                	mov    eax,ecx
c0016e1a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016e1f:	c1 e1 08             	shl    ecx,0x8
c0016e22:	09 c1                	or     ecx,eax
c0016e24:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016e28:	09 c1                	or     ecx,eax
c0016e2a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016e2e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016e32:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016e36:	c1 f8 03             	sar    eax,0x3
c0016e39:	01 c2                	add    edx,eax
c0016e3b:	89 e8                	mov    eax,ebp
c0016e3d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016e41:	39 c6                	cmp    esi,eax
c0016e43:	7f b0                	jg     c0016df5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016e45:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016e49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e4d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016e50:	7e 22                	jle    c0016e74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016e52:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016e56:	eb 99                	jmp    c0016df1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016e58:	50                   	push   eax
c0016e59:	50                   	push   eax
c0016e5a:	51                   	push   ecx
c0016e5b:	68 c0 ac 02 c0       	push   0xc002acc0
c0016e60:	e8 a6 b6 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0016e65:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e68:	e8 3f 87 ff ff       	call   c000f5ac <free>
c0016e6d:	83 c4 10             	add    esp,0x10
c0016e70:	31 ff                	xor    edi,edi
c0016e72:	eb 0f                	jmp    c0016e83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0016e74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e78:	89 30                	mov    DWORD PTR [eax],esi
c0016e7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e7e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016e81:	89 30                	mov    DWORD PTR [eax],esi
c0016e83:	83 c4 1c             	add    esp,0x1c
c0016e86:	89 f8                	mov    eax,edi
c0016e88:	5b                   	pop    ebx
c0016e89:	5e                   	pop    esi
c0016e8a:	5f                   	pop    edi
c0016e8b:	5d                   	pop    ebp
c0016e8c:	c3                   	ret    
c0016e8d:	90                   	nop

c0016e8e <Video::putTGA(int, int, unsigned char*, int)>:
c0016e8e:	55                   	push   ebp
c0016e8f:	57                   	push   edi
c0016e90:	56                   	push   esi
c0016e91:	53                   	push   ebx
c0016e92:	83 ec 28             	sub    esp,0x28
c0016e95:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016e99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e9d:	50                   	push   eax
c0016e9e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ea2:	50                   	push   eax
c0016ea3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ea7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016eab:	56                   	push   esi
c0016eac:	e8 75 fe ff ff       	call   c0016d26 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016eb1:	83 c4 20             	add    esp,0x20
c0016eb4:	85 c0                	test   eax,eax
c0016eb6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016eba:	74 35                	je     c0016ef1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ebc:	89 c7                	mov    edi,eax
c0016ebe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ec2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016ec6:	39 d8                	cmp    eax,ebx
c0016ec8:	7e 27                	jle    c0016ef1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016eca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ece:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ed2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016ed6:	39 e8                	cmp    eax,ebp
c0016ed8:	7e 14                	jle    c0016eee <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016eda:	8b 06                	mov    eax,DWORD PTR [esi]
c0016edc:	83 c7 04             	add    edi,0x4
c0016edf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016ee2:	53                   	push   ebx
c0016ee3:	55                   	push   ebp
c0016ee4:	45                   	inc    ebp
c0016ee5:	56                   	push   esi
c0016ee6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ee9:	83 c4 10             	add    esp,0x10
c0016eec:	eb e0                	jmp    c0016ece <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016eee:	43                   	inc    ebx
c0016eef:	eb cd                	jmp    c0016ebe <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016ef1:	83 c4 1c             	add    esp,0x1c
c0016ef4:	5b                   	pop    ebx
c0016ef5:	5e                   	pop    esi
c0016ef6:	5f                   	pop    edi
c0016ef7:	5d                   	pop    ebp
c0016ef8:	c3                   	ret    
c0016ef9:	90                   	nop

c0016efa <ACPI::close(int, int, void*)>:
c0016efa:	83 ec 1c             	sub    esp,0x1c
c0016efd:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016f05:	74 0a                	je     c0016f11 <ACPI::close(int, int, void*)+0x17>
c0016f07:	b8 00 00 00 00       	mov    eax,0x0
c0016f0c:	e9 8a 00 00 00       	jmp    c0016f9b <ACPI::close(int, int, void*)+0xa1>
c0016f11:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f16:	75 27                	jne    c0016f3f <ACPI::close(int, int, void*)+0x45>
c0016f18:	a1 28 fc 02 c0       	mov    eax,ds:0xc002fc28
c0016f1d:	85 c0                	test   eax,eax
c0016f1f:	74 07                	je     c0016f28 <ACPI::close(int, int, void*)+0x2e>
c0016f21:	a1 28 fc 02 c0       	mov    eax,ds:0xc002fc28
c0016f26:	ff d0                	call   eax
c0016f28:	83 ec 0c             	sub    esp,0xc
c0016f2b:	68 1c ad 02 c0       	push   0xc002ad1c
c0016f30:	e8 10 2d 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0016f35:	83 c4 10             	add    esp,0x10
c0016f38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f3d:	eb 5c                	jmp    c0016f9b <ACPI::close(int, int, void*)+0xa1>
c0016f3f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016f44:	75 50                	jne    c0016f96 <ACPI::close(int, int, void*)+0x9c>
c0016f46:	a1 24 fc 02 c0       	mov    eax,ds:0xc002fc24
c0016f4b:	85 c0                	test   eax,eax
c0016f4d:	74 07                	je     c0016f56 <ACPI::close(int, int, void*)+0x5c>
c0016f4f:	a1 24 fc 02 c0       	mov    eax,ds:0xc002fc24
c0016f54:	ff d0                	call   eax
c0016f56:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016f5b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016f60:	83 e0 02             	and    eax,0x2
c0016f63:	74 1c                	je     c0016f81 <ACPI::close(int, int, void*)+0x87>
c0016f65:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016f6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f70:	89 c2                	mov    edx,eax
c0016f72:	ec                   	in     al,dx
c0016f73:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016f77:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016f7b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016f7f:	eb da                	jmp    c0016f5b <ACPI::close(int, int, void*)+0x61>
c0016f81:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016f88:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016f8d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016f91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f95:	ee                   	out    dx,al
c0016f96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f9b:	83 c4 1c             	add    esp,0x1c
c0016f9e:	c3                   	ret    

c0016f9f <findRSDP()>:
c0016f9f:	83 ec 1c             	sub    esp,0x1c
c0016fa2:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0016fa7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016fad:	83 e0 04             	and    eax,0x4
c0016fb0:	84 c0                	test   al,al
c0016fb2:	75 07                	jne    c0016fbb <findRSDP()+0x1c>
c0016fb4:	b8 00 00 00 00       	mov    eax,0x0
c0016fb9:	eb 6a                	jmp    c0017025 <findRSDP()+0x86>
c0016fbb:	a1 d4 d5 02 c0       	mov    eax,ds:0xc002d5d4
c0016fc0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016fc5:	7f 1b                	jg     c0016fe2 <findRSDP()+0x43>
c0016fc7:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0016fcc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016fd2:	83 e2 fb             	and    edx,0xfffffffb
c0016fd5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016fdb:	b8 00 00 00 00       	mov    eax,0x0
c0016fe0:	eb 43                	jmp    c0017025 <findRSDP()+0x86>
c0016fe2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016fea:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016ff2:	77 2c                	ja     c0017020 <findRSDP()+0x81>
c0016ff4:	83 ec 04             	sub    esp,0x4
c0016ff7:	6a 08                	push   0x8
c0016ff9:	68 b7 ad 02 c0       	push   0xc002adb7
c0016ffe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017002:	e8 45 96 fe ff       	call   c000064c <memcmp>
c0017007:	83 c4 10             	add    esp,0x10
c001700a:	85 c0                	test   eax,eax
c001700c:	0f 94 c0             	sete   al
c001700f:	84 c0                	test   al,al
c0017011:	74 06                	je     c0017019 <findRSDP()+0x7a>
c0017013:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017017:	eb 0c                	jmp    c0017025 <findRSDP()+0x86>
c0017019:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001701e:	eb ca                	jmp    c0016fea <findRSDP()+0x4b>
c0017020:	b8 00 00 00 00       	mov    eax,0x0
c0017025:	83 c4 1c             	add    esp,0x1c
c0017028:	c3                   	ret    

c0017029 <loadACPITables(unsigned char*)>:
c0017029:	57                   	push   edi
c001702a:	56                   	push   esi
c001702b:	53                   	push   ebx
c001702c:	83 ec 60             	sub    esp,0x60
c001702f:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017034:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001703a:	83 e0 04             	and    eax,0x4
c001703d:	84 c0                	test   al,al
c001703f:	0f 84 33 02 00 00    	je     c0017278 <loadACPITables(unsigned char*)+0x24f>
c0017045:	a0 40 fe 02 c0       	mov    al,ds:0xc002fe40
c001704a:	84 c0                	test   al,al
c001704c:	74 75                	je     c00170c3 <loadACPITables(unsigned char*)+0x9a>
c001704e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017052:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017056:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001705a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001705d:	83 e8 24             	sub    eax,0x24
c0017060:	c1 e8 03             	shr    eax,0x3
c0017063:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017067:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001706f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017073:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017077:	0f 8d b2 00 00 00    	jge    c001712f <loadACPITables(unsigned char*)+0x106>
c001707d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017081:	83 c0 24             	add    eax,0x24
c0017084:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017088:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001708c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017090:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017094:	c1 e0 03             	shl    eax,0x3
c0017097:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001709b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001709f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00170a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00170a4:	89 c1                	mov    ecx,eax
c00170a6:	a1 2c fc 02 c0       	mov    eax,ds:0xc002fc2c
c00170ab:	8d 50 01             	lea    edx,[eax+0x1]
c00170ae:	89 15 2c fc 02 c0    	mov    DWORD PTR ds:0xc002fc2c,edx
c00170b4:	89 ca                	mov    edx,ecx
c00170b6:	89 14 c5 44 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd03bc],edx
c00170bd:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00170c1:	eb ac                	jmp    c001706f <loadACPITables(unsigned char*)+0x46>
c00170c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00170c7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00170cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170d2:	83 e8 24             	sub    eax,0x24
c00170d5:	c1 e8 02             	shr    eax,0x2
c00170d8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00170dc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00170e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00170e8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00170ec:	7d 41                	jge    c001712f <loadACPITables(unsigned char*)+0x106>
c00170ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00170f2:	83 c0 24             	add    eax,0x24
c00170f5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00170f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017101:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017105:	c1 e0 02             	shl    eax,0x2
c0017108:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001710c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017110:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017112:	a1 2c fc 02 c0       	mov    eax,ds:0xc002fc2c
c0017117:	8d 50 01             	lea    edx,[eax+0x1]
c001711a:	89 15 2c fc 02 c0    	mov    DWORD PTR ds:0xc002fc2c,edx
c0017120:	89 ca                	mov    edx,ecx
c0017122:	89 14 c5 44 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd03bc],edx
c0017129:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001712d:	eb b5                	jmp    c00170e4 <loadACPITables(unsigned char*)+0xbb>
c001712f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017137:	a1 2c fc 02 c0       	mov    eax,ds:0xc002fc2c
c001713c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017140:	0f 8d 33 01 00 00    	jge    c0017279 <loadACPITables(unsigned char*)+0x250>
c0017146:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001714a:	8b 04 c5 44 fc 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd03bc]
c0017151:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017159:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001715d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017161:	25 ff 0f 00 00       	and    eax,0xfff
c0017166:	89 c6                	mov    esi,eax
c0017168:	8b 1d f0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f0
c001716e:	83 ec 0c             	sub    esp,0xc
c0017171:	6a 01                	push   0x1
c0017173:	e8 29 a0 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001717f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017185:	83 ec 0c             	sub    esp,0xc
c0017188:	6a 01                	push   0x1
c001718a:	6a 01                	push   0x1
c001718c:	50                   	push   eax
c001718d:	52                   	push   edx
c001718e:	53                   	push   ebx
c001718f:	e8 c0 aa ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017194:	83 c4 20             	add    esp,0x20
c0017197:	09 f0                	or     eax,esi
c0017199:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001719d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00171a1:	c1 e0 03             	shl    eax,0x3
c00171a4:	05 40 fc 02 c0       	add    eax,0xc002fc40
c00171a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171b5:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00171bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00171d1:	89 c6                	mov    esi,eax
c00171d3:	89 d7                	mov    edi,edx
c00171d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00171d7:	89 c8                	mov    eax,ecx
c00171d9:	89 fa                	mov    edx,edi
c00171db:	89 f3                	mov    ebx,esi
c00171dd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00171e1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00171e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00171f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171f8:	05 00 10 00 00       	add    eax,0x1000
c00171fd:	c1 e8 0c             	shr    eax,0xc
c0017200:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017208:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001720c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017210:	25 ff 0f 00 00       	and    eax,0xfff
c0017215:	89 c6                	mov    esi,eax
c0017217:	8b 1d f0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f0
c001721d:	83 ec 0c             	sub    esp,0xc
c0017220:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017224:	e8 78 9f ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0017229:	83 c4 10             	add    esp,0x10
c001722c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017230:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017236:	83 ec 0c             	sub    esp,0xc
c0017239:	6a 01                	push   0x1
c001723b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001723f:	50                   	push   eax
c0017240:	52                   	push   edx
c0017241:	53                   	push   ebx
c0017242:	e8 0d aa ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017247:	83 c4 20             	add    esp,0x20
c001724a:	09 f0                	or     eax,esi
c001724c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017254:	83 ec 0c             	sub    esp,0xc
c0017257:	50                   	push   eax
c0017258:	e8 8a a3 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c001725d:	83 c4 10             	add    esp,0x10
c0017260:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017264:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017268:	89 14 c5 44 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd03bc],edx
c001726f:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017273:	e9 bf fe ff ff       	jmp    c0017137 <loadACPITables(unsigned char*)+0x10e>
c0017278:	90                   	nop
c0017279:	83 c4 60             	add    esp,0x60
c001727c:	5b                   	pop    ebx
c001727d:	5e                   	pop    esi
c001727e:	5f                   	pop    edi
c001727f:	c3                   	ret    

c0017280 <findRSDT(unsigned char*)>:
c0017280:	57                   	push   edi
c0017281:	56                   	push   esi
c0017282:	53                   	push   ebx
c0017283:	83 ec 50             	sub    esp,0x50
c0017286:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001728b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017291:	83 e0 04             	and    eax,0x4
c0017294:	84 c0                	test   al,al
c0017296:	75 0a                	jne    c00172a2 <findRSDT(unsigned char*)+0x22>
c0017298:	b8 00 00 00 00       	mov    eax,0x0
c001729d:	e9 21 01 00 00       	jmp    c00173c3 <findRSDT(unsigned char*)+0x143>
c00172a2:	89 e0                	mov    eax,esp
c00172a4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00172ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172b0:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00172b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172c4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172c8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00172cc:	89 c6                	mov    esi,eax
c00172ce:	89 d7                	mov    edi,edx
c00172d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172d2:	89 c8                	mov    eax,ecx
c00172d4:	89 fa                	mov    edx,edi
c00172d6:	89 f3                	mov    ebx,esi
c00172d8:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00172dc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00172e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00172e8:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00172ec:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00172f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00172fc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017304:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017308:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001730c:	25 ff 0f 00 00       	and    eax,0xfff
c0017311:	89 c6                	mov    esi,eax
c0017313:	8b 1d f0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f0
c0017319:	83 ec 0c             	sub    esp,0xc
c001731c:	6a 02                	push   0x2
c001731e:	e8 7e 9e ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0017323:	83 c4 10             	add    esp,0x10
c0017326:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001732a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017330:	83 ec 0c             	sub    esp,0xc
c0017333:	6a 01                	push   0x1
c0017335:	6a 02                	push   0x2
c0017337:	50                   	push   eax
c0017338:	52                   	push   edx
c0017339:	53                   	push   ebx
c001733a:	e8 15 a9 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001733f:	83 c4 20             	add    esp,0x20
c0017342:	09 f0                	or     eax,esi
c0017344:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017348:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001734c:	25 ff 0f 00 00       	and    eax,0xfff
c0017351:	89 c6                	mov    esi,eax
c0017353:	8b 1d f0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f0
c0017359:	83 ec 0c             	sub    esp,0xc
c001735c:	6a 02                	push   0x2
c001735e:	e8 3e 9e ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0017363:	83 c4 10             	add    esp,0x10
c0017366:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001736a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017370:	83 ec 0c             	sub    esp,0xc
c0017373:	6a 01                	push   0x1
c0017375:	6a 02                	push   0x2
c0017377:	50                   	push   eax
c0017378:	52                   	push   edx
c0017379:	53                   	push   ebx
c001737a:	e8 d5 a8 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001737f:	83 c4 20             	add    esp,0x20
c0017382:	09 f0                	or     eax,esi
c0017384:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017388:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001738d:	75 11                	jne    c00173a0 <findRSDT(unsigned char*)+0x120>
c001738f:	c6 05 40 fe 02 c0 00 	mov    BYTE PTR ds:0xc002fe40,0x0
c0017396:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001739a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001739e:	eb 1f                	jmp    c00173bf <findRSDT(unsigned char*)+0x13f>
c00173a0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00173a5:	75 11                	jne    c00173b8 <findRSDT(unsigned char*)+0x138>
c00173a7:	c6 05 40 fe 02 c0 01 	mov    BYTE PTR ds:0xc002fe40,0x1
c00173ae:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00173b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00173b6:	eb 07                	jmp    c00173bf <findRSDT(unsigned char*)+0x13f>
c00173b8:	b8 00 00 00 00       	mov    eax,0x0
c00173bd:	eb 04                	jmp    c00173c3 <findRSDT(unsigned char*)+0x143>
c00173bf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00173c3:	83 c4 50             	add    esp,0x50
c00173c6:	5b                   	pop    ebx
c00173c7:	5e                   	pop    esi
c00173c8:	5f                   	pop    edi
c00173c9:	c3                   	ret    

c00173ca <findDataTable(unsigned char*, char*)>:
c00173ca:	83 ec 1c             	sub    esp,0x1c
c00173cd:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00173d2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173d8:	83 e0 04             	and    eax,0x4
c00173db:	84 c0                	test   al,al
c00173dd:	75 07                	jne    c00173e6 <findDataTable(unsigned char*, char*)+0x1c>
c00173df:	b8 00 00 00 00       	mov    eax,0x0
c00173e4:	eb 52                	jmp    c0017438 <findDataTable(unsigned char*, char*)+0x6e>
c00173e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173ee:	a1 2c fc 02 c0       	mov    eax,ds:0xc002fc2c
c00173f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00173f7:	7d 3a                	jge    c0017433 <findDataTable(unsigned char*, char*)+0x69>
c00173f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173fd:	c1 e0 03             	shl    eax,0x3
c0017400:	05 40 fc 02 c0       	add    eax,0xc002fc40
c0017405:	83 ec 04             	sub    esp,0x4
c0017408:	6a 04                	push   0x4
c001740a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001740e:	50                   	push   eax
c001740f:	e8 38 92 fe ff       	call   c000064c <memcmp>
c0017414:	83 c4 10             	add    esp,0x10
c0017417:	85 c0                	test   eax,eax
c0017419:	0f 94 c0             	sete   al
c001741c:	84 c0                	test   al,al
c001741e:	74 0d                	je     c001742d <findDataTable(unsigned char*, char*)+0x63>
c0017420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017424:	8b 04 c5 44 fc 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd03bc]
c001742b:	eb 0b                	jmp    c0017438 <findDataTable(unsigned char*, char*)+0x6e>
c001742d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017431:	eb bb                	jmp    c00173ee <findDataTable(unsigned char*, char*)+0x24>
c0017433:	b8 00 00 00 00       	mov    eax,0x0
c0017438:	83 c4 1c             	add    esp,0x1c
c001743b:	c3                   	ret    

c001743c <scanMADT()>:
c001743c:	53                   	push   ebx
c001743d:	83 ec 38             	sub    esp,0x38
c0017440:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017445:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001744b:	83 e0 04             	and    eax,0x4
c001744e:	84 c0                	test   al,al
c0017450:	0f 84 4a 04 00 00    	je     c00178a0 <scanMADT()+0x464>
c0017456:	e8 44 fb ff ff       	call   c0016f9f <findRSDP()>
c001745b:	a3 4c fe 02 c0       	mov    ds:0xc002fe4c,eax
c0017460:	a1 4c fe 02 c0       	mov    eax,ds:0xc002fe4c
c0017465:	85 c0                	test   eax,eax
c0017467:	75 19                	jne    c0017482 <scanMADT()+0x46>
c0017469:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001746e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017474:	83 e2 fb             	and    edx,0xfffffffb
c0017477:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001747d:	e9 22 04 00 00       	jmp    c00178a4 <scanMADT()+0x468>
c0017482:	a1 4c fe 02 c0       	mov    eax,ds:0xc002fe4c
c0017487:	83 ec 0c             	sub    esp,0xc
c001748a:	50                   	push   eax
c001748b:	e8 f0 fd ff ff       	call   c0017280 <findRSDT(unsigned char*)>
c0017490:	83 c4 10             	add    esp,0x10
c0017493:	a3 48 fe 02 c0       	mov    ds:0xc002fe48,eax
c0017498:	a1 48 fe 02 c0       	mov    eax,ds:0xc002fe48
c001749d:	85 c0                	test   eax,eax
c001749f:	75 19                	jne    c00174ba <scanMADT()+0x7e>
c00174a1:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00174a6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174ac:	83 e2 fb             	and    edx,0xfffffffb
c00174af:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174b5:	e9 ea 03 00 00       	jmp    c00178a4 <scanMADT()+0x468>
c00174ba:	a1 48 fe 02 c0       	mov    eax,ds:0xc002fe48
c00174bf:	83 ec 0c             	sub    esp,0xc
c00174c2:	50                   	push   eax
c00174c3:	e8 61 fb ff ff       	call   c0017029 <loadACPITables(unsigned char*)>
c00174c8:	83 c4 10             	add    esp,0x10
c00174cb:	a1 48 fe 02 c0       	mov    eax,ds:0xc002fe48
c00174d0:	83 ec 08             	sub    esp,0x8
c00174d3:	68 c0 ad 02 c0       	push   0xc002adc0
c00174d8:	50                   	push   eax
c00174d9:	e8 ec fe ff ff       	call   c00173ca <findDataTable(unsigned char*, char*)>
c00174de:	83 c4 10             	add    esp,0x10
c00174e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00174e5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00174ea:	75 19                	jne    c0017505 <scanMADT()+0xc9>
c00174ec:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00174f1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174f7:	83 e2 fe             	and    edx,0xfffffffe
c00174fa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017500:	e9 9f 03 00 00       	jmp    c00178a4 <scanMADT()+0x468>
c0017505:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001750d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017511:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017514:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017518:	0f 87 86 03 00 00    	ja     c00178a4 <scanMADT()+0x468>
c001751e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017526:	0f 87 78 03 00 00    	ja     c00178a4 <scanMADT()+0x468>
c001752c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017530:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017534:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017538:	8d 50 01             	lea    edx,[eax+0x1]
c001753b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001753f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017543:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017547:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001754b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001754f:	8d 50 01             	lea    edx,[eax+0x1]
c0017552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017556:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001755a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001755e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017562:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017567:	0f 86 36 03 00 00    	jbe    c00178a3 <scanMADT()+0x467>
c001756d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017572:	75 57                	jne    c00175cb <scanMADT()+0x18f>
c0017574:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017578:	8d 50 01             	lea    edx,[eax+0x1]
c001757b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001757f:	8a 15 40 00 03 c0    	mov    dl,BYTE PTR ds:0xc0030040
c0017585:	0f b6 d2             	movzx  edx,dl
c0017588:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001758c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017590:	88 82 80 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff80],al
c0017596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001759a:	8d 50 01             	lea    edx,[eax+0x1]
c001759d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175a1:	8a 15 40 00 03 c0    	mov    dl,BYTE PTR ds:0xc0030040
c00175a7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175aa:	88 0d 40 00 03 c0    	mov    BYTE PTR ds:0xc0030040,cl
c00175b0:	0f b6 d2             	movzx  edx,dl
c00175b3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175b7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175bb:	88 82 60 00 03 c0    	mov    BYTE PTR [edx-0x3ffcffa0],al
c00175c1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175c6:	e9 c1 02 00 00       	jmp    c001788c <scanMADT()+0x450>
c00175cb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00175d0:	0f 85 14 01 00 00    	jne    c00176ea <scanMADT()+0x2ae>
c00175d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175da:	8d 50 01             	lea    edx,[eax+0x1]
c00175dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175e1:	8a 15 00 ff 02 c0    	mov    dl,BYTE PTR ds:0xc002ff00
c00175e7:	0f b6 d2             	movzx  edx,dl
c00175ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175ee:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175f2:	88 82 20 ff 02 c0    	mov    BYTE PTR [edx-0x3ffd00e0],al
c00175f8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00175fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017600:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017604:	01 d0                	add    eax,edx
c0017606:	83 c0 2c             	add    eax,0x2c
c0017609:	8a 00                	mov    al,BYTE PTR [eax]
c001760b:	0f b6 d0             	movzx  edx,al
c001760e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017612:	8d 48 01             	lea    ecx,[eax+0x1]
c0017615:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017619:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001761d:	0f b6 c0             	movzx  eax,al
c0017620:	c1 e0 08             	shl    eax,0x8
c0017623:	89 d1                	mov    ecx,edx
c0017625:	09 c1                	or     ecx,eax
c0017627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001762b:	8d 50 02             	lea    edx,[eax+0x2]
c001762e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017632:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017636:	0f b6 c0             	movzx  eax,al
c0017639:	c1 e0 10             	shl    eax,0x10
c001763c:	09 c1                	or     ecx,eax
c001763e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017642:	8d 50 03             	lea    edx,[eax+0x3]
c0017645:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017649:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001764d:	0f b6 c0             	movzx  eax,al
c0017650:	c1 e0 18             	shl    eax,0x18
c0017653:	09 c1                	or     ecx,eax
c0017655:	89 ca                	mov    edx,ecx
c0017657:	a0 00 ff 02 c0       	mov    al,ds:0xc002ff00
c001765c:	0f b6 c0             	movzx  eax,al
c001765f:	89 14 85 40 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd00c0],edx
c0017666:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001766b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001766f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017673:	01 d0                	add    eax,edx
c0017675:	83 c0 2c             	add    eax,0x2c
c0017678:	8a 00                	mov    al,BYTE PTR [eax]
c001767a:	0f b6 d0             	movzx  edx,al
c001767d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017681:	8d 48 01             	lea    ecx,[eax+0x1]
c0017684:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017688:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001768c:	0f b6 c0             	movzx  eax,al
c001768f:	c1 e0 08             	shl    eax,0x8
c0017692:	89 d1                	mov    ecx,edx
c0017694:	09 c1                	or     ecx,eax
c0017696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001769a:	8d 50 02             	lea    edx,[eax+0x2]
c001769d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176a1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176a5:	0f b6 c0             	movzx  eax,al
c00176a8:	c1 e0 10             	shl    eax,0x10
c00176ab:	09 c1                	or     ecx,eax
c00176ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176b1:	8d 50 03             	lea    edx,[eax+0x3]
c00176b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176b8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176bc:	0f b6 c0             	movzx  eax,al
c00176bf:	c1 e0 18             	shl    eax,0x18
c00176c2:	09 c1                	or     ecx,eax
c00176c4:	89 ca                	mov    edx,ecx
c00176c6:	a0 00 ff 02 c0       	mov    al,ds:0xc002ff00
c00176cb:	0f b6 c0             	movzx  eax,al
c00176ce:	89 14 85 c0 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0040],edx
c00176d5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176da:	a0 00 ff 02 c0       	mov    al,ds:0xc002ff00
c00176df:	40                   	inc    eax
c00176e0:	a2 00 ff 02 c0       	mov    ds:0xc002ff00,al
c00176e5:	e9 a2 01 00 00       	jmp    c001788c <scanMADT()+0x450>
c00176ea:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00176ef:	0f 85 e9 00 00 00    	jne    c00177de <scanMADT()+0x3a2>
c00176f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176f9:	8d 50 01             	lea    edx,[eax+0x1]
c00176fc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017700:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017704:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017708:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001770c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017710:	8d 50 01             	lea    edx,[eax+0x1]
c0017713:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017717:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001771b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001771f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017723:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017727:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772b:	01 d0                	add    eax,edx
c001772d:	83 c0 2c             	add    eax,0x2c
c0017730:	8a 00                	mov    al,BYTE PTR [eax]
c0017732:	0f b6 d0             	movzx  edx,al
c0017735:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017739:	8d 48 01             	lea    ecx,[eax+0x1]
c001773c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017740:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017744:	0f b6 c0             	movzx  eax,al
c0017747:	c1 e0 08             	shl    eax,0x8
c001774a:	89 d1                	mov    ecx,edx
c001774c:	09 c1                	or     ecx,eax
c001774e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017752:	8d 50 02             	lea    edx,[eax+0x2]
c0017755:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017759:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001775d:	0f b6 c0             	movzx  eax,al
c0017760:	c1 e0 10             	shl    eax,0x10
c0017763:	09 c1                	or     ecx,eax
c0017765:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017769:	8d 50 03             	lea    edx,[eax+0x3]
c001776c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017770:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017774:	0f b6 c0             	movzx  eax,al
c0017777:	c1 e0 18             	shl    eax,0x18
c001777a:	09 c8                	or     eax,ecx
c001777c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017780:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017785:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017789:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001778d:	01 d0                	add    eax,edx
c001778f:	83 c0 2c             	add    eax,0x2c
c0017792:	8a 00                	mov    al,BYTE PTR [eax]
c0017794:	0f b6 c0             	movzx  eax,al
c0017797:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001779b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001779e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177a2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00177a6:	0f b6 d2             	movzx  edx,dl
c00177a9:	c1 e2 08             	shl    edx,0x8
c00177ac:	09 d0                	or     eax,edx
c00177ae:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00177b3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00177b8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00177bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177c1:	88 90 e0 c7 02 c0    	mov    BYTE PTR [eax-0x3ffd3820],dl
c00177c7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00177cc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00177d1:	66 89 84 12 e0 fe 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd0120],ax
c00177d9:	e9 ae 00 00 00       	jmp    c001788c <scanMADT()+0x450>
c00177de:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00177e3:	0f 85 97 00 00 00    	jne    c0017880 <scanMADT()+0x444>
c00177e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ed:	8d 50 01             	lea    edx,[eax+0x1]
c00177f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177fc:	0f b6 c0             	movzx  eax,al
c00177ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017803:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001780b:	01 d0                	add    eax,edx
c001780d:	83 c0 2c             	add    eax,0x2c
c0017810:	8a 00                	mov    al,BYTE PTR [eax]
c0017812:	0f b6 d0             	movzx  edx,al
c0017815:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017819:	8d 48 01             	lea    ecx,[eax+0x1]
c001781c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017820:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017824:	0f b6 c0             	movzx  eax,al
c0017827:	c1 e0 08             	shl    eax,0x8
c001782a:	09 d0                	or     eax,edx
c001782c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017830:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017835:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017839:	8d 50 01             	lea    edx,[eax+0x1]
c001783c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017840:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017844:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017848:	0f b6 c0             	movzx  eax,al
c001784b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001784f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017853:	c1 e0 08             	shl    eax,0x8
c0017856:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001785a:	89 c1                	mov    ecx,eax
c001785c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017860:	c1 e0 18             	shl    eax,0x18
c0017863:	89 c3                	mov    ebx,eax
c0017865:	a1 50 fe 02 c0       	mov    eax,ds:0xc002fe50
c001786a:	8d 50 01             	lea    edx,[eax+0x1]
c001786d:	89 15 50 fe 02 c0    	mov    DWORD PTR ds:0xc002fe50,edx
c0017873:	09 d9                	or     ecx,ebx
c0017875:	89 ca                	mov    edx,ecx
c0017877:	89 14 85 60 fe 02 c0 	mov    DWORD PTR [eax*4-0x3ffd01a0],edx
c001787e:	eb 0c                	jmp    c001788c <scanMADT()+0x450>
c0017880:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017885:	75 05                	jne    c001788c <scanMADT()+0x450>
c0017887:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001788c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017891:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017895:	01 d0                	add    eax,edx
c0017897:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001789b:	e9 6d fc ff ff       	jmp    c001750d <scanMADT()+0xd1>
c00178a0:	90                   	nop
c00178a1:	eb 01                	jmp    c00178a4 <scanMADT()+0x468>
c00178a3:	90                   	nop
c00178a4:	83 c4 38             	add    esp,0x38
c00178a7:	5b                   	pop    ebx
c00178a8:	c3                   	ret    
c00178a9:	90                   	nop

c00178aa <ACPI::ACPI()>:
c00178aa:	83 ec 0c             	sub    esp,0xc
c00178ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b1:	83 ec 08             	sub    esp,0x8
c00178b4:	68 c5 ad 02 c0       	push   0xc002adc5
c00178b9:	50                   	push   eax
c00178ba:	e8 89 c2 ff ff       	call   c0013b48 <Device::Device(char const*)>
c00178bf:	83 c4 10             	add    esp,0x10
c00178c2:	ba 20 af 02 c0       	mov    edx,0xc002af20
c00178c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178cb:	89 10                	mov    DWORD PTR [eax],edx
c00178cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178d1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00178d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178dc:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00178e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ea:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00178f4:	e8 43 fb ff ff       	call   c001743c <scanMADT()>
c00178f9:	90                   	nop
c00178fa:	83 c4 0c             	add    esp,0xc
c00178fd:	c3                   	ret    

c00178fe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00178fe:	83 ec 2c             	sub    esp,0x2c
c0017901:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017905:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017909:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001790d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017911:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017916:	88 d0                	mov    al,dl
c0017918:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001791c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017921:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017929:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001792d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017933:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017937:	0f 8d 97 00 00 00    	jge    c00179d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001793d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017941:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017945:	83 c2 2a             	add    edx,0x2a
c0017948:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001794c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017951:	75 78                	jne    c00179cb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017953:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017957:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001795b:	83 c2 2a             	add    edx,0x2a
c001795e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017962:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017966:	75 63                	jne    c00179cb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017968:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001796d:	74 3a                	je     c00179a9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001796f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017973:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017977:	83 c2 2a             	add    edx,0x2a
c001797a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001797e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017982:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017985:	39 c2                	cmp    edx,eax
c0017987:	74 10                	je     c0017999 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017989:	83 ec 0c             	sub    esp,0xc
c001798c:	68 40 ad 02 c0       	push   0xc002ad40
c0017991:	e8 af 22 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0017996:	83 c4 10             	add    esp,0x10
c0017999:	83 ec 0c             	sub    esp,0xc
c001799c:	68 ca ad 02 c0       	push   0xc002adca
c00179a1:	e8 9f 22 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c00179a6:	83 c4 10             	add    esp,0x10
c00179a9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179b5:	83 c2 2a             	add    edx,0x2a
c00179b8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00179bc:	8b 02                	mov    eax,DWORD PTR [edx]
c00179be:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00179c1:	89 01                	mov    DWORD PTR [ecx],eax
c00179c3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00179c6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00179cb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00179cf:	e9 55 ff ff ff       	jmp    c0017929 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00179d4:	90                   	nop
c00179d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179d9:	83 c4 2c             	add    esp,0x2c
c00179dc:	c2 04 00             	ret    0x4
c00179df:	90                   	nop

c00179e0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00179e0:	83 ec 1c             	sub    esp,0x1c
c00179e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179e7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00179eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00179ef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00179f4:	88 c8                	mov    al,cl
c00179f6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00179fa:	88 d0                	mov    al,dl
c00179fc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a04:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a11:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017a15:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a27:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017a2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a2e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a37:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a3d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017a41:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a48:	83 c2 2a             	add    edx,0x2a
c0017a4b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017a4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a53:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a5d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a60:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017a64:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a72:	8d 50 01             	lea    edx,[eax+0x1]
c0017a75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a79:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a83:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a89:	3d 00 02 00 00       	cmp    eax,0x200
c0017a8e:	75 10                	jne    c0017aa0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017a90:	83 ec 0c             	sub    esp,0xc
c0017a93:	68 d9 ad 02 c0       	push   0xc002add9
c0017a98:	e8 a8 21 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0017a9d:	83 c4 10             	add    esp,0x10
c0017aa0:	90                   	nop
c0017aa1:	83 c4 1c             	add    esp,0x1c
c0017aa4:	c3                   	ret    
c0017aa5:	90                   	nop

c0017aa6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017aa6:	b8 00 00 00 00       	mov    eax,0x0
c0017aab:	c3                   	ret    

c0017aac <ACPI::detectPCI()>:
c0017aac:	53                   	push   ebx
c0017aad:	83 ec 28             	sub    esp,0x28
c0017ab0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ab5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017aba:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017abf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ac5:	83 e0 04             	and    eax,0x4
c0017ac8:	84 c0                	test   al,al
c0017aca:	74 2b                	je     c0017af7 <ACPI::detectPCI()+0x4b>
c0017acc:	a1 48 fe 02 c0       	mov    eax,ds:0xc002fe48
c0017ad1:	83 ec 08             	sub    esp,0x8
c0017ad4:	68 f6 ad 02 c0       	push   0xc002adf6
c0017ad9:	50                   	push   eax
c0017ada:	e8 eb f8 ff ff       	call   c00173ca <findDataTable(unsigned char*, char*)>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ae6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017aeb:	74 0a                	je     c0017af7 <ACPI::detectPCI()+0x4b>
c0017aed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017af2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017af7:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017aff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b03:	8a 00                	mov    al,BYTE PTR [eax]
c0017b05:	3c 01                	cmp    al,0x1
c0017b07:	75 0c                	jne    c0017b15 <ACPI::detectPCI()+0x69>
c0017b09:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b0e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b13:	eb 26                	jmp    c0017b3b <ACPI::detectPCI()+0x8f>
c0017b15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b19:	8a 00                	mov    al,BYTE PTR [eax]
c0017b1b:	3c 02                	cmp    al,0x2
c0017b1d:	75 1c                	jne    c0017b3b <ACPI::detectPCI()+0x8f>
c0017b1f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b24:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017b29:	74 10                	je     c0017b3b <ACPI::detectPCI()+0x8f>
c0017b2b:	83 ec 0c             	sub    esp,0xc
c0017b2e:	68 70 ad 02 c0       	push   0xc002ad70
c0017b33:	e8 0d 21 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0017b38:	83 c4 10             	add    esp,0x10
c0017b3b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017b3f:	83 f0 01             	xor    eax,0x1
c0017b42:	84 c0                	test   al,al
c0017b44:	74 3f                	je     c0017b85 <ACPI::detectPCI()+0xd9>
c0017b46:	e8 05 86 fe ff       	call   c0000150 <manualPCIProbe>
c0017b4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b4f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017b54:	75 0c                	jne    c0017b62 <ACPI::detectPCI()+0xb6>
c0017b56:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b5b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b60:	eb 23                	jmp    c0017b85 <ACPI::detectPCI()+0xd9>
c0017b62:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017b67:	75 1c                	jne    c0017b85 <ACPI::detectPCI()+0xd9>
c0017b69:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b6e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017b73:	74 10                	je     c0017b85 <ACPI::detectPCI()+0xd9>
c0017b75:	83 ec 0c             	sub    esp,0xc
c0017b78:	68 70 ad 02 c0       	push   0xc002ad70
c0017b7d:	e8 c3 20 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0017b82:	83 c4 10             	add    esp,0x10
c0017b85:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b8a:	74 7e                	je     c0017c0a <ACPI::detectPCI()+0x15e>
c0017b8c:	83 ec 0c             	sub    esp,0xc
c0017b8f:	68 fb ad 02 c0       	push   0xc002adfb
c0017b94:	e8 5d 7a ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017b99:	83 c4 10             	add    esp,0x10
c0017b9c:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017ba4:	83 ec 0c             	sub    esp,0xc
c0017ba7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bab:	e8 ec 79 ff ff       	call   c000f59c <malloc>
c0017bb0:	83 c4 10             	add    esp,0x10
c0017bb3:	89 c3                	mov    ebx,eax
c0017bb5:	83 ec 0c             	sub    esp,0xc
c0017bb8:	53                   	push   ebx
c0017bb9:	e8 aa a5 00 00       	call   c0022168 <PCI::PCI()>
c0017bbe:	83 c4 10             	add    esp,0x10
c0017bc1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017bc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc9:	83 ec 08             	sub    esp,0x8
c0017bcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bd0:	50                   	push   eax
c0017bd1:	e8 6e bd ff ff       	call   c0013944 <Device::addChild(Device*)>
c0017bd6:	83 c4 10             	add    esp,0x10
c0017bd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bdf:	83 c0 08             	add    eax,0x8
c0017be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0017be4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017be9:	74 07                	je     c0017bf2 <ACPI::detectPCI()+0x146>
c0017beb:	ba 01 00 00 00       	mov    edx,0x1
c0017bf0:	eb 05                	jmp    c0017bf7 <ACPI::detectPCI()+0x14b>
c0017bf2:	ba 02 00 00 00       	mov    edx,0x2
c0017bf7:	6a 00                	push   0x0
c0017bf9:	6a 00                	push   0x0
c0017bfb:	52                   	push   edx
c0017bfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c00:	ff d0                	call   eax
c0017c02:	83 c4 10             	add    esp,0x10
c0017c05:	e9 9e 00 00 00       	jmp    c0017ca8 <ACPI::detectPCI()+0x1fc>
c0017c0a:	83 ec 0c             	sub    esp,0xc
c0017c0d:	68 13 ae 02 c0       	push   0xc002ae13
c0017c12:	e8 f4 a8 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0017c17:	83 c4 10             	add    esp,0x10
c0017c1a:	83 ec 0c             	sub    esp,0xc
c0017c1d:	68 1e ae 02 c0       	push   0xc002ae1e
c0017c22:	e8 cf 79 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017c27:	83 c4 10             	add    esp,0x10
c0017c2a:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017c31:	83 ec 0c             	sub    esp,0xc
c0017c34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c38:	e8 5f 79 ff ff       	call   c000f59c <malloc>
c0017c3d:	83 c4 10             	add    esp,0x10
c0017c40:	89 c3                	mov    ebx,eax
c0017c42:	83 ec 0c             	sub    esp,0xc
c0017c45:	53                   	push   ebx
c0017c46:	e8 87 b0 00 00       	call   c0022cd2 <IDE::IDE()>
c0017c4b:	83 c4 10             	add    esp,0x10
c0017c4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017c52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c56:	83 ec 08             	sub    esp,0x8
c0017c59:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c5d:	50                   	push   eax
c0017c5e:	e8 e1 bc ff ff       	call   c0013944 <Device::addChild(Device*)>
c0017c63:	83 c4 10             	add    esp,0x10
c0017c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c6a:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c78:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017c81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c85:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c94:	83 c0 08             	add    eax,0x8
c0017c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c99:	6a 00                	push   0x0
c0017c9b:	6a 00                	push   0x0
c0017c9d:	6a 00                	push   0x0
c0017c9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ca3:	ff d0                	call   eax
c0017ca5:	83 c4 10             	add    esp,0x10
c0017ca8:	90                   	nop
c0017ca9:	83 c4 28             	add    esp,0x28
c0017cac:	5b                   	pop    ebx
c0017cad:	c3                   	ret    

c0017cae <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017cae:	83 ec 1c             	sub    esp,0x1c
c0017cb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cb5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017cb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017cbc:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017cc1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017cc6:	83 ec 08             	sub    esp,0x8
c0017cc9:	52                   	push   edx
c0017cca:	50                   	push   eax
c0017ccb:	e8 e0 6e ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017cd0:	83 c4 10             	add    esp,0x10
c0017cd3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017cd7:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017cdc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ce1:	83 ec 04             	sub    esp,0x4
c0017ce4:	6a 01                	push   0x1
c0017ce6:	52                   	push   edx
c0017ce7:	50                   	push   eax
c0017ce8:	e8 f5 6f ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	90                   	nop
c0017cf1:	83 c4 1c             	add    esp,0x1c
c0017cf4:	c3                   	ret    
c0017cf5:	90                   	nop

c0017cf6 <ACPI::sleep()>:
c0017cf6:	83 ec 0c             	sub    esp,0xc
c0017cf9:	a1 20 fc 02 c0       	mov    eax,ds:0xc002fc20
c0017cfe:	85 c0                	test   eax,eax
c0017d00:	74 07                	je     c0017d09 <ACPI::sleep()+0x13>
c0017d02:	a1 20 fc 02 c0       	mov    eax,ds:0xc002fc20
c0017d07:	ff d0                	call   eax
c0017d09:	90                   	nop
c0017d0a:	83 c4 0c             	add    esp,0xc
c0017d0d:	c3                   	ret    

c0017d0e <ACPI::open(int, int, void*)>:
c0017d0e:	57                   	push   edi
c0017d0f:	56                   	push   esi
c0017d10:	53                   	push   ebx
c0017d11:	81 ec 60 01 00 00    	sub    esp,0x160
c0017d17:	83 ec 0c             	sub    esp,0xc
c0017d1a:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017d21:	e8 86 fd ff ff       	call   c0017aac <ACPI::detectPCI()>
c0017d26:	83 c4 10             	add    esp,0x10
c0017d29:	83 ec 0c             	sub    esp,0xc
c0017d2c:	68 98 ad 02 c0       	push   0xc002ad98
c0017d31:	e8 c0 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d36:	83 c4 10             	add    esp,0x10
c0017d39:	83 ec 0c             	sub    esp,0xc
c0017d3c:	68 33 ae 02 c0       	push   0xc002ae33
c0017d41:	e8 52 46 00 00       	call   c001c398 <Thr::loadKernelSymbolTable(char const*)>
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	83 ec 0c             	sub    esp,0xc
c0017d4c:	68 51 ae 02 c0       	push   0xc002ae51
c0017d51:	e8 a0 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d56:	83 c4 10             	add    esp,0x10
c0017d59:	83 ec 04             	sub    esp,0x4
c0017d5c:	6a 0c                	push   0xc
c0017d5e:	68 6c ae 02 c0       	push   0xc002ae6c
c0017d63:	68 7d ae 02 c0       	push   0xc002ae7d
c0017d68:	e8 94 2c 00 00       	call   c001aa01 <Reg::readIntWithDefault(char*, char*, int)>
c0017d6d:	83 c4 10             	add    esp,0x10
c0017d70:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017d77:	83 ec 0c             	sub    esp,0xc
c0017d7a:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017d81:	e8 25 96 ff ff       	call   c00113ab <Virt::setupPageSwapping(int)>
c0017d86:	83 c4 10             	add    esp,0x10
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	68 15 9c 02 c0       	push   0xc0029c15
c0017d91:	e8 60 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d96:	83 c4 10             	add    esp,0x10
c0017d99:	8b 1d 88 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d588
c0017d9f:	83 ec 08             	sub    esp,0x8
c0017da2:	6a 01                	push   0x1
c0017da4:	68 84 ae 02 c0       	push   0xc002ae84
c0017da9:	e8 61 50 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c0017dae:	83 c4 10             	add    esp,0x10
c0017db1:	83 ec 08             	sub    esp,0x8
c0017db4:	53                   	push   ebx
c0017db5:	50                   	push   eax
c0017db6:	e8 7f 52 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c0017dbb:	83 c4 10             	add    esp,0x10
c0017dbe:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017dc5:	83 ec 08             	sub    esp,0x8
c0017dc8:	6a 12                	push   0x12
c0017dca:	50                   	push   eax
c0017dcb:	e8 f8 be ff ff       	call   c0013cc8 <getDevicesOfType(DeviceType)>
c0017dd0:	83 c4 0c             	add    esp,0xc
c0017dd3:	83 ec 0c             	sub    esp,0xc
c0017dd6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017ddd:	50                   	push   eax
c0017dde:	e8 81 09 01 00       	call   c0028764 <LinkedList<Device>::isEmpty()>
c0017de3:	83 c4 10             	add    esp,0x10
c0017de6:	83 f0 01             	xor    eax,0x1
c0017de9:	84 c0                	test   al,al
c0017deb:	0f 84 43 01 00 00    	je     c0017f34 <ACPI::open(int, int, void*)+0x226>
c0017df1:	83 ec 0c             	sub    esp,0xc
c0017df4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017dfb:	50                   	push   eax
c0017dfc:	e8 7f 09 01 00       	call   c0028780 <LinkedList<Device>::getFirstElement()>
c0017e01:	83 c4 10             	add    esp,0x10
c0017e04:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017e0b:	83 ec 0c             	sub    esp,0xc
c0017e0e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e15:	50                   	push   eax
c0017e16:	e8 6d 09 01 00       	call   c0028788 <LinkedList<Device>::removeFirst()>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017e25:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017e2c:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017e33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017e37:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017e3d:	ba 09 00 00 00       	mov    edx,0x9
c0017e42:	fc                   	cld    
c0017e43:	89 c7                	mov    edi,eax
c0017e45:	89 de                	mov    esi,ebx
c0017e47:	89 d1                	mov    ecx,edx
c0017e49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017e4b:	83 ec 08             	sub    esp,0x8
c0017e4e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017e52:	50                   	push   eax
c0017e53:	83 ec 24             	sub    esp,0x24
c0017e56:	89 e0                	mov    eax,esp
c0017e58:	89 c3                	mov    ebx,eax
c0017e5a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017e5e:	ba 09 00 00 00       	mov    edx,0x9
c0017e63:	89 df                	mov    edi,ebx
c0017e65:	89 c6                	mov    esi,eax
c0017e67:	89 d1                	mov    ecx,edx
c0017e69:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017e6b:	e8 d6 a7 00 00       	call   c0022646 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017e70:	83 c4 30             	add    esp,0x30
c0017e73:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017e7a:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017e82:	0f 84 4b ff ff ff    	je     c0017dd3 <ACPI::open(int, int, void*)+0xc5>
c0017e88:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017e93:	83 ec 0c             	sub    esp,0xc
c0017e96:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017e9d:	e8 fa 76 ff ff       	call   c000f59c <malloc>
c0017ea2:	83 c4 10             	add    esp,0x10
c0017ea5:	89 c3                	mov    ebx,eax
c0017ea7:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0017eac:	83 ec 04             	sub    esp,0x4
c0017eaf:	50                   	push   eax
c0017eb0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017eb7:	53                   	push   ebx
c0017eb8:	e8 ad ab ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0017ebd:	83 c4 10             	add    esp,0x10
c0017ec0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0017ec7:	83 ec 0c             	sub    esp,0xc
c0017eca:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017ed1:	e8 66 ae ff ff       	call   c0012d3c <File::exists()>
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	84 c0                	test   al,al
c0017edb:	74 27                	je     c0017f04 <ACPI::open(int, int, void*)+0x1f6>
c0017edd:	83 ec 08             	sub    esp,0x8
c0017ee0:	6a 01                	push   0x1
c0017ee2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017ee9:	e8 21 4f 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	83 ec 08             	sub    esp,0x8
c0017ef4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017efb:	50                   	push   eax
c0017efc:	e8 39 51 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c0017f01:	83 c4 10             	add    esp,0x10
c0017f04:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0017f0c:	0f 84 c1 fe ff ff    	je     c0017dd3 <ACPI::open(int, int, void*)+0xc5>
c0017f12:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0017f19:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f1b:	83 c0 08             	add    eax,0x8
c0017f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f20:	83 ec 0c             	sub    esp,0xc
c0017f23:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017f2a:	ff d0                	call   eax
c0017f2c:	83 c4 10             	add    esp,0x10
c0017f2f:	e9 9f fe ff ff       	jmp    c0017dd3 <ACPI::open(int, int, void*)+0xc5>
c0017f34:	83 ec 0c             	sub    esp,0xc
c0017f37:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f3e:	50                   	push   eax
c0017f3f:	e8 1e 08 01 00       	call   c0028762 <LinkedList<Device>::~LinkedList()>
c0017f44:	83 c4 10             	add    esp,0x10
c0017f47:	8b 1d 88 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d588
c0017f4d:	83 ec 08             	sub    esp,0x8
c0017f50:	6a 01                	push   0x1
c0017f52:	68 9f ae 02 c0       	push   0xc002ae9f
c0017f57:	e8 b3 4e 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c0017f5c:	83 c4 10             	add    esp,0x10
c0017f5f:	83 ec 08             	sub    esp,0x8
c0017f62:	53                   	push   ebx
c0017f63:	50                   	push   eax
c0017f64:	e8 d1 50 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c0017f69:	83 c4 10             	add    esp,0x10
c0017f6c:	8b 1d 88 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d588
c0017f72:	83 ec 08             	sub    esp,0x8
c0017f75:	6a 01                	push   0x1
c0017f77:	68 bc ae 02 c0       	push   0xc002aebc
c0017f7c:	e8 8e 4e 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	83 ec 08             	sub    esp,0x8
c0017f87:	53                   	push   ebx
c0017f88:	50                   	push   eax
c0017f89:	e8 ac 50 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c0017f8e:	83 c4 10             	add    esp,0x10
c0017f91:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017f96:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017f9c:	83 e0 04             	and    eax,0x4
c0017f9f:	84 c0                	test   al,al
c0017fa1:	0f 84 0d 01 00 00    	je     c00180b4 <ACPI::open(int, int, void*)+0x3a6>
c0017fa7:	83 ec 0c             	sub    esp,0xc
c0017faa:	68 d9 ae 02 c0       	push   0xc002aed9
c0017faf:	e8 42 76 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017fb4:	83 c4 10             	add    esp,0x10
c0017fb7:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0017fc2:	83 ec 0c             	sub    esp,0xc
c0017fc5:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0017fcc:	e8 cb 75 ff ff       	call   c000f59c <malloc>
c0017fd1:	83 c4 10             	add    esp,0x10
c0017fd4:	89 c3                	mov    ebx,eax
c0017fd6:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0017fdb:	83 ec 04             	sub    esp,0x4
c0017fde:	50                   	push   eax
c0017fdf:	68 f6 ae 02 c0       	push   0xc002aef6
c0017fe4:	53                   	push   ebx
c0017fe5:	e8 80 aa ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0017fea:	83 c4 10             	add    esp,0x10
c0017fed:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0017ff4:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0017ffc:	74 1a                	je     c0018018 <ACPI::open(int, int, void*)+0x30a>
c0017ffe:	83 ec 0c             	sub    esp,0xc
c0018001:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018008:	e8 2f ad ff ff       	call   c0012d3c <File::exists()>
c001800d:	83 c4 10             	add    esp,0x10
c0018010:	84 c0                	test   al,al
c0018012:	74 04                	je     c0018018 <ACPI::open(int, int, void*)+0x30a>
c0018014:	b0 01                	mov    al,0x1
c0018016:	eb 02                	jmp    c001801a <ACPI::open(int, int, void*)+0x30c>
c0018018:	b0 00                	mov    al,0x0
c001801a:	84 c0                	test   al,al
c001801c:	74 25                	je     c0018043 <ACPI::open(int, int, void*)+0x335>
c001801e:	83 ec 08             	sub    esp,0x8
c0018021:	6a 01                	push   0x1
c0018023:	68 f6 ae 02 c0       	push   0xc002aef6
c0018028:	e8 e2 4d 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c001802d:	83 c4 10             	add    esp,0x10
c0018030:	83 ec 08             	sub    esp,0x8
c0018033:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001803a:	50                   	push   eax
c001803b:	e8 fa 4f 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001804b:	74 27                	je     c0018074 <ACPI::open(int, int, void*)+0x366>
c001804d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018055:	74 1d                	je     c0018074 <ACPI::open(int, int, void*)+0x366>
c0018057:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001805e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018060:	83 c0 08             	add    eax,0x8
c0018063:	8b 00                	mov    eax,DWORD PTR [eax]
c0018065:	83 ec 0c             	sub    esp,0xc
c0018068:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001806f:	ff d0                	call   eax
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	a1 48 fe 02 c0       	mov    eax,ds:0xc002fe48
c0018079:	83 ec 08             	sub    esp,0x8
c001807c:	68 13 af 02 c0       	push   0xc002af13
c0018081:	50                   	push   eax
c0018082:	e8 43 f3 ff ff       	call   c00173ca <findDataTable(unsigned char*, char*)>
c0018087:	83 c4 10             	add    esp,0x10
c001808a:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018091:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018099:	74 19                	je     c00180b4 <ACPI::open(int, int, void*)+0x3a6>
c001809b:	83 ec 08             	sub    esp,0x8
c001809e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00180a5:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00180ac:	e8 fd fb ff ff       	call   c0017cae <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00180b1:	83 c4 10             	add    esp,0x10
c00180b4:	b8 00 00 00 00       	mov    eax,0x0
c00180b9:	81 c4 60 01 00 00    	add    esp,0x160
c00180bf:	5b                   	pop    ebx
c00180c0:	5e                   	pop    esi
c00180c1:	5f                   	pop    edi
c00180c2:	c3                   	ret    
c00180c3:	90                   	nop

c00180c4 <CPU::close(int, int, void*)>:
c00180c4:	31 c0                	xor    eax,eax
c00180c6:	c3                   	ret    
c00180c7:	90                   	nop

c00180c8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00180c8:	55                   	push   ebp
c00180c9:	57                   	push   edi
c00180ca:	56                   	push   esi
c00180cb:	53                   	push   ebx
c00180cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00180d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180d4:	89 ce                	mov    esi,ecx
c00180d6:	89 d5                	mov    ebp,edx
c00180d8:	80 f9 04             	cmp    cl,0x4
c00180db:	75 28                	jne    c0018105 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00180dd:	8d 42 f9             	lea    eax,[edx-0x7]
c00180e0:	3c 03                	cmp    al,0x3
c00180e2:	0f 86 63 01 00 00    	jbe    c001824b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00180e8:	80 fa 03             	cmp    dl,0x3
c00180eb:	0f 84 5a 01 00 00    	je     c001824b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00180f1:	8d 7a f2             	lea    edi,[edx-0xe]
c00180f4:	b8 b0 c9 02 c0       	mov    eax,0xc002c9b0
c00180f9:	89 fb                	mov    ebx,edi
c00180fb:	80 fb 01             	cmp    bl,0x1
c00180fe:	77 4e                	ja     c001814e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018100:	e9 52 01 00 00       	jmp    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018105:	80 f9 05             	cmp    cl,0x5
c0018108:	75 4d                	jne    c0018157 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001810a:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c001810f:	80 fa 03             	cmp    dl,0x3
c0018112:	0f 86 3f 01 00 00    	jbe    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018118:	8d 7a fa             	lea    edi,[edx-0x6]
c001811b:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c0018120:	89 fb                	mov    ebx,edi
c0018122:	80 fb 01             	cmp    bl,0x1
c0018125:	0f 86 2c 01 00 00    	jbe    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001812b:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c0018130:	80 fa 08             	cmp    dl,0x8
c0018133:	0f 84 1e 01 00 00    	je     c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018139:	89 d7                	mov    edi,edx
c001813b:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c0018140:	83 e7 fb             	and    edi,0xfffffffb
c0018143:	89 fb                	mov    ebx,edi
c0018145:	80 fb 09             	cmp    bl,0x9
c0018148:	0f 84 09 01 00 00    	je     c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001814e:	31 c0                	xor    eax,eax
c0018150:	89 eb                	mov    ebx,ebp
c0018152:	0f b6 fb             	movzx  edi,bl
c0018155:	eb 30                	jmp    c0018187 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018157:	31 c0                	xor    eax,eax
c0018159:	80 f9 06             	cmp    cl,0x6
c001815c:	75 f2                	jne    c0018150 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001815e:	80 fa 0a             	cmp    dl,0xa
c0018161:	77 ed                	ja     c0018150 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018163:	bf de 05 00 00       	mov    edi,0x5de
c0018168:	0f a3 d7             	bt     edi,edx
c001816b:	73 e3                	jae    c0018150 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001816d:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c0018172:	e9 e0 00 00 00       	jmp    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018177:	39 c7                	cmp    edi,eax
c0018179:	0f 84 d3 00 00 00    	je     c0018252 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001817f:	40                   	inc    eax
c0018180:	3d d0 00 00 00       	cmp    eax,0xd0
c0018185:	74 09                	je     c0018190 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018187:	89 f3                	mov    ebx,esi
c0018189:	80 fb 0f             	cmp    bl,0xf
c001818c:	75 f1                	jne    c001817f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001818e:	eb e7                	jmp    c0018177 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018190:	80 f9 10             	cmp    cl,0x10
c0018193:	75 14                	jne    c00181a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018195:	8d 42 fc             	lea    eax,[edx-0x4]
c0018198:	83 e0 fb             	and    eax,0xfffffffb
c001819b:	3c 02                	cmp    al,0x2
c001819d:	76 34                	jbe    c00181d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001819f:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c00181a4:	80 fa 02             	cmp    dl,0x2
c00181a7:	eb 24                	jmp    c00181cd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00181a9:	80 f9 11             	cmp    cl,0x11
c00181ac:	75 13                	jne    c00181c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00181ae:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c00181b3:	80 fa 03             	cmp    dl,0x3
c00181b6:	0f 85 9b 00 00 00    	jne    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181bc:	e9 91 00 00 00       	jmp    c0018252 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00181c1:	80 f9 12             	cmp    cl,0x12
c00181c4:	75 14                	jne    c00181da <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00181c6:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c00181cb:	fe ca                	dec    dl
c00181cd:	0f 85 84 00 00 00    	jne    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181d3:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c00181d8:	eb 7d                	jmp    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181da:	80 f9 14             	cmp    cl,0x14
c00181dd:	75 12                	jne    c00181f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00181df:	4a                   	dec    edx
c00181e0:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c00181e5:	80 fa 01             	cmp    dl,0x1
c00181e8:	77 6d                	ja     c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181ea:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c00181ef:	eb 66                	jmp    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181f1:	80 f9 15             	cmp    cl,0x15
c00181f4:	75 31                	jne    c0018227 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00181f6:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c00181fb:	80 fa 01             	cmp    dl,0x1
c00181fe:	74 57                	je     c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018200:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c0018205:	80 fa 13             	cmp    dl,0x13
c0018208:	76 0c                	jbe    c0018216 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001820a:	80 fa 30             	cmp    dl,0x30
c001820d:	75 48                	jne    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001820f:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c0018214:	eb 41                	jmp    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018216:	b9 04 00 09 00       	mov    ecx,0x90004
c001821b:	0f a3 d1             	bt     ecx,edx
c001821e:	73 37                	jae    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018220:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c0018225:	eb 30                	jmp    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018227:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c001822c:	80 f9 16             	cmp    cl,0x16
c001822f:	75 26                	jne    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018231:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c0018236:	84 d2                	test   dl,dl
c0018238:	74 1d                	je     c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001823a:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c001823f:	80 fa 30             	cmp    dl,0x30
c0018242:	75 13                	jne    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018244:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c0018249:	eb 0c                	jmp    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001824b:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c0018250:	eb 05                	jmp    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018252:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c0018257:	5b                   	pop    ebx
c0018258:	5e                   	pop    esi
c0018259:	5f                   	pop    edi
c001825a:	5d                   	pop    ebp
c001825b:	c3                   	ret    

c001825c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001825c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018260:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018264:	80 f9 04             	cmp    cl,0x4
c0018267:	75 6b                	jne    c00182d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018269:	b8 00 c8 02 c0       	mov    eax,0xc002c800
c001826e:	80 fa 01             	cmp    dl,0x1
c0018271:	0f 86 92 02 00 00    	jbe    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018277:	b8 10 c8 02 c0       	mov    eax,0xc002c810
c001827c:	80 fa 02             	cmp    dl,0x2
c001827f:	0f 84 84 02 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018285:	b8 20 c8 02 c0       	mov    eax,0xc002c820
c001828a:	80 fa 03             	cmp    dl,0x3
c001828d:	0f 84 76 02 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018293:	b8 30 c8 02 c0       	mov    eax,0xc002c830
c0018298:	80 fa 04             	cmp    dl,0x4
c001829b:	0f 84 68 02 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182a1:	b8 40 c8 02 c0       	mov    eax,0xc002c840
c00182a6:	80 fa 05             	cmp    dl,0x5
c00182a9:	0f 84 5a 02 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182af:	b8 20 c8 02 c0       	mov    eax,0xc002c820
c00182b4:	80 fa 07             	cmp    dl,0x7
c00182b7:	0f 84 4c 02 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182bd:	83 ea 08             	sub    edx,0x8
c00182c0:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c00182c5:	80 fa 01             	cmp    dl,0x1
c00182c8:	0f 87 3b 02 00 00    	ja     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182ce:	b8 50 c8 02 c0       	mov    eax,0xc002c850
c00182d3:	c3                   	ret    
c00182d4:	80 f9 05             	cmp    cl,0x5
c00182d7:	75 45                	jne    c001831e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00182d9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00182dc:	b8 60 c8 02 c0       	mov    eax,0xc002c860
c00182e1:	80 f9 02             	cmp    cl,0x2
c00182e4:	0f 86 1f 02 00 00    	jbe    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182ea:	80 fa 04             	cmp    dl,0x4
c00182ed:	0f 84 f3 01 00 00    	je     c00184e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00182f3:	80 fa 07             	cmp    dl,0x7
c00182f6:	0f 84 0d 02 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182fc:	b8 70 c8 02 c0       	mov    eax,0xc002c870
c0018301:	80 fa 08             	cmp    dl,0x8
c0018304:	0f 84 ff 01 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001830a:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c001830f:	80 fa 09             	cmp    dl,0x9
c0018312:	0f 85 f1 01 00 00    	jne    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018318:	b8 80 c8 02 c0       	mov    eax,0xc002c880
c001831d:	c3                   	ret    
c001831e:	80 f9 06             	cmp    cl,0x6
c0018321:	0f 85 85 01 00 00    	jne    c00184ac <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018327:	b8 90 c8 02 c0       	mov    eax,0xc002c890
c001832c:	80 fa 01             	cmp    dl,0x1
c001832f:	0f 84 d4 01 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018335:	8d 42 fb             	lea    eax,[edx-0x5]
c0018338:	3c 01                	cmp    al,0x1
c001833a:	0f 86 ac 01 00 00    	jbe    c00184ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018340:	80 fa 03             	cmp    dl,0x3
c0018343:	0f 84 a3 01 00 00    	je     c00184ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018349:	8d 4a f9             	lea    ecx,[edx-0x7]
c001834c:	b8 b0 c8 02 c0       	mov    eax,0xc002c8b0
c0018351:	80 f9 01             	cmp    cl,0x1
c0018354:	0f 86 af 01 00 00    	jbe    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001835a:	80 fa 09             	cmp    dl,0x9
c001835d:	0f 84 8f 01 00 00    	je     c00184f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018363:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018366:	80 f9 01             	cmp    cl,0x1
c0018369:	0f 86 9a 01 00 00    	jbe    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001836f:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c0018374:	80 fa 0d             	cmp    dl,0xd
c0018377:	0f 84 8c 01 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001837d:	b8 d0 c8 02 c0       	mov    eax,0xc002c8d0
c0018382:	80 fa 0e             	cmp    dl,0xe
c0018385:	0f 84 7e 01 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001838b:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c0018390:	80 fa 0f             	cmp    dl,0xf
c0018393:	0f 84 70 01 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018399:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c001839e:	80 fa 15             	cmp    dl,0x15
c00183a1:	0f 84 62 01 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00183aa:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c00183af:	80 f9 01             	cmp    cl,0x1
c00183b2:	0f 86 51 01 00 00    	jbe    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183b8:	80 fa 1a             	cmp    dl,0x1a
c00183bb:	0f 84 37 01 00 00    	je     c00184f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00183c1:	80 fa 1c             	cmp    dl,0x1c
c00183c4:	0f 84 34 01 00 00    	je     c00184fe <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00183ca:	80 fa 1d             	cmp    dl,0x1d
c00183cd:	0f 84 36 01 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183d3:	b8 10 c9 02 c0       	mov    eax,0xc002c910
c00183d8:	80 fa 25             	cmp    dl,0x25
c00183db:	0f 84 28 01 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183e1:	8d 4a da             	lea    ecx,[edx-0x26]
c00183e4:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c00183e9:	80 f9 01             	cmp    cl,0x1
c00183ec:	0f 86 17 01 00 00    	jbe    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183f2:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c00183f7:	80 fa 2a             	cmp    dl,0x2a
c00183fa:	0f 84 09 01 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018400:	b8 10 c9 02 c0       	mov    eax,0xc002c910
c0018405:	80 fa 2c             	cmp    dl,0x2c
c0018408:	0f 84 fb 00 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001840e:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c0018413:	80 fa 2d             	cmp    dl,0x2d
c0018416:	0f 84 ed 00 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001841c:	b8 f0 c8 02 c0       	mov    eax,0xc002c8f0
c0018421:	80 fa 2e             	cmp    dl,0x2e
c0018424:	0f 84 df 00 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001842a:	b8 10 c9 02 c0       	mov    eax,0xc002c910
c001842f:	80 fa 2f             	cmp    dl,0x2f
c0018432:	0f 84 d1 00 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018438:	8d 4a cb             	lea    ecx,[edx-0x35]
c001843b:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c0018440:	80 f9 01             	cmp    cl,0x1
c0018443:	0f 86 c0 00 00 00    	jbe    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018449:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c001844e:	80 fa 37             	cmp    dl,0x37
c0018451:	0f 84 b2 00 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018457:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c001845c:	80 fa 3a             	cmp    dl,0x3a
c001845f:	0f 84 a4 00 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018465:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c001846a:	80 fa 3c             	cmp    dl,0x3c
c001846d:	0f 84 96 00 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018473:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c0018478:	80 fa 3d             	cmp    dl,0x3d
c001847b:	0f 84 88 00 00 00    	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018481:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c0018486:	80 fa 3e             	cmp    dl,0x3e
c0018489:	74 7e                	je     c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848b:	8d 42 bb             	lea    eax,[edx-0x45]
c001848e:	3c 01                	cmp    al,0x1
c0018490:	76 72                	jbe    c0018504 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018492:	80 fa 3f             	cmp    dl,0x3f
c0018495:	74 6d                	je     c0018504 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018497:	80 fa 4a             	cmp    dl,0x4a
c001849a:	74 0a                	je     c00184a6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001849c:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c00184a1:	80 fa 4d             	cmp    dl,0x4d
c00184a4:	75 63                	jne    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a6:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c00184ab:	c3                   	ret    
c00184ac:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c00184b1:	80 f9 0b             	cmp    cl,0xb
c00184b4:	75 0a                	jne    c00184c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00184b6:	fe ca                	dec    dl
c00184b8:	75 4f                	jne    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ba:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c00184bf:	c3                   	ret    
c00184c0:	80 f9 0f             	cmp    cl,0xf
c00184c3:	75 44                	jne    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c5:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c00184ca:	80 fa 02             	cmp    dl,0x2
c00184cd:	76 3a                	jbe    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184cf:	8d 42 fd             	lea    eax,[edx-0x3]
c00184d2:	3c 01                	cmp    al,0x1
c00184d4:	76 0a                	jbe    c00184e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00184d6:	b8 99 b0 02 c0       	mov    eax,0xc002b099
c00184db:	80 fa 06             	cmp    dl,0x6
c00184de:	75 29                	jne    c0018509 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e0:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c00184e5:	c3                   	ret    
c00184e6:	b8 70 c8 02 c0       	mov    eax,0xc002c870
c00184eb:	c3                   	ret    
c00184ec:	b8 a0 c8 02 c0       	mov    eax,0xc002c8a0
c00184f1:	c3                   	ret    
c00184f2:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c00184f7:	c3                   	ret    
c00184f8:	b8 f0 c8 02 c0       	mov    eax,0xc002c8f0
c00184fd:	c3                   	ret    
c00184fe:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c0018503:	c3                   	ret    
c0018504:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c0018509:	c3                   	ret    

c001850a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001850a:	60                   	pusha  
c001850b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001850f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018517:	9c                   	pushf  
c0018518:	fa                   	cli    
c0018519:	0f 09                	wbinvd 
c001851b:	0f 30                	wrmsr  
c001851d:	9d                   	popf   
c001851e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018522:	89 02                	mov    DWORD PTR [edx],eax
c0018524:	61                   	popa   
c0018525:	c3                   	ret    

c0018526 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018526:	60                   	pusha  
c0018527:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001852b:	9c                   	pushf  
c001852c:	fa                   	cli    
c001852d:	0f 09                	wbinvd 
c001852f:	31 c0                	xor    eax,eax
c0018531:	31 d2                	xor    edx,edx
c0018533:	0f 32                	rdmsr  
c0018535:	9d                   	popf   
c0018536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001853a:	89 02                	mov    DWORD PTR [edx],eax
c001853c:	61                   	popa   
c001853d:	c3                   	ret    

c001853e <CPU::AMD_K6_writeback(int, int, int)>:
c001853e:	56                   	push   esi
c001853f:	53                   	push   ebx
c0018540:	83 ec 10             	sub    esp,0x10
c0018543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018547:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001854c:	75 5d                	jne    c00185ab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001854e:	83 f8 08             	cmp    eax,0x8
c0018551:	75 09                	jne    c001855c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018553:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018558:	7e 13                	jle    c001856d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001855a:	eb 30                	jmp    c001858c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001855c:	83 f8 06             	cmp    eax,0x6
c001855f:	7c 4a                	jl     c00185ab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018561:	83 f8 07             	cmp    eax,0x7
c0018564:	7e 07                	jle    c001856d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018566:	83 f8 09             	cmp    eax,0x9
c0018569:	74 21                	je     c001858c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001856b:	eb 3e                	jmp    c00185ab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001856d:	89 e6                	mov    esi,esp
c001856f:	8b 1d c8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5c8
c0018575:	56                   	push   esi
c0018576:	c1 eb 15             	shr    ebx,0x15
c0018579:	68 82 00 00 c0       	push   0xc0000082
c001857e:	83 e3 7e             	and    ebx,0x7e
c0018581:	e8 a0 ff ff ff       	call   c0018526 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018586:	56                   	push   esi
c0018587:	6a 00                	push   0x0
c0018589:	53                   	push   ebx
c001858a:	eb 12                	jmp    c001859e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001858c:	89 e3                	mov    ebx,esp
c001858e:	53                   	push   ebx
c001858f:	68 82 00 00 c0       	push   0xc0000082
c0018594:	e8 8d ff ff ff       	call   c0018526 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018599:	53                   	push   ebx
c001859a:	6a 00                	push   0x0
c001859c:	6a 00                	push   0x0
c001859e:	68 82 00 00 c0       	push   0xc0000082
c00185a3:	e8 62 ff ff ff       	call   c001850a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00185a8:	83 c4 18             	add    esp,0x18
c00185ab:	83 c4 10             	add    esp,0x10
c00185ae:	5b                   	pop    ebx
c00185af:	5e                   	pop    esi
c00185b0:	c3                   	ret    
c00185b1:	90                   	nop

c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00185b2:	55                   	push   ebp
c00185b3:	57                   	push   edi
c00185b4:	56                   	push   esi
c00185b5:	53                   	push   ebx
c00185b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185ba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00185be:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00185c2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00185c6:	39 05 a0 ca 02 c0    	cmp    DWORD PTR ds:0xc002caa0,eax
c00185cc:	75 23                	jne    c00185f1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00185ce:	a1 ac 00 03 c0       	mov    eax,ds:0xc00300ac
c00185d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185d7:	89 06                	mov    DWORD PTR [esi],eax
c00185d9:	a1 a8 00 03 c0       	mov    eax,ds:0xc00300a8
c00185de:	89 07                	mov    DWORD PTR [edi],eax
c00185e0:	a1 a4 00 03 c0       	mov    eax,ds:0xc00300a4
c00185e5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00185e8:	a1 a0 00 03 c0       	mov    eax,ds:0xc00300a0
c00185ed:	89 02                	mov    DWORD PTR [edx],eax
c00185ef:	eb 3f                	jmp    c0018630 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00185f1:	31 c9                	xor    ecx,ecx
c00185f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185f7:	0f a2                	cpuid  
c00185f9:	89 06                	mov    DWORD PTR [esi],eax
c00185fb:	89 1f                	mov    DWORD PTR [edi],ebx
c00185fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018601:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018604:	89 10                	mov    DWORD PTR [eax],edx
c0018606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001860a:	a3 a0 ca 02 c0       	mov    ds:0xc002caa0,eax
c001860f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018611:	a3 ac 00 03 c0       	mov    ds:0xc00300ac,eax
c0018616:	8b 07                	mov    eax,DWORD PTR [edi]
c0018618:	a3 a8 00 03 c0       	mov    ds:0xc00300a8,eax
c001861d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018620:	a3 a4 00 03 c0       	mov    ds:0xc00300a4,eax
c0018625:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018629:	8b 00                	mov    eax,DWORD PTR [eax]
c001862b:	a3 a0 00 03 c0       	mov    ds:0xc00300a0,eax
c0018630:	5b                   	pop    ebx
c0018631:	5e                   	pop    esi
c0018632:	5f                   	pop    edi
c0018633:	5d                   	pop    ebp
c0018634:	c3                   	ret    
c0018635:	90                   	nop

c0018636 <CPU::cpuidCheckEDX(unsigned int)>:
c0018636:	83 ec 10             	sub    esp,0x10
c0018639:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001863d:	50                   	push   eax
c001863e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018642:	50                   	push   eax
c0018643:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018647:	50                   	push   eax
c0018648:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001864c:	50                   	push   eax
c001864d:	6a 01                	push   0x1
c001864f:	e8 5e ff ff ff       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018658:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001865c:	0f 95 c0             	setne  al
c001865f:	83 c4 24             	add    esp,0x24
c0018662:	c3                   	ret    
c0018663:	90                   	nop

c0018664 <CPU::cpuidCheckECX(unsigned int)>:
c0018664:	83 ec 10             	sub    esp,0x10
c0018667:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001866b:	50                   	push   eax
c001866c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018670:	50                   	push   eax
c0018671:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018675:	50                   	push   eax
c0018676:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001867a:	50                   	push   eax
c001867b:	6a 01                	push   0x1
c001867d:	e8 30 ff ff ff       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018682:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018686:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001868a:	0f 95 c0             	setne  al
c001868d:	83 c4 24             	add    esp,0x24
c0018690:	c3                   	ret    
c0018691:	90                   	nop

c0018692 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018692:	83 ec 10             	sub    esp,0x10
c0018695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018699:	50                   	push   eax
c001869a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001869e:	50                   	push   eax
c001869f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186a3:	50                   	push   eax
c00186a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186a8:	50                   	push   eax
c00186a9:	6a 07                	push   0x7
c00186ab:	e8 02 ff ff ff       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186b4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00186b8:	0f 95 c0             	setne  al
c00186bb:	83 c4 24             	add    esp,0x24
c00186be:	c3                   	ret    
c00186bf:	90                   	nop

c00186c0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00186c0:	83 ec 10             	sub    esp,0x10
c00186c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186c7:	50                   	push   eax
c00186c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186cc:	50                   	push   eax
c00186cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186d1:	50                   	push   eax
c00186d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186d6:	50                   	push   eax
c00186d7:	6a 07                	push   0x7
c00186d9:	e8 d4 fe ff ff       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186e2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00186e6:	0f 95 c0             	setne  al
c00186e9:	83 c4 24             	add    esp,0x24
c00186ec:	c3                   	ret    
c00186ed:	90                   	nop

c00186ee <CPU::CPU()>:
c00186ee:	83 ec 0c             	sub    esp,0xc
c00186f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186f5:	83 ec 08             	sub    esp,0x8
c00186f8:	68 99 b0 02 c0       	push   0xc002b099
c00186fd:	50                   	push   eax
c00186fe:	e8 45 b4 ff ff       	call   c0013b48 <Device::Device(char const*)>
c0018703:	83 c4 10             	add    esp,0x10
c0018706:	ba 70 b1 02 c0       	mov    edx,0xc002b170
c001870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001870f:	89 10                	mov    DWORD PTR [eax],edx
c0018711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018715:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001871f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018723:	05 78 01 00 00       	add    eax,0x178
c0018728:	83 ec 0c             	sub    esp,0xc
c001872b:	50                   	push   eax
c001872c:	e8 9b 66 ff ff       	call   c000edcc <GDT::GDT()>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018738:	05 7c 09 00 00       	add    eax,0x97c
c001873d:	83 ec 0c             	sub    esp,0xc
c0018740:	50                   	push   eax
c0018741:	e8 d6 68 ff ff       	call   c000f01c <IDT::IDT()>
c0018746:	83 c4 10             	add    esp,0x10
c0018749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001874d:	05 7c 11 00 00       	add    eax,0x117c
c0018752:	83 ec 0c             	sub    esp,0xc
c0018755:	50                   	push   eax
c0018756:	e8 8d 83 ff ff       	call   c0010ae8 <TSS::TSS()>
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018762:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001876d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018777:	90                   	nop
c0018778:	83 c4 0c             	add    esp,0xc
c001877b:	c3                   	ret    

c001877c <CPU::displayFeatures()>:
c001877c:	c3                   	ret    
c001877d:	90                   	nop

c001877e <CPU::detectFeatures()>:
c001877e:	55                   	push   ebp
c001877f:	57                   	push   edi
c0018780:	56                   	push   esi
c0018781:	53                   	push   ebx
c0018782:	83 ec 50             	sub    esp,0x50
c0018785:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018789:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018793:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001879a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00187a0:	6a 0d                	push   0xd
c00187a2:	6a 00                	push   0x0
c00187a4:	55                   	push   ebp
c00187a5:	e8 a6 7f fe ff       	call   c0000750 <memset>
c00187aa:	83 c4 10             	add    esp,0x10
c00187ad:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00187b2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00187b9:	0f 84 22 09 00 00    	je     c00190e1 <CPU::detectFeatures()+0x963>
c00187bf:	83 ec 0c             	sub    esp,0xc
c00187c2:	89 ef                	mov    edi,ebp
c00187c4:	6a 10                	push   0x10
c00187c6:	e8 6b fe ff ff       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c00187cb:	83 e0 01             	and    eax,0x1
c00187ce:	8d 14 00             	lea    edx,[eax+eax*1]
c00187d1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187d7:	83 e0 fd             	and    eax,0xfffffffd
c00187da:	09 d0                	or     eax,edx
c00187dc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00187e2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00187e9:	e8 48 fe ff ff       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c00187ee:	83 e0 01             	and    eax,0x1
c00187f1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00187f8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187fe:	83 e0 fb             	and    eax,0xfffffffb
c0018801:	09 d0                	or     eax,edx
c0018803:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018809:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018810:	e8 21 fe ff ff       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c0018815:	83 e0 01             	and    eax,0x1
c0018818:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001881f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018825:	83 e0 f7             	and    eax,0xfffffff7
c0018828:	09 d0                	or     eax,edx
c001882a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018830:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018837:	e8 fa fd ff ff       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c001883c:	83 e0 01             	and    eax,0x1
c001883f:	c1 e0 04             	shl    eax,0x4
c0018842:	88 c2                	mov    dl,al
c0018844:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001884a:	83 e0 ef             	and    eax,0xffffffef
c001884d:	09 d0                	or     eax,edx
c001884f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018855:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001885c:	e8 d5 fd ff ff       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c0018861:	83 e0 01             	and    eax,0x1
c0018864:	c1 e0 05             	shl    eax,0x5
c0018867:	88 c2                	mov    dl,al
c0018869:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001886f:	83 e0 df             	and    eax,0xffffffdf
c0018872:	09 d0                	or     eax,edx
c0018874:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001887a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018881:	e8 b0 fd ff ff       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c0018886:	83 e0 01             	and    eax,0x1
c0018889:	8d 14 00             	lea    edx,[eax+eax*1]
c001888c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018892:	83 e0 fd             	and    eax,0xfffffffd
c0018895:	09 d0                	or     eax,edx
c0018897:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001889d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00188a4:	e8 8d fd ff ff       	call   c0018636 <CPU::cpuidCheckEDX(unsigned int)>
c00188a9:	83 e0 01             	and    eax,0x1
c00188ac:	c1 e0 06             	shl    eax,0x6
c00188af:	88 c2                	mov    dl,al
c00188b1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00188b7:	83 e0 bf             	and    eax,0xffffffbf
c00188ba:	09 d0                	or     eax,edx
c00188bc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00188c2:	58                   	pop    eax
c00188c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188c7:	50                   	push   eax
c00188c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188cc:	50                   	push   eax
c00188cd:	8d 74 24 28          	lea    esi,[esp+0x28]
c00188d1:	56                   	push   esi
c00188d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188d6:	50                   	push   eax
c00188d7:	6a 00                	push   0x0
c00188d9:	e8 d4 fc ff ff       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188de:	b8 04 00 00 00       	mov    eax,0x4
c00188e3:	89 c1                	mov    ecx,eax
c00188e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00188e7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00188ed:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00188f1:	89 c1                	mov    ecx,eax
c00188f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00188f5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00188fb:	8d 74 24 38          	lea    esi,[esp+0x38]
c00188ff:	89 c1                	mov    ecx,eax
c0018901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018903:	83 c4 18             	add    esp,0x18
c0018906:	68 44 af 02 c0       	push   0xc002af44
c001890b:	55                   	push   ebp
c001890c:	e8 87 7f fe ff       	call   c0000898 <strcmp>
c0018911:	83 c4 10             	add    esp,0x10
c0018914:	85 c0                	test   eax,eax
c0018916:	75 0f                	jne    c0018927 <CPU::detectFeatures()+0x1a9>
c0018918:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018922:	e9 22 02 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018927:	50                   	push   eax
c0018928:	50                   	push   eax
c0018929:	68 51 af 02 c0       	push   0xc002af51
c001892e:	55                   	push   ebp
c001892f:	e8 64 7f fe ff       	call   c0000898 <strcmp>
c0018934:	83 c4 10             	add    esp,0x10
c0018937:	85 c0                	test   eax,eax
c0018939:	74 dd                	je     c0018918 <CPU::detectFeatures()+0x19a>
c001893b:	50                   	push   eax
c001893c:	50                   	push   eax
c001893d:	68 5e af 02 c0       	push   0xc002af5e
c0018942:	55                   	push   ebp
c0018943:	e8 50 7f fe ff       	call   c0000898 <strcmp>
c0018948:	83 c4 10             	add    esp,0x10
c001894b:	85 c0                	test   eax,eax
c001894d:	74 2a                	je     c0018979 <CPU::detectFeatures()+0x1fb>
c001894f:	50                   	push   eax
c0018950:	50                   	push   eax
c0018951:	68 6b af 02 c0       	push   0xc002af6b
c0018956:	55                   	push   ebp
c0018957:	e8 3c 7f fe ff       	call   c0000898 <strcmp>
c001895c:	83 c4 10             	add    esp,0x10
c001895f:	85 c0                	test   eax,eax
c0018961:	74 16                	je     c0018979 <CPU::detectFeatures()+0x1fb>
c0018963:	50                   	push   eax
c0018964:	50                   	push   eax
c0018965:	68 78 af 02 c0       	push   0xc002af78
c001896a:	55                   	push   ebp
c001896b:	e8 28 7f fe ff       	call   c0000898 <strcmp>
c0018970:	83 c4 10             	add    esp,0x10
c0018973:	85 c0                	test   eax,eax
c0018975:	74 48                	je     c00189bf <CPU::detectFeatures()+0x241>
c0018977:	eb 0f                	jmp    c0018988 <CPU::detectFeatures()+0x20a>
c0018979:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018983:	e9 c1 01 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018988:	50                   	push   eax
c0018989:	50                   	push   eax
c001898a:	68 85 af 02 c0       	push   0xc002af85
c001898f:	55                   	push   ebp
c0018990:	e8 03 7f fe ff       	call   c0000898 <strcmp>
c0018995:	83 c4 10             	add    esp,0x10
c0018998:	85 c0                	test   eax,eax
c001899a:	74 23                	je     c00189bf <CPU::detectFeatures()+0x241>
c001899c:	57                   	push   edi
c001899d:	57                   	push   edi
c001899e:	68 92 af 02 c0       	push   0xc002af92
c00189a3:	55                   	push   ebp
c00189a4:	e8 ef 7e fe ff       	call   c0000898 <strcmp>
c00189a9:	83 c4 10             	add    esp,0x10
c00189ac:	85 c0                	test   eax,eax
c00189ae:	75 1e                	jne    c00189ce <CPU::detectFeatures()+0x250>
c00189b0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00189ba:	e9 8a 01 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c00189bf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00189c9:	e9 7b 01 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c00189ce:	56                   	push   esi
c00189cf:	56                   	push   esi
c00189d0:	68 9f af 02 c0       	push   0xc002af9f
c00189d5:	55                   	push   ebp
c00189d6:	e8 bd 7e fe ff       	call   c0000898 <strcmp>
c00189db:	83 c4 10             	add    esp,0x10
c00189de:	85 c0                	test   eax,eax
c00189e0:	75 0f                	jne    c00189f1 <CPU::detectFeatures()+0x273>
c00189e2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00189ec:	e9 58 01 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c00189f1:	51                   	push   ecx
c00189f2:	51                   	push   ecx
c00189f3:	68 5e af 02 c0       	push   0xc002af5e
c00189f8:	55                   	push   ebp
c00189f9:	e8 9a 7e fe ff       	call   c0000898 <strcmp>
c00189fe:	83 c4 10             	add    esp,0x10
c0018a01:	85 c0                	test   eax,eax
c0018a03:	75 0f                	jne    c0018a14 <CPU::detectFeatures()+0x296>
c0018a05:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018a0f:	e9 35 01 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018a14:	52                   	push   edx
c0018a15:	52                   	push   edx
c0018a16:	68 ac af 02 c0       	push   0xc002afac
c0018a1b:	55                   	push   ebp
c0018a1c:	e8 77 7e fe ff       	call   c0000898 <strcmp>
c0018a21:	83 c4 10             	add    esp,0x10
c0018a24:	85 c0                	test   eax,eax
c0018a26:	75 0f                	jne    c0018a37 <CPU::detectFeatures()+0x2b9>
c0018a28:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018a32:	e9 12 01 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018a37:	50                   	push   eax
c0018a38:	50                   	push   eax
c0018a39:	68 b9 af 02 c0       	push   0xc002afb9
c0018a3e:	55                   	push   ebp
c0018a3f:	e8 54 7e fe ff       	call   c0000898 <strcmp>
c0018a44:	83 c4 10             	add    esp,0x10
c0018a47:	85 c0                	test   eax,eax
c0018a49:	75 0f                	jne    c0018a5a <CPU::detectFeatures()+0x2dc>
c0018a4b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018a55:	e9 ef 00 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018a5a:	50                   	push   eax
c0018a5b:	50                   	push   eax
c0018a5c:	68 c6 af 02 c0       	push   0xc002afc6
c0018a61:	55                   	push   ebp
c0018a62:	e8 31 7e fe ff       	call   c0000898 <strcmp>
c0018a67:	83 c4 10             	add    esp,0x10
c0018a6a:	85 c0                	test   eax,eax
c0018a6c:	75 0f                	jne    c0018a7d <CPU::detectFeatures()+0x2ff>
c0018a6e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018a78:	e9 cc 00 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018a7d:	50                   	push   eax
c0018a7e:	50                   	push   eax
c0018a7f:	68 d3 af 02 c0       	push   0xc002afd3
c0018a84:	55                   	push   ebp
c0018a85:	e8 0e 7e fe ff       	call   c0000898 <strcmp>
c0018a8a:	83 c4 10             	add    esp,0x10
c0018a8d:	85 c0                	test   eax,eax
c0018a8f:	75 0f                	jne    c0018aa0 <CPU::detectFeatures()+0x322>
c0018a91:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018a9b:	e9 a9 00 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018aa0:	50                   	push   eax
c0018aa1:	50                   	push   eax
c0018aa2:	68 e0 af 02 c0       	push   0xc002afe0
c0018aa7:	55                   	push   ebp
c0018aa8:	e8 eb 7d fe ff       	call   c0000898 <strcmp>
c0018aad:	83 c4 10             	add    esp,0x10
c0018ab0:	85 c0                	test   eax,eax
c0018ab2:	75 0f                	jne    c0018ac3 <CPU::detectFeatures()+0x345>
c0018ab4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018abe:	e9 86 00 00 00       	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018ac3:	50                   	push   eax
c0018ac4:	50                   	push   eax
c0018ac5:	68 ed af 02 c0       	push   0xc002afed
c0018aca:	55                   	push   ebp
c0018acb:	e8 c8 7d fe ff       	call   c0000898 <strcmp>
c0018ad0:	83 c4 10             	add    esp,0x10
c0018ad3:	85 c0                	test   eax,eax
c0018ad5:	75 0c                	jne    c0018ae3 <CPU::detectFeatures()+0x365>
c0018ad7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018ae1:	eb 66                	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018ae3:	50                   	push   eax
c0018ae4:	50                   	push   eax
c0018ae5:	68 fa af 02 c0       	push   0xc002affa
c0018aea:	55                   	push   ebp
c0018aeb:	e8 a8 7d fe ff       	call   c0000898 <strcmp>
c0018af0:	83 c4 10             	add    esp,0x10
c0018af3:	85 c0                	test   eax,eax
c0018af5:	75 0c                	jne    c0018b03 <CPU::detectFeatures()+0x385>
c0018af7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018b01:	eb 46                	jmp    c0018b49 <CPU::detectFeatures()+0x3cb>
c0018b03:	57                   	push   edi
c0018b04:	57                   	push   edi
c0018b05:	68 07 b0 02 c0       	push   0xc002b007
c0018b0a:	55                   	push   ebp
c0018b0b:	e8 88 7d fe ff       	call   c0000898 <strcmp>
c0018b10:	83 c4 10             	add    esp,0x10
c0018b13:	85 c0                	test   eax,eax
c0018b15:	74 e0                	je     c0018af7 <CPU::detectFeatures()+0x379>
c0018b17:	56                   	push   esi
c0018b18:	56                   	push   esi
c0018b19:	68 14 b0 02 c0       	push   0xc002b014
c0018b1e:	55                   	push   ebp
c0018b1f:	e8 74 7d fe ff       	call   c0000898 <strcmp>
c0018b24:	83 c4 10             	add    esp,0x10
c0018b27:	85 c0                	test   eax,eax
c0018b29:	74 cc                	je     c0018af7 <CPU::detectFeatures()+0x379>
c0018b2b:	51                   	push   ecx
c0018b2c:	51                   	push   ecx
c0018b2d:	68 21 b0 02 c0       	push   0xc002b021
c0018b32:	55                   	push   ebp
c0018b33:	e8 60 7d fe ff       	call   c0000898 <strcmp>
c0018b38:	83 c4 10             	add    esp,0x10
c0018b3b:	85 c0                	test   eax,eax
c0018b3d:	74 b8                	je     c0018af7 <CPU::detectFeatures()+0x379>
c0018b3f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018b49:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018b4e:	0f 86 be 00 00 00    	jbe    c0018c12 <CPU::detectFeatures()+0x494>
c0018b54:	83 ec 0c             	sub    esp,0xc
c0018b57:	68 80 00 00 00       	push   0x80
c0018b5c:	e8 31 fb ff ff       	call   c0018692 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018b61:	83 e0 01             	and    eax,0x1
c0018b64:	c1 e0 06             	shl    eax,0x6
c0018b67:	88 c2                	mov    dl,al
c0018b69:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b6f:	83 e0 bf             	and    eax,0xffffffbf
c0018b72:	09 d0                	or     eax,edx
c0018b74:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b7a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018b81:	e8 0c fb ff ff       	call   c0018692 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018b86:	83 e0 01             	and    eax,0x1
c0018b89:	c1 e0 04             	shl    eax,0x4
c0018b8c:	88 c2                	mov    dl,al
c0018b8e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018b94:	83 e0 ef             	and    eax,0xffffffef
c0018b97:	09 d0                	or     eax,edx
c0018b99:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018b9f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018ba6:	e8 e7 fa ff ff       	call   c0018692 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018bab:	c1 e0 07             	shl    eax,0x7
c0018bae:	88 c2                	mov    dl,al
c0018bb0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bb6:	83 e0 7f             	and    eax,0x7f
c0018bb9:	09 d0                	or     eax,edx
c0018bbb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bc1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018bc8:	e8 f3 fa ff ff       	call   c00186c0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018bcd:	83 e0 01             	and    eax,0x1
c0018bd0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018bd7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018bdd:	83 e0 f7             	and    eax,0xfffffff7
c0018be0:	09 d0                	or     eax,edx
c0018be2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018be8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018bef:	e8 cc fa ff ff       	call   c00186c0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018bf4:	83 c4 10             	add    esp,0x10
c0018bf7:	83 e0 01             	and    eax,0x1
c0018bfa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018c01:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c07:	83 e0 fb             	and    eax,0xfffffffb
c0018c0a:	09 d0                	or     eax,edx
c0018c0c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c12:	83 ec 0c             	sub    esp,0xc
c0018c15:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c19:	50                   	push   eax
c0018c1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c1e:	50                   	push   eax
c0018c1f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018c23:	56                   	push   esi
c0018c24:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c28:	50                   	push   eax
c0018c29:	6a 01                	push   0x1
c0018c2b:	e8 82 f9 ff ff       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c30:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018c34:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018c3a:	88 ca                	mov    dl,cl
c0018c3c:	83 e0 f0             	and    eax,0xfffffff0
c0018c3f:	83 e2 0f             	and    edx,0xf
c0018c42:	09 d0                	or     eax,edx
c0018c44:	88 ca                	mov    dl,cl
c0018c46:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018c4c:	c0 ea 04             	shr    dl,0x4
c0018c4f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018c53:	0f b6 c2             	movzx  eax,dl
c0018c56:	83 c4 20             	add    esp,0x20
c0018c59:	c1 e0 06             	shl    eax,0x6
c0018c5c:	89 c7                	mov    edi,eax
c0018c5e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c64:	66 25 3f c0          	and    ax,0xc03f
c0018c68:	09 f8                	or     eax,edi
c0018c6a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018c71:	89 c8                	mov    eax,ecx
c0018c73:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018c7a:	c1 e8 08             	shr    eax,0x8
c0018c7d:	83 e5 3f             	and    ebp,0x3f
c0018c80:	83 e0 0f             	and    eax,0xf
c0018c83:	89 c7                	mov    edi,eax
c0018c85:	c1 e7 06             	shl    edi,0x6
c0018c88:	09 ef                	or     edi,ebp
c0018c8a:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018c91:	89 fa                	mov    edx,edi
c0018c93:	83 e5 c0             	and    ebp,0xffffffc0
c0018c96:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018c9c:	88 c2                	mov    dl,al
c0018c9e:	c0 ea 02             	shr    dl,0x2
c0018ca1:	89 d7                	mov    edi,edx
c0018ca3:	09 ef                	or     edi,ebp
c0018ca5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018cab:	89 fa                	mov    edx,edi
c0018cad:	83 e5 cf             	and    ebp,0xffffffcf
c0018cb0:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018cb6:	89 cf                	mov    edi,ecx
c0018cb8:	c1 ef 0c             	shr    edi,0xc
c0018cbb:	83 e7 03             	and    edi,0x3
c0018cbe:	c1 e7 04             	shl    edi,0x4
c0018cc1:	09 ef                	or     edi,ebp
c0018cc3:	3c 06                	cmp    al,0x6
c0018cc5:	89 fa                	mov    edx,edi
c0018cc7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ccd:	74 04                	je     c0018cd3 <CPU::detectFeatures()+0x555>
c0018ccf:	3c 0f                	cmp    al,0xf
c0018cd1:	75 5c                	jne    c0018d2f <CPU::detectFeatures()+0x5b1>
c0018cd3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018cd7:	89 cf                	mov    edi,ecx
c0018cd9:	c1 ef 10             	shr    edi,0x10
c0018cdc:	c1 e7 04             	shl    edi,0x4
c0018cdf:	09 fa                	or     edx,edi
c0018ce1:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018ce7:	0f b6 d2             	movzx  edx,dl
c0018cea:	66 81 e7 3f c0       	and    di,0xc03f
c0018cef:	c1 e2 06             	shl    edx,0x6
c0018cf2:	09 fa                	or     edx,edi
c0018cf4:	3c 0f                	cmp    al,0xf
c0018cf6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018cfd:	75 30                	jne    c0018d2f <CPU::detectFeatures()+0x5b1>
c0018cff:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018d05:	c1 e9 14             	shr    ecx,0x14
c0018d08:	83 e0 3f             	and    eax,0x3f
c0018d0b:	83 c1 0f             	add    ecx,0xf
c0018d0e:	88 ca                	mov    dl,cl
c0018d10:	c0 e9 02             	shr    cl,0x2
c0018d13:	c1 e2 06             	shl    edx,0x6
c0018d16:	09 d0                	or     eax,edx
c0018d18:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018d1e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018d24:	83 e0 c0             	and    eax,0xffffffc0
c0018d27:	09 c1                	or     ecx,eax
c0018d29:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018d2f:	83 ec 0c             	sub    esp,0xc
c0018d32:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d39:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d3d:	50                   	push   eax
c0018d3e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018d42:	55                   	push   ebp
c0018d43:	56                   	push   esi
c0018d44:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018d48:	57                   	push   edi
c0018d49:	68 00 00 00 80       	push   0x80000000
c0018d4e:	e8 5f f8 ff ff       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d53:	83 c4 20             	add    esp,0x20
c0018d56:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018d5e:	76 22                	jbe    c0018d82 <CPU::detectFeatures()+0x604>
c0018d60:	83 ec 0c             	sub    esp,0xc
c0018d63:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d67:	50                   	push   eax
c0018d68:	55                   	push   ebp
c0018d69:	56                   	push   esi
c0018d6a:	57                   	push   edi
c0018d6b:	68 01 00 00 80       	push   0x80000001
c0018d70:	e8 3d f8 ff ff       	call   c00185b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d75:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018d7f:	83 c4 20             	add    esp,0x20
c0018d82:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018d88:	83 f8 01             	cmp    eax,0x1
c0018d8b:	75 6f                	jne    c0018dfc <CPU::detectFeatures()+0x67e>
c0018d8d:	51                   	push   ecx
c0018d8e:	51                   	push   ecx
c0018d8f:	68 2d b0 02 c0       	push   0xc002b02d
c0018d94:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018d98:	56                   	push   esi
c0018d99:	e8 6e 7a fe ff       	call   c000080c <strcpy>
c0018d9e:	5f                   	pop    edi
c0018d9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018da5:	5d                   	pop    ebp
c0018da6:	66 c1 e8 06          	shr    ax,0x6
c0018daa:	0f b6 c0             	movzx  eax,al
c0018dad:	50                   	push   eax
c0018dae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018db4:	c1 e8 0e             	shr    eax,0xe
c0018db7:	0f b6 c0             	movzx  eax,al
c0018dba:	50                   	push   eax
c0018dbb:	e8 9c f4 ff ff       	call   c001825c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018dc0:	5a                   	pop    edx
c0018dc1:	59                   	pop    ecx
c0018dc2:	50                   	push   eax
c0018dc3:	56                   	push   esi
c0018dc4:	e8 83 7b fe ff       	call   c000094c <strcat>
c0018dc9:	5f                   	pop    edi
c0018dca:	5d                   	pop    ebp
c0018dcb:	56                   	push   esi
c0018dcc:	53                   	push   ebx
c0018dcd:	e8 68 ad ff ff       	call   c0013b3a <Device::setName(char const*)>
c0018dd2:	58                   	pop    eax
c0018dd3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018dd9:	5a                   	pop    edx
c0018dda:	68 34 b0 02 c0       	push   0xc002b034
c0018ddf:	50                   	push   eax
c0018de0:	e8 b3 7a fe ff       	call   c0000898 <strcmp>
c0018de5:	83 c4 10             	add    esp,0x10
c0018de8:	85 c0                	test   eax,eax
c0018dea:	0f 85 71 03 00 00    	jne    c0019161 <CPU::detectFeatures()+0x9e3>
c0018df0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018df7:	e9 65 03 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x9e3>
c0018dfc:	83 f8 02             	cmp    eax,0x2
c0018dff:	0f 85 b5 00 00 00    	jne    c0018eba <CPU::detectFeatures()+0x73c>
c0018e05:	57                   	push   edi
c0018e06:	57                   	push   edi
c0018e07:	68 46 b0 02 c0       	push   0xc002b046
c0018e0c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e10:	56                   	push   esi
c0018e11:	e8 f6 79 fe ff       	call   c000080c <strcpy>
c0018e16:	5d                   	pop    ebp
c0018e17:	58                   	pop    eax
c0018e18:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e1e:	66 c1 e8 06          	shr    ax,0x6
c0018e22:	0f b6 c0             	movzx  eax,al
c0018e25:	50                   	push   eax
c0018e26:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e2c:	c1 e8 0e             	shr    eax,0xe
c0018e2f:	0f b6 c0             	movzx  eax,al
c0018e32:	50                   	push   eax
c0018e33:	e8 90 f2 ff ff       	call   c00180c8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018e38:	5a                   	pop    edx
c0018e39:	59                   	pop    ecx
c0018e3a:	50                   	push   eax
c0018e3b:	56                   	push   esi
c0018e3c:	e8 0b 7b fe ff       	call   c000094c <strcat>
c0018e41:	5f                   	pop    edi
c0018e42:	5d                   	pop    ebp
c0018e43:	56                   	push   esi
c0018e44:	53                   	push   ebx
c0018e45:	e8 f0 ac ff ff       	call   c0013b3a <Device::setName(char const*)>
c0018e4a:	58                   	pop    eax
c0018e4b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018e51:	5a                   	pop    edx
c0018e52:	68 4b b0 02 c0       	push   0xc002b04b
c0018e57:	50                   	push   eax
c0018e58:	e8 3b 7a fe ff       	call   c0000898 <strcmp>
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	85 c0                	test   eax,eax
c0018e62:	75 20                	jne    c0018e84 <CPU::detectFeatures()+0x706>
c0018e64:	8b 15 88 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d588
c0018e6a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018e70:	a8 01                	test   al,0x1
c0018e72:	74 10                	je     c0018e84 <CPU::detectFeatures()+0x706>
c0018e74:	83 e0 fe             	and    eax,0xfffffffe
c0018e77:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018e7d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018e84:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e8a:	c1 e8 0e             	shr    eax,0xe
c0018e8d:	3c 05                	cmp    al,0x5
c0018e8f:	0f 85 cc 02 00 00    	jne    c0019161 <CPU::detectFeatures()+0x9e3>
c0018e95:	56                   	push   esi
c0018e96:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e9c:	83 e0 0f             	and    eax,0xf
c0018e9f:	50                   	push   eax
c0018ea0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ea6:	66 c1 e8 06          	shr    ax,0x6
c0018eaa:	0f b6 c0             	movzx  eax,al
c0018ead:	50                   	push   eax
c0018eae:	6a 05                	push   0x5
c0018eb0:	e8 89 f6 ff ff       	call   c001853e <CPU::AMD_K6_writeback(int, int, int)>
c0018eb5:	e9 1f 02 00 00       	jmp    c00190d9 <CPU::detectFeatures()+0x95b>
c0018eba:	8d 50 fd             	lea    edx,[eax-0x3]
c0018ebd:	83 fa 01             	cmp    edx,0x1
c0018ec0:	76 09                	jbe    c0018ecb <CPU::detectFeatures()+0x74d>
c0018ec2:	83 f8 06             	cmp    eax,0x6
c0018ec5:	0f 85 91 01 00 00    	jne    c001905c <CPU::detectFeatures()+0x8de>
c0018ecb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ed1:	c1 ea 0e             	shr    edx,0xe
c0018ed4:	80 fa 05             	cmp    dl,0x5
c0018ed7:	75 7b                	jne    c0018f54 <CPU::detectFeatures()+0x7d6>
c0018ed9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018edf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018ee4:	66 81 fa 00 01       	cmp    dx,0x100
c0018ee9:	75 0c                	jne    c0018ef7 <CPU::detectFeatures()+0x779>
c0018eeb:	51                   	push   ecx
c0018eec:	51                   	push   ecx
c0018eed:	68 52 b0 02 c0       	push   0xc002b052
c0018ef2:	e9 dc 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018ef7:	66 81 fa 00 02       	cmp    dx,0x200
c0018efc:	75 0c                	jne    c0018f0a <CPU::detectFeatures()+0x78c>
c0018efe:	52                   	push   edx
c0018eff:	52                   	push   edx
c0018f00:	68 65 b0 02 c0       	push   0xc002b065
c0018f05:	e9 c9 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018f0a:	66 81 fa 40 02       	cmp    dx,0x240
c0018f0f:	75 0c                	jne    c0018f1d <CPU::detectFeatures()+0x79f>
c0018f11:	50                   	push   eax
c0018f12:	50                   	push   eax
c0018f13:	68 77 b0 02 c0       	push   0xc002b077
c0018f18:	e9 b6 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018f1d:	83 f8 06             	cmp    eax,0x6
c0018f20:	75 0c                	jne    c0018f2e <CPU::detectFeatures()+0x7b0>
c0018f22:	50                   	push   eax
c0018f23:	50                   	push   eax
c0018f24:	68 89 b0 02 c0       	push   0xc002b089
c0018f29:	e9 a5 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018f2e:	83 f8 04             	cmp    eax,0x4
c0018f31:	75 0c                	jne    c0018f3f <CPU::detectFeatures()+0x7c1>
c0018f33:	50                   	push   eax
c0018f34:	50                   	push   eax
c0018f35:	68 95 b0 02 c0       	push   0xc002b095
c0018f3a:	e9 94 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018f3f:	83 f8 03             	cmp    eax,0x3
c0018f42:	0f 85 19 02 00 00    	jne    c0019161 <CPU::detectFeatures()+0x9e3>
c0018f48:	50                   	push   eax
c0018f49:	50                   	push   eax
c0018f4a:	68 9d b0 02 c0       	push   0xc002b09d
c0018f4f:	e9 7f 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018f54:	80 fa 06             	cmp    dl,0x6
c0018f57:	0f 85 db 00 00 00    	jne    c0019038 <CPU::detectFeatures()+0x8ba>
c0018f5d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f63:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018f68:	66 81 fa 80 01       	cmp    dx,0x180
c0018f6d:	75 0c                	jne    c0018f7b <CPU::detectFeatures()+0x7fd>
c0018f6f:	50                   	push   eax
c0018f70:	50                   	push   eax
c0018f71:	68 a8 b0 02 c0       	push   0xc002b0a8
c0018f76:	e9 58 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018f7b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018f81:	66 f7 c1 80 ff       	test   cx,0xff80
c0018f86:	75 0c                	jne    c0018f94 <CPU::detectFeatures()+0x816>
c0018f88:	50                   	push   eax
c0018f89:	50                   	push   eax
c0018f8a:	68 b8 b0 02 c0       	push   0xc002b0b8
c0018f8f:	e9 3f 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018f94:	66 81 fa 40 02       	cmp    dx,0x240
c0018f99:	75 0c                	jne    c0018fa7 <CPU::detectFeatures()+0x829>
c0018f9b:	55                   	push   ebp
c0018f9c:	55                   	push   ebp
c0018f9d:	68 bf b0 02 c0       	push   0xc002b0bf
c0018fa2:	e9 2c 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018fa7:	66 81 fa 80 02       	cmp    dx,0x280
c0018fac:	75 0c                	jne    c0018fba <CPU::detectFeatures()+0x83c>
c0018fae:	57                   	push   edi
c0018faf:	57                   	push   edi
c0018fb0:	68 c8 b0 02 c0       	push   0xc002b0c8
c0018fb5:	e9 19 01 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018fba:	66 81 fa 40 03       	cmp    dx,0x340
c0018fbf:	74 ed                	je     c0018fae <CPU::detectFeatures()+0x830>
c0018fc1:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018fc6:	75 0c                	jne    c0018fd4 <CPU::detectFeatures()+0x856>
c0018fc8:	56                   	push   esi
c0018fc9:	56                   	push   esi
c0018fca:	68 cf b0 02 c0       	push   0xc002b0cf
c0018fcf:	e9 ff 00 00 00       	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0018fd4:	83 f8 06             	cmp    eax,0x6
c0018fd7:	0f 84 45 ff ff ff    	je     c0018f22 <CPU::detectFeatures()+0x7a4>
c0018fdd:	83 f8 04             	cmp    eax,0x4
c0018fe0:	0f 84 4d ff ff ff    	je     c0018f33 <CPU::detectFeatures()+0x7b5>
c0018fe6:	83 f8 03             	cmp    eax,0x3
c0018fe9:	0f 85 72 01 00 00    	jne    c0019161 <CPU::detectFeatures()+0x9e3>
c0018fef:	51                   	push   ecx
c0018ff0:	51                   	push   ecx
c0018ff1:	68 d8 b0 02 c0       	push   0xc002b0d8
c0018ff6:	53                   	push   ebx
c0018ff7:	e8 3e ab ff ff       	call   c0013b3a <Device::setName(char const*)>
c0018ffc:	b1 c1                	mov    cl,0xc1
c0018ffe:	88 c8                	mov    al,cl
c0019000:	e6 22                	out    0x22,al
c0019002:	e4 23                	in     al,0x23
c0019004:	88 c2                	mov    dl,al
c0019006:	88 c8                	mov    al,cl
c0019008:	e6 22                	out    0x22,al
c001900a:	88 d0                	mov    al,dl
c001900c:	83 c8 10             	or     eax,0x10
c001900f:	e6 23                	out    0x23,al
c0019011:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019018:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001901b:	89 d0                	mov    eax,edx
c001901d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019023:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019027:	40                   	inc    eax
c0019028:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001902e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019033:	e9 a1 00 00 00       	jmp    c00190d9 <CPU::detectFeatures()+0x95b>
c0019038:	83 f8 06             	cmp    eax,0x6
c001903b:	0f 84 e1 fe ff ff    	je     c0018f22 <CPU::detectFeatures()+0x7a4>
c0019041:	83 f8 04             	cmp    eax,0x4
c0019044:	0f 84 e9 fe ff ff    	je     c0018f33 <CPU::detectFeatures()+0x7b5>
c001904a:	83 f8 03             	cmp    eax,0x3
c001904d:	0f 85 0e 01 00 00    	jne    c0019161 <CPU::detectFeatures()+0x9e3>
c0019053:	52                   	push   edx
c0019054:	52                   	push   edx
c0019055:	68 e3 b0 02 c0       	push   0xc002b0e3
c001905a:	eb 77                	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c001905c:	83 f8 07             	cmp    eax,0x7
c001905f:	75 09                	jne    c001906a <CPU::detectFeatures()+0x8ec>
c0019061:	50                   	push   eax
c0019062:	50                   	push   eax
c0019063:	68 ed b0 02 c0       	push   0xc002b0ed
c0019068:	eb 69                	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c001906a:	83 f8 0a             	cmp    eax,0xa
c001906d:	75 09                	jne    c0019078 <CPU::detectFeatures()+0x8fa>
c001906f:	50                   	push   eax
c0019070:	50                   	push   eax
c0019071:	68 f8 b0 02 c0       	push   0xc002b0f8
c0019076:	eb 5b                	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0019078:	83 f8 0b             	cmp    eax,0xb
c001907b:	75 09                	jne    c0019086 <CPU::detectFeatures()+0x908>
c001907d:	50                   	push   eax
c001907e:	50                   	push   eax
c001907f:	68 00 b1 02 c0       	push   0xc002b100
c0019084:	eb 4d                	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0019086:	83 f8 08             	cmp    eax,0x8
c0019089:	75 09                	jne    c0019094 <CPU::detectFeatures()+0x916>
c001908b:	50                   	push   eax
c001908c:	50                   	push   eax
c001908d:	68 09 b1 02 c0       	push   0xc002b109
c0019092:	eb 3f                	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c0019094:	83 f8 09             	cmp    eax,0x9
c0019097:	75 09                	jne    c00190a2 <CPU::detectFeatures()+0x924>
c0019099:	50                   	push   eax
c001909a:	50                   	push   eax
c001909b:	68 11 b1 02 c0       	push   0xc002b111
c00190a0:	eb 31                	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c00190a2:	83 f8 05             	cmp    eax,0x5
c00190a5:	75 09                	jne    c00190b0 <CPU::detectFeatures()+0x932>
c00190a7:	50                   	push   eax
c00190a8:	50                   	push   eax
c00190a9:	68 19 b1 02 c0       	push   0xc002b119
c00190ae:	eb 23                	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c00190b0:	83 f8 0c             	cmp    eax,0xc
c00190b3:	75 09                	jne    c00190be <CPU::detectFeatures()+0x940>
c00190b5:	55                   	push   ebp
c00190b6:	55                   	push   ebp
c00190b7:	68 27 b1 02 c0       	push   0xc002b127
c00190bc:	eb 15                	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c00190be:	83 f8 0d             	cmp    eax,0xd
c00190c1:	75 09                	jne    c00190cc <CPU::detectFeatures()+0x94e>
c00190c3:	57                   	push   edi
c00190c4:	57                   	push   edi
c00190c5:	68 32 b1 02 c0       	push   0xc002b132
c00190ca:	eb 07                	jmp    c00190d3 <CPU::detectFeatures()+0x955>
c00190cc:	56                   	push   esi
c00190cd:	56                   	push   esi
c00190ce:	68 46 b1 02 c0       	push   0xc002b146
c00190d3:	53                   	push   ebx
c00190d4:	e8 61 aa ff ff       	call   c0013b3a <Device::setName(char const*)>
c00190d9:	83 c4 10             	add    esp,0x10
c00190dc:	e9 80 00 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x9e3>
c00190e1:	51                   	push   ecx
c00190e2:	51                   	push   ecx
c00190e3:	68 92 af 02 c0       	push   0xc002af92
c00190e8:	55                   	push   ebp
c00190e9:	e8 1e 77 fe ff       	call   c000080c <strcpy>
c00190ee:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00190f8:	e8 b1 71 fe ff       	call   c00002ae <is486>
c00190fd:	83 c4 10             	add    esp,0x10
c0019100:	85 c0                	test   eax,eax
c0019102:	74 2b                	je     c001912f <CPU::detectFeatures()+0x9b1>
c0019104:	52                   	push   edx
c0019105:	52                   	push   edx
c0019106:	68 52 b1 02 c0       	push   0xc002b152
c001910b:	53                   	push   ebx
c001910c:	e8 29 aa ff ff       	call   c0013b3a <Device::setName(char const*)>
c0019111:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019118:	0f 20 c0             	mov    eax,cr0
c001911b:	83 e0 14             	and    eax,0x14
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	83 f8 04             	cmp    eax,0x4
c0019124:	75 1f                	jne    c0019145 <CPU::detectFeatures()+0x9c7>
c0019126:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001912d:	eb 32                	jmp    c0019161 <CPU::detectFeatures()+0x9e3>
c001912f:	50                   	push   eax
c0019130:	50                   	push   eax
c0019131:	68 5d b1 02 c0       	push   0xc002b15d
c0019136:	53                   	push   ebx
c0019137:	e8 fe a9 ff ff       	call   c0013b3a <Device::setName(char const*)>
c001913c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019143:	eb d3                	jmp    c0019118 <CPU::detectFeatures()+0x99a>
c0019145:	e8 3f 71 fe ff       	call   c0000289 <hasLegacyFPU>
c001914a:	83 e0 01             	and    eax,0x1
c001914d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019150:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019156:	83 e0 fd             	and    eax,0xfffffffd
c0019159:	09 d0                	or     eax,edx
c001915b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019161:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019168:	83 c4 4c             	add    esp,0x4c
c001916b:	5b                   	pop    ebx
c001916c:	5e                   	pop    esi
c001916d:	5f                   	pop    edi
c001916e:	5d                   	pop    ebp
c001916f:	c3                   	ret    

c0019170 <CPU::setupSMEP()>:
c0019170:	0f 20 e0             	mov    eax,cr4
c0019173:	0d 00 00 10 00       	or     eax,0x100000
c0019178:	0f 22 e0             	mov    cr4,eax
c001917b:	c3                   	ret    

c001917c <CPU::setupUMIP()>:
c001917c:	0f 20 e0             	mov    eax,cr4
c001917f:	80 cc 08             	or     ah,0x8
c0019182:	0f 22 e0             	mov    cr4,eax
c0019185:	c3                   	ret    

c0019186 <CPU::setupTSC()>:
c0019186:	0f 20 e0             	mov    eax,cr4
c0019189:	83 c8 04             	or     eax,0x4
c001918c:	0f 22 e0             	mov    cr4,eax
c001918f:	c3                   	ret    

c0019190 <CPU::setupLargePages()>:
c0019190:	0f 20 e0             	mov    eax,cr4
c0019193:	83 c8 10             	or     eax,0x10
c0019196:	0f 22 e0             	mov    cr4,eax
c0019199:	c3                   	ret    

c001919a <CPU::setupPAT()>:
c001919a:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001919f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00191a6:	74 2c                	je     c00191d4 <CPU::setupPAT()+0x3a>
c00191a8:	53                   	push   ebx
c00191a9:	83 ec 10             	sub    esp,0x10
c00191ac:	68 77 02 00 00       	push   0x277
c00191b1:	50                   	push   eax
c00191b2:	e8 89 59 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00191b7:	83 e2 f8             	and    edx,0xfffffff8
c00191ba:	83 ca 01             	or     edx,0x1
c00191bd:	52                   	push   edx
c00191be:	50                   	push   eax
c00191bf:	68 77 02 00 00       	push   0x277
c00191c4:	ff 35 88 d5 02 c0    	push   DWORD PTR ds:0xc002d588
c00191ca:	e8 9d 59 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00191cf:	83 c4 28             	add    esp,0x28
c00191d2:	5b                   	pop    ebx
c00191d3:	c3                   	ret    
c00191d4:	c3                   	ret    
c00191d5:	90                   	nop

c00191d6 <CPU::setupMTRR()>:
c00191d6:	c3                   	ret    
c00191d7:	90                   	nop

c00191d8 <CPU::setupGlobalPages()>:
c00191d8:	0f 20 e0             	mov    eax,cr4
c00191db:	0c 80                	or     al,0x80
c00191dd:	0f 22 e0             	mov    cr4,eax
c00191e0:	c3                   	ret    
c00191e1:	90                   	nop

c00191e2 <CPU::allowUsermodeDataAccess()>:
c00191e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191e6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00191ed:	74 03                	je     c00191f2 <CPU::allowUsermodeDataAccess()+0x10>
c00191ef:	0f 01 cb             	stac   
c00191f2:	c3                   	ret    
c00191f3:	90                   	nop

c00191f4 <CPU::prohibitUsermodeDataAccess()>:
c00191f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191f8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00191ff:	74 03                	je     c0019204 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019201:	0f 01 ca             	clac   
c0019204:	c3                   	ret    
c0019205:	90                   	nop

c0019206 <CPU::setupSMAP()>:
c0019206:	0f 20 e0             	mov    eax,cr4
c0019209:	0d 00 00 20 00       	or     eax,0x200000
c001920e:	0f 22 e0             	mov    cr4,eax
c0019211:	eb e1                	jmp    c00191f4 <CPU::prohibitUsermodeDataAccess()>
c0019213:	90                   	nop

c0019214 <CPU::setupFeatures()>:
c0019214:	83 ec 0c             	sub    esp,0xc
c0019217:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001921b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019222:	74 07                	je     c001922b <CPU::setupFeatures()+0x17>
c0019224:	52                   	push   edx
c0019225:	e8 46 ff ff ff       	call   c0019170 <CPU::setupSMEP()>
c001922a:	58                   	pop    eax
c001922b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019232:	74 07                	je     c001923b <CPU::setupFeatures()+0x27>
c0019234:	52                   	push   edx
c0019235:	e8 cc ff ff ff       	call   c0019206 <CPU::setupSMAP()>
c001923a:	58                   	pop    eax
c001923b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019242:	74 07                	je     c001924b <CPU::setupFeatures()+0x37>
c0019244:	52                   	push   edx
c0019245:	e8 32 ff ff ff       	call   c001917c <CPU::setupUMIP()>
c001924a:	58                   	pop    eax
c001924b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019252:	74 07                	je     c001925b <CPU::setupFeatures()+0x47>
c0019254:	52                   	push   edx
c0019255:	e8 2c ff ff ff       	call   c0019186 <CPU::setupTSC()>
c001925a:	58                   	pop    eax
c001925b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019262:	74 07                	je     c001926b <CPU::setupFeatures()+0x57>
c0019264:	52                   	push   edx
c0019265:	e8 26 ff ff ff       	call   c0019190 <CPU::setupLargePages()>
c001926a:	59                   	pop    ecx
c001926b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019272:	74 07                	je     c001927b <CPU::setupFeatures()+0x67>
c0019274:	52                   	push   edx
c0019275:	e8 5e ff ff ff       	call   c00191d8 <CPU::setupGlobalPages()>
c001927a:	58                   	pop    eax
c001927b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019282:	74 0c                	je     c0019290 <CPU::setupFeatures()+0x7c>
c0019284:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019288:	83 c4 0c             	add    esp,0xc
c001928b:	e9 0a ff ff ff       	jmp    c001919a <CPU::setupPAT()>
c0019290:	83 c4 0c             	add    esp,0xc
c0019293:	c3                   	ret    

c0019294 <CPU::open(int, int, void*)>:
c0019294:	57                   	push   edi
c0019295:	56                   	push   esi
c0019296:	53                   	push   ebx
c0019297:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001929b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001929f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00192a5:	83 ec 0c             	sub    esp,0xc
c00192a8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00192ae:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00192b4:	50                   	push   eax
c00192b5:	e8 74 5b ff ff       	call   c000ee2e <GDT::setup()>
c00192ba:	83 c4 0c             	add    esp,0xc
c00192bd:	6a 00                	push   0x0
c00192bf:	68 ef be ad de       	push   0xdeadbeef
c00192c4:	57                   	push   edi
c00192c5:	e8 5e 78 ff ff       	call   c0010b28 <TSS::setup(unsigned long, unsigned long)>
c00192ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00192cd:	e8 36 78 ff ff       	call   c0010b08 <TSS::flush()>
c00192d2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00192d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00192db:	e8 b2 5d ff ff       	call   c000f092 <IDT::setup()>
c00192e0:	b8 00 04 00 00       	mov    eax,0x400
c00192e5:	0f 23 f8             	mov    db7,eax
c00192e8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00192f2:	e8 49 66 ff ff       	call   c000f940 <Phys::allocatePage()>
c00192f7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00192fd:	89 30                	mov    DWORD PTR [eax],esi
c00192ff:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019305:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019308:	58                   	pop    eax
c0019309:	5a                   	pop    edx
c001930a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019310:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019314:	e8 1f 89 ff ff       	call   c0011c38 <VAS::setCPUSpecific(unsigned long)>
c0019319:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001931c:	e8 5d f4 ff ff       	call   c001877e <CPU::detectFeatures()>
c0019321:	e8 36 bc ff ff       	call   c0014f5c <setupInterruptController()>
c0019326:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001932c:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c0019331:	83 e0 10             	and    eax,0x10
c0019334:	83 f8 01             	cmp    eax,0x1
c0019337:	19 c0                	sbb    eax,eax
c0019339:	83 e0 46             	and    eax,0x46
c001933c:	83 c0 1e             	add    eax,0x1e
c001933f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019342:	e8 02 d2 ff ff       	call   c0016549 <setupTimer(int)>
c0019347:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001934d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019350:	e8 bf fe ff ff       	call   c0019214 <CPU::setupFeatures()>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	31 c0                	xor    eax,eax
c001935a:	5b                   	pop    ebx
c001935b:	5e                   	pop    esi
c001935c:	5f                   	pop    edi
c001935d:	c3                   	ret    

c001935e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001935e:	57                   	push   edi
c001935f:	56                   	push   esi
c0019360:	53                   	push   ebx
c0019361:	51                   	push   ecx
c0019362:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019366:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019369:	0f 02 c0             	lar    eax,ax
c001936c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001936f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019373:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019376:	88 ca                	mov    dl,cl
c0019378:	c0 ea 06             	shr    dl,0x6
c001937b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001937f:	89 ca                	mov    edx,ecx
c0019381:	66 c1 ea 03          	shr    dx,0x3
c0019385:	83 e2 07             	and    edx,0x7
c0019388:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001938d:	88 17                	mov    BYTE PTR [edi],dl
c001938f:	0f 84 a6 01 00 00    	je     c001953b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019395:	83 e1 07             	and    ecx,0x7
c0019398:	80 f9 04             	cmp    cl,0x4
c001939b:	0f 84 98 00 00 00    	je     c0019439 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00193a1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00193a6:	0f 95 c0             	setne  al
c00193a9:	80 f9 05             	cmp    cl,0x5
c00193ac:	0f 95 c2             	setne  dl
c00193af:	08 c2                	or     dl,al
c00193b1:	74 79                	je     c001942c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00193b3:	84 c9                	test   cl,cl
c00193b5:	75 05                	jne    c00193bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00193b7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00193ba:	eb 3c                	jmp    c00193f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193bc:	80 f9 01             	cmp    cl,0x1
c00193bf:	75 05                	jne    c00193c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00193c1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00193c4:	eb 32                	jmp    c00193f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193c6:	80 f9 02             	cmp    cl,0x2
c00193c9:	75 05                	jne    c00193d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00193cb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00193ce:	eb 28                	jmp    c00193f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193d0:	31 c0                	xor    eax,eax
c00193d2:	80 f9 03             	cmp    cl,0x3
c00193d5:	75 05                	jne    c00193dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00193d7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00193da:	eb 1c                	jmp    c00193f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193dc:	80 f9 05             	cmp    cl,0x5
c00193df:	75 05                	jne    c00193e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00193e1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00193e4:	eb 12                	jmp    c00193f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193e6:	80 f9 06             	cmp    cl,0x6
c00193e9:	75 05                	jne    c00193f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00193eb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00193ee:	eb 08                	jmp    c00193f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193f0:	80 f9 07             	cmp    cl,0x7
c00193f3:	75 03                	jne    c00193f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193f5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00193f8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00193fd:	75 10                	jne    c001940f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00193ff:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019403:	b9 03 00 00 00       	mov    ecx,0x3
c0019408:	01 d0                	add    eax,edx
c001940a:	e9 37 01 00 00       	jmp    c0019546 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001940f:	b9 02 00 00 00       	mov    ecx,0x2
c0019414:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019419:	0f 85 27 01 00 00    	jne    c0019546 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001941f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019422:	b9 06 00 00 00       	mov    ecx,0x6
c0019427:	e9 1a 01 00 00       	jmp    c0019546 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001942c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001942f:	b9 06 00 00 00       	mov    ecx,0x6
c0019434:	e9 0f 01 00 00       	jmp    c0019548 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019439:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001943c:	88 ca                	mov    dl,cl
c001943e:	c0 ea 06             	shr    dl,0x6
c0019441:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019445:	89 ca                	mov    edx,ecx
c0019447:	66 c1 ea 03          	shr    dx,0x3
c001944b:	83 e2 07             	and    edx,0x7
c001944e:	80 e1 07             	and    cl,0x7
c0019451:	75 05                	jne    c0019458 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019453:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019456:	eb 4c                	jmp    c00194a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019458:	80 f9 01             	cmp    cl,0x1
c001945b:	75 05                	jne    c0019462 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001945d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019460:	eb 42                	jmp    c00194a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019462:	80 f9 02             	cmp    cl,0x2
c0019465:	75 05                	jne    c001946c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019467:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001946a:	eb 38                	jmp    c00194a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001946c:	80 f9 03             	cmp    cl,0x3
c001946f:	75 05                	jne    c0019476 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019471:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019474:	eb 2e                	jmp    c00194a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019476:	80 f9 04             	cmp    cl,0x4
c0019479:	75 12                	jne    c001948d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001947b:	f6 c4 60             	test   ah,0x60
c001947e:	75 08                	jne    c0019488 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019480:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019483:	8d 78 14             	lea    edi,[eax+0x14]
c0019486:	eb 1c                	jmp    c00194a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019488:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001948b:	eb 17                	jmp    c00194a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001948d:	80 f9 05             	cmp    cl,0x5
c0019490:	75 05                	jne    c0019497 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019492:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019495:	eb 0d                	jmp    c00194a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019497:	80 f9 06             	cmp    cl,0x6
c001949a:	75 05                	jne    c00194a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001949c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001949f:	eb 03                	jmp    c00194a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194a1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00194a4:	84 d2                	test   dl,dl
c00194a6:	75 05                	jne    c00194ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00194a8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194ab:	eb 3c                	jmp    c00194e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194ad:	80 fa 01             	cmp    dl,0x1
c00194b0:	75 05                	jne    c00194b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00194b2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00194b5:	eb 32                	jmp    c00194e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194b7:	80 fa 02             	cmp    dl,0x2
c00194ba:	75 05                	jne    c00194c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00194bc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00194bf:	eb 28                	jmp    c00194e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194c1:	80 fa 03             	cmp    dl,0x3
c00194c4:	75 05                	jne    c00194cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00194c6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00194c9:	eb 1e                	jmp    c00194e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194cb:	31 c0                	xor    eax,eax
c00194cd:	80 fa 04             	cmp    dl,0x4
c00194d0:	74 17                	je     c00194e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194d2:	80 fa 05             	cmp    dl,0x5
c00194d5:	75 05                	jne    c00194dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00194d7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00194da:	eb 0d                	jmp    c00194e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194dc:	80 fa 06             	cmp    dl,0x6
c00194df:	75 05                	jne    c00194e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00194e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00194e4:	eb 03                	jmp    c00194e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00194e9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00194ee:	0f 94 c2             	sete   dl
c00194f1:	80 f9 05             	cmp    cl,0x5
c00194f4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00194f8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00194fd:	d3 e0                	shl    eax,cl
c00194ff:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019503:	74 0a                	je     c001950f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019505:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019508:	b9 07 00 00 00       	mov    ecx,0x7
c001950d:	eb 37                	jmp    c0019546 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001950f:	01 f8                	add    eax,edi
c0019511:	b9 03 00 00 00       	mov    ecx,0x3
c0019516:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001951b:	74 2b                	je     c0019548 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001951d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019522:	75 0d                	jne    c0019531 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019524:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019528:	01 c8                	add    eax,ecx
c001952a:	b9 04 00 00 00       	mov    ecx,0x4
c001952f:	eb 17                	jmp    c0019548 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019531:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019534:	b9 07 00 00 00       	mov    ecx,0x7
c0019539:	eb 0d                	jmp    c0019548 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001953b:	b9 02 00 00 00       	mov    ecx,0x2
c0019540:	b2 01                	mov    dl,0x1
c0019542:	31 c0                	xor    eax,eax
c0019544:	eb 02                	jmp    c0019548 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019546:	31 d2                	xor    edx,edx
c0019548:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001954c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001954e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019552:	88 11                	mov    BYTE PTR [ecx],dl
c0019554:	5a                   	pop    edx
c0019555:	5b                   	pop    ebx
c0019556:	5e                   	pop    esi
c0019557:	5f                   	pop    edi
c0019558:	c3                   	ret    

c0019559 <Krnl::smpEntry()>:
c0019559:	eb fe                	jmp    c0019559 <Krnl::smpEntry()>

c001955b <Krnl::startCPU(int)>:
c001955b:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0019560:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019567:	0f 84 36 01 00 00    	je     c00196a3 <Krnl::startCPU(int)+0x148>
c001956d:	53                   	push   ebx
c001956e:	83 ec 10             	sub    esp,0x10
c0019571:	fa                   	cli    
c0019572:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c0019578:	6a 1b                	push   0x1b
c001957a:	ff 35 88 d5 02 c0    	push   DWORD PTR ds:0xc002d588
c0019580:	e8 bb 55 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019585:	25 00 f0 ff ff       	and    eax,0xfffff000
c001958a:	89 c3                	mov    ebx,eax
c001958c:	58                   	pop    eax
c001958d:	5a                   	pop    edx
c001958e:	53                   	push   ebx
c001958f:	68 94 b1 02 c0       	push   0xc002b194
c0019594:	e8 72 8f ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0019599:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00195a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195a7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00195b1:	c1 e0 18             	shl    eax,0x18
c00195b4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00195ba:	83 c4 10             	add    esp,0x10
c00195bd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00195c3:	09 c2                	or     edx,eax
c00195c5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00195cb:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00195d1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00195d7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00195dd:	80 cd c5             	or     ch,0xc5
c00195e0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00195e6:	f3 90                	pause  
c00195e8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00195ea:	0f ba e1 0c          	bt     ecx,0xc
c00195ee:	72 f6                	jb     c00195e6 <Krnl::startCPU(int)+0x8b>
c00195f0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00195f6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00195fc:	09 c1                	or     ecx,eax
c00195fe:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019604:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001960a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019610:	80 cd 85             	or     ch,0x85
c0019613:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019619:	f3 90                	pause  
c001961b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001961d:	0f ba e1 0c          	bt     ecx,0xc
c0019621:	72 f6                	jb     c0019619 <Krnl::startCPU(int)+0xbe>
c0019623:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001962d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019633:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019639:	09 c1                	or     ecx,eax
c001963b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019641:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019647:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001964d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019653:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019659:	f3 90                	pause  
c001965b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001965d:	0f ba e1 0c          	bt     ecx,0xc
c0019661:	72 f6                	jb     c0019659 <Krnl::startCPU(int)+0xfe>
c0019663:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001966d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019673:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019679:	09 c8                	or     eax,ecx
c001967b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019681:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019687:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001968c:	0d 02 06 00 00       	or     eax,0x602
c0019691:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019697:	f3 90                	pause  
c0019699:	8b 02                	mov    eax,DWORD PTR [edx]
c001969b:	0f ba e0 0c          	bt     eax,0xc
c001969f:	72 f6                	jb     c0019697 <Krnl::startCPU(int)+0x13c>
c00196a1:	eb fe                	jmp    c00196a1 <Krnl::startCPU(int)+0x146>
c00196a3:	c3                   	ret    

c00196a4 <Krnl::startCPUs()>:
c00196a4:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00196a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00196af:	88 c2                	mov    dl,al
c00196b1:	83 e2 0a             	and    edx,0xa
c00196b4:	80 fa 0a             	cmp    dl,0xa
c00196b7:	75 09                	jne    c00196c2 <Krnl::startCPUs()+0x1e>
c00196b9:	a8 01                	test   al,0x1
c00196bb:	74 05                	je     c00196c2 <Krnl::startCPUs()+0x1e>
c00196bd:	e9 d9 6a fe ff       	jmp    c000019b <prepareTramp>
c00196c2:	c3                   	ret    
c00196c3:	90                   	nop

c00196c4 <EnvVarContainer::getEnv(char const*)>:
c00196c4:	57                   	push   edi
c00196c5:	56                   	push   esi
c00196c6:	53                   	push   ebx
c00196c7:	31 db                	xor    ebx,ebx
c00196c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196cd:	39 1e                	cmp    DWORD PTR [esi],ebx
c00196cf:	7e 2b                	jle    c00196fc <EnvVarContainer::getEnv(char const*)+0x38>
c00196d1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00196d8:	50                   	push   eax
c00196d9:	50                   	push   eax
c00196da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00196dd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00196e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00196e4:	e8 af 71 fe ff       	call   c0000898 <strcmp>
c00196e9:	83 c4 10             	add    esp,0x10
c00196ec:	85 c0                	test   eax,eax
c00196ee:	75 09                	jne    c00196f9 <EnvVarContainer::getEnv(char const*)+0x35>
c00196f0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00196f3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00196f7:	eb 05                	jmp    c00196fe <EnvVarContainer::getEnv(char const*)+0x3a>
c00196f9:	43                   	inc    ebx
c00196fa:	eb d1                	jmp    c00196cd <EnvVarContainer::getEnv(char const*)+0x9>
c00196fc:	31 c0                	xor    eax,eax
c00196fe:	5b                   	pop    ebx
c00196ff:	5e                   	pop    esi
c0019700:	5f                   	pop    edi
c0019701:	c3                   	ret    

c0019702 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019702:	55                   	push   ebp
c0019703:	57                   	push   edi
c0019704:	56                   	push   esi
c0019705:	53                   	push   ebx
c0019706:	83 ec 28             	sub    esp,0x28
c0019709:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001970d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019711:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019715:	56                   	push   esi
c0019716:	e8 51 70 fe ff       	call   c000076c <strlen>
c001971b:	40                   	inc    eax
c001971c:	89 04 24             	mov    DWORD PTR [esp],eax
c001971f:	e8 78 5e ff ff       	call   c000f59c <malloc>
c0019724:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019727:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001972b:	e8 3c 70 fe ff       	call   c000076c <strlen>
c0019730:	40                   	inc    eax
c0019731:	89 04 24             	mov    DWORD PTR [esp],eax
c0019734:	e8 63 5e ff ff       	call   c000f59c <malloc>
c0019739:	89 34 24             	mov    DWORD PTR [esp],esi
c001973c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019740:	e8 27 70 fe ff       	call   c000076c <strlen>
c0019745:	83 c4 0c             	add    esp,0xc
c0019748:	40                   	inc    eax
c0019749:	50                   	push   eax
c001974a:	6a 00                	push   0x0
c001974c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019750:	e8 fb 6f fe ff       	call   c0000750 <memset>
c0019755:	89 34 24             	mov    DWORD PTR [esp],esi
c0019758:	e8 0f 70 fe ff       	call   c000076c <strlen>
c001975d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019761:	8d 48 01             	lea    ecx,[eax+0x1]
c0019764:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019766:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019769:	89 de                	mov    esi,ebx
c001976b:	e8 fc 6f fe ff       	call   c000076c <strlen>
c0019770:	83 c4 0c             	add    esp,0xc
c0019773:	40                   	inc    eax
c0019774:	50                   	push   eax
c0019775:	6a 00                	push   0x0
c0019777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001977b:	e8 d0 6f fe ff       	call   c0000750 <memset>
c0019780:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019783:	e8 e4 6f fe ff       	call   c000076c <strlen>
c0019788:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001978c:	8d 48 01             	lea    ecx,[eax+0x1]
c001978f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019791:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019794:	40                   	inc    eax
c0019795:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019798:	c1 e0 03             	shl    eax,0x3
c001979b:	5a                   	pop    edx
c001979c:	59                   	pop    ecx
c001979d:	50                   	push   eax
c001979e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00197a1:	e8 e2 5d ff ff       	call   c000f588 <realloc>
c00197a6:	8d 74 24 18          	lea    esi,[esp+0x18]
c00197aa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00197ad:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00197b0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00197b4:	b9 08 00 00 00       	mov    ecx,0x8
c00197b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197bb:	83 c4 2c             	add    esp,0x2c
c00197be:	5b                   	pop    ebx
c00197bf:	5e                   	pop    esi
c00197c0:	5f                   	pop    edi
c00197c1:	5d                   	pop    ebp
c00197c2:	c3                   	ret    
c00197c3:	90                   	nop

c00197c4 <EnvVarContainer::deleteEnv(char const*)>:
c00197c4:	c3                   	ret    
c00197c5:	90                   	nop

c00197c6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00197c6:	55                   	push   ebp
c00197c7:	57                   	push   edi
c00197c8:	56                   	push   esi
c00197c9:	53                   	push   ebx
c00197ca:	81 ec 38 01 00 00    	sub    esp,0x138
c00197d0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00197d7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00197de:	68 14 01 00 00       	push   0x114
c00197e3:	e8 b4 5d ff ff       	call   c000f59c <malloc>
c00197e8:	83 c4 0c             	add    esp,0xc
c00197eb:	89 c3                	mov    ebx,eax
c00197ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00197f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00197f7:	50                   	push   eax
c00197f8:	e8 6d 92 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c00197fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019800:	e8 37 95 ff ff       	call   c0012d3c <File::exists()>
c0019805:	83 c4 10             	add    esp,0x10
c0019808:	84 c0                	test   al,al
c001980a:	75 31                	jne    c001983d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001980c:	50                   	push   eax
c001980d:	50                   	push   eax
c001980e:	6a 12                	push   0x12
c0019810:	53                   	push   ebx
c0019811:	e8 b8 92 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c0019816:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019818:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001981b:	89 34 24             	mov    DWORD PTR [esp],esi
c001981e:	e8 49 6f fe ff       	call   c000076c <strlen>
c0019823:	5a                   	pop    edx
c0019824:	31 d2                	xor    edx,edx
c0019826:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001982a:	51                   	push   ecx
c001982b:	56                   	push   esi
c001982c:	52                   	push   edx
c001982d:	50                   	push   eax
c001982e:	53                   	push   ebx
c001982f:	ff d7                	call   edi
c0019831:	83 c4 14             	add    esp,0x14
c0019834:	53                   	push   ebx
c0019835:	e8 f2 92 ff ff       	call   c0012b2c <File::close()>
c001983a:	83 c4 10             	add    esp,0x10
c001983d:	56                   	push   esi
c001983e:	31 f6                	xor    esi,esi
c0019840:	68 00 01 00 00       	push   0x100
c0019845:	6a 00                	push   0x0
c0019847:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001984b:	50                   	push   eax
c001984c:	e8 ff 6e fe ff       	call   c0000750 <memset>
c0019851:	5f                   	pop    edi
c0019852:	58                   	pop    eax
c0019853:	6a 01                	push   0x1
c0019855:	53                   	push   ebx
c0019856:	e8 73 92 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001985b:	83 c4 10             	add    esp,0x10
c001985e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019866:	83 ec 0c             	sub    esp,0xc
c0019869:	8b 03                	mov    eax,DWORD PTR [ebx]
c001986b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001986f:	51                   	push   ecx
c0019870:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019874:	52                   	push   edx
c0019875:	6a 00                	push   0x0
c0019877:	6a 01                	push   0x1
c0019879:	53                   	push   ebx
c001987a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001987d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019881:	83 c4 20             	add    esp,0x20
c0019884:	3c 0d                	cmp    al,0xd
c0019886:	0f 84 09 01 00 00    	je     c0019995 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001988c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019891:	0f 84 ef 00 00 00    	je     c0019986 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019897:	3c 0a                	cmp    al,0xa
c0019899:	74 13                	je     c00198ae <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001989b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00198a0:	74 0c                	je     c00198ae <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00198a2:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00198a8:	0f 8e d8 00 00 00    	jle    c0019986 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00198ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198b2:	83 ec 0c             	sub    esp,0xc
c00198b5:	8d 78 01             	lea    edi,[eax+0x1]
c00198b8:	57                   	push   edi
c00198b9:	e8 de 5c ff ff       	call   c000f59c <malloc>
c00198be:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00198c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00198c6:	8d 56 04             	lea    edx,[esi+0x4]
c00198c9:	89 14 24             	mov    DWORD PTR [esp],edx
c00198cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00198d0:	e8 c7 5c ff ff       	call   c000f59c <malloc>
c00198d5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00198d9:	83 c4 0c             	add    esp,0xc
c00198dc:	57                   	push   edi
c00198dd:	6a 00                	push   0x0
c00198df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00198e3:	e8 68 6e fe ff       	call   c0000750 <memset>
c00198e8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00198ec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00198f0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00198f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198f6:	83 c4 0c             	add    esp,0xc
c00198f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198fd:	52                   	push   edx
c00198fe:	6a 00                	push   0x0
c0019900:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019904:	e8 47 6e fe ff       	call   c0000750 <memset>
c0019909:	8d 74 24 30          	lea    esi,[esp+0x30]
c001990d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019911:	89 34 24             	mov    DWORD PTR [esp],esi
c0019914:	e8 53 6e fe ff       	call   c000076c <strlen>
c0019919:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001991d:	89 c1                	mov    ecx,eax
c001991f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019921:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019924:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019927:	40                   	inc    eax
c0019928:	83 c4 10             	add    esp,0x10
c001992b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001992e:	85 d2                	test   edx,edx
c0019930:	75 0c                	jne    c001993e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019932:	83 ec 0c             	sub    esp,0xc
c0019935:	6a 08                	push   0x8
c0019937:	e8 60 5c ff ff       	call   c000f59c <malloc>
c001993c:	eb 0c                	jmp    c001994a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001993e:	c1 e0 03             	shl    eax,0x3
c0019941:	51                   	push   ecx
c0019942:	51                   	push   ecx
c0019943:	50                   	push   eax
c0019944:	52                   	push   edx
c0019945:	e8 3e 5c ff ff       	call   c000f588 <realloc>
c001994a:	83 c4 10             	add    esp,0x10
c001994d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019950:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019953:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019956:	8d 74 24 18          	lea    esi,[esp+0x18]
c001995a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001995e:	b9 08 00 00 00       	mov    ecx,0x8
c0019963:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019965:	31 f6                	xor    esi,esi
c0019967:	50                   	push   eax
c0019968:	68 00 01 00 00       	push   0x100
c001996d:	6a 00                	push   0x0
c001996f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019973:	50                   	push   eax
c0019974:	e8 d7 6d fe ff       	call   c0000750 <memset>
c0019979:	83 c4 10             	add    esp,0x10
c001997c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019984:	eb 0f                	jmp    c0019995 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019986:	3c 3d                	cmp    al,0x3d
c0019988:	74 07                	je     c0019991 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001998a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001998e:	46                   	inc    esi
c001998f:	eb 04                	jmp    c0019995 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019991:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019995:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001999a:	0f 85 c6 fe ff ff    	jne    c0019866 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00199a0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00199a6:	5b                   	pop    ebx
c00199a7:	5e                   	pop    esi
c00199a8:	5f                   	pop    edi
c00199a9:	5d                   	pop    ebp
c00199aa:	c3                   	ret    
c00199ab:	90                   	nop

c00199ac <EnvVarContainer::__loadSystem()>:
c00199ac:	83 ec 10             	sub    esp,0x10
c00199af:	68 c0 ca 02 c0       	push   0xc002cac0
c00199b4:	68 a5 b1 02 c0       	push   0xc002b1a5
c00199b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199bd:	e8 04 fe ff ff       	call   c00197c6 <EnvVarContainer::loadFrom(char const*, char const*)>
c00199c2:	83 c4 1c             	add    esp,0x1c
c00199c5:	c3                   	ret    

c00199c6 <EnvVarContainer::__loadUser()>:
c00199c6:	c3                   	ret    
c00199c7:	90                   	nop

c00199c8 <EnvVarContainer::EnvVarContainer(Process*)>:
c00199c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00199d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00199dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00199e8:	90                   	nop
c00199e9:	c3                   	ret    

c00199ea <EnvVarContainer::~EnvVarContainer()>:
c00199ea:	83 ec 0c             	sub    esp,0xc
c00199ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00199f4:	85 c0                	test   eax,eax
c00199f6:	74 1d                	je     c0019a15 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00199f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00199fe:	85 c0                	test   eax,eax
c0019a00:	74 13                	je     c0019a15 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a09:	83 ec 0c             	sub    esp,0xc
c0019a0c:	50                   	push   eax
c0019a0d:	e8 9a 5b ff ff       	call   c000f5ac <free>
c0019a12:	83 c4 10             	add    esp,0x10
c0019a15:	90                   	nop
c0019a16:	83 c4 0c             	add    esp,0xc
c0019a19:	c3                   	ret    

c0019a1a <Krnl::getEnv(Process*, char const*)>:
c0019a1a:	53                   	push   ebx
c0019a1b:	83 ec 08             	sub    esp,0x8
c0019a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a22:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a26:	39 05 d0 0a 03 c0    	cmp    DWORD PTR ds:0xc0030ad0,eax
c0019a2c:	74 04                	je     c0019a32 <Krnl::getEnv(Process*, char const*)+0x18>
c0019a2e:	85 c0                	test   eax,eax
c0019a30:	75 0b                	jne    c0019a3d <Krnl::getEnv(Process*, char const*)+0x23>
c0019a32:	a1 b4 00 03 c0       	mov    eax,ds:0xc00300b4
c0019a37:	85 c0                	test   eax,eax
c0019a39:	75 19                	jne    c0019a54 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019a3b:	eb 27                	jmp    c0019a64 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019a3d:	52                   	push   edx
c0019a3e:	52                   	push   edx
c0019a3f:	53                   	push   ebx
c0019a40:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019a46:	e8 79 fc ff ff       	call   c00196c4 <EnvVarContainer::getEnv(char const*)>
c0019a4b:	83 c4 10             	add    esp,0x10
c0019a4e:	85 c0                	test   eax,eax
c0019a50:	75 28                	jne    c0019a7a <Krnl::getEnv(Process*, char const*)+0x60>
c0019a52:	eb de                	jmp    c0019a32 <Krnl::getEnv(Process*, char const*)+0x18>
c0019a54:	52                   	push   edx
c0019a55:	52                   	push   edx
c0019a56:	53                   	push   ebx
c0019a57:	50                   	push   eax
c0019a58:	e8 67 fc ff ff       	call   c00196c4 <EnvVarContainer::getEnv(char const*)>
c0019a5d:	83 c4 10             	add    esp,0x10
c0019a60:	85 c0                	test   eax,eax
c0019a62:	75 16                	jne    c0019a7a <Krnl::getEnv(Process*, char const*)+0x60>
c0019a64:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019a68:	a1 b8 00 03 c0       	mov    eax,ds:0xc00300b8
c0019a6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019a71:	83 c4 08             	add    esp,0x8
c0019a74:	5b                   	pop    ebx
c0019a75:	e9 4a fc ff ff       	jmp    c00196c4 <EnvVarContainer::getEnv(char const*)>
c0019a7a:	83 c4 08             	add    esp,0x8
c0019a7d:	5b                   	pop    ebx
c0019a7e:	c3                   	ret    

c0019a7f <Krnl::setEnvSystem(char const*, char const*)>:
c0019a7f:	83 ec 10             	sub    esp,0x10
c0019a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a8a:	ff 35 b8 00 03 c0    	push   DWORD PTR ds:0xc00300b8
c0019a90:	e8 6d fc ff ff       	call   c0019702 <EnvVarContainer::setEnv(char const*, char const*)>
c0019a95:	83 c4 1c             	add    esp,0x1c
c0019a98:	c3                   	ret    

c0019a99 <Krnl::setEnvUser(char const*, char const*)>:
c0019a99:	a1 b4 00 03 c0       	mov    eax,ds:0xc00300b4
c0019a9e:	85 c0                	test   eax,eax
c0019aa0:	74 15                	je     c0019ab7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019aa2:	83 ec 10             	sub    esp,0x10
c0019aa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aad:	50                   	push   eax
c0019aae:	e8 4f fc ff ff       	call   c0019702 <EnvVarContainer::setEnv(char const*, char const*)>
c0019ab3:	83 c4 1c             	add    esp,0x1c
c0019ab6:	c3                   	ret    
c0019ab7:	c3                   	ret    

c0019ab8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019abc:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019ac2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ac6:	e9 37 fc ff ff       	jmp    c0019702 <EnvVarContainer::setEnv(char const*, char const*)>

c0019acb <Krnl::deleteEnvSystem(char const*)>:
c0019acb:	c3                   	ret    

c0019acc <Krnl::deleteEnvUser(char const*)>:
c0019acc:	c3                   	ret    

c0019acd <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019acd:	c3                   	ret    

c0019ace <Krnl::newProcessEnv(Process*)>:
c0019ace:	83 ec 28             	sub    esp,0x28
c0019ad1:	6a 0c                	push   0xc
c0019ad3:	e8 c4 5a ff ff       	call   c000f59c <malloc>
c0019ad8:	5a                   	pop    edx
c0019ad9:	59                   	pop    ecx
c0019ada:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ade:	50                   	push   eax
c0019adf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ae3:	e8 e0 fe ff ff       	call   c00199c8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019aec:	83 c4 2c             	add    esp,0x2c
c0019aef:	c3                   	ret    

c0019af0 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019af0:	57                   	push   edi
c0019af1:	56                   	push   esi
c0019af2:	53                   	push   ebx
c0019af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019af7:	83 ec 0c             	sub    esp,0xc
c0019afa:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019b00:	6a 0c                	push   0xc
c0019b02:	e8 95 5a ff ff       	call   c000f59c <malloc>
c0019b07:	89 c3                	mov    ebx,eax
c0019b09:	58                   	pop    eax
c0019b0a:	5a                   	pop    edx
c0019b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b0f:	53                   	push   ebx
c0019b10:	e8 b3 fe ff ff       	call   c00199c8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b15:	8b 07                	mov    eax,DWORD PTR [edi]
c0019b17:	89 03                	mov    DWORD PTR [ebx],eax
c0019b19:	c1 e0 03             	shl    eax,0x3
c0019b1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b1f:	e8 78 5a ff ff       	call   c000f59c <malloc>
c0019b24:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019b27:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019b29:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019b2c:	c1 e1 03             	shl    ecx,0x3
c0019b2f:	89 c7                	mov    edi,eax
c0019b31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b33:	83 c4 10             	add    esp,0x10
c0019b36:	89 d8                	mov    eax,ebx
c0019b38:	5b                   	pop    ebx
c0019b39:	5e                   	pop    esi
c0019b3a:	5f                   	pop    edi
c0019b3b:	c3                   	ret    

c0019b3c <Krnl::loadSystemEnv()>:
c0019b3c:	53                   	push   ebx
c0019b3d:	83 ec 14             	sub    esp,0x14
c0019b40:	6a 0c                	push   0xc
c0019b42:	e8 55 5a ff ff       	call   c000f59c <malloc>
c0019b47:	89 c3                	mov    ebx,eax
c0019b49:	58                   	pop    eax
c0019b4a:	5a                   	pop    edx
c0019b4b:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c0019b51:	53                   	push   ebx
c0019b52:	e8 71 fe ff ff       	call   c00199c8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b5a:	89 1d b8 00 03 c0    	mov    DWORD PTR ds:0xc00300b8,ebx
c0019b60:	e8 47 fe ff ff       	call   c00199ac <EnvVarContainer::__loadSystem()>
c0019b65:	83 c4 18             	add    esp,0x18
c0019b68:	5b                   	pop    ebx
c0019b69:	c3                   	ret    

c0019b6a <Krnl::loadUserEnv()>:
c0019b6a:	53                   	push   ebx
c0019b6b:	83 ec 14             	sub    esp,0x14
c0019b6e:	6a 0c                	push   0xc
c0019b70:	e8 27 5a ff ff       	call   c000f59c <malloc>
c0019b75:	89 c3                	mov    ebx,eax
c0019b77:	58                   	pop    eax
c0019b78:	5a                   	pop    edx
c0019b79:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c0019b7f:	53                   	push   ebx
c0019b80:	e8 43 fe ff ff       	call   c00199c8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b85:	89 1d b4 00 03 c0    	mov    DWORD PTR ds:0xc00300b4,ebx
c0019b8b:	83 c4 18             	add    esp,0x18
c0019b8e:	5b                   	pop    ebx
c0019b8f:	c3                   	ret    

c0019b90 <Krnl::flushEnv()>:
c0019b90:	c3                   	ret    

c0019b91 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019b91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b95:	8b 15 b4 00 03 c0    	mov    edx,DWORD PTR ds:0xc00300b4
c0019b9b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019ba1:	a1 b8 00 03 c0       	mov    eax,ds:0xc00300b8
c0019ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ba8:	03 01                	add    eax,DWORD PTR [ecx]
c0019baa:	85 d2                	test   edx,edx
c0019bac:	74 02                	je     c0019bb0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019bae:	03 02                	add    eax,DWORD PTR [edx]
c0019bb0:	c3                   	ret    

c0019bb1 <Krnl::getProcessEnvPair(Process*, int)>:
c0019bb1:	57                   	push   edi
c0019bb2:	56                   	push   esi
c0019bb3:	8b 35 b4 00 03 c0    	mov    esi,DWORD PTR ds:0xc00300b4
c0019bb9:	53                   	push   ebx
c0019bba:	85 f6                	test   esi,esi
c0019bbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bc4:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019bca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019bce:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019bd0:	75 16                	jne    c0019be8 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019bd2:	39 c2                	cmp    edx,eax
c0019bd4:	7c 16                	jl     c0019bec <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019bd6:	8b 0d b8 00 03 c0    	mov    ecx,DWORD PTR ds:0xc00300b8
c0019bdc:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019bde:	01 c6                	add    esi,eax
c0019be0:	39 d6                	cmp    esi,edx
c0019be2:	7e 3c                	jle    c0019c20 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019be4:	29 c2                	sub    edx,eax
c0019be6:	eb 04                	jmp    c0019bec <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019be8:	39 c2                	cmp    edx,eax
c0019bea:	7d 05                	jge    c0019bf1 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019bec:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019bef:	eb 20                	jmp    c0019c11 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019bf1:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019bf3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019bf6:	39 d1                	cmp    ecx,edx
c0019bf8:	7e 04                	jle    c0019bfe <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019bfa:	29 c2                	sub    edx,eax
c0019bfc:	eb 10                	jmp    c0019c0e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019bfe:	8b 35 b8 00 03 c0    	mov    esi,DWORD PTR ds:0xc00300b8
c0019c04:	03 0e                	add    ecx,DWORD PTR [esi]
c0019c06:	39 d1                	cmp    ecx,edx
c0019c08:	7e 16                	jle    c0019c20 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019c0a:	29 c2                	sub    edx,eax
c0019c0c:	29 fa                	sub    edx,edi
c0019c0e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c11:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019c14:	8b 02                	mov    eax,DWORD PTR [edx]
c0019c16:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019c19:	89 03                	mov    DWORD PTR [ebx],eax
c0019c1b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019c1e:	eb 1d                	jmp    c0019c3d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019c20:	83 ec 0c             	sub    esp,0xc
c0019c23:	68 c7 b1 02 c0       	push   0xc002b1c7
c0019c28:	e8 18 00 00 00       	call   c0019c45 <Krnl::panic(char const*)>
c0019c2d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019c33:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c3a:	83 c4 10             	add    esp,0x10
c0019c3d:	89 d8                	mov    eax,ebx
c0019c3f:	5b                   	pop    ebx
c0019c40:	5e                   	pop    esi
c0019c41:	5f                   	pop    edi
c0019c42:	c2 04 00             	ret    0x4

c0019c45 <Krnl::panic(char const*)>:
c0019c45:	55                   	push   ebp
c0019c46:	89 e5                	mov    ebp,esp
c0019c48:	53                   	push   ebx
c0019c49:	83 ec 10             	sub    esp,0x10
c0019c4c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019c4f:	fa                   	cli    
c0019c50:	c6 05 c4 00 03 c0 01 	mov    BYTE PTR ds:0xc00300c4,0x1
c0019c57:	53                   	push   ebx
c0019c58:	e8 99 59 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0019c5d:	58                   	pop    eax
c0019c5e:	c6 05 c0 c4 02 c0 00 	mov    BYTE PTR ds:0xc002c4c0,0x0
c0019c65:	5a                   	pop    edx
c0019c66:	53                   	push   ebx
c0019c67:	68 e1 b1 02 c0       	push   0xc002b1e1
c0019c6c:	e8 9a 88 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0019c71:	59                   	pop    ecx
c0019c72:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019c77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c7d:	e8 55 66 ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c0019c82:	83 c4 0c             	add    esp,0xc
c0019c85:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019c8a:	6a 01                	push   0x1
c0019c8c:	6a 0f                	push   0xf
c0019c8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c94:	e8 9d 64 ff ff       	call   c0010136 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019c99:	58                   	pop    eax
c0019c9a:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019c9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ca5:	e8 ae 69 ff ff       	call   c0010658 <VgaText::clearScreen()>
c0019caa:	58                   	pop    eax
c0019cab:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019cb0:	5a                   	pop    edx
c0019cb1:	68 fa b1 02 c0       	push   0xc002b1fa
c0019cb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cbc:	e8 23 6b ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019cc1:	59                   	pop    ecx
c0019cc2:	58                   	pop    eax
c0019cc3:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019cc8:	68 a0 b2 02 c0       	push   0xc002b2a0
c0019ccd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cd3:	e8 0c 6b ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019cd8:	58                   	pop    eax
c0019cd9:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019cde:	5a                   	pop    edx
c0019cdf:	68 16 b2 02 c0       	push   0xc002b216
c0019ce4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cea:	e8 f5 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019cef:	59                   	pop    ecx
c0019cf0:	58                   	pop    eax
c0019cf1:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019cf6:	53                   	push   ebx
c0019cf7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cfd:	e8 e2 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d02:	58                   	pop    eax
c0019d03:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019d08:	5a                   	pop    edx
c0019d09:	68 36 b2 02 c0       	push   0xc002b236
c0019d0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d14:	e8 cb 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d19:	a1 c0 00 03 c0       	mov    eax,ds:0xc00300c0
c0019d1e:	83 c4 10             	add    esp,0x10
c0019d21:	85 c0                	test   eax,eax
c0019d23:	74 02                	je     c0019d27 <Krnl::panic(char const*)+0xe2>
c0019d25:	ff d0                	call   eax
c0019d27:	83 ec 0c             	sub    esp,0xc
c0019d2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d2d:	e8 8c 30 00 00       	call   c001cdbe <Thr::getDriverNameFromAddress(unsigned long)>
c0019d32:	83 c4 10             	add    esp,0x10
c0019d35:	89 c3                	mov    ebx,eax
c0019d37:	85 c0                	test   eax,eax
c0019d39:	0f 84 4e 02 00 00    	je     c0019f8d <Krnl::panic(char const*)+0x348>
c0019d3f:	83 ec 08             	sub    esp,0x8
c0019d42:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019d47:	68 dc b2 02 c0       	push   0xc002b2dc
c0019d4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d52:	e8 8d 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d57:	58                   	pop    eax
c0019d58:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019d5d:	5a                   	pop    edx
c0019d5e:	68 16 b2 02 c0       	push   0xc002b216
c0019d63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d69:	e8 76 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d6e:	59                   	pop    ecx
c0019d6f:	58                   	pop    eax
c0019d70:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019d75:	53                   	push   ebx
c0019d76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d7c:	e8 63 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d81:	83 c4 10             	add    esp,0x10
c0019d84:	83 ec 08             	sub    esp,0x8
c0019d87:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019d8c:	68 35 b2 02 c0       	push   0xc002b235
c0019d91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d97:	e8 48 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d9c:	58                   	pop    eax
c0019d9d:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019da2:	5a                   	pop    edx
c0019da3:	68 34 b3 02 c0       	push   0xc002b334
c0019da8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dae:	e8 31 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019db3:	59                   	pop    ecx
c0019db4:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019db9:	5b                   	pop    ebx
c0019dba:	68 74 b3 02 c0       	push   0xc002b374
c0019dbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dc5:	e8 1a 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019dca:	58                   	pop    eax
c0019dcb:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019dd0:	5a                   	pop    edx
c0019dd1:	68 21 b2 02 c0       	push   0xc002b221
c0019dd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ddc:	e8 03 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019de1:	59                   	pop    ecx
c0019de2:	5b                   	pop    ebx
c0019de3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019de6:	68 39 b2 02 c0       	push   0xc002b239
c0019deb:	e8 1b 87 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0019df0:	58                   	pop    eax
c0019df1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019df4:	5a                   	pop    edx
c0019df5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019df8:	68 42 b2 02 c0       	push   0xc002b242
c0019dfd:	e8 09 87 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0019e02:	59                   	pop    ecx
c0019e03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e06:	5b                   	pop    ebx
c0019e07:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e09:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e0c:	68 4b b2 02 c0       	push   0xc002b24b
c0019e11:	e8 f5 86 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0019e16:	58                   	pop    eax
c0019e17:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019e1c:	5a                   	pop    edx
c0019e1d:	68 b8 b3 02 c0       	push   0xc002b3b8
c0019e22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e28:	e8 b7 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e2d:	59                   	pop    ecx
c0019e2e:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019e33:	5b                   	pop    ebx
c0019e34:	68 54 b2 02 c0       	push   0xc002b254
c0019e39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e3f:	e8 a0 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e44:	0f 20 c0             	mov    eax,cr0
c0019e47:	5a                   	pop    edx
c0019e48:	59                   	pop    ecx
c0019e49:	50                   	push   eax
c0019e4a:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019e4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e55:	e8 44 69 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019e5a:	5b                   	pop    ebx
c0019e5b:	58                   	pop    eax
c0019e5c:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019e61:	68 5e b2 02 c0       	push   0xc002b25e
c0019e66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e6c:	e8 73 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e71:	0f 20 d0             	mov    eax,cr2
c0019e74:	5a                   	pop    edx
c0019e75:	59                   	pop    ecx
c0019e76:	50                   	push   eax
c0019e77:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019e7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e82:	e8 17 69 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019e87:	5b                   	pop    ebx
c0019e88:	58                   	pop    eax
c0019e89:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019e8e:	68 68 b2 02 c0       	push   0xc002b268
c0019e93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e99:	e8 46 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e9e:	0f 20 d8             	mov    eax,cr3
c0019ea1:	5a                   	pop    edx
c0019ea2:	59                   	pop    ecx
c0019ea3:	50                   	push   eax
c0019ea4:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019ea9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eaf:	e8 ea 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019eb4:	5b                   	pop    ebx
c0019eb5:	58                   	pop    eax
c0019eb6:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019ebb:	68 7b b2 02 c0       	push   0xc002b27b
c0019ec0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec6:	e8 19 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019ecb:	0f 20 e0             	mov    eax,cr4
c0019ece:	5a                   	pop    edx
c0019ecf:	59                   	pop    ecx
c0019ed0:	50                   	push   eax
c0019ed1:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019ed6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019edc:	e8 bd 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019ee1:	5b                   	pop    ebx
c0019ee2:	58                   	pop    eax
c0019ee3:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019ee8:	68 85 b2 02 c0       	push   0xc002b285
c0019eed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef3:	e8 ec 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019ef8:	5a                   	pop    edx
c0019ef9:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019efe:	59                   	pop    ecx
c0019eff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f05:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f08:	50                   	push   eax
c0019f09:	e8 90 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f0e:	5b                   	pop    ebx
c0019f0f:	58                   	pop    eax
c0019f10:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019f15:	68 9c b2 02 c0       	push   0xc002b29c
c0019f1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f20:	e8 bf 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019f25:	5a                   	pop    edx
c0019f26:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019f2b:	59                   	pop    ecx
c0019f2c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f32:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f35:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f38:	50                   	push   eax
c0019f39:	e8 60 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f3e:	5b                   	pop    ebx
c0019f3f:	58                   	pop    eax
c0019f40:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019f45:	68 9c b2 02 c0       	push   0xc002b29c
c0019f4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f50:	e8 8f 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019f55:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019f5a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f5d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f63:	8b 12                	mov    edx,DWORD PTR [edx]
c0019f65:	59                   	pop    ecx
c0019f66:	5b                   	pop    ebx
c0019f67:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f6a:	50                   	push   eax
c0019f6b:	e8 2e 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f70:	83 c4 10             	add    esp,0x10
c0019f73:	b2 fe                	mov    dl,0xfe
c0019f75:	e4 60                	in     al,0x60
c0019f77:	3c 1c                	cmp    al,0x1c
c0019f79:	74 04                	je     c0019f7f <Krnl::panic(char const*)+0x33a>
c0019f7b:	3c 5a                	cmp    al,0x5a
c0019f7d:	75 f6                	jne    c0019f75 <Krnl::panic(char const*)+0x330>
c0019f7f:	e4 64                	in     al,0x64
c0019f81:	a8 02                	test   al,0x2
c0019f83:	75 fa                	jne    c0019f7f <Krnl::panic(char const*)+0x33a>
c0019f85:	88 d0                	mov    al,dl
c0019f87:	e6 64                	out    0x64,al
c0019f89:	fa                   	cli    
c0019f8a:	f4                   	hlt    
c0019f8b:	eb e8                	jmp    c0019f75 <Krnl::panic(char const*)+0x330>
c0019f8d:	50                   	push   eax
c0019f8e:	50                   	push   eax
c0019f8f:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019f94:	68 08 b3 02 c0       	push   0xc002b308
c0019f99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f9f:	e8 40 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019fa4:	58                   	pop    eax
c0019fa5:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019faa:	5a                   	pop    edx
c0019fab:	68 16 b2 02 c0       	push   0xc002b216
c0019fb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb6:	e8 29 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019fbb:	59                   	pop    ecx
c0019fbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019fc1:	5b                   	pop    ebx
c0019fc2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019fc5:	83 c0 0c             	add    eax,0xc
c0019fc8:	50                   	push   eax
c0019fc9:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0019fce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd4:	e8 0b 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019fd9:	83 c4 10             	add    esp,0x10
c0019fdc:	e9 a3 fd ff ff       	jmp    c0019d84 <Krnl::panic(char const*)+0x13f>

c0019fe1 <Net::switchEndian16(unsigned short)>:
c0019fe1:	83 ec 04             	sub    esp,0x4
c0019fe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fe8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019fec:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ff0:	c1 f8 08             	sar    eax,0x8
c0019ff3:	89 c2                	mov    edx,eax
c0019ff5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ff9:	c1 e0 08             	shl    eax,0x8
c0019ffc:	09 d0                	or     eax,edx
c0019ffe:	83 c4 04             	add    esp,0x4
c001a001:	c3                   	ret    

c001a002 <Net::switchEndian32(unsigned int)>:
c001a002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a006:	c1 e8 18             	shr    eax,0x18
c001a009:	89 c2                	mov    edx,eax
c001a00b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a00f:	c1 e0 08             	shl    eax,0x8
c001a012:	25 00 00 ff 00       	and    eax,0xff0000
c001a017:	09 c2                	or     edx,eax
c001a019:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a01d:	c1 e8 08             	shr    eax,0x8
c001a020:	25 00 ff 00 00       	and    eax,0xff00
c001a025:	09 c2                	or     edx,eax
c001a027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a02b:	c1 e0 18             	shl    eax,0x18
c001a02e:	09 d0                	or     eax,edx
c001a030:	c3                   	ret    

c001a031 <Net::crc32Calc(unsigned char*, int)>:
c001a031:	83 ec 10             	sub    esp,0x10
c001a034:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a039:	75 07                	jne    c001a042 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a03b:	b8 00 00 00 00       	mov    eax,0x0
c001a040:	eb 7c                	jmp    c001a0be <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a042:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a047:	7f 07                	jg     c001a050 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a049:	b8 00 00 00 00       	mov    eax,0x0
c001a04e:	eb 6e                	jmp    c001a0be <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a050:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a058:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a064:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a068:	7d 4e                	jge    c001a0b8 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a06a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a06e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a072:	01 d0                	add    eax,edx
c001a074:	8a 00                	mov    al,BYTE PTR [eax]
c001a076:	0f b6 c0             	movzx  eax,al
c001a079:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a07d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a085:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a08a:	7f 26                	jg     c001a0b2 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a090:	83 e0 01             	and    eax,0x1
c001a093:	74 0d                	je     c001a0a2 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a095:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a099:	d1 e8                	shr    eax,1
c001a09b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a0a0:	eb 06                	jmp    c001a0a8 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0a6:	d1 e8                	shr    eax,1
c001a0a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a0ac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a0b0:	eb d3                	jmp    c001a085 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a0b2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a0b6:	eb a8                	jmp    c001a060 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a0b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0bc:	f7 d0                	not    eax
c001a0be:	83 c4 10             	add    esp,0x10
c001a0c1:	c3                   	ret    

c001a0c2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a0c2:	57                   	push   edi
c001a0c3:	56                   	push   esi
c001a0c4:	53                   	push   ebx
c001a0c5:	83 ec 60             	sub    esp,0x60
c001a0c8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a0cf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a0d3:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a0db:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a0e0:	7f 1a                	jg     c001a0fc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a0e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a0e9:	8d 50 01             	lea    edx,[eax+0x1]
c001a0ec:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a0f3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a0f6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a0fa:	eb df                	jmp    c001a0db <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a0fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a103:	8d 50 01             	lea    edx,[eax+0x1]
c001a106:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a10d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a110:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a117:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a11b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a11f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a123:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a12b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a12f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a137:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a13b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a13f:	89 c6                	mov    esi,eax
c001a141:	89 d7                	mov    edi,edx
c001a143:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a145:	89 c8                	mov    eax,ecx
c001a147:	89 fa                	mov    edx,edi
c001a149:	89 f3                	mov    ebx,esi
c001a14b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a14f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a153:	89 04 24             	mov    DWORD PTR [esp],eax
c001a156:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a15e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a165:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a169:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a16d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a171:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a179:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a17d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a181:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a185:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a189:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a18d:	89 c6                	mov    esi,eax
c001a18f:	89 d7                	mov    edi,edx
c001a191:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a193:	89 c8                	mov    eax,ecx
c001a195:	89 fa                	mov    edx,edi
c001a197:	89 f3                	mov    ebx,esi
c001a199:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a19d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a1a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1a5:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a1ad:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a1b4:	0f b7 c0             	movzx  eax,ax
c001a1b7:	c1 f8 08             	sar    eax,0x8
c001a1ba:	89 c1                	mov    ecx,eax
c001a1bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1c3:	8d 50 01             	lea    edx,[eax+0x1]
c001a1c6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a1cd:	88 ca                	mov    dl,cl
c001a1cf:	88 10                	mov    BYTE PTR [eax],dl
c001a1d1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a1d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1df:	8d 48 01             	lea    ecx,[eax+0x1]
c001a1e2:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a1e9:	88 10                	mov    BYTE PTR [eax],dl
c001a1eb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a1ef:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a1f3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a1fa:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a1fe:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a202:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a206:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a20a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a20e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a212:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a216:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a21a:	89 c6                	mov    esi,eax
c001a21c:	89 d7                	mov    edi,edx
c001a21e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a220:	89 c8                	mov    eax,ecx
c001a222:	89 fa                	mov    edx,edi
c001a224:	89 f3                	mov    ebx,esi
c001a226:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a22a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a22e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a232:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a236:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a23d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a244:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a248:	50                   	push   eax
c001a249:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a24d:	e8 df fd ff ff       	call   c001a031 <Net::crc32Calc(unsigned char*, int)>
c001a252:	83 c4 08             	add    esp,0x8
c001a255:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a259:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a25d:	c1 e8 18             	shr    eax,0x18
c001a260:	89 c1                	mov    ecx,eax
c001a262:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a269:	8d 50 01             	lea    edx,[eax+0x1]
c001a26c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a273:	88 ca                	mov    dl,cl
c001a275:	88 10                	mov    BYTE PTR [eax],dl
c001a277:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a27b:	c1 e8 10             	shr    eax,0x10
c001a27e:	89 c1                	mov    ecx,eax
c001a280:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a287:	8d 50 01             	lea    edx,[eax+0x1]
c001a28a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a291:	88 ca                	mov    dl,cl
c001a293:	88 10                	mov    BYTE PTR [eax],dl
c001a295:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a299:	c1 e8 08             	shr    eax,0x8
c001a29c:	89 c1                	mov    ecx,eax
c001a29e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2a5:	8d 50 01             	lea    edx,[eax+0x1]
c001a2a8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2af:	88 ca                	mov    dl,cl
c001a2b1:	88 10                	mov    BYTE PTR [eax],dl
c001a2b3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2ba:	8d 50 01             	lea    edx,[eax+0x1]
c001a2bd:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2c4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a2c8:	88 10                	mov    BYTE PTR [eax],dl
c001a2ca:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a2ce:	83 c4 60             	add    esp,0x60
c001a2d1:	5b                   	pop    ebx
c001a2d2:	5e                   	pop    esi
c001a2d3:	5f                   	pop    edi
c001a2d4:	c3                   	ret    

c001a2d5 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a2d5:	57                   	push   edi
c001a2d6:	56                   	push   esi
c001a2d7:	53                   	push   ebx
c001a2d8:	83 ec 70             	sub    esp,0x70
c001a2db:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a2e2:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a2e6:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a2ee:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a2f5:	83 c0 0e             	add    eax,0xe
c001a2f8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a2fc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a303:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a307:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a30f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a317:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a31b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a31f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a323:	89 c6                	mov    esi,eax
c001a325:	89 d7                	mov    edi,edx
c001a327:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a329:	89 c8                	mov    eax,ecx
c001a32b:	89 fa                	mov    edx,edi
c001a32d:	89 f3                	mov    ebx,esi
c001a32f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a333:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a337:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a33b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a343:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a34a:	83 c0 08             	add    eax,0x8
c001a34d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a351:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a358:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a35c:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a364:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a368:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a36c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a370:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a374:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a378:	89 c6                	mov    esi,eax
c001a37a:	89 d7                	mov    edi,edx
c001a37c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a37e:	89 c8                	mov    eax,ecx
c001a380:	89 fa                	mov    edx,edi
c001a382:	89 f3                	mov    ebx,esi
c001a384:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a388:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a38c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a390:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a398:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a39f:	8d 50 01             	lea    edx,[eax+0x1]
c001a3a2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a3a9:	8a 00                	mov    al,BYTE PTR [eax]
c001a3ab:	0f b6 c0             	movzx  eax,al
c001a3ae:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a3b3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3ba:	8d 50 01             	lea    edx,[eax+0x1]
c001a3bd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a3c4:	8a 00                	mov    al,BYTE PTR [eax]
c001a3c6:	0f b6 c0             	movzx  eax,al
c001a3c9:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a3ce:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a3d3:	c1 e0 08             	shl    eax,0x8
c001a3d6:	89 c2                	mov    edx,eax
c001a3d8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a3dc:	09 d0                	or     eax,edx
c001a3de:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a3e5:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a3e9:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a3f1:	75 46                	jne    c001a439 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a3f3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a3fa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a3fd:	66 3d dc 05          	cmp    ax,0x5dc
c001a401:	77 16                	ja     c001a419 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a403:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a40a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a40d:	0f b7 c0             	movzx  eax,ax
c001a410:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a417:	eb 20                	jmp    c001a439 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a419:	83 ec 0c             	sub    esp,0xc
c001a41c:	68 e0 b3 02 c0       	push   0xc002b3e0
c001a421:	e8 e5 80 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001a426:	83 c4 10             	add    esp,0x10
c001a429:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a430:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a434:	e9 17 01 00 00       	jmp    c001a550 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a439:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a440:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a447:	8b 12                	mov    edx,DWORD PTR [edx]
c001a449:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a44d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a454:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a458:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a45c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a464:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a468:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a46c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a470:	89 c6                	mov    esi,eax
c001a472:	89 d7                	mov    edi,edx
c001a474:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a476:	89 c8                	mov    eax,ecx
c001a478:	89 fa                	mov    edx,edi
c001a47a:	89 f3                	mov    ebx,esi
c001a47c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a480:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a484:	89 04 24             	mov    DWORD PTR [esp],eax
c001a487:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a48e:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a495:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a49c:	8d 50 01             	lea    edx,[eax+0x1]
c001a49f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4a6:	8a 00                	mov    al,BYTE PTR [eax]
c001a4a8:	0f b6 c0             	movzx  eax,al
c001a4ab:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a4af:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4b6:	8d 50 01             	lea    edx,[eax+0x1]
c001a4b9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4c0:	8a 00                	mov    al,BYTE PTR [eax]
c001a4c2:	0f b6 c0             	movzx  eax,al
c001a4c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a4c9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4d0:	8d 50 01             	lea    edx,[eax+0x1]
c001a4d3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4da:	8a 00                	mov    al,BYTE PTR [eax]
c001a4dc:	0f b6 c0             	movzx  eax,al
c001a4df:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a4e3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4ea:	8d 50 01             	lea    edx,[eax+0x1]
c001a4ed:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4f4:	8a 00                	mov    al,BYTE PTR [eax]
c001a4f6:	0f b6 c0             	movzx  eax,al
c001a4f9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a4fd:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a501:	c1 e0 18             	shl    eax,0x18
c001a504:	89 c2                	mov    edx,eax
c001a506:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a50a:	c1 e0 10             	shl    eax,0x10
c001a50d:	09 c2                	or     edx,eax
c001a50f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a513:	c1 e0 08             	shl    eax,0x8
c001a516:	09 d0                	or     eax,edx
c001a518:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a51c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a520:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a527:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a52b:	83 e8 04             	sub    eax,0x4
c001a52e:	83 ec 08             	sub    esp,0x8
c001a531:	50                   	push   eax
c001a532:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a536:	e8 f6 fa ff ff       	call   c001a031 <Net::crc32Calc(unsigned char*, int)>
c001a53b:	83 c4 10             	add    esp,0x10
c001a53e:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a542:	0f 94 c2             	sete   dl
c001a545:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a54c:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a54f:	90                   	nop
c001a550:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a557:	83 c4 70             	add    esp,0x70
c001a55a:	5b                   	pop    ebx
c001a55b:	5e                   	pop    esi
c001a55c:	5f                   	pop    edi
c001a55d:	c2 04 00             	ret    0x4

c001a560 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a560:	55                   	push   ebp
c001a561:	57                   	push   edi
c001a562:	56                   	push   esi
c001a563:	53                   	push   ebx
c001a564:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a56a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a571:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a573:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a576:	80 fb 40             	cmp    bl,0x40
c001a579:	75 1b                	jne    c001a596 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a57b:	8a 16                	mov    dl,BYTE PTR [esi]
c001a57d:	84 d2                	test   dl,dl
c001a57f:	0f 84 f1 00 00 00    	je     c001a676 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a585:	8d 46 01             	lea    eax,[esi+0x1]
c001a588:	80 fa 3a             	cmp    dl,0x3a
c001a58b:	74 04                	je     c001a591 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a58d:	89 c6                	mov    esi,eax
c001a58f:	eb ea                	jmp    c001a57b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a591:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a594:	89 c6                	mov    esi,eax
c001a596:	50                   	push   eax
c001a597:	6a 40                	push   0x40
c001a599:	6a 00                	push   0x0
c001a59b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a59f:	50                   	push   eax
c001a5a0:	e8 ab 61 fe ff       	call   c0000750 <memset>
c001a5a5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a5ac:	31 c0                	xor    eax,eax
c001a5ae:	83 c4 10             	add    esp,0x10
c001a5b1:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a5b3:	84 c9                	test   cl,cl
c001a5b5:	0f 84 bb 00 00 00    	je     c001a676 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5bb:	3d c7 00 00 00       	cmp    eax,0xc7
c001a5c0:	0f 8f b0 00 00 00    	jg     c001a676 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5c6:	80 f9 0a             	cmp    cl,0xa
c001a5c9:	0f 85 98 00 00 00    	jne    c001a667 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a5cf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a5d4:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a5d8:	a8 df                	test   al,0xdf
c001a5da:	0f 94 c1             	sete   cl
c001a5dd:	3c 23                	cmp    al,0x23
c001a5df:	0f 94 c2             	sete   dl
c001a5e2:	08 d1                	or     cl,dl
c001a5e4:	75 4a                	jne    c001a630 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a5e6:	8d 50 f7             	lea    edx,[eax-0x9]
c001a5e9:	80 fa 01             	cmp    dl,0x1
c001a5ec:	76 42                	jbe    c001a630 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a5ee:	3c 5b                	cmp    al,0x5b
c001a5f0:	75 42                	jne    c001a634 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a5f2:	80 fb 40             	cmp    bl,0x40
c001a5f5:	75 39                	jne    c001a630 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a5f7:	83 ec 0c             	sub    esp,0xc
c001a5fa:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a5fe:	52                   	push   edx
c001a5ff:	e8 68 61 fe ff       	call   c000076c <strlen>
c001a604:	83 c4 10             	add    esp,0x10
c001a607:	83 f8 3f             	cmp    eax,0x3f
c001a60a:	77 6a                	ja     c001a676 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a60c:	50                   	push   eax
c001a60d:	50                   	push   eax
c001a60e:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a612:	52                   	push   edx
c001a613:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a617:	52                   	push   edx
c001a618:	e8 ef 61 fe ff       	call   c000080c <strcpy>
c001a61d:	58                   	pop    eax
c001a61e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a622:	52                   	push   edx
c001a623:	e8 44 61 fe ff       	call   c000076c <strlen>
c001a628:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a62d:	83 c4 10             	add    esp,0x10
c001a630:	31 d2                	xor    edx,edx
c001a632:	eb 3a                	jmp    c001a66e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a634:	80 fb 40             	cmp    bl,0x40
c001a637:	74 06                	je     c001a63f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a639:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a63d:	eb 20                	jmp    c001a65f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a63f:	50                   	push   eax
c001a640:	50                   	push   eax
c001a641:	55                   	push   ebp
c001a642:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a646:	50                   	push   eax
c001a647:	e8 4c 62 fe ff       	call   c0000898 <strcmp>
c001a64c:	83 c4 10             	add    esp,0x10
c001a64f:	85 c0                	test   eax,eax
c001a651:	75 dd                	jne    c001a630 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a653:	eb e4                	jmp    c001a639 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a655:	8d 50 01             	lea    edx,[eax+0x1]
c001a658:	80 f9 3d             	cmp    cl,0x3d
c001a65b:	74 1d                	je     c001a67a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a65d:	89 d0                	mov    eax,edx
c001a65f:	8a 08                	mov    cl,BYTE PTR [eax]
c001a661:	84 c9                	test   cl,cl
c001a663:	75 f0                	jne    c001a655 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a665:	eb 0f                	jmp    c001a676 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a667:	8d 50 01             	lea    edx,[eax+0x1]
c001a66a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a66e:	47                   	inc    edi
c001a66f:	89 d0                	mov    eax,edx
c001a671:	e9 3b ff ff ff       	jmp    c001a5b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a676:	31 c0                	xor    eax,eax
c001a678:	eb 33                	jmp    c001a6ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a67e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a681:	50                   	push   eax
c001a682:	50                   	push   eax
c001a683:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a687:	50                   	push   eax
c001a688:	56                   	push   esi
c001a689:	e8 0a 62 fe ff       	call   c0000898 <strcmp>
c001a68e:	83 c4 10             	add    esp,0x10
c001a691:	85 c0                	test   eax,eax
c001a693:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a697:	75 97                	jne    c001a630 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a699:	51                   	push   ecx
c001a69a:	51                   	push   ecx
c001a69b:	52                   	push   edx
c001a69c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a6a3:	e8 64 61 fe ff       	call   c000080c <strcpy>
c001a6a8:	83 c4 10             	add    esp,0x10
c001a6ab:	b0 01                	mov    al,0x1
c001a6ad:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a6b3:	5b                   	pop    ebx
c001a6b4:	5e                   	pop    esi
c001a6b5:	5f                   	pop    edi
c001a6b6:	5d                   	pop    ebp
c001a6b7:	c3                   	ret    

c001a6b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a6b8:	57                   	push   edi
c001a6b9:	56                   	push   esi
c001a6ba:	53                   	push   ebx
c001a6bb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a6c1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a6c8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a6cf:	53                   	push   ebx
c001a6d0:	e8 97 60 fe ff       	call   c000076c <strlen>
c001a6d5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a6d8:	89 c7                	mov    edi,eax
c001a6da:	e8 8d 60 fe ff       	call   c000076c <strlen>
c001a6df:	83 c4 10             	add    esp,0x10
c001a6e2:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a6e6:	3d ff 00 00 00       	cmp    eax,0xff
c001a6eb:	0f 87 d3 00 00 00    	ja     c001a7c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a6f1:	57                   	push   edi
c001a6f2:	57                   	push   edi
c001a6f3:	56                   	push   esi
c001a6f4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a6f8:	56                   	push   esi
c001a6f9:	e8 0e 61 fe ff       	call   c000080c <strcpy>
c001a6fe:	58                   	pop    eax
c001a6ff:	5a                   	pop    edx
c001a700:	68 82 b7 02 c0       	push   0xc002b782
c001a705:	56                   	push   esi
c001a706:	e8 41 62 fe ff       	call   c000094c <strcat>
c001a70b:	59                   	pop    ecx
c001a70c:	5f                   	pop    edi
c001a70d:	53                   	push   ebx
c001a70e:	56                   	push   esi
c001a70f:	e8 38 62 fe ff       	call   c000094c <strcat>
c001a714:	58                   	pop    eax
c001a715:	5a                   	pop    edx
c001a716:	68 2c b4 02 c0       	push   0xc002b42c
c001a71b:	56                   	push   esi
c001a71c:	e8 2b 62 fe ff       	call   c000094c <strcat>
c001a721:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a728:	e8 6f 4e ff ff       	call   c000f59c <malloc>
c001a72d:	83 c4 0c             	add    esp,0xc
c001a730:	89 c3                	mov    ebx,eax
c001a732:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c001a738:	56                   	push   esi
c001a739:	50                   	push   eax
c001a73a:	e8 2b 83 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001a73f:	83 c4 10             	add    esp,0x10
c001a742:	85 db                	test   ebx,ebx
c001a744:	74 7e                	je     c001a7c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a746:	51                   	push   ecx
c001a747:	51                   	push   ecx
c001a748:	6a 01                	push   0x1
c001a74a:	53                   	push   ebx
c001a74b:	e8 7e 83 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	85 c0                	test   eax,eax
c001a755:	74 08                	je     c001a75f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a757:	83 ec 0c             	sub    esp,0xc
c001a75a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a75c:	53                   	push   ebx
c001a75d:	eb 5f                	jmp    c001a7be <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a75f:	52                   	push   edx
c001a760:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a764:	50                   	push   eax
c001a765:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a769:	50                   	push   eax
c001a76a:	53                   	push   ebx
c001a76b:	e8 0a 86 ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001a770:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a774:	83 c4 10             	add    esp,0x10
c001a777:	89 c1                	mov    ecx,eax
c001a779:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a77d:	74 31                	je     c001a7b0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a77f:	83 ec 0c             	sub    esp,0xc
c001a782:	50                   	push   eax
c001a783:	e8 14 4e ff ff       	call   c000f59c <malloc>
c001a788:	89 c6                	mov    esi,eax
c001a78a:	58                   	pop    eax
c001a78b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a78d:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a791:	52                   	push   edx
c001a792:	56                   	push   esi
c001a793:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a797:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a79b:	53                   	push   ebx
c001a79c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a79f:	83 c4 20             	add    esp,0x20
c001a7a2:	85 c0                	test   eax,eax
c001a7a4:	75 0a                	jne    c001a7b0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7aa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a7ae:	74 18                	je     c001a7c8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a7b0:	83 ec 0c             	sub    esp,0xc
c001a7b3:	53                   	push   ebx
c001a7b4:	e8 73 83 ff ff       	call   c0012b2c <File::close()>
c001a7b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7c1:	83 c4 10             	add    esp,0x10
c001a7c4:	31 c0                	xor    eax,eax
c001a7c6:	eb 3b                	jmp    c001a803 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a7c8:	83 ec 0c             	sub    esp,0xc
c001a7cb:	53                   	push   ebx
c001a7cc:	e8 5b 83 ff ff       	call   c0012b2c <File::close()>
c001a7d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7d9:	83 c4 0c             	add    esp,0xc
c001a7dc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a7e3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a7ea:	56                   	push   esi
c001a7eb:	e8 70 fd ff ff       	call   c001a560 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a7f0:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7f3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a7f7:	e8 b0 4d ff ff       	call   c000f5ac <free>
c001a7fc:	83 c4 10             	add    esp,0x10
c001a7ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a803:	81 c4 20 01 00 00    	add    esp,0x120
c001a809:	5b                   	pop    ebx
c001a80a:	5e                   	pop    esi
c001a80b:	5f                   	pop    edi
c001a80c:	c3                   	ret    

c001a80d <Reg::getLine(char*, char*, char*)>:
c001a80d:	57                   	push   edi
c001a80e:	56                   	push   esi
c001a80f:	53                   	push   ebx
c001a810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a814:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a818:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a81c:	57                   	push   edi
c001a81d:	56                   	push   esi
c001a81e:	53                   	push   ebx
c001a81f:	68 31 b4 02 c0       	push   0xc002b431
c001a824:	e8 8f fe ff ff       	call   c001a6b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a829:	83 c4 10             	add    esp,0x10
c001a82c:	84 c0                	test   al,al
c001a82e:	75 10                	jne    c001a840 <Reg::getLine(char*, char*, char*)+0x33>
c001a830:	57                   	push   edi
c001a831:	56                   	push   esi
c001a832:	53                   	push   ebx
c001a833:	68 56 b4 02 c0       	push   0xc002b456
c001a838:	e8 7b fe ff ff       	call   c001a6b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a83d:	83 c4 10             	add    esp,0x10
c001a840:	5b                   	pop    ebx
c001a841:	5e                   	pop    esi
c001a842:	5f                   	pop    edi
c001a843:	c3                   	ret    

c001a844 <Reg::readInt(char*, char*, int*)>:
c001a844:	55                   	push   ebp
c001a845:	57                   	push   edi
c001a846:	56                   	push   esi
c001a847:	53                   	push   ebx
c001a848:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a84e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a852:	57                   	push   edi
c001a853:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a85a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a861:	e8 a7 ff ff ff       	call   c001a80d <Reg::getLine(char*, char*, char*)>
c001a866:	83 c4 10             	add    esp,0x10
c001a869:	84 c0                	test   al,al
c001a86b:	0f 84 b3 00 00 00    	je     c001a924 <Reg::readInt(char*, char*, int*)+0xe0>
c001a871:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a875:	80 fa 2b             	cmp    dl,0x2b
c001a878:	74 0c                	je     c001a886 <Reg::readInt(char*, char*, int*)+0x42>
c001a87a:	80 fa 2d             	cmp    dl,0x2d
c001a87d:	75 0e                	jne    c001a88d <Reg::readInt(char*, char*, int*)+0x49>
c001a87f:	ba 01 00 00 00       	mov    edx,0x1
c001a884:	eb 0b                	jmp    c001a891 <Reg::readInt(char*, char*, int*)+0x4d>
c001a886:	ba 01 00 00 00       	mov    edx,0x1
c001a88b:	eb 02                	jmp    c001a88f <Reg::readInt(char*, char*, int*)+0x4b>
c001a88d:	31 d2                	xor    edx,edx
c001a88f:	31 c0                	xor    eax,eax
c001a891:	be 0a 00 00 00       	mov    esi,0xa
c001a896:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a89b:	75 20                	jne    c001a8bd <Reg::readInt(char*, char*, int*)+0x79>
c001a89d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a8a1:	80 f9 78             	cmp    cl,0x78
c001a8a4:	75 0a                	jne    c001a8b0 <Reg::readInt(char*, char*, int*)+0x6c>
c001a8a6:	83 c2 02             	add    edx,0x2
c001a8a9:	be 10 00 00 00       	mov    esi,0x10
c001a8ae:	eb 0d                	jmp    c001a8bd <Reg::readInt(char*, char*, int*)+0x79>
c001a8b0:	80 f9 62             	cmp    cl,0x62
c001a8b3:	75 08                	jne    c001a8bd <Reg::readInt(char*, char*, int*)+0x79>
c001a8b5:	83 c2 02             	add    edx,0x2
c001a8b8:	be 02 00 00 00       	mov    esi,0x2
c001a8bd:	01 d7                	add    edi,edx
c001a8bf:	31 d2                	xor    edx,edx
c001a8c1:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a8c3:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a8c7:	80 fb 0d             	cmp    bl,0xd
c001a8ca:	0f 94 c3             	sete   bl
c001a8cd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a8d2:	0f 94 c1             	sete   cl
c001a8d5:	08 cb                	or     bl,cl
c001a8d7:	75 3a                	jne    c001a913 <Reg::readInt(char*, char*, int*)+0xcf>
c001a8d9:	0f af d6             	imul   edx,esi
c001a8dc:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a8e1:	83 fe 10             	cmp    esi,0x10
c001a8e4:	75 26                	jne    c001a90c <Reg::readInt(char*, char*, int*)+0xc8>
c001a8e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a8ea:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a8ed:	89 e9                	mov    ecx,ebp
c001a8ef:	80 f9 05             	cmp    cl,0x5
c001a8f2:	77 06                	ja     c001a8fa <Reg::readInt(char*, char*, int*)+0xb6>
c001a8f4:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a8f8:	eb 16                	jmp    c001a910 <Reg::readInt(char*, char*, int*)+0xcc>
c001a8fa:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a8fe:	83 e9 61             	sub    ecx,0x61
c001a901:	80 f9 05             	cmp    cl,0x5
c001a904:	77 06                	ja     c001a90c <Reg::readInt(char*, char*, int*)+0xc8>
c001a906:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a90a:	eb 04                	jmp    c001a910 <Reg::readInt(char*, char*, int*)+0xcc>
c001a90c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a910:	47                   	inc    edi
c001a911:	eb ae                	jmp    c001a8c1 <Reg::readInt(char*, char*, int*)+0x7d>
c001a913:	84 c0                	test   al,al
c001a915:	74 02                	je     c001a919 <Reg::readInt(char*, char*, int*)+0xd5>
c001a917:	f7 da                	neg    edx
c001a919:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a920:	89 10                	mov    DWORD PTR [eax],edx
c001a922:	88 d8                	mov    al,bl
c001a924:	81 c4 ec 00 00 00    	add    esp,0xec
c001a92a:	5b                   	pop    ebx
c001a92b:	5e                   	pop    esi
c001a92c:	5f                   	pop    edi
c001a92d:	5d                   	pop    ebp
c001a92e:	c3                   	ret    

c001a92f <Reg::readString(char*, char*, char*, int)>:
c001a92f:	57                   	push   edi
c001a930:	56                   	push   esi
c001a931:	53                   	push   ebx
c001a932:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a938:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a93f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a943:	57                   	push   edi
c001a944:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a94b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a952:	e8 b6 fe ff ff       	call   c001a80d <Reg::getLine(char*, char*, char*)>
c001a957:	83 c4 10             	add    esp,0x10
c001a95a:	89 c6                	mov    esi,eax
c001a95c:	84 c0                	test   al,al
c001a95e:	74 44                	je     c001a9a4 <Reg::readString(char*, char*, char*, int)+0x75>
c001a960:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a967:	31 c0                	xor    eax,eax
c001a969:	4a                   	dec    edx
c001a96a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a96d:	84 c9                	test   cl,cl
c001a96f:	74 0f                	je     c001a980 <Reg::readString(char*, char*, char*, int)+0x51>
c001a971:	39 c2                	cmp    edx,eax
c001a973:	7e 0b                	jle    c001a980 <Reg::readString(char*, char*, char*, int)+0x51>
c001a975:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a978:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a97d:	40                   	inc    eax
c001a97e:	eb ea                	jmp    c001a96a <Reg::readString(char*, char*, char*, int)+0x3b>
c001a980:	83 ec 0c             	sub    esp,0xc
c001a983:	53                   	push   ebx
c001a984:	e8 e3 5d fe ff       	call   c000076c <strlen>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a991:	75 11                	jne    c001a9a4 <Reg::readString(char*, char*, char*, int)+0x75>
c001a993:	83 ec 0c             	sub    esp,0xc
c001a996:	53                   	push   ebx
c001a997:	e8 d0 5d fe ff       	call   c000076c <strlen>
c001a99c:	83 c4 10             	add    esp,0x10
c001a99f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a9a4:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a9aa:	89 f0                	mov    eax,esi
c001a9ac:	5b                   	pop    ebx
c001a9ad:	5e                   	pop    esi
c001a9ae:	5f                   	pop    edi
c001a9af:	c3                   	ret    

c001a9b0 <Reg::readBool(char*, char*, bool*)>:
c001a9b0:	83 ec 20             	sub    esp,0x20
c001a9b3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a9b7:	50                   	push   eax
c001a9b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9c0:	e8 7f fe ff ff       	call   c001a844 <Reg::readInt(char*, char*, int*)>
c001a9c5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a9ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a9ce:	0f 95 02             	setne  BYTE PTR [edx]
c001a9d1:	83 c4 2c             	add    esp,0x2c
c001a9d4:	c3                   	ret    

c001a9d5 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a9d5:	53                   	push   ebx
c001a9d6:	83 ec 1c             	sub    esp,0x1c
c001a9d9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a9dd:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a9e1:	50                   	push   eax
c001a9e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9ea:	e8 c1 ff ff ff       	call   c001a9b0 <Reg::readBool(char*, char*, bool*)>
c001a9ef:	83 c4 10             	add    esp,0x10
c001a9f2:	84 c0                	test   al,al
c001a9f4:	74 04                	je     c001a9fa <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a9f6:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a9fa:	88 d8                	mov    al,bl
c001a9fc:	83 c4 18             	add    esp,0x18
c001a9ff:	5b                   	pop    ebx
c001aa00:	c3                   	ret    

c001aa01 <Reg::readIntWithDefault(char*, char*, int)>:
c001aa01:	53                   	push   ebx
c001aa02:	83 ec 1c             	sub    esp,0x1c
c001aa05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa09:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa0d:	50                   	push   eax
c001aa0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa16:	e8 29 fe ff ff       	call   c001a844 <Reg::readInt(char*, char*, int*)>
c001aa1b:	83 c4 10             	add    esp,0x10
c001aa1e:	84 c0                	test   al,al
c001aa20:	74 04                	je     c001aa26 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aa22:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aa26:	89 d8                	mov    eax,ebx
c001aa28:	83 c4 18             	add    esp,0x18
c001aa2b:	5b                   	pop    ebx
c001aa2c:	c3                   	ret    

c001aa2d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001aa2d:	57                   	push   edi
c001aa2e:	56                   	push   esi
c001aa2f:	56                   	push   esi
c001aa30:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa34:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa38:	56                   	push   esi
c001aa39:	57                   	push   edi
c001aa3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa42:	e8 e8 fe ff ff       	call   c001a92f <Reg::readString(char*, char*, char*, int)>
c001aa47:	83 c4 10             	add    esp,0x10
c001aa4a:	84 c0                	test   al,al
c001aa4c:	75 1a                	jne    c001aa68 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001aa4e:	51                   	push   ecx
c001aa4f:	56                   	push   esi
c001aa50:	6a 00                	push   0x0
c001aa52:	57                   	push   edi
c001aa53:	e8 f8 5c fe ff       	call   c0000750 <memset>
c001aa58:	8d 4e ff             	lea    ecx,[esi-0x1]
c001aa5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aa5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa61:	83 c4 10             	add    esp,0x10
c001aa64:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa68:	89 f8                	mov    eax,edi
c001aa6a:	5a                   	pop    edx
c001aa6b:	5e                   	pop    esi
c001aa6c:	5f                   	pop    edi
c001aa6d:	c3                   	ret    

c001aa6e <Sys::eject(regs*)>:
c001aa6e:	83 ec 0c             	sub    esp,0xc
c001aa71:	83 ca ff             	or     edx,0xffffffff
c001aa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa78:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aa7b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aa80:	83 e9 41             	sub    ecx,0x41
c001aa83:	83 f9 19             	cmp    ecx,0x19
c001aa86:	77 18                	ja     c001aaa0 <Sys::eject(regs*)+0x32>
c001aa88:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c001aa8f:	85 c9                	test   ecx,ecx
c001aa91:	74 0d                	je     c001aaa0 <Sys::eject(regs*)+0x32>
c001aa93:	83 ec 0c             	sub    esp,0xc
c001aa96:	51                   	push   ecx
c001aa97:	e8 28 b3 ff ff       	call   c0015dc4 <LogicalDisk::eject()>
c001aa9c:	83 c4 10             	add    esp,0x10
c001aa9f:	99                   	cdq    
c001aaa0:	83 c4 0c             	add    esp,0xc
c001aaa3:	c3                   	ret    

c001aaa4 <Sys::exit(regs*)>:
c001aaa4:	83 ec 18             	sub    esp,0x18
c001aaa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aaae:	e8 bc 35 00 00       	call   c001e06f <terminateTask(int)>
c001aab3:	83 c8 ff             	or     eax,0xffffffff
c001aab6:	83 c4 1c             	add    esp,0x1c
c001aab9:	89 c2                	mov    edx,eax
c001aabb:	c3                   	ret    

c001aabc <Sys::getCwd(regs*)>:
c001aabc:	83 ec 10             	sub    esp,0x10
c001aabf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aac3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aac6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aac9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aace:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aad1:	e8 96 7d ff ff       	call   c001286c <Fs::getcwd(Process*, char*, int)>
c001aad6:	83 c4 1c             	add    esp,0x1c
c001aad9:	99                   	cdq    
c001aada:	c3                   	ret    

c001aadb <Sys::getPID(regs*)>:
c001aadb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aae0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aae3:	8b 00                	mov    eax,DWORD PTR [eax]
c001aae5:	99                   	cdq    
c001aae6:	c3                   	ret    

c001aae7 <Sys::getRAMData(regs*)>:
c001aae7:	8b 0d d4 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5d4
c001aaed:	6b 05 d0 d5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d5d0,0x64
c001aaf4:	99                   	cdq    
c001aaf5:	f7 f9                	idiv   ecx
c001aaf7:	c1 e0 18             	shl    eax,0x18
c001aafa:	09 c8                	or     eax,ecx
c001aafc:	99                   	cdq    
c001aafd:	c3                   	ret    

c001aafe <Sys::getVGAPtr(regs*)>:
c001aafe:	55                   	push   ebp
c001aaff:	57                   	push   edi
c001ab00:	56                   	push   esi
c001ab01:	53                   	push   ebx
c001ab02:	83 ec 18             	sub    esp,0x18
c001ab05:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab09:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ab0c:	e8 aa 30 00 00       	call   c001dbbb <Thr::processFromPID(int)>
c001ab11:	83 c4 10             	add    esp,0x10
c001ab14:	89 c1                	mov    ecx,eax
c001ab16:	b8 01 00 00 00       	mov    eax,0x1
c001ab1b:	85 c9                	test   ecx,ecx
c001ab1d:	74 59                	je     c001ab78 <Sys::getVGAPtr(regs*)+0x7a>
c001ab1f:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ab25:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ab29:	74 0c                	je     c001ab37 <Sys::getVGAPtr(regs*)+0x39>
c001ab2b:	83 ec 0c             	sub    esp,0xc
c001ab2e:	53                   	push   ebx
c001ab2f:	e8 a3 57 ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001ab34:	83 c4 10             	add    esp,0x10
c001ab37:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ab3a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ab3d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ab42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab44:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ab47:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab4a:	81 c3 82 00 00 00    	add    ebx,0x82
c001ab50:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ab56:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab59:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ab5c:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ab62:	50                   	push   eax
c001ab63:	50                   	push   eax
c001ab64:	53                   	push   ebx
c001ab65:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab68:	05 a8 0f 00 00       	add    eax,0xfa8
c001ab6d:	50                   	push   eax
c001ab6e:	e8 99 5c fe ff       	call   c000080c <strcpy>
c001ab73:	83 c4 10             	add    esp,0x10
c001ab76:	31 c0                	xor    eax,eax
c001ab78:	83 c4 0c             	add    esp,0xc
c001ab7b:	31 d2                	xor    edx,edx
c001ab7d:	5b                   	pop    ebx
c001ab7e:	5e                   	pop    esi
c001ab7f:	5f                   	pop    edi
c001ab80:	5d                   	pop    ebp
c001ab81:	c3                   	ret    

c001ab82 <Sys::loadDLL(regs*)>:
c001ab82:	56                   	push   esi
c001ab83:	53                   	push   ebx
c001ab84:	31 d2                	xor    edx,edx
c001ab86:	51                   	push   ecx
c001ab87:	b8 01 00 00 00       	mov    eax,0x1
c001ab8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab90:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ab94:	0f 84 8c 00 00 00    	je     c001ac26 <Sys::loadDLL(regs*)+0xa4>
c001ab9a:	83 ec 0c             	sub    esp,0xc
c001ab9d:	68 14 01 00 00       	push   0x114
c001aba2:	e8 f5 49 ff ff       	call   c000f59c <malloc>
c001aba7:	83 c4 0c             	add    esp,0xc
c001abaa:	89 c3                	mov    ebx,eax
c001abac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abb1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abb4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001abb7:	53                   	push   ebx
c001abb8:	e8 ad 7e ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001abbd:	83 c4 10             	add    esp,0x10
c001abc0:	31 d2                	xor    edx,edx
c001abc2:	b8 02 00 00 00       	mov    eax,0x2
c001abc7:	85 db                	test   ebx,ebx
c001abc9:	74 5b                	je     c001ac26 <Sys::loadDLL(regs*)+0xa4>
c001abcb:	83 ec 0c             	sub    esp,0xc
c001abce:	53                   	push   ebx
c001abcf:	e8 68 81 ff ff       	call   c0012d3c <File::exists()>
c001abd4:	83 c4 10             	add    esp,0x10
c001abd7:	84 c0                	test   al,al
c001abd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abdb:	75 11                	jne    c001abee <Sys::loadDLL(regs*)+0x6c>
c001abdd:	83 ec 0c             	sub    esp,0xc
c001abe0:	53                   	push   ebx
c001abe1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abe4:	83 c4 10             	add    esp,0x10
c001abe7:	b8 03 00 00 00       	mov    eax,0x3
c001abec:	eb 36                	jmp    c001ac24 <Sys::loadDLL(regs*)+0xa2>
c001abee:	83 ec 0c             	sub    esp,0xc
c001abf1:	53                   	push   ebx
c001abf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abf5:	58                   	pop    eax
c001abf6:	5a                   	pop    edx
c001abf7:	6a 00                	push   0x0
c001abf9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001abfc:	e8 0e 22 00 00       	call   c001ce0f <Thr::loadDLL(char const*, bool)>
c001ac01:	83 c4 10             	add    esp,0x10
c001ac04:	89 c1                	mov    ecx,eax
c001ac06:	31 d2                	xor    edx,edx
c001ac08:	b8 04 00 00 00       	mov    eax,0x4
c001ac0d:	85 c9                	test   ecx,ecx
c001ac0f:	74 15                	je     c001ac26 <Sys::loadDLL(regs*)+0xa4>
c001ac11:	53                   	push   ebx
c001ac12:	53                   	push   ebx
c001ac13:	ff 35 88 d5 02 c0    	push   DWORD PTR ds:0xc002d588
c001ac19:	51                   	push   ecx
c001ac1a:	e8 1b 24 00 00       	call   c001d03a <Thr::executeDLL(unsigned long, void*)>
c001ac1f:	83 c4 10             	add    esp,0x10
c001ac22:	31 c0                	xor    eax,eax
c001ac24:	31 d2                	xor    edx,edx
c001ac26:	59                   	pop    ecx
c001ac27:	5b                   	pop    ebx
c001ac28:	5e                   	pop    esi
c001ac29:	c3                   	ret    

c001ac2a <Sys::read(regs*)>:
c001ac2a:	57                   	push   edi
c001ac2b:	56                   	push   esi
c001ac2c:	53                   	push   ebx
c001ac2d:	83 ec 10             	sub    esp,0x10
c001ac30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac37:	83 f8 02             	cmp    eax,0x2
c001ac3a:	77 10                	ja     c001ac4c <Sys::read(regs*)+0x22>
c001ac3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac44:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ac4a:	eb 0e                	jmp    c001ac5a <Sys::read(regs*)+0x30>
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	50                   	push   eax
c001ac50:	e8 f6 63 ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001ac55:	83 c4 10             	add    esp,0x10
c001ac58:	89 c1                	mov    ecx,eax
c001ac5a:	83 c8 ff             	or     eax,0xffffffff
c001ac5d:	85 c9                	test   ecx,ecx
c001ac5f:	89 c2                	mov    edx,eax
c001ac61:	74 28                	je     c001ac8b <Sys::read(regs*)+0x61>
c001ac63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac6b:	31 ff                	xor    edi,edi
c001ac6d:	83 ec 0c             	sub    esp,0xc
c001ac70:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac72:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac76:	52                   	push   edx
c001ac77:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac7a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ac7d:	57                   	push   edi
c001ac7e:	56                   	push   esi
c001ac7f:	51                   	push   ecx
c001ac80:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ac87:	83 c4 20             	add    esp,0x20
c001ac8a:	99                   	cdq    
c001ac8b:	83 c4 10             	add    esp,0x10
c001ac8e:	5b                   	pop    ebx
c001ac8f:	5e                   	pop    esi
c001ac90:	5f                   	pop    edi
c001ac91:	c3                   	ret    

c001ac92 <Sys::sbrk(regs*)>:
c001ac92:	56                   	push   esi
c001ac93:	53                   	push   ebx
c001ac94:	50                   	push   eax
c001ac95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aca1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001aca4:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001acaa:	85 db                	test   ebx,ebx
c001acac:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001acaf:	74 02                	je     c001acb3 <Sys::sbrk(regs*)+0x21>
c001acb1:	79 06                	jns    c001acb9 <Sys::sbrk(regs*)+0x27>
c001acb3:	89 f0                	mov    eax,esi
c001acb5:	31 d2                	xor    edx,edx
c001acb7:	eb 2a                	jmp    c001ace3 <Sys::sbrk(regs*)+0x51>
c001acb9:	83 c8 ff             	or     eax,0xffffffff
c001acbc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001acc2:	89 c2                	mov    edx,eax
c001acc4:	77 1d                	ja     c001ace3 <Sys::sbrk(regs*)+0x51>
c001acc6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001accc:	50                   	push   eax
c001accd:	c1 ea 0c             	shr    edx,0xc
c001acd0:	68 07 0c 00 00       	push   0xc07
c001acd5:	52                   	push   edx
c001acd6:	51                   	push   ecx
c001acd7:	e8 84 6d ff ff       	call   c0011a60 <VAS::allocatePages(int, int)>
c001acdc:	89 f0                	mov    eax,esi
c001acde:	31 d2                	xor    edx,edx
c001ace0:	83 c4 10             	add    esp,0x10
c001ace3:	59                   	pop    ecx
c001ace4:	5b                   	pop    ebx
c001ace5:	5e                   	pop    esi
c001ace6:	c3                   	ret    

c001ace7 <Sys::setCwd(regs*)>:
c001ace7:	83 ec 14             	sub    esp,0x14
c001acea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acf6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acf9:	e8 dd 80 ff ff       	call   c0012ddb <Fs::setcwd(Process*, char*)>
c001acfe:	83 c4 1c             	add    esp,0x1c
c001ad01:	99                   	cdq    
c001ad02:	c3                   	ret    

c001ad03 <Sys::setTime(regs*)>:
c001ad03:	55                   	push   ebp
c001ad04:	31 c9                	xor    ecx,ecx
c001ad06:	57                   	push   edi
c001ad07:	bd 0c 00 00 00       	mov    ebp,0xc
c001ad0c:	56                   	push   esi
c001ad0d:	53                   	push   ebx
c001ad0e:	31 db                	xor    ebx,ebx
c001ad10:	83 ec 10             	sub    esp,0x10
c001ad13:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad17:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001ad1a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001ad1d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001ad20:	89 c2                	mov    edx,eax
c001ad22:	66 81 ef 6c 07       	sub    di,0x76c
c001ad27:	83 e2 1f             	and    edx,0x1f
c001ad2a:	c1 e7 10             	shl    edi,0x10
c001ad2d:	42                   	inc    edx
c001ad2e:	c1 e8 05             	shr    eax,0x5
c001ad31:	88 d1                	mov    cl,dl
c001ad33:	31 d2                	xor    edx,edx
c001ad35:	f7 f5                	div    ebp
c001ad37:	89 dd                	mov    ebp,ebx
c001ad39:	88 d5                	mov    ch,dl
c001ad3b:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ad41:	0f b7 c1             	movzx  eax,cx
c001ad44:	31 d2                	xor    edx,edx
c001ad46:	09 f8                	or     eax,edi
c001ad48:	bf 3c 00 00 00       	mov    edi,0x3c
c001ad4d:	89 c1                	mov    ecx,eax
c001ad4f:	89 f0                	mov    eax,esi
c001ad51:	f7 f7                	div    edi
c001ad53:	c1 e2 10             	shl    edx,0x10
c001ad56:	09 d5                	or     ebp,edx
c001ad58:	31 d2                	xor    edx,edx
c001ad5a:	89 eb                	mov    ebx,ebp
c001ad5c:	f7 f7                	div    edi
c001ad5e:	bf 10 0e 00 00       	mov    edi,0xe10
c001ad63:	88 d7                	mov    bh,dl
c001ad65:	89 f0                	mov    eax,esi
c001ad67:	31 d2                	xor    edx,edx
c001ad69:	f7 f7                	div    edi
c001ad6b:	bf 18 00 00 00       	mov    edi,0x18
c001ad70:	31 d2                	xor    edx,edx
c001ad72:	f7 f7                	div    edi
c001ad74:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001ad79:	88 d3                	mov    bl,dl
c001ad7b:	53                   	push   ebx
c001ad7c:	51                   	push   ecx
c001ad7d:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ad83:	e8 9c 88 ff ff       	call   c0013624 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ad88:	83 c4 1c             	add    esp,0x1c
c001ad8b:	83 f0 01             	xor    eax,0x1
c001ad8e:	5b                   	pop    ebx
c001ad8f:	0f b6 c0             	movzx  eax,al
c001ad92:	5e                   	pop    esi
c001ad93:	31 d2                	xor    edx,edx
c001ad95:	5f                   	pop    edi
c001ad96:	5d                   	pop    ebp
c001ad97:	c3                   	ret    

c001ad98 <Sys::timezone(regs*)>:
c001ad98:	53                   	push   ebx
c001ad99:	83 ec 08             	sub    esp,0x8
c001ad9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ada0:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ada4:	75 17                	jne    c001adbd <Sys::timezone(regs*)+0x25>
c001ada6:	83 ec 0c             	sub    esp,0xc
c001ada9:	68 71 b4 02 c0       	push   0xc002b471
c001adae:	e8 58 77 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001adb3:	83 c8 ff             	or     eax,0xffffffff
c001adb6:	83 c4 10             	add    esp,0x10
c001adb9:	89 c2                	mov    edx,eax
c001adbb:	eb 20                	jmp    c001addd <Sys::timezone(regs*)+0x45>
c001adbd:	83 ec 0c             	sub    esp,0xc
c001adc0:	68 86 b4 02 c0       	push   0xc002b486
c001adc5:	e8 41 77 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001adca:	58                   	pop    eax
c001adcb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001adce:	e8 b3 85 ff ff       	call   c0013386 <User::loadClockSettings(int)>
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	b8 01 00 00 00       	mov    eax,0x1
c001addb:	31 d2                	xor    edx,edx
c001addd:	83 c4 08             	add    esp,0x8
c001ade0:	5b                   	pop    ebx
c001ade1:	c3                   	ret    

c001ade2 <Sys::write(regs*)>:
c001ade2:	57                   	push   edi
c001ade3:	56                   	push   esi
c001ade4:	53                   	push   ebx
c001ade5:	83 ec 10             	sub    esp,0x10
c001ade8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001adef:	83 f8 02             	cmp    eax,0x2
c001adf2:	77 10                	ja     c001ae04 <Sys::write(regs*)+0x22>
c001adf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adf9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001adfc:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae02:	eb 0e                	jmp    c001ae12 <Sys::write(regs*)+0x30>
c001ae04:	83 ec 0c             	sub    esp,0xc
c001ae07:	50                   	push   eax
c001ae08:	e8 3e 62 ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001ae0d:	83 c4 10             	add    esp,0x10
c001ae10:	89 c1                	mov    ecx,eax
c001ae12:	83 c8 ff             	or     eax,0xffffffff
c001ae15:	85 c9                	test   ecx,ecx
c001ae17:	89 c2                	mov    edx,eax
c001ae19:	74 28                	je     c001ae43 <Sys::write(regs*)+0x61>
c001ae1b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae23:	31 ff                	xor    edi,edi
c001ae25:	83 ec 0c             	sub    esp,0xc
c001ae28:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae2a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae2e:	52                   	push   edx
c001ae2f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae32:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae35:	57                   	push   edi
c001ae36:	56                   	push   esi
c001ae37:	51                   	push   ecx
c001ae38:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ae3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae3f:	83 c4 20             	add    esp,0x20
c001ae42:	99                   	cdq    
c001ae43:	83 c4 10             	add    esp,0x10
c001ae46:	5b                   	pop    ebx
c001ae47:	5e                   	pop    esi
c001ae48:	5f                   	pop    edi
c001ae49:	c3                   	ret    

c001ae4a <Sys::wsbe(regs*)>:
c001ae4a:	57                   	push   edi
c001ae4b:	b9 0b 00 00 00       	mov    ecx,0xb
c001ae50:	56                   	push   esi
c001ae51:	be c5 b4 02 c0       	mov    esi,0xc002b4c5
c001ae56:	53                   	push   ebx
c001ae57:	83 ec 30             	sub    esp,0x30
c001ae5a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ae5e:	fc                   	cld    
c001ae5f:	83 ec 0c             	sub    esp,0xc
c001ae62:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ae64:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ae68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae70:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001ae76:	8b 06                	mov    eax,DWORD PTR [esi]
c001ae78:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ae7b:	57                   	push   edi
c001ae7c:	e8 eb 58 fe ff       	call   c000076c <strlen>
c001ae81:	5a                   	pop    edx
c001ae82:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001ae86:	52                   	push   edx
c001ae87:	31 d2                	xor    edx,edx
c001ae89:	57                   	push   edi
c001ae8a:	52                   	push   edx
c001ae8b:	50                   	push   eax
c001ae8c:	56                   	push   esi
c001ae8d:	ff d3                	call   ebx
c001ae8f:	83 c4 14             	add    esp,0x14
c001ae92:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ae96:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ae99:	e8 d1 31 00 00       	call   c001e06f <terminateTask(int)>
c001ae9e:	83 c4 40             	add    esp,0x40
c001aea1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001aea6:	5b                   	pop    ebx
c001aea7:	31 d2                	xor    edx,edx
c001aea9:	5e                   	pop    esi
c001aeaa:	5f                   	pop    edi
c001aeab:	c3                   	ret    

c001aeac <Sys::yield(regs*)>:
c001aeac:	57                   	push   edi
c001aead:	56                   	push   esi
c001aeae:	53                   	push   ebx
c001aeaf:	fa                   	cli    
c001aeb0:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001aeb6:	e8 14 29 00 00       	call   c001d7cf <schedule()>
c001aebb:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001aec0:	48                   	dec    eax
c001aec1:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001aec6:	75 01                	jne    c001aec9 <Sys::yield(regs*)+0x1d>
c001aec8:	fb                   	sti    
c001aec9:	8b 35 f0 db 02 c0    	mov    esi,DWORD PTR ds:0xc002dbf0
c001aecf:	8b 3d f4 db 02 c0    	mov    edi,DWORD PTR ds:0xc002dbf4
c001aed5:	89 f0                	mov    eax,esi
c001aed7:	89 fb                	mov    ebx,edi
c001aed9:	89 f1                	mov    ecx,esi
c001aedb:	c1 e0 07             	shl    eax,0x7
c001aede:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001aee2:	25 80 30 0f 00       	and    eax,0xf3080
c001aee7:	c1 eb 17             	shr    ebx,0x17
c001aeea:	31 c8                	xor    eax,ecx
c001aeec:	89 da                	mov    edx,ebx
c001aeee:	5b                   	pop    ebx
c001aeef:	5e                   	pop    esi
c001aef0:	5f                   	pop    edi
c001aef1:	c3                   	ret    

c001aef2 <sysCallSeekDir(regs*)>:
c001aef2:	31 c0                	xor    eax,eax
c001aef4:	31 d2                	xor    edx,edx
c001aef6:	c3                   	ret    

c001aef7 <sysCallTellDir(regs*)>:
c001aef7:	31 c0                	xor    eax,eax
c001aef9:	31 d2                	xor    edx,edx
c001aefb:	c3                   	ret    

c001aefc <sysCallVerify(regs*)>:
c001aefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af00:	31 d2                	xor    edx,edx
c001af02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001af05:	c3                   	ret    

c001af06 <sysCallGetArgc(regs*)>:
c001af06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af0e:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001af14:	99                   	cdq    
c001af15:	c3                   	ret    

c001af16 <sysFormatDisk(regs*)>:
c001af16:	56                   	push   esi
c001af17:	53                   	push   ebx
c001af18:	53                   	push   ebx
c001af19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af1d:	8b 1d f4 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f4
c001af23:	eb 25                	jmp    c001af4a <sysFormatDisk(regs*)+0x34>
c001af25:	83 ec 0c             	sub    esp,0xc
c001af28:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af2d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001af30:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af33:	50                   	push   eax
c001af34:	ff 34 85 80 db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2480]
c001af3b:	53                   	push   ebx
c001af3c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001af3f:	83 c4 20             	add    esp,0x20
c001af42:	83 f8 08             	cmp    eax,0x8
c001af45:	75 12                	jne    c001af59 <sysFormatDisk(regs*)+0x43>
c001af47:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001af4a:	85 db                	test   ebx,ebx
c001af4c:	75 d7                	jne    c001af25 <sysFormatDisk(regs*)+0xf>
c001af4e:	59                   	pop    ecx
c001af4f:	b8 03 00 00 00       	mov    eax,0x3
c001af54:	31 d2                	xor    edx,edx
c001af56:	5b                   	pop    ebx
c001af57:	5e                   	pop    esi
c001af58:	c3                   	ret    
c001af59:	85 c0                	test   eax,eax
c001af5b:	74 1b                	je     c001af78 <sysFormatDisk(regs*)+0x62>
c001af5d:	83 f8 09             	cmp    eax,0x9
c001af60:	74 0b                	je     c001af6d <sysFormatDisk(regs*)+0x57>
c001af62:	59                   	pop    ecx
c001af63:	b8 02 00 00 00       	mov    eax,0x2
c001af68:	31 d2                	xor    edx,edx
c001af6a:	5b                   	pop    ebx
c001af6b:	5e                   	pop    esi
c001af6c:	c3                   	ret    
c001af6d:	59                   	pop    ecx
c001af6e:	b8 01 00 00 00       	mov    eax,0x1
c001af73:	31 d2                	xor    edx,edx
c001af75:	5b                   	pop    ebx
c001af76:	5e                   	pop    esi
c001af77:	c3                   	ret    
c001af78:	59                   	pop    ecx
c001af79:	31 c0                	xor    eax,eax
c001af7b:	31 d2                	xor    edx,edx
c001af7d:	5b                   	pop    ebx
c001af7e:	5e                   	pop    esi
c001af7f:	c3                   	ret    

c001af80 <sysSetDiskVolumeLabel(regs*)>:
c001af80:	56                   	push   esi
c001af81:	53                   	push   ebx
c001af82:	53                   	push   ebx
c001af83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af87:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001af8a:	83 f8 19             	cmp    eax,0x19
c001af8d:	77 29                	ja     c001afb8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001af8f:	8b 0c 85 80 db 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2480]
c001af96:	85 c9                	test   ecx,ecx
c001af98:	74 1e                	je     c001afb8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001af9a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001af9d:	85 d2                	test   edx,edx
c001af9f:	74 17                	je     c001afb8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001afa1:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001afa7:	8b 33                	mov    esi,DWORD PTR [ebx]
c001afa9:	52                   	push   edx
c001afaa:	50                   	push   eax
c001afab:	51                   	push   ecx
c001afac:	53                   	push   ebx
c001afad:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001afb0:	83 c4 10             	add    esp,0x10
c001afb3:	99                   	cdq    
c001afb4:	59                   	pop    ecx
c001afb5:	5b                   	pop    ebx
c001afb6:	5e                   	pop    esi
c001afb7:	c3                   	ret    
c001afb8:	59                   	pop    ecx
c001afb9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001afbe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afc3:	5b                   	pop    ebx
c001afc4:	5e                   	pop    esi
c001afc5:	c3                   	ret    

c001afc6 <sysGetDiskVolumeLabel(regs*)>:
c001afc6:	57                   	push   edi
c001afc7:	56                   	push   esi
c001afc8:	53                   	push   ebx
c001afc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afcd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001afd0:	83 fa 19             	cmp    edx,0x19
c001afd3:	77 34                	ja     c001b009 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afd5:	8b 0c 95 80 db 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2480]
c001afdc:	85 c9                	test   ecx,ecx
c001afde:	74 29                	je     c001b009 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afe0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001afe3:	85 db                	test   ebx,ebx
c001afe5:	74 22                	je     c001b009 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afe7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001afea:	85 c0                	test   eax,eax
c001afec:	74 1b                	je     c001b009 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afee:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001aff4:	83 ec 0c             	sub    esp,0xc
c001aff7:	8b 3e                	mov    edi,DWORD PTR [esi]
c001aff9:	50                   	push   eax
c001affa:	53                   	push   ebx
c001affb:	52                   	push   edx
c001affc:	51                   	push   ecx
c001affd:	56                   	push   esi
c001affe:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b001:	83 c4 20             	add    esp,0x20
c001b004:	99                   	cdq    
c001b005:	5b                   	pop    ebx
c001b006:	5e                   	pop    esi
c001b007:	5f                   	pop    edi
c001b008:	c3                   	ret    
c001b009:	5b                   	pop    ebx
c001b00a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b00f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b014:	5e                   	pop    esi
c001b015:	5f                   	pop    edi
c001b016:	c3                   	ret    

c001b017 <sysShutdown(regs*)>:
c001b017:	83 ec 0c             	sub    esp,0xc
c001b01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b01e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b021:	85 c0                	test   eax,eax
c001b023:	74 18                	je     c001b03d <sysShutdown(regs*)+0x26>
c001b025:	83 f8 01             	cmp    eax,0x1
c001b028:	74 38                	je     c001b062 <sysShutdown(regs*)+0x4b>
c001b02a:	83 f8 02             	cmp    eax,0x2
c001b02d:	74 24                	je     c001b053 <sysShutdown(regs*)+0x3c>
c001b02f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b034:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b039:	83 c4 0c             	add    esp,0xc
c001b03c:	c3                   	ret    
c001b03d:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001b042:	8b 10                	mov    edx,DWORD PTR [eax]
c001b044:	6a 00                	push   0x0
c001b046:	6a 00                	push   0x0
c001b048:	6a 00                	push   0x0
c001b04a:	50                   	push   eax
c001b04b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b04e:	83 c4 10             	add    esp,0x10
c001b051:	eb dc                	jmp    c001b02f <sysShutdown(regs*)+0x18>
c001b053:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001b058:	8b 10                	mov    edx,DWORD PTR [eax]
c001b05a:	6a 00                	push   0x0
c001b05c:	6a 00                	push   0x0
c001b05e:	6a 01                	push   0x1
c001b060:	eb e8                	jmp    c001b04a <sysShutdown(regs*)+0x33>
c001b062:	a1 20 fc 02 c0       	mov    eax,ds:0xc002fc20
c001b067:	85 c0                	test   eax,eax
c001b069:	74 02                	je     c001b06d <sysShutdown(regs*)+0x56>
c001b06b:	ff d0                	call   eax
c001b06d:	31 c0                	xor    eax,eax
c001b06f:	31 d2                	xor    edx,edx
c001b071:	83 c4 0c             	add    esp,0xc
c001b074:	c3                   	ret    

c001b075 <sysCallRealpath(regs*)>:
c001b075:	83 ec 0c             	sub    esp,0xc
c001b078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b07c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b07f:	85 d2                	test   edx,edx
c001b081:	74 07                	je     c001b08a <sysCallRealpath(regs*)+0x15>
c001b083:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b086:	85 c0                	test   eax,eax
c001b088:	75 0b                	jne    c001b095 <sysCallRealpath(regs*)+0x20>
c001b08a:	b8 01 00 00 00       	mov    eax,0x1
c001b08f:	31 d2                	xor    edx,edx
c001b091:	83 c4 0c             	add    esp,0xc
c001b094:	c3                   	ret    
c001b095:	51                   	push   ecx
c001b096:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b09c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b09f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b0a5:	51                   	push   ecx
c001b0a6:	52                   	push   edx
c001b0a7:	50                   	push   eax
c001b0a8:	e8 13 78 ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b0ad:	83 c4 10             	add    esp,0x10
c001b0b0:	31 c0                	xor    eax,eax
c001b0b2:	31 d2                	xor    edx,edx
c001b0b4:	83 c4 0c             	add    esp,0xc
c001b0b7:	c3                   	ret    

c001b0b8 <sysCallReadDir(regs*)>:
c001b0b8:	53                   	push   ebx
c001b0b9:	83 ec 18             	sub    esp,0x18
c001b0bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0c0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b0c3:	83 f8 02             	cmp    eax,0x2
c001b0c6:	76 60                	jbe    c001b128 <sysCallReadDir(regs*)+0x70>
c001b0c8:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b0cf:	77 48                	ja     c001b119 <sysCallReadDir(regs*)+0x61>
c001b0d1:	83 ec 0c             	sub    esp,0xc
c001b0d4:	50                   	push   eax
c001b0d5:	e8 71 5f ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b0da:	83 c4 10             	add    esp,0x10
c001b0dd:	85 c0                	test   eax,eax
c001b0df:	74 38                	je     c001b119 <sysCallReadDir(regs*)+0x61>
c001b0e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0e9:	83 ec 0c             	sub    esp,0xc
c001b0ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0ee:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b0f2:	51                   	push   ecx
c001b0f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b0f6:	6a 00                	push   0x0
c001b0f8:	68 10 01 00 00       	push   0x110
c001b0fd:	50                   	push   eax
c001b0fe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b101:	83 c4 20             	add    esp,0x20
c001b104:	85 c0                	test   eax,eax
c001b106:	74 29                	je     c001b131 <sysCallReadDir(regs*)+0x79>
c001b108:	83 f8 07             	cmp    eax,0x7
c001b10b:	74 1b                	je     c001b128 <sysCallReadDir(regs*)+0x70>
c001b10d:	b8 02 00 00 00       	mov    eax,0x2
c001b112:	31 d2                	xor    edx,edx
c001b114:	83 c4 18             	add    esp,0x18
c001b117:	5b                   	pop    ebx
c001b118:	c3                   	ret    
c001b119:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b11e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b123:	83 c4 18             	add    esp,0x18
c001b126:	5b                   	pop    ebx
c001b127:	c3                   	ret    
c001b128:	b8 01 00 00 00       	mov    eax,0x1
c001b12d:	31 d2                	xor    edx,edx
c001b12f:	eb e3                	jmp    c001b114 <sysCallReadDir(regs*)+0x5c>
c001b131:	31 c0                	xor    eax,eax
c001b133:	31 d2                	xor    edx,edx
c001b135:	eb dd                	jmp    c001b114 <sysCallReadDir(regs*)+0x5c>

c001b137 <sysCallIsATTY(regs*)>:
c001b137:	83 ec 0c             	sub    esp,0xc
c001b13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b13e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b141:	83 f8 02             	cmp    eax,0x2
c001b144:	76 07                	jbe    c001b14d <sysCallIsATTY(regs*)+0x16>
c001b146:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b14b:	75 26                	jne    c001b173 <sysCallIsATTY(regs*)+0x3c>
c001b14d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b152:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b155:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b15b:	85 c0                	test   eax,eax
c001b15d:	74 24                	je     c001b183 <sysCallIsATTY(regs*)+0x4c>
c001b15f:	83 ec 0c             	sub    esp,0xc
c001b162:	8b 10                	mov    edx,DWORD PTR [eax]
c001b164:	50                   	push   eax
c001b165:	ff 12                	call   DWORD PTR [edx]
c001b167:	31 d2                	xor    edx,edx
c001b169:	0f b6 c0             	movzx  eax,al
c001b16c:	83 c4 10             	add    esp,0x10
c001b16f:	83 c4 0c             	add    esp,0xc
c001b172:	c3                   	ret    
c001b173:	83 ec 0c             	sub    esp,0xc
c001b176:	50                   	push   eax
c001b177:	e8 cf 5e ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b17c:	83 c4 10             	add    esp,0x10
c001b17f:	85 c0                	test   eax,eax
c001b181:	75 dc                	jne    c001b15f <sysCallIsATTY(regs*)+0x28>
c001b183:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b188:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b18d:	83 c4 0c             	add    esp,0xc
c001b190:	c3                   	ret    

c001b191 <sysCallSeek(regs*)>:
c001b191:	53                   	push   ebx
c001b192:	83 ec 08             	sub    esp,0x8
c001b195:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b199:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b19c:	8d 50 fd             	lea    edx,[eax-0x3]
c001b19f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b1a5:	77 32                	ja     c001b1d9 <sysCallSeek(regs*)+0x48>
c001b1a7:	83 ec 0c             	sub    esp,0xc
c001b1aa:	50                   	push   eax
c001b1ab:	e8 9b 5e ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b1b0:	83 c4 0c             	add    esp,0xc
c001b1b3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b1b6:	31 db                	xor    ebx,ebx
c001b1b8:	53                   	push   ebx
c001b1b9:	51                   	push   ecx
c001b1ba:	50                   	push   eax
c001b1bb:	e8 cc 79 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001b1c0:	83 c4 10             	add    esp,0x10
c001b1c3:	85 c0                	test   eax,eax
c001b1c5:	0f 95 c0             	setne  al
c001b1c8:	31 d2                	xor    edx,edx
c001b1ca:	0f b6 c0             	movzx  eax,al
c001b1cd:	f7 d8                	neg    eax
c001b1cf:	83 d2 00             	adc    edx,0x0
c001b1d2:	83 c4 08             	add    esp,0x8
c001b1d5:	f7 da                	neg    edx
c001b1d7:	5b                   	pop    ebx
c001b1d8:	c3                   	ret    
c001b1d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1de:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1e3:	83 c4 08             	add    esp,0x8
c001b1e6:	5b                   	pop    ebx
c001b1e7:	c3                   	ret    

c001b1e8 <sysCallTell(regs*)>:
c001b1e8:	53                   	push   ebx
c001b1e9:	83 ec 08             	sub    esp,0x8
c001b1ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1f3:	83 f8 02             	cmp    eax,0x2
c001b1f6:	76 4d                	jbe    c001b245 <sysCallTell(regs*)+0x5d>
c001b1f8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b1fd:	76 19                	jbe    c001b218 <sysCallTell(regs*)+0x30>
c001b1ff:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b202:	31 d2                	xor    edx,edx
c001b204:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b20a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b211:	31 c0                	xor    eax,eax
c001b213:	83 c4 08             	add    esp,0x8
c001b216:	5b                   	pop    ebx
c001b217:	c3                   	ret    
c001b218:	83 ec 0c             	sub    esp,0xc
c001b21b:	50                   	push   eax
c001b21c:	e8 2a 5e ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b221:	5a                   	pop    edx
c001b222:	59                   	pop    ecx
c001b223:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b226:	50                   	push   eax
c001b227:	e8 b6 79 ff ff       	call   c0012be2 <File::tell(unsigned long long*)>
c001b22c:	83 c4 10             	add    esp,0x10
c001b22f:	85 c0                	test   eax,eax
c001b231:	0f 95 c0             	setne  al
c001b234:	31 d2                	xor    edx,edx
c001b236:	0f b6 c0             	movzx  eax,al
c001b239:	f7 d8                	neg    eax
c001b23b:	83 d2 00             	adc    edx,0x0
c001b23e:	83 c4 08             	add    esp,0x8
c001b241:	f7 da                	neg    edx
c001b243:	5b                   	pop    ebx
c001b244:	c3                   	ret    
c001b245:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b24a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b24f:	83 c4 08             	add    esp,0x8
c001b252:	5b                   	pop    ebx
c001b253:	c3                   	ret    

c001b254 <sysCallSize(regs*)>:
c001b254:	53                   	push   ebx
c001b255:	83 ec 18             	sub    esp,0x18
c001b258:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b25c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b25f:	83 f8 02             	cmp    eax,0x2
c001b262:	76 53                	jbe    c001b2b7 <sysCallSize(regs*)+0x63>
c001b264:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b269:	76 19                	jbe    c001b284 <sysCallSize(regs*)+0x30>
c001b26b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b26e:	31 d2                	xor    edx,edx
c001b270:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b276:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b27d:	31 c0                	xor    eax,eax
c001b27f:	83 c4 18             	add    esp,0x18
c001b282:	5b                   	pop    ebx
c001b283:	c3                   	ret    
c001b284:	83 ec 0c             	sub    esp,0xc
c001b287:	50                   	push   eax
c001b288:	e8 be 5d ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b28d:	83 c4 0c             	add    esp,0xc
c001b290:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b294:	52                   	push   edx
c001b295:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b298:	50                   	push   eax
c001b299:	e8 dc 7a ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001b29e:	83 c4 10             	add    esp,0x10
c001b2a1:	85 c0                	test   eax,eax
c001b2a3:	0f 95 c0             	setne  al
c001b2a6:	31 d2                	xor    edx,edx
c001b2a8:	0f b6 c0             	movzx  eax,al
c001b2ab:	f7 d8                	neg    eax
c001b2ad:	83 d2 00             	adc    edx,0x0
c001b2b0:	83 c4 18             	add    esp,0x18
c001b2b3:	f7 da                	neg    edx
c001b2b5:	5b                   	pop    ebx
c001b2b6:	c3                   	ret    
c001b2b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2c1:	83 c4 18             	add    esp,0x18
c001b2c4:	5b                   	pop    ebx
c001b2c5:	c3                   	ret    

c001b2c6 <sysCallSizeFromFilename(regs*)>:
c001b2c6:	57                   	push   edi
c001b2c7:	56                   	push   esi
c001b2c8:	53                   	push   ebx
c001b2c9:	83 ec 20             	sub    esp,0x20
c001b2cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2d0:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b2d3:	83 fb 02             	cmp    ebx,0x2
c001b2d6:	0f 86 88 00 00 00    	jbe    c001b364 <sysCallSizeFromFilename(regs*)+0x9e>
c001b2dc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b2e2:	76 1b                	jbe    c001b2ff <sysCallSizeFromFilename(regs*)+0x39>
c001b2e4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b2e7:	31 d2                	xor    edx,edx
c001b2e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2f6:	83 c4 20             	add    esp,0x20
c001b2f9:	31 c0                	xor    eax,eax
c001b2fb:	5b                   	pop    ebx
c001b2fc:	5e                   	pop    esi
c001b2fd:	5f                   	pop    edi
c001b2fe:	c3                   	ret    
c001b2ff:	83 ec 0c             	sub    esp,0xc
c001b302:	68 14 01 00 00       	push   0x114
c001b307:	e8 90 42 ff ff       	call   c000f59c <malloc>
c001b30c:	83 c4 0c             	add    esp,0xc
c001b30f:	89 c7                	mov    edi,eax
c001b311:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b316:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b319:	53                   	push   ebx
c001b31a:	57                   	push   edi
c001b31b:	e8 4a 77 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001b320:	83 c4 0c             	add    esp,0xc
c001b323:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b327:	50                   	push   eax
c001b328:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b32b:	57                   	push   edi
c001b32c:	e8 49 7a ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001b331:	83 c4 10             	add    esp,0x10
c001b334:	85 ff                	test   edi,edi
c001b336:	74 14                	je     c001b34c <sysCallSizeFromFilename(regs*)+0x86>
c001b338:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b33c:	8b 17                	mov    edx,DWORD PTR [edi]
c001b33e:	83 ec 0c             	sub    esp,0xc
c001b341:	57                   	push   edi
c001b342:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b345:	83 c4 10             	add    esp,0x10
c001b348:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b34c:	85 c0                	test   eax,eax
c001b34e:	0f 95 c0             	setne  al
c001b351:	31 d2                	xor    edx,edx
c001b353:	0f b6 c0             	movzx  eax,al
c001b356:	f7 d8                	neg    eax
c001b358:	83 d2 00             	adc    edx,0x0
c001b35b:	83 c4 20             	add    esp,0x20
c001b35e:	f7 da                	neg    edx
c001b360:	5b                   	pop    ebx
c001b361:	5e                   	pop    esi
c001b362:	5f                   	pop    edi
c001b363:	c3                   	ret    
c001b364:	83 c4 20             	add    esp,0x20
c001b367:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b36c:	5b                   	pop    ebx
c001b36d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b372:	5e                   	pop    esi
c001b373:	5f                   	pop    edi
c001b374:	c3                   	ret    

c001b375 <sysCallClose(regs*)>:
c001b375:	53                   	push   ebx
c001b376:	83 ec 08             	sub    esp,0x8
c001b379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b37d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b380:	83 f8 02             	cmp    eax,0x2
c001b383:	76 41                	jbe    c001b3c6 <sysCallClose(regs*)+0x51>
c001b385:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b38b:	83 fa 01             	cmp    edx,0x1
c001b38e:	76 2d                	jbe    c001b3bd <sysCallClose(regs*)+0x48>
c001b390:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b395:	77 2f                	ja     c001b3c6 <sysCallClose(regs*)+0x51>
c001b397:	83 ec 0c             	sub    esp,0xc
c001b39a:	50                   	push   eax
c001b39b:	e8 ab 5c ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b3a0:	89 c3                	mov    ebx,eax
c001b3a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3a5:	e8 82 77 ff ff       	call   c0012b2c <File::close()>
c001b3aa:	83 c4 10             	add    esp,0x10
c001b3ad:	85 db                	test   ebx,ebx
c001b3af:	74 0c                	je     c001b3bd <sysCallClose(regs*)+0x48>
c001b3b1:	83 ec 0c             	sub    esp,0xc
c001b3b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3b6:	53                   	push   ebx
c001b3b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ba:	83 c4 10             	add    esp,0x10
c001b3bd:	31 c0                	xor    eax,eax
c001b3bf:	31 d2                	xor    edx,edx
c001b3c1:	83 c4 08             	add    esp,0x8
c001b3c4:	5b                   	pop    ebx
c001b3c5:	c3                   	ret    
c001b3c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3d0:	83 c4 08             	add    esp,0x8
c001b3d3:	5b                   	pop    ebx
c001b3d4:	c3                   	ret    

c001b3d5 <sysCallOpenDir(regs*)>:
c001b3d5:	56                   	push   esi
c001b3d6:	53                   	push   ebx
c001b3d7:	53                   	push   ebx
c001b3d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b3df:	85 f6                	test   esi,esi
c001b3e1:	74 59                	je     c001b43c <sysCallOpenDir(regs*)+0x67>
c001b3e3:	83 ec 0c             	sub    esp,0xc
c001b3e6:	68 14 01 00 00       	push   0x114
c001b3eb:	e8 ac 41 ff ff       	call   c000f59c <malloc>
c001b3f0:	83 c4 0c             	add    esp,0xc
c001b3f3:	89 c6                	mov    esi,eax
c001b3f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3fa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b400:	56                   	push   esi
c001b401:	e8 10 7b ff ff       	call   c0012f16 <Directory::Directory(char const*, Process*)>
c001b406:	83 c4 10             	add    esp,0x10
c001b409:	85 f6                	test   esi,esi
c001b40b:	74 2f                	je     c001b43c <sysCallOpenDir(regs*)+0x67>
c001b40d:	83 ec 0c             	sub    esp,0xc
c001b410:	56                   	push   esi
c001b411:	e8 64 7b ff ff       	call   c0012f7a <Directory::open()>
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	85 c0                	test   eax,eax
c001b41b:	75 1f                	jne    c001b43c <sysCallOpenDir(regs*)+0x67>
c001b41d:	83 ec 0c             	sub    esp,0xc
c001b420:	56                   	push   esi
c001b421:	e8 30 59 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001b426:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b429:	83 c4 10             	add    esp,0x10
c001b42c:	89 02                	mov    DWORD PTR [edx],eax
c001b42e:	c1 f8 1f             	sar    eax,0x1f
c001b431:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b434:	31 c0                	xor    eax,eax
c001b436:	59                   	pop    ecx
c001b437:	31 d2                	xor    edx,edx
c001b439:	5b                   	pop    ebx
c001b43a:	5e                   	pop    esi
c001b43b:	c3                   	ret    
c001b43c:	59                   	pop    ecx
c001b43d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b442:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b447:	5b                   	pop    ebx
c001b448:	5e                   	pop    esi
c001b449:	c3                   	ret    

c001b44a <sysCallCloseDir(regs*)>:
c001b44a:	53                   	push   ebx
c001b44b:	83 ec 08             	sub    esp,0x8
c001b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b452:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b455:	8d 50 fd             	lea    edx,[eax-0x3]
c001b458:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b45e:	77 2f                	ja     c001b48f <sysCallCloseDir(regs*)+0x45>
c001b460:	83 ec 0c             	sub    esp,0xc
c001b463:	50                   	push   eax
c001b464:	e8 e2 5b ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b469:	89 c3                	mov    ebx,eax
c001b46b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b46e:	e8 63 7b ff ff       	call   c0012fd6 <Directory::close()>
c001b473:	83 c4 10             	add    esp,0x10
c001b476:	85 db                	test   ebx,ebx
c001b478:	74 0c                	je     c001b486 <sysCallCloseDir(regs*)+0x3c>
c001b47a:	83 ec 0c             	sub    esp,0xc
c001b47d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b47f:	53                   	push   ebx
c001b480:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b483:	83 c4 10             	add    esp,0x10
c001b486:	31 c0                	xor    eax,eax
c001b488:	31 d2                	xor    edx,edx
c001b48a:	83 c4 08             	add    esp,0x8
c001b48d:	5b                   	pop    ebx
c001b48e:	c3                   	ret    
c001b48f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b494:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b499:	83 c4 08             	add    esp,0x8
c001b49c:	5b                   	pop    ebx
c001b49d:	c3                   	ret    

c001b49e <sysCallMakeDir(regs*)>:
c001b49e:	56                   	push   esi
c001b49f:	53                   	push   ebx
c001b4a0:	83 ec 10             	sub    esp,0x10
c001b4a3:	68 14 01 00 00       	push   0x114
c001b4a8:	e8 ef 40 ff ff       	call   c000f59c <malloc>
c001b4ad:	83 c4 0c             	add    esp,0xc
c001b4b0:	89 c3                	mov    ebx,eax
c001b4b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4b7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4be:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b4c1:	53                   	push   ebx
c001b4c2:	e8 4f 7a ff ff       	call   c0012f16 <Directory::Directory(char const*, Process*)>
c001b4c7:	83 c4 10             	add    esp,0x10
c001b4ca:	85 db                	test   ebx,ebx
c001b4cc:	74 32                	je     c001b500 <sysCallMakeDir(regs*)+0x62>
c001b4ce:	83 ec 0c             	sub    esp,0xc
c001b4d1:	53                   	push   ebx
c001b4d2:	e8 83 7c ff ff       	call   c001315a <Directory::create()>
c001b4d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4da:	89 c6                	mov    esi,eax
c001b4dc:	e8 f5 7a ff ff       	call   c0012fd6 <Directory::close()>
c001b4e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4e9:	83 c4 10             	add    esp,0x10
c001b4ec:	31 c0                	xor    eax,eax
c001b4ee:	59                   	pop    ecx
c001b4ef:	85 f6                	test   esi,esi
c001b4f1:	5b                   	pop    ebx
c001b4f2:	0f 95 c0             	setne  al
c001b4f5:	5e                   	pop    esi
c001b4f6:	31 d2                	xor    edx,edx
c001b4f8:	f7 d8                	neg    eax
c001b4fa:	83 d2 00             	adc    edx,0x0
c001b4fd:	f7 da                	neg    edx
c001b4ff:	c3                   	ret    
c001b500:	59                   	pop    ecx
c001b501:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b506:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b50b:	5b                   	pop    ebx
c001b50c:	5e                   	pop    esi
c001b50d:	c3                   	ret    

c001b50e <sysCallWait(regs*)>:
c001b50e:	83 ec 10             	sub    esp,0x10
c001b511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b515:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b518:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b51b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b51e:	e8 af 24 00 00       	call   c001d9d2 <waitTask(int, int*, int)>
c001b523:	83 c4 1c             	add    esp,0x1c
c001b526:	99                   	cdq    
c001b527:	c3                   	ret    

c001b528 <sysCallNotImpl(regs*)>:
c001b528:	83 ec 18             	sub    esp,0x18
c001b52b:	68 f1 b4 02 c0       	push   0xc002b4f1
c001b530:	e8 10 e7 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001b535:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b53a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b53f:	83 c4 1c             	add    esp,0x1c
c001b542:	c3                   	ret    

c001b543 <sysPanic(regs*)>:
c001b543:	83 ec 18             	sub    esp,0x18
c001b546:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b54a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b54d:	e8 f3 e6 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001b552:	b8 01 00 00 00       	mov    eax,0x1
c001b557:	31 d2                	xor    edx,edx
c001b559:	83 c4 1c             	add    esp,0x1c
c001b55c:	c3                   	ret    

c001b55d <sysCallRmdir(regs*)>:
c001b55d:	56                   	push   esi
c001b55e:	53                   	push   ebx
c001b55f:	83 ec 20             	sub    esp,0x20
c001b562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b566:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b569:	68 14 01 00 00       	push   0x114
c001b56e:	e8 29 40 ff ff       	call   c000f59c <malloc>
c001b573:	83 c4 0c             	add    esp,0xc
c001b576:	89 c3                	mov    ebx,eax
c001b578:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b57d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b580:	56                   	push   esi
c001b581:	53                   	push   ebx
c001b582:	e8 e3 74 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001b587:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b58a:	e8 b7 76 ff ff       	call   c0012c46 <File::unlink()>
c001b58f:	83 c4 10             	add    esp,0x10
c001b592:	85 db                	test   ebx,ebx
c001b594:	74 14                	je     c001b5aa <sysCallRmdir(regs*)+0x4d>
c001b596:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b59a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b59c:	83 ec 0c             	sub    esp,0xc
c001b59f:	53                   	push   ebx
c001b5a0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b5a3:	83 c4 10             	add    esp,0x10
c001b5a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5aa:	85 c0                	test   eax,eax
c001b5ac:	0f 95 c0             	setne  al
c001b5af:	31 d2                	xor    edx,edx
c001b5b1:	0f b6 c0             	movzx  eax,al
c001b5b4:	f7 d8                	neg    eax
c001b5b6:	83 d2 00             	adc    edx,0x0
c001b5b9:	83 c4 14             	add    esp,0x14
c001b5bc:	f7 da                	neg    edx
c001b5be:	5b                   	pop    ebx
c001b5bf:	5e                   	pop    esi
c001b5c0:	c3                   	ret    

c001b5c1 <sysCallUnlink(regs*)>:
c001b5c1:	56                   	push   esi
c001b5c2:	53                   	push   ebx
c001b5c3:	83 ec 20             	sub    esp,0x20
c001b5c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5ca:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b5cd:	68 14 01 00 00       	push   0x114
c001b5d2:	e8 c5 3f ff ff       	call   c000f59c <malloc>
c001b5d7:	83 c4 0c             	add    esp,0xc
c001b5da:	89 c3                	mov    ebx,eax
c001b5dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5e1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5e4:	56                   	push   esi
c001b5e5:	53                   	push   ebx
c001b5e6:	e8 7f 74 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001b5eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5ee:	e8 53 76 ff ff       	call   c0012c46 <File::unlink()>
c001b5f3:	83 c4 10             	add    esp,0x10
c001b5f6:	85 db                	test   ebx,ebx
c001b5f8:	74 14                	je     c001b60e <sysCallUnlink(regs*)+0x4d>
c001b5fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b600:	83 ec 0c             	sub    esp,0xc
c001b603:	53                   	push   ebx
c001b604:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b607:	83 c4 10             	add    esp,0x10
c001b60a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b60e:	85 c0                	test   eax,eax
c001b610:	0f 95 c0             	setne  al
c001b613:	31 d2                	xor    edx,edx
c001b615:	0f b6 c0             	movzx  eax,al
c001b618:	f7 d8                	neg    eax
c001b61a:	83 d2 00             	adc    edx,0x0
c001b61d:	83 c4 14             	add    esp,0x14
c001b620:	f7 da                	neg    edx
c001b622:	5b                   	pop    ebx
c001b623:	5e                   	pop    esi
c001b624:	c3                   	ret    

c001b625 <sysCallGetArgv(regs*)>:
c001b625:	83 ec 0c             	sub    esp,0xc
c001b628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b62c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b62f:	85 c0                	test   eax,eax
c001b631:	78 2b                	js     c001b65e <sysCallGetArgv(regs*)+0x39>
c001b633:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b639:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b63c:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b642:	7d 1a                	jge    c001b65e <sysCallGetArgv(regs*)+0x39>
c001b644:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b64b:	85 c0                	test   eax,eax
c001b64d:	74 17                	je     c001b666 <sysCallGetArgv(regs*)+0x41>
c001b64f:	83 ec 08             	sub    esp,0x8
c001b652:	50                   	push   eax
c001b653:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b656:	e8 b1 51 fe ff       	call   c000080c <strcpy>
c001b65b:	83 c4 10             	add    esp,0x10
c001b65e:	31 c0                	xor    eax,eax
c001b660:	31 d2                	xor    edx,edx
c001b662:	83 c4 0c             	add    esp,0xc
c001b665:	c3                   	ret    
c001b666:	b8 01 00 00 00       	mov    eax,0x1
c001b66b:	31 d2                	xor    edx,edx
c001b66d:	83 c4 0c             	add    esp,0xc
c001b670:	c3                   	ret    

c001b671 <sysCallTTYName(regs*)>:
c001b671:	56                   	push   esi
c001b672:	53                   	push   ebx
c001b673:	53                   	push   ebx
c001b674:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b678:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b67b:	85 c0                	test   eax,eax
c001b67d:	74 5f                	je     c001b6de <sysCallTTYName(regs*)+0x6d>
c001b67f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b682:	83 f8 02             	cmp    eax,0x2
c001b685:	77 3e                	ja     c001b6c5 <sysCallTTYName(regs*)+0x54>
c001b687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b68c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b68f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b695:	85 db                	test   ebx,ebx
c001b697:	74 45                	je     c001b6de <sysCallTTYName(regs*)+0x6d>
c001b699:	83 ec 0c             	sub    esp,0xc
c001b69c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b69e:	53                   	push   ebx
c001b69f:	ff 10                	call   DWORD PTR [eax]
c001b6a1:	83 c4 10             	add    esp,0x10
c001b6a4:	84 c0                	test   al,al
c001b6a6:	74 41                	je     c001b6e9 <sysCallTTYName(regs*)+0x78>
c001b6a8:	83 ec 08             	sub    esp,0x8
c001b6ab:	81 c3 82 00 00 00    	add    ebx,0x82
c001b6b1:	53                   	push   ebx
c001b6b2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b6b5:	e8 52 51 fe ff       	call   c000080c <strcpy>
c001b6ba:	83 c4 10             	add    esp,0x10
c001b6bd:	31 c0                	xor    eax,eax
c001b6bf:	59                   	pop    ecx
c001b6c0:	31 d2                	xor    edx,edx
c001b6c2:	5b                   	pop    ebx
c001b6c3:	5e                   	pop    esi
c001b6c4:	c3                   	ret    
c001b6c5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b6ca:	74 bb                	je     c001b687 <sysCallTTYName(regs*)+0x16>
c001b6cc:	83 ec 0c             	sub    esp,0xc
c001b6cf:	50                   	push   eax
c001b6d0:	e8 76 59 ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b6d5:	83 c4 10             	add    esp,0x10
c001b6d8:	89 c3                	mov    ebx,eax
c001b6da:	85 db                	test   ebx,ebx
c001b6dc:	75 bb                	jne    c001b699 <sysCallTTYName(regs*)+0x28>
c001b6de:	59                   	pop    ecx
c001b6df:	b8 01 00 00 00       	mov    eax,0x1
c001b6e4:	31 d2                	xor    edx,edx
c001b6e6:	5b                   	pop    ebx
c001b6e7:	5e                   	pop    esi
c001b6e8:	c3                   	ret    
c001b6e9:	59                   	pop    ecx
c001b6ea:	b8 02 00 00 00       	mov    eax,0x2
c001b6ef:	31 d2                	xor    edx,edx
c001b6f1:	5b                   	pop    ebx
c001b6f2:	5e                   	pop    esi
c001b6f3:	c3                   	ret    

c001b6f4 <sysCallUSleep(regs*)>:
c001b6f4:	83 ec 14             	sub    esp,0x14
c001b6f7:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b6fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b700:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b707:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b70a:	01 ca                	add    edx,ecx
c001b70c:	52                   	push   edx
c001b70d:	50                   	push   eax
c001b70e:	e8 96 23 00 00       	call   c001daa9 <nanoSleep(unsigned long long)>
c001b713:	31 c0                	xor    eax,eax
c001b715:	31 d2                	xor    edx,edx
c001b717:	83 c4 1c             	add    esp,0x1c
c001b71a:	c3                   	ret    

c001b71b <sysCallSpawn(regs*)>:
c001b71b:	56                   	push   esi
c001b71c:	53                   	push   ebx
c001b71d:	50                   	push   eax
c001b71e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b722:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b725:	85 c0                	test   eax,eax
c001b727:	75 08                	jne    c001b731 <sysCallSpawn(regs*)+0x16>
c001b729:	59                   	pop    ecx
c001b72a:	31 c0                	xor    eax,eax
c001b72c:	31 d2                	xor    edx,edx
c001b72e:	5b                   	pop    ebx
c001b72f:	5e                   	pop    esi
c001b730:	c3                   	ret    
c001b731:	83 ec 0c             	sub    esp,0xc
c001b734:	68 3f 07 00 00       	push   0x73f
c001b739:	e8 5e 3e ff ff       	call   c000f59c <malloc>
c001b73e:	83 c4 10             	add    esp,0x10
c001b741:	89 c6                	mov    esi,eax
c001b743:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b746:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b749:	85 c0                	test   eax,eax
c001b74b:	75 32                	jne    c001b77f <sysCallSpawn(regs*)+0x64>
c001b74d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b752:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b755:	52                   	push   edx
c001b756:	50                   	push   eax
c001b757:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b75a:	56                   	push   esi
c001b75b:	e8 6e 1a 00 00       	call   c001d1ce <Process::Process(char const*, Process*, char**)>
c001b760:	83 c4 10             	add    esp,0x10
c001b763:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b76a:	75 bd                	jne    c001b729 <sysCallSpawn(regs*)+0xe>
c001b76c:	83 ec 0c             	sub    esp,0xc
c001b76f:	56                   	push   esi
c001b770:	e8 3b 1f 00 00       	call   c001d6b0 <Process::createUserThread()>
c001b775:	8b 06                	mov    eax,DWORD PTR [esi]
c001b777:	83 c4 10             	add    esp,0x10
c001b77a:	99                   	cdq    
c001b77b:	59                   	pop    ecx
c001b77c:	5b                   	pop    ebx
c001b77d:	5e                   	pop    esi
c001b77e:	c3                   	ret    
c001b77f:	31 c0                	xor    eax,eax
c001b781:	eb d2                	jmp    c001b755 <sysCallSpawn(regs*)+0x3a>

c001b783 <sysCallGetEnv(regs*)>:
c001b783:	57                   	push   edi
c001b784:	56                   	push   esi
c001b785:	53                   	push   ebx
c001b786:	83 ec 1c             	sub    esp,0x1c
c001b789:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b78d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b792:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b795:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b798:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b79b:	e8 f1 e3 ff ff       	call   c0019b91 <Krnl::getProcessTotalEnvCount(Process*)>
c001b7a0:	83 c4 10             	add    esp,0x10
c001b7a3:	39 c7                	cmp    edi,eax
c001b7a5:	7c 14                	jl     c001b7bb <sysCallGetEnv(regs*)+0x38>
c001b7a7:	85 f6                	test   esi,esi
c001b7a9:	75 0b                	jne    c001b7b6 <sysCallGetEnv(regs*)+0x33>
c001b7ab:	83 c4 10             	add    esp,0x10
c001b7ae:	31 c0                	xor    eax,eax
c001b7b0:	5b                   	pop    ebx
c001b7b1:	31 d2                	xor    edx,edx
c001b7b3:	5e                   	pop    esi
c001b7b4:	5f                   	pop    edi
c001b7b5:	c3                   	ret    
c001b7b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b7b9:	eb f0                	jmp    c001b7ab <sysCallGetEnv(regs*)+0x28>
c001b7bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b7bf:	52                   	push   edx
c001b7c0:	57                   	push   edi
c001b7c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b7c7:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b7ca:	50                   	push   eax
c001b7cb:	e8 e1 e3 ff ff       	call   c0019bb1 <Krnl::getProcessEnvPair(Process*, int)>
c001b7d0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b7d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b7db:	83 c4 0c             	add    esp,0xc
c001b7de:	85 c9                	test   ecx,ecx
c001b7e0:	75 23                	jne    c001b805 <sysCallGetEnv(regs*)+0x82>
c001b7e2:	83 ec 0c             	sub    esp,0xc
c001b7e5:	50                   	push   eax
c001b7e6:	e8 81 4f fe ff       	call   c000076c <strlen>
c001b7eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b7ee:	89 c3                	mov    ebx,eax
c001b7f0:	e8 77 4f fe ff       	call   c000076c <strlen>
c001b7f5:	83 c4 10             	add    esp,0x10
c001b7f8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b7fc:	83 c4 10             	add    esp,0x10
c001b7ff:	31 d2                	xor    edx,edx
c001b801:	5b                   	pop    ebx
c001b802:	5e                   	pop    esi
c001b803:	5f                   	pop    edi
c001b804:	c3                   	ret    
c001b805:	83 ec 08             	sub    esp,0x8
c001b808:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b80b:	50                   	push   eax
c001b80c:	56                   	push   esi
c001b80d:	e8 fa 4f fe ff       	call   c000080c <strcpy>
c001b812:	58                   	pop    eax
c001b813:	5a                   	pop    edx
c001b814:	68 0b b5 02 c0       	push   0xc002b50b
c001b819:	56                   	push   esi
c001b81a:	e8 2d 51 fe ff       	call   c000094c <strcat>
c001b81f:	59                   	pop    ecx
c001b820:	5b                   	pop    ebx
c001b821:	57                   	push   edi
c001b822:	56                   	push   esi
c001b823:	e8 24 51 fe ff       	call   c000094c <strcat>
c001b828:	83 c4 10             	add    esp,0x10
c001b82b:	e9 7b ff ff ff       	jmp    c001b7ab <sysCallGetEnv(regs*)+0x28>

c001b830 <sysAppSettings(regs*)>:
c001b830:	57                   	push   edi
c001b831:	56                   	push   esi
c001b832:	56                   	push   esi
c001b833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b837:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b83a:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b840:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b845:	66 3d c0 09          	cmp    ax,0x9c0
c001b849:	75 2e                	jne    c001b879 <sysAppSettings(regs*)+0x49>
c001b84b:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b851:	83 e0 1f             	and    eax,0x1f
c001b854:	3c 01                	cmp    al,0x1
c001b856:	74 2c                	je     c001b884 <sysAppSettings(regs*)+0x54>
c001b858:	3c 07                	cmp    al,0x7
c001b85a:	0f 84 b3 00 00 00    	je     c001b913 <sysAppSettings(regs*)+0xe3>
c001b860:	84 c0                	test   al,al
c001b862:	0f 84 d2 00 00 00    	je     c001b93a <sysAppSettings(regs*)+0x10a>
c001b868:	3c 08                	cmp    al,0x8
c001b86a:	74 63                	je     c001b8cf <sysAppSettings(regs*)+0x9f>
c001b86c:	59                   	pop    ecx
c001b86d:	0f b6 c0             	movzx  eax,al
c001b870:	5e                   	pop    esi
c001b871:	05 e8 03 00 00       	add    eax,0x3e8
c001b876:	5f                   	pop    edi
c001b877:	99                   	cdq    
c001b878:	c3                   	ret    
c001b879:	b8 01 00 00 00       	mov    eax,0x1
c001b87e:	59                   	pop    ecx
c001b87f:	31 d2                	xor    edx,edx
c001b881:	5e                   	pop    esi
c001b882:	5f                   	pop    edi
c001b883:	c3                   	ret    
c001b884:	50                   	push   eax
c001b885:	68 00 01 00 00       	push   0x100
c001b88a:	6a 00                	push   0x0
c001b88c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b891:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b894:	83 c0 0c             	add    eax,0xc
c001b897:	50                   	push   eax
c001b898:	e8 b3 4e fe ff       	call   c0000750 <memset>
c001b89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8a2:	b9 ff 00 00 00       	mov    ecx,0xff
c001b8a7:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001b8aa:	83 c7 0c             	add    edi,0xc
c001b8ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b8af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b4:	5a                   	pop    edx
c001b8b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8b8:	59                   	pop    ecx
c001b8b9:	8d 50 0c             	lea    edx,[eax+0xc]
c001b8bc:	52                   	push   edx
c001b8bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b8c3:	e8 ae 48 ff ff       	call   c0010176 <VgaText::setTitle(char*)>
c001b8c8:	83 c4 10             	add    esp,0x10
c001b8cb:	31 c0                	xor    eax,eax
c001b8cd:	eb af                	jmp    c001b87e <sysAppSettings(regs*)+0x4e>
c001b8cf:	83 ec 08             	sub    esp,0x8
c001b8d2:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b8d8:	83 e0 0f             	and    eax,0xf
c001b8db:	50                   	push   eax
c001b8dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b8ea:	e8 77 48 ff ff       	call   c0010166 <VgaText::setTitleColour(VgaColour)>
c001b8ef:	5f                   	pop    edi
c001b8f0:	58                   	pop    eax
c001b8f1:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b8f7:	c1 e8 04             	shr    eax,0x4
c001b8fa:	83 e0 0f             	and    eax,0xf
c001b8fd:	50                   	push   eax
c001b8fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b903:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b906:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b90c:	e8 45 48 ff ff       	call   c0010156 <VgaText::setTitleTextColour(VgaColour)>
c001b911:	eb b5                	jmp    c001b8c8 <sysAppSettings(regs*)+0x98>
c001b913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b918:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b91b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b921:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001b927:	c0 e8 06             	shr    al,0x6
c001b92a:	83 e0 01             	and    eax,0x1
c001b92d:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001b933:	31 c0                	xor    eax,eax
c001b935:	e9 44 ff ff ff       	jmp    c001b87e <sysAppSettings(regs*)+0x4e>
c001b93a:	b8 02 00 00 00       	mov    eax,0x2
c001b93f:	e9 3a ff ff ff       	jmp    c001b87e <sysAppSettings(regs*)+0x4e>

c001b944 <sysSetFatAttrib(regs*)>:
c001b944:	57                   	push   edi
c001b945:	56                   	push   esi
c001b946:	53                   	push   ebx
c001b947:	83 ec 1c             	sub    esp,0x1c
c001b94a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b94e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b951:	68 14 01 00 00       	push   0x114
c001b956:	e8 41 3c ff ff       	call   c000f59c <malloc>
c001b95b:	83 c4 0c             	add    esp,0xc
c001b95e:	89 c3                	mov    ebx,eax
c001b960:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b965:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b968:	57                   	push   edi
c001b969:	53                   	push   ebx
c001b96a:	e8 fb 70 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001b96f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b972:	83 c4 0c             	add    esp,0xc
c001b975:	0f b6 d4             	movzx  edx,ah
c001b978:	0f b6 c0             	movzx  eax,al
c001b97b:	52                   	push   edx
c001b97c:	50                   	push   eax
c001b97d:	53                   	push   ebx
c001b97e:	e8 5d 73 ff ff       	call   c0012ce0 <File::chfatattr(unsigned char, unsigned char)>
c001b983:	83 c4 10             	add    esp,0x10
c001b986:	85 db                	test   ebx,ebx
c001b988:	74 14                	je     c001b99e <sysSetFatAttrib(regs*)+0x5a>
c001b98a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b98e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b990:	83 ec 0c             	sub    esp,0xc
c001b993:	53                   	push   ebx
c001b994:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b997:	83 c4 10             	add    esp,0x10
c001b99a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b99e:	85 c0                	test   eax,eax
c001b9a0:	0f 95 c0             	setne  al
c001b9a3:	31 d2                	xor    edx,edx
c001b9a5:	0f b6 c0             	movzx  eax,al
c001b9a8:	f7 d8                	neg    eax
c001b9aa:	83 d2 00             	adc    edx,0x0
c001b9ad:	83 c4 10             	add    esp,0x10
c001b9b0:	f7 da                	neg    edx
c001b9b2:	5b                   	pop    ebx
c001b9b3:	5e                   	pop    esi
c001b9b4:	5f                   	pop    edi
c001b9b5:	c3                   	ret    

c001b9b6 <sysPipe(regs*)>:
c001b9b6:	57                   	push   edi
c001b9b7:	56                   	push   esi
c001b9b8:	53                   	push   ebx
c001b9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9bd:	83 ec 0c             	sub    esp,0xc
c001b9c0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b9c3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b9c6:	6a 20                	push   0x20
c001b9c8:	e8 cf 3b ff ff       	call   c000f59c <malloc>
c001b9cd:	89 c3                	mov    ebx,eax
c001b9cf:	58                   	pop    eax
c001b9d0:	5a                   	pop    edx
c001b9d1:	68 00 50 00 00       	push   0x5000
c001b9d6:	53                   	push   ebx
c001b9d7:	e8 12 45 ff ff       	call   c000feee <Pipe::Pipe(int)>
c001b9dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9df:	e8 72 53 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001b9e4:	89 07                	mov    DWORD PTR [edi],eax
c001b9e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9e9:	e8 68 53 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001b9ee:	83 c4 10             	add    esp,0x10
c001b9f1:	89 06                	mov    DWORD PTR [esi],eax
c001b9f3:	31 d2                	xor    edx,edx
c001b9f5:	5b                   	pop    ebx
c001b9f6:	31 c0                	xor    eax,eax
c001b9f8:	5e                   	pop    esi
c001b9f9:	5f                   	pop    edi
c001b9fa:	c3                   	ret    

c001b9fb <sysGetUnixTime(regs*)>:
c001b9fb:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001ba00:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba0a:	e9 4d 7a ff ff       	jmp    c001345c <Clock::timeInSecondsLocal()>

c001ba0f <string_ends_with(char const*, char const*)>:
c001ba0f:	57                   	push   edi
c001ba10:	56                   	push   esi
c001ba11:	53                   	push   ebx
c001ba12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba1a:	83 ec 0c             	sub    esp,0xc
c001ba1d:	53                   	push   ebx
c001ba1e:	e8 49 4d fe ff       	call   c000076c <strlen>
c001ba23:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba26:	89 c6                	mov    esi,eax
c001ba28:	e8 3f 4d fe ff       	call   c000076c <strlen>
c001ba2d:	83 c4 10             	add    esp,0x10
c001ba30:	39 c6                	cmp    esi,eax
c001ba32:	7d 06                	jge    c001ba3a <string_ends_with(char const*, char const*)+0x2b>
c001ba34:	5b                   	pop    ebx
c001ba35:	31 c0                	xor    eax,eax
c001ba37:	5e                   	pop    esi
c001ba38:	5f                   	pop    edi
c001ba39:	c3                   	ret    
c001ba3a:	83 ec 08             	sub    esp,0x8
c001ba3d:	29 c6                	sub    esi,eax
c001ba3f:	57                   	push   edi
c001ba40:	01 f3                	add    ebx,esi
c001ba42:	53                   	push   ebx
c001ba43:	e8 50 4e fe ff       	call   c0000898 <strcmp>
c001ba48:	83 c4 10             	add    esp,0x10
c001ba4b:	85 c0                	test   eax,eax
c001ba4d:	5b                   	pop    ebx
c001ba4e:	0f 94 c0             	sete   al
c001ba51:	5e                   	pop    esi
c001ba52:	0f b6 c0             	movzx  eax,al
c001ba55:	5f                   	pop    edi
c001ba56:	c3                   	ret    

c001ba57 <sysCallOpen(regs*)>:
c001ba57:	56                   	push   esi
c001ba58:	53                   	push   ebx
c001ba59:	81 ec 04 01 00 00    	sub    esp,0x104
c001ba5f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001ba66:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001ba69:	85 c9                	test   ecx,ecx
c001ba6b:	0f 84 ad 01 00 00    	je     c001bc1e <sysCallOpen(regs*)+0x1c7>
c001ba71:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001ba74:	85 c0                	test   eax,eax
c001ba76:	0f 84 a2 01 00 00    	je     c001bc1e <sysCallOpen(regs*)+0x1c7>
c001ba7c:	52                   	push   edx
c001ba7d:	68 0d b5 02 c0       	push   0xc002b50d
c001ba82:	50                   	push   eax
c001ba83:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001ba87:	56                   	push   esi
c001ba88:	e8 33 6e ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001ba8d:	89 34 24             	mov    DWORD PTR [esp],esi
c001ba90:	e8 d7 4c fe ff       	call   c000076c <strlen>
c001ba95:	83 c4 10             	add    esp,0x10
c001ba98:	48                   	dec    eax
c001ba99:	74 1d                	je     c001bab8 <sysCallOpen(regs*)+0x61>
c001ba9b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001ba9e:	eb 0f                	jmp    c001baaf <sysCallOpen(regs*)+0x58>
c001baa0:	80 fa 3a             	cmp    dl,0x3a
c001baa3:	74 0f                	je     c001bab4 <sysCallOpen(regs*)+0x5d>
c001baa5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001baa9:	48                   	dec    eax
c001baaa:	74 0c                	je     c001bab8 <sysCallOpen(regs*)+0x61>
c001baac:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001baaf:	80 fa 2e             	cmp    dl,0x2e
c001bab2:	75 ec                	jne    c001baa0 <sysCallOpen(regs*)+0x49>
c001bab4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bab8:	83 ec 08             	sub    esp,0x8
c001babb:	68 11 b5 02 c0       	push   0xc002b511
c001bac0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bac3:	e8 47 ff ff ff       	call   c001ba0f <string_ends_with(char const*, char const*)>
c001bac8:	83 c4 10             	add    esp,0x10
c001bacb:	85 c0                	test   eax,eax
c001bacd:	74 1d                	je     c001baec <sysCallOpen(regs*)+0x95>
c001bacf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bad2:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bad8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001badf:	81 c4 04 01 00 00    	add    esp,0x104
c001bae5:	31 c0                	xor    eax,eax
c001bae7:	31 d2                	xor    edx,edx
c001bae9:	5b                   	pop    ebx
c001baea:	5e                   	pop    esi
c001baeb:	c3                   	ret    
c001baec:	83 ec 08             	sub    esp,0x8
c001baef:	68 16 b5 02 c0       	push   0xc002b516
c001baf4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001baf7:	e8 13 ff ff ff       	call   c001ba0f <string_ends_with(char const*, char const*)>
c001bafc:	83 c4 10             	add    esp,0x10
c001baff:	85 c0                	test   eax,eax
c001bb01:	75 cc                	jne    c001bacf <sysCallOpen(regs*)+0x78>
c001bb03:	83 ec 08             	sub    esp,0x8
c001bb06:	68 12 b5 02 c0       	push   0xc002b512
c001bb0b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb0e:	e8 85 4d fe ff       	call   c0000898 <strcmp>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	85 c0                	test   eax,eax
c001bb18:	74 b5                	je     c001bacf <sysCallOpen(regs*)+0x78>
c001bb1a:	83 ec 08             	sub    esp,0x8
c001bb1d:	68 11 b5 02 c0       	push   0xc002b511
c001bb22:	56                   	push   esi
c001bb23:	e8 e7 fe ff ff       	call   c001ba0f <string_ends_with(char const*, char const*)>
c001bb28:	83 c4 10             	add    esp,0x10
c001bb2b:	85 c0                	test   eax,eax
c001bb2d:	75 a0                	jne    c001bacf <sysCallOpen(regs*)+0x78>
c001bb2f:	83 ec 08             	sub    esp,0x8
c001bb32:	68 1b b5 02 c0       	push   0xc002b51b
c001bb37:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb3a:	e8 d0 fe ff ff       	call   c001ba0f <string_ends_with(char const*, char const*)>
c001bb3f:	83 c4 10             	add    esp,0x10
c001bb42:	85 c0                	test   eax,eax
c001bb44:	0f 85 e7 00 00 00    	jne    c001bc31 <sysCallOpen(regs*)+0x1da>
c001bb4a:	83 ec 08             	sub    esp,0x8
c001bb4d:	68 20 b5 02 c0       	push   0xc002b520
c001bb52:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb55:	e8 b5 fe ff ff       	call   c001ba0f <string_ends_with(char const*, char const*)>
c001bb5a:	83 c4 10             	add    esp,0x10
c001bb5d:	85 c0                	test   eax,eax
c001bb5f:	0f 85 cc 00 00 00    	jne    c001bc31 <sysCallOpen(regs*)+0x1da>
c001bb65:	83 ec 08             	sub    esp,0x8
c001bb68:	68 1c b5 02 c0       	push   0xc002b51c
c001bb6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb70:	e8 23 4d fe ff       	call   c0000898 <strcmp>
c001bb75:	83 c4 10             	add    esp,0x10
c001bb78:	85 c0                	test   eax,eax
c001bb7a:	0f 84 b1 00 00 00    	je     c001bc31 <sysCallOpen(regs*)+0x1da>
c001bb80:	83 ec 08             	sub    esp,0x8
c001bb83:	68 1b b5 02 c0       	push   0xc002b51b
c001bb88:	56                   	push   esi
c001bb89:	e8 81 fe ff ff       	call   c001ba0f <string_ends_with(char const*, char const*)>
c001bb8e:	83 c4 10             	add    esp,0x10
c001bb91:	85 c0                	test   eax,eax
c001bb93:	0f 85 98 00 00 00    	jne    c001bc31 <sysCallOpen(regs*)+0x1da>
c001bb99:	83 ec 0c             	sub    esp,0xc
c001bb9c:	68 14 01 00 00       	push   0x114
c001bba1:	e8 f6 39 ff ff       	call   c000f59c <malloc>
c001bba6:	83 c4 0c             	add    esp,0xc
c001bba9:	89 c6                	mov    esi,eax
c001bbab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbb0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbb3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbb6:	56                   	push   esi
c001bbb7:	e8 ae 6e ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001bbbc:	83 c4 10             	add    esp,0x10
c001bbbf:	85 f6                	test   esi,esi
c001bbc1:	74 5b                	je     c001bc1e <sysCallOpen(regs*)+0x1c7>
c001bbc3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bbc6:	0f b6 c2             	movzx  eax,dl
c001bbc9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bbcc:	89 d0                	mov    eax,edx
c001bbce:	83 e0 01             	and    eax,0x1
c001bbd1:	f6 c2 02             	test   dl,0x2
c001bbd4:	74 03                	je     c001bbd9 <sysCallOpen(regs*)+0x182>
c001bbd6:	83 c8 02             	or     eax,0x2
c001bbd9:	f6 c2 04             	test   dl,0x4
c001bbdc:	74 03                	je     c001bbe1 <sysCallOpen(regs*)+0x18a>
c001bbde:	83 c8 04             	or     eax,0x4
c001bbe1:	f6 c2 08             	test   dl,0x8
c001bbe4:	74 03                	je     c001bbe9 <sysCallOpen(regs*)+0x192>
c001bbe6:	83 c8 0a             	or     eax,0xa
c001bbe9:	83 e2 10             	and    edx,0x10
c001bbec:	74 03                	je     c001bbf1 <sysCallOpen(regs*)+0x19a>
c001bbee:	83 c8 12             	or     eax,0x12
c001bbf1:	83 ec 08             	sub    esp,0x8
c001bbf4:	50                   	push   eax
c001bbf5:	56                   	push   esi
c001bbf6:	e8 d3 6e ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001bbfb:	83 c4 10             	add    esp,0x10
c001bbfe:	85 c0                	test   eax,eax
c001bc00:	75 1c                	jne    c001bc1e <sysCallOpen(regs*)+0x1c7>
c001bc02:	83 ec 0c             	sub    esp,0xc
c001bc05:	56                   	push   esi
c001bc06:	e8 4b 51 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001bc0b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	89 02                	mov    DWORD PTR [edx],eax
c001bc13:	c1 f8 1f             	sar    eax,0x1f
c001bc16:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc19:	e9 c1 fe ff ff       	jmp    c001badf <sysCallOpen(regs*)+0x88>
c001bc1e:	81 c4 04 01 00 00    	add    esp,0x104
c001bc24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc2e:	5b                   	pop    ebx
c001bc2f:	5e                   	pop    esi
c001bc30:	c3                   	ret    
c001bc31:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bc34:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bc3a:	e9 99 fe ff ff       	jmp    c001bad8 <sysCallOpen(regs*)+0x81>

c001bc3f <Sys::loadSyscalls()>:
c001bc3f:	c7 05 e0 00 03 c0 ac ae 01 c0 	mov    DWORD PTR ds:0xc00300e0,0xc001aeac
c001bc49:	c7 05 e4 00 03 c0 a4 aa 01 c0 	mov    DWORD PTR ds:0xc00300e4,0xc001aaa4
c001bc53:	c7 05 e8 00 03 c0 92 ac 01 c0 	mov    DWORD PTR ds:0xc00300e8,0xc001ac92
c001bc5d:	c7 05 ec 00 03 c0 e2 ad 01 c0 	mov    DWORD PTR ds:0xc00300ec,0xc001ade2
c001bc67:	c7 05 f0 00 03 c0 2a ac 01 c0 	mov    DWORD PTR ds:0xc00300f0,0xc001ac2a
c001bc71:	c7 05 f4 00 03 c0 db aa 01 c0 	mov    DWORD PTR ds:0xc00300f4,0xc001aadb
c001bc7b:	c7 05 f8 00 03 c0 bc aa 01 c0 	mov    DWORD PTR ds:0xc00300f8,0xc001aabc
c001bc85:	c7 05 fc 00 03 c0 e7 ac 01 c0 	mov    DWORD PTR ds:0xc00300fc,0xc001ace7
c001bc8f:	c7 05 04 01 03 c0 75 b3 01 c0 	mov    DWORD PTR ds:0xc0030104,0xc001b375
c001bc99:	c7 05 00 01 03 c0 57 ba 01 c0 	mov    DWORD PTR ds:0xc0030100,0xc001ba57
c001bca3:	c7 05 08 01 03 c0 d5 b3 01 c0 	mov    DWORD PTR ds:0xc0030108,0xc001b3d5
c001bcad:	c7 05 0c 01 03 c0 b8 b0 01 c0 	mov    DWORD PTR ds:0xc003010c,0xc001b0b8
c001bcb7:	c7 05 10 01 03 c0 f2 ae 01 c0 	mov    DWORD PTR ds:0xc0030110,0xc001aef2
c001bcc1:	c7 05 14 01 03 c0 f7 ae 01 c0 	mov    DWORD PTR ds:0xc0030114,0xc001aef7
c001bccb:	c7 05 18 01 03 c0 9e b4 01 c0 	mov    DWORD PTR ds:0xc0030118,0xc001b49e
c001bcd5:	c7 05 1c 01 03 c0 4a b4 01 c0 	mov    DWORD PTR ds:0xc003011c,0xc001b44a
c001bcdf:	c7 05 20 01 03 c0 91 b1 01 c0 	mov    DWORD PTR ds:0xc0030120,0xc001b191
c001bce9:	c7 05 24 01 03 c0 e8 b1 01 c0 	mov    DWORD PTR ds:0xc0030124,0xc001b1e8
c001bcf3:	c7 05 28 01 03 c0 54 b2 01 c0 	mov    DWORD PTR ds:0xc0030128,0xc001b254
c001bcfd:	c7 05 2c 01 03 c0 fc ae 01 c0 	mov    DWORD PTR ds:0xc003012c,0xc001aefc
c001bd07:	c7 05 30 01 03 c0 0e b5 01 c0 	mov    DWORD PTR ds:0xc0030130,0xc001b50e
c001bd11:	c7 05 34 01 03 c0 28 b5 01 c0 	mov    DWORD PTR ds:0xc0030134,0xc001b528
c001bd1b:	c7 05 38 01 03 c0 28 b5 01 c0 	mov    DWORD PTR ds:0xc0030138,0xc001b528
c001bd25:	c7 05 3c 01 03 c0 5d b5 01 c0 	mov    DWORD PTR ds:0xc003013c,0xc001b55d
c001bd2f:	c7 05 40 01 03 c0 c1 b5 01 c0 	mov    DWORD PTR ds:0xc0030140,0xc001b5c1
c001bd39:	c7 05 44 01 03 c0 06 af 01 c0 	mov    DWORD PTR ds:0xc0030144,0xc001af06
c001bd43:	c7 05 48 01 03 c0 25 b6 01 c0 	mov    DWORD PTR ds:0xc0030148,0xc001b625
c001bd4d:	c7 05 4c 01 03 c0 75 b0 01 c0 	mov    DWORD PTR ds:0xc003014c,0xc001b075
c001bd57:	c7 05 50 01 03 c0 71 b6 01 c0 	mov    DWORD PTR ds:0xc0030150,0xc001b671
c001bd61:	c7 05 54 01 03 c0 37 b1 01 c0 	mov    DWORD PTR ds:0xc0030154,0xc001b137
c001bd6b:	c7 05 58 01 03 c0 f4 b6 01 c0 	mov    DWORD PTR ds:0xc0030158,0xc001b6f4
c001bd75:	c7 05 5c 01 03 c0 c6 b2 01 c0 	mov    DWORD PTR ds:0xc003015c,0xc001b2c6
c001bd7f:	c7 05 60 01 03 c0 1b b7 01 c0 	mov    DWORD PTR ds:0xc0030160,0xc001b71b
c001bd89:	c7 05 64 01 03 c0 83 b7 01 c0 	mov    DWORD PTR ds:0xc0030164,0xc001b783
c001bd93:	c7 05 68 01 03 c0 30 b8 01 c0 	mov    DWORD PTR ds:0xc0030168,0xc001b830
c001bd9d:	c7 05 6c 01 03 c0 16 af 01 c0 	mov    DWORD PTR ds:0xc003016c,0xc001af16
c001bda7:	c7 05 70 01 03 c0 80 af 01 c0 	mov    DWORD PTR ds:0xc0030170,0xc001af80
c001bdb1:	c7 05 74 01 03 c0 c6 af 01 c0 	mov    DWORD PTR ds:0xc0030174,0xc001afc6
c001bdbb:	c7 05 78 01 03 c0 44 b9 01 c0 	mov    DWORD PTR ds:0xc0030178,0xc001b944
c001bdc5:	c7 05 7c 01 03 c0 43 b5 01 c0 	mov    DWORD PTR ds:0xc003017c,0xc001b543
c001bdcf:	c7 05 80 01 03 c0 17 b0 01 c0 	mov    DWORD PTR ds:0xc0030180,0xc001b017
c001bdd9:	c7 05 84 01 03 c0 b6 b9 01 c0 	mov    DWORD PTR ds:0xc0030184,0xc001b9b6
c001bde3:	c7 05 88 01 03 c0 fb b9 01 c0 	mov    DWORD PTR ds:0xc0030188,0xc001b9fb
c001bded:	c7 05 8c 01 03 c0 82 ab 01 c0 	mov    DWORD PTR ds:0xc003018c,0xc001ab82
c001bdf7:	c7 05 90 01 03 c0 03 ad 01 c0 	mov    DWORD PTR ds:0xc0030190,0xc001ad03
c001be01:	c7 05 94 01 03 c0 98 ad 01 c0 	mov    DWORD PTR ds:0xc0030194,0xc001ad98
c001be0b:	c7 05 98 01 03 c0 6e aa 01 c0 	mov    DWORD PTR ds:0xc0030198,0xc001aa6e
c001be15:	c7 05 9c 01 03 c0 4a ae 01 c0 	mov    DWORD PTR ds:0xc003019c,0xc001ae4a
c001be1f:	c7 05 a0 01 03 c0 e7 aa 01 c0 	mov    DWORD PTR ds:0xc00301a0,0xc001aae7
c001be29:	c7 05 a4 01 03 c0 fe aa 01 c0 	mov    DWORD PTR ds:0xc00301a4,0xc001aafe
c001be33:	c3                   	ret    

c001be34 <Sys::systemCall(regs*, void*)>:
c001be34:	53                   	push   ebx
c001be35:	83 ec 08             	sub    esp,0x8
c001be38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be3c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001be3f:	83 f8 7f             	cmp    eax,0x7f
c001be42:	77 16                	ja     c001be5a <Sys::systemCall(regs*, void*)+0x26>
c001be44:	8b 14 85 e0 00 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcff20]
c001be4b:	85 d2                	test   edx,edx
c001be4d:	74 0b                	je     c001be5a <Sys::systemCall(regs*, void*)+0x26>
c001be4f:	83 ec 0c             	sub    esp,0xc
c001be52:	53                   	push   ebx
c001be53:	ff d2                	call   edx
c001be55:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001be58:	eb 0d                	jmp    c001be67 <Sys::systemCall(regs*, void*)+0x33>
c001be5a:	52                   	push   edx
c001be5b:	52                   	push   edx
c001be5c:	50                   	push   eax
c001be5d:	68 25 b5 02 c0       	push   0xc002b525
c001be62:	e8 a4 66 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001be67:	83 c4 10             	add    esp,0x10
c001be6a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001be6f:	31 d2                	xor    edx,edx
c001be71:	83 c4 08             	add    esp,0x8
c001be74:	5b                   	pop    ebx
c001be75:	c3                   	ret    

c001be76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001be76:	55                   	push   ebp
c001be77:	57                   	push   edi
c001be78:	56                   	push   esi
c001be79:	53                   	push   ebx
c001be7a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001be80:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001be87:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001be8e:	85 c0                	test   eax,eax
c001be90:	0f 95 c1             	setne  cl
c001be93:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001be9b:	0f 94 c2             	sete   dl
c001be9e:	84 d1                	test   cl,dl
c001bea0:	74 23                	je     c001bec5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bea2:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001bea8:	74 1b                	je     c001bec5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001beaa:	81 c3 00 10 00 00    	add    ebx,0x1000
c001beb0:	89 da                	mov    edx,ebx
c001beb2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001beb8:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001bebe:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001bec5:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001becc:	05 ff 0f 00 00       	add    eax,0xfff
c001bed1:	83 ec 0c             	sub    esp,0xc
c001bed4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bed8:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001bede:	c1 e8 0c             	shr    eax,0xc
c001bee1:	89 fe                	mov    esi,edi
c001bee3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bee7:	c1 ee 0c             	shr    esi,0xc
c001beea:	6a 01                	push   0x1
c001beec:	e8 b0 52 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c001bef1:	89 c5                	mov    ebp,eax
c001bef3:	58                   	pop    eax
c001bef4:	5a                   	pop    edx
c001bef5:	56                   	push   esi
c001bef6:	68 39 b5 02 c0       	push   0xc002b539
c001befb:	e8 0b 66 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001bf00:	59                   	pop    ecx
c001bf01:	58                   	pop    eax
c001bf02:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bf06:	68 4b b5 02 c0       	push   0xc002b54b
c001bf0b:	e8 fb 65 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001bf10:	83 c4 10             	add    esp,0x10
c001bf13:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001bf19:	0f 86 31 01 00 00    	jbe    c001c050 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001bf1f:	c1 e6 0c             	shl    esi,0xc
c001bf22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf25:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001bf28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf2c:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001bf33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf36:	01 df                	add    edi,ebx
c001bf38:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001bf3b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001bf3f:	0f 84 08 01 00 00    	je     c001c04d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001bf45:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001bf4b:	76 05                	jbe    c001bf52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001bf4d:	bf 00 10 00 00       	mov    edi,0x1000
c001bf52:	83 ec 0c             	sub    esp,0xc
c001bf55:	31 d2                	xor    edx,edx
c001bf57:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bf5e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bf60:	8d 44 24 28          	lea    eax,[esp+0x28]
c001bf64:	50                   	push   eax
c001bf65:	8d 74 24 30          	lea    esi,[esp+0x30]
c001bf69:	56                   	push   esi
c001bf6a:	52                   	push   edx
c001bf6b:	57                   	push   edi
c001bf6c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001bf73:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf76:	83 c4 20             	add    esp,0x20
c001bf79:	85 c0                	test   eax,eax
c001bf7b:	74 0a                	je     c001bf87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001bf7d:	53                   	push   ebx
c001bf7e:	53                   	push   ebx
c001bf7f:	50                   	push   eax
c001bf80:	68 5d b5 02 c0       	push   0xc002b55d
c001bf85:	eb 0f                	jmp    c001bf96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001bf87:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001bf8b:	74 20                	je     c001bfad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001bf8d:	51                   	push   ecx
c001bf8e:	51                   	push   ecx
c001bf8f:	6a 00                	push   0x0
c001bf91:	68 88 b5 02 c0       	push   0xc002b588
c001bf96:	e8 70 65 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001bf9b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bf9e:	e8 44 56 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c001bfa3:	83 c4 10             	add    esp,0x10
c001bfa6:	31 c0                	xor    eax,eax
c001bfa8:	e9 68 01 00 00       	jmp    c001c115 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001bfad:	fa                   	cli    
c001bfae:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001bfb4:	e8 87 39 ff ff       	call   c000f940 <Phys::allocatePage()>
c001bfb9:	6a 07                	push   0x7
c001bfbb:	89 c7                	mov    edi,eax
c001bfbd:	55                   	push   ebp
c001bfbe:	50                   	push   eax
c001bfbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfc4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfc7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bfcd:	e8 8c 59 ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c001bfd2:	83 c4 0c             	add    esp,0xc
c001bfd5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001bfdc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bfe2:	6a 00                	push   0x0
c001bfe4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfe9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfec:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bff2:	e8 c1 57 ff ff       	call   c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>
c001bff7:	58                   	pop    eax
c001bff8:	5a                   	pop    edx
c001bff9:	68 07 0c 00 00       	push   0xc07
c001bffe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c002:	57                   	push   edi
c001c003:	89 ef                	mov    edi,ebp
c001c005:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c00c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c012:	6a 00                	push   0x0
c001c014:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c019:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c01c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c022:	e8 f3 5c ff ff       	call   c0011d1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c027:	b9 00 10 00 00       	mov    ecx,0x1000
c001c02c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c02e:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001c033:	83 c4 20             	add    esp,0x20
c001c036:	48                   	dec    eax
c001c037:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001c03c:	85 c0                	test   eax,eax
c001c03e:	75 01                	jne    c001c041 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c040:	fb                   	sti    
c001c041:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c048:	e9 df fe ff ff       	jmp    c001bf2c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c04d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c050:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c058:	0f 86 a9 00 00 00    	jbe    c001c107 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c05e:	fa                   	cli    
c001c05f:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001c065:	51                   	push   ecx
c001c066:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c06d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c073:	6a 00                	push   0x0
c001c075:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c07a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c07d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c083:	e8 30 57 ff ff       	call   c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>
c001c088:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c08c:	c1 e6 0c             	shl    esi,0xc
c001c08f:	01 de                	add    esi,ebx
c001c091:	83 c4 10             	add    esp,0x10
c001c094:	39 de                	cmp    esi,ebx
c001c096:	74 61                	je     c001c0f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c098:	e8 a3 38 ff ff       	call   c000f940 <Phys::allocatePage()>
c001c09d:	6a 07                	push   0x7
c001c09f:	89 c7                	mov    edi,eax
c001c0a1:	55                   	push   ebp
c001c0a2:	50                   	push   eax
c001c0a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0ab:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0b1:	e8 a8 58 ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c001c0b6:	58                   	pop    eax
c001c0b7:	5a                   	pop    edx
c001c0b8:	68 07 0c 00 00       	push   0xc07
c001c0bd:	53                   	push   ebx
c001c0be:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0c4:	57                   	push   edi
c001c0c5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c0cc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0d2:	6a 00                	push   0x0
c001c0d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0dc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0e2:	e8 33 5c ff ff       	call   c0011d1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c0e7:	83 c4 1c             	add    esp,0x1c
c001c0ea:	68 00 10 00 00       	push   0x1000
c001c0ef:	6a 00                	push   0x0
c001c0f1:	55                   	push   ebp
c001c0f2:	e8 59 46 fe ff       	call   c0000750 <memset>
c001c0f7:	eb 98                	jmp    c001c091 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c0f9:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001c0fe:	48                   	dec    eax
c001c0ff:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001c104:	75 01                	jne    c001c107 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c106:	fb                   	sti    
c001c107:	83 ec 0c             	sub    esp,0xc
c001c10a:	55                   	push   ebp
c001c10b:	e8 d7 54 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c001c110:	83 c4 10             	add    esp,0x10
c001c113:	b0 01                	mov    al,0x1
c001c115:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c11b:	5b                   	pop    ebx
c001c11c:	5e                   	pop    esi
c001c11d:	5f                   	pop    edi
c001c11e:	5d                   	pop    ebp
c001c11f:	c3                   	ret    

c001c120 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c120:	55                   	push   ebp
c001c121:	57                   	push   edi
c001c122:	56                   	push   esi
c001c123:	53                   	push   ebx
c001c124:	83 ec 48             	sub    esp,0x48
c001c127:	68 14 01 00 00       	push   0x114
c001c12c:	e8 6b 34 ff ff       	call   c000f59c <malloc>
c001c131:	83 c4 0c             	add    esp,0xc
c001c134:	89 c6                	mov    esi,eax
c001c136:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c13a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c13e:	50                   	push   eax
c001c13f:	e8 26 69 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001c144:	58                   	pop    eax
c001c145:	5a                   	pop    edx
c001c146:	6a 01                	push   0x1
c001c148:	56                   	push   esi
c001c149:	e8 80 69 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001c14e:	83 c4 10             	add    esp,0x10
c001c151:	85 c0                	test   eax,eax
c001c153:	0f 85 47 01 00 00    	jne    c001c2a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c159:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c161:	83 ec 0c             	sub    esp,0xc
c001c164:	6a 34                	push   0x34
c001c166:	e8 31 34 ff ff       	call   c000f59c <malloc>
c001c16b:	89 c3                	mov    ebx,eax
c001c16d:	58                   	pop    eax
c001c16e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c170:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c174:	57                   	push   edi
c001c175:	53                   	push   ebx
c001c176:	6a 00                	push   0x0
c001c178:	6a 34                	push   0x34
c001c17a:	56                   	push   esi
c001c17b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c17e:	83 c4 20             	add    esp,0x20
c001c181:	85 c0                	test   eax,eax
c001c183:	0f 85 17 01 00 00    	jne    c001c2a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c189:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c18f:	0f 85 0b 01 00 00    	jne    c001c2a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c195:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c198:	85 c0                	test   eax,eax
c001c19a:	0f 84 00 01 00 00    	je     c001c2a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1a0:	31 d2                	xor    edx,edx
c001c1a2:	55                   	push   ebp
c001c1a3:	52                   	push   edx
c001c1a4:	50                   	push   eax
c001c1a5:	56                   	push   esi
c001c1a6:	e8 e1 69 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c1ab:	83 c4 10             	add    esp,0x10
c001c1ae:	85 c0                	test   eax,eax
c001c1b0:	0f 85 ea 00 00 00    	jne    c001c2a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1b6:	83 ec 0c             	sub    esp,0xc
c001c1b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c1bc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c1c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c1c4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c1c8:	0f af c2             	imul   eax,edx
c001c1cb:	50                   	push   eax
c001c1cc:	e8 cb 33 ff ff       	call   c000f59c <malloc>
c001c1d1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c1d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c1d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1de:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c1e2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c1e6:	0f af c2             	imul   eax,edx
c001c1e9:	99                   	cdq    
c001c1ea:	52                   	push   edx
c001c1eb:	50                   	push   eax
c001c1ec:	56                   	push   esi
c001c1ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c1f0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c1f3:	83 c4 20             	add    esp,0x20
c001c1f6:	85 c0                	test   eax,eax
c001c1f8:	0f 84 a2 00 00 00    	je     c001c2a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1fe:	31 d2                	xor    edx,edx
c001c200:	51                   	push   ecx
c001c201:	52                   	push   edx
c001c202:	50                   	push   eax
c001c203:	56                   	push   esi
c001c204:	e8 83 69 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c209:	83 c4 10             	add    esp,0x10
c001c20c:	85 c0                	test   eax,eax
c001c20e:	0f 85 8c 00 00 00    	jne    c001c2a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c214:	83 ec 0c             	sub    esp,0xc
c001c217:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c21b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c21f:	31 ed                	xor    ebp,ebp
c001c221:	0f af c2             	imul   eax,edx
c001c224:	50                   	push   eax
c001c225:	e8 72 33 ff ff       	call   c000f59c <malloc>
c001c22a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c22c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c230:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c237:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c23b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c23f:	0f af c2             	imul   eax,edx
c001c242:	99                   	cdq    
c001c243:	52                   	push   edx
c001c244:	50                   	push   eax
c001c245:	56                   	push   esi
c001c246:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c249:	83 c4 20             	add    esp,0x20
c001c24c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c254:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c258:	0f 86 80 00 00 00    	jbe    c001c2de <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c25e:	0f b7 fd             	movzx  edi,bp
c001c261:	c1 e7 05             	shl    edi,0x5
c001c264:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c268:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c26b:	75 6b                	jne    c001c2d8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c26d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c270:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c274:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c27b:	52                   	push   edx
c001c27c:	31 d2                	xor    edx,edx
c001c27e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c281:	52                   	push   edx
c001c282:	50                   	push   eax
c001c283:	56                   	push   esi
c001c284:	e8 03 69 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c289:	83 c4 10             	add    esp,0x10
c001c28c:	85 c0                	test   eax,eax
c001c28e:	74 17                	je     c001c2a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c290:	83 ec 0c             	sub    esp,0xc
c001c293:	68 b4 b5 02 c0       	push   0xc002b5b4
c001c298:	e8 6e 62 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001c29d:	83 c4 10             	add    esp,0x10
c001c2a0:	31 c0                	xor    eax,eax
c001c2a2:	e9 87 00 00 00       	jmp    c001c32e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c2a7:	83 ec 0c             	sub    esp,0xc
c001c2aa:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c2ad:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c2b0:	50                   	push   eax
c001c2b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c2b9:	56                   	push   esi
c001c2ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c2be:	e8 b3 fb ff ff       	call   c001be76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c2c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2c7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c2cb:	83 c4 20             	add    esp,0x20
c001c2ce:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c2d2:	73 04                	jae    c001c2d8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c2d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2d8:	45                   	inc    ebp
c001c2d9:	e9 76 ff ff ff       	jmp    c001c254 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c2de:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c2e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2ea:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c2f0:	83 ec 0c             	sub    esp,0xc
c001c2f3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c2f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c2fe:	05 00 10 00 00       	add    eax,0x1000
c001c303:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c30a:	e8 9d 32 ff ff       	call   c000f5ac <free>
c001c30f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c312:	e8 95 32 ff ff       	call   c000f5ac <free>
c001c317:	58                   	pop    eax
c001c318:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c31c:	e8 8b 32 ff ff       	call   c000f5ac <free>
c001c321:	89 34 24             	mov    DWORD PTR [esp],esi
c001c324:	e8 03 68 ff ff       	call   c0012b2c <File::close()>
c001c329:	83 c4 10             	add    esp,0x10
c001c32c:	b0 01                	mov    al,0x1
c001c32e:	83 c4 3c             	add    esp,0x3c
c001c331:	5b                   	pop    ebx
c001c332:	5e                   	pop    esi
c001c333:	5f                   	pop    edi
c001c334:	5d                   	pop    ebp
c001c335:	c3                   	ret    

c001c336 <Thr::runtimeReferenceHelper()>:
c001c336:	83 ec 18             	sub    esp,0x18
c001c339:	68 bc b5 02 c0       	push   0xc002b5bc
c001c33e:	e8 c8 61 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001c343:	fa                   	cli    
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	eb fe                	jmp    c001c347 <Thr::runtimeReferenceHelper()+0x11>

c001c349 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c349:	57                   	push   edi
c001c34a:	56                   	push   esi
c001c34b:	53                   	push   ebx
c001c34c:	31 db                	xor    ebx,ebx
c001c34e:	39 1d 80 0a 03 c0    	cmp    DWORD PTR ds:0xc0030a80,ebx
c001c354:	7e 3c                	jle    c001c392 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c356:	8b 34 9d 00 0a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf600]
c001c35d:	31 ff                	xor    edi,edi
c001c35f:	39 3c 9d 00 09 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf700],edi
c001c366:	7e 27                	jle    c001c38f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c368:	50                   	push   eax
c001c369:	50                   	push   eax
c001c36a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c36e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c370:	03 04 9d 80 09 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf680]
c001c377:	50                   	push   eax
c001c378:	e8 1b 45 fe ff       	call   c0000898 <strcmp>
c001c37d:	83 c4 10             	add    esp,0x10
c001c380:	85 c0                	test   eax,eax
c001c382:	75 05                	jne    c001c389 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c384:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c387:	eb 0b                	jmp    c001c394 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c389:	83 c6 10             	add    esi,0x10
c001c38c:	47                   	inc    edi
c001c38d:	eb d0                	jmp    c001c35f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c38f:	43                   	inc    ebx
c001c390:	eb bc                	jmp    c001c34e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c392:	31 c0                	xor    eax,eax
c001c394:	5b                   	pop    ebx
c001c395:	5e                   	pop    esi
c001c396:	5f                   	pop    edi
c001c397:	c3                   	ret    

c001c398 <Thr::loadKernelSymbolTable(char const*)>:
c001c398:	55                   	push   ebp
c001c399:	57                   	push   edi
c001c39a:	56                   	push   esi
c001c39b:	53                   	push   ebx
c001c39c:	83 ec 68             	sub    esp,0x68
c001c39f:	8b 35 d0 0a 03 c0    	mov    esi,DWORD PTR ds:0xc0030ad0
c001c3a5:	68 14 01 00 00       	push   0x114
c001c3aa:	e8 ed 31 ff ff       	call   c000f59c <malloc>
c001c3af:	83 c4 0c             	add    esp,0xc
c001c3b2:	89 c3                	mov    ebx,eax
c001c3b4:	56                   	push   esi
c001c3b5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c3b9:	50                   	push   eax
c001c3ba:	e8 ab 66 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001c3bf:	5e                   	pop    esi
c001c3c0:	5f                   	pop    edi
c001c3c1:	6a 01                	push   0x1
c001c3c3:	53                   	push   ebx
c001c3c4:	e8 05 67 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001c3c9:	83 c4 10             	add    esp,0x10
c001c3cc:	85 c0                	test   eax,eax
c001c3ce:	74 0a                	je     c001c3da <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c3d0:	83 ec 0c             	sub    esp,0xc
c001c3d3:	68 de b5 02 c0       	push   0xc002b5de
c001c3d8:	eb 34                	jmp    c001c40e <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c3da:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c3e2:	83 ec 0c             	sub    esp,0xc
c001c3e5:	6a 34                	push   0x34
c001c3e7:	e8 b0 31 ff ff       	call   c000f59c <malloc>
c001c3ec:	59                   	pop    ecx
c001c3ed:	89 c7                	mov    edi,eax
c001c3ef:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c3f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3f5:	56                   	push   esi
c001c3f6:	57                   	push   edi
c001c3f7:	6a 00                	push   0x0
c001c3f9:	6a 34                	push   0x34
c001c3fb:	53                   	push   ebx
c001c3fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3ff:	83 c4 20             	add    esp,0x20
c001c402:	85 c0                	test   eax,eax
c001c404:	74 17                	je     c001c41d <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	68 f5 b5 02 c0       	push   0xc002b5f5
c001c40e:	e8 32 d8 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001c413:	83 c4 10             	add    esp,0x10
c001c416:	31 c0                	xor    eax,eax
c001c418:	e9 31 02 00 00       	jmp    c001c64e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c41d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c423:	75 e1                	jne    c001c406 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c425:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c428:	85 c0                	test   eax,eax
c001c42a:	74 da                	je     c001c406 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c42c:	52                   	push   edx
c001c42d:	31 d2                	xor    edx,edx
c001c42f:	52                   	push   edx
c001c430:	50                   	push   eax
c001c431:	53                   	push   ebx
c001c432:	e8 55 67 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c437:	83 c4 10             	add    esp,0x10
c001c43a:	85 c0                	test   eax,eax
c001c43c:	75 c8                	jne    c001c406 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c43e:	83 ec 0c             	sub    esp,0xc
c001c441:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c445:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c449:	31 ed                	xor    ebp,ebp
c001c44b:	0f af c2             	imul   eax,edx
c001c44e:	50                   	push   eax
c001c44f:	e8 48 31 ff ff       	call   c000f59c <malloc>
c001c454:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c456:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c45a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c45d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c461:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c465:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c469:	0f af c2             	imul   eax,edx
c001c46c:	99                   	cdq    
c001c46d:	52                   	push   edx
c001c46e:	50                   	push   eax
c001c46f:	53                   	push   ebx
c001c470:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c473:	83 c4 20             	add    esp,0x20
c001c476:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c47e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c486:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c48e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c496:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c49a:	0f 86 aa 00 00 00    	jbe    c001c54a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c4a0:	0f b7 f5             	movzx  esi,bp
c001c4a3:	6b f6 28             	imul   esi,esi,0x28
c001c4a6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c4aa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c4ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4b1:	50                   	push   eax
c001c4b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c4b6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c4ba:	8b 16                	mov    edx,DWORD PTR [esi]
c001c4bc:	6b c0 28             	imul   eax,eax,0x28
c001c4bf:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c4c3:	89 d0                	mov    eax,edx
c001c4c5:	31 d2                	xor    edx,edx
c001c4c7:	52                   	push   edx
c001c4c8:	50                   	push   eax
c001c4c9:	53                   	push   ebx
c001c4ca:	e8 bd 66 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c4cf:	83 c4 0c             	add    esp,0xc
c001c4d2:	6a 20                	push   0x20
c001c4d4:	6a 00                	push   0x0
c001c4d6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c4da:	52                   	push   edx
c001c4db:	e8 70 42 fe ff       	call   c0000750 <memset>
c001c4e0:	58                   	pop    eax
c001c4e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4e3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c4e7:	51                   	push   ecx
c001c4e8:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c4ec:	52                   	push   edx
c001c4ed:	6a 00                	push   0x0
c001c4ef:	6a 1f                	push   0x1f
c001c4f1:	53                   	push   ebx
c001c4f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c4f5:	83 c4 18             	add    esp,0x18
c001c4f8:	68 0c b6 02 c0       	push   0xc002b60c
c001c4fd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c501:	52                   	push   edx
c001c502:	e8 91 43 fe ff       	call   c0000898 <strcmp>
c001c507:	83 c4 10             	add    esp,0x10
c001c50a:	85 c0                	test   eax,eax
c001c50c:	75 0f                	jne    c001c51d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c50e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c515:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c519:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c51d:	50                   	push   eax
c001c51e:	50                   	push   eax
c001c51f:	68 14 b6 02 c0       	push   0xc002b614
c001c524:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c528:	50                   	push   eax
c001c529:	e8 6a 43 fe ff       	call   c0000898 <strcmp>
c001c52e:	83 c4 10             	add    esp,0x10
c001c531:	85 c0                	test   eax,eax
c001c533:	75 0f                	jne    c001c544 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c535:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c538:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c53c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c544:	45                   	inc    ebp
c001c545:	e9 4c ff ff ff       	jmp    c001c496 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c54a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c54f:	75 10                	jne    c001c561 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c551:	83 ec 0c             	sub    esp,0xc
c001c554:	68 1c b6 02 c0       	push   0xc002b61c
c001c559:	e8 e7 d6 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001c55e:	83 c4 10             	add    esp,0x10
c001c561:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c566:	75 10                	jne    c001c578 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c568:	83 ec 0c             	sub    esp,0xc
c001c56b:	68 1c b6 02 c0       	push   0xc002b61c
c001c570:	e8 d0 d6 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001c575:	83 c4 10             	add    esp,0x10
c001c578:	31 d2                	xor    edx,edx
c001c57a:	50                   	push   eax
c001c57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57f:	52                   	push   edx
c001c580:	50                   	push   eax
c001c581:	53                   	push   ebx
c001c582:	e8 05 66 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c587:	5a                   	pop    edx
c001c588:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c58c:	e8 0b 30 ff ff       	call   c000f59c <malloc>
c001c591:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c595:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c599:	31 c9                	xor    ecx,ecx
c001c59b:	5e                   	pop    esi
c001c59c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c59e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c5a2:	55                   	push   ebp
c001c5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5a7:	51                   	push   ecx
c001c5a8:	52                   	push   edx
c001c5a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c5ad:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c5b1:	53                   	push   ebx
c001c5b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5b5:	83 c4 14             	add    esp,0x14
c001c5b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5bc:	e8 db 2f ff ff       	call   c000f59c <malloc>
c001c5c1:	89 c6                	mov    esi,eax
c001c5c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5c8:	56                   	push   esi
c001c5c9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c5cd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c5d1:	51                   	push   ecx
c001c5d2:	52                   	push   edx
c001c5d3:	53                   	push   ebx
c001c5d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5db:	8b 15 80 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030a80
c001c5e1:	83 c4 1c             	add    esp,0x1c
c001c5e4:	c1 e8 04             	shr    eax,0x4
c001c5e7:	89 04 95 00 09 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf700],eax
c001c5ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c5f2:	31 d2                	xor    edx,edx
c001c5f4:	52                   	push   edx
c001c5f5:	50                   	push   eax
c001c5f6:	53                   	push   ebx
c001c5f7:	e8 90 65 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c5fc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c5fe:	31 d2                	xor    edx,edx
c001c600:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c603:	56                   	push   esi
c001c604:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c608:	52                   	push   edx
c001c609:	50                   	push   eax
c001c60a:	53                   	push   ebx
c001c60b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c60e:	83 c4 14             	add    esp,0x14
c001c611:	53                   	push   ebx
c001c612:	e8 15 65 ff ff       	call   c0012b2c <File::close()>
c001c617:	5d                   	pop    ebp
c001c618:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c61c:	e8 8b 2f ff ff       	call   c000f5ac <free>
c001c621:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c624:	e8 83 2f ff ff       	call   c000f5ac <free>
c001c629:	a1 80 0a 03 c0       	mov    eax,ds:0xc0030a80
c001c62e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c632:	8d 50 01             	lea    edx,[eax+0x1]
c001c635:	89 0c 85 00 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf600],ecx
c001c63c:	89 34 85 80 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf680],esi
c001c643:	89 15 80 0a 03 c0    	mov    DWORD PTR ds:0xc0030a80,edx
c001c649:	83 c4 10             	add    esp,0x10
c001c64c:	b0 01                	mov    al,0x1
c001c64e:	83 c4 5c             	add    esp,0x5c
c001c651:	5b                   	pop    ebx
c001c652:	5e                   	pop    esi
c001c653:	5f                   	pop    edi
c001c654:	5d                   	pop    ebp
c001c655:	c3                   	ret    

c001c656 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c656:	55                   	push   ebp
c001c657:	57                   	push   edi
c001c658:	56                   	push   esi
c001c659:	53                   	push   ebx
c001c65a:	81 ec 68 03 00 00    	sub    esp,0x368
c001c660:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c667:	8b 1d d0 0a 03 c0    	mov    ebx,DWORD PTR ds:0xc0030ad0
c001c66d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c671:	68 14 01 00 00       	push   0x114
c001c676:	e8 21 2f ff ff       	call   c000f59c <malloc>
c001c67b:	83 c4 0c             	add    esp,0xc
c001c67e:	89 c5                	mov    ebp,eax
c001c680:	53                   	push   ebx
c001c681:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c688:	50                   	push   eax
c001c689:	e8 dc 63 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001c68e:	5e                   	pop    esi
c001c68f:	5f                   	pop    edi
c001c690:	6a 01                	push   0x1
c001c692:	55                   	push   ebp
c001c693:	e8 36 64 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001c698:	83 c4 10             	add    esp,0x10
c001c69b:	85 c0                	test   eax,eax
c001c69d:	0f 85 a7 06 00 00    	jne    c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6a3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6ab:	83 ec 0c             	sub    esp,0xc
c001c6ae:	6a 34                	push   0x34
c001c6b0:	e8 e7 2e ff ff       	call   c000f59c <malloc>
c001c6b5:	5b                   	pop    ebx
c001c6b6:	89 c7                	mov    edi,eax
c001c6b8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c6bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6bf:	53                   	push   ebx
c001c6c0:	57                   	push   edi
c001c6c1:	6a 00                	push   0x0
c001c6c3:	6a 34                	push   0x34
c001c6c5:	55                   	push   ebp
c001c6c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6c9:	83 c4 20             	add    esp,0x20
c001c6cc:	85 c0                	test   eax,eax
c001c6ce:	0f 85 76 06 00 00    	jne    c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6d4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c6da:	0f 85 6a 06 00 00    	jne    c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6e0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c6e3:	85 c0                	test   eax,eax
c001c6e5:	0f 84 5f 06 00 00    	je     c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6eb:	31 d2                	xor    edx,edx
c001c6ed:	51                   	push   ecx
c001c6ee:	52                   	push   edx
c001c6ef:	50                   	push   eax
c001c6f0:	55                   	push   ebp
c001c6f1:	e8 96 64 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c6f6:	83 c4 10             	add    esp,0x10
c001c6f9:	85 c0                	test   eax,eax
c001c6fb:	0f 85 49 06 00 00    	jne    c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c701:	83 ec 0c             	sub    esp,0xc
c001c704:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c707:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c70b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c70f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c713:	0f af c2             	imul   eax,edx
c001c716:	50                   	push   eax
c001c717:	e8 80 2e ff ff       	call   c000f59c <malloc>
c001c71c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c71f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c723:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c726:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c72a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c72e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c732:	0f af c2             	imul   eax,edx
c001c735:	99                   	cdq    
c001c736:	52                   	push   edx
c001c737:	50                   	push   eax
c001c738:	55                   	push   ebp
c001c739:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c73c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c73f:	83 c4 20             	add    esp,0x20
c001c742:	85 c0                	test   eax,eax
c001c744:	0f 84 00 06 00 00    	je     c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c74a:	52                   	push   edx
c001c74b:	31 d2                	xor    edx,edx
c001c74d:	52                   	push   edx
c001c74e:	50                   	push   eax
c001c74f:	55                   	push   ebp
c001c750:	e8 37 64 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c755:	83 c4 10             	add    esp,0x10
c001c758:	85 c0                	test   eax,eax
c001c75a:	0f 85 ea 05 00 00    	jne    c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c760:	83 ec 0c             	sub    esp,0xc
c001c763:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c767:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c76b:	31 f6                	xor    esi,esi
c001c76d:	0f af c2             	imul   eax,edx
c001c770:	50                   	push   eax
c001c771:	e8 26 2e ff ff       	call   c000f59c <malloc>
c001c776:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c779:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c77d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c780:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c784:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c788:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c78c:	0f af c2             	imul   eax,edx
c001c78f:	99                   	cdq    
c001c790:	52                   	push   edx
c001c791:	50                   	push   eax
c001c792:	55                   	push   ebp
c001c793:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c796:	83 c4 20             	add    esp,0x20
c001c799:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c79d:	0f 86 8a 00 00 00    	jbe    c001c82d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c7a3:	0f b7 de             	movzx  ebx,si
c001c7a6:	c1 e3 05             	shl    ebx,0x5
c001c7a9:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c7ad:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c7b0:	75 75                	jne    c001c827 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c7b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c7b5:	31 d2                	xor    edx,edx
c001c7b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c7be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7c2:	50                   	push   eax
c001c7c3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c7c6:	52                   	push   edx
c001c7c7:	50                   	push   eax
c001c7c8:	55                   	push   ebp
c001c7c9:	e8 be 63 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c7ce:	83 c4 10             	add    esp,0x10
c001c7d1:	85 c0                	test   eax,eax
c001c7d3:	0f 85 71 05 00 00    	jne    c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7d9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c7e0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7e3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c7e7:	31 d2                	xor    edx,edx
c001c7e9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c7ed:	83 ec 0c             	sub    esp,0xc
c001c7f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7f4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c7fb:	50                   	push   eax
c001c7fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c804:	52                   	push   edx
c001c805:	50                   	push   eax
c001c806:	55                   	push   ebp
c001c807:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c80a:	83 c4 1c             	add    esp,0x1c
c001c80d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c810:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c813:	50                   	push   eax
c001c814:	6a 00                	push   0x0
c001c816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c81e:	50                   	push   eax
c001c81f:	e8 2c 3f fe ff       	call   c0000750 <memset>
c001c824:	83 c4 10             	add    esp,0x10
c001c827:	46                   	inc    esi
c001c828:	e9 6c ff ff ff       	jmp    c001c799 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c82d:	53                   	push   ebx
c001c82e:	31 db                	xor    ebx,ebx
c001c830:	68 00 01 00 00       	push   0x100
c001c835:	6a 00                	push   0x0
c001c837:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c83b:	50                   	push   eax
c001c83c:	e8 0f 3f fe ff       	call   c0000750 <memset>
c001c841:	83 c4 0c             	add    esp,0xc
c001c844:	68 00 01 00 00       	push   0x100
c001c849:	6a 00                	push   0x0
c001c84b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c852:	50                   	push   eax
c001c853:	e8 f8 3e fe ff       	call   c0000750 <memset>
c001c858:	83 c4 10             	add    esp,0x10
c001c85b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c863:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c86b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c873:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c87b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c883:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c887:	0f 86 30 01 00 00    	jbe    c001c9bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c88d:	0f b7 f3             	movzx  esi,bx
c001c890:	6b f6 28             	imul   esi,esi,0x28
c001c893:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c897:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c89a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c89e:	52                   	push   edx
c001c89f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8a3:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c8a7:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8a9:	6b d2 28             	imul   edx,edx,0x28
c001c8ac:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c8b0:	31 d2                	xor    edx,edx
c001c8b2:	52                   	push   edx
c001c8b3:	50                   	push   eax
c001c8b4:	55                   	push   ebp
c001c8b5:	e8 d2 62 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c8ba:	83 c4 0c             	add    esp,0xc
c001c8bd:	6a 20                	push   0x20
c001c8bf:	6a 00                	push   0x0
c001c8c1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c8c8:	51                   	push   ecx
c001c8c9:	e8 82 3e fe ff       	call   c0000750 <memset>
c001c8ce:	59                   	pop    ecx
c001c8cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8d2:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c8d6:	52                   	push   edx
c001c8d7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c8de:	51                   	push   ecx
c001c8df:	6a 00                	push   0x0
c001c8e1:	6a 1f                	push   0x1f
c001c8e3:	55                   	push   ebp
c001c8e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8e7:	83 c4 1c             	add    esp,0x1c
c001c8ea:	6a 09                	push   0x9
c001c8ec:	68 36 b6 02 c0       	push   0xc002b636
c001c8f1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c8f8:	51                   	push   ecx
c001c8f9:	e8 4e 3d fe ff       	call   c000064c <memcmp>
c001c8fe:	83 c4 10             	add    esp,0x10
c001c901:	85 c0                	test   eax,eax
c001c903:	75 21                	jne    c001c926 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c905:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c909:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c90d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c911:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c915:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c918:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c91f:	89 d0                	mov    eax,edx
c001c921:	40                   	inc    eax
c001c922:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c926:	50                   	push   eax
c001c927:	6a 09                	push   0x9
c001c929:	68 40 b6 02 c0       	push   0xc002b640
c001c92e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c935:	50                   	push   eax
c001c936:	e8 11 3d fe ff       	call   c000064c <memcmp>
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	85 c0                	test   eax,eax
c001c940:	75 21                	jne    c001c963 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c946:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c94a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c94e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c952:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c955:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c95c:	89 d0                	mov    eax,edx
c001c95e:	40                   	inc    eax
c001c95f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c963:	50                   	push   eax
c001c964:	50                   	push   eax
c001c965:	68 0c b6 02 c0       	push   0xc002b60c
c001c96a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c971:	50                   	push   eax
c001c972:	e8 21 3f fe ff       	call   c0000898 <strcmp>
c001c977:	83 c4 10             	add    esp,0x10
c001c97a:	85 c0                	test   eax,eax
c001c97c:	75 0f                	jne    c001c98d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c97e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c981:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c985:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c98d:	50                   	push   eax
c001c98e:	50                   	push   eax
c001c98f:	68 14 b6 02 c0       	push   0xc002b614
c001c994:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c99b:	50                   	push   eax
c001c99c:	e8 f7 3e fe ff       	call   c0000898 <strcmp>
c001c9a1:	83 c4 10             	add    esp,0x10
c001c9a4:	85 c0                	test   eax,eax
c001c9a6:	75 0f                	jne    c001c9b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c9a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c9b7:	43                   	inc    ebx
c001c9b8:	e9 c6 fe ff ff       	jmp    c001c883 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c9bd:	31 d2                	xor    edx,edx
c001c9bf:	50                   	push   eax
c001c9c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9c4:	52                   	push   edx
c001c9c5:	50                   	push   eax
c001c9c6:	55                   	push   ebp
c001c9c7:	e8 c0 61 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c9cc:	58                   	pop    eax
c001c9cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9d1:	e8 c6 2b ff ff       	call   c000f59c <malloc>
c001c9d6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9d9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c9dd:	31 d2                	xor    edx,edx
c001c9df:	58                   	pop    eax
c001c9e0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c9e4:	53                   	push   ebx
c001c9e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c9e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c9ed:	52                   	push   edx
c001c9ee:	50                   	push   eax
c001c9ef:	55                   	push   ebp
c001c9f0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9f3:	83 c4 14             	add    esp,0x14
c001c9f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9fa:	e8 9d 2b ff ff       	call   c000f59c <malloc>
c001c9ff:	31 d2                	xor    edx,edx
c001ca01:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca05:	83 c4 0c             	add    esp,0xc
c001ca08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca0c:	52                   	push   edx
c001ca0d:	50                   	push   eax
c001ca0e:	55                   	push   ebp
c001ca0f:	e8 78 61 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001ca14:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca17:	31 d2                	xor    edx,edx
c001ca19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ca20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca24:	52                   	push   edx
c001ca25:	50                   	push   eax
c001ca26:	55                   	push   ebp
c001ca27:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca2a:	83 c4 20             	add    esp,0x20
c001ca2d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ca39:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ca3d:	0f 84 0b 03 00 00    	je     c001cd4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001ca43:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001ca4a:	31 d2                	xor    edx,edx
c001ca4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca50:	c1 e8 03             	shr    eax,0x3
c001ca53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ca57:	51                   	push   ecx
c001ca58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca5c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001ca60:	52                   	push   edx
c001ca61:	50                   	push   eax
c001ca62:	55                   	push   ebp
c001ca63:	e8 24 61 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001ca68:	5b                   	pop    ebx
c001ca69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca6d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001ca74:	e8 23 2b ff ff       	call   c000f59c <malloc>
c001ca79:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca80:	31 d2                	xor    edx,edx
c001ca82:	5e                   	pop    esi
c001ca83:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ca87:	50                   	push   eax
c001ca88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca90:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001ca97:	52                   	push   edx
c001ca98:	50                   	push   eax
c001ca99:	55                   	push   ebp
c001ca9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca9d:	83 c4 20             	add    esp,0x20
c001caa0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001caa8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001caac:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cab0:	0f 8d 7c 02 00 00    	jge    c001cd32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cab6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001caba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cabe:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cac3:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cac6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001caca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cace:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cad2:	89 d8                	mov    eax,ebx
c001cad4:	c1 e8 08             	shr    eax,0x8
c001cad7:	89 c6                	mov    esi,eax
c001cad9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cadd:	c1 e6 04             	shl    esi,0x4
c001cae0:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cae4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cae7:	85 d2                	test   edx,edx
c001cae9:	0f 85 bf 00 00 00    	jne    c001cbae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001caef:	83 ec 0c             	sub    esp,0xc
c001caf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001caf6:	03 06                	add    eax,DWORD PTR [esi]
c001caf8:	50                   	push   eax
c001caf9:	e8 4b f8 ff ff       	call   c001c349 <Thr::getAddressOfKernelSymbol(char const*)>
c001cafe:	83 c4 10             	add    esp,0x10
c001cb01:	89 c2                	mov    edx,eax
c001cb03:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cb08:	85 c0                	test   eax,eax
c001cb0a:	0f 85 9e 00 00 00    	jne    c001cbae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb10:	83 ec 0c             	sub    esp,0xc
c001cb13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb17:	03 06                	add    eax,DWORD PTR [esi]
c001cb19:	50                   	push   eax
c001cb1a:	e8 20 1a ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	89 c2                	mov    edx,eax
c001cb24:	85 c0                	test   eax,eax
c001cb26:	0f 85 82 00 00 00    	jne    c001cbae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb2c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cb30:	50                   	push   eax
c001cb31:	50                   	push   eax
c001cb32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb36:	03 06                	add    eax,DWORD PTR [esi]
c001cb38:	50                   	push   eax
c001cb39:	68 4a b6 02 c0       	push   0xc002b64a
c001cb3e:	e8 c8 59 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001cb43:	58                   	pop    eax
c001cb44:	5a                   	pop    edx
c001cb45:	68 64 b6 02 c0       	push   0xc002b664
c001cb4a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb51:	50                   	push   eax
c001cb52:	e8 b5 3c fe ff       	call   c000080c <strcpy>
c001cb57:	59                   	pop    ecx
c001cb58:	58                   	pop    eax
c001cb59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb5d:	03 06                	add    eax,DWORD PTR [esi]
c001cb5f:	50                   	push   eax
c001cb60:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb67:	50                   	push   eax
c001cb68:	e8 df 3d fe ff       	call   c000094c <strcat>
c001cb6d:	58                   	pop    eax
c001cb6e:	5a                   	pop    edx
c001cb6f:	68 fa b6 02 c0       	push   0xc002b6fa
c001cb74:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb7b:	50                   	push   eax
c001cb7c:	e8 cb 3d fe ff       	call   c000094c <strcat>
c001cb81:	83 c4 10             	add    esp,0x10
c001cb84:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cb89:	0f 84 5d 01 00 00    	je     c001ccec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cb8f:	83 ec 0c             	sub    esp,0xc
c001cb92:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb99:	50                   	push   eax
c001cb9a:	e8 a6 d0 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001cb9f:	83 c4 10             	add    esp,0x10
c001cba2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cba6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cbaa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cbae:	80 fb 01             	cmp    bl,0x1
c001cbb1:	0f 85 88 00 00 00    	jne    c001cc3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cbb7:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cbbe:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cbc2:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cbc6:	01 ce                	add    esi,ecx
c001cbc8:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cbce:	0f 94 c0             	sete   al
c001cbd1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cbd7:	0f 94 c3             	sete   bl
c001cbda:	09 c3                	or     ebx,eax
c001cbdc:	8b 06                	mov    eax,DWORD PTR [esi]
c001cbde:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cbe3:	74 41                	je     c001cc26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cbe5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cbe8:	84 db                	test   bl,bl
c001cbea:	75 15                	jne    c001cc01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cbec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbf0:	66 83 f8 0c          	cmp    ax,0xc
c001cbf4:	76 05                	jbe    c001cbfb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cbf6:	b8 0c 00 00 00       	mov    eax,0xc
c001cbfb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cbff:	76 37                	jbe    c001cc38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc01:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cc05:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc0a:	0f 84 dc 00 00 00    	je     c001ccec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc10:	83 ec 0c             	sub    esp,0xc
c001cc13:	68 7b b6 02 c0       	push   0xc002b67b
c001cc18:	e8 28 d0 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001cc1d:	83 c4 10             	add    esp,0x10
c001cc20:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc24:	eb 12                	jmp    c001cc38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc26:	01 c1                	add    ecx,eax
c001cc28:	84 db                	test   bl,bl
c001cc2a:	75 0c                	jne    c001cc38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc30:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc34:	77 02                	ja     c001cc38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc36:	01 d1                	add    ecx,edx
c001cc38:	89 0e                	mov    DWORD PTR [esi],ecx
c001cc3a:	e9 ea 00 00 00       	jmp    c001cd29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cc3f:	80 fb 02             	cmp    bl,0x2
c001cc42:	75 7c                	jne    c001ccc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cc44:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cc4b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cc4f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cc53:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc59:	74 20                	je     c001cc7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cc5b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cc61:	74 18                	je     c001cc7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cc63:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc67:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc6c:	66 83 f8 0e          	cmp    ax,0xe
c001cc70:	77 03                	ja     c001cc75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cc72:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cc75:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cc79:	76 1f                	jbe    c001cc9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cc7b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cc7f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc84:	74 66                	je     c001ccec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc86:	83 ec 0c             	sub    esp,0xc
c001cc89:	68 97 b6 02 c0       	push   0xc002b697
c001cc8e:	e8 b2 cf ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001cc93:	83 c4 10             	add    esp,0x10
c001cc96:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc9a:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc9c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cca1:	74 13                	je     c001ccb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cca3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cca7:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ccae:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ccb2:	01 c8                	add    eax,ecx
c001ccb4:	eb 04                	jmp    c001ccba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ccb6:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ccba:	01 c2                	add    edx,eax
c001ccbc:	89 16                	mov    DWORD PTR [esi],edx
c001ccbe:	eb 69                	jmp    c001cd29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ccc0:	0f b6 db             	movzx  ebx,bl
c001ccc3:	50                   	push   eax
c001ccc4:	50                   	push   eax
c001ccc5:	53                   	push   ebx
c001ccc6:	68 b3 b6 02 c0       	push   0xc002b6b3
c001cccb:	e8 3b 58 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001ccd0:	83 c4 10             	add    esp,0x10
c001ccd3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccd8:	74 12                	je     c001ccec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ccda:	83 ec 0c             	sub    esp,0xc
c001ccdd:	68 be b6 02 c0       	push   0xc002b6be
c001cce2:	e8 5e cf ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001cce7:	83 c4 10             	add    esp,0x10
c001ccea:	eb 3d                	jmp    c001cd29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	55                   	push   ebp
c001ccf0:	e8 37 5e ff ff       	call   c0012b2c <File::close()>
c001ccf5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ccf8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ccfb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ccfe:	59                   	pop    ecx
c001ccff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd03:	e8 a4 28 ff ff       	call   c000f5ac <free>
c001cd08:	5b                   	pop    ebx
c001cd09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd0d:	e8 9a 28 ff ff       	call   c000f5ac <free>
c001cd12:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd15:	e8 92 28 ff ff       	call   c000f5ac <free>
c001cd1a:	5e                   	pop    esi
c001cd1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1f:	e8 88 28 ff ff       	call   c000f5ac <free>
c001cd24:	83 c4 10             	add    esp,0x10
c001cd27:	eb 21                	jmp    c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd29:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cd2d:	e9 76 fd ff ff       	jmp    c001caa8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cd32:	83 ec 0c             	sub    esp,0xc
c001cd35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd39:	e8 6e 28 ff ff       	call   c000f5ac <free>
c001cd3e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cd42:	83 c4 10             	add    esp,0x10
c001cd45:	e9 eb fc ff ff       	jmp    c001ca35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cd4a:	31 c0                	xor    eax,eax
c001cd4c:	eb 33                	jmp    c001cd81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cd4e:	83 ec 0c             	sub    esp,0xc
c001cd51:	55                   	push   ebp
c001cd52:	e8 d5 5d ff ff       	call   c0012b2c <File::close()>
c001cd57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd5a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd60:	58                   	pop    eax
c001cd61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd65:	e8 42 28 ff ff       	call   c000f5ac <free>
c001cd6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd6d:	e8 3a 28 ff ff       	call   c000f5ac <free>
c001cd72:	5a                   	pop    edx
c001cd73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd77:	e8 30 28 ff ff       	call   c000f5ac <free>
c001cd7c:	83 c4 10             	add    esp,0x10
c001cd7f:	b0 01                	mov    al,0x1
c001cd81:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cd87:	5b                   	pop    ebx
c001cd88:	5e                   	pop    esi
c001cd89:	5f                   	pop    edi
c001cd8a:	5d                   	pop    ebp
c001cd8b:	c3                   	ret    

c001cd8c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cd8c:	56                   	push   esi
c001cd8d:	31 d2                	xor    edx,edx
c001cd8f:	53                   	push   ebx
c001cd90:	8b 1d e0 02 03 c0    	mov    ebx,DWORD PTR ds:0xc00302e0
c001cd96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd9a:	39 d3                	cmp    ebx,edx
c001cd9c:	7e 1b                	jle    c001cdb9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cd9e:	8b 04 95 00 05 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcfb00]
c001cda5:	39 c8                	cmp    eax,ecx
c001cda7:	77 0d                	ja     c001cdb6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cda9:	8b 34 95 00 03 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfd00]
c001cdb0:	01 c6                	add    esi,eax
c001cdb2:	39 ce                	cmp    esi,ecx
c001cdb4:	77 05                	ja     c001cdbb <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cdb6:	42                   	inc    edx
c001cdb7:	eb e1                	jmp    c001cd9a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cdb9:	31 c0                	xor    eax,eax
c001cdbb:	5b                   	pop    ebx
c001cdbc:	5e                   	pop    esi
c001cdbd:	c3                   	ret    

c001cdbe <Thr::getDriverNameFromAddress(unsigned long)>:
c001cdbe:	53                   	push   ebx
c001cdbf:	31 c0                	xor    eax,eax
c001cdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdc5:	8b 1d e0 02 03 c0    	mov    ebx,DWORD PTR ds:0xc00302e0
c001cdcb:	39 c3                	cmp    ebx,eax
c001cdcd:	7e 22                	jle    c001cdf1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cdcf:	8b 14 85 00 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb00]
c001cdd6:	39 ca                	cmp    edx,ecx
c001cdd8:	77 14                	ja     c001cdee <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cdda:	03 14 85 00 03 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfd00]
c001cde1:	39 ca                	cmp    edx,ecx
c001cde3:	76 09                	jbe    c001cdee <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cde5:	8b 04 85 00 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf900]
c001cdec:	eb 05                	jmp    c001cdf3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cdee:	40                   	inc    eax
c001cdef:	eb da                	jmp    c001cdcb <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cdf1:	31 c0                	xor    eax,eax
c001cdf3:	5b                   	pop    ebx
c001cdf4:	c3                   	ret    

c001cdf5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cdf5:	53                   	push   ebx
c001cdf6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cdfa:	53                   	push   ebx
c001cdfb:	e8 8c ff ff ff       	call   c001cd8c <Thr::getDriverBaseFromAddress(unsigned long)>
c001ce00:	5a                   	pop    edx
c001ce01:	31 d2                	xor    edx,edx
c001ce03:	85 c0                	test   eax,eax
c001ce05:	74 04                	je     c001ce0b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ce07:	89 da                	mov    edx,ebx
c001ce09:	29 c2                	sub    edx,eax
c001ce0b:	89 d0                	mov    eax,edx
c001ce0d:	5b                   	pop    ebx
c001ce0e:	c3                   	ret    

c001ce0f <Thr::loadDLL(char const*, bool)>:
c001ce0f:	55                   	push   ebp
c001ce10:	57                   	push   edi
c001ce11:	56                   	push   esi
c001ce12:	53                   	push   ebx
c001ce13:	81 ec 34 01 00 00    	sub    esp,0x134
c001ce19:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ce20:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001ce27:	56                   	push   esi
c001ce28:	68 d6 b6 02 c0       	push   0xc002b6d6
c001ce2d:	e8 d9 56 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001ce32:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ce39:	e8 5e 27 ff ff       	call   c000f59c <malloc>
c001ce3e:	83 c4 0c             	add    esp,0xc
c001ce41:	89 c3                	mov    ebx,eax
c001ce43:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c001ce49:	56                   	push   esi
c001ce4a:	50                   	push   eax
c001ce4b:	e8 1a 5c ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001ce50:	83 c4 10             	add    esp,0x10
c001ce53:	85 db                	test   ebx,ebx
c001ce55:	75 3c                	jne    c001ce93 <Thr::loadDLL(char const*, bool)+0x84>
c001ce57:	89 f8                	mov    eax,edi
c001ce59:	84 c0                	test   al,al
c001ce5b:	0f 84 cc 01 00 00    	je     c001d02d <Thr::loadDLL(char const*, bool)+0x21e>
c001ce61:	55                   	push   ebp
c001ce62:	55                   	push   ebp
c001ce63:	68 e7 b6 02 c0       	push   0xc002b6e7
c001ce68:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001ce6c:	55                   	push   ebp
c001ce6d:	e8 9a 39 fe ff       	call   c000080c <strcpy>
c001ce72:	58                   	pop    eax
c001ce73:	5a                   	pop    edx
c001ce74:	56                   	push   esi
c001ce75:	55                   	push   ebp
c001ce76:	e8 d1 3a fe ff       	call   c000094c <strcat>
c001ce7b:	59                   	pop    ecx
c001ce7c:	58                   	pop    eax
c001ce7d:	68 fa b6 02 c0       	push   0xc002b6fa
c001ce82:	55                   	push   ebp
c001ce83:	e8 c4 3a fe ff       	call   c000094c <strcat>
c001ce88:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce8b:	e8 b5 cd ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001ce90:	83 c4 10             	add    esp,0x10
c001ce93:	51                   	push   ecx
c001ce94:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001ce98:	50                   	push   eax
c001ce99:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ce9d:	50                   	push   eax
c001ce9e:	53                   	push   ebx
c001ce9f:	e8 d6 5e ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001cea4:	83 c4 10             	add    esp,0x10
c001cea7:	85 db                	test   ebx,ebx
c001cea9:	74 0c                	je     c001ceb7 <Thr::loadDLL(char const*, bool)+0xa8>
c001ceab:	83 ec 0c             	sub    esp,0xc
c001ceae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceb0:	53                   	push   ebx
c001ceb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ceb4:	83 c4 10             	add    esp,0x10
c001ceb7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cebc:	75 0a                	jne    c001cec8 <Thr::loadDLL(char const*, bool)+0xb9>
c001cebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cec2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cec6:	75 3c                	jne    c001cf04 <Thr::loadDLL(char const*, bool)+0xf5>
c001cec8:	89 f8                	mov    eax,edi
c001ceca:	84 c0                	test   al,al
c001cecc:	0f 84 43 01 00 00    	je     c001d015 <Thr::loadDLL(char const*, bool)+0x206>
c001ced2:	51                   	push   ecx
c001ced3:	51                   	push   ecx
c001ced4:	68 e7 b6 02 c0       	push   0xc002b6e7
c001ced9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cedd:	53                   	push   ebx
c001cede:	e8 29 39 fe ff       	call   c000080c <strcpy>
c001cee3:	5d                   	pop    ebp
c001cee4:	58                   	pop    eax
c001cee5:	56                   	push   esi
c001cee6:	53                   	push   ebx
c001cee7:	e8 60 3a fe ff       	call   c000094c <strcat>
c001ceec:	58                   	pop    eax
c001ceed:	5a                   	pop    edx
c001ceee:	68 fa b6 02 c0       	push   0xc002b6fa
c001cef3:	53                   	push   ebx
c001cef4:	e8 53 3a fe ff       	call   c000094c <strcat>
c001cef9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cefc:	e8 44 cd ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001cf01:	83 c4 10             	add    esp,0x10
c001cf04:	52                   	push   edx
c001cf05:	6a 03                	push   0x3
c001cf07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf0f:	05 ff 0f 00 00       	add    eax,0xfff
c001cf14:	83 d2 00             	adc    edx,0x0
c001cf17:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cf1b:	50                   	push   eax
c001cf1c:	ff 35 f0 d6 02 c0    	push   DWORD PTR ds:0xc002d6f0
c001cf22:	e8 39 4b ff ff       	call   c0011a60 <VAS::allocatePages(int, int)>
c001cf27:	59                   	pop    ecx
c001cf28:	89 c3                	mov    ebx,eax
c001cf2a:	5d                   	pop    ebp
c001cf2b:	50                   	push   eax
c001cf2c:	68 22 9e 02 c0       	push   0xc0029e22
c001cf31:	e8 d5 55 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001cf36:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf39:	e8 2e 38 fe ff       	call   c000076c <strlen>
c001cf3e:	8b 2d e0 02 03 c0    	mov    ebp,DWORD PTR ds:0xc00302e0
c001cf44:	40                   	inc    eax
c001cf45:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf48:	e8 4f 26 ff ff       	call   c000f59c <malloc>
c001cf4d:	89 04 ad 00 07 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf900],eax
c001cf54:	58                   	pop    eax
c001cf55:	a1 e0 02 03 c0       	mov    eax,ds:0xc00302e0
c001cf5a:	5a                   	pop    edx
c001cf5b:	56                   	push   esi
c001cf5c:	ff 34 85 00 07 03 c0 	push   DWORD PTR [eax*4-0x3ffcf900]
c001cf63:	e8 a4 38 fe ff       	call   c000080c <strcpy>
c001cf68:	a1 e0 02 03 c0       	mov    eax,ds:0xc00302e0
c001cf6d:	8d 50 01             	lea    edx,[eax+0x1]
c001cf70:	89 1c 85 00 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb00],ebx
c001cf77:	89 15 e0 02 03 c0    	mov    DWORD PTR ds:0xc00302e0,edx
c001cf7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf81:	83 c4 0c             	add    esp,0xc
c001cf84:	89 14 85 00 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfd00],edx
c001cf8b:	6a 01                	push   0x1
c001cf8d:	53                   	push   ebx
c001cf8e:	56                   	push   esi
c001cf8f:	e8 c2 f6 ff ff       	call   c001c656 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cf94:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cf98:	83 c4 10             	add    esp,0x10
c001cf9b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cfa0:	0f 85 83 00 00 00    	jne    c001d029 <Thr::loadDLL(char const*, bool)+0x21a>
c001cfa6:	89 f8                	mov    eax,edi
c001cfa8:	84 c0                	test   al,al
c001cfaa:	74 6d                	je     c001d019 <Thr::loadDLL(char const*, bool)+0x20a>
c001cfac:	83 ec 0c             	sub    esp,0xc
c001cfaf:	68 fc b6 02 c0       	push   0xc002b6fc
c001cfb4:	e8 8c cc ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001cfb9:	83 c4 10             	add    esp,0x10
c001cfbc:	eb 5b                	jmp    c001d019 <Thr::loadDLL(char const*, bool)+0x20a>
c001cfbe:	89 ee                	mov    esi,ebp
c001cfc0:	50                   	push   eax
c001cfc1:	c1 e6 0c             	shl    esi,0xc
c001cfc4:	50                   	push   eax
c001cfc5:	01 de                	add    esi,ebx
c001cfc7:	56                   	push   esi
c001cfc8:	ff 35 f0 d6 02 c0    	push   DWORD PTR ds:0xc002d6f0
c001cfce:	e8 f5 45 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001cfd3:	83 c4 10             	add    esp,0x10
c001cfd6:	f6 00 60             	test   BYTE PTR [eax],0x60
c001cfd9:	75 0c                	jne    c001cfe7 <Thr::loadDLL(char const*, bool)+0x1d8>
c001cfdb:	83 ec 0c             	sub    esp,0xc
c001cfde:	56                   	push   esi
c001cfdf:	e8 01 29 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c001cfe4:	83 c4 10             	add    esp,0x10
c001cfe7:	45                   	inc    ebp
c001cfe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cff0:	05 ff 0f 00 00       	add    eax,0xfff
c001cff5:	bf 00 00 00 00       	mov    edi,0x0
c001cffa:	83 d2 00             	adc    edx,0x0
c001cffd:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d001:	c1 ea 0c             	shr    edx,0xc
c001d004:	39 c5                	cmp    ebp,eax
c001d006:	89 d1                	mov    ecx,edx
c001d008:	89 f8                	mov    eax,edi
c001d00a:	19 c8                	sbb    eax,ecx
c001d00c:	72 b0                	jb     c001cfbe <Thr::loadDLL(char const*, bool)+0x1af>
c001d00e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d013:	75 18                	jne    c001d02d <Thr::loadDLL(char const*, bool)+0x21e>
c001d015:	31 db                	xor    ebx,ebx
c001d017:	eb 14                	jmp    c001d02d <Thr::loadDLL(char const*, bool)+0x21e>
c001d019:	83 ec 0c             	sub    esp,0xc
c001d01c:	68 1b b7 02 c0       	push   0xc002b71b
c001d021:	e8 1f cc ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001d026:	83 c4 10             	add    esp,0x10
c001d029:	31 ed                	xor    ebp,ebp
c001d02b:	eb bb                	jmp    c001cfe8 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d02d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d033:	89 d8                	mov    eax,ebx
c001d035:	5b                   	pop    ebx
c001d036:	5e                   	pop    esi
c001d037:	5f                   	pop    edi
c001d038:	5d                   	pop    ebp
c001d039:	c3                   	ret    

c001d03a <Thr::executeDLL(unsigned long, void*)>:
c001d03a:	56                   	push   esi
c001d03b:	53                   	push   ebx
c001d03c:	52                   	push   edx
c001d03d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d041:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d045:	85 db                	test   ebx,ebx
c001d047:	75 10                	jne    c001d059 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d049:	83 ec 0c             	sub    esp,0xc
c001d04c:	68 37 b7 02 c0       	push   0xc002b737
c001d051:	e8 ef cb ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001d056:	83 c4 10             	add    esp,0x10
c001d059:	50                   	push   eax
c001d05a:	50                   	push   eax
c001d05b:	53                   	push   ebx
c001d05c:	68 61 b7 02 c0       	push   0xc002b761
c001d061:	e8 a5 54 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001d066:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d06a:	89 d8                	mov    eax,ebx
c001d06c:	83 c4 14             	add    esp,0x14
c001d06f:	5b                   	pop    ebx
c001d070:	5e                   	pop    esi
c001d071:	ff e0                	jmp    eax
c001d073:	90                   	nop

c001d074 <userModeEntryPoint(void*)>:
c001d074:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001d079:	48                   	dec    eax
c001d07a:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001d07f:	75 01                	jne    c001d082 <userModeEntryPoint(void*)+0xe>
c001d081:	fb                   	sti    
c001d082:	fb                   	sti    
c001d083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d088:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d08b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d091:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d095:	e9 90 32 fe ff       	jmp    c000032a <goToUsermode>

c001d09a <changeTSS>:
c001d09a:	83 ec 14             	sub    esp,0x14
c001d09d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0a2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d0a5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d0aa:	c1 e2 15             	shl    edx,0x15
c001d0ad:	29 d0                	sub    eax,edx
c001d0af:	50                   	push   eax
c001d0b0:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001d0b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0bb:	05 7c 11 00 00       	add    eax,0x117c
c001d0c0:	50                   	push   eax
c001d0c1:	e8 30 3a ff ff       	call   c0010af6 <TSS::setESP(unsigned long)>
c001d0c6:	83 c4 1c             	add    esp,0x1c
c001d0c9:	c3                   	ret    

c001d0ca <switchToThread(ThreadControlBlock*)>:
c001d0ca:	57                   	push   edi
c001d0cb:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001d0d0:	56                   	push   esi
c001d0d1:	85 c0                	test   eax,eax
c001d0d3:	53                   	push   ebx
c001d0d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0d8:	0f 85 88 00 00 00    	jne    c001d166 <switchToThread(ThreadControlBlock*)+0x9c>
c001d0de:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d0e1:	3c ff                	cmp    al,0xff
c001d0e3:	74 7d                	je     c001d162 <switchToThread(ThreadControlBlock*)+0x98>
c001d0e5:	0f b6 d0             	movzx  edx,al
c001d0e8:	b8 84 03 00 00       	mov    eax,0x384
c001d0ed:	29 d0                	sub    eax,edx
c001d0ef:	c1 e0 10             	shl    eax,0x10
c001d0f2:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d0f5:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d0f8:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c001d0fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d103:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d10a:	74 4a                	je     c001d156 <switchToThread(ThreadControlBlock*)+0x8c>
c001d10c:	0f 31                	rdtsc  
c001d10e:	a3 e8 0a 03 c0       	mov    ds:0xc0030ae8,eax
c001d113:	89 c6                	mov    esi,eax
c001d115:	89 d7                	mov    edi,edx
c001d117:	2b 35 d8 0a 03 c0    	sub    esi,DWORD PTR ds:0xc0030ad8
c001d11d:	89 15 ec 0a 03 c0    	mov    DWORD PTR ds:0xc0030aec,edx
c001d123:	1b 3d dc 0a 03 c0    	sbb    edi,DWORD PTR ds:0xc0030adc
c001d129:	89 35 e0 0a 03 c0    	mov    DWORD PTR ds:0xc0030ae0,esi
c001d12f:	a3 d8 0a 03 c0       	mov    ds:0xc0030ad8,eax
c001d134:	89 3d e4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ae4,edi
c001d13a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d140:	89 15 dc 0a 03 c0    	mov    DWORD PTR ds:0xc0030adc,edx
c001d146:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d149:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d14c:	01 c6                	add    esi,eax
c001d14e:	11 d7                	adc    edi,edx
c001d150:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d153:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d156:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d15a:	5b                   	pop    ebx
c001d15b:	5e                   	pop    esi
c001d15c:	5f                   	pop    edi
c001d15d:	e9 00 32 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d162:	31 c0                	xor    eax,eax
c001d164:	eb 8f                	jmp    c001d0f5 <switchToThread(ThreadControlBlock*)+0x2b>
c001d166:	5b                   	pop    ebx
c001d167:	c7 05 a0 0a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x1
c001d171:	5e                   	pop    esi
c001d172:	5f                   	pop    edi
c001d173:	c3                   	ret    

c001d174 <Process::addArgs(char**)>:
c001d174:	57                   	push   edi
c001d175:	56                   	push   esi
c001d176:	53                   	push   ebx
c001d177:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d17b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d17f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d189:	85 ff                	test   edi,edi
c001d18b:	74 3d                	je     c001d1ca <Process::addArgs(char**)+0x56>
c001d18d:	8b 07                	mov    eax,DWORD PTR [edi]
c001d18f:	85 c0                	test   eax,eax
c001d191:	74 37                	je     c001d1ca <Process::addArgs(char**)+0x56>
c001d193:	31 db                	xor    ebx,ebx
c001d195:	83 ec 0c             	sub    esp,0xc
c001d198:	50                   	push   eax
c001d199:	e8 ce 35 fe ff       	call   c000076c <strlen>
c001d19e:	40                   	inc    eax
c001d19f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1a2:	e8 f5 23 ff ff       	call   c000f59c <malloc>
c001d1a7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d1ae:	5a                   	pop    edx
c001d1af:	59                   	pop    ecx
c001d1b0:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d1b3:	43                   	inc    ebx
c001d1b4:	50                   	push   eax
c001d1b5:	e8 52 36 fe ff       	call   c000080c <strcpy>
c001d1ba:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d1c0:	83 c4 10             	add    esp,0x10
c001d1c3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d1c6:	85 c0                	test   eax,eax
c001d1c8:	75 cb                	jne    c001d195 <Process::addArgs(char**)+0x21>
c001d1ca:	5b                   	pop    ebx
c001d1cb:	5e                   	pop    esi
c001d1cc:	5f                   	pop    edi
c001d1cd:	c3                   	ret    

c001d1ce <Process::Process(char const*, Process*, char**)>:
c001d1ce:	56                   	push   esi
c001d1cf:	53                   	push   ebx
c001d1d0:	83 ec 14             	sub    esp,0x14
c001d1d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d7:	05 0c 02 00 00       	add    eax,0x20c
c001d1dc:	bb 07 00 00 00       	mov    ebx,0x7
c001d1e1:	89 c6                	mov    esi,eax
c001d1e3:	85 db                	test   ebx,ebx
c001d1e5:	78 12                	js     c001d1f9 <Process::Process(char const*, Process*, char**)+0x2b>
c001d1e7:	83 ec 0c             	sub    esp,0xc
c001d1ea:	56                   	push   esi
c001d1eb:	e8 96 b6 00 00       	call   c0028886 <ThreadControlBlock::ThreadControlBlock()>
c001d1f0:	83 c4 10             	add    esp,0x10
c001d1f3:	83 c6 63             	add    esi,0x63
c001d1f6:	4b                   	dec    ebx
c001d1f7:	eb ea                	jmp    c001d1e3 <Process::Process(char const*, Process*, char**)+0x15>
c001d1f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fd:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d204:	83 ec 0c             	sub    esp,0xc
c001d207:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d20b:	e8 be c8 ff ff       	call   c0019ace <Krnl::newProcessEnv(Process*)>
c001d210:	83 c4 10             	add    esp,0x10
c001d213:	89 c2                	mov    edx,eax
c001d215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d219:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d21f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d223:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d22c:	a1 10 cb 02 c0       	mov    eax,ds:0xc002cb10
c001d231:	8d 50 01             	lea    edx,[eax+0x1]
c001d234:	89 15 10 cb 02 c0    	mov    DWORD PTR ds:0xc002cb10,edx
c001d23a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d23e:	89 02                	mov    DWORD PTR [edx],eax
c001d240:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d248:	83 ec 0c             	sub    esp,0xc
c001d24b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d24f:	e8 48 23 ff ff       	call   c000f59c <malloc>
c001d254:	83 c4 10             	add    esp,0x10
c001d257:	89 c3                	mov    ebx,eax
c001d259:	83 ec 08             	sub    esp,0x8
c001d25c:	6a 00                	push   0x0
c001d25e:	53                   	push   ebx
c001d25f:	e8 a4 4b ff ff       	call   c0011e08 <VAS::VAS(bool)>
c001d264:	83 c4 10             	add    esp,0x10
c001d267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d26b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d275:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d27f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d283:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d287:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d28d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d291:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d297:	85 c0                	test   eax,eax
c001d299:	74 42                	je     c001d2dd <Process::Process(char const*, Process*, char**)+0x10f>
c001d29b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d29f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2a5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d2ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2af:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d2b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2bf:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d2c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c9:	05 0c 01 00 00       	add    eax,0x10c
c001d2ce:	83 ec 08             	sub    esp,0x8
c001d2d1:	52                   	push   edx
c001d2d2:	50                   	push   eax
c001d2d3:	e8 34 35 fe ff       	call   c000080c <strcpy>
c001d2d8:	83 c4 10             	add    esp,0x10
c001d2db:	eb 63                	jmp    c001d340 <Process::Process(char const*, Process*, char**)+0x172>
c001d2dd:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d2e5:	83 ec 0c             	sub    esp,0xc
c001d2e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d2ec:	e8 ab 22 ff ff       	call   c000f59c <malloc>
c001d2f1:	83 c4 10             	add    esp,0x10
c001d2f4:	89 c3                	mov    ebx,eax
c001d2f6:	83 ec 08             	sub    esp,0x8
c001d2f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2fd:	53                   	push   ebx
c001d2fe:	e8 07 35 ff ff       	call   c001080a <VgaText::VgaText(char const*)>
c001d303:	83 c4 10             	add    esp,0x10
c001d306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d30a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d310:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d314:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d31a:	83 ec 0c             	sub    esp,0xc
c001d31d:	50                   	push   eax
c001d31e:	e8 a6 2c ff ff       	call   c000ffc9 <addToTerminalCycle(VgaText*)>
c001d323:	83 c4 10             	add    esp,0x10
c001d326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d32a:	05 0c 01 00 00       	add    eax,0x10c
c001d32f:	83 ec 08             	sub    esp,0x8
c001d332:	68 80 b7 02 c0       	push   0xc002b780
c001d337:	50                   	push   eax
c001d338:	e8 cf 34 fe ff       	call   c000080c <strcpy>
c001d33d:	83 c4 10             	add    esp,0x10
c001d340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d344:	83 c0 0c             	add    eax,0xc
c001d347:	83 ec 08             	sub    esp,0x8
c001d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d34e:	50                   	push   eax
c001d34f:	e8 b8 34 fe ff       	call   c000080c <strcpy>
c001d354:	83 c4 10             	add    esp,0x10
c001d357:	83 ec 08             	sub    esp,0x8
c001d35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d35e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d362:	e8 0d fe ff ff       	call   c001d174 <Process::addArgs(char**)>
c001d367:	83 c4 10             	add    esp,0x10
c001d36a:	83 ec 08             	sub    esp,0x8
c001d36d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d371:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d375:	e8 a6 ed ff ff       	call   c001c120 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d37a:	83 c4 10             	add    esp,0x10
c001d37d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d381:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d385:	83 f0 01             	xor    eax,0x1
c001d388:	88 c2                	mov    dl,al
c001d38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d38e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d394:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d399:	83 ec 08             	sub    esp,0x8
c001d39c:	50                   	push   eax
c001d39d:	68 d8 b7 02 c0       	push   0xc002b7d8
c001d3a2:	e8 64 51 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001d3a7:	83 c4 10             	add    esp,0x10
c001d3aa:	90                   	nop
c001d3ab:	83 c4 14             	add    esp,0x14
c001d3ae:	5b                   	pop    ebx
c001d3af:	5e                   	pop    esi
c001d3b0:	c3                   	ret    
c001d3b1:	90                   	nop

c001d3b2 <Process::Process(bool, char const*, Process*, char**)>:
c001d3b2:	56                   	push   esi
c001d3b3:	53                   	push   ebx
c001d3b4:	83 ec 24             	sub    esp,0x24
c001d3b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3bb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d3bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3c3:	05 0c 02 00 00       	add    eax,0x20c
c001d3c8:	bb 07 00 00 00       	mov    ebx,0x7
c001d3cd:	89 c6                	mov    esi,eax
c001d3cf:	85 db                	test   ebx,ebx
c001d3d1:	78 12                	js     c001d3e5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d3d3:	83 ec 0c             	sub    esp,0xc
c001d3d6:	56                   	push   esi
c001d3d7:	e8 aa b4 00 00       	call   c0028886 <ThreadControlBlock::ThreadControlBlock()>
c001d3dc:	83 c4 10             	add    esp,0x10
c001d3df:	83 c6 63             	add    esi,0x63
c001d3e2:	4b                   	dec    ebx
c001d3e3:	eb ea                	jmp    c001d3cf <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d3e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3e9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d3f0:	83 ec 0c             	sub    esp,0xc
c001d3f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3f7:	e8 d2 c6 ff ff       	call   c0019ace <Krnl::newProcessEnv(Process*)>
c001d3fc:	83 c4 10             	add    esp,0x10
c001d3ff:	89 c2                	mov    edx,eax
c001d401:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d405:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d40b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d40f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d418:	a1 10 cb 02 c0       	mov    eax,ds:0xc002cb10
c001d41d:	8d 50 01             	lea    edx,[eax+0x1]
c001d420:	89 15 10 cb 02 c0    	mov    DWORD PTR ds:0xc002cb10,edx
c001d426:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d42a:	89 02                	mov    DWORD PTR [edx],eax
c001d42c:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d434:	83 ec 0c             	sub    esp,0xc
c001d437:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d43b:	e8 5c 21 ff ff       	call   c000f59c <malloc>
c001d440:	83 c4 10             	add    esp,0x10
c001d443:	89 c3                	mov    ebx,eax
c001d445:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d44a:	83 ec 08             	sub    esp,0x8
c001d44d:	50                   	push   eax
c001d44e:	53                   	push   ebx
c001d44f:	e8 b4 49 ff ff       	call   c0011e08 <VAS::VAS(bool)>
c001d454:	83 c4 10             	add    esp,0x10
c001d457:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d45b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d461:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d465:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d46f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d473:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d477:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d47d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d481:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d487:	85 c0                	test   eax,eax
c001d489:	74 42                	je     c001d4cd <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d48b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d48f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d495:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d49b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d49f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4a9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4af:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4b9:	05 0c 01 00 00       	add    eax,0x10c
c001d4be:	83 ec 08             	sub    esp,0x8
c001d4c1:	52                   	push   edx
c001d4c2:	50                   	push   eax
c001d4c3:	e8 44 33 fe ff       	call   c000080c <strcpy>
c001d4c8:	83 c4 10             	add    esp,0x10
c001d4cb:	eb 63                	jmp    c001d530 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d4cd:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d4d5:	83 ec 0c             	sub    esp,0xc
c001d4d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d4dc:	e8 bb 20 ff ff       	call   c000f59c <malloc>
c001d4e1:	83 c4 10             	add    esp,0x10
c001d4e4:	89 c3                	mov    ebx,eax
c001d4e6:	83 ec 08             	sub    esp,0x8
c001d4e9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d4ed:	53                   	push   ebx
c001d4ee:	e8 17 33 ff ff       	call   c001080a <VgaText::VgaText(char const*)>
c001d4f3:	83 c4 10             	add    esp,0x10
c001d4f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4fa:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d504:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d50a:	83 ec 0c             	sub    esp,0xc
c001d50d:	50                   	push   eax
c001d50e:	e8 b6 2a ff ff       	call   c000ffc9 <addToTerminalCycle(VgaText*)>
c001d513:	83 c4 10             	add    esp,0x10
c001d516:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d51a:	05 0c 01 00 00       	add    eax,0x10c
c001d51f:	83 ec 08             	sub    esp,0x8
c001d522:	68 80 b7 02 c0       	push   0xc002b780
c001d527:	50                   	push   eax
c001d528:	e8 df 32 fe ff       	call   c000080c <strcpy>
c001d52d:	83 c4 10             	add    esp,0x10
c001d530:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d534:	83 c0 0c             	add    eax,0xc
c001d537:	83 ec 08             	sub    esp,0x8
c001d53a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d53e:	50                   	push   eax
c001d53f:	e8 c8 32 fe ff       	call   c000080c <strcpy>
c001d544:	83 c4 10             	add    esp,0x10
c001d547:	83 ec 08             	sub    esp,0x8
c001d54a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d552:	e8 1d fc ff ff       	call   c001d174 <Process::addArgs(char**)>
c001d557:	83 c4 10             	add    esp,0x10
c001d55a:	90                   	nop
c001d55b:	83 c4 24             	add    esp,0x24
c001d55e:	5b                   	pop    ebx
c001d55f:	5e                   	pop    esi
c001d560:	c3                   	ret    

c001d561 <taskStartupFunction>:
c001d561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d566:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d569:	c3                   	ret    

c001d56a <Semaphore::Semaphore(int)>:
c001d56a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d56e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d572:	89 10                	mov    DWORD PTR [eax],edx
c001d574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d578:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d57f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d583:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d58a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d58e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d595:	90                   	nop
c001d596:	c3                   	ret    
c001d597:	90                   	nop

c001d598 <Mutex::Mutex()>:
c001d598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d59c:	6a 01                	push   0x1
c001d59e:	50                   	push   eax
c001d59f:	e8 c6 ff ff ff       	call   c001d56a <Semaphore::Semaphore(int)>
c001d5a4:	83 c4 08             	add    esp,0x8
c001d5a7:	90                   	nop
c001d5a8:	c3                   	ret    
c001d5a9:	90                   	nop

c001d5aa <Process::createThread(void (*)(void*), void*, int)>:
c001d5aa:	55                   	push   ebp
c001d5ab:	31 c9                	xor    ecx,ecx
c001d5ad:	57                   	push   edi
c001d5ae:	56                   	push   esi
c001d5af:	53                   	push   ebx
c001d5b0:	83 ec 1c             	sub    esp,0x1c
c001d5b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5b7:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d5be:	89 f2                	mov    edx,esi
c001d5c0:	0f b7 c2             	movzx  eax,dx
c001d5c3:	83 e2 01             	and    edx,0x1
c001d5c6:	74 16                	je     c001d5de <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d5c8:	d1 f8                	sar    eax,1
c001d5ca:	41                   	inc    ecx
c001d5cb:	89 c2                	mov    edx,eax
c001d5cd:	83 f9 10             	cmp    ecx,0x10
c001d5d0:	75 ee                	jne    c001d5c0 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d5d2:	83 c4 1c             	add    esp,0x1c
c001d5d5:	31 db                	xor    ebx,ebx
c001d5d7:	89 d8                	mov    eax,ebx
c001d5d9:	5b                   	pop    ebx
c001d5da:	5e                   	pop    esi
c001d5db:	5f                   	pop    edi
c001d5dc:	5d                   	pop    ebp
c001d5dd:	c3                   	ret    
c001d5de:	b8 01 00 00 00       	mov    eax,0x1
c001d5e3:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d5e6:	d3 e0                	shl    eax,cl
c001d5e8:	09 c6                	or     esi,eax
c001d5ea:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d5ed:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d5f4:	89 c6                	mov    esi,eax
c001d5f6:	c1 e6 05             	shl    esi,0x5
c001d5f9:	01 f0                	add    eax,esi
c001d5fb:	01 d8                	add    eax,ebx
c001d5fd:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d604:	75 0a                	jne    c001d610 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d606:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d610:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d616:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d61a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d61d:	01 ca                	add    edx,ecx
c001d61f:	83 ec 08             	sub    esp,0x8
c001d622:	89 d0                	mov    eax,edx
c001d624:	c1 e0 05             	shl    eax,0x5
c001d627:	01 d0                	add    eax,edx
c001d629:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d62d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d631:	01 d8                	add    eax,ebx
c001d633:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d639:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d63f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d645:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d64b:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d651:	89 cd                	mov    ebp,ecx
c001d653:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d657:	f7 dd                	neg    ebp
c001d659:	c1 e5 15             	shl    ebp,0x15
c001d65c:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d662:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d668:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d672:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d678:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d682:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d68c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d690:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d697:	53                   	push   ebx
c001d698:	68 c4 0a 03 c0       	push   0xc0030ac4
c001d69d:	e8 9e af 00 00       	call   c0028640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6a2:	89 d8                	mov    eax,ebx
c001d6a4:	83 c4 10             	add    esp,0x10
c001d6a7:	83 c4 1c             	add    esp,0x1c
c001d6aa:	5b                   	pop    ebx
c001d6ab:	5e                   	pop    esi
c001d6ac:	5f                   	pop    edi
c001d6ad:	5d                   	pop    ebp
c001d6ae:	c3                   	ret    
c001d6af:	90                   	nop

c001d6b0 <Process::createUserThread()>:
c001d6b0:	83 ec 0c             	sub    esp,0xc
c001d6b3:	68 80 00 00 00       	push   0x80
c001d6b8:	6a 00                	push   0x0
c001d6ba:	68 74 d0 01 c0       	push   0xc001d074
c001d6bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6c3:	e8 e2 fe ff ff       	call   c001d5aa <Process::createThread(void (*)(void*), void*, int)>
c001d6c8:	83 c4 1c             	add    esp,0x1c
c001d6cb:	c3                   	ret    

c001d6cc <setupMultitasking(void (*)())>:
c001d6cc:	56                   	push   esi
c001d6cd:	53                   	push   ebx
c001d6ce:	51                   	push   ecx
c001d6cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6d3:	eb 10                	jmp    c001d6e5 <setupMultitasking(void (*)())+0x19>
c001d6d5:	83 ec 0c             	sub    esp,0xc
c001d6d8:	68 c4 0a 03 c0       	push   0xc0030ac4
c001d6dd:	e8 b0 ae 00 00       	call   c0028592 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d6e2:	83 c4 10             	add    esp,0x10
c001d6e5:	83 ec 0c             	sub    esp,0xc
c001d6e8:	68 c4 0a 03 c0       	push   0xc0030ac4
c001d6ed:	e8 7c ae 00 00       	call   c002856e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d6f2:	83 c4 10             	add    esp,0x10
c001d6f5:	84 c0                	test   al,al
c001d6f7:	74 dc                	je     c001d6d5 <setupMultitasking(void (*)())+0x9>
c001d6f9:	83 ec 0c             	sub    esp,0xc
c001d6fc:	68 3f 07 00 00       	push   0x73f
c001d701:	e8 96 1e ff ff       	call   c000f59c <malloc>
c001d706:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d70d:	89 c3                	mov    ebx,eax
c001d70f:	6a 00                	push   0x0
c001d711:	68 84 b7 02 c0       	push   0xc002b784
c001d716:	6a 01                	push   0x1
c001d718:	50                   	push   eax
c001d719:	e8 94 fc ff ff       	call   c001d3b2 <Process::Process(bool, char const*, Process*, char**)>
c001d71e:	83 c4 14             	add    esp,0x14
c001d721:	89 1d d0 0a 03 c0    	mov    DWORD PTR ds:0xc0030ad0,ebx
c001d727:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d72d:	e8 a5 2b ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001d732:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d73a:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d744:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d74a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d74d:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d757:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d75d:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d763:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d76d:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d777:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d781:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d787:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d791:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d797:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d7a1:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d7a7:	58                   	pop    eax
c001d7a8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d7ae:	5a                   	pop    edx
c001d7af:	68 80 b7 02 c0       	push   0xc002b780
c001d7b4:	50                   	push   eax
c001d7b5:	e8 52 30 fe ff       	call   c000080c <strcpy>
c001d7ba:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d7c1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d7c5:	83 c4 14             	add    esp,0x14
c001d7c8:	5b                   	pop    ebx
c001d7c9:	5e                   	pop    esi
c001d7ca:	e9 85 2b fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d7cf <schedule()>:
c001d7cf:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001d7d4:	85 c0                	test   eax,eax
c001d7d6:	74 0b                	je     c001d7e3 <schedule()+0x14>
c001d7d8:	c7 05 a0 0a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x1
c001d7e2:	c3                   	ret    
c001d7e3:	53                   	push   ebx
c001d7e4:	83 ec 14             	sub    esp,0x14
c001d7e7:	68 c4 0a 03 c0       	push   0xc0030ac4
c001d7ec:	e8 7d ad 00 00       	call   c002856e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d7f1:	83 c4 10             	add    esp,0x10
c001d7f4:	84 c0                	test   al,al
c001d7f6:	75 38                	jne    c001d830 <schedule()+0x61>
c001d7f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d800:	4a                   	dec    edx
c001d801:	74 32                	je     c001d835 <schedule()+0x66>
c001d803:	83 ec 0c             	sub    esp,0xc
c001d806:	68 c4 0a 03 c0       	push   0xc0030ac4
c001d80b:	e8 7a ad 00 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d810:	c7 04 24 c4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ac4
c001d817:	89 c3                	mov    ebx,eax
c001d819:	e8 74 ad 00 00       	call   c0028592 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d81e:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d825:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d828:	e8 9d f8 ff ff       	call   c001d0ca <switchToThread(ThreadControlBlock*)>
c001d82d:	83 c4 10             	add    esp,0x10
c001d830:	83 c4 08             	add    esp,0x8
c001d833:	5b                   	pop    ebx
c001d834:	c3                   	ret    
c001d835:	83 ec 08             	sub    esp,0x8
c001d838:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d83f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d845:	68 c4 0a 03 c0       	push   0xc0030ac4
c001d84a:	e8 f1 ad 00 00       	call   c0028640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d84f:	83 c4 10             	add    esp,0x10
c001d852:	eb af                	jmp    c001d803 <schedule()+0x34>

c001d854 <Semaphore::tryAcquire()>:
c001d854:	53                   	push   ebx
c001d855:	83 ec 08             	sub    esp,0x8
c001d858:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d85c:	fa                   	cli    
c001d85d:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001d862:	8d 50 01             	lea    edx,[eax+0x1]
c001d865:	89 15 a8 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa8,edx
c001d86b:	8b 15 a4 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030aa4
c001d871:	8d 5a 01             	lea    ebx,[edx+0x1]
c001d874:	89 1d a4 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa4,ebx
c001d87a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001d87d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001d87f:	7c 2a                	jl     c001d8ab <Semaphore::tryAcquire()+0x57>
c001d881:	89 15 a4 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa4,edx
c001d887:	85 d2                	test   edx,edx
c001d889:	75 0a                	jne    c001d895 <Semaphore::tryAcquire()+0x41>
c001d88b:	8b 15 a0 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030aa0
c001d891:	85 d2                	test   edx,edx
c001d893:	75 5b                	jne    c001d8f0 <Semaphore::tryAcquire()+0x9c>
c001d895:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001d89a:	85 c0                	test   eax,eax
c001d89c:	74 07                	je     c001d8a5 <Semaphore::tryAcquire()+0x51>
c001d89e:	31 c0                	xor    eax,eax
c001d8a0:	83 c4 08             	add    esp,0x8
c001d8a3:	5b                   	pop    ebx
c001d8a4:	c3                   	ret    
c001d8a5:	fb                   	sti    
c001d8a6:	83 c4 08             	add    esp,0x8
c001d8a9:	5b                   	pop    ebx
c001d8aa:	c3                   	ret    
c001d8ab:	43                   	inc    ebx
c001d8ac:	89 15 a4 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa4,edx
c001d8b2:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001d8b5:	85 d2                	test   edx,edx
c001d8b7:	75 1f                	jne    c001d8d8 <Semaphore::tryAcquire()+0x84>
c001d8b9:	8b 0d a0 0a 03 c0    	mov    ecx,DWORD PTR ds:0xc0030aa0
c001d8bf:	85 c9                	test   ecx,ecx
c001d8c1:	74 15                	je     c001d8d8 <Semaphore::tryAcquire()+0x84>
c001d8c3:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c001d8cd:	e8 fd fe ff ff       	call   c001d7cf <schedule()>
c001d8d2:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001d8d7:	48                   	dec    eax
c001d8d8:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001d8dd:	85 c0                	test   eax,eax
c001d8df:	75 08                	jne    c001d8e9 <Semaphore::tryAcquire()+0x95>
c001d8e1:	fb                   	sti    
c001d8e2:	b0 01                	mov    al,0x1
c001d8e4:	83 c4 08             	add    esp,0x8
c001d8e7:	5b                   	pop    ebx
c001d8e8:	c3                   	ret    
c001d8e9:	b0 01                	mov    al,0x1
c001d8eb:	83 c4 08             	add    esp,0x8
c001d8ee:	5b                   	pop    ebx
c001d8ef:	c3                   	ret    
c001d8f0:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c001d8fa:	e8 d0 fe ff ff       	call   c001d7cf <schedule()>
c001d8ff:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001d904:	48                   	dec    eax
c001d905:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001d90a:	85 c0                	test   eax,eax
c001d90c:	75 90                	jne    c001d89e <Semaphore::tryAcquire()+0x4a>
c001d90e:	eb 95                	jmp    c001d8a5 <Semaphore::tryAcquire()+0x51>

c001d910 <Semaphore::assertLocked(char const*)>:
c001d910:	83 ec 0c             	sub    esp,0xc
c001d913:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d917:	fa                   	cli    
c001d918:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001d91e:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001d923:	8d 48 01             	lea    ecx,[eax+0x1]
c001d926:	89 0d a4 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa4,ecx
c001d92c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001d92e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001d931:	7c 24                	jl     c001d957 <Semaphore::assertLocked(char const*)+0x47>
c001d933:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c001d938:	85 c0                	test   eax,eax
c001d93a:	75 09                	jne    c001d945 <Semaphore::assertLocked(char const*)+0x35>
c001d93c:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001d941:	85 c0                	test   eax,eax
c001d943:	75 29                	jne    c001d96e <Semaphore::assertLocked(char const*)+0x5e>
c001d945:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001d94a:	48                   	dec    eax
c001d94b:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001d950:	75 01                	jne    c001d953 <Semaphore::assertLocked(char const*)+0x43>
c001d952:	fb                   	sti    
c001d953:	83 c4 0c             	add    esp,0xc
c001d956:	c3                   	ret    
c001d957:	83 ec 0c             	sub    esp,0xc
c001d95a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d95e:	e8 e2 c2 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001d963:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001d968:	83 c4 10             	add    esp,0x10
c001d96b:	48                   	dec    eax
c001d96c:	eb c5                	jmp    c001d933 <Semaphore::assertLocked(char const*)+0x23>
c001d96e:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c001d978:	e8 52 fe ff ff       	call   c001d7cf <schedule()>
c001d97d:	eb c6                	jmp    c001d945 <Semaphore::assertLocked(char const*)+0x35>

c001d97f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d97f:	83 ec 0c             	sub    esp,0xc
c001d982:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d987:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d98b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d98e:	e8 3c fe ff ff       	call   c001d7cf <schedule()>
c001d993:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001d998:	48                   	dec    eax
c001d999:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001d99e:	75 01                	jne    c001d9a1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001d9a0:	fb                   	sti    
c001d9a1:	83 c4 0c             	add    esp,0xc
c001d9a4:	c3                   	ret    

c001d9a5 <blockTask(TaskState)>:
c001d9a5:	83 ec 0c             	sub    esp,0xc
c001d9a8:	fa                   	cli    
c001d9a9:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001d9af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d9bb:	e8 0f fe ff ff       	call   c001d7cf <schedule()>
c001d9c0:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001d9c5:	48                   	dec    eax
c001d9c6:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001d9cb:	75 01                	jne    c001d9ce <blockTask(TaskState)+0x29>
c001d9cd:	fb                   	sti    
c001d9ce:	83 c4 0c             	add    esp,0xc
c001d9d1:	c3                   	ret    

c001d9d2 <waitTask(int, int*, int)>:
c001d9d2:	83 ec 18             	sub    esp,0x18
c001d9d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9de:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d9e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9ea:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d9ed:	6a 07                	push   0x7
c001d9ef:	e8 b1 ff ff ff       	call   c001d9a5 <blockTask(TaskState)>
c001d9f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9f9:	83 c4 10             	add    esp,0x10
c001d9fc:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d9ff:	85 d2                	test   edx,edx
c001da01:	74 0a                	je     c001da0d <waitTask(int, int*, int)+0x3b>
c001da03:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001da06:	89 02                	mov    DWORD PTR [edx],eax
c001da08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da0d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001da10:	83 c4 0c             	add    esp,0xc
c001da13:	c3                   	ret    

c001da14 <nanoSleepUntil(unsigned long long)>:
c001da14:	83 ec 0c             	sub    esp,0xc
c001da17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da1f:	3b 05 f0 db 02 c0    	cmp    eax,DWORD PTR ds:0xc002dbf0
c001da25:	89 d1                	mov    ecx,edx
c001da27:	1b 0d f4 db 02 c0    	sbb    ecx,DWORD PTR ds:0xc002dbf4
c001da2d:	73 04                	jae    c001da33 <nanoSleepUntil(unsigned long long)+0x1f>
c001da2f:	83 c4 0c             	add    esp,0xc
c001da32:	c3                   	ret    
c001da33:	fa                   	cli    
c001da34:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001da3a:	83 ec 08             	sub    esp,0x8
c001da3d:	ff 05 a4 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa4
c001da43:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001da49:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001da4c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001da4f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da55:	68 b8 0a 03 c0       	push   0xc0030ab8
c001da5a:	e8 e1 ab 00 00       	call   c0028640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da5f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001da66:	e8 3a ff ff ff       	call   c001d9a5 <blockTask(TaskState)>
c001da6b:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001da70:	83 c4 10             	add    esp,0x10
c001da73:	48                   	dec    eax
c001da74:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c001da79:	85 c0                	test   eax,eax
c001da7b:	75 09                	jne    c001da86 <nanoSleepUntil(unsigned long long)+0x72>
c001da7d:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001da82:	85 c0                	test   eax,eax
c001da84:	75 12                	jne    c001da98 <nanoSleepUntil(unsigned long long)+0x84>
c001da86:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001da8b:	48                   	dec    eax
c001da8c:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001da91:	75 9c                	jne    c001da2f <nanoSleepUntil(unsigned long long)+0x1b>
c001da93:	fb                   	sti    
c001da94:	83 c4 0c             	add    esp,0xc
c001da97:	c3                   	ret    
c001da98:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c001daa2:	e8 28 fd ff ff       	call   c001d7cf <schedule()>
c001daa7:	eb dd                	jmp    c001da86 <nanoSleepUntil(unsigned long long)+0x72>

c001daa9 <nanoSleep(unsigned long long)>:
c001daa9:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c001daae:	8b 15 f4 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dbf4
c001dab4:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dab8:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dabc:	e9 53 ff ff ff       	jmp    c001da14 <nanoSleepUntil(unsigned long long)>

c001dac1 <sleep(unsigned long long)>:
c001dac1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dac9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dace:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dad2:	01 ca                	add    edx,ecx
c001dad4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dad8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dadc:	eb cb                	jmp    c001daa9 <nanoSleep(unsigned long long)>

c001dade <Semaphore::acquire()>:
c001dade:	83 ec 0c             	sub    esp,0xc
c001dae1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dae5:	fa                   	cli    
c001dae6:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001daeb:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001daf1:	8d 48 01             	lea    ecx,[eax+0x1]
c001daf4:	89 0d a4 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa4,ecx
c001dafa:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dafd:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001daff:	7d 28                	jge    c001db29 <Semaphore::acquire()+0x4b>
c001db01:	41                   	inc    ecx
c001db02:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001db05:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c001db0a:	85 c0                	test   eax,eax
c001db0c:	75 09                	jne    c001db17 <Semaphore::acquire()+0x39>
c001db0e:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001db13:	85 c0                	test   eax,eax
c001db15:	75 4e                	jne    c001db65 <Semaphore::acquire()+0x87>
c001db17:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001db1c:	48                   	dec    eax
c001db1d:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001db22:	75 01                	jne    c001db25 <Semaphore::acquire()+0x47>
c001db24:	fb                   	sti    
c001db25:	83 c4 0c             	add    esp,0xc
c001db28:	c3                   	ret    
c001db29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db2e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001db35:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001db38:	85 c9                	test   ecx,ecx
c001db3a:	74 3a                	je     c001db76 <Semaphore::acquire()+0x98>
c001db3c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001db3f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001db45:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001db48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db4d:	83 ec 0c             	sub    esp,0xc
c001db50:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001db53:	6a 05                	push   0x5
c001db55:	e8 4b fe ff ff       	call   c001d9a5 <blockTask(TaskState)>
c001db5a:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001db5f:	83 c4 10             	add    esp,0x10
c001db62:	48                   	dec    eax
c001db63:	eb a0                	jmp    c001db05 <Semaphore::acquire()+0x27>
c001db65:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c001db6f:	e8 5b fc ff ff       	call   c001d7cf <schedule()>
c001db74:	eb a1                	jmp    c001db17 <Semaphore::acquire()+0x39>
c001db76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db7b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001db7e:	eb c8                	jmp    c001db48 <Semaphore::acquire()+0x6a>

c001db80 <taskReturned>:
c001db80:	83 ec 18             	sub    esp,0x18
c001db83:	68 00 b8 02 c0       	push   0xc002b800
c001db88:	e8 b8 c0 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001db8d:	83 c4 10             	add    esp,0x10
c001db90:	83 ec 0c             	sub    esp,0xc
c001db93:	6a 02                	push   0x2
c001db95:	e8 0b fe ff ff       	call   c001d9a5 <blockTask(TaskState)>
c001db9a:	fa                   	cli    
c001db9b:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001dba1:	e8 29 fc ff ff       	call   c001d7cf <schedule()>
c001dba6:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001dbab:	83 c4 10             	add    esp,0x10
c001dbae:	48                   	dec    eax
c001dbaf:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001dbb4:	85 c0                	test   eax,eax
c001dbb6:	75 d8                	jne    c001db90 <taskReturned+0x10>
c001dbb8:	fb                   	sti    
c001dbb9:	eb d5                	jmp    c001db90 <taskReturned+0x10>

c001dbbb <Thr::processFromPID(int)>:
c001dbbb:	57                   	push   edi
c001dbbc:	56                   	push   esi
c001dbbd:	53                   	push   ebx
c001dbbe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dbc2:	fa                   	cli    
c001dbc3:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001dbc9:	83 ec 0c             	sub    esp,0xc
c001dbcc:	68 c4 0a 03 c0       	push   0xc0030ac4
c001dbd1:	e8 b4 a9 00 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dbd6:	83 c4 10             	add    esp,0x10
c001dbd9:	89 c7                	mov    edi,eax
c001dbdb:	eb 14                	jmp    c001dbf1 <Thr::processFromPID(int)+0x36>
c001dbdd:	83 ec 0c             	sub    esp,0xc
c001dbe0:	68 c4 0a 03 c0       	push   0xc0030ac4
c001dbe5:	e8 a0 a9 00 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dbea:	83 c4 10             	add    esp,0x10
c001dbed:	39 f8                	cmp    eax,edi
c001dbef:	74 49                	je     c001dc3a <Thr::processFromPID(int)+0x7f>
c001dbf1:	83 ec 0c             	sub    esp,0xc
c001dbf4:	68 c4 0a 03 c0       	push   0xc0030ac4
c001dbf9:	e8 8c a9 00 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dbfe:	c7 04 24 c4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ac4
c001dc05:	89 c3                	mov    ebx,eax
c001dc07:	e8 86 a9 00 00       	call   c0028592 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc0c:	58                   	pop    eax
c001dc0d:	5a                   	pop    edx
c001dc0e:	53                   	push   ebx
c001dc0f:	68 c4 0a 03 c0       	push   0xc0030ac4
c001dc14:	e8 27 aa 00 00       	call   c0028640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc19:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc1c:	83 c4 10             	add    esp,0x10
c001dc1f:	39 30                	cmp    DWORD PTR [eax],esi
c001dc21:	75 ba                	jne    c001dbdd <Thr::processFromPID(int)+0x22>
c001dc23:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001dc28:	48                   	dec    eax
c001dc29:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001dc2e:	74 07                	je     c001dc37 <Thr::processFromPID(int)+0x7c>
c001dc30:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc33:	5b                   	pop    ebx
c001dc34:	5e                   	pop    esi
c001dc35:	5f                   	pop    edi
c001dc36:	c3                   	ret    
c001dc37:	fb                   	sti    
c001dc38:	eb f6                	jmp    c001dc30 <Thr::processFromPID(int)+0x75>
c001dc3a:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001dc3f:	48                   	dec    eax
c001dc40:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001dc45:	75 05                	jne    c001dc4c <Thr::processFromPID(int)+0x91>
c001dc47:	fb                   	sti    
c001dc48:	5b                   	pop    ebx
c001dc49:	5e                   	pop    esi
c001dc4a:	5f                   	pop    edi
c001dc4b:	c3                   	ret    
c001dc4c:	5b                   	pop    ebx
c001dc4d:	31 c0                	xor    eax,eax
c001dc4f:	5e                   	pop    esi
c001dc50:	5f                   	pop    edi
c001dc51:	c3                   	ret    

c001dc52 <unblockTask(ThreadControlBlock*)>:
c001dc52:	53                   	push   ebx
c001dc53:	83 ec 08             	sub    esp,0x8
c001dc56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc5a:	fa                   	cli    
c001dc5b:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001dc61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dc64:	85 c0                	test   eax,eax
c001dc66:	74 5a                	je     c001dcc2 <unblockTask(ThreadControlBlock*)+0x70>
c001dc68:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dc6b:	48                   	dec    eax
c001dc6c:	74 31                	je     c001dc9f <unblockTask(ThreadControlBlock*)+0x4d>
c001dc6e:	83 ec 0c             	sub    esp,0xc
c001dc71:	68 c4 0a 03 c0       	push   0xc0030ac4
c001dc76:	e8 0f a9 00 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc7b:	83 c4 10             	add    esp,0x10
c001dc7e:	85 c0                	test   eax,eax
c001dc80:	75 17                	jne    c001dc99 <unblockTask(ThreadControlBlock*)+0x47>
c001dc82:	eb 50                	jmp    c001dcd4 <unblockTask(ThreadControlBlock*)+0x82>
c001dc84:	83 ec 08             	sub    esp,0x8
c001dc87:	50                   	push   eax
c001dc88:	68 c4 0a 03 c0       	push   0xc0030ac4
c001dc8d:	e8 80 ac 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dc92:	83 c4 10             	add    esp,0x10
c001dc95:	85 c0                	test   eax,eax
c001dc97:	74 3b                	je     c001dcd4 <unblockTask(ThreadControlBlock*)+0x82>
c001dc99:	39 c3                	cmp    ebx,eax
c001dc9b:	75 e7                	jne    c001dc84 <unblockTask(ThreadControlBlock*)+0x32>
c001dc9d:	eb 10                	jmp    c001dcaf <unblockTask(ThreadControlBlock*)+0x5d>
c001dc9f:	83 ec 0c             	sub    esp,0xc
c001dca2:	68 a2 b7 02 c0       	push   0xc002b7a2
c001dca7:	e8 5f 48 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001dcac:	83 c4 10             	add    esp,0x10
c001dcaf:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001dcb4:	48                   	dec    eax
c001dcb5:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001dcba:	75 01                	jne    c001dcbd <unblockTask(ThreadControlBlock*)+0x6b>
c001dcbc:	fb                   	sti    
c001dcbd:	83 c4 08             	add    esp,0x8
c001dcc0:	5b                   	pop    ebx
c001dcc1:	c3                   	ret    
c001dcc2:	83 ec 0c             	sub    esp,0xc
c001dcc5:	68 8b b7 02 c0       	push   0xc002b78b
c001dcca:	e8 3c 48 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001dccf:	83 c4 10             	add    esp,0x10
c001dcd2:	eb db                	jmp    c001dcaf <unblockTask(ThreadControlBlock*)+0x5d>
c001dcd4:	83 ec 08             	sub    esp,0x8
c001dcd7:	53                   	push   ebx
c001dcd8:	68 c4 0a 03 c0       	push   0xc0030ac4
c001dcdd:	e8 5e a9 00 00       	call   c0028640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dce2:	83 c4 10             	add    esp,0x10
c001dce5:	eb c8                	jmp    c001dcaf <unblockTask(ThreadControlBlock*)+0x5d>

c001dce7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dce7:	55                   	push   ebp
c001dce8:	57                   	push   edi
c001dce9:	56                   	push   esi
c001dcea:	53                   	push   ebx
c001dceb:	83 ec 1c             	sub    esp,0x1c
c001dcee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dcf2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dcf5:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dcfb:	85 ff                	test   edi,edi
c001dcfd:	7e 20                	jle    c001dd1f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dcff:	31 f6                	xor    esi,esi
c001dd01:	83 ec 0c             	sub    esp,0xc
c001dd04:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dd0b:	46                   	inc    esi
c001dd0c:	e8 9b 18 ff ff       	call   c000f5ac <free>
c001dd11:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd14:	83 c4 10             	add    esp,0x10
c001dd17:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dd1d:	7f e2                	jg     c001dd01 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dd1f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd29:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dd2e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dd31:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dd34:	d3 c0                	rol    eax,cl
c001dd36:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dd3d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd40:	89 f7                	mov    edi,esi
c001dd42:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dd4a:	0f 85 64 01 00 00    	jne    c001deb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dd50:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dd56:	85 ed                	test   ebp,ebp
c001dd58:	74 1b                	je     c001dd75 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dd5a:	83 ec 0c             	sub    esp,0xc
c001dd5d:	55                   	push   ebp
c001dd5e:	e8 87 bc ff ff       	call   c00199ea <EnvVarContainer::~EnvVarContainer()>
c001dd63:	59                   	pop    ecx
c001dd64:	5e                   	pop    esi
c001dd65:	6a 0c                	push   0xc
c001dd67:	55                   	push   ebp
c001dd68:	e8 c6 46 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001dd6d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd70:	83 c4 10             	add    esp,0x10
c001dd73:	89 f7                	mov    edi,esi
c001dd75:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dd7b:	85 c0                	test   eax,eax
c001dd7d:	0f 84 aa 00 00 00    	je     c001de2d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dd83:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dd86:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dd8a:	31 c9                	xor    ecx,ecx
c001dd8c:	eb 10                	jmp    c001dd9e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dd8e:	41                   	inc    ecx
c001dd8f:	83 f9 10             	cmp    ecx,0x10
c001dd92:	0f 84 95 00 00 00    	je     c001de2d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dd98:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dd9e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dda5:	d3 fa                	sar    edx,cl
c001dda7:	83 e2 01             	and    edx,0x1
c001ddaa:	74 e2                	je     c001dd8e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ddac:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ddaf:	01 ca                	add    edx,ecx
c001ddb1:	89 d5                	mov    ebp,edx
c001ddb3:	c1 e5 05             	shl    ebp,0x5
c001ddb6:	01 ea                	add    edx,ebp
c001ddb8:	01 d0                	add    eax,edx
c001ddba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ddc0:	83 fd 07             	cmp    ebp,0x7
c001ddc3:	75 c9                	jne    c001dd8e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ddc5:	05 40 02 00 00       	add    eax,0x240
c001ddca:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ddcd:	83 fd ff             	cmp    ebp,0xffffffff
c001ddd0:	0f 8c e6 00 00 00    	jl     c001debc <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001ddd6:	0f 84 97 01 00 00    	je     c001df73 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dddc:	85 ed                	test   ebp,ebp
c001ddde:	0f 84 7e 01 00 00    	je     c001df62 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dde4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dde6:	75 a6                	jne    c001dd8e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dde8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ddee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddf2:	01 d0                	add    eax,edx
c001ddf4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001ddf8:	83 ec 0c             	sub    esp,0xc
c001ddfb:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001de01:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de04:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de0a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001de11:	50                   	push   eax
c001de12:	e8 3b fe ff ff       	call   c001dc52 <unblockTask(ThreadControlBlock*)>
c001de17:	83 c4 10             	add    esp,0x10
c001de1a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de21:	89 f7                	mov    edi,esi
c001de23:	41                   	inc    ecx
c001de24:	83 f9 10             	cmp    ecx,0x10
c001de27:	0f 85 6b ff ff ff    	jne    c001dd98 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001de2d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001de33:	85 c0                	test   eax,eax
c001de35:	74 5d                	je     c001de94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de37:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001de3d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001de43:	74 4f                	je     c001de94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de45:	83 ec 0c             	sub    esp,0xc
c001de48:	68 c4 0a 03 c0       	push   0xc0030ac4
c001de4d:	e8 38 a7 00 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de52:	c7 04 24 c4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ac4
c001de59:	89 c7                	mov    edi,eax
c001de5b:	e8 0e a7 00 00       	call   c002856e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de60:	83 c4 10             	add    esp,0x10
c001de63:	84 c0                	test   al,al
c001de65:	0f 84 c2 00 00 00    	je     c001df2d <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001de6b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de6e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001de74:	85 d2                	test   edx,edx
c001de76:	74 0f                	je     c001de87 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001de78:	83 ec 0c             	sub    esp,0xc
c001de7b:	8b 02                	mov    eax,DWORD PTR [edx]
c001de7d:	52                   	push   edx
c001de7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de81:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001de91:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001de94:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001de9a:	85 db                	test   ebx,ebx
c001de9c:	74 16                	je     c001deb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001de9e:	83 ec 0c             	sub    esp,0xc
c001dea1:	53                   	push   ebx
c001dea2:	e8 3b 39 ff ff       	call   c00117e2 <VAS::~VAS()>
c001dea7:	58                   	pop    eax
c001dea8:	5a                   	pop    edx
c001dea9:	6a 14                	push   0x14
c001deab:	53                   	push   ebx
c001deac:	e8 82 45 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001deb1:	83 c4 10             	add    esp,0x10
c001deb4:	83 c4 1c             	add    esp,0x1c
c001deb7:	5b                   	pop    ebx
c001deb8:	5e                   	pop    esi
c001deb9:	5f                   	pop    edi
c001deba:	5d                   	pop    ebp
c001debb:	c3                   	ret    
c001debc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dec0:	83 ec 0c             	sub    esp,0xc
c001dec3:	68 34 b8 02 c0       	push   0xc002b834
c001dec8:	e8 78 bd ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001decd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ded0:	83 c4 10             	add    esp,0x10
c001ded3:	89 f7                	mov    edi,esi
c001ded5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ded9:	e9 b0 fe ff ff       	jmp    c001dd8e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dede:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dee4:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001deea:	75 1c                	jne    c001df08 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001deec:	83 ec 0c             	sub    esp,0xc
c001deef:	68 9c b8 02 c0       	push   0xc002b89c
c001def4:	e8 12 46 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001def9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001df00:	e8 a0 fa ff ff       	call   c001d9a5 <blockTask(TaskState)>
c001df05:	83 c4 10             	add    esp,0x10
c001df08:	83 ec 08             	sub    esp,0x8
c001df0b:	56                   	push   esi
c001df0c:	68 c4 0a 03 c0       	push   0xc0030ac4
c001df11:	e8 2a a7 00 00       	call   c0028640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df16:	c7 04 24 c4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ac4
c001df1d:	e8 68 a6 00 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df22:	83 c4 10             	add    esp,0x10
c001df25:	39 f8                	cmp    eax,edi
c001df27:	0f 84 3e ff ff ff    	je     c001de6b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001df2d:	83 ec 0c             	sub    esp,0xc
c001df30:	68 c4 0a 03 c0       	push   0xc0030ac4
c001df35:	e8 50 a6 00 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df3a:	c7 04 24 c4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ac4
c001df41:	89 c6                	mov    esi,eax
c001df43:	e8 4a a6 00 00       	call   c0028592 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df48:	83 c4 10             	add    esp,0x10
c001df4b:	39 f3                	cmp    ebx,esi
c001df4d:	74 b9                	je     c001df08 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df4f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001df52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df55:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001df5b:	75 ab                	jne    c001df08 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df5d:	e9 7c ff ff ff       	jmp    c001dede <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001df62:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df66:	83 ec 0c             	sub    esp,0xc
c001df69:	68 68 b8 02 c0       	push   0xc002b868
c001df6e:	e9 55 ff ff ff       	jmp    c001dec8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001df73:	8b 36                	mov    esi,DWORD PTR [esi]
c001df75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df79:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001df7c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df7f:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001df85:	01 d7                	add    edi,edx
c001df87:	89 f8                	mov    eax,edi
c001df89:	e9 66 fe ff ff       	jmp    c001ddf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001df8e <cleanerTaskFunction(void*)>:
c001df8e:	53                   	push   ebx
c001df8f:	83 ec 08             	sub    esp,0x8
c001df92:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001df97:	48                   	dec    eax
c001df98:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001df9d:	75 01                	jne    c001dfa0 <cleanerTaskFunction(void*)+0x12>
c001df9f:	fb                   	sti    
c001dfa0:	fa                   	cli    
c001dfa1:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001dfa6:	80 3d 8c 0a 03 c0 00 	cmp    BYTE PTR ds:0xc0030a8c,0x0
c001dfad:	8d 50 01             	lea    edx,[eax+0x1]
c001dfb0:	89 15 a8 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa8,edx
c001dfb6:	0f 84 a1 00 00 00    	je     c001e05d <cleanerTaskFunction(void*)+0xcf>
c001dfbc:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001dfc1:	85 c0                	test   eax,eax
c001dfc3:	75 01                	jne    c001dfc6 <cleanerTaskFunction(void*)+0x38>
c001dfc5:	fb                   	sti    
c001dfc6:	c6 05 8c 0a 03 c0 00 	mov    BYTE PTR ds:0xc0030a8c,0x0
c001dfcd:	fa                   	cli    
c001dfce:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001dfd4:	ff 05 a4 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa4
c001dfda:	fa                   	cli    
c001dfdb:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001dfe1:	eb 26                	jmp    c001e009 <cleanerTaskFunction(void*)+0x7b>
c001dfe3:	83 ec 0c             	sub    esp,0xc
c001dfe6:	68 ac 0a 03 c0       	push   0xc0030aac
c001dfeb:	e8 9a a5 00 00       	call   c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dff0:	c7 04 24 ac 0a 03 c0 	mov    DWORD PTR [esp],0xc0030aac
c001dff7:	89 c3                	mov    ebx,eax
c001dff9:	e8 94 a5 00 00       	call   c0028592 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dffe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e001:	e8 e1 fc ff ff       	call   c001dce7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e006:	83 c4 10             	add    esp,0x10
c001e009:	83 ec 0c             	sub    esp,0xc
c001e00c:	68 ac 0a 03 c0       	push   0xc0030aac
c001e011:	e8 58 a5 00 00       	call   c002856e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e016:	83 c4 10             	add    esp,0x10
c001e019:	84 c0                	test   al,al
c001e01b:	74 c6                	je     c001dfe3 <cleanerTaskFunction(void*)+0x55>
c001e01d:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e022:	48                   	dec    eax
c001e023:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001e028:	75 01                	jne    c001e02b <cleanerTaskFunction(void*)+0x9d>
c001e02a:	fb                   	sti    
c001e02b:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001e030:	48                   	dec    eax
c001e031:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c001e036:	0f 85 56 ff ff ff    	jne    c001df92 <cleanerTaskFunction(void*)+0x4>
c001e03c:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001e041:	85 c0                	test   eax,eax
c001e043:	0f 84 49 ff ff ff    	je     c001df92 <cleanerTaskFunction(void*)+0x4>
c001e049:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c001e053:	e8 77 f7 ff ff       	call   c001d7cf <schedule()>
c001e058:	e9 35 ff ff ff       	jmp    c001df92 <cleanerTaskFunction(void*)+0x4>
c001e05d:	83 ec 0c             	sub    esp,0xc
c001e060:	6a 02                	push   0x2
c001e062:	e8 18 f9 ff ff       	call   c001d97f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e067:	83 c4 10             	add    esp,0x10
c001e06a:	e9 57 ff ff ff       	jmp    c001dfc6 <cleanerTaskFunction(void*)+0x38>

c001e06f <terminateTask(int)>:
c001e06f:	83 ec 14             	sub    esp,0x14
c001e072:	fa                   	cli    
c001e073:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001e079:	ff 05 a4 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa4
c001e07f:	fa                   	cli    
c001e080:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001e086:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e08a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e08f:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e092:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e097:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e09a:	50                   	push   eax
c001e09b:	68 ac 0a 03 c0       	push   0xc0030aac
c001e0a0:	e8 9b a5 00 00       	call   c0028640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0aa:	83 c4 10             	add    esp,0x10
c001e0ad:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e0b4:	a1 88 0a 03 c0       	mov    eax,ds:0xc0030a88
c001e0b9:	85 c0                	test   eax,eax
c001e0bb:	74 53                	je     c001e110 <terminateTask(int)+0xa1>
c001e0bd:	83 ec 0c             	sub    esp,0xc
c001e0c0:	c6 05 8c 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030a8c,0x1
c001e0c7:	50                   	push   eax
c001e0c8:	e8 85 fb ff ff       	call   c001dc52 <unblockTask(ThreadControlBlock*)>
c001e0cd:	83 c4 10             	add    esp,0x10
c001e0d0:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e0d5:	48                   	dec    eax
c001e0d6:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001e0db:	75 01                	jne    c001e0de <terminateTask(int)+0x6f>
c001e0dd:	fb                   	sti    
c001e0de:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001e0e3:	48                   	dec    eax
c001e0e4:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c001e0e9:	75 09                	jne    c001e0f4 <terminateTask(int)+0x85>
c001e0eb:	83 3d a0 0a 03 c0 00 	cmp    DWORD PTR ds:0xc0030aa0,0x0
c001e0f2:	75 2e                	jne    c001e122 <terminateTask(int)+0xb3>
c001e0f4:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e0f9:	48                   	dec    eax
c001e0fa:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001e0ff:	75 01                	jne    c001e102 <terminateTask(int)+0x93>
c001e101:	fb                   	sti    
c001e102:	fa                   	cli    
c001e103:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001e109:	e8 c1 f6 ff ff       	call   c001d7cf <schedule()>
c001e10e:	eb e4                	jmp    c001e0f4 <terminateTask(int)+0x85>
c001e110:	83 ec 0c             	sub    esp,0xc
c001e113:	68 b9 b7 02 c0       	push   0xc002b7b9
c001e118:	e8 ee 43 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001e11d:	83 c4 10             	add    esp,0x10
c001e120:	eb ae                	jmp    c001e0d0 <terminateTask(int)+0x61>
c001e122:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c001e12c:	eb db                	jmp    c001e109 <terminateTask(int)+0x9a>

c001e12e <Thr::terminateFromIRQ(int)>:
c001e12e:	83 ec 18             	sub    esp,0x18
c001e131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e135:	e8 35 ff ff ff       	call   c001e06f <terminateTask(int)>

c001e13a <Semaphore::release()>:
c001e13a:	83 ec 0c             	sub    esp,0xc
c001e13d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e141:	fa                   	cli    
c001e142:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001e147:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001e14d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e150:	89 0d a4 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa4,ecx
c001e156:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e159:	85 c9                	test   ecx,ecx
c001e15b:	74 3c                	je     c001e199 <Semaphore::release()+0x5f>
c001e15d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e166:	51                   	push   ecx
c001e167:	e8 e6 fa ff ff       	call   c001dc52 <unblockTask(ThreadControlBlock*)>
c001e16c:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c001e171:	83 c4 10             	add    esp,0x10
c001e174:	48                   	dec    eax
c001e175:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c001e17a:	85 c0                	test   eax,eax
c001e17c:	75 09                	jne    c001e187 <Semaphore::release()+0x4d>
c001e17e:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001e183:	85 c0                	test   eax,eax
c001e185:	75 17                	jne    c001e19e <Semaphore::release()+0x64>
c001e187:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e18c:	48                   	dec    eax
c001e18d:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001e192:	75 01                	jne    c001e195 <Semaphore::release()+0x5b>
c001e194:	fb                   	sti    
c001e195:	83 c4 0c             	add    esp,0xc
c001e198:	c3                   	ret    
c001e199:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e19c:	eb d7                	jmp    c001e175 <Semaphore::release()+0x3b>
c001e19e:	c7 05 a0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa0,0x0
c001e1a8:	e8 22 f6 ff ff       	call   c001d7cf <schedule()>
c001e1ad:	eb d8                	jmp    c001e187 <Semaphore::release()+0x4d>

c001e1af <__static_initialization_and_destruction_0(int, int)>:
c001e1af:	83 ec 0c             	sub    esp,0xc
c001e1b2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e1b7:	0f 85 88 00 00 00    	jne    c001e245 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e1bd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e1c5:	75 7e                	jne    c001e245 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e1c7:	83 ec 0c             	sub    esp,0xc
c001e1ca:	68 c4 0a 03 c0       	push   0xc0030ac4
c001e1cf:	e8 fc a6 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e1d4:	83 c4 10             	add    esp,0x10
c001e1d7:	83 ec 04             	sub    esp,0x4
c001e1da:	68 50 c3 02 c0       	push   0xc002c350
c001e1df:	68 c4 0a 03 c0       	push   0xc0030ac4
c001e1e4:	68 84 88 02 c0       	push   0xc0028884
c001e1e9:	e8 bf 41 ff ff       	call   c00123ad <__cxa_atexit>
c001e1ee:	83 c4 10             	add    esp,0x10
c001e1f1:	83 ec 0c             	sub    esp,0xc
c001e1f4:	68 b8 0a 03 c0       	push   0xc0030ab8
c001e1f9:	e8 d2 a6 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e1fe:	83 c4 10             	add    esp,0x10
c001e201:	83 ec 04             	sub    esp,0x4
c001e204:	68 50 c3 02 c0       	push   0xc002c350
c001e209:	68 b8 0a 03 c0       	push   0xc0030ab8
c001e20e:	68 84 88 02 c0       	push   0xc0028884
c001e213:	e8 95 41 ff ff       	call   c00123ad <__cxa_atexit>
c001e218:	83 c4 10             	add    esp,0x10
c001e21b:	83 ec 0c             	sub    esp,0xc
c001e21e:	68 ac 0a 03 c0       	push   0xc0030aac
c001e223:	e8 a8 a6 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e228:	83 c4 10             	add    esp,0x10
c001e22b:	83 ec 04             	sub    esp,0x4
c001e22e:	68 50 c3 02 c0       	push   0xc002c350
c001e233:	68 ac 0a 03 c0       	push   0xc0030aac
c001e238:	68 84 88 02 c0       	push   0xc0028884
c001e23d:	e8 6b 41 ff ff       	call   c00123ad <__cxa_atexit>
c001e242:	83 c4 10             	add    esp,0x10
c001e245:	90                   	nop
c001e246:	83 c4 0c             	add    esp,0xc
c001e249:	c3                   	ret    

c001e24a <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e24a:	83 ec 0c             	sub    esp,0xc
c001e24d:	83 ec 08             	sub    esp,0x8
c001e250:	68 ff ff 00 00       	push   0xffff
c001e255:	6a 01                	push   0x1
c001e257:	e8 53 ff ff ff       	call   c001e1af <__static_initialization_and_destruction_0(int, int)>
c001e25c:	83 c4 10             	add    esp,0x10
c001e25f:	83 c4 0c             	add    esp,0xc
c001e262:	c3                   	ret    

c001e263 <Vm::inbv(unsigned short)>:
c001e263:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e267:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e26c:	75 06                	jne    c001e274 <Vm::inbv(unsigned short)+0x11>
c001e26e:	a0 0c 0b 03 c0       	mov    al,ds:0xc0030b0c
c001e273:	c3                   	ret    
c001e274:	ec                   	in     al,dx
c001e275:	c3                   	ret    

c001e276 <Vm::outbv(unsigned short, unsigned char)>:
c001e276:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e27a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e27e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e283:	75 25                	jne    c001e2aa <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e285:	8b 0d 0c 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b0c
c001e28b:	8d 51 01             	lea    edx,[ecx+0x1]
c001e28e:	88 81 20 0b 03 c0    	mov    BYTE PTR [ecx-0x3ffcf4e0],al
c001e294:	89 15 0c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b0c,edx
c001e29a:	83 fa 20             	cmp    edx,0x20
c001e29d:	75 0c                	jne    c001e2ab <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e29f:	c7 05 0c 0b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030b0c,0x1f
c001e2a9:	c3                   	ret    
c001e2aa:	ee                   	out    dx,al
c001e2ab:	c3                   	ret    

c001e2ac <Vm::realToLinear(unsigned short, unsigned short)>:
c001e2ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e2b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e2b6:	c1 e0 04             	shl    eax,0x4
c001e2b9:	01 d0                	add    eax,edx
c001e2bb:	c3                   	ret    

c001e2bc <Vm::getSegment(unsigned int)>:
c001e2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2c0:	c1 e8 10             	shr    eax,0x10
c001e2c3:	c3                   	ret    

c001e2c4 <Vm::getOffset(unsigned int)>:
c001e2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2c8:	c3                   	ret    

c001e2c9 <Vm::mainloop2()>:
c001e2c9:	83 ec 18             	sub    esp,0x18
c001e2cc:	fa                   	cli    
c001e2cd:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001e2d3:	6a 02                	push   0x2
c001e2d5:	c6 05 05 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b05,0x1
c001e2dc:	e8 9e f6 ff ff       	call   c001d97f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e2e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e6:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e2ea:	52                   	push   edx
c001e2eb:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e2ef:	52                   	push   edx
c001e2f0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e2f4:	52                   	push   edx
c001e2f5:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e2f9:	50                   	push   eax
c001e2fa:	e8 fb 1f fe ff       	call   c00002fa <goToVM86>
c001e2ff:	83 c4 2c             	add    esp,0x2c
c001e302:	c3                   	ret    

c001e303 <Vm::mainVm8086Loop(void*)>:
c001e303:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e308:	48                   	dec    eax
c001e309:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001e30e:	75 01                	jne    c001e311 <Vm::mainVm8086Loop(void*)+0xe>
c001e310:	fb                   	sti    
c001e311:	eb b6                	jmp    c001e2c9 <Vm::mainloop2()>

c001e313 <Vm::mainloop3(unsigned long)>:
c001e313:	83 ec 18             	sub    esp,0x18
c001e316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e31a:	fa                   	cli    
c001e31b:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001e321:	6a 02                	push   0x2
c001e323:	c6 05 04 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b04,0x1
c001e32a:	a3 00 0b 03 c0       	mov    ds:0xc0030b00,eax
c001e32f:	e8 4b f6 ff ff       	call   c001d97f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e334:	83 c4 1c             	add    esp,0x1c
c001e337:	eb 90                	jmp    c001e2c9 <Vm::mainloop2()>

c001e339 <Vm::initialise8086()>:
c001e339:	83 ec 0c             	sub    esp,0xc
c001e33c:	68 80 00 00 00       	push   0x80
c001e341:	6a 00                	push   0x0
c001e343:	68 03 e3 01 c0       	push   0xc001e303
c001e348:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c001e34e:	e8 57 f2 ff ff       	call   c001d5aa <Process::createThread(void (*)(void*), void*, int)>
c001e353:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e35a:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e35f:	68 00 01 00 00       	push   0x100
c001e364:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c001e369:	6a 00                	push   0x0
c001e36b:	6a 00                	push   0x0
c001e36d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e373:	e8 dc 38 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e378:	83 c4 2c             	add    esp,0x2c
c001e37b:	c3                   	ret    

c001e37c <Vm::finish8086()>:
c001e37c:	53                   	push   ebx
c001e37d:	83 ec 08             	sub    esp,0x8
c001e380:	fa                   	cli    
c001e381:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001e387:	80 3d 04 0b 03 c0 00 	cmp    BYTE PTR ds:0xc0030b04,0x0
c001e38e:	75 15                	jne    c001e3a5 <Vm::finish8086()+0x29>
c001e390:	e8 3a f4 ff ff       	call   c001d7cf <schedule()>
c001e395:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e39a:	48                   	dec    eax
c001e39b:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001e3a0:	75 de                	jne    c001e380 <Vm::finish8086()+0x4>
c001e3a2:	fb                   	sti    
c001e3a3:	eb db                	jmp    c001e380 <Vm::finish8086()+0x4>
c001e3a5:	83 ec 0c             	sub    esp,0xc
c001e3a8:	8b 1d 00 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b00
c001e3ae:	ff 35 08 0b 03 c0    	push   DWORD PTR ds:0xc0030b08
c001e3b4:	c6 05 04 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b04,0x0
c001e3bb:	e8 92 f8 ff ff       	call   c001dc52 <unblockTask(ThreadControlBlock*)>
c001e3c0:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	8d 50 ff             	lea    edx,[eax-0x1]
c001e3cb:	89 15 a8 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa8,edx
c001e3d1:	85 d2                	test   edx,edx
c001e3d3:	75 01                	jne    c001e3d6 <Vm::finish8086()+0x5a>
c001e3d5:	fb                   	sti    
c001e3d6:	89 d8                	mov    eax,ebx
c001e3d8:	83 c4 08             	add    esp,0x8
c001e3db:	5b                   	pop    ebx
c001e3dc:	c3                   	ret    

c001e3dd <Vm::getOutput8086(unsigned char*)>:
c001e3dd:	57                   	push   edi
c001e3de:	8b 0d 0c 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b0c
c001e3e4:	56                   	push   esi
c001e3e5:	be 20 0b 03 c0       	mov    esi,0xc0030b20
c001e3ea:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e3ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e3f0:	a1 0c 0b 03 c0       	mov    eax,ds:0xc0030b0c
c001e3f5:	5e                   	pop    esi
c001e3f6:	c7 05 0c 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b0c,0x0
c001e400:	5f                   	pop    edi
c001e401:	c3                   	ret    

c001e402 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e402:	55                   	push   ebp
c001e403:	57                   	push   edi
c001e404:	56                   	push   esi
c001e405:	53                   	push   ebx
c001e406:	83 ec 2c             	sub    esp,0x2c
c001e409:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e40d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e411:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e415:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e419:	fa                   	cli    
c001e41a:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c001e420:	0f b6 35 05 0b 03 c0 	movzx  esi,BYTE PTR ds:0xc0030b05
c001e427:	89 f0                	mov    eax,esi
c001e429:	84 c0                	test   al,al
c001e42b:	75 1d                	jne    c001e44a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e42d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e431:	e8 99 f3 ff ff       	call   c001d7cf <schedule()>
c001e436:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e43b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e43f:	48                   	dec    eax
c001e440:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001e445:	75 d2                	jne    c001e419 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e447:	fb                   	sti    
c001e448:	eb cf                	jmp    c001e419 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e44a:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e44f:	c7 05 0c 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b0c,0x0
c001e459:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e45d:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e461:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e465:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e469:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e46d:	50                   	push   eax
c001e46e:	6a 20                	push   0x20
c001e470:	6a 00                	push   0x0
c001e472:	68 20 0b 03 c0       	push   0xc0030b20
c001e477:	e8 d4 22 fe ff       	call   c0000750 <memset>
c001e47c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e483:	e8 14 11 ff ff       	call   c000f59c <malloc>
c001e488:	83 c4 0c             	add    esp,0xc
c001e48b:	89 c3                	mov    ebx,eax
c001e48d:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c001e493:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e497:	50                   	push   eax
c001e498:	e8 cd 45 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001e49d:	83 c4 10             	add    esp,0x10
c001e4a0:	85 db                	test   ebx,ebx
c001e4a2:	75 0a                	jne    c001e4ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e4a4:	83 ec 0c             	sub    esp,0xc
c001e4a7:	68 c4 b8 02 c0       	push   0xc002b8c4
c001e4ac:	eb 3e                	jmp    c001e4ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e4ae:	50                   	push   eax
c001e4af:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e4b3:	50                   	push   eax
c001e4b4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e4b8:	50                   	push   eax
c001e4b9:	53                   	push   ebx
c001e4ba:	e8 bb 48 ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001e4bf:	83 c4 10             	add    esp,0x10
c001e4c2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e4c7:	74 0a                	je     c001e4d3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e4c9:	83 ec 0c             	sub    esp,0xc
c001e4cc:	68 d8 b8 02 c0       	push   0xc002b8d8
c001e4d1:	eb 19                	jmp    c001e4ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e4d3:	51                   	push   ecx
c001e4d4:	51                   	push   ecx
c001e4d5:	6a 01                	push   0x1
c001e4d7:	53                   	push   ebx
c001e4d8:	e8 f1 45 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001e4dd:	83 c4 10             	add    esp,0x10
c001e4e0:	85 c0                	test   eax,eax
c001e4e2:	74 24                	je     c001e508 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e4e4:	83 ec 0c             	sub    esp,0xc
c001e4e7:	68 f1 b8 02 c0       	push   0xc002b8f1
c001e4ec:	e8 54 b7 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001e4f1:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e4f6:	83 c4 10             	add    esp,0x10
c001e4f9:	48                   	dec    eax
c001e4fa:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001e4ff:	85 c0                	test   eax,eax
c001e501:	75 01                	jne    c001e504 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e503:	fb                   	sti    
c001e504:	31 f6                	xor    esi,esi
c001e506:	eb 58                	jmp    c001e560 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e508:	0f b7 ed             	movzx  ebp,bp
c001e50b:	50                   	push   eax
c001e50c:	0f b7 ff             	movzx  edi,di
c001e50f:	50                   	push   eax
c001e510:	55                   	push   ebp
c001e511:	57                   	push   edi
c001e512:	e8 95 fd ff ff       	call   c001e2ac <Vm::realToLinear(unsigned short, unsigned short)>
c001e517:	5a                   	pop    edx
c001e518:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e51a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e51e:	51                   	push   ecx
c001e51f:	50                   	push   eax
c001e520:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e524:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e528:	53                   	push   ebx
c001e529:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e52c:	83 c4 14             	add    esp,0x14
c001e52f:	53                   	push   ebx
c001e530:	e8 f7 45 ff ff       	call   c0012b2c <File::close()>
c001e535:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e53a:	83 c4 10             	add    esp,0x10
c001e53d:	48                   	dec    eax
c001e53e:	c6 05 05 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b05,0x0
c001e545:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c001e54a:	85 c0                	test   eax,eax
c001e54c:	75 01                	jne    c001e54f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e54e:	fb                   	sti    
c001e54f:	83 ec 0c             	sub    esp,0xc
c001e552:	ff 35 08 0b 03 c0    	push   DWORD PTR ds:0xc0030b08
c001e558:	e8 f5 f6 ff ff       	call   c001dc52 <unblockTask(ThreadControlBlock*)>
c001e55d:	83 c4 10             	add    esp,0x10
c001e560:	83 c4 2c             	add    esp,0x2c
c001e563:	89 f0                	mov    eax,esi
c001e565:	5b                   	pop    ebx
c001e566:	5e                   	pop    esi
c001e567:	5f                   	pop    edi
c001e568:	5d                   	pop    ebp
c001e569:	c3                   	ret    

c001e56a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e56a:	57                   	push   edi
c001e56b:	56                   	push   esi
c001e56c:	53                   	push   ebx
c001e56d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e575:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e579:	83 e8 06             	sub    eax,0x6
c001e57c:	0f b7 c0             	movzx  eax,ax
c001e57f:	50                   	push   eax
c001e580:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e585:	50                   	push   eax
c001e586:	e8 21 fd ff ff       	call   c001e2ac <Vm::realToLinear(unsigned short, unsigned short)>
c001e58b:	5a                   	pop    edx
c001e58c:	5e                   	pop    esi
c001e58d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e590:	8d 56 fa             	lea    edx,[esi-0x6]
c001e593:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e599:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e59c:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e59f:	83 c2 02             	add    edx,0x2
c001e5a2:	66 89 10             	mov    WORD PTR [eax],dx
c001e5a5:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e5a8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e5ac:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e5af:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e5b3:	89 d6                	mov    esi,edx
c001e5b5:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e5bb:	66 81 e6 ff fd       	and    si,0xfdff
c001e5c0:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e5c4:	74 07                	je     c001e5cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e5c6:	89 d6                	mov    esi,edx
c001e5c8:	66 81 ce 00 02       	or     si,0x200
c001e5cd:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e5d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5d6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e5da:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e5e2:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e5e5:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e5ed:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e5f0:	5b                   	pop    ebx
c001e5f1:	5e                   	pop    esi
c001e5f2:	5f                   	pop    edi
c001e5f3:	c3                   	ret    

c001e5f4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e5f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e5f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e5fe:	c1 e0 04             	shl    eax,0x4
c001e601:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e604:	c3                   	ret    

c001e605 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e605:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e60a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e60f:	c1 e0 04             	shl    eax,0x4
c001e612:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e616:	c3                   	ret    

c001e617 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e617:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e61c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e621:	c1 e0 04             	shl    eax,0x4
c001e624:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e627:	c3                   	ret    

c001e628 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e628:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e62d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e632:	c1 e0 04             	shl    eax,0x4
c001e635:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e639:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e63c:	c3                   	ret    

c001e63d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e63d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e642:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e647:	c1 e0 04             	shl    eax,0x4
c001e64a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e64e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e652:	c3                   	ret    

c001e653 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e653:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e658:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e65d:	c1 e0 04             	shl    eax,0x4
c001e660:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e664:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e667:	c3                   	ret    

c001e668 <Vm::faultHandler(regs*)>:
c001e668:	55                   	push   ebp
c001e669:	57                   	push   edi
c001e66a:	56                   	push   esi
c001e66b:	53                   	push   ebx
c001e66c:	83 ec 1c             	sub    esp,0x1c
c001e66f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e673:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e676:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e67a:	0f b7 f8             	movzx  edi,ax
c001e67d:	52                   	push   edx
c001e67e:	0f b7 c0             	movzx  eax,ax
c001e681:	50                   	push   eax
c001e682:	e8 25 fc ff ff       	call   c001e2ac <Vm::realToLinear(unsigned short, unsigned short)>
c001e687:	5a                   	pop    edx
c001e688:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e68b:	59                   	pop    ecx
c001e68c:	89 c1                	mov    ecx,eax
c001e68e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e691:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e695:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e69a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e69e:	0f b7 c5             	movzx  eax,bp
c001e6a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e6a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e6ad:	e8 fa fb ff ff       	call   c001e2ac <Vm::realToLinear(unsigned short, unsigned short)>
c001e6b2:	5e                   	pop    esi
c001e6b3:	be 06 00 00 00       	mov    esi,0x6
c001e6b8:	5a                   	pop    edx
c001e6b9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e6be:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e6c3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e6c6:	80 fa 9d             	cmp    dl,0x9d
c001e6c9:	0f 84 2c 02 00 00    	je     c001e8fb <Vm::faultHandler(regs*)+0x293>
c001e6cf:	0f 87 91 00 00 00    	ja     c001e766 <Vm::faultHandler(regs*)+0xfe>
c001e6d5:	80 fa 66             	cmp    dl,0x66
c001e6d8:	0f 84 98 01 00 00    	je     c001e876 <Vm::faultHandler(regs*)+0x20e>
c001e6de:	77 47                	ja     c001e727 <Vm::faultHandler(regs*)+0xbf>
c001e6e0:	80 fa 36             	cmp    dl,0x36
c001e6e3:	0f 84 80 01 00 00    	je     c001e869 <Vm::faultHandler(regs*)+0x201>
c001e6e9:	77 1a                	ja     c001e705 <Vm::faultHandler(regs*)+0x9d>
c001e6eb:	80 fa 26             	cmp    dl,0x26
c001e6ee:	0f 84 4e 01 00 00    	je     c001e842 <Vm::faultHandler(regs*)+0x1da>
c001e6f4:	80 fa 2e             	cmp    dl,0x2e
c001e6f7:	0f 85 e2 05 00 00    	jne    c001ecdf <Vm::faultHandler(regs*)+0x677>
c001e6fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e700:	31 f6                	xor    esi,esi
c001e702:	41                   	inc    ecx
c001e703:	eb be                	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x5b>
c001e705:	80 fa 64             	cmp    dl,0x64
c001e708:	0f 84 41 01 00 00    	je     c001e84f <Vm::faultHandler(regs*)+0x1e7>
c001e70e:	0f 87 48 01 00 00    	ja     c001e85c <Vm::faultHandler(regs*)+0x1f4>
c001e714:	80 fa 3e             	cmp    dl,0x3e
c001e717:	0f 85 c2 05 00 00    	jne    c001ecdf <Vm::faultHandler(regs*)+0x677>
c001e71d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e720:	be 01 00 00 00       	mov    esi,0x1
c001e725:	eb db                	jmp    c001e702 <Vm::faultHandler(regs*)+0x9a>
c001e727:	80 fa 6d             	cmp    dl,0x6d
c001e72a:	0f 84 ec 02 00 00    	je     c001ea1c <Vm::faultHandler(regs*)+0x3b4>
c001e730:	77 17                	ja     c001e749 <Vm::faultHandler(regs*)+0xe1>
c001e732:	80 fa 67             	cmp    dl,0x67
c001e735:	0f 84 48 01 00 00    	je     c001e883 <Vm::faultHandler(regs*)+0x21b>
c001e73b:	80 fa 6c             	cmp    dl,0x6c
c001e73e:	0f 84 69 02 00 00    	je     c001e9ad <Vm::faultHandler(regs*)+0x345>
c001e744:	e9 96 05 00 00       	jmp    c001ecdf <Vm::faultHandler(regs*)+0x677>
c001e749:	80 fa 6f             	cmp    dl,0x6f
c001e74c:	0f 84 f4 03 00 00    	je     c001eb46 <Vm::faultHandler(regs*)+0x4de>
c001e752:	0f 82 59 03 00 00    	jb     c001eab1 <Vm::faultHandler(regs*)+0x449>
c001e758:	80 fa 9c             	cmp    dl,0x9c
c001e75b:	0f 84 2f 01 00 00    	je     c001e890 <Vm::faultHandler(regs*)+0x228>
c001e761:	e9 79 05 00 00       	jmp    c001ecdf <Vm::faultHandler(regs*)+0x677>
c001e766:	80 fa ec             	cmp    dl,0xec
c001e769:	0f 84 14 05 00 00    	je     c001ec83 <Vm::faultHandler(regs*)+0x61b>
c001e76f:	77 7b                	ja     c001e7ec <Vm::faultHandler(regs*)+0x184>
c001e771:	80 fa e4             	cmp    dl,0xe4
c001e774:	0f 84 93 04 00 00    	je     c001ec0d <Vm::faultHandler(regs*)+0x5a5>
c001e77a:	77 53                	ja     c001e7cf <Vm::faultHandler(regs*)+0x167>
c001e77c:	80 fa cd             	cmp    dl,0xcd
c001e77f:	0f 84 d9 01 00 00    	je     c001e95e <Vm::faultHandler(regs*)+0x2f6>
c001e785:	80 fa cf             	cmp    dl,0xcf
c001e788:	0f 85 51 05 00 00    	jne    c001ecdf <Vm::faultHandler(regs*)+0x677>
c001e78e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e791:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e794:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e798:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e79b:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e79f:	81 ca 00 02 02 00    	or     edx,0x20200
c001e7a5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e7a8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e7ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7b2:	66 c1 e8 09          	shr    ax,0x9
c001e7b6:	83 e0 01             	and    eax,0x1
c001e7b9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e7bc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e7bf:	83 c0 06             	add    eax,0x6
c001e7c2:	25 ff ff 00 00       	and    eax,0xffff
c001e7c7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e7ca:	e9 0c 05 00 00       	jmp    c001ecdb <Vm::faultHandler(regs*)+0x673>
c001e7cf:	80 fa e6             	cmp    dl,0xe6
c001e7d2:	0f 84 7f 04 00 00    	je     c001ec57 <Vm::faultHandler(regs*)+0x5ef>
c001e7d8:	0f 82 4b 04 00 00    	jb     c001ec29 <Vm::faultHandler(regs*)+0x5c1>
c001e7de:	80 fa e7             	cmp    dl,0xe7
c001e7e1:	0f 84 87 04 00 00    	je     c001ec6e <Vm::faultHandler(regs*)+0x606>
c001e7e7:	e9 f3 04 00 00       	jmp    c001ecdf <Vm::faultHandler(regs*)+0x677>
c001e7ec:	80 fa ef             	cmp    dl,0xef
c001e7ef:	0f 84 d1 04 00 00    	je     c001ecc6 <Vm::faultHandler(regs*)+0x65e>
c001e7f5:	77 28                	ja     c001e81f <Vm::faultHandler(regs*)+0x1b7>
c001e7f7:	80 fa ed             	cmp    dl,0xed
c001e7fa:	0f 84 9f 04 00 00    	je     c001ec9f <Vm::faultHandler(regs*)+0x637>
c001e800:	80 fa ee             	cmp    dl,0xee
c001e803:	0f 85 d6 04 00 00    	jne    c001ecdf <Vm::faultHandler(regs*)+0x677>
c001e809:	50                   	push   eax
c001e80a:	50                   	push   eax
c001e80b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e80f:	50                   	push   eax
c001e810:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e814:	50                   	push   eax
c001e815:	e8 5c fa ff ff       	call   c001e276 <Vm::outbv(unsigned short, unsigned char)>
c001e81a:	e9 9f 04 00 00       	jmp    c001ecbe <Vm::faultHandler(regs*)+0x656>
c001e81f:	80 fa fa             	cmp    dl,0xfa
c001e822:	0f 84 69 01 00 00    	je     c001e991 <Vm::faultHandler(regs*)+0x329>
c001e828:	80 fa fb             	cmp    dl,0xfb
c001e82b:	0f 84 6e 01 00 00    	je     c001e99f <Vm::faultHandler(regs*)+0x337>
c001e831:	80 fa f3             	cmp    dl,0xf3
c001e834:	0f 85 a5 04 00 00    	jne    c001ecdf <Vm::faultHandler(regs*)+0x677>
c001e83a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e83d:	e9 c0 fe ff ff       	jmp    c001e702 <Vm::faultHandler(regs*)+0x9a>
c001e842:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e845:	be 02 00 00 00       	mov    esi,0x2
c001e84a:	e9 b3 fe ff ff       	jmp    c001e702 <Vm::faultHandler(regs*)+0x9a>
c001e84f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e852:	be 03 00 00 00       	mov    esi,0x3
c001e857:	e9 a6 fe ff ff       	jmp    c001e702 <Vm::faultHandler(regs*)+0x9a>
c001e85c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e85f:	be 04 00 00 00       	mov    esi,0x4
c001e864:	e9 99 fe ff ff       	jmp    c001e702 <Vm::faultHandler(regs*)+0x9a>
c001e869:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e86c:	be 05 00 00 00       	mov    esi,0x5
c001e871:	e9 8c fe ff ff       	jmp    c001e702 <Vm::faultHandler(regs*)+0x9a>
c001e876:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e879:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001e87e:	e9 7f fe ff ff       	jmp    c001e702 <Vm::faultHandler(regs*)+0x9a>
c001e883:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e886:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001e88b:	e9 72 fe ff ff       	jmp    c001e702 <Vm::faultHandler(regs*)+0x9a>
c001e890:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001e897:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e89c:	74 30                	je     c001e8ce <Vm::faultHandler(regs*)+0x266>
c001e89e:	83 e9 04             	sub    ecx,0x4
c001e8a1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e8a7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e8ad:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e8b0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e8b3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e8b9:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e8bd:	0f 84 15 04 00 00    	je     c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001e8c3:	80 ce 02             	or     dh,0x2
c001e8c6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e8c9:	e9 0a 04 00 00       	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001e8ce:	83 e9 02             	sub    ecx,0x2
c001e8d1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e8d7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e8da:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e8de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e8e4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e8e8:	74 05                	je     c001e8ef <Vm::faultHandler(regs*)+0x287>
c001e8ea:	80 ce 02             	or     dh,0x2
c001e8ed:	eb 03                	jmp    c001e8f2 <Vm::faultHandler(regs*)+0x28a>
c001e8ef:	80 e6 fd             	and    dh,0xfd
c001e8f2:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e8f6:	e9 dd 03 00 00       	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001e8fb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e900:	74 2a                	je     c001e92c <Vm::faultHandler(regs*)+0x2c4>
c001e902:	8b 10                	mov    edx,DWORD PTR [eax]
c001e904:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e90a:	81 ca 00 02 02 00    	or     edx,0x20200
c001e910:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e913:	8b 00                	mov    eax,DWORD PTR [eax]
c001e915:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e91b:	c1 e8 09             	shr    eax,0x9
c001e91e:	83 e0 01             	and    eax,0x1
c001e921:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e924:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e927:	83 c0 04             	add    eax,0x4
c001e92a:	eb 25                	jmp    c001e951 <Vm::faultHandler(regs*)+0x2e9>
c001e92c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e92f:	81 ca 00 02 02 00    	or     edx,0x20200
c001e935:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e938:	66 8b 00             	mov    ax,WORD PTR [eax]
c001e93b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e941:	66 c1 e8 09          	shr    ax,0x9
c001e945:	83 e0 01             	and    eax,0x1
c001e948:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e94b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e94e:	83 c0 02             	add    eax,0x2
c001e951:	25 ff ff 00 00       	and    eax,0xffff
c001e956:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e959:	e9 7a 03 00 00       	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001e95e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001e962:	3c ee                	cmp    al,0xee
c001e964:	75 10                	jne    c001e976 <Vm::faultHandler(regs*)+0x30e>
c001e966:	83 ec 0c             	sub    esp,0xc
c001e969:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001e96c:	e8 a2 f9 ff ff       	call   c001e313 <Vm::mainloop3(unsigned long)>
c001e971:	e9 4b 03 00 00       	jmp    c001ecc1 <Vm::faultHandler(regs*)+0x659>
c001e976:	83 ec 0c             	sub    esp,0xc
c001e979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e97d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e981:	51                   	push   ecx
c001e982:	50                   	push   eax
c001e983:	53                   	push   ebx
c001e984:	e8 e1 fb ff ff       	call   c001e56a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e989:	83 c4 20             	add    esp,0x20
c001e98c:	e9 4a 03 00 00       	jmp    c001ecdb <Vm::faultHandler(regs*)+0x673>
c001e991:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e996:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e99a:	e9 39 03 00 00       	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001e99f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9a4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e9a8:	e9 2b 03 00 00       	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001e9ad:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001e9b0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001e9b5:	74 2b                	je     c001e9e2 <Vm::faultHandler(regs*)+0x37a>
c001e9b7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001e9be:	76 22                	jbe    c001e9e2 <Vm::faultHandler(regs*)+0x37a>
c001e9c0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001e9c4:	50                   	push   eax
c001e9c5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001e9c9:	50                   	push   eax
c001e9ca:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001e9ce:	50                   	push   eax
c001e9cf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001e9d3:	50                   	push   eax
c001e9d4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001e9d8:	50                   	push   eax
c001e9d9:	6a 6c                	push   0x6c
c001e9db:	6a 6c                	push   0x6c
c001e9dd:	e9 b9 01 00 00       	jmp    c001eb9b <Vm::faultHandler(regs*)+0x533>
c001e9e2:	83 ec 0c             	sub    esp,0xc
c001e9e5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e9e9:	0f b7 f6             	movzx  esi,si
c001e9ec:	50                   	push   eax
c001e9ed:	e8 71 f8 ff ff       	call   c001e263 <Vm::inbv(unsigned short)>
c001e9f2:	83 c4 0c             	add    esp,0xc
c001e9f5:	0f b6 c0             	movzx  eax,al
c001e9f8:	50                   	push   eax
c001e9f9:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001e9fd:	50                   	push   eax
c001e9fe:	56                   	push   esi
c001e9ff:	e8 24 fc ff ff       	call   c001e628 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ea04:	83 c4 10             	add    esp,0x10
c001ea07:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea0a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ea0e:	74 03                	je     c001ea13 <Vm::faultHandler(regs*)+0x3ab>
c001ea10:	48                   	dec    eax
c001ea11:	eb 01                	jmp    c001ea14 <Vm::faultHandler(regs*)+0x3ac>
c001ea13:	40                   	inc    eax
c001ea14:	0f b7 c0             	movzx  eax,ax
c001ea17:	e9 8d 00 00 00       	jmp    c001eaa9 <Vm::faultHandler(regs*)+0x441>
c001ea1c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ea1f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea22:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ea27:	74 29                	je     c001ea52 <Vm::faultHandler(regs*)+0x3ea>
c001ea29:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea2e:	76 22                	jbe    c001ea52 <Vm::faultHandler(regs*)+0x3ea>
c001ea30:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ea34:	50                   	push   eax
c001ea35:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ea39:	50                   	push   eax
c001ea3a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ea3e:	50                   	push   eax
c001ea3f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ea43:	50                   	push   eax
c001ea44:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea48:	50                   	push   eax
c001ea49:	6a 6d                	push   0x6d
c001ea4b:	6a 6d                	push   0x6d
c001ea4d:	e9 49 01 00 00       	jmp    c001eb9b <Vm::faultHandler(regs*)+0x533>
c001ea52:	0f b7 c8             	movzx  ecx,ax
c001ea55:	0f b7 f6             	movzx  esi,si
c001ea58:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ea5b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea60:	74 20                	je     c001ea82 <Vm::faultHandler(regs*)+0x41a>
c001ea62:	ed                   	in     eax,dx
c001ea63:	55                   	push   ebp
c001ea64:	50                   	push   eax
c001ea65:	51                   	push   ecx
c001ea66:	56                   	push   esi
c001ea67:	e8 e7 fb ff ff       	call   c001e653 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ea6c:	83 c4 10             	add    esp,0x10
c001ea6f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea72:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ea76:	74 05                	je     c001ea7d <Vm::faultHandler(regs*)+0x415>
c001ea78:	83 e8 04             	sub    eax,0x4
c001ea7b:	eb 27                	jmp    c001eaa4 <Vm::faultHandler(regs*)+0x43c>
c001ea7d:	83 c0 04             	add    eax,0x4
c001ea80:	eb 22                	jmp    c001eaa4 <Vm::faultHandler(regs*)+0x43c>
c001ea82:	66 ed                	in     ax,dx
c001ea84:	0f b7 c0             	movzx  eax,ax
c001ea87:	57                   	push   edi
c001ea88:	50                   	push   eax
c001ea89:	51                   	push   ecx
c001ea8a:	56                   	push   esi
c001ea8b:	e8 ad fb ff ff       	call   c001e63d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ea90:	83 c4 10             	add    esp,0x10
c001ea93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea96:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ea9a:	74 05                	je     c001eaa1 <Vm::faultHandler(regs*)+0x439>
c001ea9c:	83 e8 02             	sub    eax,0x2
c001ea9f:	eb 03                	jmp    c001eaa4 <Vm::faultHandler(regs*)+0x43c>
c001eaa1:	83 c0 02             	add    eax,0x2
c001eaa4:	25 ff ff 00 00       	and    eax,0xffff
c001eaa9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001eaac:	e9 27 02 00 00       	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001eab1:	8d 46 ff             	lea    eax,[esi-0x1]
c001eab4:	3c 05                	cmp    al,0x5
c001eab6:	77 24                	ja     c001eadc <Vm::faultHandler(regs*)+0x474>
c001eab8:	0f b6 c0             	movzx  eax,al
c001eabb:	ff 24 85 64 b9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd469c]
c001eac2:	0f b7 fd             	movzx  edi,bp
c001eac5:	eb 15                	jmp    c001eadc <Vm::faultHandler(regs*)+0x474>
c001eac7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001eacb:	eb 0f                	jmp    c001eadc <Vm::faultHandler(regs*)+0x474>
c001eacd:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ead1:	eb 09                	jmp    c001eadc <Vm::faultHandler(regs*)+0x474>
c001ead3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ead7:	eb 03                	jmp    c001eadc <Vm::faultHandler(regs*)+0x474>
c001ead9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001eadc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eadf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eae4:	74 29                	je     c001eb0f <Vm::faultHandler(regs*)+0x4a7>
c001eae6:	3d ff ff 00 00       	cmp    eax,0xffff
c001eaeb:	76 22                	jbe    c001eb0f <Vm::faultHandler(regs*)+0x4a7>
c001eaed:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eaf1:	50                   	push   eax
c001eaf2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eaf6:	50                   	push   eax
c001eaf7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eafb:	50                   	push   eax
c001eafc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb00:	50                   	push   eax
c001eb01:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb05:	50                   	push   eax
c001eb06:	6a 6e                	push   0x6e
c001eb08:	6a 6e                	push   0x6e
c001eb0a:	e9 8c 00 00 00       	jmp    c001eb9b <Vm::faultHandler(regs*)+0x533>
c001eb0f:	0f b7 c0             	movzx  eax,ax
c001eb12:	52                   	push   edx
c001eb13:	52                   	push   edx
c001eb14:	50                   	push   eax
c001eb15:	57                   	push   edi
c001eb16:	e8 d9 fa ff ff       	call   c001e5f4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eb1b:	59                   	pop    ecx
c001eb1c:	0f b6 c0             	movzx  eax,al
c001eb1f:	5e                   	pop    esi
c001eb20:	50                   	push   eax
c001eb21:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eb25:	50                   	push   eax
c001eb26:	e8 4b f7 ff ff       	call   c001e276 <Vm::outbv(unsigned short, unsigned char)>
c001eb2b:	83 c4 10             	add    esp,0x10
c001eb2e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eb31:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb35:	74 03                	je     c001eb3a <Vm::faultHandler(regs*)+0x4d2>
c001eb37:	48                   	dec    eax
c001eb38:	eb 01                	jmp    c001eb3b <Vm::faultHandler(regs*)+0x4d3>
c001eb3a:	40                   	inc    eax
c001eb3b:	0f b7 c0             	movzx  eax,ax
c001eb3e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001eb41:	e9 92 01 00 00       	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001eb46:	8d 46 ff             	lea    eax,[esi-0x1]
c001eb49:	3c 05                	cmp    al,0x5
c001eb4b:	77 1f                	ja     c001eb6c <Vm::faultHandler(regs*)+0x504>
c001eb4d:	0f b6 c0             	movzx  eax,al
c001eb50:	ff 24 85 7c b9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4684]
c001eb57:	89 ef                	mov    edi,ebp
c001eb59:	eb 11                	jmp    c001eb6c <Vm::faultHandler(regs*)+0x504>
c001eb5b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001eb5e:	eb 0c                	jmp    c001eb6c <Vm::faultHandler(regs*)+0x504>
c001eb60:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001eb63:	eb 07                	jmp    c001eb6c <Vm::faultHandler(regs*)+0x504>
c001eb65:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001eb68:	eb 02                	jmp    c001eb6c <Vm::faultHandler(regs*)+0x504>
c001eb6a:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001eb6c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001eb6f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb74:	74 37                	je     c001ebad <Vm::faultHandler(regs*)+0x545>
c001eb76:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001eb7c:	76 2f                	jbe    c001ebad <Vm::faultHandler(regs*)+0x545>
c001eb7e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb82:	50                   	push   eax
c001eb83:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb87:	50                   	push   eax
c001eb88:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb8c:	50                   	push   eax
c001eb8d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb91:	50                   	push   eax
c001eb92:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb96:	50                   	push   eax
c001eb97:	6a 6f                	push   0x6f
c001eb99:	6a 6f                	push   0x6f
c001eb9b:	68 0a b9 02 c0       	push   0xc002b90a
c001eba0:	e8 66 39 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001eba5:	83 c4 20             	add    esp,0x20
c001eba8:	e9 86 01 00 00       	jmp    c001ed33 <Vm::faultHandler(regs*)+0x6cb>
c001ebad:	0f b7 d7             	movzx  edx,di
c001ebb0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ebb3:	0f b7 c6             	movzx  eax,si
c001ebb6:	81 e1 00 04 00 00    	and    ecx,0x400
c001ebbc:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ebbf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ebc4:	74 1d                	je     c001ebe3 <Vm::faultHandler(regs*)+0x57b>
c001ebc6:	55                   	push   ebp
c001ebc7:	55                   	push   ebp
c001ebc8:	50                   	push   eax
c001ebc9:	52                   	push   edx
c001ebca:	e8 48 fa ff ff       	call   c001e617 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	89 fa                	mov    edx,edi
c001ebd4:	ef                   	out    dx,eax
c001ebd5:	85 c9                	test   ecx,ecx
c001ebd7:	74 05                	je     c001ebde <Vm::faultHandler(regs*)+0x576>
c001ebd9:	83 ee 04             	sub    esi,0x4
c001ebdc:	eb 21                	jmp    c001ebff <Vm::faultHandler(regs*)+0x597>
c001ebde:	83 c6 04             	add    esi,0x4
c001ebe1:	eb 1c                	jmp    c001ebff <Vm::faultHandler(regs*)+0x597>
c001ebe3:	55                   	push   ebp
c001ebe4:	55                   	push   ebp
c001ebe5:	50                   	push   eax
c001ebe6:	52                   	push   edx
c001ebe7:	e8 19 fa ff ff       	call   c001e605 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ebec:	83 c4 10             	add    esp,0x10
c001ebef:	89 fa                	mov    edx,edi
c001ebf1:	66 ef                	out    dx,ax
c001ebf3:	85 c9                	test   ecx,ecx
c001ebf5:	74 05                	je     c001ebfc <Vm::faultHandler(regs*)+0x594>
c001ebf7:	83 ee 02             	sub    esi,0x2
c001ebfa:	eb 03                	jmp    c001ebff <Vm::faultHandler(regs*)+0x597>
c001ebfc:	83 c6 02             	add    esi,0x2
c001ebff:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ec05:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ec08:	e9 cb 00 00 00       	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001ec0d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ec14:	83 ec 0c             	sub    esp,0xc
c001ec17:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec1b:	50                   	push   eax
c001ec1c:	e8 42 f6 ff ff       	call   c001e263 <Vm::inbv(unsigned short)>
c001ec21:	0f b6 c0             	movzx  eax,al
c001ec24:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ec27:	eb 3f                	jmp    c001ec68 <Vm::faultHandler(regs*)+0x600>
c001ec29:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec2e:	74 07                	je     c001ec37 <Vm::faultHandler(regs*)+0x5cf>
c001ec30:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec34:	ed                   	in     eax,dx
c001ec35:	eb 14                	jmp    c001ec4b <Vm::faultHandler(regs*)+0x5e3>
c001ec37:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ec3a:	66 31 f6             	xor    si,si
c001ec3d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ec40:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec44:	66 ed                	in     ax,dx
c001ec46:	0f b7 c0             	movzx  eax,ax
c001ec49:	09 f0                	or     eax,esi
c001ec4b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ec4e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ec52:	e9 84 00 00 00       	jmp    c001ecdb <Vm::faultHandler(regs*)+0x673>
c001ec57:	52                   	push   edx
c001ec58:	52                   	push   edx
c001ec59:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ec5d:	50                   	push   eax
c001ec5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec62:	50                   	push   eax
c001ec63:	e8 0e f6 ff ff       	call   c001e276 <Vm::outbv(unsigned short, unsigned char)>
c001ec68:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ec6c:	eb 53                	jmp    c001ecc1 <Vm::faultHandler(regs*)+0x659>
c001ec6e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ec71:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec75:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec7a:	74 03                	je     c001ec7f <Vm::faultHandler(regs*)+0x617>
c001ec7c:	ef                   	out    dx,eax
c001ec7d:	eb cf                	jmp    c001ec4e <Vm::faultHandler(regs*)+0x5e6>
c001ec7f:	66 ef                	out    dx,ax
c001ec81:	eb cb                	jmp    c001ec4e <Vm::faultHandler(regs*)+0x5e6>
c001ec83:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ec8a:	83 ec 0c             	sub    esp,0xc
c001ec8d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ec91:	50                   	push   eax
c001ec92:	e8 cc f5 ff ff       	call   c001e263 <Vm::inbv(unsigned short)>
c001ec97:	0f b6 c0             	movzx  eax,al
c001ec9a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ec9d:	eb 1f                	jmp    c001ecbe <Vm::faultHandler(regs*)+0x656>
c001ec9f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eca2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eca7:	74 03                	je     c001ecac <Vm::faultHandler(regs*)+0x644>
c001eca9:	ed                   	in     eax,dx
c001ecaa:	eb 0d                	jmp    c001ecb9 <Vm::faultHandler(regs*)+0x651>
c001ecac:	66 ed                	in     ax,dx
c001ecae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ecb1:	0f b7 c0             	movzx  eax,ax
c001ecb4:	66 31 d2             	xor    dx,dx
c001ecb7:	09 d0                	or     eax,edx
c001ecb9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ecbc:	eb 1a                	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001ecbe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ecc1:	83 c4 10             	add    esp,0x10
c001ecc4:	eb 15                	jmp    c001ecdb <Vm::faultHandler(regs*)+0x673>
c001ecc6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ecc9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eccc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecd1:	74 03                	je     c001ecd6 <Vm::faultHandler(regs*)+0x66e>
c001ecd3:	ef                   	out    dx,eax
c001ecd4:	eb 02                	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x670>
c001ecd6:	66 ef                	out    dx,ax
c001ecd8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ecdb:	b0 01                	mov    al,0x1
c001ecdd:	eb 56                	jmp    c001ed35 <Vm::faultHandler(regs*)+0x6cd>
c001ecdf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ece3:	50                   	push   eax
c001ece4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ece8:	50                   	push   eax
c001ece9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eced:	50                   	push   eax
c001ecee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecf2:	50                   	push   eax
c001ecf3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecf7:	50                   	push   eax
c001ecf8:	52                   	push   edx
c001ecf9:	52                   	push   edx
c001ecfa:	68 37 b9 02 c0       	push   0xc002b937
c001ecff:	e8 07 38 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001ed04:	83 c4 20             	add    esp,0x20
c001ed07:	83 ec 0c             	sub    esp,0xc
c001ed0a:	6a 60                	push   0x60
c001ed0c:	e8 52 f5 ff ff       	call   c001e263 <Vm::inbv(unsigned short)>
c001ed11:	83 c4 10             	add    esp,0x10
c001ed14:	3c 1c                	cmp    al,0x1c
c001ed16:	74 04                	je     c001ed1c <Vm::faultHandler(regs*)+0x6b4>
c001ed18:	3c 5a                	cmp    al,0x5a
c001ed1a:	75 eb                	jne    c001ed07 <Vm::faultHandler(regs*)+0x69f>
c001ed1c:	3c 5a                	cmp    al,0x5a
c001ed1e:	74 04                	je     c001ed24 <Vm::faultHandler(regs*)+0x6bc>
c001ed20:	3c 1c                	cmp    al,0x1c
c001ed22:	75 0f                	jne    c001ed33 <Vm::faultHandler(regs*)+0x6cb>
c001ed24:	83 ec 0c             	sub    esp,0xc
c001ed27:	6a 60                	push   0x60
c001ed29:	e8 35 f5 ff ff       	call   c001e263 <Vm::inbv(unsigned short)>
c001ed2e:	83 c4 10             	add    esp,0x10
c001ed31:	eb e9                	jmp    c001ed1c <Vm::faultHandler(regs*)+0x6b4>
c001ed33:	31 c0                	xor    eax,eax
c001ed35:	83 c4 1c             	add    esp,0x1c
c001ed38:	5b                   	pop    ebx
c001ed39:	5e                   	pop    esi
c001ed3a:	5f                   	pop    edi
c001ed3b:	5d                   	pop    ebp
c001ed3c:	c3                   	ret    

c001ed3d <Vm::fpuInternalTo32(unsigned long long)>:
c001ed3d:	57                   	push   edi
c001ed3e:	56                   	push   esi
c001ed3f:	53                   	push   ebx
c001ed40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed48:	89 d6                	mov    esi,edx
c001ed4a:	89 d7                	mov    edi,edx
c001ed4c:	89 c1                	mov    ecx,eax
c001ed4e:	c1 ef 14             	shr    edi,0x14
c001ed51:	89 d3                	mov    ebx,edx
c001ed53:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ed59:	31 d2                	xor    edx,edx
c001ed5b:	89 f8                	mov    eax,edi
c001ed5d:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ed63:	bf ff 00 00 00       	mov    edi,0xff
c001ed68:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ed6d:	83 d2 ff             	adc    edx,0xffffffff
c001ed70:	39 c7                	cmp    edi,eax
c001ed72:	bf 00 00 00 00       	mov    edi,0x0
c001ed77:	19 d7                	sbb    edi,edx
c001ed79:	72 15                	jb     c001ed90 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ed7b:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ed7f:	c1 e0 17             	shl    eax,0x17
c001ed82:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ed88:	09 f1                	or     ecx,esi
c001ed8a:	09 c1                	or     ecx,eax
c001ed8c:	89 cf                	mov    edi,ecx
c001ed8e:	eb 02                	jmp    c001ed92 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ed90:	31 ff                	xor    edi,edi
c001ed92:	89 f8                	mov    eax,edi
c001ed94:	5b                   	pop    ebx
c001ed95:	5e                   	pop    esi
c001ed96:	5f                   	pop    edi
c001ed97:	c3                   	ret    

c001ed98 <Vm::fpuInternalTo64(unsigned long long)>:
c001ed98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eda0:	c3                   	ret    

c001eda1 <Vm::fpu32ToInternal(unsigned int)>:
c001eda1:	57                   	push   edi
c001eda2:	31 ff                	xor    edi,edi
c001eda4:	56                   	push   esi
c001eda5:	53                   	push   ebx
c001eda6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edaa:	89 cb                	mov    ebx,ecx
c001edac:	89 ce                	mov    esi,ecx
c001edae:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001edb4:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001edba:	c1 e9 17             	shr    ecx,0x17
c001edbd:	89 f0                	mov    eax,esi
c001edbf:	0f b6 d1             	movzx  edx,cl
c001edc2:	81 c2 80 03 00 00    	add    edx,0x380
c001edc8:	89 d1                	mov    ecx,edx
c001edca:	89 fa                	mov    edx,edi
c001edcc:	c1 e1 14             	shl    ecx,0x14
c001edcf:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001edd3:	c1 e0 1d             	shl    eax,0x1d
c001edd6:	89 d7                	mov    edi,edx
c001edd8:	89 c6                	mov    esi,eax
c001edda:	89 ca                	mov    edx,ecx
c001eddc:	89 f0                	mov    eax,esi
c001edde:	09 fa                	or     edx,edi
c001ede0:	09 da                	or     edx,ebx
c001ede2:	5b                   	pop    ebx
c001ede3:	5e                   	pop    esi
c001ede4:	5f                   	pop    edi
c001ede5:	c3                   	ret    

c001ede6 <Vm::fpu64ToInternal(unsigned long long)>:
c001ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001edee:	c3                   	ret    

c001edef <Vm::fpuFloatToLong(unsigned long long)>:
c001edef:	57                   	push   edi
c001edf0:	31 c0                	xor    eax,eax
c001edf2:	56                   	push   esi
c001edf3:	31 d2                	xor    edx,edx
c001edf5:	53                   	push   ebx
c001edf6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edfa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001edfe:	89 d9                	mov    ecx,ebx
c001ee00:	c1 e9 14             	shr    ecx,0x14
c001ee03:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ee09:	89 cf                	mov    edi,ecx
c001ee0b:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ee11:	78 33                	js     c001ee46 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee13:	89 d9                	mov    ecx,ebx
c001ee15:	89 f0                	mov    eax,esi
c001ee17:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ee1d:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ee23:	89 ca                	mov    edx,ecx
c001ee25:	b9 34 00 00 00       	mov    ecx,0x34
c001ee2a:	29 f9                	sub    ecx,edi
c001ee2c:	0f ad d0             	shrd   eax,edx,cl
c001ee2f:	d3 fa                	sar    edx,cl
c001ee31:	f6 c1 20             	test   cl,0x20
c001ee34:	74 05                	je     c001ee3b <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ee36:	89 d0                	mov    eax,edx
c001ee38:	c1 fa 1f             	sar    edx,0x1f
c001ee3b:	85 db                	test   ebx,ebx
c001ee3d:	79 07                	jns    c001ee46 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee3f:	f7 d8                	neg    eax
c001ee41:	83 d2 00             	adc    edx,0x0
c001ee44:	f7 da                	neg    edx
c001ee46:	5b                   	pop    ebx
c001ee47:	5e                   	pop    esi
c001ee48:	5f                   	pop    edi
c001ee49:	c3                   	ret    

c001ee4a <Vm::fpuULongToFloat(unsigned long long)>:
c001ee4a:	57                   	push   edi
c001ee4b:	31 c9                	xor    ecx,ecx
c001ee4d:	56                   	push   esi
c001ee4e:	53                   	push   ebx
c001ee4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ee57:	0f ba e7 14          	bt     edi,0x14
c001ee5b:	72 07                	jb     c001ee64 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ee5d:	01 f6                	add    esi,esi
c001ee5f:	11 ff                	adc    edi,edi
c001ee61:	41                   	inc    ecx
c001ee62:	eb f3                	jmp    c001ee57 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ee64:	89 fa                	mov    edx,edi
c001ee66:	89 f0                	mov    eax,esi
c001ee68:	bb 33 04 00 00       	mov    ebx,0x433
c001ee6d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ee73:	29 cb                	sub    ebx,ecx
c001ee75:	89 d9                	mov    ecx,ebx
c001ee77:	5b                   	pop    ebx
c001ee78:	c1 e1 14             	shl    ecx,0x14
c001ee7b:	5e                   	pop    esi
c001ee7c:	09 ca                	or     edx,ecx
c001ee7e:	5f                   	pop    edi
c001ee7f:	c3                   	ret    

c001ee80 <Vm::fpuLongToFloat(long long)>:
c001ee80:	56                   	push   esi
c001ee81:	31 c0                	xor    eax,eax
c001ee83:	53                   	push   ebx
c001ee84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ee8c:	39 c8                	cmp    eax,ecx
c001ee8e:	19 d8                	sbb    eax,ebx
c001ee90:	7d 04                	jge    c001ee96 <Vm::fpuLongToFloat(long long)+0x16>
c001ee92:	31 f6                	xor    esi,esi
c001ee94:	eb 0c                	jmp    c001eea2 <Vm::fpuLongToFloat(long long)+0x22>
c001ee96:	f7 d9                	neg    ecx
c001ee98:	be 01 00 00 00       	mov    esi,0x1
c001ee9d:	83 d3 00             	adc    ebx,0x0
c001eea0:	f7 db                	neg    ebx
c001eea2:	31 c0                	xor    eax,eax
c001eea4:	0f ba e3 14          	bt     ebx,0x14
c001eea8:	72 07                	jb     c001eeb1 <Vm::fpuLongToFloat(long long)+0x31>
c001eeaa:	01 c9                	add    ecx,ecx
c001eeac:	11 db                	adc    ebx,ebx
c001eeae:	40                   	inc    eax
c001eeaf:	eb f3                	jmp    c001eea4 <Vm::fpuLongToFloat(long long)+0x24>
c001eeb1:	ba 33 04 00 00       	mov    edx,0x433
c001eeb6:	29 c2                	sub    edx,eax
c001eeb8:	89 c8                	mov    eax,ecx
c001eeba:	c1 e2 14             	shl    edx,0x14
c001eebd:	89 d9                	mov    ecx,ebx
c001eebf:	89 f3                	mov    ebx,esi
c001eec1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eec7:	09 ca                	or     edx,ecx
c001eec9:	84 db                	test   bl,bl
c001eecb:	74 06                	je     c001eed3 <Vm::fpuLongToFloat(long long)+0x53>
c001eecd:	81 ca 00 00 00 80    	or     edx,0x80000000
c001eed3:	5b                   	pop    ebx
c001eed4:	5e                   	pop    esi
c001eed5:	c3                   	ret    

c001eed6 <Vm::fpuGet0()>:
c001eed6:	31 c0                	xor    eax,eax
c001eed8:	31 d2                	xor    edx,edx
c001eeda:	c3                   	ret    

c001eedb <Vm::fpuGet1()>:
c001eedb:	b8 01 00 00 00       	mov    eax,0x1
c001eee0:	31 d2                	xor    edx,edx
c001eee2:	c3                   	ret    

c001eee3 <Vm::fpuGetPi()>:
c001eee3:	b8 03 00 00 00       	mov    eax,0x3
c001eee8:	31 d2                	xor    edx,edx
c001eeea:	c3                   	ret    

c001eeeb <Vm::fpuGetLog2E()>:
c001eeeb:	83 ec 18             	sub    esp,0x18
c001eeee:	68 94 b9 02 c0       	push   0xc002b994
c001eef3:	e8 4d ad ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001eef8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eefd:	31 d2                	xor    edx,edx
c001eeff:	83 c4 1c             	add    esp,0x1c
c001ef02:	c3                   	ret    

c001ef03 <Vm::fpuGetLogE2()>:
c001ef03:	83 ec 18             	sub    esp,0x18
c001ef06:	68 a0 b9 02 c0       	push   0xc002b9a0
c001ef0b:	e8 35 ad ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001ef10:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef15:	31 d2                	xor    edx,edx
c001ef17:	83 c4 1c             	add    esp,0x1c
c001ef1a:	c3                   	ret    

c001ef1b <Vm::fpuGetLog210()>:
c001ef1b:	83 ec 18             	sub    esp,0x18
c001ef1e:	68 ac b9 02 c0       	push   0xc002b9ac
c001ef23:	e8 1d ad ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001ef28:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef2d:	31 d2                	xor    edx,edx
c001ef2f:	83 c4 1c             	add    esp,0x1c
c001ef32:	c3                   	ret    

c001ef33 <Vm::fpuGetLog102()>:
c001ef33:	83 ec 18             	sub    esp,0x18
c001ef36:	68 b9 b9 02 c0       	push   0xc002b9b9
c001ef3b:	e8 05 ad ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001ef40:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef45:	31 d2                	xor    edx,edx
c001ef47:	83 c4 1c             	add    esp,0x1c
c001ef4a:	c3                   	ret    

c001ef4b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ef4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef4f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ef53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef57:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ef5b:	0f 92 c0             	setb   al
c001ef5e:	c3                   	ret    

c001ef5f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ef5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef67:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ef6b:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ef6f:	09 c2                	or     edx,eax
c001ef71:	0f 94 c0             	sete   al
c001ef74:	c3                   	ret    

c001ef75 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ef75:	57                   	push   edi
c001ef76:	56                   	push   esi
c001ef77:	53                   	push   ebx
c001ef78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef7c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef80:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef84:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef88:	57                   	push   edi
c001ef89:	56                   	push   esi
c001ef8a:	53                   	push   ebx
c001ef8b:	51                   	push   ecx
c001ef8c:	e8 ce ff ff ff       	call   c001ef5f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ef91:	83 c4 10             	add    esp,0x10
c001ef94:	88 c2                	mov    dl,al
c001ef96:	31 c0                	xor    eax,eax
c001ef98:	84 d2                	test   dl,dl
c001ef9a:	75 0c                	jne    c001efa8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ef9c:	57                   	push   edi
c001ef9d:	56                   	push   esi
c001ef9e:	53                   	push   ebx
c001ef9f:	51                   	push   ecx
c001efa0:	e8 a6 ff ff ff       	call   c001ef4b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001efa5:	83 c4 10             	add    esp,0x10
c001efa8:	83 e0 01             	and    eax,0x1
c001efab:	5b                   	pop    ebx
c001efac:	88 c1                	mov    cl,al
c001efae:	83 e2 01             	and    edx,0x1
c001efb1:	a0 41 0b 03 c0       	mov    al,ds:0xc0030b41
c001efb6:	c1 e2 06             	shl    edx,0x6
c001efb9:	83 e0 ba             	and    eax,0xffffffba
c001efbc:	5e                   	pop    esi
c001efbd:	09 c8                	or     eax,ecx
c001efbf:	5f                   	pop    edi
c001efc0:	09 d0                	or     eax,edx
c001efc2:	a2 41 0b 03 c0       	mov    ds:0xc0030b41,al
c001efc7:	c3                   	ret    

c001efc8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001efc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efd0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001efd4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001efd8:	c3                   	ret    

c001efd9 <Vm::fpuAbs(unsigned long long)>:
c001efd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efe1:	c3                   	ret    

c001efe2 <Vm::fpuChs(unsigned long long)>:
c001efe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efea:	f7 d8                	neg    eax
c001efec:	83 d2 00             	adc    edx,0x0
c001efef:	f7 da                	neg    edx
c001eff1:	c3                   	ret    

c001eff2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001eff2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001eff6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001effb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001efff:	eb c7                	jmp    c001efc8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f001 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f001:	53                   	push   ebx
c001f002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f006:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f00a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f00e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f012:	0f af ca             	imul   ecx,edx
c001f015:	0f af d8             	imul   ebx,eax
c001f018:	f7 e2                	mul    edx
c001f01a:	01 d9                	add    ecx,ebx
c001f01c:	5b                   	pop    ebx
c001f01d:	01 ca                	add    edx,ecx
c001f01f:	c3                   	ret    

c001f020 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f020:	83 ec 0c             	sub    esp,0xc
c001f023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f02f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f033:	e8 dc 74 00 00       	call   c0026514 <__udivdi3>
c001f038:	83 c4 1c             	add    esp,0x1c
c001f03b:	c3                   	ret    

c001f03c <Vm::fpuSquare(unsigned long long)>:
c001f03c:	50                   	push   eax
c001f03d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f041:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f045:	52                   	push   edx
c001f046:	50                   	push   eax
c001f047:	52                   	push   edx
c001f048:	50                   	push   eax
c001f049:	e8 b3 ff ff ff       	call   c001f001 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f04e:	83 c4 14             	add    esp,0x14
c001f051:	c3                   	ret    

c001f052 <Vm::fpuGetReg(int)>:
c001f052:	83 ec 0c             	sub    esp,0xc
c001f055:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f05a:	76 10                	jbe    c001f06c <Vm::fpuGetReg(int)+0x1a>
c001f05c:	83 ec 0c             	sub    esp,0xc
c001f05f:	68 c6 b9 02 c0       	push   0xc002b9c6
c001f064:	e8 dc ab ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001f069:	83 c4 10             	add    esp,0x10
c001f06c:	a0 41 0b 03 c0       	mov    al,ds:0xc0030b41
c001f071:	b9 08 00 00 00       	mov    ecx,0x8
c001f076:	c0 e8 03             	shr    al,0x3
c001f079:	83 e0 07             	and    eax,0x7
c001f07c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f080:	99                   	cdq    
c001f081:	f7 f9                	idiv   ecx
c001f083:	8b 04 d5 44 0b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf4bc]
c001f08a:	8b 14 d5 48 0b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf4b8]
c001f091:	83 c4 0c             	add    esp,0xc
c001f094:	c3                   	ret    

c001f095 <Vm::fpuSetReg(int, unsigned long long)>:
c001f095:	57                   	push   edi
c001f096:	56                   	push   esi
c001f097:	52                   	push   edx
c001f098:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f09c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f0a0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f0a5:	76 10                	jbe    c001f0b7 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f0a7:	83 ec 0c             	sub    esp,0xc
c001f0aa:	68 d9 b9 02 c0       	push   0xc002b9d9
c001f0af:	e8 91 ab ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c001f0b4:	83 c4 10             	add    esp,0x10
c001f0b7:	a0 41 0b 03 c0       	mov    al,ds:0xc0030b41
c001f0bc:	b9 08 00 00 00       	mov    ecx,0x8
c001f0c1:	c0 e8 03             	shr    al,0x3
c001f0c4:	83 e0 07             	and    eax,0x7
c001f0c7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f0cb:	99                   	cdq    
c001f0cc:	f7 f9                	idiv   ecx
c001f0ce:	89 34 d5 44 0b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf4bc],esi
c001f0d5:	89 3c d5 48 0b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf4b8],edi
c001f0dc:	58                   	pop    eax
c001f0dd:	5e                   	pop    esi
c001f0de:	5f                   	pop    edi
c001f0df:	c3                   	ret    

c001f0e0 <Vm::fpuPush(unsigned long long)>:
c001f0e0:	a0 41 0b 03 c0       	mov    al,ds:0xc0030b41
c001f0e5:	c0 e8 03             	shr    al,0x3
c001f0e8:	83 e0 07             	and    eax,0x7
c001f0eb:	83 c0 07             	add    eax,0x7
c001f0ee:	88 c2                	mov    dl,al
c001f0f0:	83 e0 07             	and    eax,0x7
c001f0f3:	83 e2 07             	and    edx,0x7
c001f0f6:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f0fd:	8a 15 41 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030b41
c001f103:	83 e2 c7             	and    edx,0xffffffc7
c001f106:	09 ca                	or     edx,ecx
c001f108:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f10c:	88 15 41 0b 03 c0    	mov    BYTE PTR ds:0xc0030b41,dl
c001f112:	89 0c c5 48 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4b8],ecx
c001f119:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f11d:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c001f124:	a1 84 0b 03 c0       	mov    eax,ds:0xc0030b84
c001f129:	83 f8 08             	cmp    eax,0x8
c001f12c:	75 08                	jne    c001f136 <Vm::fpuPush(unsigned long long)+0x56>
c001f12e:	80 0d 40 0b 03 c0 40 	or     BYTE PTR ds:0xc0030b40,0x40
c001f135:	c3                   	ret    
c001f136:	40                   	inc    eax
c001f137:	a3 84 0b 03 c0       	mov    ds:0xc0030b84,eax
c001f13c:	c3                   	ret    

c001f13d <Vm::fpuPop()>:
c001f13d:	8a 0d 41 0b 03 c0    	mov    cl,BYTE PTR ds:0xc0030b41
c001f143:	53                   	push   ebx
c001f144:	c0 e9 03             	shr    cl,0x3
c001f147:	8a 1d 41 0b 03 c0    	mov    bl,BYTE PTR ds:0xc0030b41
c001f14d:	83 e1 07             	and    ecx,0x7
c001f150:	83 e3 c7             	and    ebx,0xffffffc7
c001f153:	8b 04 cd 44 0b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf4bc]
c001f15a:	8b 14 cd 48 0b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf4b8]
c001f161:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f168:	83 e1 38             	and    ecx,0x38
c001f16b:	09 d9                	or     ecx,ebx
c001f16d:	88 0d 41 0b 03 c0    	mov    BYTE PTR ds:0xc0030b41,cl
c001f173:	8b 0d 84 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b84
c001f179:	85 c9                	test   ecx,ecx
c001f17b:	74 09                	je     c001f186 <Vm::fpuPop()+0x49>
c001f17d:	49                   	dec    ecx
c001f17e:	89 0d 84 0b 03 c0    	mov    DWORD PTR ds:0xc0030b84,ecx
c001f184:	eb 07                	jmp    c001f18d <Vm::fpuPop()+0x50>
c001f186:	80 0d 40 0b 03 c0 40 	or     BYTE PTR ds:0xc0030b40,0x40
c001f18d:	5b                   	pop    ebx
c001f18e:	c3                   	ret    

c001f18f <Vm::x87Handler(regs*)>:
c001f18f:	55                   	push   ebp
c001f190:	57                   	push   edi
c001f191:	56                   	push   esi
c001f192:	53                   	push   ebx
c001f193:	83 ec 1c             	sub    esp,0x1c
c001f196:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f19a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f19f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f1a2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f1aa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f1ae:	50                   	push   eax
c001f1af:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f1b3:	50                   	push   eax
c001f1b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f1b8:	50                   	push   eax
c001f1b9:	53                   	push   ebx
c001f1ba:	e8 9f a1 ff ff       	call   c001935e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f1bf:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f1c2:	83 c4 10             	add    esp,0x10
c001f1c5:	89 c6                	mov    esi,eax
c001f1c7:	80 fa d9             	cmp    dl,0xd9
c001f1ca:	0f 85 52 01 00 00    	jne    c001f322 <Vm::x87Handler(regs*)+0x193>
c001f1d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1d4:	8d 50 20             	lea    edx,[eax+0x20]
c001f1d7:	80 fa 0e             	cmp    dl,0xe
c001f1da:	0f 87 86 00 00 00    	ja     c001f266 <Vm::x87Handler(regs*)+0xd7>
c001f1e0:	0f b6 d2             	movzx  edx,dl
c001f1e3:	ff 24 95 ec b9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4614]
c001f1ea:	e8 e7 fc ff ff       	call   c001eed6 <Vm::fpuGet0()>
c001f1ef:	eb 05                	jmp    c001f1f6 <Vm::x87Handler(regs*)+0x67>
c001f1f1:	e8 e5 fc ff ff       	call   c001eedb <Vm::fpuGet1()>
c001f1f6:	57                   	push   edi
c001f1f7:	57                   	push   edi
c001f1f8:	52                   	push   edx
c001f1f9:	50                   	push   eax
c001f1fa:	e8 e1 fe ff ff       	call   c001f0e0 <Vm::fpuPush(unsigned long long)>
c001f1ff:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f203:	83 c4 10             	add    esp,0x10
c001f206:	b0 01                	mov    al,0x1
c001f208:	e9 e3 09 00 00       	jmp    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001f20d:	83 ec 0c             	sub    esp,0xc
c001f210:	6a 00                	push   0x0
c001f212:	e8 3b fe ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f217:	59                   	pop    ecx
c001f218:	5e                   	pop    esi
c001f219:	52                   	push   edx
c001f21a:	50                   	push   eax
c001f21b:	e8 c2 fd ff ff       	call   c001efe2 <Vm::fpuChs(unsigned long long)>
c001f220:	eb 13                	jmp    c001f235 <Vm::x87Handler(regs*)+0xa6>
c001f222:	83 ec 0c             	sub    esp,0xc
c001f225:	6a 00                	push   0x0
c001f227:	e8 26 fe ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f22c:	5f                   	pop    edi
c001f22d:	5d                   	pop    ebp
c001f22e:	52                   	push   edx
c001f22f:	50                   	push   eax
c001f230:	e8 a4 fd ff ff       	call   c001efd9 <Vm::fpuAbs(unsigned long long)>
c001f235:	83 c4 0c             	add    esp,0xc
c001f238:	52                   	push   edx
c001f239:	50                   	push   eax
c001f23a:	6a 00                	push   0x0
c001f23c:	e8 54 fe ff ff       	call   c001f095 <Vm::fpuSetReg(int, unsigned long long)>
c001f241:	eb bc                	jmp    c001f1ff <Vm::x87Handler(regs*)+0x70>
c001f243:	e8 d3 fc ff ff       	call   c001ef1b <Vm::fpuGetLog210()>
c001f248:	eb ac                	jmp    c001f1f6 <Vm::x87Handler(regs*)+0x67>
c001f24a:	e8 9c fc ff ff       	call   c001eeeb <Vm::fpuGetLog2E()>
c001f24f:	eb a5                	jmp    c001f1f6 <Vm::x87Handler(regs*)+0x67>
c001f251:	e8 8d fc ff ff       	call   c001eee3 <Vm::fpuGetPi()>
c001f256:	eb 9e                	jmp    c001f1f6 <Vm::x87Handler(regs*)+0x67>
c001f258:	e8 d6 fc ff ff       	call   c001ef33 <Vm::fpuGetLog102()>
c001f25d:	eb 97                	jmp    c001f1f6 <Vm::x87Handler(regs*)+0x67>
c001f25f:	e8 9f fc ff ff       	call   c001ef03 <Vm::fpuGetLogE2()>
c001f264:	eb 90                	jmp    c001f1f6 <Vm::x87Handler(regs*)+0x67>
c001f266:	8d 50 40             	lea    edx,[eax+0x40]
c001f269:	80 fa 07             	cmp    dl,0x7
c001f26c:	77 15                	ja     c001f283 <Vm::x87Handler(regs*)+0xf4>
c001f26e:	83 ec 0c             	sub    esp,0xc
c001f271:	2d c0 00 00 00       	sub    eax,0xc0
c001f276:	50                   	push   eax
c001f277:	e8 d6 fd ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f27c:	59                   	pop    ecx
c001f27d:	5e                   	pop    esi
c001f27e:	e9 75 ff ff ff       	jmp    c001f1f8 <Vm::x87Handler(regs*)+0x69>
c001f283:	8d 50 38             	lea    edx,[eax+0x38]
c001f286:	80 fa 07             	cmp    dl,0x7
c001f289:	77 3c                	ja     c001f2c7 <Vm::x87Handler(regs*)+0x138>
c001f28b:	83 ec 0c             	sub    esp,0xc
c001f28e:	2d c8 00 00 00       	sub    eax,0xc8
c001f293:	50                   	push   eax
c001f294:	e8 b9 fd ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f299:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2a0:	89 c6                	mov    esi,eax
c001f2a2:	89 d7                	mov    edi,edx
c001f2a4:	e8 a9 fd ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f2a9:	83 c4 0c             	add    esp,0xc
c001f2ac:	52                   	push   edx
c001f2ad:	50                   	push   eax
c001f2ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2b2:	2d c8 00 00 00       	sub    eax,0xc8
c001f2b7:	50                   	push   eax
c001f2b8:	e8 d8 fd ff ff       	call   c001f095 <Vm::fpuSetReg(int, unsigned long long)>
c001f2bd:	83 c4 0c             	add    esp,0xc
c001f2c0:	57                   	push   edi
c001f2c1:	56                   	push   esi
c001f2c2:	e9 73 ff ff ff       	jmp    c001f23a <Vm::x87Handler(regs*)+0xab>
c001f2c7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f2cb:	84 d2                	test   dl,dl
c001f2cd:	75 0f                	jne    c001f2de <Vm::x87Handler(regs*)+0x14f>
c001f2cf:	83 ec 0c             	sub    esp,0xc
c001f2d2:	ff 36                	push   DWORD PTR [esi]
c001f2d4:	e8 c8 fa ff ff       	call   c001eda1 <Vm::fpu32ToInternal(unsigned int)>
c001f2d9:	e9 bf 00 00 00       	jmp    c001f39d <Vm::x87Handler(regs*)+0x20e>
c001f2de:	80 fa 03             	cmp    dl,0x3
c001f2e1:	75 13                	jne    c001f2f6 <Vm::x87Handler(regs*)+0x167>
c001f2e3:	e8 55 fe ff ff       	call   c001f13d <Vm::fpuPop()>
c001f2e8:	55                   	push   ebp
c001f2e9:	55                   	push   ebp
c001f2ea:	52                   	push   edx
c001f2eb:	50                   	push   eax
c001f2ec:	e8 4c fa ff ff       	call   c001ed3d <Vm::fpuInternalTo32(unsigned long long)>
c001f2f1:	e9 88 00 00 00       	jmp    c001f37e <Vm::x87Handler(regs*)+0x1ef>
c001f2f6:	80 fa 05             	cmp    dl,0x5
c001f2f9:	75 0e                	jne    c001f309 <Vm::x87Handler(regs*)+0x17a>
c001f2fb:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f2fe:	66 a3 42 0b 03 c0    	mov    ds:0xc0030b42,ax
c001f304:	e9 df 00 00 00       	jmp    c001f3e8 <Vm::x87Handler(regs*)+0x259>
c001f309:	31 c0                	xor    eax,eax
c001f30b:	80 fa 07             	cmp    dl,0x7
c001f30e:	0f 85 dc 08 00 00    	jne    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001f314:	66 a1 42 0b 03 c0    	mov    ax,ds:0xc0030b42
c001f31a:	66 89 06             	mov    WORD PTR [esi],ax
c001f31d:	e9 c6 00 00 00       	jmp    c001f3e8 <Vm::x87Handler(regs*)+0x259>
c001f322:	80 fa d8             	cmp    dl,0xd8
c001f325:	0f 84 c9 00 00 00    	je     c001f3f4 <Vm::x87Handler(regs*)+0x265>
c001f32b:	80 fa dc             	cmp    dl,0xdc
c001f32e:	0f 84 0d 02 00 00    	je     c001f541 <Vm::x87Handler(regs*)+0x3b2>
c001f334:	80 fa de             	cmp    dl,0xde
c001f337:	0f 84 cd 02 00 00    	je     c001f60a <Vm::x87Handler(regs*)+0x47b>
c001f33d:	80 fa dd             	cmp    dl,0xdd
c001f340:	0f 84 5f 04 00 00    	je     c001f7a5 <Vm::x87Handler(regs*)+0x616>
c001f346:	80 fa da             	cmp    dl,0xda
c001f349:	0f 84 24 05 00 00    	je     c001f873 <Vm::x87Handler(regs*)+0x6e4>
c001f34f:	80 fa df             	cmp    dl,0xdf
c001f352:	0f 84 68 05 00 00    	je     c001f8c0 <Vm::x87Handler(regs*)+0x731>
c001f358:	31 c0                	xor    eax,eax
c001f35a:	80 fa db             	cmp    dl,0xdb
c001f35d:	0f 85 8d 08 00 00    	jne    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001f363:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f367:	80 fa 03             	cmp    dl,0x3
c001f36a:	0f 85 70 06 00 00    	jne    c001f9e0 <Vm::x87Handler(regs*)+0x851>
c001f370:	e8 c8 fd ff ff       	call   c001f13d <Vm::fpuPop()>
c001f375:	55                   	push   ebp
c001f376:	55                   	push   ebp
c001f377:	52                   	push   edx
c001f378:	50                   	push   eax
c001f379:	e8 71 fa ff ff       	call   c001edef <Vm::fpuFloatToLong(unsigned long long)>
c001f37e:	83 c4 10             	add    esp,0x10
c001f381:	89 06                	mov    DWORD PTR [esi],eax
c001f383:	eb 63                	jmp    c001f3e8 <Vm::x87Handler(regs*)+0x259>
c001f385:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f389:	84 d2                	test   dl,dl
c001f38b:	0f 85 e6 05 00 00    	jne    c001f977 <Vm::x87Handler(regs*)+0x7e8>
c001f391:	57                   	push   edi
c001f392:	57                   	push   edi
c001f393:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f396:	ff 36                	push   DWORD PTR [esi]
c001f398:	e8 49 fa ff ff       	call   c001ede6 <Vm::fpu64ToInternal(unsigned long long)>
c001f39d:	5e                   	pop    esi
c001f39e:	5f                   	pop    edi
c001f39f:	52                   	push   edx
c001f3a0:	50                   	push   eax
c001f3a1:	e8 3a fd ff ff       	call   c001f0e0 <Vm::fpuPush(unsigned long long)>
c001f3a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f3aa:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f3ad:	e9 51 fe ff ff       	jmp    c001f203 <Vm::x87Handler(regs*)+0x74>
c001f3b2:	80 fa 03             	cmp    dl,0x3
c001f3b5:	0f 85 d7 06 00 00    	jne    c001fa92 <Vm::x87Handler(regs*)+0x903>
c001f3bb:	57                   	push   edi
c001f3bc:	57                   	push   edi
c001f3bd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3c0:	ff 36                	push   DWORD PTR [esi]
c001f3c2:	e8 1f fa ff ff       	call   c001ede6 <Vm::fpu64ToInternal(unsigned long long)>
c001f3c7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3ce:	89 c6                	mov    esi,eax
c001f3d0:	89 d7                	mov    edi,edx
c001f3d2:	e8 7b fc ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f3d7:	57                   	push   edi
c001f3d8:	56                   	push   esi
c001f3d9:	52                   	push   edx
c001f3da:	50                   	push   eax
c001f3db:	e8 95 fb ff ff       	call   c001ef75 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f3e0:	83 c4 20             	add    esp,0x20
c001f3e3:	e8 55 fd ff ff       	call   c001f13d <Vm::fpuPop()>
c001f3e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3ec:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f3ef:	e9 12 fe ff ff       	jmp    c001f206 <Vm::x87Handler(regs*)+0x77>
c001f3f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3f8:	8d 50 40             	lea    edx,[eax+0x40]
c001f3fb:	80 fa 07             	cmp    dl,0x7
c001f3fe:	77 29                	ja     c001f429 <Vm::x87Handler(regs*)+0x29a>
c001f400:	83 ec 0c             	sub    esp,0xc
c001f403:	2d c0 00 00 00       	sub    eax,0xc0
c001f408:	50                   	push   eax
c001f409:	e8 44 fc ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f40e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f415:	89 c6                	mov    esi,eax
c001f417:	89 d7                	mov    edi,edx
c001f419:	e8 34 fc ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f41e:	57                   	push   edi
c001f41f:	56                   	push   esi
c001f420:	52                   	push   edx
c001f421:	50                   	push   eax
c001f422:	e8 a1 fb ff ff       	call   c001efc8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f427:	eb 2f                	jmp    c001f458 <Vm::x87Handler(regs*)+0x2c9>
c001f429:	8d 50 38             	lea    edx,[eax+0x38]
c001f42c:	80 fa 07             	cmp    dl,0x7
c001f42f:	77 2f                	ja     c001f460 <Vm::x87Handler(regs*)+0x2d1>
c001f431:	83 ec 0c             	sub    esp,0xc
c001f434:	2d c8 00 00 00       	sub    eax,0xc8
c001f439:	50                   	push   eax
c001f43a:	e8 13 fc ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f43f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f446:	89 c6                	mov    esi,eax
c001f448:	89 d7                	mov    edi,edx
c001f44a:	e8 03 fc ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f44f:	57                   	push   edi
c001f450:	56                   	push   esi
c001f451:	52                   	push   edx
c001f452:	50                   	push   eax
c001f453:	e8 a9 fb ff ff       	call   c001f001 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f458:	83 c4 1c             	add    esp,0x1c
c001f45b:	e9 d8 fd ff ff       	jmp    c001f238 <Vm::x87Handler(regs*)+0xa9>
c001f460:	8d 50 30             	lea    edx,[eax+0x30]
c001f463:	80 fa 07             	cmp    dl,0x7
c001f466:	77 0d                	ja     c001f475 <Vm::x87Handler(regs*)+0x2e6>
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	2d d0 00 00 00       	sub    eax,0xd0
c001f470:	e9 99 03 00 00       	jmp    c001f80e <Vm::x87Handler(regs*)+0x67f>
c001f475:	8d 50 28             	lea    edx,[eax+0x28]
c001f478:	80 fa 07             	cmp    dl,0x7
c001f47b:	77 0d                	ja     c001f48a <Vm::x87Handler(regs*)+0x2fb>
c001f47d:	83 ec 0c             	sub    esp,0xc
c001f480:	2d d8 00 00 00       	sub    eax,0xd8
c001f485:	e9 c0 03 00 00       	jmp    c001f84a <Vm::x87Handler(regs*)+0x6bb>
c001f48a:	8d 50 20             	lea    edx,[eax+0x20]
c001f48d:	80 fa 07             	cmp    dl,0x7
c001f490:	77 1b                	ja     c001f4ad <Vm::x87Handler(regs*)+0x31e>
c001f492:	83 ec 0c             	sub    esp,0xc
c001f495:	2d e0 00 00 00       	sub    eax,0xe0
c001f49a:	50                   	push   eax
c001f49b:	e8 b2 fb ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f4a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4a7:	89 c6                	mov    esi,eax
c001f4a9:	89 d7                	mov    edi,edx
c001f4ab:	eb 22                	jmp    c001f4cf <Vm::x87Handler(regs*)+0x340>
c001f4ad:	8d 50 18             	lea    edx,[eax+0x18]
c001f4b0:	80 fa 07             	cmp    dl,0x7
c001f4b3:	77 2d                	ja     c001f4e2 <Vm::x87Handler(regs*)+0x353>
c001f4b5:	83 ec 0c             	sub    esp,0xc
c001f4b8:	6a 00                	push   0x0
c001f4ba:	e8 93 fb ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f4bf:	89 c6                	mov    esi,eax
c001f4c1:	89 d7                	mov    edi,edx
c001f4c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4c7:	2d e8 00 00 00       	sub    eax,0xe8
c001f4cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4cf:	e8 7e fb ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f4d4:	57                   	push   edi
c001f4d5:	56                   	push   esi
c001f4d6:	52                   	push   edx
c001f4d7:	50                   	push   eax
c001f4d8:	e8 15 fb ff ff       	call   c001eff2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f4dd:	e9 76 ff ff ff       	jmp    c001f458 <Vm::x87Handler(regs*)+0x2c9>
c001f4e2:	8d 50 10             	lea    edx,[eax+0x10]
c001f4e5:	80 fa 07             	cmp    dl,0x7
c001f4e8:	77 1b                	ja     c001f505 <Vm::x87Handler(regs*)+0x376>
c001f4ea:	83 ec 0c             	sub    esp,0xc
c001f4ed:	2d f0 00 00 00       	sub    eax,0xf0
c001f4f2:	50                   	push   eax
c001f4f3:	e8 5a fb ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f4f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4ff:	89 c6                	mov    esi,eax
c001f501:	89 d7                	mov    edi,edx
c001f503:	eb 22                	jmp    c001f527 <Vm::x87Handler(regs*)+0x398>
c001f505:	3c f7                	cmp    al,0xf7
c001f507:	0f 86 d1 03 00 00    	jbe    c001f8de <Vm::x87Handler(regs*)+0x74f>
c001f50d:	83 ec 0c             	sub    esp,0xc
c001f510:	6a 00                	push   0x0
c001f512:	e8 3b fb ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f517:	89 c6                	mov    esi,eax
c001f519:	89 d7                	mov    edi,edx
c001f51b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f51f:	2d f8 00 00 00       	sub    eax,0xf8
c001f524:	89 04 24             	mov    DWORD PTR [esp],eax
c001f527:	e8 26 fb ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f52c:	57                   	push   edi
c001f52d:	56                   	push   esi
c001f52e:	52                   	push   edx
c001f52f:	50                   	push   eax
c001f530:	e8 eb fa ff ff       	call   c001f020 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f535:	83 c4 1c             	add    esp,0x1c
c001f538:	52                   	push   edx
c001f539:	50                   	push   eax
c001f53a:	6a 00                	push   0x0
c001f53c:	e9 51 02 00 00       	jmp    c001f792 <Vm::x87Handler(regs*)+0x603>
c001f541:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f545:	8d 50 40             	lea    edx,[eax+0x40]
c001f548:	80 fa 07             	cmp    dl,0x7
c001f54b:	77 37                	ja     c001f584 <Vm::x87Handler(regs*)+0x3f5>
c001f54d:	83 ec 0c             	sub    esp,0xc
c001f550:	2d c0 00 00 00       	sub    eax,0xc0
c001f555:	50                   	push   eax
c001f556:	e8 f7 fa ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f55b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f562:	89 c6                	mov    esi,eax
c001f564:	89 d7                	mov    edi,edx
c001f566:	e8 e7 fa ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f56b:	57                   	push   edi
c001f56c:	56                   	push   esi
c001f56d:	52                   	push   edx
c001f56e:	50                   	push   eax
c001f56f:	e8 54 fa ff ff       	call   c001efc8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f574:	83 c4 1c             	add    esp,0x1c
c001f577:	52                   	push   edx
c001f578:	50                   	push   eax
c001f579:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f57d:	2d c0 00 00 00       	sub    eax,0xc0
c001f582:	eb 3d                	jmp    c001f5c1 <Vm::x87Handler(regs*)+0x432>
c001f584:	8d 50 38             	lea    edx,[eax+0x38]
c001f587:	80 fa 07             	cmp    dl,0x7
c001f58a:	77 3b                	ja     c001f5c7 <Vm::x87Handler(regs*)+0x438>
c001f58c:	83 ec 0c             	sub    esp,0xc
c001f58f:	2d c8 00 00 00       	sub    eax,0xc8
c001f594:	50                   	push   eax
c001f595:	e8 b8 fa ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f59a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5a1:	89 c6                	mov    esi,eax
c001f5a3:	89 d7                	mov    edi,edx
c001f5a5:	e8 a8 fa ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f5aa:	57                   	push   edi
c001f5ab:	56                   	push   esi
c001f5ac:	52                   	push   edx
c001f5ad:	50                   	push   eax
c001f5ae:	e8 4e fa ff ff       	call   c001f001 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f5b3:	83 c4 1c             	add    esp,0x1c
c001f5b6:	52                   	push   edx
c001f5b7:	50                   	push   eax
c001f5b8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5bc:	2d c8 00 00 00       	sub    eax,0xc8
c001f5c1:	50                   	push   eax
c001f5c2:	e9 75 fc ff ff       	jmp    c001f23c <Vm::x87Handler(regs*)+0xad>
c001f5c7:	83 c0 18             	add    eax,0x18
c001f5ca:	3c 07                	cmp    al,0x7
c001f5cc:	0f 87 3b 04 00 00    	ja     c001fa0d <Vm::x87Handler(regs*)+0x87e>
c001f5d2:	83 ec 0c             	sub    esp,0xc
c001f5d5:	6a 00                	push   0x0
c001f5d7:	e8 76 fa ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f5dc:	89 c6                	mov    esi,eax
c001f5de:	89 d7                	mov    edi,edx
c001f5e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5e4:	2d e8 00 00 00       	sub    eax,0xe8
c001f5e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5ec:	e8 61 fa ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f5f1:	57                   	push   edi
c001f5f2:	56                   	push   esi
c001f5f3:	52                   	push   edx
c001f5f4:	50                   	push   eax
c001f5f5:	e8 f8 f9 ff ff       	call   c001eff2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f5fa:	83 c4 1c             	add    esp,0x1c
c001f5fd:	52                   	push   edx
c001f5fe:	50                   	push   eax
c001f5ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f603:	2d e8 00 00 00       	sub    eax,0xe8
c001f608:	eb b7                	jmp    c001f5c1 <Vm::x87Handler(regs*)+0x432>
c001f60a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f60e:	8d 50 40             	lea    edx,[eax+0x40]
c001f611:	80 fa 07             	cmp    dl,0x7
c001f614:	77 3a                	ja     c001f650 <Vm::x87Handler(regs*)+0x4c1>
c001f616:	83 ec 0c             	sub    esp,0xc
c001f619:	2d c0 00 00 00       	sub    eax,0xc0
c001f61e:	50                   	push   eax
c001f61f:	e8 2e fa ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f624:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f62b:	89 c6                	mov    esi,eax
c001f62d:	89 d7                	mov    edi,edx
c001f62f:	e8 1e fa ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f634:	57                   	push   edi
c001f635:	56                   	push   esi
c001f636:	52                   	push   edx
c001f637:	50                   	push   eax
c001f638:	e8 8b f9 ff ff       	call   c001efc8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f63d:	83 c4 1c             	add    esp,0x1c
c001f640:	52                   	push   edx
c001f641:	50                   	push   eax
c001f642:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f646:	2d c0 00 00 00       	sub    eax,0xc0
c001f64b:	e9 9e 01 00 00       	jmp    c001f7ee <Vm::x87Handler(regs*)+0x65f>
c001f650:	8d 50 20             	lea    edx,[eax+0x20]
c001f653:	80 fa 07             	cmp    dl,0x7
c001f656:	77 3a                	ja     c001f692 <Vm::x87Handler(regs*)+0x503>
c001f658:	83 ec 0c             	sub    esp,0xc
c001f65b:	2d e0 00 00 00       	sub    eax,0xe0
c001f660:	50                   	push   eax
c001f661:	e8 ec f9 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f666:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f66d:	89 c6                	mov    esi,eax
c001f66f:	89 d7                	mov    edi,edx
c001f671:	e8 dc f9 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f676:	57                   	push   edi
c001f677:	56                   	push   esi
c001f678:	52                   	push   edx
c001f679:	50                   	push   eax
c001f67a:	e8 73 f9 ff ff       	call   c001eff2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f67f:	83 c4 1c             	add    esp,0x1c
c001f682:	52                   	push   edx
c001f683:	50                   	push   eax
c001f684:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f688:	2d e0 00 00 00       	sub    eax,0xe0
c001f68d:	e9 5c 01 00 00       	jmp    c001f7ee <Vm::x87Handler(regs*)+0x65f>
c001f692:	8d 50 18             	lea    edx,[eax+0x18]
c001f695:	80 fa 07             	cmp    dl,0x7
c001f698:	77 3b                	ja     c001f6d5 <Vm::x87Handler(regs*)+0x546>
c001f69a:	83 ec 0c             	sub    esp,0xc
c001f69d:	6a 00                	push   0x0
c001f69f:	e8 ae f9 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f6a4:	89 c6                	mov    esi,eax
c001f6a6:	89 d7                	mov    edi,edx
c001f6a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6ac:	2d e8 00 00 00       	sub    eax,0xe8
c001f6b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6b4:	e8 99 f9 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f6b9:	57                   	push   edi
c001f6ba:	56                   	push   esi
c001f6bb:	52                   	push   edx
c001f6bc:	50                   	push   eax
c001f6bd:	e8 30 f9 ff ff       	call   c001eff2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6c2:	83 c4 1c             	add    esp,0x1c
c001f6c5:	52                   	push   edx
c001f6c6:	50                   	push   eax
c001f6c7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6cb:	2d e8 00 00 00       	sub    eax,0xe8
c001f6d0:	e9 19 01 00 00       	jmp    c001f7ee <Vm::x87Handler(regs*)+0x65f>
c001f6d5:	8d 50 38             	lea    edx,[eax+0x38]
c001f6d8:	80 fa 07             	cmp    dl,0x7
c001f6db:	77 37                	ja     c001f714 <Vm::x87Handler(regs*)+0x585>
c001f6dd:	83 ec 0c             	sub    esp,0xc
c001f6e0:	2d c8 00 00 00       	sub    eax,0xc8
c001f6e5:	50                   	push   eax
c001f6e6:	e8 67 f9 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f6eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6f2:	89 c6                	mov    esi,eax
c001f6f4:	89 d7                	mov    edi,edx
c001f6f6:	e8 57 f9 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f6fb:	57                   	push   edi
c001f6fc:	56                   	push   esi
c001f6fd:	52                   	push   edx
c001f6fe:	50                   	push   eax
c001f6ff:	e8 fd f8 ff ff       	call   c001f001 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f704:	83 c4 1c             	add    esp,0x1c
c001f707:	52                   	push   edx
c001f708:	50                   	push   eax
c001f709:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f70d:	2d c8 00 00 00       	sub    eax,0xc8
c001f712:	eb 7d                	jmp    c001f791 <Vm::x87Handler(regs*)+0x602>
c001f714:	3c f7                	cmp    al,0xf7
c001f716:	76 38                	jbe    c001f750 <Vm::x87Handler(regs*)+0x5c1>
c001f718:	83 ec 0c             	sub    esp,0xc
c001f71b:	6a 00                	push   0x0
c001f71d:	e8 30 f9 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f722:	89 c6                	mov    esi,eax
c001f724:	89 d7                	mov    edi,edx
c001f726:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f72a:	2d f8 00 00 00       	sub    eax,0xf8
c001f72f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f732:	e8 1b f9 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f737:	57                   	push   edi
c001f738:	56                   	push   esi
c001f739:	52                   	push   edx
c001f73a:	50                   	push   eax
c001f73b:	e8 e0 f8 ff ff       	call   c001f020 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f740:	83 c4 1c             	add    esp,0x1c
c001f743:	52                   	push   edx
c001f744:	50                   	push   eax
c001f745:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f749:	2d f8 00 00 00       	sub    eax,0xf8
c001f74e:	eb 41                	jmp    c001f791 <Vm::x87Handler(regs*)+0x602>
c001f750:	8d 50 10             	lea    edx,[eax+0x10]
c001f753:	80 fa 07             	cmp    dl,0x7
c001f756:	0f 87 5a 01 00 00    	ja     c001f8b6 <Vm::x87Handler(regs*)+0x727>
c001f75c:	83 ec 0c             	sub    esp,0xc
c001f75f:	2d f0 00 00 00       	sub    eax,0xf0
c001f764:	50                   	push   eax
c001f765:	e8 e8 f8 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f76a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f771:	89 c6                	mov    esi,eax
c001f773:	89 d7                	mov    edi,edx
c001f775:	e8 d8 f8 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f77a:	57                   	push   edi
c001f77b:	56                   	push   esi
c001f77c:	52                   	push   edx
c001f77d:	50                   	push   eax
c001f77e:	e8 9d f8 ff ff       	call   c001f020 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f783:	83 c4 1c             	add    esp,0x1c
c001f786:	52                   	push   edx
c001f787:	50                   	push   eax
c001f788:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f78c:	2d f0 00 00 00       	sub    eax,0xf0
c001f791:	50                   	push   eax
c001f792:	e8 fe f8 ff ff       	call   c001f095 <Vm::fpuSetReg(int, unsigned long long)>
c001f797:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f79b:	e8 9d f9 ff ff       	call   c001f13d <Vm::fpuPop()>
c001f7a0:	e9 5e fa ff ff       	jmp    c001f203 <Vm::x87Handler(regs*)+0x74>
c001f7a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7a9:	8d 50 30             	lea    edx,[eax+0x30]
c001f7ac:	80 fa 07             	cmp    dl,0x7
c001f7af:	77 1d                	ja     c001f7ce <Vm::x87Handler(regs*)+0x63f>
c001f7b1:	83 ec 0c             	sub    esp,0xc
c001f7b4:	6a 00                	push   0x0
c001f7b6:	e8 97 f8 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f7bb:	83 c4 0c             	add    esp,0xc
c001f7be:	52                   	push   edx
c001f7bf:	50                   	push   eax
c001f7c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7c4:	2d d0 00 00 00       	sub    eax,0xd0
c001f7c9:	e9 f3 fd ff ff       	jmp    c001f5c1 <Vm::x87Handler(regs*)+0x432>
c001f7ce:	8d 50 28             	lea    edx,[eax+0x28]
c001f7d1:	80 fa 07             	cmp    dl,0x7
c001f7d4:	77 28                	ja     c001f7fe <Vm::x87Handler(regs*)+0x66f>
c001f7d6:	83 ec 0c             	sub    esp,0xc
c001f7d9:	6a 00                	push   0x0
c001f7db:	e8 72 f8 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f7e0:	83 c4 0c             	add    esp,0xc
c001f7e3:	52                   	push   edx
c001f7e4:	50                   	push   eax
c001f7e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7e9:	2d d8 00 00 00       	sub    eax,0xd8
c001f7ee:	50                   	push   eax
c001f7ef:	e8 a1 f8 ff ff       	call   c001f095 <Vm::fpuSetReg(int, unsigned long long)>
c001f7f4:	e8 44 f9 ff ff       	call   c001f13d <Vm::fpuPop()>
c001f7f9:	e9 01 fa ff ff       	jmp    c001f1ff <Vm::x87Handler(regs*)+0x70>
c001f7fe:	8d 50 20             	lea    edx,[eax+0x20]
c001f801:	80 fa 07             	cmp    dl,0x7
c001f804:	77 30                	ja     c001f836 <Vm::x87Handler(regs*)+0x6a7>
c001f806:	83 ec 0c             	sub    esp,0xc
c001f809:	2d e0 00 00 00       	sub    eax,0xe0
c001f80e:	50                   	push   eax
c001f80f:	e8 3e f8 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f814:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f81b:	89 c6                	mov    esi,eax
c001f81d:	89 d7                	mov    edi,edx
c001f81f:	e8 2e f8 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f824:	57                   	push   edi
c001f825:	56                   	push   esi
c001f826:	52                   	push   edx
c001f827:	50                   	push   eax
c001f828:	e8 48 f7 ff ff       	call   c001ef75 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f82d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f831:	e9 54 02 00 00       	jmp    c001fa8a <Vm::x87Handler(regs*)+0x8fb>
c001f836:	8d 50 18             	lea    edx,[eax+0x18]
c001f839:	80 fa 07             	cmp    dl,0x7
c001f83c:	0f 87 43 fb ff ff    	ja     c001f385 <Vm::x87Handler(regs*)+0x1f6>
c001f842:	83 ec 0c             	sub    esp,0xc
c001f845:	2d e8 00 00 00       	sub    eax,0xe8
c001f84a:	50                   	push   eax
c001f84b:	e8 02 f8 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f850:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f857:	89 c6                	mov    esi,eax
c001f859:	89 d7                	mov    edi,edx
c001f85b:	e8 f2 f7 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f860:	57                   	push   edi
c001f861:	56                   	push   esi
c001f862:	52                   	push   edx
c001f863:	50                   	push   eax
c001f864:	e8 0c f7 ff ff       	call   c001ef75 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f869:	83 c4 20             	add    esp,0x20
c001f86c:	e8 cc f8 ff ff       	call   c001f13d <Vm::fpuPop()>
c001f871:	eb 62                	jmp    c001f8d5 <Vm::x87Handler(regs*)+0x746>
c001f873:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f877:	0f 85 0f 01 00 00    	jne    c001f98c <Vm::x87Handler(regs*)+0x7fd>
c001f87d:	83 ec 0c             	sub    esp,0xc
c001f880:	6a 01                	push   0x1
c001f882:	e8 cb f7 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f887:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f88e:	89 c6                	mov    esi,eax
c001f890:	89 d7                	mov    edi,edx
c001f892:	e8 bb f7 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f897:	57                   	push   edi
c001f898:	56                   	push   esi
c001f899:	52                   	push   edx
c001f89a:	50                   	push   eax
c001f89b:	e8 d5 f6 ff ff       	call   c001ef75 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f8a0:	83 c4 20             	add    esp,0x20
c001f8a3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8a7:	e8 91 f8 ff ff       	call   c001f13d <Vm::fpuPop()>
c001f8ac:	e8 8c f8 ff ff       	call   c001f13d <Vm::fpuPop()>
c001f8b1:	e9 50 f9 ff ff       	jmp    c001f206 <Vm::x87Handler(regs*)+0x77>
c001f8b6:	3c d9                	cmp    al,0xd9
c001f8b8:	0f 85 b5 02 00 00    	jne    c001fb73 <Vm::x87Handler(regs*)+0x9e4>
c001f8be:	eb bd                	jmp    c001f87d <Vm::x87Handler(regs*)+0x6ee>
c001f8c0:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f8c4:	0f 85 ea 02 00 00    	jne    c001fbb4 <Vm::x87Handler(regs*)+0xa25>
c001f8ca:	0f b7 05 40 0b 03 c0 	movzx  eax,WORD PTR ds:0xc0030b40
c001f8d1:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f8d5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8d9:	e9 28 f9 ff ff       	jmp    c001f206 <Vm::x87Handler(regs*)+0x77>
c001f8de:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8e2:	84 d2                	test   dl,dl
c001f8e4:	75 0f                	jne    c001f8f5 <Vm::x87Handler(regs*)+0x766>
c001f8e6:	83 ec 0c             	sub    esp,0xc
c001f8e9:	ff 36                	push   DWORD PTR [esi]
c001f8eb:	e8 b1 f4 ff ff       	call   c001eda1 <Vm::fpu32ToInternal(unsigned int)>
c001f8f0:	e9 2c 01 00 00       	jmp    c001fa21 <Vm::x87Handler(regs*)+0x892>
c001f8f5:	80 fa 01             	cmp    dl,0x1
c001f8f8:	75 0f                	jne    c001f909 <Vm::x87Handler(regs*)+0x77a>
c001f8fa:	83 ec 0c             	sub    esp,0xc
c001f8fd:	ff 36                	push   DWORD PTR [esi]
c001f8ff:	e8 9d f4 ff ff       	call   c001eda1 <Vm::fpu32ToInternal(unsigned int)>
c001f904:	e9 81 02 00 00       	jmp    c001fb8a <Vm::x87Handler(regs*)+0x9fb>
c001f909:	80 fa 04             	cmp    dl,0x4
c001f90c:	75 0f                	jne    c001f91d <Vm::x87Handler(regs*)+0x78e>
c001f90e:	83 ec 0c             	sub    esp,0xc
c001f911:	ff 36                	push   DWORD PTR [esi]
c001f913:	e8 89 f4 ff ff       	call   c001eda1 <Vm::fpu32ToInternal(unsigned int)>
c001f918:	e9 86 01 00 00       	jmp    c001faa3 <Vm::x87Handler(regs*)+0x914>
c001f91d:	80 fa 05             	cmp    dl,0x5
c001f920:	75 1b                	jne    c001f93d <Vm::x87Handler(regs*)+0x7ae>
c001f922:	83 ec 0c             	sub    esp,0xc
c001f925:	6a 00                	push   0x0
c001f927:	e8 26 f7 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f92c:	89 c7                	mov    edi,eax
c001f92e:	89 d5                	mov    ebp,edx
c001f930:	58                   	pop    eax
c001f931:	ff 36                	push   DWORD PTR [esi]
c001f933:	e8 69 f4 ff ff       	call   c001eda1 <Vm::fpu32ToInternal(unsigned int)>
c001f938:	e9 a3 01 00 00       	jmp    c001fae0 <Vm::x87Handler(regs*)+0x951>
c001f93d:	80 fa 06             	cmp    dl,0x6
c001f940:	75 0f                	jne    c001f951 <Vm::x87Handler(regs*)+0x7c2>
c001f942:	83 ec 0c             	sub    esp,0xc
c001f945:	ff 36                	push   DWORD PTR [esi]
c001f947:	e8 55 f4 ff ff       	call   c001eda1 <Vm::fpu32ToInternal(unsigned int)>
c001f94c:	e9 ae 01 00 00       	jmp    c001faff <Vm::x87Handler(regs*)+0x970>
c001f951:	31 c0                	xor    eax,eax
c001f953:	80 fa 07             	cmp    dl,0x7
c001f956:	0f 85 94 02 00 00    	jne    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001f95c:	83 ec 0c             	sub    esp,0xc
c001f95f:	6a 00                	push   0x0
c001f961:	e8 ec f6 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f966:	89 c7                	mov    edi,eax
c001f968:	89 d5                	mov    ebp,edx
c001f96a:	58                   	pop    eax
c001f96b:	ff 36                	push   DWORD PTR [esi]
c001f96d:	e8 2f f4 ff ff       	call   c001eda1 <Vm::fpu32ToInternal(unsigned int)>
c001f972:	e9 cb 01 00 00       	jmp    c001fb42 <Vm::x87Handler(regs*)+0x9b3>
c001f977:	80 fa 03             	cmp    dl,0x3
c001f97a:	0f 85 d3 01 00 00    	jne    c001fb53 <Vm::x87Handler(regs*)+0x9c4>
c001f980:	e8 b8 f7 ff ff       	call   c001f13d <Vm::fpuPop()>
c001f985:	51                   	push   ecx
c001f986:	51                   	push   ecx
c001f987:	e9 de 01 00 00       	jmp    c001fb6a <Vm::x87Handler(regs*)+0x9db>
c001f98c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f990:	80 fa 01             	cmp    dl,0x1
c001f993:	75 09                	jne    c001f99e <Vm::x87Handler(regs*)+0x80f>
c001f995:	57                   	push   edi
c001f996:	57                   	push   edi
c001f997:	8b 06                	mov    eax,DWORD PTR [esi]
c001f999:	e9 e3 01 00 00       	jmp    c001fb81 <Vm::x87Handler(regs*)+0x9f2>
c001f99e:	80 fa 04             	cmp    dl,0x4
c001f9a1:	75 12                	jne    c001f9b5 <Vm::x87Handler(regs*)+0x826>
c001f9a3:	31 d2                	xor    edx,edx
c001f9a5:	51                   	push   ecx
c001f9a6:	51                   	push   ecx
c001f9a7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9a9:	52                   	push   edx
c001f9aa:	50                   	push   eax
c001f9ab:	e8 d0 f4 ff ff       	call   c001ee80 <Vm::fpuLongToFloat(long long)>
c001f9b0:	e9 ee 00 00 00       	jmp    c001faa3 <Vm::x87Handler(regs*)+0x914>
c001f9b5:	31 c0                	xor    eax,eax
c001f9b7:	80 fa 07             	cmp    dl,0x7
c001f9ba:	0f 85 30 02 00 00    	jne    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001f9c0:	83 ec 0c             	sub    esp,0xc
c001f9c3:	6a 00                	push   0x0
c001f9c5:	e8 88 f6 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001f9ca:	89 c7                	mov    edi,eax
c001f9cc:	89 d5                	mov    ebp,edx
c001f9ce:	58                   	pop    eax
c001f9cf:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9d1:	5a                   	pop    edx
c001f9d2:	31 d2                	xor    edx,edx
c001f9d4:	52                   	push   edx
c001f9d5:	50                   	push   eax
c001f9d6:	e8 a5 f4 ff ff       	call   c001ee80 <Vm::fpuLongToFloat(long long)>
c001f9db:	e9 62 01 00 00       	jmp    c001fb42 <Vm::x87Handler(regs*)+0x9b3>
c001f9e0:	84 d2                	test   dl,dl
c001f9e2:	75 0d                	jne    c001f9f1 <Vm::x87Handler(regs*)+0x862>
c001f9e4:	31 d2                	xor    edx,edx
c001f9e6:	55                   	push   ebp
c001f9e7:	55                   	push   ebp
c001f9e8:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9ea:	52                   	push   edx
c001f9eb:	50                   	push   eax
c001f9ec:	e9 d3 01 00 00       	jmp    c001fbc4 <Vm::x87Handler(regs*)+0xa35>
c001f9f1:	31 c0                	xor    eax,eax
c001f9f3:	80 fa 02             	cmp    dl,0x2
c001f9f6:	0f 85 f4 01 00 00    	jne    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001f9fc:	83 ec 0c             	sub    esp,0xc
c001f9ff:	6a 00                	push   0x0
c001fa01:	e8 4c f6 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001fa06:	59                   	pop    ecx
c001fa07:	5f                   	pop    edi
c001fa08:	e9 6a f9 ff ff       	jmp    c001f377 <Vm::x87Handler(regs*)+0x1e8>
c001fa0d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa11:	84 d2                	test   dl,dl
c001fa13:	75 2a                	jne    c001fa3f <Vm::x87Handler(regs*)+0x8b0>
c001fa15:	50                   	push   eax
c001fa16:	50                   	push   eax
c001fa17:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa1a:	ff 36                	push   DWORD PTR [esi]
c001fa1c:	e8 c5 f3 ff ff       	call   c001ede6 <Vm::fpu64ToInternal(unsigned long long)>
c001fa21:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa28:	89 c6                	mov    esi,eax
c001fa2a:	89 d7                	mov    edi,edx
c001fa2c:	e8 21 f6 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001fa31:	57                   	push   edi
c001fa32:	56                   	push   esi
c001fa33:	52                   	push   edx
c001fa34:	50                   	push   eax
c001fa35:	e8 8e f5 ff ff       	call   c001efc8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa3a:	e9 64 01 00 00       	jmp    c001fba3 <Vm::x87Handler(regs*)+0xa14>
c001fa3f:	80 fa 01             	cmp    dl,0x1
c001fa42:	75 11                	jne    c001fa55 <Vm::x87Handler(regs*)+0x8c6>
c001fa44:	50                   	push   eax
c001fa45:	50                   	push   eax
c001fa46:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa49:	ff 36                	push   DWORD PTR [esi]
c001fa4b:	e8 96 f3 ff ff       	call   c001ede6 <Vm::fpu64ToInternal(unsigned long long)>
c001fa50:	e9 35 01 00 00       	jmp    c001fb8a <Vm::x87Handler(regs*)+0x9fb>
c001fa55:	80 fa 02             	cmp    dl,0x2
c001fa58:	0f 85 54 f9 ff ff    	jne    c001f3b2 <Vm::x87Handler(regs*)+0x223>
c001fa5e:	55                   	push   ebp
c001fa5f:	55                   	push   ebp
c001fa60:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa63:	ff 36                	push   DWORD PTR [esi]
c001fa65:	e8 7c f3 ff ff       	call   c001ede6 <Vm::fpu64ToInternal(unsigned long long)>
c001fa6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa71:	89 c6                	mov    esi,eax
c001fa73:	89 d7                	mov    edi,edx
c001fa75:	e8 d8 f5 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001fa7a:	57                   	push   edi
c001fa7b:	56                   	push   esi
c001fa7c:	52                   	push   edx
c001fa7d:	50                   	push   eax
c001fa7e:	e8 f2 f4 ff ff       	call   c001ef75 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fa87:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fa8a:	83 c4 20             	add    esp,0x20
c001fa8d:	e9 74 f7 ff ff       	jmp    c001f206 <Vm::x87Handler(regs*)+0x77>
c001fa92:	80 fa 04             	cmp    dl,0x4
c001fa95:	75 2a                	jne    c001fac1 <Vm::x87Handler(regs*)+0x932>
c001fa97:	51                   	push   ecx
c001fa98:	51                   	push   ecx
c001fa99:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa9c:	ff 36                	push   DWORD PTR [esi]
c001fa9e:	e8 43 f3 ff ff       	call   c001ede6 <Vm::fpu64ToInternal(unsigned long long)>
c001faa3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faaa:	89 c6                	mov    esi,eax
c001faac:	89 d7                	mov    edi,edx
c001faae:	e8 9f f5 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001fab3:	57                   	push   edi
c001fab4:	56                   	push   esi
c001fab5:	52                   	push   edx
c001fab6:	50                   	push   eax
c001fab7:	e8 36 f5 ff ff       	call   c001eff2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fabc:	e9 e2 00 00 00       	jmp    c001fba3 <Vm::x87Handler(regs*)+0xa14>
c001fac1:	80 fa 05             	cmp    dl,0x5
c001fac4:	75 28                	jne    c001faee <Vm::x87Handler(regs*)+0x95f>
c001fac6:	83 ec 0c             	sub    esp,0xc
c001fac9:	6a 00                	push   0x0
c001facb:	e8 82 f5 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001fad0:	89 c7                	mov    edi,eax
c001fad2:	89 d5                	mov    ebp,edx
c001fad4:	58                   	pop    eax
c001fad5:	5a                   	pop    edx
c001fad6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fad9:	ff 36                	push   DWORD PTR [esi]
c001fadb:	e8 06 f3 ff ff       	call   c001ede6 <Vm::fpu64ToInternal(unsigned long long)>
c001fae0:	83 c4 10             	add    esp,0x10
c001fae3:	55                   	push   ebp
c001fae4:	57                   	push   edi
c001fae5:	52                   	push   edx
c001fae6:	50                   	push   eax
c001fae7:	e8 06 f5 ff ff       	call   c001eff2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001faec:	eb 60                	jmp    c001fb4e <Vm::x87Handler(regs*)+0x9bf>
c001faee:	80 fa 06             	cmp    dl,0x6
c001faf1:	75 2a                	jne    c001fb1d <Vm::x87Handler(regs*)+0x98e>
c001faf3:	51                   	push   ecx
c001faf4:	51                   	push   ecx
c001faf5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001faf8:	ff 36                	push   DWORD PTR [esi]
c001fafa:	e8 e7 f2 ff ff       	call   c001ede6 <Vm::fpu64ToInternal(unsigned long long)>
c001faff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb06:	89 c6                	mov    esi,eax
c001fb08:	89 d7                	mov    edi,edx
c001fb0a:	e8 43 f5 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001fb0f:	57                   	push   edi
c001fb10:	56                   	push   esi
c001fb11:	52                   	push   edx
c001fb12:	50                   	push   eax
c001fb13:	e8 08 f5 ff ff       	call   c001f020 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb18:	e9 86 00 00 00       	jmp    c001fba3 <Vm::x87Handler(regs*)+0xa14>
c001fb1d:	31 c0                	xor    eax,eax
c001fb1f:	80 fa 07             	cmp    dl,0x7
c001fb22:	0f 85 c8 00 00 00    	jne    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001fb28:	83 ec 0c             	sub    esp,0xc
c001fb2b:	6a 00                	push   0x0
c001fb2d:	e8 20 f5 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001fb32:	89 c7                	mov    edi,eax
c001fb34:	89 d5                	mov    ebp,edx
c001fb36:	58                   	pop    eax
c001fb37:	5a                   	pop    edx
c001fb38:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb3b:	ff 36                	push   DWORD PTR [esi]
c001fb3d:	e8 a4 f2 ff ff       	call   c001ede6 <Vm::fpu64ToInternal(unsigned long long)>
c001fb42:	83 c4 10             	add    esp,0x10
c001fb45:	55                   	push   ebp
c001fb46:	57                   	push   edi
c001fb47:	52                   	push   edx
c001fb48:	50                   	push   eax
c001fb49:	e8 d2 f4 ff ff       	call   c001f020 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb4e:	83 c4 0c             	add    esp,0xc
c001fb51:	eb 53                	jmp    c001fba6 <Vm::x87Handler(regs*)+0xa17>
c001fb53:	31 c0                	xor    eax,eax
c001fb55:	80 fa 02             	cmp    dl,0x2
c001fb58:	0f 85 92 00 00 00    	jne    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001fb5e:	83 ec 0c             	sub    esp,0xc
c001fb61:	6a 00                	push   0x0
c001fb63:	e8 ea f4 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001fb68:	59                   	pop    ecx
c001fb69:	5f                   	pop    edi
c001fb6a:	52                   	push   edx
c001fb6b:	50                   	push   eax
c001fb6c:	e8 27 f2 ff ff       	call   c001ed98 <Vm::fpuInternalTo64(unsigned long long)>
c001fb71:	eb 70                	jmp    c001fbe3 <Vm::x87Handler(regs*)+0xa54>
c001fb73:	31 c0                	xor    eax,eax
c001fb75:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fb7a:	75 74                	jne    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001fb7c:	50                   	push   eax
c001fb7d:	50                   	push   eax
c001fb7e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fb81:	31 d2                	xor    edx,edx
c001fb83:	52                   	push   edx
c001fb84:	50                   	push   eax
c001fb85:	e8 f6 f2 ff ff       	call   c001ee80 <Vm::fpuLongToFloat(long long)>
c001fb8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb91:	89 c6                	mov    esi,eax
c001fb93:	89 d7                	mov    edi,edx
c001fb95:	e8 b8 f4 ff ff       	call   c001f052 <Vm::fpuGetReg(int)>
c001fb9a:	57                   	push   edi
c001fb9b:	56                   	push   esi
c001fb9c:	52                   	push   edx
c001fb9d:	50                   	push   eax
c001fb9e:	e8 5e f4 ff ff       	call   c001f001 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fba3:	83 c4 1c             	add    esp,0x1c
c001fba6:	52                   	push   edx
c001fba7:	50                   	push   eax
c001fba8:	6a 00                	push   0x0
c001fbaa:	e8 e6 f4 ff ff       	call   c001f095 <Vm::fpuSetReg(int, unsigned long long)>
c001fbaf:	e9 f2 f7 ff ff       	jmp    c001f3a6 <Vm::x87Handler(regs*)+0x217>
c001fbb4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbb8:	80 fa 05             	cmp    dl,0x5
c001fbbb:	75 11                	jne    c001fbce <Vm::x87Handler(regs*)+0xa3f>
c001fbbd:	55                   	push   ebp
c001fbbe:	55                   	push   ebp
c001fbbf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbc2:	ff 36                	push   DWORD PTR [esi]
c001fbc4:	e8 81 f2 ff ff       	call   c001ee4a <Vm::fpuULongToFloat(unsigned long long)>
c001fbc9:	e9 cf f7 ff ff       	jmp    c001f39d <Vm::x87Handler(regs*)+0x20e>
c001fbce:	31 c0                	xor    eax,eax
c001fbd0:	80 fa 07             	cmp    dl,0x7
c001fbd3:	75 1b                	jne    c001fbf0 <Vm::x87Handler(regs*)+0xa61>
c001fbd5:	e8 63 f5 ff ff       	call   c001f13d <Vm::fpuPop()>
c001fbda:	51                   	push   ecx
c001fbdb:	51                   	push   ecx
c001fbdc:	52                   	push   edx
c001fbdd:	50                   	push   eax
c001fbde:	e8 0c f2 ff ff       	call   c001edef <Vm::fpuFloatToLong(unsigned long long)>
c001fbe3:	83 c4 10             	add    esp,0x10
c001fbe6:	89 06                	mov    DWORD PTR [esi],eax
c001fbe8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fbeb:	e9 f8 f7 ff ff       	jmp    c001f3e8 <Vm::x87Handler(regs*)+0x259>
c001fbf0:	83 c4 1c             	add    esp,0x1c
c001fbf3:	5b                   	pop    ebx
c001fbf4:	5e                   	pop    esi
c001fbf5:	5f                   	pop    edi
c001fbf6:	5d                   	pop    ebp
c001fbf7:	c3                   	ret    

c001fbf8 <__static_initialization_and_destruction_0(int, int)>:
c001fbf8:	83 ec 0c             	sub    esp,0xc
c001fbfb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fc00:	75 1a                	jne    c001fc1c <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fc0a:	75 10                	jne    c001fc1c <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc0c:	83 ec 0c             	sub    esp,0xc
c001fc0f:	68 40 0b 03 c0       	push   0xc0030b40
c001fc14:	e8 01 8d 00 00       	call   c002891a <Vm::_FPUState::_FPUState()>
c001fc19:	83 c4 10             	add    esp,0x10
c001fc1c:	90                   	nop
c001fc1d:	83 c4 0c             	add    esp,0xc
c001fc20:	c3                   	ret    

c001fc21 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fc21:	83 ec 0c             	sub    esp,0xc
c001fc24:	83 ec 08             	sub    esp,0x8
c001fc27:	68 ff ff 00 00       	push   0xffff
c001fc2c:	6a 01                	push   0x1
c001fc2e:	e8 c5 ff ff ff       	call   c001fbf8 <__static_initialization_and_destruction_0(int, int)>
c001fc33:	83 c4 10             	add    esp,0x10
c001fc36:	83 c4 0c             	add    esp,0xc
c001fc39:	c3                   	ret    

c001fc3a <FAT::getName()>:
c001fc3a:	b8 28 ba 02 c0       	mov    eax,0xc002ba28
c001fc3f:	c3                   	ret    

c001fc40 <FAT::tell(void*, unsigned long long*)>:
c001fc40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc45:	75 06                	jne    c001fc4d <FAT::tell(void*, unsigned long long*)+0xd>
c001fc47:	b8 04 00 00 00       	mov    eax,0x4
c001fc4c:	c3                   	ret    
c001fc4d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc52:	75 06                	jne    c001fc5a <FAT::tell(void*, unsigned long long*)+0x1a>
c001fc54:	b8 04 00 00 00       	mov    eax,0x4
c001fc59:	c3                   	ret    
c001fc5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc5e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fc61:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fc64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc68:	89 01                	mov    DWORD PTR [ecx],eax
c001fc6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc6d:	b8 00 00 00 00       	mov    eax,0x0
c001fc72:	c3                   	ret    
c001fc73:	90                   	nop

c001fc74 <FAT::stat(void*, unsigned long long*)>:
c001fc74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc79:	75 06                	jne    c001fc81 <FAT::stat(void*, unsigned long long*)+0xd>
c001fc7b:	b8 04 00 00 00       	mov    eax,0x4
c001fc80:	c3                   	ret    
c001fc81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc86:	75 06                	jne    c001fc8e <FAT::stat(void*, unsigned long long*)+0x1a>
c001fc88:	b8 04 00 00 00       	mov    eax,0x4
c001fc8d:	c3                   	ret    
c001fc8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc92:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fc95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fc98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc9c:	89 01                	mov    DWORD PTR [ecx],eax
c001fc9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fca1:	b8 00 00 00 00       	mov    eax,0x0
c001fca6:	c3                   	ret    
c001fca7:	90                   	nop

c001fca8 <FAT::~FAT()>:
c001fca8:	83 ec 0c             	sub    esp,0xc
c001fcab:	ba 74 ba 02 c0       	mov    edx,0xc002ba74
c001fcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb4:	89 10                	mov    DWORD PTR [eax],edx
c001fcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcba:	83 ec 0c             	sub    esp,0xc
c001fcbd:	50                   	push   eax
c001fcbe:	e8 77 2b ff ff       	call   c001283a <Filesystem::~Filesystem()>
c001fcc3:	83 c4 10             	add    esp,0x10
c001fcc6:	90                   	nop
c001fcc7:	83 c4 0c             	add    esp,0xc
c001fcca:	c3                   	ret    
c001fccb:	90                   	nop

c001fccc <FAT::~FAT()>:
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	83 ec 0c             	sub    esp,0xc
c001fcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd6:	e8 cd ff ff ff       	call   c001fca8 <FAT::~FAT()>
c001fcdb:	83 c4 10             	add    esp,0x10
c001fcde:	83 ec 08             	sub    esp,0x8
c001fce1:	6a 08                	push   0x8
c001fce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fce7:	e8 47 27 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001fcec:	83 c4 10             	add    esp,0x10
c001fcef:	83 c4 0c             	add    esp,0xc
c001fcf2:	c3                   	ret    
c001fcf3:	90                   	nop

c001fcf4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fcf4:	83 ec 1c             	sub    esp,0x1c
c001fcf7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fcfe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fd03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd07:	8b 04 85 c0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf440]
c001fd0e:	83 f8 ff             	cmp    eax,0xffffffff
c001fd11:	75 34                	jne    c001fd47 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fd13:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd17:	88 c2                	mov    dl,al
c001fd19:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c001fd1e:	01 d0                	add    eax,edx
c001fd20:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd24:	8b 15 a0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030ba0
c001fd2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd2e:	89 14 85 c0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf440],edx
c001fd35:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c001fd3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fd3e:	89 14 85 40 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3c0],edx
c001fd45:	eb 17                	jmp    c001fd5e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fd47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd4b:	88 c2                	mov    dl,al
c001fd4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd51:	8b 04 85 c0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf440]
c001fd58:	01 d0                	add    eax,edx
c001fd5a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd5e:	83 ec 04             	sub    esp,0x4
c001fd61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd69:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fd6d:	50                   	push   eax
c001fd6e:	e8 8b 6f fe ff       	call   c0006cfe <f_getlabel>
c001fd73:	83 c4 10             	add    esp,0x10
c001fd76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd7a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd7f:	75 07                	jne    c001fd88 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fd81:	b8 00 00 00 00       	mov    eax,0x0
c001fd86:	eb 05                	jmp    c001fd8d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fd88:	b8 01 00 00 00       	mov    eax,0x1
c001fd8d:	83 c4 1c             	add    esp,0x1c
c001fd90:	c3                   	ret    
c001fd91:	90                   	nop

c001fd92 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fd92:	57                   	push   edi
c001fd93:	83 ec 58             	sub    esp,0x58
c001fd96:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fd9e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fda2:	b9 0f 00 00 00       	mov    ecx,0xf
c001fda7:	b8 00 00 00 00       	mov    eax,0x0
c001fdac:	fc                   	cld    
c001fdad:	89 d7                	mov    edi,edx
c001fdaf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fdb1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fdb5:	8b 04 85 c0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf440]
c001fdbc:	83 f8 ff             	cmp    eax,0xffffffff
c001fdbf:	75 34                	jne    c001fdf5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fdc1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fdc5:	88 c2                	mov    dl,al
c001fdc7:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c001fdcc:	01 d0                	add    eax,edx
c001fdce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdd2:	8b 15 a0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030ba0
c001fdd8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fddc:	89 14 85 c0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf440],edx
c001fde3:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c001fde8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fdec:	89 14 85 40 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3c0],edx
c001fdf3:	eb 17                	jmp    c001fe0c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fdf5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fdf9:	88 c2                	mov    dl,al
c001fdfb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fdff:	8b 04 85 c0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf440]
c001fe06:	01 d0                	add    eax,edx
c001fe08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe0c:	83 ec 08             	sub    esp,0x8
c001fe0f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fe13:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe17:	50                   	push   eax
c001fe18:	e8 2f 0b fe ff       	call   c000094c <strcat>
c001fe1d:	83 c4 10             	add    esp,0x10
c001fe20:	83 ec 0c             	sub    esp,0xc
c001fe23:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe27:	50                   	push   eax
c001fe28:	e8 bf 70 fe ff       	call   c0006eec <f_setlabel>
c001fe2d:	83 c4 10             	add    esp,0x10
c001fe30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fe34:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fe39:	75 07                	jne    c001fe42 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fe3b:	b8 00 00 00 00       	mov    eax,0x0
c001fe40:	eb 05                	jmp    c001fe47 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fe42:	b8 01 00 00 00       	mov    eax,0x1
c001fe47:	83 c4 58             	add    esp,0x58
c001fe4a:	5f                   	pop    edi
c001fe4b:	c3                   	ret    

c001fe4c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fe4c:	83 ec 2c             	sub    esp,0x2c
c001fe4f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fe57:	83 ec 08             	sub    esp,0x8
c001fe5a:	68 4c ba 02 c0       	push   0xc002ba4c
c001fe5f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe63:	e8 30 0a fe ff       	call   c0000898 <strcmp>
c001fe68:	83 c4 10             	add    esp,0x10
c001fe6b:	85 c0                	test   eax,eax
c001fe6d:	0f 94 c0             	sete   al
c001fe70:	84 c0                	test   al,al
c001fe72:	74 0d                	je     c001fe81 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fe74:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe7c:	e9 a6 00 00 00       	jmp    c001ff27 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe81:	83 ec 08             	sub    esp,0x8
c001fe84:	68 3e ba 02 c0       	push   0xc002ba3e
c001fe89:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe8d:	e8 06 0a fe ff       	call   c0000898 <strcmp>
c001fe92:	83 c4 10             	add    esp,0x10
c001fe95:	85 c0                	test   eax,eax
c001fe97:	0f 94 c0             	sete   al
c001fe9a:	84 c0                	test   al,al
c001fe9c:	74 0a                	je     c001fea8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fe9e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fea6:	eb 7f                	jmp    c001ff27 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fea8:	83 ec 08             	sub    esp,0x8
c001feab:	68 44 ba 02 c0       	push   0xc002ba44
c001feb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001feb4:	e8 df 09 fe ff       	call   c0000898 <strcmp>
c001feb9:	83 c4 10             	add    esp,0x10
c001febc:	85 c0                	test   eax,eax
c001febe:	0f 94 c0             	sete   al
c001fec1:	84 c0                	test   al,al
c001fec3:	74 0a                	je     c001fecf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fec5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fecd:	eb 58                	jmp    c001ff27 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fecf:	83 ec 08             	sub    esp,0x8
c001fed2:	68 8c 90 02 c0       	push   0xc002908c
c001fed7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fedb:	e8 b8 09 fe ff       	call   c0000898 <strcmp>
c001fee0:	83 c4 10             	add    esp,0x10
c001fee3:	85 c0                	test   eax,eax
c001fee5:	0f 94 c0             	sete   al
c001fee8:	84 c0                	test   al,al
c001feea:	74 0a                	je     c001fef6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001feec:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001fef4:	eb 31                	jmp    c001ff27 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fef6:	83 ec 08             	sub    esp,0x8
c001fef9:	68 4a ba 02 c0       	push   0xc002ba4a
c001fefe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff02:	e8 91 09 fe ff       	call   c0000898 <strcmp>
c001ff07:	83 c4 10             	add    esp,0x10
c001ff0a:	85 c0                	test   eax,eax
c001ff0c:	0f 94 c0             	sete   al
c001ff0f:	84 c0                	test   al,al
c001ff11:	74 0a                	je     c001ff1d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001ff13:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ff1b:	eb 0a                	jmp    c001ff27 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff1d:	b8 08 00 00 00       	mov    eax,0x8
c001ff22:	e9 df 00 00 00       	jmp    c0020006 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c001ff27:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ff2e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ff33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff37:	8b 04 85 c0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf440]
c001ff3e:	83 f8 ff             	cmp    eax,0xffffffff
c001ff41:	75 34                	jne    c001ff77 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001ff43:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff47:	88 c2                	mov    dl,al
c001ff49:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c001ff4e:	01 d0                	add    eax,edx
c001ff50:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff54:	8b 15 a0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030ba0
c001ff5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff5e:	89 14 85 c0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf440],edx
c001ff65:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c001ff6a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ff6e:	89 14 85 40 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3c0],edx
c001ff75:	eb 17                	jmp    c001ff8e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001ff77:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff7b:	88 c2                	mov    dl,al
c001ff7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff81:	8b 04 85 c0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf440]
c001ff88:	01 d0                	add    eax,edx
c001ff8a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff92:	88 04 24             	mov    BYTE PTR [esp],al
c001ff95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ff99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff9d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ffa5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ffaa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ffb2:	83 ec 0c             	sub    esp,0xc
c001ffb5:	68 00 20 00 00       	push   0x2000
c001ffba:	e8 dd f5 fe ff       	call   c000f59c <malloc>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ffc6:	68 00 20 00 00       	push   0x2000
c001ffcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffcf:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ffd3:	50                   	push   eax
c001ffd4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ffd8:	50                   	push   eax
c001ffd9:	e8 59 73 fe ff       	call   c0007337 <f_mkfs>
c001ffde:	83 c4 10             	add    esp,0x10
c001ffe1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ffe5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ffea:	75 07                	jne    c001fff3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001ffec:	b8 00 00 00 00       	mov    eax,0x0
c001fff1:	eb 13                	jmp    c0020006 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c001fff3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001fff8:	75 07                	jne    c0020001 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c001fffa:	b8 09 00 00 00       	mov    eax,0x9
c001ffff:	eb 05                	jmp    c0020006 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020001:	b8 01 00 00 00       	mov    eax,0x1
c0020006:	83 c4 2c             	add    esp,0x2c
c0020009:	c3                   	ret    

c002000a <FAT::tryMount(LogicalDisk*, int)>:
c002000a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020010:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c0020015:	83 f8 14             	cmp    eax,0x14
c0020018:	75 17                	jne    c0020031 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002001a:	83 ec 0c             	sub    esp,0xc
c002001d:	68 50 ba 02 c0       	push   0xc002ba50
c0020022:	e8 1e 9c ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0020027:	83 c4 10             	add    esp,0x10
c002002a:	b0 00                	mov    al,0x0
c002002c:	e9 d7 01 00 00       	jmp    c0020208 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020031:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020038:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002003e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020044:	3d 00 02 00 00       	cmp    eax,0x200
c0020049:	74 07                	je     c0020052 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002004b:	b0 00                	mov    al,0x0
c002004d:	e9 b6 01 00 00       	jmp    c0020208 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020052:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002005a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020061:	8b 04 85 c0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf440]
c0020068:	83 f8 ff             	cmp    eax,0xffffffff
c002006b:	74 07                	je     c0020074 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002006d:	b0 01                	mov    al,0x1
c002006f:	e9 94 01 00 00       	jmp    c0020208 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020074:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002007e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020086:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002008d:	88 c2                	mov    dl,al
c002008f:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c0020094:	01 d0                	add    eax,edx
c0020096:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002009d:	8b 15 a0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030ba0
c00200a3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00200aa:	89 14 85 c0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf440],edx
c00200b1:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c00200b6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00200bd:	89 14 85 40 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3c0],edx
c00200c4:	83 ec 0c             	sub    esp,0xc
c00200c7:	68 54 02 00 00       	push   0x254
c00200cc:	e8 cb f4 fe ff       	call   c000f59c <malloc>
c00200d1:	83 c4 10             	add    esp,0x10
c00200d4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00200db:	83 ec 04             	sub    esp,0x4
c00200de:	6a 00                	push   0x0
c00200e0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00200e7:	50                   	push   eax
c00200e8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00200ef:	e8 01 4e fe ff       	call   c0004ef5 <f_mount>
c00200f4:	83 c4 10             	add    esp,0x10
c00200f7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00200fe:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020106:	74 19                	je     c0020121 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020112:	e8 a5 f4 fe ff       	call   c000f5bc <rfree>
c0020117:	83 c4 10             	add    esp,0x10
c002011a:	b0 00                	mov    al,0x0
c002011c:	e9 e7 00 00 00       	jmp    c0020208 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020121:	83 ec 04             	sub    esp,0x4
c0020124:	68 00 01 00 00       	push   0x100
c0020129:	6a 00                	push   0x0
c002012b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020132:	50                   	push   eax
c0020133:	e8 18 06 fe ff       	call   c0000750 <memset>
c0020138:	83 c4 10             	add    esp,0x10
c002013b:	83 ec 08             	sub    esp,0x8
c002013e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020145:	50                   	push   eax
c0020146:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002014d:	50                   	push   eax
c002014e:	e8 f9 07 fe ff       	call   c000094c <strcat>
c0020153:	83 c4 10             	add    esp,0x10
c0020156:	83 ec 08             	sub    esp,0x8
c0020159:	68 5e ba 02 c0       	push   0xc002ba5e
c002015e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020165:	50                   	push   eax
c0020166:	e8 e1 07 fe ff       	call   c000094c <strcat>
c002016b:	83 c4 10             	add    esp,0x10
c002016e:	83 ec 04             	sub    esp,0x4
c0020171:	6a 01                	push   0x1
c0020173:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002017a:	50                   	push   eax
c002017b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002017f:	50                   	push   eax
c0020180:	e8 d2 4d fe ff       	call   c0004f57 <f_open>
c0020185:	83 c4 10             	add    esp,0x10
c0020188:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002018f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020196:	85 c0                	test   eax,eax
c0020198:	74 0a                	je     c00201a4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002019a:	78 2d                	js     c00201c9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002019c:	83 e8 04             	sub    eax,0x4
c002019f:	83 f8 01             	cmp    eax,0x1
c00201a2:	77 25                	ja     c00201c9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00201a4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00201ac:	83 ec 0c             	sub    esp,0xc
c00201af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00201b3:	50                   	push   eax
c00201b4:	e8 f0 58 fe ff       	call   c0005aa9 <f_close>
c00201b9:	83 c4 10             	add    esp,0x10
c00201bc:	90                   	nop
c00201bd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00201c5:	74 3a                	je     c0020201 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00201c7:	eb 2d                	jmp    c00201f6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00201c9:	83 ec 0c             	sub    esp,0xc
c00201cc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201d3:	e8 e4 f3 fe ff       	call   c000f5bc <rfree>
c00201d8:	83 c4 10             	add    esp,0x10
c00201db:	83 ec 04             	sub    esp,0x4
c00201de:	6a 00                	push   0x0
c00201e0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00201e7:	50                   	push   eax
c00201e8:	6a 00                	push   0x0
c00201ea:	e8 06 4d fe ff       	call   c0004ef5 <f_mount>
c00201ef:	83 c4 10             	add    esp,0x10
c00201f2:	b0 00                	mov    al,0x0
c00201f4:	eb 12                	jmp    c0020208 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201f6:	a1 a0 0b 03 c0       	mov    eax,ds:0xc0030ba0
c00201fb:	40                   	inc    eax
c00201fc:	a3 a0 0b 03 c0       	mov    ds:0xc0030ba0,eax
c0020201:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020208:	81 c4 6c 03 00 00    	add    esp,0x36c
c002020e:	c3                   	ret    
c002020f:	90                   	nop

c0020210 <FAT::getFileFirstSector(char const*)>:
c0020210:	53                   	push   ebx
c0020211:	83 ec 28             	sub    esp,0x28
c0020214:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002021c:	83 ec 0c             	sub    esp,0xc
c002021f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020223:	e8 74 f3 fe ff       	call   c000f59c <malloc>
c0020228:	83 c4 10             	add    esp,0x10
c002022b:	89 c3                	mov    ebx,eax
c002022d:	a1 d0 0a 03 c0       	mov    eax,ds:0xc0030ad0
c0020232:	83 ec 04             	sub    esp,0x4
c0020235:	50                   	push   eax
c0020236:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002023a:	53                   	push   ebx
c002023b:	e8 2a 28 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0020240:	83 c4 10             	add    esp,0x10
c0020243:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020247:	83 ec 08             	sub    esp,0x8
c002024a:	6a 01                	push   0x1
c002024c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020250:	e8 79 28 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c0020255:	83 c4 10             	add    esp,0x10
c0020258:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002025c:	8b 00                	mov    eax,DWORD PTR [eax]
c002025e:	83 c0 0c             	add    eax,0xc
c0020261:	8b 00                	mov    eax,DWORD PTR [eax]
c0020263:	83 ec 0c             	sub    esp,0xc
c0020266:	8d 54 24 14          	lea    edx,[esp+0x14]
c002026a:	52                   	push   edx
c002026b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002026f:	52                   	push   edx
c0020270:	6a 00                	push   0x0
c0020272:	6a 04                	push   0x4
c0020274:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020278:	ff d0                	call   eax
c002027a:	83 c4 20             	add    esp,0x20
c002027d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020281:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020287:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002028b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002028f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020292:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020295:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020299:	83 ec 0c             	sub    esp,0xc
c002029c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202a0:	e8 87 28 ff ff       	call   c0012b2c <File::close()>
c00202a5:	83 c4 10             	add    esp,0x10
c00202a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202ac:	ba 00 00 00 00       	mov    edx,0x0
c00202b1:	83 c4 28             	add    esp,0x28
c00202b4:	5b                   	pop    ebx
c00202b5:	c3                   	ret    

c00202b6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00202b6:	57                   	push   edi
c00202b7:	56                   	push   esi
c00202b8:	53                   	push   ebx
c00202b9:	81 ec 50 02 00 00    	sub    esp,0x250
c00202bf:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00202c7:	74 0a                	je     c00202d3 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00202c9:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00202d1:	75 0a                	jne    c00202dd <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00202d3:	b8 04 00 00 00       	mov    eax,0x4
c00202d8:	e9 29 01 00 00       	jmp    c0020406 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00202dd:	83 ec 08             	sub    esp,0x8
c00202e0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00202e7:	50                   	push   eax
c00202e8:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00202ef:	e8 bf 5d fe ff       	call   c00060b3 <f_readdir>
c00202f4:	83 c4 10             	add    esp,0x10
c00202f7:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00202fe:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020305:	83 ec 0c             	sub    esp,0xc
c0020308:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002030f:	83 c0 1a             	add    eax,0x1a
c0020312:	50                   	push   eax
c0020313:	e8 54 04 fe ff       	call   c000076c <strlen>
c0020318:	83 c4 10             	add    esp,0x10
c002031b:	ba 00 00 00 00       	mov    edx,0x0
c0020320:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020328:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002032f:	0f b6 c0             	movzx  eax,al
c0020332:	83 e0 10             	and    eax,0x10
c0020335:	74 07                	je     c002033e <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020337:	b8 02 00 00 00       	mov    eax,0x2
c002033c:	eb 05                	jmp    c0020343 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002033e:	b8 01 00 00 00       	mov    eax,0x1
c0020343:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020347:	83 ec 08             	sub    esp,0x8
c002034a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020351:	83 c0 1a             	add    eax,0x1a
c0020354:	50                   	push   eax
c0020355:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020359:	83 c0 10             	add    eax,0x10
c002035c:	50                   	push   eax
c002035d:	e8 aa 04 fe ff       	call   c000080c <strcpy>
c0020362:	83 c4 10             	add    esp,0x10
c0020365:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002036c:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020373:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020377:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002037e:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020385:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002038c:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020393:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002039a:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00203a1:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00203a8:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00203af:	89 c6                	mov    esi,eax
c00203b1:	89 d7                	mov    edi,edx
c00203b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00203b5:	89 c8                	mov    eax,ecx
c00203b7:	89 fa                	mov    edx,edi
c00203b9:	89 f3                	mov    ebx,esi
c00203bb:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00203c2:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00203c9:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00203d0:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00203d7:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00203dd:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00203e4:	84 c0                	test   al,al
c00203e6:	75 07                	jne    c00203ef <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00203e8:	b8 07 00 00 00       	mov    eax,0x7
c00203ed:	eb 17                	jmp    c0020406 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00203ef:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00203f6:	85 c0                	test   eax,eax
c00203f8:	75 07                	jne    c0020401 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00203fa:	b8 00 00 00 00       	mov    eax,0x0
c00203ff:	eb 05                	jmp    c0020406 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020401:	b8 01 00 00 00       	mov    eax,0x1
c0020406:	81 c4 50 02 00 00    	add    esp,0x250
c002040c:	5b                   	pop    ebx
c002040d:	5e                   	pop    esi
c002040e:	5f                   	pop    edi
c002040f:	c3                   	ret    

c0020410 <FAT::read(void*, unsigned long, void*, int*)>:
c0020410:	83 ec 1c             	sub    esp,0x1c
c0020413:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020418:	74 07                	je     c0020421 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002041a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002041f:	75 07                	jne    c0020428 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020421:	b8 04 00 00 00       	mov    eax,0x4
c0020426:	eb 3d                	jmp    c0020465 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020428:	8d 44 24 08          	lea    eax,[esp+0x8]
c002042c:	50                   	push   eax
c002042d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020431:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020435:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020439:	e8 55 4f fe ff       	call   c0005393 <f_read>
c002043e:	83 c4 10             	add    esp,0x10
c0020441:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020445:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020449:	89 c2                	mov    edx,eax
c002044b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002044f:	89 10                	mov    DWORD PTR [eax],edx
c0020451:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020455:	85 c0                	test   eax,eax
c0020457:	75 07                	jne    c0020460 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020459:	b8 00 00 00 00       	mov    eax,0x0
c002045e:	eb 05                	jmp    c0020465 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020460:	b8 01 00 00 00       	mov    eax,0x1
c0020465:	83 c4 1c             	add    esp,0x1c
c0020468:	c3                   	ret    
c0020469:	90                   	nop

c002046a <FAT::write(void*, unsigned long, void*, int*)>:
c002046a:	83 ec 1c             	sub    esp,0x1c
c002046d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020472:	74 07                	je     c002047b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020474:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020479:	75 07                	jne    c0020482 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002047b:	b8 04 00 00 00       	mov    eax,0x4
c0020480:	eb 3d                	jmp    c00204bf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020482:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020486:	50                   	push   eax
c0020487:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002048b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002048f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020493:	e8 7b 51 fe ff       	call   c0005613 <f_write>
c0020498:	83 c4 10             	add    esp,0x10
c002049b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002049f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204a3:	89 c2                	mov    edx,eax
c00204a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00204a9:	89 10                	mov    DWORD PTR [eax],edx
c00204ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204af:	85 c0                	test   eax,eax
c00204b1:	75 07                	jne    c00204ba <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00204b3:	b8 00 00 00 00       	mov    eax,0x0
c00204b8:	eb 05                	jmp    c00204bf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00204ba:	b8 01 00 00 00       	mov    eax,0x1
c00204bf:	83 c4 1c             	add    esp,0x1c
c00204c2:	c3                   	ret    
c00204c3:	90                   	nop

c00204c4 <FAT::close(void*)>:
c00204c4:	83 ec 1c             	sub    esp,0x1c
c00204c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00204cc:	75 07                	jne    c00204d5 <FAT::close(void*)+0x11>
c00204ce:	b8 04 00 00 00       	mov    eax,0x4
c00204d3:	eb 36                	jmp    c002050b <FAT::close(void*)+0x47>
c00204d5:	83 ec 0c             	sub    esp,0xc
c00204d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204dc:	e8 c8 55 fe ff       	call   c0005aa9 <f_close>
c00204e1:	83 c4 10             	add    esp,0x10
c00204e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204e8:	83 ec 0c             	sub    esp,0xc
c00204eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204ef:	e8 b8 f0 fe ff       	call   c000f5ac <free>
c00204f4:	83 c4 10             	add    esp,0x10
c00204f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204fb:	85 c0                	test   eax,eax
c00204fd:	75 07                	jne    c0020506 <FAT::close(void*)+0x42>
c00204ff:	b8 00 00 00 00       	mov    eax,0x0
c0020504:	eb 05                	jmp    c002050b <FAT::close(void*)+0x47>
c0020506:	b8 01 00 00 00       	mov    eax,0x1
c002050b:	83 c4 1c             	add    esp,0x1c
c002050e:	c3                   	ret    
c002050f:	90                   	nop

c0020510 <FAT::closeDir(void*)>:
c0020510:	83 ec 1c             	sub    esp,0x1c
c0020513:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020518:	75 07                	jne    c0020521 <FAT::closeDir(void*)+0x11>
c002051a:	b8 04 00 00 00       	mov    eax,0x4
c002051f:	eb 36                	jmp    c0020557 <FAT::closeDir(void*)+0x47>
c0020521:	83 ec 0c             	sub    esp,0xc
c0020524:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020528:	e8 64 5b fe ff       	call   c0006091 <f_closedir>
c002052d:	83 c4 10             	add    esp,0x10
c0020530:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020534:	83 ec 0c             	sub    esp,0xc
c0020537:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002053b:	e8 6c f0 fe ff       	call   c000f5ac <free>
c0020540:	83 c4 10             	add    esp,0x10
c0020543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020547:	85 c0                	test   eax,eax
c0020549:	75 07                	jne    c0020552 <FAT::closeDir(void*)+0x42>
c002054b:	b8 00 00 00 00       	mov    eax,0x0
c0020550:	eb 05                	jmp    c0020557 <FAT::closeDir(void*)+0x47>
c0020552:	b8 01 00 00 00       	mov    eax,0x1
c0020557:	83 c4 1c             	add    esp,0x1c
c002055a:	c3                   	ret    
c002055b:	90                   	nop

c002055c <FAT::seek(void*, unsigned long long)>:
c002055c:	83 ec 2c             	sub    esp,0x2c
c002055f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020567:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002056b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002056f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020574:	75 07                	jne    c002057d <FAT::seek(void*, unsigned long long)+0x21>
c0020576:	b8 04 00 00 00       	mov    eax,0x4
c002057b:	eb 2f                	jmp    c00205ac <FAT::seek(void*, unsigned long long)+0x50>
c002057d:	83 ec 04             	sub    esp,0x4
c0020580:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020584:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020588:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002058c:	e8 47 55 fe ff       	call   c0005ad8 <f_lseek>
c0020591:	83 c4 10             	add    esp,0x10
c0020594:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020598:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002059c:	85 c0                	test   eax,eax
c002059e:	75 07                	jne    c00205a7 <FAT::seek(void*, unsigned long long)+0x4b>
c00205a0:	b8 00 00 00 00       	mov    eax,0x0
c00205a5:	eb 05                	jmp    c00205ac <FAT::seek(void*, unsigned long long)+0x50>
c00205a7:	b8 01 00 00 00       	mov    eax,0x1
c00205ac:	83 c4 2c             	add    esp,0x2c
c00205af:	c3                   	ret    

c00205b0 <fatWrapperReadDisk>:
c00205b0:	83 ec 1c             	sub    esp,0x1c
c00205b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00205c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00205c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00205ca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00205cf:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c00205d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00205da:	83 ec 0c             	sub    esp,0xc
c00205dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205e1:	52                   	push   edx
c00205e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00205e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00205ea:	50                   	push   eax
c00205eb:	e8 3e 58 ff ff       	call   c0015e2e <LogicalDisk::read(unsigned long long, int, void*)>
c00205f0:	83 c4 20             	add    esp,0x20
c00205f3:	83 c4 1c             	add    esp,0x1c
c00205f6:	c3                   	ret    

c00205f7 <fatWrapperWriteDisk>:
c00205f7:	83 ec 1c             	sub    esp,0x1c
c00205fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205fe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020602:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020606:	89 04 24             	mov    DWORD PTR [esp],eax
c0020609:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002060d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020611:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020616:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c002061d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020621:	83 ec 0c             	sub    esp,0xc
c0020624:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020628:	52                   	push   edx
c0020629:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002062d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020631:	50                   	push   eax
c0020632:	e8 63 58 ff ff       	call   c0015e9a <LogicalDisk::write(unsigned long long, int, void*)>
c0020637:	83 c4 20             	add    esp,0x20
c002063a:	83 c4 1c             	add    esp,0x1c
c002063d:	c3                   	ret    

c002063e <fatWrapperIoctl>:
c002063e:	53                   	push   ebx
c002063f:	83 ec 28             	sub    esp,0x28
c0020642:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020646:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002064a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002064e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020652:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020657:	75 31                	jne    c002068a <fatWrapperIoctl+0x4c>
c0020659:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002065d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020661:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020666:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c002066d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020673:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020679:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002067d:	66 89 02             	mov    WORD PTR [edx],ax
c0020680:	b8 00 00 00 00       	mov    eax,0x0
c0020685:	e9 b2 00 00 00       	jmp    c002073c <fatWrapperIoctl+0xfe>
c002068a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002068f:	75 6a                	jne    c00206fb <fatWrapperIoctl+0xbd>
c0020691:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020699:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002069e:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c00206a5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00206ab:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00206b1:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00206b7:	89 c8                	mov    eax,ecx
c00206b9:	89 da                	mov    edx,ebx
c00206bb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00206bf:	c1 e0 0a             	shl    eax,0xa
c00206c2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00206c7:	8b 0c 8d 80 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2480]
c00206ce:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00206d4:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00206da:	89 cb                	mov    ebx,ecx
c00206dc:	c1 fb 1f             	sar    ebx,0x1f
c00206df:	53                   	push   ebx
c00206e0:	51                   	push   ecx
c00206e1:	52                   	push   edx
c00206e2:	50                   	push   eax
c00206e3:	e8 2c 5e 00 00       	call   c0026514 <__udivdi3>
c00206e8:	83 c4 10             	add    esp,0x10
c00206eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00206ef:	89 01                	mov    DWORD PTR [ecx],eax
c00206f1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00206f4:	b8 00 00 00 00       	mov    eax,0x0
c00206f9:	eb 41                	jmp    c002073c <fatWrapperIoctl+0xfe>
c00206fb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020700:	75 07                	jne    c0020709 <fatWrapperIoctl+0xcb>
c0020702:	b8 00 00 00 00       	mov    eax,0x0
c0020707:	eb 33                	jmp    c002073c <fatWrapperIoctl+0xfe>
c0020709:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002070e:	75 19                	jne    c0020729 <fatWrapperIoctl+0xeb>
c0020710:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020714:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002071c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020722:	b8 00 00 00 00       	mov    eax,0x0
c0020727:	eb 13                	jmp    c002073c <fatWrapperIoctl+0xfe>
c0020729:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002072e:	75 07                	jne    c0020737 <fatWrapperIoctl+0xf9>
c0020730:	b8 00 00 00 00       	mov    eax,0x0
c0020735:	eb 05                	jmp    c002073c <fatWrapperIoctl+0xfe>
c0020737:	b8 04 00 00 00       	mov    eax,0x4
c002073c:	83 c4 28             	add    esp,0x28
c002073f:	5b                   	pop    ebx
c0020740:	c3                   	ret    
c0020741:	90                   	nop

c0020742 <FAT::FAT()>:
c0020742:	83 ec 1c             	sub    esp,0x1c
c0020745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020749:	83 ec 0c             	sub    esp,0xc
c002074c:	50                   	push   eax
c002074d:	e8 c4 20 ff ff       	call   c0012816 <Filesystem::Filesystem()>
c0020752:	83 c4 10             	add    esp,0x10
c0020755:	ba 74 ba 02 c0       	mov    edx,0xc002ba74
c002075a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002075e:	89 10                	mov    DWORD PTR [eax],edx
c0020760:	c7 05 a0 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ba0,0x0
c002076a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020772:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020777:	7f 15                	jg     c002078e <FAT::FAT()+0x4c>
c0020779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002077d:	c7 04 85 c0 0b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf440],0xffffffff
c0020788:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002078c:	eb e4                	jmp    c0020772 <FAT::FAT()+0x30>
c002078e:	90                   	nop
c002078f:	83 c4 1c             	add    esp,0x1c
c0020792:	c3                   	ret    
c0020793:	90                   	nop

c0020794 <FAT::fixFilepath(char*)>:
c0020794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020798:	8a 00                	mov    al,BYTE PTR [eax]
c002079a:	3c 40                	cmp    al,0x40
c002079c:	7e 2c                	jle    c00207ca <FAT::fixFilepath(char*)+0x36>
c002079e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207a2:	8a 00                	mov    al,BYTE PTR [eax]
c00207a4:	83 e8 41             	sub    eax,0x41
c00207a7:	88 c2                	mov    dl,al
c00207a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207ad:	88 10                	mov    BYTE PTR [eax],dl
c00207af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207b3:	8a 00                	mov    al,BYTE PTR [eax]
c00207b5:	0f be c0             	movsx  eax,al
c00207b8:	8b 04 85 c0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf440]
c00207bf:	83 c0 30             	add    eax,0x30
c00207c2:	88 c2                	mov    dl,al
c00207c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207c8:	88 10                	mov    BYTE PTR [eax],dl
c00207ca:	90                   	nop
c00207cb:	c3                   	ret    

c00207cc <FAT::open(char const*, void**, FileOpenMode)>:
c00207cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00207d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00207da:	74 0a                	je     c00207e6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00207dc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00207e4:	75 0a                	jne    c00207f0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00207e6:	b8 04 00 00 00       	mov    eax,0x4
c00207eb:	e9 fd 00 00 00       	jmp    c00208ed <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00207f0:	83 ec 08             	sub    esp,0x8
c00207f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00207fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00207fe:	50                   	push   eax
c00207ff:	e8 08 00 fe ff       	call   c000080c <strcpy>
c0020804:	83 c4 10             	add    esp,0x10
c0020807:	83 ec 08             	sub    esp,0x8
c002080a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002080e:	50                   	push   eax
c002080f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020816:	e8 79 ff ff ff       	call   c0020794 <FAT::fixFilepath(char*)>
c002081b:	83 c4 10             	add    esp,0x10
c002081e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020826:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002082d:	83 e0 01             	and    eax,0x1
c0020830:	74 08                	je     c002083a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020832:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002083a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020841:	83 e0 04             	and    eax,0x4
c0020844:	74 10                	je     c0020856 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020846:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002084e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020856:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002085d:	83 e0 02             	and    eax,0x2
c0020860:	74 08                	je     c002086a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020862:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002086a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020871:	83 e0 08             	and    eax,0x8
c0020874:	74 08                	je     c002087e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020876:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002087e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020885:	83 e0 10             	and    eax,0x10
c0020888:	74 08                	je     c0020892 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002088a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020892:	83 ec 0c             	sub    esp,0xc
c0020895:	68 50 02 00 00       	push   0x250
c002089a:	e8 fd ec fe ff       	call   c000f59c <malloc>
c002089f:	83 c4 10             	add    esp,0x10
c00208a2:	89 c2                	mov    edx,eax
c00208a4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00208ab:	89 10                	mov    DWORD PTR [eax],edx
c00208ad:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00208b5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00208bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00208be:	83 ec 04             	sub    esp,0x4
c00208c1:	52                   	push   edx
c00208c2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00208c6:	52                   	push   edx
c00208c7:	50                   	push   eax
c00208c8:	e8 8a 46 fe ff       	call   c0004f57 <f_open>
c00208cd:	83 c4 10             	add    esp,0x10
c00208d0:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00208d7:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00208df:	74 07                	je     c00208e8 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00208e1:	b8 01 00 00 00       	mov    eax,0x1
c00208e6:	eb 05                	jmp    c00208ed <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00208e8:	b8 00 00 00 00       	mov    eax,0x0
c00208ed:	81 c4 1c 01 00 00    	add    esp,0x11c
c00208f3:	c3                   	ret    

c00208f4 <FAT::openDir(char const*, void**)>:
c00208f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00208fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020902:	74 0a                	je     c002090e <FAT::openDir(char const*, void**)+0x1a>
c0020904:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002090c:	75 07                	jne    c0020915 <FAT::openDir(char const*, void**)+0x21>
c002090e:	b8 04 00 00 00       	mov    eax,0x4
c0020913:	eb 7d                	jmp    c0020992 <FAT::openDir(char const*, void**)+0x9e>
c0020915:	83 ec 08             	sub    esp,0x8
c0020918:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002091f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020923:	50                   	push   eax
c0020924:	e8 e3 fe fd ff       	call   c000080c <strcpy>
c0020929:	83 c4 10             	add    esp,0x10
c002092c:	83 ec 08             	sub    esp,0x8
c002092f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020933:	50                   	push   eax
c0020934:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002093b:	e8 54 fe ff ff       	call   c0020794 <FAT::fixFilepath(char*)>
c0020940:	83 c4 10             	add    esp,0x10
c0020943:	83 ec 0c             	sub    esp,0xc
c0020946:	6a 4c                	push   0x4c
c0020948:	e8 4f ec fe ff       	call   c000f59c <malloc>
c002094d:	83 c4 10             	add    esp,0x10
c0020950:	89 c2                	mov    edx,eax
c0020952:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020959:	89 10                	mov    DWORD PTR [eax],edx
c002095b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020962:	8b 00                	mov    eax,DWORD PTR [eax]
c0020964:	83 ec 08             	sub    esp,0x8
c0020967:	8d 54 24 14          	lea    edx,[esp+0x14]
c002096b:	52                   	push   edx
c002096c:	50                   	push   eax
c002096d:	e8 1d 56 fe ff       	call   c0005f8f <f_opendir>
c0020972:	83 c4 10             	add    esp,0x10
c0020975:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002097c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020984:	74 07                	je     c002098d <FAT::openDir(char const*, void**)+0x99>
c0020986:	b8 01 00 00 00       	mov    eax,0x1
c002098b:	eb 05                	jmp    c0020992 <FAT::openDir(char const*, void**)+0x9e>
c002098d:	b8 00 00 00 00       	mov    eax,0x0
c0020992:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020998:	c3                   	ret    
c0020999:	90                   	nop

c002099a <FAT::stat(char const*, unsigned long long*, bool*)>:
c002099a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00209a0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00209a8:	75 0a                	jne    c00209b4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00209aa:	b8 04 00 00 00       	mov    eax,0x4
c00209af:	e9 c9 00 00 00       	jmp    c0020a7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00209b4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00209bc:	75 0a                	jne    c00209c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00209be:	b8 04 00 00 00       	mov    eax,0x4
c00209c3:	e9 b5 00 00 00       	jmp    c0020a7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00209c8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00209d0:	75 0a                	jne    c00209dc <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00209d2:	b8 04 00 00 00       	mov    eax,0x4
c00209d7:	e9 a1 00 00 00       	jmp    c0020a7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00209dc:	83 ec 08             	sub    esp,0x8
c00209df:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00209e6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00209ed:	50                   	push   eax
c00209ee:	e8 19 fe fd ff       	call   c000080c <strcpy>
c00209f3:	83 c4 10             	add    esp,0x10
c00209f6:	83 ec 08             	sub    esp,0x8
c00209f9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020a00:	50                   	push   eax
c0020a01:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a08:	e8 87 fd ff ff       	call   c0020794 <FAT::fixFilepath(char*)>
c0020a0d:	83 c4 10             	add    esp,0x10
c0020a10:	83 ec 08             	sub    esp,0x8
c0020a13:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a17:	50                   	push   eax
c0020a18:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020a1f:	50                   	push   eax
c0020a20:	e8 29 57 fe ff       	call   c000614e <f_stat>
c0020a25:	83 c4 10             	add    esp,0x10
c0020a28:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020a2f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020a36:	85 c0                	test   eax,eax
c0020a38:	74 07                	je     c0020a41 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020a3a:	83 f8 04             	cmp    eax,0x4
c0020a3d:	74 32                	je     c0020a71 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020a3f:	eb 37                	jmp    c0020a78 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020a41:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020a45:	0f b6 c0             	movzx  eax,al
c0020a48:	83 e0 10             	and    eax,0x10
c0020a4b:	0f 95 c2             	setne  dl
c0020a4e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020a55:	88 10                	mov    BYTE PTR [eax],dl
c0020a57:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a5a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a5e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020a65:	89 01                	mov    DWORD PTR [ecx],eax
c0020a67:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020a6a:	b8 00 00 00 00       	mov    eax,0x0
c0020a6f:	eb 0c                	jmp    c0020a7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a71:	b8 02 00 00 00       	mov    eax,0x2
c0020a76:	eb 05                	jmp    c0020a7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a78:	b8 01 00 00 00       	mov    eax,0x1
c0020a7d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020a83:	c3                   	ret    

c0020a84 <FAT::unlink(char const*)>:
c0020a84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020a8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a92:	75 07                	jne    c0020a9b <FAT::unlink(char const*)+0x17>
c0020a94:	b8 04 00 00 00       	mov    eax,0x4
c0020a99:	eb 5c                	jmp    c0020af7 <FAT::unlink(char const*)+0x73>
c0020a9b:	83 ec 08             	sub    esp,0x8
c0020a9e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020aa5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020aa9:	50                   	push   eax
c0020aaa:	e8 5d fd fd ff       	call   c000080c <strcpy>
c0020aaf:	83 c4 10             	add    esp,0x10
c0020ab2:	83 ec 08             	sub    esp,0x8
c0020ab5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ab9:	50                   	push   eax
c0020aba:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ac1:	e8 ce fc ff ff       	call   c0020794 <FAT::fixFilepath(char*)>
c0020ac6:	83 c4 10             	add    esp,0x10
c0020ac9:	83 ec 0c             	sub    esp,0xc
c0020acc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ad0:	50                   	push   eax
c0020ad1:	e8 ca 59 fe ff       	call   c00064a0 <f_unlink>
c0020ad6:	83 c4 10             	add    esp,0x10
c0020ad9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020ae0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020ae7:	85 c0                	test   eax,eax
c0020ae9:	75 07                	jne    c0020af2 <FAT::unlink(char const*)+0x6e>
c0020aeb:	b8 00 00 00 00       	mov    eax,0x0
c0020af0:	eb 05                	jmp    c0020af7 <FAT::unlink(char const*)+0x73>
c0020af2:	b8 01 00 00 00       	mov    eax,0x1
c0020af7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020afd:	c3                   	ret    

c0020afe <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020afe:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020b04:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020b0b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020b12:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020b16:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020b1a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020b22:	75 0a                	jne    c0020b2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020b24:	b8 04 00 00 00       	mov    eax,0x4
c0020b29:	e9 1c 01 00 00       	jmp    c0020c4a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020b2e:	83 ec 08             	sub    esp,0x8
c0020b31:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020b38:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b3c:	50                   	push   eax
c0020b3d:	e8 ca fc fd ff       	call   c000080c <strcpy>
c0020b42:	83 c4 10             	add    esp,0x10
c0020b45:	83 ec 08             	sub    esp,0x8
c0020b48:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020b4c:	50                   	push   eax
c0020b4d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020b54:	e8 3b fc ff ff       	call   c0020794 <FAT::fixFilepath(char*)>
c0020b59:	83 c4 10             	add    esp,0x10
c0020b5c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020b64:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020b6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020b71:	83 e0 01             	and    eax,0x1
c0020b74:	74 08                	je     c0020b7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020b76:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020b7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020b83:	83 e0 02             	and    eax,0x2
c0020b86:	74 08                	je     c0020b90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020b88:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020b90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020b95:	83 e0 04             	and    eax,0x4
c0020b98:	74 08                	je     c0020ba2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020b9a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020ba2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ba7:	83 e0 08             	and    eax,0x8
c0020baa:	74 08                	je     c0020bb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020bac:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020bb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020bb9:	83 e0 01             	and    eax,0x1
c0020bbc:	74 08                	je     c0020bc6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020bbe:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020bc6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020bcb:	83 e0 02             	and    eax,0x2
c0020bce:	74 08                	je     c0020bd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020bd0:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020bd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020bdd:	83 e0 04             	and    eax,0x4
c0020be0:	74 08                	je     c0020bea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020be2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020bea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020bef:	83 e0 08             	and    eax,0x8
c0020bf2:	74 08                	je     c0020bfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020bf4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020bfc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020c03:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020c0a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020c12:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020c1a:	83 ec 04             	sub    esp,0x4
c0020c1d:	52                   	push   edx
c0020c1e:	50                   	push   eax
c0020c1f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c23:	50                   	push   eax
c0020c24:	e8 19 5f fe ff       	call   c0006b42 <f_chmod>
c0020c29:	83 c4 10             	add    esp,0x10
c0020c2c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020c33:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020c3a:	85 c0                	test   eax,eax
c0020c3c:	75 07                	jne    c0020c45 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020c3e:	b8 00 00 00 00       	mov    eax,0x0
c0020c43:	eb 05                	jmp    c0020c4a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c45:	b8 01 00 00 00       	mov    eax,0x1
c0020c4a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020c50:	c3                   	ret    
c0020c51:	90                   	nop

c0020c52 <FAT::rename(char const*, char const*)>:
c0020c52:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020c58:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020c60:	74 0a                	je     c0020c6c <FAT::rename(char const*, char const*)+0x1a>
c0020c62:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020c6a:	75 0a                	jne    c0020c76 <FAT::rename(char const*, char const*)+0x24>
c0020c6c:	b8 04 00 00 00       	mov    eax,0x4
c0020c71:	e9 98 00 00 00       	jmp    c0020d0e <FAT::rename(char const*, char const*)+0xbc>
c0020c76:	83 ec 08             	sub    esp,0x8
c0020c79:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020c80:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c87:	50                   	push   eax
c0020c88:	e8 7f fb fd ff       	call   c000080c <strcpy>
c0020c8d:	83 c4 10             	add    esp,0x10
c0020c90:	83 ec 08             	sub    esp,0x8
c0020c93:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020c9a:	50                   	push   eax
c0020c9b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ca2:	e8 ed fa ff ff       	call   c0020794 <FAT::fixFilepath(char*)>
c0020ca7:	83 c4 10             	add    esp,0x10
c0020caa:	83 ec 08             	sub    esp,0x8
c0020cad:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020cb4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cb8:	50                   	push   eax
c0020cb9:	e8 4e fb fd ff       	call   c000080c <strcpy>
c0020cbe:	83 c4 10             	add    esp,0x10
c0020cc1:	83 ec 08             	sub    esp,0x8
c0020cc4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020cc8:	50                   	push   eax
c0020cc9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020cd0:	e8 bf fa ff ff       	call   c0020794 <FAT::fixFilepath(char*)>
c0020cd5:	83 c4 10             	add    esp,0x10
c0020cd8:	83 ec 08             	sub    esp,0x8
c0020cdb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020cdf:	50                   	push   eax
c0020ce0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ce7:	50                   	push   eax
c0020ce8:	e8 62 5b fe ff       	call   c000684f <f_rename>
c0020ced:	83 c4 10             	add    esp,0x10
c0020cf0:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020cf7:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020cfe:	85 c0                	test   eax,eax
c0020d00:	75 07                	jne    c0020d09 <FAT::rename(char const*, char const*)+0xb7>
c0020d02:	b8 00 00 00 00       	mov    eax,0x0
c0020d07:	eb 05                	jmp    c0020d0e <FAT::rename(char const*, char const*)+0xbc>
c0020d09:	b8 01 00 00 00       	mov    eax,0x1
c0020d0e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020d14:	c3                   	ret    
c0020d15:	90                   	nop

c0020d16 <FAT::mkdir(char const*)>:
c0020d16:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d1c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d24:	75 07                	jne    c0020d2d <FAT::mkdir(char const*)+0x17>
c0020d26:	b8 04 00 00 00       	mov    eax,0x4
c0020d2b:	eb 5c                	jmp    c0020d89 <FAT::mkdir(char const*)+0x73>
c0020d2d:	83 ec 08             	sub    esp,0x8
c0020d30:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d37:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d3b:	50                   	push   eax
c0020d3c:	e8 cb fa fd ff       	call   c000080c <strcpy>
c0020d41:	83 c4 10             	add    esp,0x10
c0020d44:	83 ec 08             	sub    esp,0x8
c0020d47:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d4b:	50                   	push   eax
c0020d4c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d53:	e8 3c fa ff ff       	call   c0020794 <FAT::fixFilepath(char*)>
c0020d58:	83 c4 10             	add    esp,0x10
c0020d5b:	83 ec 0c             	sub    esp,0xc
c0020d5e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d62:	50                   	push   eax
c0020d63:	e8 bb 58 fe ff       	call   c0006623 <f_mkdir>
c0020d68:	83 c4 10             	add    esp,0x10
c0020d6b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d72:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020d79:	85 c0                	test   eax,eax
c0020d7b:	75 07                	jne    c0020d84 <FAT::mkdir(char const*)+0x6e>
c0020d7d:	b8 00 00 00 00       	mov    eax,0x0
c0020d82:	eb 05                	jmp    c0020d89 <FAT::mkdir(char const*)+0x73>
c0020d84:	b8 01 00 00 00       	mov    eax,0x1
c0020d89:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d8f:	c3                   	ret    

c0020d90 <FAT::exists(char const*)>:
c0020d90:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020d96:	83 ec 08             	sub    esp,0x8
c0020d99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020da0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020da4:	50                   	push   eax
c0020da5:	e8 62 fa fd ff       	call   c000080c <strcpy>
c0020daa:	83 c4 10             	add    esp,0x10
c0020dad:	83 ec 08             	sub    esp,0x8
c0020db0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020db4:	50                   	push   eax
c0020db5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020dbc:	e8 d3 f9 ff ff       	call   c0020794 <FAT::fixFilepath(char*)>
c0020dc1:	83 c4 10             	add    esp,0x10
c0020dc4:	83 ec 08             	sub    esp,0x8
c0020dc7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020dce:	50                   	push   eax
c0020dcf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020dd3:	50                   	push   eax
c0020dd4:	e8 75 53 fe ff       	call   c000614e <f_stat>
c0020dd9:	83 c4 10             	add    esp,0x10
c0020ddc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020de3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020dea:	85 c0                	test   eax,eax
c0020dec:	75 04                	jne    c0020df2 <FAT::exists(char const*)+0x62>
c0020dee:	b0 01                	mov    al,0x1
c0020df0:	eb 02                	jmp    c0020df4 <FAT::exists(char const*)+0x64>
c0020df2:	b0 00                	mov    al,0x0
c0020df4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020dfa:	c3                   	ret    
c0020dfb:	90                   	nop

c0020dfc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020dfc:	b8 08 00 00 00       	mov    eax,0x8
c0020e01:	c3                   	ret    

c0020e02 <ISO9660::seek(void*, unsigned long long)>:
c0020e02:	53                   	push   ebx
c0020e03:	b8 04 00 00 00       	mov    eax,0x4
c0020e08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020e0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020e10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020e14:	85 d2                	test   edx,edx
c0020e16:	74 17                	je     c0020e2f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020e18:	89 c8                	mov    eax,ecx
c0020e1a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020e1d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020e20:	b8 01 00 00 00       	mov    eax,0x1
c0020e25:	73 08                	jae    c0020e2f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020e27:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020e2a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020e2d:	31 c0                	xor    eax,eax
c0020e2f:	5b                   	pop    ebx
c0020e30:	c3                   	ret    
c0020e31:	90                   	nop

c0020e32 <ISO9660::tell(void*, unsigned long long*)>:
c0020e32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e3a:	85 d2                	test   edx,edx
c0020e3c:	74 12                	je     c0020e50 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020e3e:	85 c0                	test   eax,eax
c0020e40:	74 0e                	je     c0020e50 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020e42:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020e45:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020e48:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020e4b:	89 10                	mov    DWORD PTR [eax],edx
c0020e4d:	31 c0                	xor    eax,eax
c0020e4f:	c3                   	ret    
c0020e50:	b8 04 00 00 00       	mov    eax,0x4
c0020e55:	c3                   	ret    

c0020e56 <ISO9660::getName()>:
c0020e56:	b8 d4 ba 02 c0       	mov    eax,0xc002bad4
c0020e5b:	c3                   	ret    

c0020e5c <ISO9660::stat(void*, unsigned long long*)>:
c0020e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e64:	85 d2                	test   edx,edx
c0020e66:	74 12                	je     c0020e7a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020e68:	85 c0                	test   eax,eax
c0020e6a:	74 0e                	je     c0020e7a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020e6c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020e6f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020e72:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020e75:	89 10                	mov    DWORD PTR [eax],edx
c0020e77:	31 c0                	xor    eax,eax
c0020e79:	c3                   	ret    
c0020e7a:	b8 04 00 00 00       	mov    eax,0x4
c0020e7f:	c3                   	ret    

c0020e80 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020e80:	b8 01 00 00 00       	mov    eax,0x1
c0020e85:	c3                   	ret    

c0020e86 <ISO9660::unlink(char const*)>:
c0020e86:	b8 01 00 00 00       	mov    eax,0x1
c0020e8b:	c3                   	ret    

c0020e8c <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020e8c:	b8 01 00 00 00       	mov    eax,0x1
c0020e91:	c3                   	ret    

c0020e92 <ISO9660::rename(char const*, char const*)>:
c0020e92:	b8 01 00 00 00       	mov    eax,0x1
c0020e97:	c3                   	ret    

c0020e98 <ISO9660::mkdir(char const*)>:
c0020e98:	b8 01 00 00 00       	mov    eax,0x1
c0020e9d:	c3                   	ret    

c0020e9e <ISO9660::close(void*)>:
c0020e9e:	83 ec 0c             	sub    esp,0xc
c0020ea1:	b8 04 00 00 00       	mov    eax,0x4
c0020ea6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020eaa:	85 d2                	test   edx,edx
c0020eac:	74 0e                	je     c0020ebc <ISO9660::close(void*)+0x1e>
c0020eae:	83 ec 0c             	sub    esp,0xc
c0020eb1:	52                   	push   edx
c0020eb2:	e8 f5 e6 fe ff       	call   c000f5ac <free>
c0020eb7:	83 c4 10             	add    esp,0x10
c0020eba:	31 c0                	xor    eax,eax
c0020ebc:	83 c4 0c             	add    esp,0xc
c0020ebf:	c3                   	ret    

c0020ec0 <ISO9660::closeDir(void*)>:
c0020ec0:	83 ec 0c             	sub    esp,0xc
c0020ec3:	b8 04 00 00 00       	mov    eax,0x4
c0020ec8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ecc:	85 d2                	test   edx,edx
c0020ece:	74 0e                	je     c0020ede <ISO9660::closeDir(void*)+0x1e>
c0020ed0:	83 ec 0c             	sub    esp,0xc
c0020ed3:	52                   	push   edx
c0020ed4:	e8 d3 e6 fe ff       	call   c000f5ac <free>
c0020ed9:	83 c4 10             	add    esp,0x10
c0020edc:	31 c0                	xor    eax,eax
c0020ede:	83 c4 0c             	add    esp,0xc
c0020ee1:	c3                   	ret    

c0020ee2 <ISO9660::~ISO9660()>:
c0020ee2:	83 ec 0c             	sub    esp,0xc
c0020ee5:	ba f8 ba 02 c0       	mov    edx,0xc002baf8
c0020eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eee:	89 10                	mov    DWORD PTR [eax],edx
c0020ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ef4:	83 ec 0c             	sub    esp,0xc
c0020ef7:	50                   	push   eax
c0020ef8:	e8 3d 19 ff ff       	call   c001283a <Filesystem::~Filesystem()>
c0020efd:	83 c4 10             	add    esp,0x10
c0020f00:	90                   	nop
c0020f01:	83 c4 0c             	add    esp,0xc
c0020f04:	c3                   	ret    
c0020f05:	90                   	nop

c0020f06 <ISO9660::~ISO9660()>:
c0020f06:	83 ec 0c             	sub    esp,0xc
c0020f09:	83 ec 0c             	sub    esp,0xc
c0020f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f10:	e8 cd ff ff ff       	call   c0020ee2 <ISO9660::~ISO9660()>
c0020f15:	83 c4 10             	add    esp,0x10
c0020f18:	83 ec 08             	sub    esp,0x8
c0020f1b:	6a 08                	push   0x8
c0020f1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f21:	e8 0d 15 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0020f26:	83 c4 10             	add    esp,0x10
c0020f29:	83 c4 0c             	add    esp,0xc
c0020f2c:	c3                   	ret    

c0020f2d <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020f2d:	55                   	push   ebp
c0020f2e:	31 c9                	xor    ecx,ecx
c0020f30:	57                   	push   edi
c0020f31:	56                   	push   esi
c0020f32:	53                   	push   ebx
c0020f33:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020f37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020f3b:	89 eb                	mov    ebx,ebp
c0020f3d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020f41:	39 ce                	cmp    esi,ecx
c0020f43:	7e 17                	jle    c0020f5c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020f45:	31 d2                	xor    edx,edx
c0020f47:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020f4b:	7d 13                	jge    c0020f60 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020f4d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020f51:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020f54:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020f57:	75 0d                	jne    c0020f66 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020f59:	42                   	inc    edx
c0020f5a:	eb eb                	jmp    c0020f47 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020f5c:	31 c0                	xor    eax,eax
c0020f5e:	eb 0a                	jmp    c0020f6a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020f60:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020f64:	eb 04                	jmp    c0020f6a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020f66:	41                   	inc    ecx
c0020f67:	43                   	inc    ebx
c0020f68:	eb d7                	jmp    c0020f41 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020f6a:	5b                   	pop    ebx
c0020f6b:	5e                   	pop    esi
c0020f6c:	5f                   	pop    edi
c0020f6d:	5d                   	pop    ebp
c0020f6e:	c3                   	ret    

c0020f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020f6f:	57                   	push   edi
c0020f70:	56                   	push   esi
c0020f71:	53                   	push   ebx
c0020f72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020f76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020f7a:	39 0d a0 0c 03 c0    	cmp    DWORD PTR ds:0xc0030ca0,ecx
c0020f80:	75 08                	jne    c0020f8a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0020f82:	38 05 14 cb 02 c0    	cmp    BYTE PTR ds:0xc002cb14,al
c0020f88:	74 2b                	je     c0020fb5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0020f8a:	83 ec 0c             	sub    esp,0xc
c0020f8d:	a2 14 cb 02 c0       	mov    ds:0xc002cb14,al
c0020f92:	68 c0 0c 03 c0       	push   0xc0030cc0
c0020f97:	0f be c0             	movsx  eax,al
c0020f9a:	6a 01                	push   0x1
c0020f9c:	89 0d a0 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca0,ecx
c0020fa2:	31 db                	xor    ebx,ebx
c0020fa4:	53                   	push   ebx
c0020fa5:	51                   	push   ecx
c0020fa6:	ff 34 85 7c da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2584]
c0020fad:	e8 7c 4e ff ff       	call   c0015e2e <LogicalDisk::read(unsigned long long, int, void*)>
c0020fb2:	83 c4 20             	add    esp,0x20
c0020fb5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0020fb9:	be c0 0c 03 c0       	mov    esi,0xc0030cc0
c0020fbe:	b9 00 08 00 00       	mov    ecx,0x800
c0020fc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fc5:	5b                   	pop    ebx
c0020fc6:	5e                   	pop    esi
c0020fc7:	5f                   	pop    edi
c0020fc8:	c3                   	ret    
c0020fc9:	90                   	nop

c0020fca <ISO9660::tryMount(LogicalDisk*, int)>:
c0020fca:	81 ec 10 08 00 00    	sub    esp,0x810
c0020fd0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020fd7:	83 c0 41             	add    eax,0x41
c0020fda:	0f be c0             	movsx  eax,al
c0020fdd:	50                   	push   eax
c0020fde:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fe2:	50                   	push   eax
c0020fe3:	6a 10                	push   0x10
c0020fe5:	e8 85 ff ff ff       	call   c0020f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020fea:	83 c4 10             	add    esp,0x10
c0020fed:	31 c0                	xor    eax,eax
c0020fef:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020ff4:	75 1d                	jne    c0021013 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ff6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020ffb:	75 16                	jne    c0021013 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ffd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021002:	75 0f                	jne    c0021013 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021004:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021009:	75 08                	jne    c0021013 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002100b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021010:	0f 94 c0             	sete   al
c0021013:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021019:	c3                   	ret    

c002101a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002101a:	55                   	push   ebp
c002101b:	57                   	push   edi
c002101c:	56                   	push   esi
c002101d:	53                   	push   ebx
c002101e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021024:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002102b:	85 ed                	test   ebp,ebp
c002102d:	0f 84 da 01 00 00    	je     c002120d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021033:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002103b:	0f 84 cc 01 00 00    	je     c002120d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021041:	b8 01 00 00 00       	mov    eax,0x1
c0021046:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002104a:	0f 85 c2 01 00 00    	jne    c0021212 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021050:	31 d2                	xor    edx,edx
c0021052:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021059:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002105c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002105f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021062:	89 04 24             	mov    DWORD PTR [esp],eax
c0021065:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021069:	01 c8                	add    eax,ecx
c002106b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002106e:	11 da                	adc    edx,ebx
c0021070:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021074:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021078:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002107c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021080:	19 d7                	sbb    edi,edx
c0021082:	72 11                	jb     c0021095 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021084:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021087:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002108b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002108f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021093:	eb 0c                	jmp    c00210a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021095:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021099:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002109d:	29 ce                	sub    esi,ecx
c002109f:	19 df                	sbb    edi,ebx
c00210a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00210a4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00210a7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00210ab:	c1 e0 0b             	shl    eax,0xb
c00210ae:	01 c8                	add    eax,ecx
c00210b0:	11 da                	adc    edx,ebx
c00210b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00210b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00210b9:	51                   	push   ecx
c00210ba:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00210be:	50                   	push   eax
c00210bf:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00210c3:	53                   	push   ebx
c00210c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00210c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210cc:	0f ac d0 0b          	shrd   eax,edx,0xb
c00210d0:	50                   	push   eax
c00210d1:	e8 99 fe ff ff       	call   c0020f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210d6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00210d9:	b8 00 08 00 00       	mov    eax,0x800
c00210de:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00210e4:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00210e8:	29 d0                	sub    eax,edx
c00210ea:	83 c4 10             	add    esp,0x10
c00210ed:	89 f9                	mov    ecx,edi
c00210ef:	39 c6                	cmp    esi,eax
c00210f1:	83 d9 00             	sbb    ecx,0x0
c00210f4:	7d 1b                	jge    c0021111 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00210f6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00210fb:	75 12                	jne    c002110f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00210fd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021104:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002110a:	e9 fa 00 00 00       	jmp    c0021209 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002110f:	89 f0                	mov    eax,esi
c0021111:	01 d3                	add    ebx,edx
c0021113:	31 d2                	xor    edx,edx
c0021115:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021119:	39 c2                	cmp    edx,eax
c002111b:	7d 14                	jge    c0021131 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002111d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021124:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021128:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002112b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002112e:	42                   	inc    edx
c002112f:	eb e8                	jmp    c0021119 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021131:	89 c2                	mov    edx,eax
c0021133:	85 c0                	test   eax,eax
c0021135:	79 02                	jns    c0021139 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021137:	31 d2                	xor    edx,edx
c0021139:	01 c2                	add    edx,eax
c002113b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002113e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021145:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021149:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002114d:	99                   	cdq    
c002114e:	01 c1                	add    ecx,eax
c0021150:	11 d3                	adc    ebx,edx
c0021152:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021156:	29 c6                	sub    esi,eax
c0021158:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002115c:	19 d7                	sbb    edi,edx
c002115e:	89 34 24             	mov    DWORD PTR [esp],esi
c0021161:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021165:	b8 ff 07 00 00       	mov    eax,0x7ff
c002116a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002116d:	b8 00 00 00 00       	mov    eax,0x0
c0021172:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021176:	7d 43                	jge    c00211bb <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021178:	52                   	push   edx
c0021179:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002117d:	50                   	push   eax
c002117e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021182:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021186:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002118a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002118e:	50                   	push   eax
c002118f:	e8 db fd ff ff       	call   c0020f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021194:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002119c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00211a1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00211a9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00211b1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00211b6:	83 c4 10             	add    esp,0x10
c00211b9:	eb aa                	jmp    c0021165 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00211bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211bf:	0b 04 24             	or     eax,DWORD PTR [esp]
c00211c2:	74 2a                	je     c00211ee <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00211c4:	50                   	push   eax
c00211c5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211c9:	50                   	push   eax
c00211ca:	8d 74 24 28          	lea    esi,[esp+0x28]
c00211ce:	56                   	push   esi
c00211cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00211d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00211d7:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00211db:	51                   	push   ecx
c00211dc:	e8 8e fd ff ff       	call   c0020f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211e1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00211e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211eb:	83 c4 10             	add    esp,0x10
c00211ee:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00211f5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00211f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00211fd:	89 18                	mov    DWORD PTR [eax],ebx
c00211ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021203:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021206:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021209:	31 c0                	xor    eax,eax
c002120b:	eb 05                	jmp    c0021212 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002120d:	b8 04 00 00 00       	mov    eax,0x4
c0021212:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021218:	5b                   	pop    ebx
c0021219:	5e                   	pop    esi
c002121a:	5f                   	pop    edi
c002121b:	5d                   	pop    ebp
c002121c:	c3                   	ret    
c002121d:	90                   	nop

c002121e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002121e:	55                   	push   ebp
c002121f:	57                   	push   edi
c0021220:	56                   	push   esi
c0021221:	53                   	push   ebx
c0021222:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021228:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002122f:	85 ed                	test   ebp,ebp
c0021231:	0f 84 51 02 00 00    	je     c0021488 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021237:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002123f:	0f 84 43 02 00 00    	je     c0021488 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021245:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021248:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002124b:	75 0a                	jne    c0021257 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002124d:	b8 07 00 00 00       	mov    eax,0x7
c0021252:	e9 36 02 00 00       	jmp    c002148d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021257:	50                   	push   eax
c0021258:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002125c:	50                   	push   eax
c002125d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021264:	53                   	push   ebx
c0021265:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021268:	c1 e0 0b             	shl    eax,0xb
c002126b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c002126e:	c1 e8 0b             	shr    eax,0xb
c0021271:	50                   	push   eax
c0021272:	e8 f8 fc ff ff       	call   c0020f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021277:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002127a:	83 c4 10             	add    esp,0x10
c002127d:	89 c1                	mov    ecx,eax
c002127f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021282:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021288:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002128b:	84 db                	test   bl,bl
c002128d:	0f 85 8b 00 00 00    	jne    c002131e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021293:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021299:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002129c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00212a2:	29 c6                	sub    esi,eax
c00212a4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00212a8:	89 f3                	mov    ebx,esi
c00212aa:	89 f1                	mov    ecx,esi
c00212ac:	c1 fb 1f             	sar    ebx,0x1f
c00212af:	01 f0                	add    eax,esi
c00212b1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00212b4:	11 da                	adc    edx,ebx
c00212b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00212b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212bd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00212c0:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00212c3:	89 d8                	mov    eax,ebx
c00212c5:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00212c9:	ba 00 00 00 00       	mov    edx,0x0
c00212ce:	19 f8                	sbb    eax,edi
c00212d0:	b8 00 00 00 00       	mov    eax,0x0
c00212d5:	73 08                	jae    c00212df <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00212d7:	89 f0                	mov    eax,esi
c00212d9:	89 fa                	mov    edx,edi
c00212db:	29 c8                	sub    eax,ecx
c00212dd:	19 da                	sbb    edx,ebx
c00212df:	89 d7                	mov    edi,edx
c00212e1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00212e4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00212e7:	09 c7                	or     edi,eax
c00212e9:	0f 84 5e ff ff ff    	je     c002124d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00212ef:	57                   	push   edi
c00212f0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212f4:	50                   	push   eax
c00212f5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00212fc:	53                   	push   ebx
c00212fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021300:	c1 e0 0b             	shl    eax,0xb
c0021303:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021307:	c1 e8 0b             	shr    eax,0xb
c002130a:	50                   	push   eax
c002130b:	e8 5f fc ff ff       	call   c0020f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021310:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021313:	83 c4 10             	add    esp,0x10
c0021316:	25 ff 07 00 00       	and    eax,0x7ff
c002131b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002131e:	31 ff                	xor    edi,edi
c0021320:	56                   	push   esi
c0021321:	6a 28                	push   0x28
c0021323:	6a 00                	push   0x0
c0021325:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021329:	50                   	push   eax
c002132a:	e8 21 f4 fd ff       	call   c0000750 <memset>
c002132f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021332:	25 ff 07 00 00       	and    eax,0x7ff
c0021337:	89 c6                	mov    esi,eax
c0021339:	83 c6 21             	add    esi,0x21
c002133c:	83 d7 00             	adc    edi,0x0
c002133f:	83 c4 10             	add    esp,0x10
c0021342:	31 c9                	xor    ecx,ecx
c0021344:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002134b:	83 f9 28             	cmp    ecx,0x28
c002134e:	88 04 24             	mov    BYTE PTR [esp],al
c0021351:	0f 94 c2             	sete   dl
c0021354:	88 d0                	mov    al,dl
c0021356:	ba ff 07 00 00       	mov    edx,0x7ff
c002135b:	39 f2                	cmp    edx,esi
c002135d:	ba 00 00 00 00       	mov    edx,0x0
c0021362:	19 fa                	sbb    edx,edi
c0021364:	0f 92 c2             	setb   dl
c0021367:	09 c2                	or     edx,eax
c0021369:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002136d:	0f 94 c0             	sete   al
c0021370:	08 d0                	or     al,dl
c0021372:	75 16                	jne    c002138a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021374:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021378:	74 10                	je     c002138a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002137a:	8a 04 24             	mov    al,BYTE PTR [esp]
c002137d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021381:	41                   	inc    ecx
c0021382:	83 c6 01             	add    esi,0x1
c0021385:	83 d7 00             	adc    edi,0x0
c0021388:	eb ba                	jmp    c0021344 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002138a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021391:	83 ec 0c             	sub    esp,0xc
c0021394:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021398:	56                   	push   esi
c0021399:	e8 ce f3 fd ff       	call   c000076c <strlen>
c002139e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00213a5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00213a9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00213b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00213b4:	5a                   	pop    edx
c00213b5:	25 ff 07 00 00       	and    eax,0x7ff
c00213ba:	59                   	pop    ecx
c00213bb:	01 f8                	add    eax,edi
c00213bd:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00213c3:	83 e0 02             	and    eax,0x2
c00213c6:	3c 01                	cmp    al,0x1
c00213c8:	19 c0                	sbb    eax,eax
c00213ca:	83 c0 02             	add    eax,0x2
c00213cd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00213d1:	56                   	push   esi
c00213d2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00213d6:	50                   	push   eax
c00213d7:	e8 30 f4 fd ff       	call   c000080c <strcpy>
c00213dc:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00213e0:	83 c4 10             	add    esp,0x10
c00213e3:	84 c0                	test   al,al
c00213e5:	75 21                	jne    c0021408 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00213e7:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00213ef:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00213f7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00213ff:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021406:	eb 28                	jmp    c0021430 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021408:	fe c8                	dec    al
c002140a:	75 24                	jne    c0021430 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002140c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021414:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002141c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021424:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002142b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021430:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021434:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002143b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021442:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021444:	0f b6 f3             	movzx  esi,bl
c0021447:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002144e:	31 db                	xor    ebx,ebx
c0021450:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021456:	89 df                	mov    edi,ebx
c0021458:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002145b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002145e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021461:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021464:	39 c6                	cmp    esi,eax
c0021466:	19 d7                	sbb    edi,edx
c0021468:	72 10                	jb     c002147a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002146a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021471:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021478:	eb 0a                	jmp    c0021484 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002147a:	29 f0                	sub    eax,esi
c002147c:	19 da                	sbb    edx,ebx
c002147e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021481:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021484:	31 c0                	xor    eax,eax
c0021486:	eb 05                	jmp    c002148d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021488:	b8 04 00 00 00       	mov    eax,0x4
c002148d:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021493:	5b                   	pop    ebx
c0021494:	5e                   	pop    esi
c0021495:	5f                   	pop    edi
c0021496:	5d                   	pop    ebp
c0021497:	c3                   	ret    

c0021498 <readRoot(unsigned int*, unsigned int*, char)>:
c0021498:	57                   	push   edi
c0021499:	56                   	push   esi
c002149a:	81 ec 38 08 00 00    	sub    esp,0x838
c00214a0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00214a8:	50                   	push   eax
c00214a9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00214ad:	50                   	push   eax
c00214ae:	6a 10                	push   0x10
c00214b0:	e8 ba fa ff ff       	call   c0020f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214b5:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00214bc:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00214c0:	b9 22 00 00 00       	mov    ecx,0x22
c00214c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00214c7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00214ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00214d2:	89 10                	mov    DWORD PTR [eax],edx
c00214d4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00214db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00214df:	89 10                	mov    DWORD PTR [eax],edx
c00214e1:	81 c4 44 08 00 00    	add    esp,0x844
c00214e7:	b0 01                	mov    al,0x1
c00214e9:	5e                   	pop    esi
c00214ea:	5f                   	pop    edi
c00214eb:	c3                   	ret    

c00214ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00214ec:	55                   	push   ebp
c00214ed:	57                   	push   edi
c00214ee:	56                   	push   esi
c00214ef:	53                   	push   ebx
c00214f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214f6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00214fd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021504:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021508:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002150c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021510:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021514:	75 03                	jne    c0021519 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021516:	83 c3 02             	add    ebx,0x2
c0021519:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002151c:	75 03                	jne    c0021521 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002151e:	43                   	inc    ebx
c002151f:	eb f8                	jmp    c0021519 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021521:	51                   	push   ecx
c0021522:	68 00 01 00 00       	push   0x100
c0021527:	6a 00                	push   0x0
c0021529:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002152d:	50                   	push   eax
c002152e:	e8 1d f2 fd ff       	call   c0000750 <memset>
c0021533:	83 c4 10             	add    esp,0x10
c0021536:	31 d2                	xor    edx,edx
c0021538:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002153b:	84 c0                	test   al,al
c002153d:	74 21                	je     c0021560 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002153f:	3c 2f                	cmp    al,0x2f
c0021541:	75 0b                	jne    c002154e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021543:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021547:	bd 01 00 00 00       	mov    ebp,0x1
c002154c:	eb 14                	jmp    c0021562 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002154e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021551:	80 f9 19             	cmp    cl,0x19
c0021554:	77 03                	ja     c0021559 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021556:	83 e8 20             	sub    eax,0x20
c0021559:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002155d:	42                   	inc    edx
c002155e:	eb d8                	jmp    c0021538 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021560:	31 ed                	xor    ebp,ebp
c0021562:	83 ec 0c             	sub    esp,0xc
c0021565:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002156c:	e8 2b e0 fe ff       	call   c000f59c <malloc>
c0021571:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021578:	89 c6                	mov    esi,eax
c002157a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021580:	c1 ef 0b             	shr    edi,0xb
c0021583:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002158a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002158e:	83 c4 10             	add    esp,0x10
c0021591:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002159a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00215a1:	74 28                	je     c00215cb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00215a3:	52                   	push   edx
c00215a4:	57                   	push   edi
c00215a5:	50                   	push   eax
c00215a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00215aa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00215b1:	e8 b9 f9 ff ff       	call   c0020f6f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215ba:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00215c1:	05 00 08 00 00       	add    eax,0x800
c00215c6:	83 c4 10             	add    esp,0x10
c00215c9:	eb cb                	jmp    c0021596 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00215cb:	83 ec 0c             	sub    esp,0xc
c00215ce:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00215d2:	57                   	push   edi
c00215d3:	e8 94 f1 fd ff       	call   c000076c <strlen>
c00215d8:	50                   	push   eax
c00215d9:	57                   	push   edi
c00215da:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00215e1:	56                   	push   esi
c00215e2:	e8 46 f9 ff ff       	call   c0020f2d <__memmem(unsigned char*, int, unsigned char*, int)>
c00215e7:	83 c4 20             	add    esp,0x20
c00215ea:	85 c0                	test   eax,eax
c00215ec:	75 13                	jne    c0021601 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00215ee:	83 ec 0c             	sub    esp,0xc
c00215f1:	56                   	push   esi
c00215f2:	e8 b5 df fe ff       	call   c000f5ac <free>
c00215f7:	83 c4 10             	add    esp,0x10
c00215fa:	31 c0                	xor    eax,eax
c00215fc:	e9 b3 00 00 00       	jmp    c00216b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021601:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021605:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021609:	c1 e7 08             	shl    edi,0x8
c002160c:	c1 e2 10             	shl    edx,0x10
c002160f:	09 d7                	or     edi,edx
c0021611:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021615:	09 d7                	or     edi,edx
c0021617:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002161b:	c1 e2 18             	shl    edx,0x18
c002161e:	09 d7                	or     edi,edx
c0021620:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021624:	89 d1                	mov    ecx,edx
c0021626:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002162a:	c1 e1 08             	shl    ecx,0x8
c002162d:	c1 e2 10             	shl    edx,0x10
c0021630:	09 ca                	or     edx,ecx
c0021632:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021636:	09 ca                	or     edx,ecx
c0021638:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002163c:	c1 e1 18             	shl    ecx,0x18
c002163f:	09 ca                	or     edx,ecx
c0021641:	89 e9                	mov    ecx,ebp
c0021643:	84 c9                	test   cl,cl
c0021645:	74 3c                	je     c0021683 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021647:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002164b:	83 ec 0c             	sub    esp,0xc
c002164e:	56                   	push   esi
c002164f:	e8 58 df fe ff       	call   c000f5ac <free>
c0021654:	83 c4 0c             	add    esp,0xc
c0021657:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002165e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021663:	50                   	push   eax
c0021664:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002166b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021672:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021676:	52                   	push   edx
c0021677:	57                   	push   edi
c0021678:	53                   	push   ebx
c0021679:	e8 6e fe ff ff       	call   c00214ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002167e:	83 c4 20             	add    esp,0x20
c0021681:	eb 31                	jmp    c00216b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021683:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021686:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002168d:	d0 e8                	shr    al,1
c002168f:	89 3b                	mov    DWORD PTR [ebx],edi
c0021691:	83 e0 01             	and    eax,0x1
c0021694:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002169b:	83 ec 0c             	sub    esp,0xc
c002169e:	89 13                	mov    DWORD PTR [ebx],edx
c00216a0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00216a7:	89 03                	mov    DWORD PTR [ebx],eax
c00216a9:	56                   	push   esi
c00216aa:	e8 fd de fe ff       	call   c000f5ac <free>
c00216af:	83 c4 10             	add    esp,0x10
c00216b2:	b0 01                	mov    al,0x1
c00216b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00216ba:	5b                   	pop    ebx
c00216bb:	5e                   	pop    esi
c00216bc:	5f                   	pop    edi
c00216bd:	5d                   	pop    ebp
c00216be:	c3                   	ret    

c00216bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00216bf:	55                   	push   ebp
c00216c0:	57                   	push   edi
c00216c1:	56                   	push   esi
c00216c2:	53                   	push   ebx
c00216c3:	83 ec 20             	sub    esp,0x20
c00216c6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00216ca:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00216ce:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00216d2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00216da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00216e2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00216e7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00216ed:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00216f3:	57                   	push   edi
c00216f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216f8:	50                   	push   eax
c00216f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216fd:	50                   	push   eax
c00216fe:	e8 95 fd ff ff       	call   c0021498 <readRoot(unsigned int*, unsigned int*, char)>
c0021703:	5a                   	pop    edx
c0021704:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021708:	e8 5f f0 fd ff       	call   c000076c <strlen>
c002170d:	83 c4 10             	add    esp,0x10
c0021710:	83 f8 03             	cmp    eax,0x3
c0021713:	77 17                	ja     c002172c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021719:	89 03                	mov    DWORD PTR [ebx],eax
c002171b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002171f:	89 06                	mov    DWORD PTR [esi],eax
c0021721:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021728:	b0 01                	mov    al,0x1
c002172a:	eb 19                	jmp    c0021745 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002172c:	50                   	push   eax
c002172d:	55                   	push   ebp
c002172e:	57                   	push   edi
c002172f:	56                   	push   esi
c0021730:	53                   	push   ebx
c0021731:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021735:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021739:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002173d:	e8 aa fd ff ff       	call   c00214ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021742:	83 c4 20             	add    esp,0x20
c0021745:	83 c4 1c             	add    esp,0x1c
c0021748:	5b                   	pop    ebx
c0021749:	5e                   	pop    esi
c002174a:	5f                   	pop    edi
c002174b:	5d                   	pop    ebp
c002174c:	c3                   	ret    
c002174d:	90                   	nop

c002174e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002174e:	57                   	push   edi
c002174f:	56                   	push   esi
c0021750:	53                   	push   ebx
c0021751:	83 ec 10             	sub    esp,0x10
c0021754:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021758:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002175c:	85 ff                	test   edi,edi
c002175e:	0f 84 8b 00 00 00    	je     c00217ef <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021764:	85 f6                	test   esi,esi
c0021766:	0f 84 83 00 00 00    	je     c00217ef <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002176c:	b8 03 00 00 00       	mov    eax,0x3
c0021771:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021776:	75 7c                	jne    c00217f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021778:	83 ec 0c             	sub    esp,0xc
c002177b:	6a 1c                	push   0x1c
c002177d:	e8 1a de fe ff       	call   c000f59c <malloc>
c0021782:	89 07                	mov    DWORD PTR [edi],eax
c0021784:	89 c3                	mov    ebx,eax
c0021786:	58                   	pop    eax
c0021787:	8d 44 24 18          	lea    eax,[esp+0x18]
c002178b:	50                   	push   eax
c002178c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002178f:	50                   	push   eax
c0021790:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021794:	50                   	push   eax
c0021795:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021799:	50                   	push   eax
c002179a:	56                   	push   esi
c002179b:	e8 1f ff ff ff       	call   c00216bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00217a0:	83 c4 20             	add    esp,0x20
c00217a3:	84 c0                	test   al,al
c00217a5:	74 07                	je     c00217ae <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00217a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00217ac:	74 0b                	je     c00217b9 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00217ae:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00217b2:	b8 01 00 00 00       	mov    eax,0x1
c00217b7:	eb 3b                	jmp    c00217f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00217b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217bd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00217c1:	89 03                	mov    DWORD PTR [ebx],eax
c00217c3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00217ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217ce:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00217d5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217dc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00217df:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00217e6:	8a 06                	mov    al,BYTE PTR [esi]
c00217e8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00217eb:	31 c0                	xor    eax,eax
c00217ed:	eb 05                	jmp    c00217f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00217ef:	b8 04 00 00 00       	mov    eax,0x4
c00217f4:	83 c4 10             	add    esp,0x10
c00217f7:	5b                   	pop    ebx
c00217f8:	5e                   	pop    esi
c00217f9:	5f                   	pop    edi
c00217fa:	c3                   	ret    
c00217fb:	90                   	nop

c00217fc <ISO9660::exists(char const*)>:
c00217fc:	83 ec 28             	sub    esp,0x28
c00217ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021803:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021807:	52                   	push   edx
c0021808:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002180b:	52                   	push   edx
c002180c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021810:	52                   	push   edx
c0021811:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021815:	52                   	push   edx
c0021816:	50                   	push   eax
c0021817:	e8 a3 fe ff ff       	call   c00216bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002181c:	83 c4 3c             	add    esp,0x3c
c002181f:	c3                   	ret    

c0021820 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021820:	56                   	push   esi
c0021821:	53                   	push   ebx
c0021822:	83 ec 14             	sub    esp,0x14
c0021825:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021829:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002182d:	85 db                	test   ebx,ebx
c002182f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021833:	0f 94 c2             	sete   dl
c0021836:	85 f6                	test   esi,esi
c0021838:	0f 94 c0             	sete   al
c002183b:	08 c2                	or     dl,al
c002183d:	75 68                	jne    c00218a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002183f:	85 c9                	test   ecx,ecx
c0021841:	74 64                	je     c00218a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021843:	83 ec 0c             	sub    esp,0xc
c0021846:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021849:	8d 44 24 18          	lea    eax,[esp+0x18]
c002184d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021853:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002185a:	50                   	push   eax
c002185b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002185e:	50                   	push   eax
c002185f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021863:	50                   	push   eax
c0021864:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021868:	50                   	push   eax
c0021869:	51                   	push   ecx
c002186a:	e8 50 fe ff ff       	call   c00216bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002186f:	83 c4 20             	add    esp,0x20
c0021872:	ba 01 00 00 00       	mov    edx,0x1
c0021877:	84 c0                	test   al,al
c0021879:	74 31                	je     c00218ac <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002187b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002187f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021886:	89 03                	mov    DWORD PTR [ebx],eax
c0021888:	ba 00 00 00 00       	mov    edx,0x0
c002188d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021891:	85 c0                	test   eax,eax
c0021893:	0f 95 06             	setne  BYTE PTR [esi]
c0021896:	74 14                	je     c00218ac <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021898:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002189e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218a5:	eb 05                	jmp    c00218ac <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00218a7:	ba 04 00 00 00       	mov    edx,0x4
c00218ac:	83 c4 14             	add    esp,0x14
c00218af:	89 d0                	mov    eax,edx
c00218b1:	5b                   	pop    ebx
c00218b2:	5e                   	pop    esi
c00218b3:	c3                   	ret    

c00218b4 <ISO9660::openDir(char const*, void**)>:
c00218b4:	57                   	push   edi
c00218b5:	56                   	push   esi
c00218b6:	53                   	push   ebx
c00218b7:	83 ec 10             	sub    esp,0x10
c00218ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218be:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218c2:	85 ff                	test   edi,edi
c00218c4:	74 7b                	je     c0021941 <ISO9660::openDir(char const*, void**)+0x8d>
c00218c6:	85 f6                	test   esi,esi
c00218c8:	74 77                	je     c0021941 <ISO9660::openDir(char const*, void**)+0x8d>
c00218ca:	83 ec 0c             	sub    esp,0xc
c00218cd:	6a 1c                	push   0x1c
c00218cf:	e8 c8 dc fe ff       	call   c000f59c <malloc>
c00218d4:	89 07                	mov    DWORD PTR [edi],eax
c00218d6:	89 c3                	mov    ebx,eax
c00218d8:	58                   	pop    eax
c00218d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00218dd:	50                   	push   eax
c00218de:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00218e1:	50                   	push   eax
c00218e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218e6:	50                   	push   eax
c00218e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218eb:	50                   	push   eax
c00218ec:	56                   	push   esi
c00218ed:	e8 cd fd ff ff       	call   c00216bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00218f2:	83 c4 20             	add    esp,0x20
c00218f5:	84 c0                	test   al,al
c00218f7:	74 07                	je     c0021900 <ISO9660::openDir(char const*, void**)+0x4c>
c00218f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00218fe:	75 0b                	jne    c002190b <ISO9660::openDir(char const*, void**)+0x57>
c0021900:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021904:	b8 01 00 00 00       	mov    eax,0x1
c0021909:	eb 3b                	jmp    c0021946 <ISO9660::openDir(char const*, void**)+0x92>
c002190b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002190f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021913:	89 03                	mov    DWORD PTR [ebx],eax
c0021915:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002191c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021920:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021927:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002192e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021931:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021938:	8a 06                	mov    al,BYTE PTR [esi]
c002193a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002193d:	31 c0                	xor    eax,eax
c002193f:	eb 05                	jmp    c0021946 <ISO9660::openDir(char const*, void**)+0x92>
c0021941:	b8 04 00 00 00       	mov    eax,0x4
c0021946:	83 c4 10             	add    esp,0x10
c0021949:	5b                   	pop    ebx
c002194a:	5e                   	pop    esi
c002194b:	5f                   	pop    edi
c002194c:	c3                   	ret    
c002194d:	90                   	nop

c002194e <ISO9660::ISO9660()>:
c002194e:	83 ec 0c             	sub    esp,0xc
c0021951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021955:	83 ec 0c             	sub    esp,0xc
c0021958:	50                   	push   eax
c0021959:	e8 b8 0e ff ff       	call   c0012816 <Filesystem::Filesystem()>
c002195e:	83 c4 10             	add    esp,0x10
c0021961:	ba f8 ba 02 c0       	mov    edx,0xc002baf8
c0021966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002196a:	89 10                	mov    DWORD PTR [eax],edx
c002196c:	90                   	nop
c002196d:	83 c4 0c             	add    esp,0xc
c0021970:	c3                   	ret    
c0021971:	90                   	nop

c0021972 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021972:	83 ec 1c             	sub    esp,0x1c
c0021975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021979:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002197d:	89 10                	mov    DWORD PTR [eax],edx
c002197f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021983:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021987:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002198a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002198e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021992:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021995:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002199a:	75 23                	jne    c00219bf <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c002199c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00219a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219a9:	0f af c2             	imul   eax,edx
c00219ac:	85 c0                	test   eax,eax
c00219ae:	79 03                	jns    c00219b3 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00219b0:	83 c0 03             	add    eax,0x3
c00219b3:	c1 f8 02             	sar    eax,0x2
c00219b6:	05 a0 0f 00 00       	add    eax,0xfa0
c00219bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00219bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00219c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00219ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ce:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00219d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219d9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00219e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00219e7:	c1 e0 02             	shl    eax,0x2
c00219ea:	83 ec 0c             	sub    esp,0xc
c00219ed:	50                   	push   eax
c00219ee:	e8 a9 db fe ff       	call   c000f59c <malloc>
c00219f3:	83 c4 10             	add    esp,0x10
c00219f6:	89 c2                	mov    edx,eax
c00219f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219fc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00219ff:	83 ec 04             	sub    esp,0x4
c0021a02:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a06:	50                   	push   eax
c0021a07:	6a 01                	push   0x1
c0021a09:	6a 04                	push   0x4
c0021a0b:	e8 55 71 fe ff       	call   c0008b65 <src_new>
c0021a10:	83 c4 10             	add    esp,0x10
c0021a13:	89 c2                	mov    edx,eax
c0021a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a19:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a20:	85 c0                	test   eax,eax
c0021a22:	74 10                	je     c0021a34 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021a24:	83 ec 0c             	sub    esp,0xc
c0021a27:	68 58 bb 02 c0       	push   0xc002bb58
c0021a2c:	e8 14 82 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0021a31:	83 c4 10             	add    esp,0x10
c0021a34:	a0 c0 18 03 c0       	mov    al,ds:0xc00318c0
c0021a39:	83 f0 01             	xor    eax,0x1
c0021a3c:	84 c0                	test   al,al
c0021a3e:	74 57                	je     c0021a97 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021a40:	a1 74 bb 02 c0       	mov    eax,ds:0xc002bb74
c0021a45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a51:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021a59:	7f 35                	jg     c0021a90 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021a5b:	83 ec 0c             	sub    esp,0xc
c0021a5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a62:	e8 d8 53 00 00       	call   c0026e3f <__floatsisf>
c0021a67:	83 c4 10             	add    esp,0x10
c0021a6a:	8b 15 74 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb74
c0021a70:	83 ec 08             	sub    esp,0x8
c0021a73:	52                   	push   edx
c0021a74:	50                   	push   eax
c0021a75:	e8 d7 4f 00 00       	call   c0026a51 <__mulsf3>
c0021a7a:	83 c4 10             	add    esp,0x10
c0021a7d:	89 c2                	mov    edx,eax
c0021a7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a83:	89 14 85 c0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb40],edx
c0021a8a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021a8e:	eb c1                	jmp    c0021a51 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021a90:	c6 05 c0 18 03 c0 01 	mov    BYTE PTR ds:0xc00318c0,0x1
c0021a97:	90                   	nop
c0021a98:	83 c4 1c             	add    esp,0x1c
c0021a9b:	c3                   	ret    

c0021a9c <SoundChannel::~SoundChannel()>:
c0021a9c:	83 ec 0c             	sub    esp,0xc
c0021a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021aa6:	83 ec 0c             	sub    esp,0xc
c0021aa9:	50                   	push   eax
c0021aaa:	e8 fd da fe ff       	call   c000f5ac <free>
c0021aaf:	83 c4 10             	add    esp,0x10
c0021ab2:	90                   	nop
c0021ab3:	83 c4 0c             	add    esp,0xc
c0021ab6:	c3                   	ret    
c0021ab7:	90                   	nop

c0021ab8 <SoundChannel::getSampleRate()>:
c0021ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021abe:	c3                   	ret    
c0021abf:	90                   	nop

c0021ac0 <SoundChannel::getBits()>:
c0021ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ac4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ac7:	c3                   	ret    

c0021ac8 <SoundChannel::getBufferUsed()>:
c0021ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021acc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021acf:	c3                   	ret    

c0021ad0 <SoundChannel::getBufferSize()>:
c0021ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ad7:	c3                   	ret    

c0021ad8 <SoundChannel::unbuffer(float*, int, int)>:
c0021ad8:	56                   	push   esi
c0021ad9:	53                   	push   ebx
c0021ada:	83 ec 40             	sub    esp,0x40
c0021add:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021ae4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ae8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021aeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021aef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021af3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021af7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021afb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021aff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021b03:	e8 37 53 00 00       	call   c0026e3f <__floatsisf>
c0021b08:	5a                   	pop    edx
c0021b09:	89 c6                	mov    esi,eax
c0021b0b:	ff 33                	push   DWORD PTR [ebx]
c0021b0d:	e8 2d 53 00 00       	call   c0026e3f <__floatsisf>
c0021b12:	59                   	pop    ecx
c0021b13:	5a                   	pop    edx
c0021b14:	50                   	push   eax
c0021b15:	56                   	push   esi
c0021b16:	e8 f9 50 00 00       	call   c0026c14 <__divsf3>
c0021b1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b1e:	e8 ec 65 00 00       	call   c002810f <__extendsfdf2>
c0021b23:	59                   	pop    ecx
c0021b24:	5e                   	pop    esi
c0021b25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021b2d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021b35:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b39:	50                   	push   eax
c0021b3a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021b3d:	e8 18 6c fe ff       	call   c000875a <src_process>
c0021b42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b46:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021b49:	83 c4 0c             	add    esp,0xc
c0021b4c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021b4f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021b52:	29 d0                	sub    eax,edx
c0021b54:	c1 e0 02             	shl    eax,0x2
c0021b57:	50                   	push   eax
c0021b58:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021b5b:	50                   	push   eax
c0021b5c:	51                   	push   ecx
c0021b5d:	e8 26 eb fd ff       	call   c0000688 <memmove>
c0021b62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b66:	83 c4 44             	add    esp,0x44
c0021b69:	5b                   	pop    ebx
c0021b6a:	5e                   	pop    esi
c0021b6b:	c3                   	ret    

c0021b6c <SoundChannel::buffer16(short*, int)>:
c0021b6c:	55                   	push   ebp
c0021b6d:	57                   	push   edi
c0021b6e:	56                   	push   esi
c0021b6f:	53                   	push   ebx
c0021b70:	83 ec 1c             	sub    esp,0x1c
c0021b73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021b77:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021b7a:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021b7d:	0f 84 d2 00 00 00    	je     c0021c55 <SoundChannel::buffer16(short*, int)+0xe9>
c0021b83:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021b87:	85 ed                	test   ebp,ebp
c0021b89:	0f 8e c6 00 00 00    	jle    c0021c55 <SoundChannel::buffer16(short*, int)+0xe9>
c0021b8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021b93:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021b98:	83 ec 0c             	sub    esp,0xc
c0021b9b:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021b9e:	50                   	push   eax
c0021b9f:	e8 9b 52 00 00       	call   c0026e3f <__floatsisf>
c0021ba4:	59                   	pop    ecx
c0021ba5:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021ba8:	5f                   	pop    edi
c0021ba9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021bac:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021baf:	55                   	push   ebp
c0021bb0:	50                   	push   eax
c0021bb1:	e8 9b 4e 00 00       	call   c0026a51 <__mulsf3>
c0021bb6:	83 c4 10             	add    esp,0x10
c0021bb9:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021bbc:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021bbf:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021bc2:	0f 84 99 00 00 00    	je     c0021c61 <SoundChannel::buffer16(short*, int)+0xf5>
c0021bc8:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021bcd:	74 78                	je     c0021c47 <SoundChannel::buffer16(short*, int)+0xdb>
c0021bcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021bd3:	83 ec 0c             	sub    esp,0xc
c0021bd6:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021bda:	50                   	push   eax
c0021bdb:	e8 5f 52 00 00       	call   c0026e3f <__floatsisf>
c0021be0:	5f                   	pop    edi
c0021be1:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021be4:	5a                   	pop    edx
c0021be5:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021be8:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021beb:	55                   	push   ebp
c0021bec:	50                   	push   eax
c0021bed:	e8 5f 4e 00 00       	call   c0026a51 <__mulsf3>
c0021bf2:	83 c4 10             	add    esp,0x10
c0021bf5:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021bf8:	be 02 00 00 00       	mov    esi,0x2
c0021bfd:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021c00:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021c03:	74 46                	je     c0021c4b <SoundChannel::buffer16(short*, int)+0xdf>
c0021c05:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021c09:	eb 36                	jmp    c0021c41 <SoundChannel::buffer16(short*, int)+0xd5>
c0021c0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c0f:	83 ec 0c             	sub    esp,0xc
c0021c12:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021c16:	46                   	inc    esi
c0021c17:	50                   	push   eax
c0021c18:	e8 22 52 00 00       	call   c0026e3f <__floatsisf>
c0021c1d:	5a                   	pop    edx
c0021c1e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021c21:	59                   	pop    ecx
c0021c22:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021c25:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c2c:	50                   	push   eax
c0021c2d:	e8 1f 4e 00 00       	call   c0026a51 <__mulsf3>
c0021c32:	83 c4 10             	add    esp,0x10
c0021c35:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021c39:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021c3c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021c3f:	74 0a                	je     c0021c4b <SoundChannel::buffer16(short*, int)+0xdf>
c0021c41:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021c45:	75 c4                	jne    c0021c0b <SoundChannel::buffer16(short*, int)+0x9f>
c0021c47:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021c4b:	83 c4 1c             	add    esp,0x1c
c0021c4e:	89 f0                	mov    eax,esi
c0021c50:	5b                   	pop    ebx
c0021c51:	5e                   	pop    esi
c0021c52:	5f                   	pop    edi
c0021c53:	5d                   	pop    ebp
c0021c54:	c3                   	ret    
c0021c55:	83 c4 1c             	add    esp,0x1c
c0021c58:	31 f6                	xor    esi,esi
c0021c5a:	5b                   	pop    ebx
c0021c5b:	89 f0                	mov    eax,esi
c0021c5d:	5e                   	pop    esi
c0021c5e:	5f                   	pop    edi
c0021c5f:	5d                   	pop    ebp
c0021c60:	c3                   	ret    
c0021c61:	be 01 00 00 00       	mov    esi,0x1
c0021c66:	eb e3                	jmp    c0021c4b <SoundChannel::buffer16(short*, int)+0xdf>

c0021c68 <SoundChannel::buffer8(unsigned char*, int)>:
c0021c68:	55                   	push   ebp
c0021c69:	57                   	push   edi
c0021c6a:	56                   	push   esi
c0021c6b:	53                   	push   ebx
c0021c6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c70:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021c74:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021c77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021c7b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021c7e:	74 7a                	je     c0021cfa <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021c80:	85 ff                	test   edi,edi
c0021c82:	7e 76                	jle    c0021cfa <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021c84:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021c88:	8d 70 01             	lea    esi,[eax+0x1]
c0021c8b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021c8e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021c91:	8b 1c 9d c0 14 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceb40]
c0021c98:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021c9b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021c9e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ca1:	74 5e                	je     c0021d01 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021ca3:	83 ff 01             	cmp    edi,0x1
c0021ca6:	74 4b                	je     c0021cf3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021ca8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021cac:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021caf:	8d 70 01             	lea    esi,[eax+0x1]
c0021cb2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021cb5:	8b 1c 9d c0 14 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceb40]
c0021cbc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021cbf:	b8 02 00 00 00       	mov    eax,0x2
c0021cc4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021cc7:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021cca:	75 23                	jne    c0021cef <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021ccc:	eb 27                	jmp    c0021cf5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021cce:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021cd3:	8d 71 01             	lea    esi,[ecx+0x1]
c0021cd6:	40                   	inc    eax
c0021cd7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021cda:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021cdd:	8b 1c 9d c0 14 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceb40]
c0021ce4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021ce7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021cea:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ced:	74 06                	je     c0021cf5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021cef:	39 c7                	cmp    edi,eax
c0021cf1:	75 db                	jne    c0021cce <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021cf3:	89 f8                	mov    eax,edi
c0021cf5:	5b                   	pop    ebx
c0021cf6:	5e                   	pop    esi
c0021cf7:	5f                   	pop    edi
c0021cf8:	5d                   	pop    ebp
c0021cf9:	c3                   	ret    
c0021cfa:	5b                   	pop    ebx
c0021cfb:	31 c0                	xor    eax,eax
c0021cfd:	5e                   	pop    esi
c0021cfe:	5f                   	pop    edi
c0021cff:	5d                   	pop    ebp
c0021d00:	c3                   	ret    
c0021d01:	b8 01 00 00 00       	mov    eax,0x1
c0021d06:	eb ed                	jmp    c0021cf5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021d08 <SoundDevice::SoundDevice(char const*)>:
c0021d08:	83 ec 1c             	sub    esp,0x1c
c0021d0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d0f:	83 ec 08             	sub    esp,0x8
c0021d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021d16:	50                   	push   eax
c0021d17:	e8 2c 1e ff ff       	call   c0013b48 <Device::Device(char const*)>
c0021d1c:	83 c4 10             	add    esp,0x10
c0021d1f:	ba 80 bb 02 c0       	mov    edx,0xc002bb80
c0021d24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d28:	89 10                	mov    DWORD PTR [eax],edx
c0021d2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d2e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d3c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021d46:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d4e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021d53:	7f 19                	jg     c0021d6e <SoundDevice::SoundDevice(char const*)+0x66>
c0021d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d5d:	83 c2 54             	add    edx,0x54
c0021d60:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021d68:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021d6c:	eb e0                	jmp    c0021d4e <SoundDevice::SoundDevice(char const*)+0x46>
c0021d6e:	90                   	nop
c0021d6f:	83 c4 1c             	add    esp,0x1c
c0021d72:	c3                   	ret    
c0021d73:	90                   	nop

c0021d74 <SoundDevice::~SoundDevice()>:
c0021d74:	53                   	push   ebx
c0021d75:	83 ec 18             	sub    esp,0x18
c0021d78:	ba 80 bb 02 c0       	mov    edx,0xc002bb80
c0021d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d81:	89 10                	mov    DWORD PTR [eax],edx
c0021d83:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d8b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021d90:	7f 46                	jg     c0021dd8 <SoundDevice::~SoundDevice()+0x64>
c0021d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d9a:	83 c2 54             	add    edx,0x54
c0021d9d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021da1:	85 c0                	test   eax,eax
c0021da3:	74 2d                	je     c0021dd2 <SoundDevice::~SoundDevice()+0x5e>
c0021da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021da9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dad:	83 c2 54             	add    edx,0x54
c0021db0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021db4:	85 db                	test   ebx,ebx
c0021db6:	74 1a                	je     c0021dd2 <SoundDevice::~SoundDevice()+0x5e>
c0021db8:	83 ec 0c             	sub    esp,0xc
c0021dbb:	53                   	push   ebx
c0021dbc:	e8 db fc ff ff       	call   c0021a9c <SoundChannel::~SoundChannel()>
c0021dc1:	83 c4 10             	add    esp,0x10
c0021dc4:	83 ec 08             	sub    esp,0x8
c0021dc7:	6a 2c                	push   0x2c
c0021dc9:	53                   	push   ebx
c0021dca:	e8 64 06 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0021dcf:	83 c4 10             	add    esp,0x10
c0021dd2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021dd6:	eb b3                	jmp    c0021d8b <SoundDevice::~SoundDevice()+0x17>
c0021dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ddc:	83 ec 0c             	sub    esp,0xc
c0021ddf:	50                   	push   eax
c0021de0:	e8 2d 1a ff ff       	call   c0013812 <Device::~Device()>
c0021de5:	83 c4 10             	add    esp,0x10
c0021de8:	90                   	nop
c0021de9:	83 c4 18             	add    esp,0x18
c0021dec:	5b                   	pop    ebx
c0021ded:	c3                   	ret    

c0021dee <SoundDevice::~SoundDevice()>:
c0021dee:	83 ec 0c             	sub    esp,0xc
c0021df1:	83 ec 0c             	sub    esp,0xc
c0021df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021df8:	e8 77 ff ff ff       	call   c0021d74 <SoundDevice::~SoundDevice()>
c0021dfd:	83 c4 10             	add    esp,0x10
c0021e00:	83 ec 08             	sub    esp,0x8
c0021e03:	68 e4 01 00 00       	push   0x1e4
c0021e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e0c:	e8 22 06 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0021e11:	83 c4 10             	add    esp,0x10
c0021e14:	83 c4 0c             	add    esp,0xc
c0021e17:	c3                   	ret    

c0021e18 <SoundDevice::getFreeChannelNum()>:
c0021e18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e1c:	31 c0                	xor    eax,eax
c0021e1e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021e26:	74 09                	je     c0021e31 <SoundDevice::getFreeChannelNum()+0x19>
c0021e28:	40                   	inc    eax
c0021e29:	83 f8 20             	cmp    eax,0x20
c0021e2c:	75 f0                	jne    c0021e1e <SoundDevice::getFreeChannelNum()+0x6>
c0021e2e:	83 c8 ff             	or     eax,0xffffffff
c0021e31:	c3                   	ret    

c0021e32 <SoundDevice::addChannel(SoundChannel*)>:
c0021e32:	56                   	push   esi
c0021e33:	53                   	push   ebx
c0021e34:	51                   	push   ecx
c0021e35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021e3d:	53                   	push   ebx
c0021e3e:	e8 d5 ff ff ff       	call   c0021e18 <SoundDevice::getFreeChannelNum()>
c0021e43:	5a                   	pop    edx
c0021e44:	83 f8 ff             	cmp    eax,0xffffffff
c0021e47:	74 51                	je     c0021e9a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021e49:	85 f6                	test   esi,esi
c0021e4b:	74 4d                	je     c0021e9a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021e4d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021e54:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021e5b:	75 30                	jne    c0021e8d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021e5d:	83 ec 0c             	sub    esp,0xc
c0021e60:	56                   	push   esi
c0021e61:	e8 52 fc ff ff       	call   c0021ab8 <SoundChannel::getSampleRate()>
c0021e66:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021e6c:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e6f:	e8 4c fc ff ff       	call   c0021ac0 <SoundChannel::getBits()>
c0021e74:	83 c4 0c             	add    esp,0xc
c0021e77:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021e7d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021e7f:	50                   	push   eax
c0021e80:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021e86:	53                   	push   ebx
c0021e87:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0021e8a:	83 c4 10             	add    esp,0x10
c0021e8d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021e93:	b8 01 00 00 00       	mov    eax,0x1
c0021e98:	eb 03                	jmp    c0021e9d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021e9a:	83 c8 ff             	or     eax,0xffffffff
c0021e9d:	5a                   	pop    edx
c0021e9e:	5b                   	pop    ebx
c0021e9f:	5e                   	pop    esi
c0021ea0:	c3                   	ret    
c0021ea1:	90                   	nop

c0021ea2 <SoundDevice::removeChannel(int)>:
c0021ea2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eaa:	83 fa 1f             	cmp    edx,0x1f
c0021ead:	77 23                	ja     c0021ed2 <SoundDevice::removeChannel(int)+0x30>
c0021eaf:	8d 14 90             	lea    edx,[eax+edx*4]
c0021eb2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021eb9:	74 17                	je     c0021ed2 <SoundDevice::removeChannel(int)+0x30>
c0021ebb:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021ec5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021ecb:	75 05                	jne    c0021ed2 <SoundDevice::removeChannel(int)+0x30>
c0021ecd:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ecf:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0021ed2:	c3                   	ret    
c0021ed3:	90                   	nop

c0021ed4 <SoundDevice::floatTo16(float*, short*, int)>:
c0021ed4:	57                   	push   edi
c0021ed5:	56                   	push   esi
c0021ed6:	53                   	push   ebx
c0021ed7:	31 db                	xor    ebx,ebx
c0021ed9:	83 ec 10             	sub    esp,0x10
c0021edc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021ee0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021ee4:	0f 8d d0 00 00 00    	jge    c0021fba <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0021eea:	83 ec 0c             	sub    esp,0xc
c0021eed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ef1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021ef4:	e8 16 62 00 00       	call   c002810f <__extendsfdf2>
c0021ef9:	83 c4 10             	add    esp,0x10
c0021efc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f00:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f04:	68 00 00 f0 3f       	push   0x3ff00000
c0021f09:	6a 00                	push   0x0
c0021f0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f13:	e8 83 51 00 00       	call   c002709b <__adddf3>
c0021f18:	83 c4 10             	add    esp,0x10
c0021f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f23:	68 00 00 e0 3f       	push   0x3fe00000
c0021f28:	6a 00                	push   0x0
c0021f2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f32:	e8 e1 57 00 00       	call   c0027718 <__muldf3>
c0021f37:	83 c4 10             	add    esp,0x10
c0021f3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f42:	68 c0 ff df 40       	push   0x40dfffc0
c0021f47:	6a 00                	push   0x0
c0021f49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f51:	e8 c2 57 00 00       	call   c0027718 <__muldf3>
c0021f56:	59                   	pop    ecx
c0021f57:	5f                   	pop    edi
c0021f58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021f5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021f60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f68:	e8 7e 60 00 00       	call   c0027feb <__truncdfsf2>
c0021f6d:	5a                   	pop    edx
c0021f6e:	89 c7                	mov    edi,eax
c0021f70:	59                   	pop    ecx
c0021f71:	68 00 fe ff 46       	push   0x46fffe00
c0021f76:	50                   	push   eax
c0021f77:	e8 19 51 00 00       	call   c0027095 <__gesf2>
c0021f7c:	83 c4 10             	add    esp,0x10
c0021f7f:	85 c0                	test   eax,eax
c0021f81:	78 08                	js     c0021f8b <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0021f83:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0021f89:	eb 29                	jmp    c0021fb4 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0021f8b:	50                   	push   eax
c0021f8c:	50                   	push   eax
c0021f8d:	6a 00                	push   0x0
c0021f8f:	57                   	push   edi
c0021f90:	e8 04 51 00 00       	call   c0027099 <__lesf2>
c0021f95:	83 c4 10             	add    esp,0x10
c0021f98:	85 c0                	test   eax,eax
c0021f9a:	7f 08                	jg     c0021fa4 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0021f9c:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0021fa2:	eb 10                	jmp    c0021fb4 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0021fa4:	83 ec 0c             	sub    esp,0xc
c0021fa7:	57                   	push   edi
c0021fa8:	e8 ff 61 00 00       	call   c00281ac <lrintf>
c0021fad:	83 c4 10             	add    esp,0x10
c0021fb0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0021fb4:	43                   	inc    ebx
c0021fb5:	e9 26 ff ff ff       	jmp    c0021ee0 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0021fba:	83 c4 10             	add    esp,0x10
c0021fbd:	5b                   	pop    ebx
c0021fbe:	5e                   	pop    esi
c0021fbf:	5f                   	pop    edi
c0021fc0:	c3                   	ret    
c0021fc1:	90                   	nop

c0021fc2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021fc2:	57                   	push   edi
c0021fc3:	56                   	push   esi
c0021fc4:	53                   	push   ebx
c0021fc5:	31 db                	xor    ebx,ebx
c0021fc7:	83 ec 10             	sub    esp,0x10
c0021fca:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021fce:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021fd2:	0f 8d cb 00 00 00    	jge    c00220a3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fdf:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021fe2:	e8 28 61 00 00       	call   c002810f <__extendsfdf2>
c0021fe7:	83 c4 10             	add    esp,0x10
c0021fea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ff2:	68 00 00 f0 3f       	push   0x3ff00000
c0021ff7:	6a 00                	push   0x0
c0021ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022001:	e8 95 50 00 00       	call   c002709b <__adddf3>
c0022006:	83 c4 10             	add    esp,0x10
c0022009:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002200d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022011:	68 00 00 e0 3f       	push   0x3fe00000
c0022016:	6a 00                	push   0x0
c0022018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002201c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022020:	e8 f3 56 00 00       	call   c0027718 <__muldf3>
c0022025:	83 c4 10             	add    esp,0x10
c0022028:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002202c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022030:	68 00 00 60 40       	push   0x40600000
c0022035:	6a 00                	push   0x0
c0022037:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002203b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002203f:	e8 d4 56 00 00       	call   c0027718 <__muldf3>
c0022044:	59                   	pop    ecx
c0022045:	5f                   	pop    edi
c0022046:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002204a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002204e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022056:	e8 90 5f 00 00       	call   c0027feb <__truncdfsf2>
c002205b:	5a                   	pop    edx
c002205c:	89 c7                	mov    edi,eax
c002205e:	59                   	pop    ecx
c002205f:	68 00 00 fe 42       	push   0x42fe0000
c0022064:	50                   	push   eax
c0022065:	e8 2b 50 00 00       	call   c0027095 <__gesf2>
c002206a:	83 c4 10             	add    esp,0x10
c002206d:	85 c0                	test   eax,eax
c002206f:	78 06                	js     c0022077 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022071:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022075:	eb 26                	jmp    c002209d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022077:	50                   	push   eax
c0022078:	50                   	push   eax
c0022079:	6a 00                	push   0x0
c002207b:	57                   	push   edi
c002207c:	e8 18 50 00 00       	call   c0027099 <__lesf2>
c0022081:	83 c4 10             	add    esp,0x10
c0022084:	85 c0                	test   eax,eax
c0022086:	7f 06                	jg     c002208e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022088:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002208c:	eb 0f                	jmp    c002209d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002208e:	83 ec 0c             	sub    esp,0xc
c0022091:	57                   	push   edi
c0022092:	e8 15 61 00 00       	call   c00281ac <lrintf>
c0022097:	83 c4 10             	add    esp,0x10
c002209a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002209d:	43                   	inc    ebx
c002209e:	e9 2b ff ff ff       	jmp    c0021fce <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00220a3:	83 c4 10             	add    esp,0x10
c00220a6:	5b                   	pop    ebx
c00220a7:	5e                   	pop    esi
c00220a8:	5f                   	pop    edi
c00220a9:	c3                   	ret    

c00220aa <SoundDevice::getAudio(int, float*, float*)>:
c00220aa:	55                   	push   ebp
c00220ab:	31 ed                	xor    ebp,ebp
c00220ad:	57                   	push   edi
c00220ae:	56                   	push   esi
c00220af:	31 f6                	xor    esi,esi
c00220b1:	53                   	push   ebx
c00220b2:	83 ec 20             	sub    esp,0x20
c00220b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00220b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00220bd:	c1 e0 02             	shl    eax,0x2
c00220c0:	50                   	push   eax
c00220c1:	6a 00                	push   0x0
c00220c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00220c7:	e8 84 e6 fd ff       	call   c0000750 <memset>
c00220cc:	83 c4 10             	add    esp,0x10
c00220cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220d7:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00220de:	85 c9                	test   ecx,ecx
c00220e0:	74 52                	je     c0022134 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00220e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00220e6:	99                   	cdq    
c00220e7:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00220ed:	50                   	push   eax
c00220ee:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00220f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00220f8:	51                   	push   ecx
c00220f9:	e8 da f9 ff ff       	call   c0021ad8 <SoundChannel::unbuffer(float*, int, int)>
c00220fe:	31 d2                	xor    edx,edx
c0022100:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022104:	83 c4 10             	add    esp,0x10
c0022107:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002210b:	7d 1e                	jge    c002212b <SoundDevice::getAudio(int, float*, float*)+0x81>
c002210d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022111:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022115:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022118:	89 cf                	mov    edi,ecx
c002211a:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022120:	0f af ca             	imul   ecx,edx
c0022123:	42                   	inc    edx
c0022124:	01 e9                	add    ecx,ebp
c0022126:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022129:	eb dc                	jmp    c0022107 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002212b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002212f:	45                   	inc    ebp
c0022130:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022134:	46                   	inc    esi
c0022135:	83 fe 20             	cmp    esi,0x20
c0022138:	75 9d                	jne    c00220d7 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002213a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002213e:	83 c4 1c             	add    esp,0x1c
c0022141:	5b                   	pop    ebx
c0022142:	5e                   	pop    esi
c0022143:	5f                   	pop    edi
c0022144:	5d                   	pop    ebp
c0022145:	c3                   	ret    

c0022146 <PCI::open(int, int, void*)>:
c0022146:	83 ec 18             	sub    esp,0x18
c0022149:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002214d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022151:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022157:	8b 10                	mov    edx,DWORD PTR [eax]
c0022159:	50                   	push   eax
c002215a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002215d:	31 c0                	xor    eax,eax
c002215f:	83 c4 1c             	add    esp,0x1c
c0022162:	c3                   	ret    
c0022163:	90                   	nop

c0022164 <PCI::close(int, int, void*)>:
c0022164:	31 c0                	xor    eax,eax
c0022166:	c3                   	ret    
c0022167:	90                   	nop

c0022168 <PCI::PCI()>:
c0022168:	83 ec 0c             	sub    esp,0xc
c002216b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216f:	83 ec 08             	sub    esp,0x8
c0022172:	68 b0 bb 02 c0       	push   0xc002bbb0
c0022177:	50                   	push   eax
c0022178:	e8 2f 10 ff ff       	call   c00131ac <Bus::Bus(char const*)>
c002217d:	83 c4 10             	add    esp,0x10
c0022180:	ba 9c bc 02 c0       	mov    edx,0xc002bc9c
c0022185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022189:	89 10                	mov    DWORD PTR [eax],edx
c002218b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002219d:	a3 c4 18 03 c0       	mov    ds:0xc00318c4,eax
c00221a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221ac:	0f b6 d0             	movzx  edx,al
c00221af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00221ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221c4:	0f b6 d0             	movzx  edx,al
c00221c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00221d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221da:	8d 50 01             	lea    edx,[eax+0x1]
c00221dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00221e1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00221e7:	0f b6 d0             	movzx  edx,al
c00221ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00221f2:	83 c9 c0             	or     ecx,0xffffffc0
c00221f5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00221f9:	90                   	nop
c00221fa:	83 c4 0c             	add    esp,0xc
c00221fd:	c3                   	ret    

c00221fe <PCI::readBAR8(unsigned int, int)>:
c00221fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022202:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022206:	f6 c2 01             	test   dl,0x1
c0022209:	74 07                	je     c0022212 <PCI::readBAR8(unsigned int, int)+0x14>
c002220b:	83 e2 fc             	and    edx,0xfffffffc
c002220e:	01 c2                	add    edx,eax
c0022210:	ec                   	in     al,dx
c0022211:	c3                   	ret    
c0022212:	83 e2 f0             	and    edx,0xfffffff0
c0022215:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022218:	c3                   	ret    
c0022219:	90                   	nop

c002221a <PCI::readBAR16(unsigned int, int)>:
c002221a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002221e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022222:	f6 c2 01             	test   dl,0x1
c0022225:	74 08                	je     c002222f <PCI::readBAR16(unsigned int, int)+0x15>
c0022227:	83 e2 fc             	and    edx,0xfffffffc
c002222a:	01 c2                	add    edx,eax
c002222c:	66 ed                	in     ax,dx
c002222e:	c3                   	ret    
c002222f:	83 e2 f0             	and    edx,0xfffffff0
c0022232:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022236:	c3                   	ret    
c0022237:	90                   	nop

c0022238 <PCI::readBAR32(unsigned int, int)>:
c0022238:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002223c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022240:	f6 c2 01             	test   dl,0x1
c0022243:	74 07                	je     c002224c <PCI::readBAR32(unsigned int, int)+0x14>
c0022245:	83 e2 fc             	and    edx,0xfffffffc
c0022248:	01 c2                	add    edx,eax
c002224a:	ed                   	in     eax,dx
c002224b:	c3                   	ret    
c002224c:	83 e2 f0             	and    edx,0xfffffff0
c002224f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022252:	c3                   	ret    
c0022253:	90                   	nop

c0022254 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022258:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002225c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022260:	f6 c2 01             	test   dl,0x1
c0022263:	74 07                	je     c002226c <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022265:	83 e2 fc             	and    edx,0xfffffffc
c0022268:	01 ca                	add    edx,ecx
c002226a:	ee                   	out    dx,al
c002226b:	c3                   	ret    
c002226c:	83 e2 f0             	and    edx,0xfffffff0
c002226f:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022272:	c3                   	ret    
c0022273:	90                   	nop

c0022274 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022274:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002227c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022280:	f6 c2 01             	test   dl,0x1
c0022283:	74 08                	je     c002228d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022285:	83 e2 fc             	and    edx,0xfffffffc
c0022288:	01 ca                	add    edx,ecx
c002228a:	66 ef                	out    dx,ax
c002228c:	c3                   	ret    
c002228d:	83 e2 f0             	and    edx,0xfffffff0
c0022290:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022294:	c3                   	ret    
c0022295:	90                   	nop

c0022296 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002229a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002229e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222a2:	f6 c2 01             	test   dl,0x1
c00222a5:	74 07                	je     c00222ae <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00222a7:	83 e2 fc             	and    edx,0xfffffffc
c00222aa:	01 ca                	add    edx,ecx
c00222ac:	ef                   	out    dx,eax
c00222ad:	c3                   	ret    
c00222ae:	83 e2 f0             	and    edx,0xfffffff0
c00222b1:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00222b4:	c3                   	ret    
c00222b5:	90                   	nop

c00222b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00222b6:	55                   	push   ebp
c00222b7:	57                   	push   edi
c00222b8:	56                   	push   esi
c00222b9:	53                   	push   ebx
c00222ba:	83 ec 0c             	sub    esp,0xc
c00222bd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00222c1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00222c5:	89 f0                	mov    eax,esi
c00222c7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00222cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00222cf:	3c 07                	cmp    al,0x7
c00222d1:	76 10                	jbe    c00222e3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00222d3:	83 ec 0c             	sub    esp,0xc
c00222d6:	68 b8 bb 02 c0       	push   0xc002bbb8
c00222db:	e8 65 79 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00222e0:	83 c4 10             	add    esp,0x10
c00222e3:	80 fb 0f             	cmp    bl,0xf
c00222e6:	76 10                	jbe    c00222f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00222e8:	83 ec 0c             	sub    esp,0xc
c00222eb:	68 e8 bb 02 c0       	push   0xc002bbe8
c00222f0:	e8 50 79 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00222f5:	83 c4 10             	add    esp,0x10
c00222f8:	8d 04 36             	lea    eax,[esi+esi*1]
c00222fb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022300:	83 c8 f0             	or     eax,0xfffffff0
c0022303:	ee                   	out    dx,al
c0022304:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022309:	89 e8                	mov    eax,ebp
c002230b:	ee                   	out    dx,al
c002230c:	83 c4 0c             	add    esp,0xc
c002230f:	89 d8                	mov    eax,ebx
c0022311:	66 81 e7 fc 00       	and    di,0xfc
c0022316:	5b                   	pop    ebx
c0022317:	c1 e0 08             	shl    eax,0x8
c002231a:	5e                   	pop    esi
c002231b:	09 f8                	or     eax,edi
c002231d:	5f                   	pop    edi
c002231e:	66 0d 00 c0          	or     ax,0xc000
c0022322:	5d                   	pop    ebp
c0022323:	c3                   	ret    

c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022324:	57                   	push   edi
c0022325:	56                   	push   esi
c0022326:	53                   	push   ebx
c0022327:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002232b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002232f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022335:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022339:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002233d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022341:	83 ff 01             	cmp    edi,0x1
c0022344:	75 3e                	jne    c0022384 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022346:	89 de                	mov    esi,ebx
c0022348:	0f b6 c0             	movzx  eax,al
c002234b:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022351:	c1 e0 10             	shl    eax,0x10
c0022354:	0f b6 c9             	movzx  ecx,cl
c0022357:	09 f0                	or     eax,esi
c0022359:	c1 e1 08             	shl    ecx,0x8
c002235c:	0f b6 d2             	movzx  edx,dl
c002235f:	09 c8                	or     eax,ecx
c0022361:	c1 e2 0b             	shl    edx,0xb
c0022364:	09 d0                	or     eax,edx
c0022366:	ba f8 0c 00 00       	mov    edx,0xcf8
c002236b:	0d 00 00 00 80       	or     eax,0x80000000
c0022370:	ef                   	out    dx,eax
c0022371:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022376:	ed                   	in     eax,dx
c0022377:	83 e3 02             	and    ebx,0x2
c002237a:	0f b6 cb             	movzx  ecx,bl
c002237d:	c1 e1 03             	shl    ecx,0x3
c0022380:	d3 e8                	shr    eax,cl
c0022382:	eb 43                	jmp    c00223c7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022384:	83 ff 02             	cmp    edi,0x2
c0022387:	75 2c                	jne    c00223b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022389:	83 ec 0c             	sub    esp,0xc
c002238c:	0f b6 c9             	movzx  ecx,cl
c002238f:	0f b6 d2             	movzx  edx,dl
c0022392:	0f b6 fb             	movzx  edi,bl
c0022395:	0f b6 c0             	movzx  eax,al
c0022398:	57                   	push   edi
c0022399:	51                   	push   ecx
c002239a:	52                   	push   edx
c002239b:	50                   	push   eax
c002239c:	56                   	push   esi
c002239d:	e8 14 ff ff ff       	call   c00222b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00223a2:	89 c2                	mov    edx,eax
c00223a4:	ed                   	in     eax,dx
c00223a5:	83 e3 02             	and    ebx,0x2
c00223a8:	83 c4 20             	add    esp,0x20
c00223ab:	0f b6 cb             	movzx  ecx,bl
c00223ae:	c1 e1 03             	shl    ecx,0x3
c00223b1:	d3 e8                	shr    eax,cl
c00223b3:	eb 12                	jmp    c00223c7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00223b5:	83 ec 0c             	sub    esp,0xc
c00223b8:	68 18 bc 02 c0       	push   0xc002bc18
c00223bd:	e8 83 78 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00223c2:	83 c4 10             	add    esp,0x10
c00223c5:	31 c0                	xor    eax,eax
c00223c7:	5b                   	pop    ebx
c00223c8:	5e                   	pop    esi
c00223c9:	5f                   	pop    edi
c00223ca:	c3                   	ret    
c00223cb:	90                   	nop

c00223cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00223cc:	83 ec 18             	sub    esp,0x18
c00223cf:	6a 00                	push   0x0
c00223d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00223d6:	50                   	push   eax
c00223d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00223dc:	50                   	push   eax
c00223dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00223e2:	50                   	push   eax
c00223e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00223e7:	e8 38 ff ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00223ec:	83 c4 2c             	add    esp,0x2c
c00223ef:	c3                   	ret    

c00223f0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00223f0:	83 ec 18             	sub    esp,0x18
c00223f3:	6a 0e                	push   0xe
c00223f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00223fa:	50                   	push   eax
c00223fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022400:	50                   	push   eax
c0022401:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022406:	50                   	push   eax
c0022407:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002240b:	e8 14 ff ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022410:	83 c4 2c             	add    esp,0x2c
c0022413:	0f b6 c0             	movzx  eax,al
c0022416:	c3                   	ret    
c0022417:	90                   	nop

c0022418 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022418:	55                   	push   ebp
c0022419:	57                   	push   edi
c002241a:	56                   	push   esi
c002241b:	53                   	push   ebx
c002241c:	83 ec 18             	sub    esp,0x18
c002241f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022424:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022429:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002242e:	6a 0a                	push   0xa
c0022430:	56                   	push   esi
c0022431:	55                   	push   ebp
c0022432:	57                   	push   edi
c0022433:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022437:	e8 e8 fe ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002243c:	83 c4 14             	add    esp,0x14
c002243f:	89 c3                	mov    ebx,eax
c0022441:	6a 0a                	push   0xa
c0022443:	0f b6 db             	movzx  ebx,bl
c0022446:	56                   	push   esi
c0022447:	55                   	push   ebp
c0022448:	57                   	push   edi
c0022449:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002244d:	e8 d2 fe ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022452:	83 c4 2c             	add    esp,0x2c
c0022455:	25 00 ff 00 00       	and    eax,0xff00
c002245a:	09 d8                	or     eax,ebx
c002245c:	5b                   	pop    ebx
c002245d:	5e                   	pop    esi
c002245e:	5f                   	pop    edi
c002245f:	5d                   	pop    ebp
c0022460:	c3                   	ret    
c0022461:	90                   	nop

c0022462 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022462:	83 ec 18             	sub    esp,0x18
c0022465:	6a 08                	push   0x8
c0022467:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002246c:	50                   	push   eax
c002246d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022472:	50                   	push   eax
c0022473:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022478:	50                   	push   eax
c0022479:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002247d:	e8 a2 fe ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022482:	83 c4 2c             	add    esp,0x2c
c0022485:	0f b6 c4             	movzx  eax,ah
c0022488:	c3                   	ret    
c0022489:	90                   	nop

c002248a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002248a:	83 ec 18             	sub    esp,0x18
c002248d:	6a 08                	push   0x8
c002248f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022494:	50                   	push   eax
c0022495:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002249a:	50                   	push   eax
c002249b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224a0:	50                   	push   eax
c00224a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224a5:	e8 7a fe ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224aa:	83 c4 2c             	add    esp,0x2c
c00224ad:	c3                   	ret    

c00224ae <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00224ae:	83 ec 18             	sub    esp,0x18
c00224b1:	6a 3c                	push   0x3c
c00224b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224b8:	50                   	push   eax
c00224b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224be:	50                   	push   eax
c00224bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224c4:	50                   	push   eax
c00224c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224c9:	e8 56 fe ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224ce:	83 c4 2c             	add    esp,0x2c
c00224d1:	c3                   	ret    

c00224d2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00224d2:	83 ec 18             	sub    esp,0x18
c00224d5:	6a 18                	push   0x18
c00224d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224dc:	50                   	push   eax
c00224dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224e2:	50                   	push   eax
c00224e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224e8:	50                   	push   eax
c00224e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224ed:	e8 32 fe ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224f2:	83 c4 2c             	add    esp,0x2c
c00224f5:	0f b6 c4             	movzx  eax,ah
c00224f8:	c3                   	ret    
c00224f9:	90                   	nop

c00224fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224fa:	55                   	push   ebp
c00224fb:	57                   	push   edi
c00224fc:	56                   	push   esi
c00224fd:	53                   	push   ebx
c00224fe:	83 ec 28             	sub    esp,0x28
c0022501:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022505:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002250a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002250f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022514:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002251b:	8d 43 12             	lea    eax,[ebx+0x12]
c002251e:	83 c3 10             	add    ebx,0x10
c0022521:	0f b6 c0             	movzx  eax,al
c0022524:	0f b6 db             	movzx  ebx,bl
c0022527:	50                   	push   eax
c0022528:	51                   	push   ecx
c0022529:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002252d:	57                   	push   edi
c002252e:	55                   	push   ebp
c002252f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022533:	e8 ec fd ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022538:	83 c4 14             	add    esp,0x14
c002253b:	89 c6                	mov    esi,eax
c002253d:	53                   	push   ebx
c002253e:	c1 e6 10             	shl    esi,0x10
c0022541:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022545:	51                   	push   ecx
c0022546:	57                   	push   edi
c0022547:	55                   	push   ebp
c0022548:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002254c:	e8 d3 fd ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022551:	83 c4 3c             	add    esp,0x3c
c0022554:	0f b7 c0             	movzx  eax,ax
c0022557:	5b                   	pop    ebx
c0022558:	09 f0                	or     eax,esi
c002255a:	5e                   	pop    esi
c002255b:	5f                   	pop    edi
c002255c:	5d                   	pop    ebp
c002255d:	c3                   	ret    

c002255e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002255e:	55                   	push   ebp
c002255f:	57                   	push   edi
c0022560:	56                   	push   esi
c0022561:	53                   	push   ebx
c0022562:	83 ec 0c             	sub    esp,0xc
c0022565:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022569:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002256d:	89 f5                	mov    ebp,esi
c002256f:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022575:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022579:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002257d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022581:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022585:	83 f9 01             	cmp    ecx,0x1
c0022588:	75 5d                	jne    c00225e7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002258a:	0f b6 c8             	movzx  ecx,al
c002258d:	0f b6 d2             	movzx  edx,dl
c0022590:	c1 e1 10             	shl    ecx,0x10
c0022593:	c1 e2 0b             	shl    edx,0xb
c0022596:	89 f0                	mov    eax,esi
c0022598:	25 fc 00 00 00       	and    eax,0xfc
c002259d:	09 c1                	or     ecx,eax
c002259f:	89 e8                	mov    eax,ebp
c00225a1:	0f b6 c0             	movzx  eax,al
c00225a4:	c1 e0 08             	shl    eax,0x8
c00225a7:	09 c1                	or     ecx,eax
c00225a9:	09 d1                	or     ecx,edx
c00225ab:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225b0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00225b6:	89 c8                	mov    eax,ecx
c00225b8:	ef                   	out    dx,eax
c00225b9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225be:	ed                   	in     eax,dx
c00225bf:	0f b7 db             	movzx  ebx,bx
c00225c2:	83 e6 02             	and    esi,0x2
c00225c5:	74 0a                	je     c00225d1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00225c7:	0f b7 d0             	movzx  edx,ax
c00225ca:	c1 e3 10             	shl    ebx,0x10
c00225cd:	09 d3                	or     ebx,edx
c00225cf:	eb 05                	jmp    c00225d6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00225d1:	66 31 c0             	xor    ax,ax
c00225d4:	09 c3                	or     ebx,eax
c00225d6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225db:	89 c8                	mov    eax,ecx
c00225dd:	ef                   	out    dx,eax
c00225de:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225e3:	89 d8                	mov    eax,ebx
c00225e5:	eb 41                	jmp    c0022628 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00225e7:	83 f9 02             	cmp    ecx,0x2
c00225ea:	75 45                	jne    c0022631 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00225ec:	83 ec 0c             	sub    esp,0xc
c00225ef:	0f b6 d2             	movzx  edx,dl
c00225f2:	89 f1                	mov    ecx,esi
c00225f4:	0f b6 c0             	movzx  eax,al
c00225f7:	0f b6 f1             	movzx  esi,cl
c00225fa:	89 e9                	mov    ecx,ebp
c00225fc:	56                   	push   esi
c00225fd:	0f b6 c9             	movzx  ecx,cl
c0022600:	51                   	push   ecx
c0022601:	52                   	push   edx
c0022602:	50                   	push   eax
c0022603:	57                   	push   edi
c0022604:	e8 ad fc ff ff       	call   c00222b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022609:	89 c2                	mov    edx,eax
c002260b:	ed                   	in     eax,dx
c002260c:	83 c4 20             	add    esp,0x20
c002260f:	0f b7 db             	movzx  ebx,bx
c0022612:	f6 c2 02             	test   dl,0x2
c0022615:	74 0c                	je     c0022623 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022617:	0f b7 c8             	movzx  ecx,ax
c002261a:	89 d8                	mov    eax,ebx
c002261c:	c1 e0 10             	shl    eax,0x10
c002261f:	09 c8                	or     eax,ecx
c0022621:	eb 05                	jmp    c0022628 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022623:	66 31 c0             	xor    ax,ax
c0022626:	09 d8                	or     eax,ebx
c0022628:	ef                   	out    dx,eax
c0022629:	83 c4 0c             	add    esp,0xc
c002262c:	5b                   	pop    ebx
c002262d:	5e                   	pop    esi
c002262e:	5f                   	pop    edi
c002262f:	5d                   	pop    ebp
c0022630:	c3                   	ret    
c0022631:	c7 44 24 20 18 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc18
c0022639:	83 c4 0c             	add    esp,0xc
c002263c:	5b                   	pop    ebx
c002263d:	5e                   	pop    esi
c002263e:	5f                   	pop    edi
c002263f:	5d                   	pop    ebp
c0022640:	e9 00 76 ff ff       	jmp    c0019c45 <Krnl::panic(char const*)>
c0022645:	90                   	nop

c0022646 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022646:	55                   	push   ebp
c0022647:	57                   	push   edi
c0022648:	56                   	push   esi
c0022649:	53                   	push   ebx
c002264a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022650:	80 3d d0 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318d0,0x0
c0022657:	0f 85 84 00 00 00    	jne    c00226e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c002265d:	83 ec 0c             	sub    esp,0xc
c0022660:	68 14 01 00 00       	push   0x114
c0022665:	e8 32 cf fe ff       	call   c000f59c <malloc>
c002266a:	83 c4 0c             	add    esp,0xc
c002266d:	89 c3                	mov    ebx,eax
c002266f:	ff 35 d0 0a 03 c0    	push   DWORD PTR ds:0xc0030ad0
c0022675:	68 1e bc 02 c0       	push   0xc002bc1e
c002267a:	50                   	push   eax
c002267b:	e8 ea 03 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0022680:	5a                   	pop    edx
c0022681:	59                   	pop    ecx
c0022682:	6a 01                	push   0x1
c0022684:	53                   	push   ebx
c0022685:	e8 44 04 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c002268a:	83 c4 0c             	add    esp,0xc
c002268d:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022691:	50                   	push   eax
c0022692:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022696:	50                   	push   eax
c0022697:	53                   	push   ebx
c0022698:	e8 dd 06 ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c002269d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226a1:	40                   	inc    eax
c00226a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00226a5:	e8 f2 ce fe ff       	call   c000f59c <malloc>
c00226aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00226ae:	a3 cc 18 03 c0       	mov    ds:0xc00318cc,eax
c00226b3:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00226b7:	5e                   	pop    esi
c00226b8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226ba:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00226be:	51                   	push   ecx
c00226bf:	50                   	push   eax
c00226c0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00226c4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00226c8:	53                   	push   ebx
c00226c9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00226cc:	83 c4 14             	add    esp,0x14
c00226cf:	53                   	push   ebx
c00226d0:	e8 57 04 ff ff       	call   c0012b2c <File::close()>
c00226d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226d9:	83 c4 10             	add    esp,0x10
c00226dc:	a3 c8 18 03 c0       	mov    ds:0xc00318c8,eax
c00226e1:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c00226e6:	8b 15 cc 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318cc
c00226ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00226ef:	31 ff                	xor    edi,edi
c00226f1:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00226f9:	31 f6                	xor    esi,esi
c00226fb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022700:	31 db                	xor    ebx,ebx
c0022702:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002270a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002270f:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022716:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002271a:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022721:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022725:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022728:	0f 8e 6b 01 00 00    	jle    c0022899 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c002272e:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022731:	d4 40                	aam    0x40
c0022733:	d5 39                	aad    0x39
c0022735:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022739:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002273d:	d4 40                	aam    0x40
c002273f:	d5 39                	aad    0x39
c0022741:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022745:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022749:	d4 40                	aam    0x40
c002274b:	d5 39                	aad    0x39
c002274d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022751:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022755:	d4 40                	aam    0x40
c0022757:	d5 39                	aad    0x39
c0022759:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002275d:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022761:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022765:	3c 56                	cmp    al,0x56
c0022767:	74 45                	je     c00227ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022769:	d4 40                	aam    0x40
c002276b:	d5 39                	aad    0x39
c002276d:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022770:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022774:	0f b6 c9             	movzx  ecx,cl
c0022777:	c1 e1 04             	shl    ecx,0x4
c002277a:	d4 40                	aam    0x40
c002277c:	d5 39                	aad    0x39
c002277e:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022781:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022785:	0f b6 db             	movzx  ebx,bl
c0022788:	09 cb                	or     ebx,ecx
c002278a:	c1 e3 04             	shl    ebx,0x4
c002278d:	d4 40                	aam    0x40
c002278f:	d5 39                	aad    0x39
c0022791:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022794:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022798:	0f b6 c9             	movzx  ecx,cl
c002279b:	09 cb                	or     ebx,ecx
c002279d:	c1 e3 04             	shl    ebx,0x4
c00227a0:	89 d9                	mov    ecx,ebx
c00227a2:	d4 40                	aam    0x40
c00227a4:	d5 39                	aad    0x39
c00227a6:	8d 58 d0             	lea    ebx,[eax-0x30]
c00227a9:	0f b6 db             	movzx  ebx,bl
c00227ac:	09 cb                	or     ebx,ecx
c00227ae:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00227b2:	80 f9 44             	cmp    cl,0x44
c00227b5:	74 47                	je     c00227fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00227b7:	88 c8                	mov    al,cl
c00227b9:	d4 40                	aam    0x40
c00227bb:	d5 39                	aad    0x39
c00227bd:	83 e8 30             	sub    eax,0x30
c00227c0:	0f b6 e8             	movzx  ebp,al
c00227c3:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00227c7:	c1 e5 04             	shl    ebp,0x4
c00227ca:	d4 40                	aam    0x40
c00227cc:	d5 39                	aad    0x39
c00227ce:	83 e8 30             	sub    eax,0x30
c00227d1:	0f b6 f0             	movzx  esi,al
c00227d4:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00227d8:	09 ee                	or     esi,ebp
c00227da:	c1 e6 04             	shl    esi,0x4
c00227dd:	d4 40                	aam    0x40
c00227df:	d5 39                	aad    0x39
c00227e1:	83 e8 30             	sub    eax,0x30
c00227e4:	0f b6 e8             	movzx  ebp,al
c00227e7:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00227eb:	09 ee                	or     esi,ebp
c00227ed:	c1 e6 04             	shl    esi,0x4
c00227f0:	89 f5                	mov    ebp,esi
c00227f2:	d4 40                	aam    0x40
c00227f4:	d5 39                	aad    0x39
c00227f6:	83 e8 30             	sub    eax,0x30
c00227f9:	0f b6 f0             	movzx  esi,al
c00227fc:	09 ee                	or     esi,ebp
c00227fe:	83 c7 10             	add    edi,0x10
c0022801:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022805:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022808:	3c 0a                	cmp    al,0xa
c002280a:	74 09                	je     c0022815 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c002280c:	45                   	inc    ebp
c002280d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022810:	75 16                	jne    c0022828 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022812:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022815:	3c 0a                	cmp    al,0xa
c0022817:	0f 94 c0             	sete   al
c002281a:	0f b6 c0             	movzx  eax,al
c002281d:	01 c7                	add    edi,eax
c002281f:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022824:	75 0c                	jne    c0022832 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022826:	eb 15                	jmp    c002283d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022828:	47                   	inc    edi
c0022829:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c002282c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022830:	eb d3                	jmp    c0022805 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022832:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022837:	0f 85 e8 fe ff ff    	jne    c0022725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002283d:	80 f9 44             	cmp    cl,0x44
c0022840:	74 0b                	je     c002284d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022842:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022847:	0f 85 d8 fe ff ff    	jne    c0022725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002284d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022851:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022855:	c1 e1 04             	shl    ecx,0x4
c0022858:	83 e8 30             	sub    eax,0x30
c002285b:	09 c8                	or     eax,ecx
c002285d:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022861:	0f 85 be fe ff ff    	jne    c0022725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022867:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c002286b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002286f:	c1 e1 04             	shl    ecx,0x4
c0022872:	83 e8 30             	sub    eax,0x30
c0022875:	09 c8                	or     eax,ecx
c0022877:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c002287b:	0f 85 a4 fe ff ff    	jne    c0022725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022881:	50                   	push   eax
c0022882:	50                   	push   eax
c0022883:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022887:	50                   	push   eax
c0022888:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c002288f:	e8 78 df fd ff       	call   c000080c <strcpy>
c0022894:	83 c4 10             	add    esp,0x10
c0022897:	eb 15                	jmp    c00228ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022899:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00228a0:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00228ab:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00228ae:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00228b5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00228bb:	5b                   	pop    ebx
c00228bc:	5e                   	pop    esi
c00228bd:	5f                   	pop    edi
c00228be:	5d                   	pop    ebp
c00228bf:	c3                   	ret    

c00228c0 <PCI::checkBus(unsigned char)>:
c00228c0:	56                   	push   esi
c00228c1:	53                   	push   ebx
c00228c2:	31 db                	xor    ebx,ebx
c00228c4:	51                   	push   ecx
c00228c5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00228ca:	52                   	push   edx
c00228cb:	53                   	push   ebx
c00228cc:	43                   	inc    ebx
c00228cd:	56                   	push   esi
c00228ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228d2:	e8 37 03 00 00       	call   c0022c0e <PCI::checkDevice(unsigned char, unsigned char)>
c00228d7:	83 c4 10             	add    esp,0x10
c00228da:	83 fb 20             	cmp    ebx,0x20
c00228dd:	75 eb                	jne    c00228ca <PCI::checkBus(unsigned char)+0xa>
c00228df:	58                   	pop    eax
c00228e0:	5b                   	pop    ebx
c00228e1:	5e                   	pop    esi
c00228e2:	c3                   	ret    
c00228e3:	90                   	nop

c00228e4 <PCI::foundDevice(PCIDeviceInfo)>:
c00228e4:	55                   	push   ebp
c00228e5:	57                   	push   edi
c00228e6:	56                   	push   esi
c00228e7:	53                   	push   ebx
c00228e8:	83 ec 1c             	sub    esp,0x1c
c00228eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00228ef:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00228f5:	0f 84 52 01 00 00    	je     c0022a4d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00228fb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00228ff:	66 81 f9 06 04       	cmp    cx,0x406
c0022904:	75 2c                	jne    c0022932 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022906:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002290b:	50                   	push   eax
c002290c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022911:	50                   	push   eax
c0022912:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022917:	50                   	push   eax
c0022918:	56                   	push   esi
c0022919:	e8 b4 fb ff ff       	call   c00224d2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002291e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022922:	0f b6 c0             	movzx  eax,al
c0022925:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022929:	83 c4 2c             	add    esp,0x2c
c002292c:	5b                   	pop    ebx
c002292d:	5e                   	pop    esi
c002292e:	5f                   	pop    edi
c002292f:	5d                   	pop    ebp
c0022930:	eb 8e                	jmp    c00228c0 <PCI::checkBus(unsigned char)>
c0022932:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022936:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002293c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022940:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022944:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022948:	88 d3                	mov    bl,dl
c002294a:	85 c0                	test   eax,eax
c002294c:	74 33                	je     c0022981 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002294e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022951:	85 d2                	test   edx,edx
c0022953:	74 28                	je     c002297d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022955:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002295b:	31 ef                	xor    edi,ebp
c002295d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022963:	75 18                	jne    c002297d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022965:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022969:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002296f:	75 0c                	jne    c002297d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022971:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022977:	0f 84 d0 00 00 00    	je     c0022a4d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002297d:	8b 00                	mov    eax,DWORD PTR [eax]
c002297f:	eb c9                	jmp    c002294a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022981:	66 81 f9 01 06       	cmp    cx,0x601
c0022986:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002298a:	75 19                	jne    c00229a5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002298c:	83 ec 0c             	sub    esp,0xc
c002298f:	68 64 01 00 00       	push   0x164
c0022994:	e8 03 cc fe ff       	call   c000f59c <malloc>
c0022999:	89 c5                	mov    ebp,eax
c002299b:	89 04 24             	mov    DWORD PTR [esp],eax
c002299e:	e8 85 0e 00 00       	call   c0023828 <SATABus::SATABus()>
c00229a3:	eb 1e                	jmp    c00229c3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00229a5:	66 81 f9 01 01       	cmp    cx,0x101
c00229aa:	75 60                	jne    c0022a0c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00229ac:	83 ec 0c             	sub    esp,0xc
c00229af:	68 70 02 00 00       	push   0x270
c00229b4:	e8 e3 cb fe ff       	call   c000f59c <malloc>
c00229b9:	89 c5                	mov    ebp,eax
c00229bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00229be:	e8 0f 03 00 00       	call   c0022cd2 <IDE::IDE()>
c00229c3:	58                   	pop    eax
c00229c4:	5a                   	pop    edx
c00229c5:	55                   	push   ebp
c00229c6:	56                   	push   esi
c00229c7:	e8 78 0f ff ff       	call   c0013944 <Device::addChild(Device*)>
c00229cc:	83 ec 1c             	sub    esp,0x1c
c00229cf:	b9 09 00 00 00       	mov    ecx,0x9
c00229d4:	fc                   	cld    
c00229d5:	89 e7                	mov    edi,esp
c00229d7:	89 de                	mov    esi,ebx
c00229d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00229db:	55                   	push   ebp
c00229dc:	e8 75 0e ff ff       	call   c0013856 <Device::preOpenPCI(PCIDeviceInfo)>
c00229e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00229e4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00229e8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00229f0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00229f8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022a00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a03:	83 c4 4c             	add    esp,0x4c
c0022a06:	5b                   	pop    ebx
c0022a07:	5e                   	pop    esi
c0022a08:	5f                   	pop    edi
c0022a09:	5d                   	pop    ebp
c0022a0a:	ff e0                	jmp    eax
c0022a0c:	83 ec 0c             	sub    esp,0xc
c0022a0f:	68 58 01 00 00       	push   0x158
c0022a14:	e8 83 cb fe ff       	call   c000f59c <malloc>
c0022a19:	89 c5                	mov    ebp,eax
c0022a1b:	58                   	pop    eax
c0022a1c:	5a                   	pop    edx
c0022a1d:	68 37 bc 02 c0       	push   0xc002bc37
c0022a22:	55                   	push   ebp
c0022a23:	e8 26 12 ff ff       	call   c0013c4e <DriverlessDevice::DriverlessDevice(char const*)>
c0022a28:	59                   	pop    ecx
c0022a29:	5f                   	pop    edi
c0022a2a:	55                   	push   ebp
c0022a2b:	56                   	push   esi
c0022a2c:	e8 13 0f ff ff       	call   c0013944 <Device::addChild(Device*)>
c0022a31:	b9 09 00 00 00       	mov    ecx,0x9
c0022a36:	fc                   	cld    
c0022a37:	89 df                	mov    edi,ebx
c0022a39:	89 de                	mov    esi,ebx
c0022a3b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022a3d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022a41:	83 c4 2c             	add    esp,0x2c
c0022a44:	5b                   	pop    ebx
c0022a45:	5e                   	pop    esi
c0022a46:	5f                   	pop    edi
c0022a47:	5d                   	pop    ebp
c0022a48:	e9 09 0e ff ff       	jmp    c0013856 <Device::preOpenPCI(PCIDeviceInfo)>
c0022a4d:	83 c4 1c             	add    esp,0x1c
c0022a50:	5b                   	pop    ebx
c0022a51:	5e                   	pop    esi
c0022a52:	5f                   	pop    edi
c0022a53:	5d                   	pop    ebp
c0022a54:	c3                   	ret    
c0022a55:	90                   	nop

c0022a56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022a56:	55                   	push   ebp
c0022a57:	57                   	push   edi
c0022a58:	56                   	push   esi
c0022a59:	53                   	push   ebx
c0022a5a:	83 ec 68             	sub    esp,0x68
c0022a5d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022a61:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022a68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022a6c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022a73:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022a78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022a7c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022a83:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022a88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022a8c:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022a91:	6a 0c                	push   0xc
c0022a93:	57                   	push   edi
c0022a94:	53                   	push   ebx
c0022a95:	56                   	push   esi
c0022a96:	55                   	push   ebp
c0022a97:	e8 88 f8 ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a9c:	83 c4 20             	add    esp,0x20
c0022a9f:	57                   	push   edi
c0022aa0:	53                   	push   ebx
c0022aa1:	56                   	push   esi
c0022aa2:	55                   	push   ebp
c0022aa3:	e8 70 f9 ff ff       	call   c0022418 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022aa8:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022aad:	57                   	push   edi
c0022aae:	53                   	push   ebx
c0022aaf:	56                   	push   esi
c0022ab0:	55                   	push   ebp
c0022ab1:	e8 f8 f9 ff ff       	call   c00224ae <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022ab6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022aba:	83 c4 14             	add    esp,0x14
c0022abd:	6a 3c                	push   0x3c
c0022abf:	57                   	push   edi
c0022ac0:	53                   	push   ebx
c0022ac1:	56                   	push   esi
c0022ac2:	55                   	push   ebp
c0022ac3:	e8 5c f8 ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac8:	0f b6 c4             	movzx  eax,ah
c0022acb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022acf:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022ad3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022ad7:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0022adc:	83 c4 20             	add    esp,0x20
c0022adf:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022ae5:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022aec:	74 7c                	je     c0022b6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022aee:	31 c0                	xor    eax,eax
c0022af0:	8b 15 88 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d588
c0022af6:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022afc:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022b02:	7e 66                	jle    c0022b6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022b04:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022b07:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022b0e:	39 cb                	cmp    ebx,ecx
c0022b10:	75 55                	jne    c0022b67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022b12:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022b19:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022b1d:	75 48                	jne    c0022b67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022b1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022b23:	83 ec 0c             	sub    esp,0xc
c0022b26:	68 51 bc 02 c0       	push   0xc002bc51
c0022b2b:	e8 db f9 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0022b30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b34:	8b 15 88 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d588
c0022b3a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022b3e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022b44:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022b4c:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022b50:	52                   	push   edx
c0022b51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b55:	53                   	push   ebx
c0022b56:	68 76 bc 02 c0       	push   0xc002bc76
c0022b5b:	e8 ab f9 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0022b60:	83 c4 20             	add    esp,0x20
c0022b63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022b67:	40                   	inc    eax
c0022b68:	eb 86                	jmp    c0022af0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022b6a:	31 d2                	xor    edx,edx
c0022b6c:	83 ec 0c             	sub    esp,0xc
c0022b6f:	57                   	push   edi
c0022b70:	53                   	push   ebx
c0022b71:	56                   	push   esi
c0022b72:	52                   	push   edx
c0022b73:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022b77:	55                   	push   ebp
c0022b78:	e8 7d f9 ff ff       	call   c00224fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022b81:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022b85:	42                   	inc    edx
c0022b86:	83 c4 20             	add    esp,0x20
c0022b89:	83 fa 06             	cmp    edx,0x6
c0022b8c:	75 de                	jne    c0022b6c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022b8e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022b93:	83 ec 0c             	sub    esp,0xc
c0022b96:	86 e0                	xchg   al,ah
c0022b98:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022b9d:	6a 02                	push   0x2
c0022b9f:	57                   	push   edi
c0022ba0:	53                   	push   ebx
c0022ba1:	56                   	push   esi
c0022ba2:	55                   	push   ebp
c0022ba3:	e8 7c f7 ff ff       	call   c0022324 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ba8:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022bad:	83 c4 20             	add    esp,0x20
c0022bb0:	57                   	push   edi
c0022bb1:	53                   	push   ebx
c0022bb2:	56                   	push   esi
c0022bb3:	55                   	push   ebp
c0022bb4:	e8 a9 f8 ff ff       	call   c0022462 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022bb9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022bbd:	57                   	push   edi
c0022bbe:	53                   	push   ebx
c0022bbf:	56                   	push   esi
c0022bc0:	55                   	push   ebp
c0022bc1:	e8 06 f8 ff ff       	call   c00223cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022bc6:	b9 09 00 00 00       	mov    ecx,0x9
c0022bcb:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022bd0:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022bd4:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022bd8:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022bdc:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022be0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022be4:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022be8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022bec:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022bf0:	83 ec 0c             	sub    esp,0xc
c0022bf3:	fc                   	cld    
c0022bf4:	89 e7                	mov    edi,esp
c0022bf6:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022bfa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bfc:	55                   	push   ebp
c0022bfd:	e8 e2 fc ff ff       	call   c00228e4 <PCI::foundDevice(PCIDeviceInfo)>
c0022c02:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022c08:	5b                   	pop    ebx
c0022c09:	5e                   	pop    esi
c0022c0a:	5f                   	pop    edi
c0022c0b:	5d                   	pop    ebp
c0022c0c:	c3                   	ret    
c0022c0d:	90                   	nop

c0022c0e <PCI::checkDevice(unsigned char, unsigned char)>:
c0022c0e:	55                   	push   ebp
c0022c0f:	57                   	push   edi
c0022c10:	56                   	push   esi
c0022c11:	53                   	push   ebx
c0022c12:	83 ec 0c             	sub    esp,0xc
c0022c15:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022c19:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022c1e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022c23:	6a 00                	push   0x0
c0022c25:	56                   	push   esi
c0022c26:	57                   	push   edi
c0022c27:	55                   	push   ebp
c0022c28:	e8 9f f7 ff ff       	call   c00223cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c2d:	6a 00                	push   0x0
c0022c2f:	56                   	push   esi
c0022c30:	57                   	push   edi
c0022c31:	55                   	push   ebp
c0022c32:	e8 1f fe ff ff       	call   c0022a56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022c37:	83 c4 20             	add    esp,0x20
c0022c3a:	6a 00                	push   0x0
c0022c3c:	56                   	push   esi
c0022c3d:	57                   	push   edi
c0022c3e:	55                   	push   ebp
c0022c3f:	e8 ac f7 ff ff       	call   c00223f0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022c44:	83 c4 10             	add    esp,0x10
c0022c47:	84 c0                	test   al,al
c0022c49:	79 27                	jns    c0022c72 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022c4b:	bb 01 00 00 00       	mov    ebx,0x1
c0022c50:	53                   	push   ebx
c0022c51:	56                   	push   esi
c0022c52:	57                   	push   edi
c0022c53:	55                   	push   ebp
c0022c54:	e8 73 f7 ff ff       	call   c00223cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c59:	83 c4 10             	add    esp,0x10
c0022c5c:	66 40                	inc    ax
c0022c5e:	74 0c                	je     c0022c6c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022c60:	53                   	push   ebx
c0022c61:	56                   	push   esi
c0022c62:	57                   	push   edi
c0022c63:	55                   	push   ebp
c0022c64:	e8 ed fd ff ff       	call   c0022a56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022c69:	83 c4 10             	add    esp,0x10
c0022c6c:	43                   	inc    ebx
c0022c6d:	83 fb 08             	cmp    ebx,0x8
c0022c70:	75 de                	jne    c0022c50 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022c72:	83 c4 0c             	add    esp,0xc
c0022c75:	5b                   	pop    ebx
c0022c76:	5e                   	pop    esi
c0022c77:	5f                   	pop    edi
c0022c78:	5d                   	pop    ebp
c0022c79:	c3                   	ret    

c0022c7a <PCI::detect()>:
c0022c7a:	56                   	push   esi
c0022c7b:	53                   	push   ebx
c0022c7c:	53                   	push   ebx
c0022c7d:	31 db                	xor    ebx,ebx
c0022c7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022c83:	6a 00                	push   0x0
c0022c85:	6a 00                	push   0x0
c0022c87:	6a 00                	push   0x0
c0022c89:	56                   	push   esi
c0022c8a:	e8 61 f7 ff ff       	call   c00223f0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022c8f:	83 c4 10             	add    esp,0x10
c0022c92:	a8 80                	test   al,0x80
c0022c94:	75 21                	jne    c0022cb7 <PCI::detect()+0x3d>
c0022c96:	51                   	push   ecx
c0022c97:	51                   	push   ecx
c0022c98:	6a 00                	push   0x0
c0022c9a:	56                   	push   esi
c0022c9b:	e8 20 fc ff ff       	call   c00228c0 <PCI::checkBus(unsigned char)>
c0022ca0:	83 c4 10             	add    esp,0x10
c0022ca3:	eb 24                	jmp    c0022cc9 <PCI::detect()+0x4f>
c0022ca5:	52                   	push   edx
c0022ca6:	52                   	push   edx
c0022ca7:	53                   	push   ebx
c0022ca8:	43                   	inc    ebx
c0022ca9:	56                   	push   esi
c0022caa:	e8 11 fc ff ff       	call   c00228c0 <PCI::checkBus(unsigned char)>
c0022caf:	83 c4 10             	add    esp,0x10
c0022cb2:	83 fb 08             	cmp    ebx,0x8
c0022cb5:	74 12                	je     c0022cc9 <PCI::detect()+0x4f>
c0022cb7:	53                   	push   ebx
c0022cb8:	6a 00                	push   0x0
c0022cba:	6a 00                	push   0x0
c0022cbc:	56                   	push   esi
c0022cbd:	e8 0a f7 ff ff       	call   c00223cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022cc2:	83 c4 10             	add    esp,0x10
c0022cc5:	66 40                	inc    ax
c0022cc7:	74 dc                	je     c0022ca5 <PCI::detect()+0x2b>
c0022cc9:	58                   	pop    eax
c0022cca:	5b                   	pop    ebx
c0022ccb:	5e                   	pop    esi
c0022ccc:	c3                   	ret    
c0022ccd:	90                   	nop

c0022cce <IDE::close(int, int, void*)>:
c0022cce:	83 c8 ff             	or     eax,0xffffffff
c0022cd1:	c3                   	ret    

c0022cd2 <IDE::IDE()>:
c0022cd2:	83 ec 0c             	sub    esp,0xc
c0022cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd9:	83 ec 08             	sub    esp,0x8
c0022cdc:	68 c0 bc 02 c0       	push   0xc002bcc0
c0022ce1:	50                   	push   eax
c0022ce2:	e8 0b 10 ff ff       	call   c0013cf2 <HardDiskController::HardDiskController(char const*)>
c0022ce7:	83 c4 10             	add    esp,0x10
c0022cea:	ba 50 bd 02 c0       	mov    edx,0xc002bd50
c0022cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf3:	89 10                	mov    DWORD PTR [eax],edx
c0022cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022d00:	90                   	nop
c0022d01:	83 c4 0c             	add    esp,0xc
c0022d04:	c3                   	ret    
c0022d05:	90                   	nop

c0022d06 <IDE::prepareInterrupt(unsigned char)>:
c0022d06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022d0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d0f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022d17:	c3                   	ret    

c0022d18 <selectDrive(unsigned char, unsigned char)>:
c0022d18:	c3                   	ret    
c0022d19:	90                   	nop

c0022d1a <IDE::getBase(unsigned char)>:
c0022d1a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022d1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d23:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022d2b:	c3                   	ret    

c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022d2c:	55                   	push   ebp
c0022d2d:	57                   	push   edi
c0022d2e:	56                   	push   esi
c0022d2f:	53                   	push   ebx
c0022d30:	83 ec 1c             	sub    esp,0x1c
c0022d33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022d37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022d3b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022d3e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022d42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022d46:	80 f9 03             	cmp    cl,0x3
c0022d49:	77 51                	ja     c0022d9c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022d4f:	0f b6 f2             	movzx  esi,dl
c0022d52:	0f b6 db             	movzx  ebx,bl
c0022d55:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022d58:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022d5c:	83 ca 80             	or     edx,0xffffff80
c0022d5f:	0f b6 d2             	movzx  edx,dl
c0022d62:	52                   	push   edx
c0022d63:	6a 0c                	push   0xc
c0022d65:	56                   	push   esi
c0022d66:	57                   	push   edi
c0022d67:	e8 c0 ff ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d6c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022d71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d75:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022d79:	ee                   	out    dx,al
c0022d7a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022d7f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022d83:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022d87:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022d8b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022d93:	83 c4 2c             	add    esp,0x2c
c0022d96:	5b                   	pop    ebx
c0022d97:	5e                   	pop    esi
c0022d98:	5f                   	pop    edi
c0022d99:	5d                   	pop    ebp
c0022d9a:	eb 90                	jmp    c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d9c:	80 fb 07             	cmp    bl,0x7
c0022d9f:	77 12                	ja     c0022db3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022da1:	0f b6 d2             	movzx  edx,dl
c0022da4:	0f b6 db             	movzx  ebx,bl
c0022da7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022daf:	89 da                	mov    edx,ebx
c0022db1:	eb 2f                	jmp    c0022de2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022db3:	80 fb 0d             	cmp    bl,0xd
c0022db6:	77 13                	ja     c0022dcb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022db8:	0f b6 d2             	movzx  edx,dl
c0022dbb:	0f b6 db             	movzx  ebx,bl
c0022dbe:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022dc5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022dc9:	eb 17                	jmp    c0022de2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022dcb:	80 fb 15             	cmp    bl,0x15
c0022dce:	77 13                	ja     c0022de3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022dd0:	0f b6 d2             	movzx  edx,dl
c0022dd3:	0f b6 db             	movzx  ebx,bl
c0022dd6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022dde:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022de2:	ee                   	out    dx,al
c0022de3:	83 c4 1c             	add    esp,0x1c
c0022de6:	5b                   	pop    ebx
c0022de7:	5e                   	pop    esi
c0022de8:	5f                   	pop    edi
c0022de9:	5d                   	pop    ebp
c0022dea:	c3                   	ret    
c0022deb:	90                   	nop

c0022dec <IDE::read(unsigned char, unsigned char)>:
c0022dec:	55                   	push   ebp
c0022ded:	57                   	push   edi
c0022dee:	56                   	push   esi
c0022def:	53                   	push   ebx
c0022df0:	83 ec 1c             	sub    esp,0x1c
c0022df3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022df7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022dfb:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022dfe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e02:	3c 03                	cmp    al,0x3
c0022e04:	77 43                	ja     c0022e49 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022e06:	0f b6 f2             	movzx  esi,dl
c0022e09:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e0c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022e10:	83 c8 80             	or     eax,0xffffff80
c0022e13:	0f b6 c0             	movzx  eax,al
c0022e16:	50                   	push   eax
c0022e17:	6a 0c                	push   0xc
c0022e19:	56                   	push   esi
c0022e1a:	57                   	push   edi
c0022e1b:	e8 0c ff ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e20:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022e25:	0f b6 c3             	movzx  eax,bl
c0022e28:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022e2c:	ec                   	in     al,dx
c0022e2d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022e31:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022e36:	52                   	push   edx
c0022e37:	6a 0c                	push   0xc
c0022e39:	56                   	push   esi
c0022e3a:	57                   	push   edi
c0022e3b:	e8 ec fe ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e40:	83 c4 20             	add    esp,0x20
c0022e43:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022e47:	eb 49                	jmp    c0022e92 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022e49:	80 fb 07             	cmp    bl,0x7
c0022e4c:	77 12                	ja     c0022e60 <IDE::read(unsigned char, unsigned char)+0x74>
c0022e4e:	0f b6 d2             	movzx  edx,dl
c0022e51:	0f b6 c3             	movzx  eax,bl
c0022e54:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022e5c:	89 c2                	mov    edx,eax
c0022e5e:	eb 31                	jmp    c0022e91 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022e60:	80 fb 0d             	cmp    bl,0xd
c0022e63:	77 13                	ja     c0022e78 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022e65:	0f b6 d2             	movzx  edx,dl
c0022e68:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022e6f:	0f b6 d3             	movzx  edx,bl
c0022e72:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022e76:	eb 19                	jmp    c0022e91 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022e78:	31 c0                	xor    eax,eax
c0022e7a:	80 fb 15             	cmp    bl,0x15
c0022e7d:	77 13                	ja     c0022e92 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022e7f:	0f b6 d2             	movzx  edx,dl
c0022e82:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022e8a:	0f b6 d3             	movzx  edx,bl
c0022e8d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022e91:	ec                   	in     al,dx
c0022e92:	83 c4 1c             	add    esp,0x1c
c0022e95:	5b                   	pop    ebx
c0022e96:	5e                   	pop    esi
c0022e97:	5f                   	pop    edi
c0022e98:	5d                   	pop    ebp
c0022e99:	c3                   	ret    

c0022e9a <IDE::waitInterrupt(unsigned char)>:
c0022e9a:	55                   	push   ebp
c0022e9b:	57                   	push   edi
c0022e9c:	56                   	push   esi
c0022e9d:	53                   	push   ebx
c0022e9e:	31 db                	xor    ebx,ebx
c0022ea0:	83 ec 0c             	sub    esp,0xc
c0022ea3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022ea7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022eac:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022eb4:	89 e8                	mov    eax,ebp
c0022eb6:	84 c0                	test   al,al
c0022eb8:	75 34                	jne    c0022eee <IDE::waitInterrupt(unsigned char)+0x54>
c0022eba:	52                   	push   edx
c0022ebb:	6a 0c                	push   0xc
c0022ebd:	56                   	push   esi
c0022ebe:	57                   	push   edi
c0022ebf:	e8 28 ff ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c0022ec4:	83 c4 10             	add    esp,0x10
c0022ec7:	a8 01                	test   al,0x1
c0022ec9:	75 2b                	jne    c0022ef6 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022ecb:	f6 c3 04             	test   bl,0x4
c0022ece:	75 16                	jne    c0022ee6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022ed0:	83 fb 32             	cmp    ebx,0x32
c0022ed3:	7e 11                	jle    c0022ee6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022ed5:	50                   	push   eax
c0022ed6:	50                   	push   eax
c0022ed7:	6a 00                	push   0x0
c0022ed9:	68 80 96 98 00       	push   0x989680
c0022ede:	e8 c6 ab ff ff       	call   c001daa9 <nanoSleep(unsigned long long)>
c0022ee3:	83 c4 10             	add    esp,0x10
c0022ee6:	83 fb 3c             	cmp    ebx,0x3c
c0022ee9:	74 0b                	je     c0022ef6 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022eeb:	43                   	inc    ebx
c0022eec:	eb be                	jmp    c0022eac <IDE::waitInterrupt(unsigned char)+0x12>
c0022eee:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022ef6:	83 c4 0c             	add    esp,0xc
c0022ef9:	89 e8                	mov    eax,ebp
c0022efb:	5b                   	pop    ebx
c0022efc:	5e                   	pop    esi
c0022efd:	5f                   	pop    edi
c0022efe:	5d                   	pop    ebp
c0022eff:	c3                   	ret    

c0022f00 <ideChannel0IRQHandler(regs*, void*)>:
c0022f00:	83 ec 10             	sub    esp,0x10
c0022f03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f07:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022f0e:	6a 07                	push   0x7
c0022f10:	6a 00                	push   0x0
c0022f12:	50                   	push   eax
c0022f13:	e8 d4 fe ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c0022f18:	83 c4 1c             	add    esp,0x1c
c0022f1b:	c3                   	ret    

c0022f1c <ideChannel1IRQHandler(regs*, void*)>:
c0022f1c:	83 ec 10             	sub    esp,0x10
c0022f1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f23:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022f2a:	6a 07                	push   0x7
c0022f2c:	6a 01                	push   0x1
c0022f2e:	50                   	push   eax
c0022f2f:	e8 b8 fe ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c0022f34:	83 c4 1c             	add    esp,0x1c
c0022f37:	c3                   	ret    

c0022f38 <IDE::enableIRQs(unsigned char, bool)>:
c0022f38:	57                   	push   edi
c0022f39:	56                   	push   esi
c0022f3a:	be 04 00 00 00       	mov    esi,0x4
c0022f3f:	53                   	push   ebx
c0022f40:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022f45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f49:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022f4e:	0f 94 c0             	sete   al
c0022f51:	d1 e0                	shl    eax,1
c0022f53:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022f5a:	0f b6 c0             	movzx  eax,al
c0022f5d:	50                   	push   eax
c0022f5e:	6a 0c                	push   0xc
c0022f60:	57                   	push   edi
c0022f61:	53                   	push   ebx
c0022f62:	e8 c5 fd ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f67:	83 c4 10             	add    esp,0x10
c0022f6a:	50                   	push   eax
c0022f6b:	6a 0c                	push   0xc
c0022f6d:	57                   	push   edi
c0022f6e:	53                   	push   ebx
c0022f6f:	e8 78 fe ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c0022f74:	83 c4 10             	add    esp,0x10
c0022f77:	4e                   	dec    esi
c0022f78:	75 f0                	jne    c0022f6a <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022f7a:	5b                   	pop    ebx
c0022f7b:	5e                   	pop    esi
c0022f7c:	5f                   	pop    edi
c0022f7d:	c3                   	ret    

c0022f7e <IDE::open(int, int, void*)>:
c0022f7e:	55                   	push   ebp
c0022f7f:	57                   	push   edi
c0022f80:	56                   	push   esi
c0022f81:	53                   	push   ebx
c0022f82:	83 ec 1c             	sub    esp,0x1c
c0022f85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022f89:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022f92:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022f9b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022fa2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022fa9:	0f 85 b0 02 00 00    	jne    c002325f <IDE::open(int, int, void*)+0x2e1>
c0022faf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022fb5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022fb9:	83 e0 7f             	and    eax,0x7f
c0022fbc:	3c 05                	cmp    al,0x5
c0022fbe:	74 04                	je     c0022fc4 <IDE::open(int, int, void*)+0x46>
c0022fc0:	3c 0f                	cmp    al,0xf
c0022fc2:	75 32                	jne    c0022ff6 <IDE::open(int, int, void*)+0x78>
c0022fc4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022fca:	83 e0 fc             	and    eax,0xfffffffc
c0022fcd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022fd4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022fda:	83 e0 fc             	and    eax,0xfffffffc
c0022fdd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022fe4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022fea:	83 e0 fc             	and    eax,0xfffffffc
c0022fed:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022ff4:	eb 14                	jmp    c002300a <IDE::open(int, int, void*)+0x8c>
c0022ff6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023000:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002300a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023011:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023018:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002301c:	89 c6                	mov    esi,eax
c002301e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023023:	c1 e6 10             	shl    esi,0x10
c0023026:	89 e8                	mov    eax,ebp
c0023028:	89 fa                	mov    edx,edi
c002302a:	c1 e0 0b             	shl    eax,0xb
c002302d:	09 f0                	or     eax,esi
c002302f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023036:	c1 e6 08             	shl    esi,0x8
c0023039:	09 c6                	or     esi,eax
c002303b:	89 f0                	mov    eax,esi
c002303d:	0d 08 00 00 80       	or     eax,0x80000008
c0023042:	ef                   	out    dx,eax
c0023043:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023048:	89 ca                	mov    edx,ecx
c002304a:	ed                   	in     eax,dx
c002304b:	c1 e8 10             	shr    eax,0x10
c002304e:	3d ff ff 00 00       	cmp    eax,0xffff
c0023053:	0f 84 f5 00 00 00    	je     c002314e <IDE::open(int, int, void*)+0x1d0>
c0023059:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002305f:	89 fa                	mov    edx,edi
c0023061:	89 f0                	mov    eax,esi
c0023063:	ef                   	out    dx,eax
c0023064:	b0 fe                	mov    al,0xfe
c0023066:	89 ca                	mov    edx,ecx
c0023068:	ee                   	out    dx,al
c0023069:	89 f0                	mov    eax,esi
c002306b:	89 fa                	mov    edx,edi
c002306d:	ef                   	out    dx,eax
c002306e:	89 ca                	mov    edx,ecx
c0023070:	ed                   	in     eax,dx
c0023071:	3c fe                	cmp    al,0xfe
c0023073:	0f 85 a9 00 00 00    	jne    c0023122 <IDE::open(int, int, void*)+0x1a4>
c0023079:	8b 15 88 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d588
c002307f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023086:	74 33                	je     c00230bb <IDE::open(int, int, void*)+0x13d>
c0023088:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002308e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023092:	40                   	inc    eax
c0023093:	83 ec 0c             	sub    esp,0xc
c0023096:	0f b6 c0             	movzx  eax,al
c0023099:	50                   	push   eax
c002309a:	55                   	push   ebp
c002309b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002309f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00230a5:	51                   	push   ecx
c00230a6:	e8 53 48 ff ff       	call   c00178fe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00230ab:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00230b0:	83 c4 1c             	add    esp,0x1c
c00230b3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00230b9:	eb 0a                	jmp    c00230c5 <IDE::open(int, int, void*)+0x147>
c00230bb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00230c5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00230cc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00230d3:	c1 e1 10             	shl    ecx,0x10
c00230d6:	c1 e0 08             	shl    eax,0x8
c00230d9:	bf f8 0c 00 00       	mov    edi,0xcf8
c00230de:	09 c1                	or     ecx,eax
c00230e0:	89 fa                	mov    edx,edi
c00230e2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00230e9:	c1 e0 0b             	shl    eax,0xb
c00230ec:	09 c1                	or     ecx,eax
c00230ee:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00230f4:	89 c8                	mov    eax,ecx
c00230f6:	ef                   	out    dx,eax
c00230f7:	be fc 0c 00 00       	mov    esi,0xcfc
c00230fc:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023102:	89 f2                	mov    edx,esi
c0023104:	ee                   	out    dx,al
c0023105:	89 c8                	mov    eax,ecx
c0023107:	89 fa                	mov    edx,edi
c0023109:	ef                   	out    dx,eax
c002310a:	89 f2                	mov    edx,esi
c002310c:	ed                   	in     eax,dx
c002310d:	0f b6 c0             	movzx  eax,al
c0023110:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023116:	74 46                	je     c002315e <IDE::open(int, int, void*)+0x1e0>
c0023118:	83 ec 0c             	sub    esp,0xc
c002311b:	68 d8 bc 02 c0       	push   0xc002bcd8
c0023120:	eb 34                	jmp    c0023156 <IDE::open(int, int, void*)+0x1d8>
c0023122:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002312b:	75 17                	jne    c0023144 <IDE::open(int, int, void*)+0x1c6>
c002312d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023132:	74 07                	je     c002313b <IDE::open(int, int, void*)+0x1bd>
c0023134:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023139:	75 09                	jne    c0023144 <IDE::open(int, int, void*)+0x1c6>
c002313b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023142:	eb 1a                	jmp    c002315e <IDE::open(int, int, void*)+0x1e0>
c0023144:	83 ec 0c             	sub    esp,0xc
c0023147:	68 e0 bc 02 c0       	push   0xc002bce0
c002314c:	eb 08                	jmp    c0023156 <IDE::open(int, int, void*)+0x1d8>
c002314e:	83 ec 0c             	sub    esp,0xc
c0023151:	68 11 bd 02 c0       	push   0xc002bd11
c0023156:	e8 ea 6a ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c002315b:	83 c4 10             	add    esp,0x10
c002315e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023165:	79 1a                	jns    c0023181 <IDE::open(int, int, void*)+0x203>
c0023167:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002316d:	83 e0 fc             	and    eax,0xfffffffc
c0023170:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023177:	83 c0 08             	add    eax,0x8
c002317a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023181:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023187:	89 c2                	mov    edx,eax
c0023189:	83 e2 0f             	and    edx,0xf
c002318c:	66 83 fa 08          	cmp    dx,0x8
c0023190:	75 0a                	jne    c002319c <IDE::open(int, int, void*)+0x21e>
c0023192:	83 e8 02             	sub    eax,0x2
c0023195:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002319c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00231a2:	89 c2                	mov    edx,eax
c00231a4:	83 e2 0f             	and    edx,0xf
c00231a7:	66 83 fa 08          	cmp    dx,0x8
c00231ab:	75 0a                	jne    c00231b7 <IDE::open(int, int, void*)+0x239>
c00231ad:	83 e8 02             	sub    eax,0x2
c00231b0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00231b7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00231be:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00231c5:	89 d0                	mov    eax,edx
c00231c7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00231ca:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00231ce:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00231d2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00231d5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00231da:	0f b6 c9             	movzx  ecx,cl
c00231dd:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00231e4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00231e7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00231eb:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00231ef:	8d 50 02             	lea    edx,[eax+0x2]
c00231f2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00231f7:	0f b6 d2             	movzx  edx,dl
c00231fa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023200:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023203:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023207:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002320b:	8d 48 03             	lea    ecx,[eax+0x3]
c002320e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023213:	0f b6 c9             	movzx  ecx,cl
c0023216:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002321c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002321f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023223:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023227:	8d 50 04             	lea    edx,[eax+0x4]
c002322a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023230:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023235:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002323c:	66 85 f6             	test   si,si
c002323f:	74 5b                	je     c002329c <IDE::open(int, int, void*)+0x31e>
c0023241:	0f b6 d2             	movzx  edx,dl
c0023244:	83 c0 05             	add    eax,0x5
c0023247:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002324a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002324e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023252:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023258:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002325d:	eb 3d                	jmp    c002329c <IDE::open(int, int, void*)+0x31e>
c002325f:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023265:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002326c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023273:	66 05 06 02          	add    ax,0x206
c0023277:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002327e:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023285:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002328c:	66 05 06 02          	add    ax,0x206
c0023290:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023297:	e9 e5 fe ff ff       	jmp    c0023181 <IDE::open(int, int, void*)+0x203>
c002329c:	50                   	push   eax
c002329d:	50                   	push   eax
c002329e:	6a 00                	push   0x0
c00232a0:	53                   	push   ebx
c00232a1:	e8 60 fa ff ff       	call   c0022d06 <IDE::prepareInterrupt(unsigned char)>
c00232a6:	5a                   	pop    edx
c00232a7:	59                   	pop    ecx
c00232a8:	6a 01                	push   0x1
c00232aa:	53                   	push   ebx
c00232ab:	e8 56 fa ff ff       	call   c0022d06 <IDE::prepareInterrupt(unsigned char)>
c00232b0:	83 c4 0c             	add    esp,0xc
c00232b3:	6a 00                	push   0x0
c00232b5:	6a 00                	push   0x0
c00232b7:	53                   	push   ebx
c00232b8:	e8 7b fc ff ff       	call   c0022f38 <IDE::enableIRQs(unsigned char, bool)>
c00232bd:	83 c4 0c             	add    esp,0xc
c00232c0:	6a 00                	push   0x0
c00232c2:	6a 01                	push   0x1
c00232c4:	53                   	push   ebx
c00232c5:	e8 6e fc ff ff       	call   c0022f38 <IDE::enableIRQs(unsigned char, bool)>
c00232ca:	83 c4 10             	add    esp,0x10
c00232cd:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00232d4:	74 34                	je     c002330a <IDE::open(int, int, void*)+0x38c>
c00232d6:	83 ec 0c             	sub    esp,0xc
c00232d9:	53                   	push   ebx
c00232da:	6a 01                	push   0x1
c00232dc:	68 00 2f 02 c0       	push   0xc0022f00
c00232e1:	6a 0e                	push   0xe
c00232e3:	53                   	push   ebx
c00232e4:	e8 d3 05 ff ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00232e9:	83 c4 14             	add    esp,0x14
c00232ec:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232f2:	53                   	push   ebx
c00232f3:	6a 01                	push   0x1
c00232f5:	68 1c 2f 02 c0       	push   0xc0022f1c
c00232fa:	6a 0f                	push   0xf
c00232fc:	53                   	push   ebx
c00232fd:	e8 ba 05 ff ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023302:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023308:	eb 38                	jmp    c0023342 <IDE::open(int, int, void*)+0x3c4>
c002330a:	83 ec 0c             	sub    esp,0xc
c002330d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023317:	53                   	push   ebx
c0023318:	6a 00                	push   0x0
c002331a:	68 00 2f 02 c0       	push   0xc0022f00
c002331f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023325:	53                   	push   ebx
c0023326:	e8 91 05 ff ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002332b:	83 c4 14             	add    esp,0x14
c002332e:	53                   	push   ebx
c002332f:	6a 00                	push   0x0
c0023331:	68 1c 2f 02 c0       	push   0xc0022f1c
c0023336:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002333c:	53                   	push   ebx
c002333d:	e8 7a 05 ff ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023342:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023344:	83 c4 20             	add    esp,0x20
c0023347:	83 ec 0c             	sub    esp,0xc
c002334a:	53                   	push   ebx
c002334b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002334e:	83 c4 0c             	add    esp,0xc
c0023351:	6a 07                	push   0x7
c0023353:	6a 00                	push   0x0
c0023355:	53                   	push   ebx
c0023356:	e8 91 fa ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c002335b:	83 c4 0c             	add    esp,0xc
c002335e:	6a 07                	push   0x7
c0023360:	6a 01                	push   0x1
c0023362:	53                   	push   ebx
c0023363:	e8 84 fa ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c0023368:	83 c4 0c             	add    esp,0xc
c002336b:	6a 01                	push   0x1
c002336d:	6a 00                	push   0x0
c002336f:	53                   	push   ebx
c0023370:	e8 c3 fb ff ff       	call   c0022f38 <IDE::enableIRQs(unsigned char, bool)>
c0023375:	83 c4 0c             	add    esp,0xc
c0023378:	6a 01                	push   0x1
c002337a:	6a 01                	push   0x1
c002337c:	53                   	push   ebx
c002337d:	e8 b6 fb ff ff       	call   c0022f38 <IDE::enableIRQs(unsigned char, bool)>
c0023382:	83 c4 2c             	add    esp,0x2c
c0023385:	31 c0                	xor    eax,eax
c0023387:	5b                   	pop    ebx
c0023388:	5e                   	pop    esi
c0023389:	5f                   	pop    edi
c002338a:	5d                   	pop    ebp
c002338b:	c3                   	ret    

c002338c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002338c:	55                   	push   ebp
c002338d:	57                   	push   edi
c002338e:	56                   	push   esi
c002338f:	53                   	push   ebx
c0023390:	83 ec 1c             	sub    esp,0x1c
c0023393:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023397:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002339b:	8d 50 f8             	lea    edx,[eax-0x8]
c002339e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00233a2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00233a6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00233aa:	80 fa 03             	cmp    dl,0x3
c00233ad:	77 5d                	ja     c002340c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00233af:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00233b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00233b7:	0f b6 db             	movzx  ebx,bl
c00233ba:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00233bd:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00233c1:	83 ca 80             	or     edx,0xffffff80
c00233c4:	0f b6 d2             	movzx  edx,dl
c00233c7:	52                   	push   edx
c00233c8:	6a 0c                	push   0xc
c00233ca:	53                   	push   ebx
c00233cb:	56                   	push   esi
c00233cc:	e8 5b f9 ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233d1:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00233d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233da:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00233de:	0f b6 c0             	movzx  eax,al
c00233e1:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00233e5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00233e7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00233ec:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00233f0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00233f4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00233f8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023400:	83 c4 2c             	add    esp,0x2c
c0023403:	5b                   	pop    ebx
c0023404:	5e                   	pop    esi
c0023405:	5f                   	pop    edi
c0023406:	5d                   	pop    ebp
c0023407:	e9 20 f9 ff ff       	jmp    c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002340c:	3c 07                	cmp    al,0x7
c002340e:	77 10                	ja     c0023420 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023410:	0f b6 db             	movzx  ebx,bl
c0023413:	0f b6 d0             	movzx  edx,al
c0023416:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002341e:	eb 2d                	jmp    c002344d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023420:	3c 0d                	cmp    al,0xd
c0023422:	77 13                	ja     c0023437 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023424:	0f b6 db             	movzx  ebx,bl
c0023427:	0f b6 c0             	movzx  eax,al
c002342a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023431:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023435:	eb 16                	jmp    c002344d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023437:	3c 15                	cmp    al,0x15
c0023439:	77 14                	ja     c002344f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002343b:	0f b6 db             	movzx  ebx,bl
c002343e:	0f b6 c0             	movzx  eax,al
c0023441:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023449:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002344d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002344f:	83 c4 1c             	add    esp,0x1c
c0023452:	5b                   	pop    ebx
c0023453:	5e                   	pop    esi
c0023454:	5f                   	pop    edi
c0023455:	5d                   	pop    ebp
c0023456:	c3                   	ret    
c0023457:	90                   	nop

c0023458 <IDE::detect()>:
c0023458:	55                   	push   ebp
c0023459:	57                   	push   edi
c002345a:	56                   	push   esi
c002345b:	53                   	push   ebx
c002345c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023462:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023469:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023470:	0f 85 9d 02 00 00    	jne    c0023713 <IDE::detect()+0x2bb>
c0023476:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002347d:	31 f6                	xor    esi,esi
c002347f:	31 ed                	xor    ebp,ebp
c0023481:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023489:	89 e8                	mov    eax,ebp
c002348b:	c1 e0 06             	shl    eax,0x6
c002348e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023496:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002349a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002349e:	c1 e0 04             	shl    eax,0x4
c00234a1:	83 c8 a0             	or     eax,0xffffffa0
c00234a4:	0f b6 c0             	movzx  eax,al
c00234a7:	50                   	push   eax
c00234a8:	6a 06                	push   0x6
c00234aa:	56                   	push   esi
c00234ab:	53                   	push   ebx
c00234ac:	e8 7b f8 ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234b1:	83 c4 0c             	add    esp,0xc
c00234b4:	6a 0c                	push   0xc
c00234b6:	56                   	push   esi
c00234b7:	53                   	push   ebx
c00234b8:	e8 2f f9 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00234bd:	83 c4 0c             	add    esp,0xc
c00234c0:	6a 0c                	push   0xc
c00234c2:	56                   	push   esi
c00234c3:	53                   	push   ebx
c00234c4:	e8 23 f9 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00234c9:	83 c4 0c             	add    esp,0xc
c00234cc:	6a 0c                	push   0xc
c00234ce:	56                   	push   esi
c00234cf:	53                   	push   ebx
c00234d0:	e8 17 f9 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00234d5:	83 c4 0c             	add    esp,0xc
c00234d8:	6a 0c                	push   0xc
c00234da:	56                   	push   esi
c00234db:	53                   	push   ebx
c00234dc:	e8 0b f9 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00234e1:	68 ec 00 00 00       	push   0xec
c00234e6:	6a 07                	push   0x7
c00234e8:	56                   	push   esi
c00234e9:	53                   	push   ebx
c00234ea:	e8 3d f8 ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234ef:	83 c4 1c             	add    esp,0x1c
c00234f2:	6a 0c                	push   0xc
c00234f4:	56                   	push   esi
c00234f5:	53                   	push   ebx
c00234f6:	e8 f1 f8 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00234fb:	83 c4 0c             	add    esp,0xc
c00234fe:	6a 0c                	push   0xc
c0023500:	56                   	push   esi
c0023501:	53                   	push   ebx
c0023502:	e8 e5 f8 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c0023507:	83 c4 0c             	add    esp,0xc
c002350a:	6a 0c                	push   0xc
c002350c:	56                   	push   esi
c002350d:	53                   	push   ebx
c002350e:	e8 d9 f8 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c0023513:	83 c4 0c             	add    esp,0xc
c0023516:	6a 0c                	push   0xc
c0023518:	56                   	push   esi
c0023519:	53                   	push   ebx
c002351a:	e8 cd f8 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c002351f:	83 c4 0c             	add    esp,0xc
c0023522:	6a 0c                	push   0xc
c0023524:	56                   	push   esi
c0023525:	53                   	push   ebx
c0023526:	e8 c1 f8 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c002352b:	83 c4 10             	add    esp,0x10
c002352e:	84 c0                	test   al,al
c0023530:	0f 84 63 01 00 00    	je     c0023699 <IDE::detect()+0x241>
c0023536:	31 ff                	xor    edi,edi
c0023538:	50                   	push   eax
c0023539:	6a 0c                	push   0xc
c002353b:	56                   	push   esi
c002353c:	53                   	push   ebx
c002353d:	e8 aa f8 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c0023542:	83 c4 10             	add    esp,0x10
c0023545:	a8 01                	test   al,0x1
c0023547:	0f 85 6d 01 00 00    	jne    c00236ba <IDE::detect()+0x262>
c002354d:	84 c0                	test   al,al
c002354f:	78 04                	js     c0023555 <IDE::detect()+0xfd>
c0023551:	a8 08                	test   al,0x8
c0023553:	75 27                	jne    c002357c <IDE::detect()+0x124>
c0023555:	47                   	inc    edi
c0023556:	81 ff 17 01 00 00    	cmp    edi,0x117
c002355c:	7e da                	jle    c0023538 <IDE::detect()+0xe0>
c002355e:	50                   	push   eax
c002355f:	50                   	push   eax
c0023560:	6a 00                	push   0x0
c0023562:	68 40 4b 4c 00       	push   0x4c4b40
c0023567:	e8 3d a5 ff ff       	call   c001daa9 <nanoSleep(unsigned long long)>
c002356c:	83 c4 10             	add    esp,0x10
c002356f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023575:	75 c1                	jne    c0023538 <IDE::detect()+0xe0>
c0023577:	e9 3e 01 00 00       	jmp    c00236ba <IDE::detect()+0x262>
c002357c:	31 c9                	xor    ecx,ecx
c002357e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023582:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023586:	83 ec 0c             	sub    esp,0xc
c0023589:	68 80 00 00 00       	push   0x80
c002358e:	57                   	push   edi
c002358f:	6a 00                	push   0x0
c0023591:	56                   	push   esi
c0023592:	53                   	push   ebx
c0023593:	e8 f4 fd ff ff       	call   c002338c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023598:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002359d:	89 e8                	mov    eax,ebp
c002359f:	89 d1                	mov    ecx,edx
c00235a1:	c1 e0 06             	shl    eax,0x6
c00235a4:	01 d8                	add    eax,ebx
c00235a6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00235ad:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00235b4:	89 f2                	mov    edx,esi
c00235b6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00235bc:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00235c0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00235c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00235ca:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00235d1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00235d9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00235e0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00235e8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00235ee:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00235f5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00235fb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00235ff:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023603:	83 c4 20             	add    esp,0x20
c0023606:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023609:	83 c0 02             	add    eax,0x2
c002360c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023612:	83 c7 02             	add    edi,0x2
c0023615:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023618:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002361e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023622:	75 e2                	jne    c0023606 <IDE::detect()+0x1ae>
c0023624:	89 e8                	mov    eax,ebp
c0023626:	c1 e0 06             	shl    eax,0x6
c0023629:	01 d8                	add    eax,ebx
c002362b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023631:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023638:	66 c1 ea 09          	shr    dx,0x9
c002363c:	83 e2 01             	and    edx,0x1
c002363f:	84 c9                	test   cl,cl
c0023641:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023647:	75 22                	jne    c002366b <IDE::detect()+0x213>
c0023649:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023650:	74 46                	je     c0023698 <IDE::detect()+0x240>
c0023652:	83 ec 0c             	sub    esp,0xc
c0023655:	68 7c 01 00 00       	push   0x17c
c002365a:	e8 3d bf fe ff       	call   c000f59c <malloc>
c002365f:	89 c7                	mov    edi,eax
c0023661:	89 04 24             	mov    DWORD PTR [esp],eax
c0023664:	e8 15 05 00 00       	call   c0023b7e <ATA::ATA()>
c0023669:	eb 17                	jmp    c0023682 <IDE::detect()+0x22a>
c002366b:	83 ec 0c             	sub    esp,0xc
c002366e:	68 80 01 00 00       	push   0x180
c0023673:	e8 24 bf fe ff       	call   c000f59c <malloc>
c0023678:	89 c7                	mov    edi,eax
c002367a:	89 04 24             	mov    DWORD PTR [esp],eax
c002367d:	e8 04 0b 00 00       	call   c0024186 <ATAPI::ATAPI()>
c0023682:	5a                   	pop    edx
c0023683:	59                   	pop    ecx
c0023684:	57                   	push   edi
c0023685:	53                   	push   ebx
c0023686:	e8 b9 02 ff ff       	call   c0013944 <Device::addChild(Device*)>
c002368b:	8b 07                	mov    eax,DWORD PTR [edi]
c002368d:	53                   	push   ebx
c002368e:	55                   	push   ebp
c002368f:	6a 00                	push   0x0
c0023691:	57                   	push   edi
c0023692:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023695:	83 c4 20             	add    esp,0x20
c0023698:	45                   	inc    ebp
c0023699:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002369e:	74 0d                	je     c00236ad <IDE::detect()+0x255>
c00236a0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00236a8:	e9 dc fd ff ff       	jmp    c0023489 <IDE::detect()+0x31>
c00236ad:	4e                   	dec    esi
c00236ae:	74 63                	je     c0023713 <IDE::detect()+0x2bb>
c00236b0:	be 01 00 00 00       	mov    esi,0x1
c00236b5:	e9 c7 fd ff ff       	jmp    c0023481 <IDE::detect()+0x29>
c00236ba:	50                   	push   eax
c00236bb:	6a 04                	push   0x4
c00236bd:	56                   	push   esi
c00236be:	53                   	push   ebx
c00236bf:	e8 28 f7 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00236c4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00236c8:	83 c4 0c             	add    esp,0xc
c00236cb:	6a 05                	push   0x5
c00236cd:	56                   	push   esi
c00236ce:	53                   	push   ebx
c00236cf:	e8 18 f7 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00236d4:	83 c4 10             	add    esp,0x10
c00236d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00236db:	80 fa 14             	cmp    dl,0x14
c00236de:	75 04                	jne    c00236e4 <IDE::detect()+0x28c>
c00236e0:	3c eb                	cmp    al,0xeb
c00236e2:	eb 07                	jmp    c00236eb <IDE::detect()+0x293>
c00236e4:	3c 96                	cmp    al,0x96
c00236e6:	75 b1                	jne    c0023699 <IDE::detect()+0x241>
c00236e8:	80 fa 69             	cmp    dl,0x69
c00236eb:	75 ac                	jne    c0023699 <IDE::detect()+0x241>
c00236ed:	68 a1 00 00 00       	push   0xa1
c00236f2:	6a 07                	push   0x7
c00236f4:	56                   	push   esi
c00236f5:	53                   	push   ebx
c00236f6:	e8 31 f6 ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236fb:	5f                   	pop    edi
c00236fc:	58                   	pop    eax
c00236fd:	6a 00                	push   0x0
c00236ff:	68 40 42 0f 00       	push   0xf4240
c0023704:	e8 a0 a3 ff ff       	call   c001daa9 <nanoSleep(unsigned long long)>
c0023709:	83 c4 10             	add    esp,0x10
c002370c:	b1 01                	mov    cl,0x1
c002370e:	e9 6b fe ff ff       	jmp    c002357e <IDE::detect()+0x126>
c0023713:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023719:	5b                   	pop    ebx
c002371a:	5e                   	pop    esi
c002371b:	5f                   	pop    edi
c002371c:	5d                   	pop    ebp
c002371d:	c3                   	ret    

c002371e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002371e:	55                   	push   ebp
c002371f:	57                   	push   edi
c0023720:	56                   	push   esi
c0023721:	53                   	push   ebx
c0023722:	83 ec 1c             	sub    esp,0x1c
c0023725:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023729:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002372d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023731:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023735:	88 c3                	mov    bl,al
c0023737:	84 c0                	test   al,al
c0023739:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002373d:	0f 84 81 00 00 00    	je     c00237c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023743:	83 ec 0c             	sub    esp,0xc
c0023746:	68 3b bd 02 c0       	push   0xc002bd3b
c002374b:	e8 bb ed fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0023750:	83 c4 10             	add    esp,0x10
c0023753:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023757:	3c 01                	cmp    al,0x1
c0023759:	74 63                	je     c00237be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c002375b:	3c 02                	cmp    al,0x2
c002375d:	75 53                	jne    c00237b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002375f:	d1 e6                	shl    esi,1
c0023761:	09 ee                	or     esi,ebp
c0023763:	50                   	push   eax
c0023764:	89 f0                	mov    eax,esi
c0023766:	6a 01                	push   0x1
c0023768:	0f b6 f0             	movzx  esi,al
c002376b:	c1 e6 06             	shl    esi,0x6
c002376e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023776:	50                   	push   eax
c0023777:	57                   	push   edi
c0023778:	e8 6f f6 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c002377d:	83 c4 10             	add    esp,0x10
c0023780:	a8 01                	test   al,0x1
c0023782:	74 02                	je     c0023786 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023784:	b3 07                	mov    bl,0x7
c0023786:	a8 02                	test   al,0x2
c0023788:	74 02                	je     c002378c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c002378a:	b3 03                	mov    bl,0x3
c002378c:	a8 04                	test   al,0x4
c002378e:	74 02                	je     c0023792 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023790:	b3 14                	mov    bl,0x14
c0023792:	a8 08                	test   al,0x8
c0023794:	74 02                	je     c0023798 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023796:	b3 03                	mov    bl,0x3
c0023798:	a8 10                	test   al,0x10
c002379a:	74 02                	je     c002379e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c002379c:	b3 15                	mov    bl,0x15
c002379e:	a8 20                	test   al,0x20
c00237a0:	74 02                	je     c00237a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00237a2:	b3 03                	mov    bl,0x3
c00237a4:	a8 40                	test   al,0x40
c00237a6:	74 02                	je     c00237aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00237a8:	b3 16                	mov    bl,0x16
c00237aa:	84 c0                	test   al,al
c00237ac:	79 16                	jns    c00237c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237ae:	b3 0d                	mov    bl,0xd
c00237b0:	eb 12                	jmp    c00237c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237b2:	3c 03                	cmp    al,0x3
c00237b4:	74 0c                	je     c00237c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00237b6:	3c 04                	cmp    al,0x4
c00237b8:	75 0a                	jne    c00237c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237ba:	b3 08                	mov    bl,0x8
c00237bc:	eb 06                	jmp    c00237c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237be:	b3 13                	mov    bl,0x13
c00237c0:	eb 02                	jmp    c00237c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237c2:	b3 17                	mov    bl,0x17
c00237c4:	83 c4 1c             	add    esp,0x1c
c00237c7:	88 d8                	mov    al,bl
c00237c9:	5b                   	pop    ebx
c00237ca:	5e                   	pop    esi
c00237cb:	5f                   	pop    edi
c00237cc:	5d                   	pop    ebp
c00237cd:	c3                   	ret    

c00237ce <IDE::polling(unsigned char, unsigned int)>:
c00237ce:	57                   	push   edi
c00237cf:	56                   	push   esi
c00237d0:	53                   	push   ebx
c00237d1:	bb 04 00 00 00       	mov    ebx,0x4
c00237d6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00237da:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00237df:	52                   	push   edx
c00237e0:	6a 0c                	push   0xc
c00237e2:	56                   	push   esi
c00237e3:	57                   	push   edi
c00237e4:	e8 03 f6 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00237e9:	83 c4 10             	add    esp,0x10
c00237ec:	4b                   	dec    ebx
c00237ed:	75 f0                	jne    c00237df <IDE::polling(unsigned char, unsigned int)+0x11>
c00237ef:	bb a0 86 01 00       	mov    ebx,0x186a0
c00237f4:	50                   	push   eax
c00237f5:	6a 0c                	push   0xc
c00237f7:	56                   	push   esi
c00237f8:	57                   	push   edi
c00237f9:	e8 ee f5 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00237fe:	83 c4 10             	add    esp,0x10
c0023801:	a8 01                	test   al,0x1
c0023803:	75 17                	jne    c002381c <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023805:	a8 20                	test   al,0x20
c0023807:	75 0f                	jne    c0023818 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023809:	4b                   	dec    ebx
c002380a:	74 10                	je     c002381c <IDE::polling(unsigned char, unsigned int)+0x4e>
c002380c:	84 c0                	test   al,al
c002380e:	78 e4                	js     c00237f4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023810:	a8 08                	test   al,0x8
c0023812:	74 e0                	je     c00237f4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023814:	31 c0                	xor    eax,eax
c0023816:	eb 06                	jmp    c002381e <IDE::polling(unsigned char, unsigned int)+0x50>
c0023818:	b0 01                	mov    al,0x1
c002381a:	eb 02                	jmp    c002381e <IDE::polling(unsigned char, unsigned int)+0x50>
c002381c:	b0 02                	mov    al,0x2
c002381e:	5b                   	pop    ebx
c002381f:	5e                   	pop    esi
c0023820:	5f                   	pop    edi
c0023821:	c3                   	ret    

c0023822 <SATABus::close(int, int, void*)>:
c0023822:	31 c0                	xor    eax,eax
c0023824:	c3                   	ret    
c0023825:	90                   	nop

c0023826 <SATABus::detect()>:
c0023826:	c3                   	ret    
c0023827:	90                   	nop

c0023828 <SATABus::SATABus()>:
c0023828:	83 ec 0c             	sub    esp,0xc
c002382b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002382f:	83 ec 08             	sub    esp,0x8
c0023832:	68 74 bd 02 c0       	push   0xc002bd74
c0023837:	50                   	push   eax
c0023838:	e8 b5 04 ff ff       	call   c0013cf2 <HardDiskController::HardDiskController(char const*)>
c002383d:	83 c4 10             	add    esp,0x10
c0023840:	ba c8 bd 02 c0       	mov    edx,0xc002bdc8
c0023845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023849:	89 10                	mov    DWORD PTR [eax],edx
c002384b:	83 ec 0c             	sub    esp,0xc
c002384e:	6a 50                	push   0x50
c0023850:	e8 94 c1 fe ff       	call   c000f9e9 <Phys::allocateContiguousPages(int)>
c0023855:	83 c4 10             	add    esp,0x10
c0023858:	89 c2                	mov    edx,eax
c002385a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002385e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023864:	83 ec 0c             	sub    esp,0xc
c0023867:	6a 50                	push   0x50
c0023869:	e8 33 d9 fe ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c002386e:	83 c4 10             	add    esp,0x10
c0023871:	89 c2                	mov    edx,eax
c0023873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023877:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002387d:	a1 f0 d6 02 c0       	mov    eax,ds:0xc002d6f0
c0023882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023886:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002388c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023890:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023896:	83 ec 0c             	sub    esp,0xc
c0023899:	6a 03                	push   0x3
c002389b:	6a 50                	push   0x50
c002389d:	51                   	push   ecx
c002389e:	52                   	push   edx
c002389f:	50                   	push   eax
c00238a0:	e8 af e3 fe ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00238a5:	83 c4 20             	add    esp,0x20
c00238a8:	90                   	nop
c00238a9:	83 c4 0c             	add    esp,0xc
c00238ac:	c3                   	ret    
c00238ad:	90                   	nop

c00238ae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00238ae:	83 ec 0c             	sub    esp,0xc
c00238b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00238b5:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00238b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00238bb:	09 c2                	or     edx,eax
c00238bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00238c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00238c9:	31 c0                	xor    eax,eax
c00238cb:	c1 e9 08             	shr    ecx,0x8
c00238ce:	83 e1 0f             	and    ecx,0xf
c00238d1:	39 c8                	cmp    eax,ecx
c00238d3:	74 0a                	je     c00238df <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00238d5:	f6 c2 01             	test   dl,0x1
c00238d8:	74 18                	je     c00238f2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00238da:	d1 ea                	shr    edx,1
c00238dc:	40                   	inc    eax
c00238dd:	eb f2                	jmp    c00238d1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00238df:	83 ec 0c             	sub    esp,0xc
c00238e2:	68 98 bd 02 c0       	push   0xc002bd98
c00238e7:	e8 59 63 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00238ec:	83 c4 10             	add    esp,0x10
c00238ef:	83 c8 ff             	or     eax,0xffffffff
c00238f2:	83 c4 0c             	add    esp,0xc
c00238f5:	c3                   	ret    

c00238f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00238f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00238fa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00238fd:	89 c2                	mov    edx,eax
c00238ff:	c1 ea 08             	shr    edx,0x8
c0023902:	83 e2 0f             	and    edx,0xf
c0023905:	fe ca                	dec    dl
c0023907:	75 31                	jne    c002393a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023909:	83 e0 0f             	and    eax,0xf
c002390c:	3c 03                	cmp    al,0x3
c002390e:	75 2a                	jne    c002393a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023910:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023913:	b8 02 00 00 00       	mov    eax,0x2
c0023918:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002391e:	74 1c                	je     c002393c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023920:	b8 04 00 00 00       	mov    eax,0x4
c0023925:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002392b:	74 0f                	je     c002393c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002392d:	31 c0                	xor    eax,eax
c002392f:	83 fa 03             	cmp    edx,0x3
c0023932:	0f 94 c0             	sete   al
c0023935:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023939:	c3                   	ret    
c002393a:	31 c0                	xor    eax,eax
c002393c:	c3                   	ret    
c002393d:	90                   	nop

c002393e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002393e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023942:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023945:	0f ba e2 0f          	bt     edx,0xf
c0023949:	72 f7                	jb     c0023942 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002394b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002394e:	83 ca 10             	or     edx,0x10
c0023951:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023954:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023957:	83 ca 01             	or     edx,0x1
c002395a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002395d:	c3                   	ret    

c002395e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002395e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023962:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023965:	83 e2 fe             	and    edx,0xfffffffe
c0023968:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002396b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002396e:	83 e2 ef             	and    edx,0xffffffef
c0023971:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023974:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023977:	0f ba e2 0e          	bt     edx,0xe
c002397b:	72 f7                	jb     c0023974 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002397d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023980:	0f ba e2 0f          	bt     edx,0xf
c0023984:	72 ee                	jb     c0023974 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023986:	c3                   	ret    
c0023987:	90                   	nop

c0023988 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023988:	55                   	push   ebp
c0023989:	57                   	push   edi
c002398a:	56                   	push   esi
c002398b:	53                   	push   ebx
c002398c:	83 ec 1c             	sub    esp,0x1c
c002398f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023993:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023997:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002399b:	53                   	push   ebx
c002399c:	89 fd                	mov    ebp,edi
c002399e:	56                   	push   esi
c002399f:	c1 e5 0a             	shl    ebp,0xa
c00239a2:	e8 b7 ff ff ff       	call   c002395e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00239a7:	83 ec 0c             	sub    esp,0xc
c00239aa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00239b0:	01 e8                	add    eax,ebp
c00239b2:	89 03                	mov    DWORD PTR [ebx],eax
c00239b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239b6:	68 00 04 00 00       	push   0x400
c00239bb:	6a 00                	push   0x0
c00239bd:	50                   	push   eax
c00239be:	e8 8d cd fd ff       	call   c0000750 <memset>
c00239c3:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00239c9:	89 fa                	mov    edx,edi
c00239cb:	01 e8                	add    eax,ebp
c00239cd:	c1 e7 0d             	shl    edi,0xd
c00239d0:	89 03                	mov    DWORD PTR [ebx],eax
c00239d2:	c1 e2 08             	shl    edx,0x8
c00239d5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00239dc:	81 c2 00 80 00 00    	add    edx,0x8000
c00239e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00239e6:	89 d0                	mov    eax,edx
c00239e8:	83 c4 1c             	add    esp,0x1c
c00239eb:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00239f1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00239f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00239f7:	68 00 01 00 00       	push   0x100
c00239fc:	6a 00                	push   0x0
c00239fe:	50                   	push   eax
c00239ff:	e8 4c cd fd ff       	call   c0000750 <memset>
c0023a04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a08:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023a0e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023a14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023a18:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023a1b:	83 c4 10             	add    esp,0x10
c0023a1e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023a25:	31 ff                	xor    edi,edi
c0023a27:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023a2d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023a33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a37:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a3d:	83 c5 20             	add    ebp,0x20
c0023a40:	01 f8                	add    eax,edi
c0023a42:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023a45:	52                   	push   edx
c0023a46:	68 00 01 00 00       	push   0x100
c0023a4b:	6a 00                	push   0x0
c0023a4d:	50                   	push   eax
c0023a4e:	e8 fd cc fd ff       	call   c0000750 <memset>
c0023a53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023a57:	83 c4 10             	add    esp,0x10
c0023a5a:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023a60:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023a67:	01 f8                	add    eax,edi
c0023a69:	81 c7 00 01 00 00    	add    edi,0x100
c0023a6f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023a72:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023a78:	75 b3                	jne    c0023a2d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023a7a:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023a7e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023a82:	83 c4 1c             	add    esp,0x1c
c0023a85:	5b                   	pop    ebx
c0023a86:	5e                   	pop    esi
c0023a87:	5f                   	pop    edi
c0023a88:	5d                   	pop    ebp
c0023a89:	e9 b0 fe ff ff       	jmp    c002393e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023a8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023a8e:	55                   	push   ebp
c0023a8f:	57                   	push   edi
c0023a90:	56                   	push   esi
c0023a91:	53                   	push   ebx
c0023a92:	31 db                	xor    ebx,ebx
c0023a94:	83 ec 0c             	sub    esp,0xc
c0023a97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023a9b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023a9f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023aa2:	f7 c7 01 00 00 00    	test   edi,0x1
c0023aa8:	74 7a                	je     c0023b24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023aaa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023aae:	89 d8                	mov    eax,ebx
c0023ab0:	c1 e0 07             	shl    eax,0x7
c0023ab3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023aba:	55                   	push   ebp
c0023abb:	56                   	push   esi
c0023abc:	e8 35 fe ff ff       	call   c00238f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ac1:	5a                   	pop    edx
c0023ac2:	83 f8 01             	cmp    eax,0x1
c0023ac5:	59                   	pop    ecx
c0023ac6:	75 21                	jne    c0023ae9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023ac8:	50                   	push   eax
c0023ac9:	53                   	push   ebx
c0023aca:	55                   	push   ebp
c0023acb:	56                   	push   esi
c0023acc:	e8 b7 fe ff ff       	call   c0023988 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ad1:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ad8:	e8 bf ba fe ff       	call   c000f59c <malloc>
c0023add:	89 c5                	mov    ebp,eax
c0023adf:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ae2:	e8 03 0d 00 00       	call   c00247ea <SATA::SATA()>
c0023ae7:	eb 24                	jmp    c0023b0d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023ae9:	83 f8 04             	cmp    eax,0x4
c0023aec:	75 36                	jne    c0023b24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023aee:	51                   	push   ecx
c0023aef:	53                   	push   ebx
c0023af0:	55                   	push   ebp
c0023af1:	56                   	push   esi
c0023af2:	e8 91 fe ff ff       	call   c0023988 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023af7:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023afe:	e8 99 ba fe ff       	call   c000f59c <malloc>
c0023b03:	89 c5                	mov    ebp,eax
c0023b05:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b08:	e8 53 10 00 00       	call   c0024b60 <SATAPI::SATAPI()>
c0023b0d:	58                   	pop    eax
c0023b0e:	5a                   	pop    edx
c0023b0f:	55                   	push   ebp
c0023b10:	56                   	push   esi
c0023b11:	e8 2e fe fe ff       	call   c0013944 <Device::addChild(Device*)>
c0023b16:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023b19:	56                   	push   esi
c0023b1a:	6a 00                	push   0x0
c0023b1c:	53                   	push   ebx
c0023b1d:	55                   	push   ebp
c0023b1e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023b21:	83 c4 20             	add    esp,0x20
c0023b24:	d1 ef                	shr    edi,1
c0023b26:	43                   	inc    ebx
c0023b27:	83 fb 20             	cmp    ebx,0x20
c0023b2a:	0f 85 72 ff ff ff    	jne    c0023aa2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023b30:	83 c4 0c             	add    esp,0xc
c0023b33:	5b                   	pop    ebx
c0023b34:	5e                   	pop    esi
c0023b35:	5f                   	pop    edi
c0023b36:	5d                   	pop    ebp
c0023b37:	c3                   	ret    

c0023b38 <SATABus::open(int, int, void*)>:
c0023b38:	83 ec 14             	sub    esp,0x14
c0023b3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b3f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023b45:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023b4b:	52                   	push   edx
c0023b4c:	50                   	push   eax
c0023b4d:	e8 3c ff ff ff       	call   c0023a8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023b52:	31 c0                	xor    eax,eax
c0023b54:	83 c4 1c             	add    esp,0x1c
c0023b57:	c3                   	ret    

c0023b58 <ATA::close(int, int, void*)>:
c0023b58:	83 ec 0c             	sub    esp,0xc
c0023b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023b65:	85 c0                	test   eax,eax
c0023b67:	74 0c                	je     c0023b75 <ATA::close(int, int, void*)+0x1d>
c0023b69:	83 ec 0c             	sub    esp,0xc
c0023b6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0023b6e:	50                   	push   eax
c0023b6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	31 c0                	xor    eax,eax
c0023b77:	83 c4 0c             	add    esp,0xc
c0023b7a:	c3                   	ret    
c0023b7b:	90                   	nop

c0023b7c <ATA::powerSaving(PowerSavingLevel)>:
c0023b7c:	c3                   	ret    
c0023b7d:	90                   	nop

c0023b7e <ATA::ATA()>:
c0023b7e:	83 ec 0c             	sub    esp,0xc
c0023b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b85:	83 ec 04             	sub    esp,0x4
c0023b88:	68 00 02 00 00       	push   0x200
c0023b8d:	68 91 be 02 c0       	push   0xc002be91
c0023b92:	50                   	push   eax
c0023b93:	e8 e2 01 ff ff       	call   c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023b98:	83 c4 10             	add    esp,0x10
c0023b9b:	ba 14 be 02 c0       	mov    edx,0xc002be14
c0023ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ba4:	89 10                	mov    DWORD PTR [eax],edx
c0023ba6:	90                   	nop
c0023ba7:	83 c4 0c             	add    esp,0xc
c0023baa:	c3                   	ret    
c0023bab:	90                   	nop

c0023bac <ATA::flush(bool)>:
c0023bac:	53                   	push   ebx
c0023bad:	83 ec 08             	sub    esp,0x8
c0023bb0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023bb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023bb9:	19 c0                	sbb    eax,eax
c0023bbb:	83 e0 fd             	and    eax,0xfffffffd
c0023bbe:	05 ea 00 00 00       	add    eax,0xea
c0023bc3:	50                   	push   eax
c0023bc4:	6a 07                	push   0x7
c0023bc6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023bcd:	50                   	push   eax
c0023bce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bd4:	e8 53 f1 ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bd9:	83 c4 0c             	add    esp,0xc
c0023bdc:	6a 00                	push   0x0
c0023bde:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023be5:	50                   	push   eax
c0023be6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bec:	e8 dd fb ff ff       	call   c00237ce <IDE::polling(unsigned char, unsigned int)>
c0023bf1:	83 c4 18             	add    esp,0x18
c0023bf4:	5b                   	pop    ebx
c0023bf5:	c3                   	ret    

c0023bf6 <ATA::readyForCommand()>:
c0023bf6:	56                   	push   esi
c0023bf7:	53                   	push   ebx
c0023bf8:	31 db                	xor    ebx,ebx
c0023bfa:	50                   	push   eax
c0023bfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023bff:	50                   	push   eax
c0023c00:	6a 0c                	push   0xc
c0023c02:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023c09:	50                   	push   eax
c0023c0a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023c10:	e8 d7 f1 ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c0023c15:	83 c4 10             	add    esp,0x10
c0023c18:	a8 88                	test   al,0x88
c0023c1a:	74 23                	je     c0023c3f <ATA::readyForCommand()+0x49>
c0023c1c:	43                   	inc    ebx
c0023c1d:	83 fb 63             	cmp    ebx,0x63
c0023c20:	7e dd                	jle    c0023bff <ATA::readyForCommand()+0x9>
c0023c22:	51                   	push   ecx
c0023c23:	51                   	push   ecx
c0023c24:	6a 00                	push   0x0
c0023c26:	68 40 42 0f 00       	push   0xf4240
c0023c2b:	e8 79 9e ff ff       	call   c001daa9 <nanoSleep(unsigned long long)>
c0023c30:	83 c4 10             	add    esp,0x10
c0023c33:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023c39:	75 c4                	jne    c0023bff <ATA::readyForCommand()+0x9>
c0023c3b:	31 c0                	xor    eax,eax
c0023c3d:	eb 02                	jmp    c0023c41 <ATA::readyForCommand()+0x4b>
c0023c3f:	b0 01                	mov    al,0x1
c0023c41:	5a                   	pop    edx
c0023c42:	5b                   	pop    ebx
c0023c43:	5e                   	pop    esi
c0023c44:	c3                   	ret    
c0023c45:	90                   	nop

c0023c46 <ATA::access(unsigned long long, int, void*, bool)>:
c0023c46:	55                   	push   ebp
c0023c47:	57                   	push   edi
c0023c48:	56                   	push   esi
c0023c49:	53                   	push   ebx
c0023c4a:	83 ec 2c             	sub    esp,0x2c
c0023c4d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023c51:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023c55:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023c59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c5d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023c61:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023c65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023c69:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023c6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023c73:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023c79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023c7d:	c1 e0 06             	shl    eax,0x6
c0023c80:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023c88:	74 5d                	je     c0023ce7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023c8a:	89 fa                	mov    edx,edi
c0023c8c:	89 f0                	mov    eax,esi
c0023c8e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023c92:	c1 ea 1c             	shr    edx,0x1c
c0023c95:	89 d1                	mov    ecx,edx
c0023c97:	09 c1                	or     ecx,eax
c0023c99:	74 25                	je     c0023cc0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023c9b:	31 ed                	xor    ebp,ebp
c0023c9d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023ca4:	89 fa                	mov    edx,edi
c0023ca6:	89 f0                	mov    eax,esi
c0023ca8:	0f ad d0             	shrd   eax,edx,cl
c0023cab:	d3 ea                	shr    edx,cl
c0023cad:	f6 c1 20             	test   cl,0x20
c0023cb0:	74 02                	je     c0023cb4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023cb2:	89 d0                	mov    eax,edx
c0023cb4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023cb8:	45                   	inc    ebp
c0023cb9:	83 fd 06             	cmp    ebp,0x6
c0023cbc:	75 df                	jne    c0023c9d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023cbe:	eb 76                	jmp    c0023d36 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023cc0:	89 f0                	mov    eax,esi
c0023cc2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023cc7:	89 fa                	mov    edx,edi
c0023cc9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023cd0:	0f ac d0 10          	shrd   eax,edx,0x10
c0023cd4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023cd9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023cdd:	c1 ee 18             	shr    esi,0x18
c0023ce0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023ce5:	eb 56                	jmp    c0023d3d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ce7:	6a 00                	push   0x0
c0023ce9:	6a 3f                	push   0x3f
c0023ceb:	57                   	push   edi
c0023cec:	56                   	push   esi
c0023ced:	e8 22 29 00 00       	call   c0026614 <__umoddi3>
c0023cf2:	83 c4 10             	add    esp,0x10
c0023cf5:	40                   	inc    eax
c0023cf6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023cfa:	6a 00                	push   0x0
c0023cfc:	68 f0 03 00 00       	push   0x3f0
c0023d01:	57                   	push   edi
c0023d02:	56                   	push   esi
c0023d03:	e8 0c 28 00 00       	call   c0026514 <__udivdi3>
c0023d08:	83 c4 10             	add    esp,0x10
c0023d0b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023d10:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d17:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d1c:	6a 00                	push   0x0
c0023d1e:	6a 3f                	push   0x3f
c0023d20:	57                   	push   edi
c0023d21:	56                   	push   esi
c0023d22:	e8 ed 27 00 00       	call   c0026514 <__udivdi3>
c0023d27:	83 c4 10             	add    esp,0x10
c0023d2a:	89 c6                	mov    esi,eax
c0023d2c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023d31:	83 e6 0f             	and    esi,0xf
c0023d34:	eb 07                	jmp    c0023d3d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d36:	31 f6                	xor    esi,esi
c0023d38:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023d3d:	bf 01 00 00 00       	mov    edi,0x1
c0023d42:	50                   	push   eax
c0023d43:	6a 00                	push   0x0
c0023d45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d4c:	50                   	push   eax
c0023d4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023d51:	e8 e2 f1 ff ff       	call   c0022f38 <IDE::enableIRQs(unsigned char, bool)>
c0023d56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d59:	e8 98 fe ff ff       	call   c0023bf6 <ATA::readyForCommand()>
c0023d5e:	83 c4 10             	add    esp,0x10
c0023d61:	84 c0                	test   al,al
c0023d63:	0f 84 5a 02 00 00    	je     c0023fc3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023d69:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023d6f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023d75:	c1 e0 04             	shl    eax,0x4
c0023d78:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023d7f:	09 c6                	or     esi,eax
c0023d81:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023d86:	75 05                	jne    c0023d8d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023d88:	83 ce a0             	or     esi,0xffffffa0
c0023d8b:	eb 03                	jmp    c0023d90 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023d8d:	83 ce e0             	or     esi,0xffffffe0
c0023d90:	89 f0                	mov    eax,esi
c0023d92:	0f b6 f0             	movzx  esi,al
c0023d95:	56                   	push   esi
c0023d96:	6a 06                	push   0x6
c0023d98:	51                   	push   ecx
c0023d99:	52                   	push   edx
c0023d9a:	e8 8d ef ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d9f:	83 c4 10             	add    esp,0x10
c0023da2:	6a 00                	push   0x0
c0023da4:	6a 01                	push   0x1
c0023da6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dad:	50                   	push   eax
c0023dae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023db4:	e8 73 ef ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023db9:	83 c4 10             	add    esp,0x10
c0023dbc:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023dc1:	75 6e                	jne    c0023e31 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023dc3:	6a 00                	push   0x0
c0023dc5:	6a 08                	push   0x8
c0023dc7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dce:	50                   	push   eax
c0023dcf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dd5:	e8 52 ef ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dda:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023ddf:	50                   	push   eax
c0023de0:	6a 09                	push   0x9
c0023de2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023de9:	50                   	push   eax
c0023dea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023df0:	e8 37 ef ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023df5:	83 c4 20             	add    esp,0x20
c0023df8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023dfd:	50                   	push   eax
c0023dfe:	6a 0a                	push   0xa
c0023e00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e07:	50                   	push   eax
c0023e08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e0e:	e8 19 ef ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e13:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023e18:	50                   	push   eax
c0023e19:	6a 0b                	push   0xb
c0023e1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e22:	50                   	push   eax
c0023e23:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e29:	e8 fe ee ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e2e:	83 c4 20             	add    esp,0x20
c0023e31:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023e36:	50                   	push   eax
c0023e37:	6a 02                	push   0x2
c0023e39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e40:	50                   	push   eax
c0023e41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e47:	e8 e0 ee ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e4c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023e51:	50                   	push   eax
c0023e52:	6a 03                	push   0x3
c0023e54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e5b:	50                   	push   eax
c0023e5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e62:	e8 c5 ee ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e67:	83 c4 20             	add    esp,0x20
c0023e6a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023e6f:	50                   	push   eax
c0023e70:	6a 04                	push   0x4
c0023e72:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e79:	50                   	push   eax
c0023e7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e80:	e8 a7 ee ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023e8a:	50                   	push   eax
c0023e8b:	6a 05                	push   0x5
c0023e8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e94:	50                   	push   eax
c0023e95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e9b:	e8 8c ee ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ea0:	83 c4 20             	add    esp,0x20
c0023ea3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ea8:	0f 94 c0             	sete   al
c0023eab:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023eb0:	74 09                	je     c0023ebb <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023eb2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023eb9:	eb 07                	jmp    c0023ec2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023ebb:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023ec2:	0f b6 c0             	movzx  eax,al
c0023ec5:	50                   	push   eax
c0023ec6:	6a 07                	push   0x7
c0023ec8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ecf:	50                   	push   eax
c0023ed0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ed6:	e8 51 ee ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023edb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023edf:	83 c4 10             	add    esp,0x10
c0023ee2:	85 f6                	test   esi,esi
c0023ee4:	0f 84 ba 00 00 00    	je     c0023fa4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023eea:	50                   	push   eax
c0023eeb:	6a 01                	push   0x1
c0023eed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ef4:	50                   	push   eax
c0023ef5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023efb:	e8 ce f8 ff ff       	call   c00237ce <IDE::polling(unsigned char, unsigned int)>
c0023f00:	83 c4 10             	add    esp,0x10
c0023f03:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023f09:	84 c0                	test   al,al
c0023f0b:	74 2c                	je     c0023f39 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023f0d:	0f b6 f8             	movzx  edi,al
c0023f10:	0f b6 d2             	movzx  edx,dl
c0023f13:	57                   	push   edi
c0023f14:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023f1b:	50                   	push   eax
c0023f1c:	52                   	push   edx
c0023f1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f23:	e8 f6 f7 ff ff       	call   c002371e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023f28:	c7 04 24 ec bd 02 c0 	mov    DWORD PTR [esp],0xc002bdec
c0023f2f:	e8 d7 e5 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0023f34:	e9 87 00 00 00       	jmp    c0023fc0 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023f39:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023f3e:	74 33                	je     c0023f73 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023f40:	31 ed                	xor    ebp,ebp
c0023f42:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023f46:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023f4a:	50                   	push   eax
c0023f4b:	50                   	push   eax
c0023f4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f53:	50                   	push   eax
c0023f54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f5a:	e8 bb ed ff ff       	call   c0022d1a <IDE::getBase(unsigned char)>
c0023f5f:	89 c2                	mov    edx,eax
c0023f61:	89 f8                	mov    eax,edi
c0023f63:	66 ef                	out    dx,ax
c0023f65:	45                   	inc    ebp
c0023f66:	83 c4 10             	add    esp,0x10
c0023f69:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023f6f:	75 d1                	jne    c0023f42 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023f71:	eb 23                	jmp    c0023f96 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023f73:	0f b6 d2             	movzx  edx,dl
c0023f76:	51                   	push   ecx
c0023f77:	51                   	push   ecx
c0023f78:	52                   	push   edx
c0023f79:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f7f:	e8 96 ed ff ff       	call   c0022d1a <IDE::getBase(unsigned char)>
c0023f84:	b9 00 01 00 00       	mov    ecx,0x100
c0023f89:	89 c2                	mov    edx,eax
c0023f8b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023f8f:	fc                   	cld    
c0023f90:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023f93:	83 c4 10             	add    esp,0x10
c0023f96:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023f9e:	4e                   	dec    esi
c0023f9f:	e9 3e ff ff ff       	jmp    c0023ee2 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0023fa4:	31 ff                	xor    edi,edi
c0023fa6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023fab:	74 16                	je     c0023fc3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023fad:	50                   	push   eax
c0023fae:	50                   	push   eax
c0023faf:	31 c0                	xor    eax,eax
c0023fb1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023fb6:	0f 94 c0             	sete   al
c0023fb9:	50                   	push   eax
c0023fba:	53                   	push   ebx
c0023fbb:	e8 ec fb ff ff       	call   c0023bac <ATA::flush(bool)>
c0023fc0:	83 c4 10             	add    esp,0x10
c0023fc3:	83 c4 2c             	add    esp,0x2c
c0023fc6:	89 f8                	mov    eax,edi
c0023fc8:	5b                   	pop    ebx
c0023fc9:	5e                   	pop    esi
c0023fca:	5f                   	pop    edi
c0023fcb:	5d                   	pop    ebp
c0023fcc:	c3                   	ret    
c0023fcd:	90                   	nop

c0023fce <ATA::read(unsigned long long, int, void*)>:
c0023fce:	57                   	push   edi
c0023fcf:	b8 04 00 00 00       	mov    eax,0x4
c0023fd4:	56                   	push   esi
c0023fd5:	53                   	push   ebx
c0023fd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023fda:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023fde:	8d 7a ff             	lea    edi,[edx-0x1]
c0023fe1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023fe5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023fe9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0023fef:	77 25                	ja     c0024016 <ATA::read(unsigned long long, int, void*)+0x48>
c0023ff1:	b8 06 00 00 00       	mov    eax,0x6
c0023ff6:	85 f6                	test   esi,esi
c0023ff8:	74 1c                	je     c0024016 <ATA::read(unsigned long long, int, void*)+0x48>
c0023ffa:	50                   	push   eax
c0023ffb:	50                   	push   eax
c0023ffc:	6a 00                	push   0x0
c0023ffe:	56                   	push   esi
c0023fff:	52                   	push   edx
c0024000:	53                   	push   ebx
c0024001:	51                   	push   ecx
c0024002:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024006:	e8 3b fc ff ff       	call   c0023c46 <ATA::access(unsigned long long, int, void*, bool)>
c002400b:	83 c4 20             	add    esp,0x20
c002400e:	85 c0                	test   eax,eax
c0024010:	0f 95 c0             	setne  al
c0024013:	0f b6 c0             	movzx  eax,al
c0024016:	5b                   	pop    ebx
c0024017:	5e                   	pop    esi
c0024018:	5f                   	pop    edi
c0024019:	c3                   	ret    

c002401a <ATA::write(unsigned long long, int, void*)>:
c002401a:	57                   	push   edi
c002401b:	b8 04 00 00 00       	mov    eax,0x4
c0024020:	56                   	push   esi
c0024021:	53                   	push   ebx
c0024022:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024026:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002402a:	8d 7a ff             	lea    edi,[edx-0x1]
c002402d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024031:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024035:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002403b:	77 25                	ja     c0024062 <ATA::write(unsigned long long, int, void*)+0x48>
c002403d:	b8 06 00 00 00       	mov    eax,0x6
c0024042:	85 f6                	test   esi,esi
c0024044:	74 1c                	je     c0024062 <ATA::write(unsigned long long, int, void*)+0x48>
c0024046:	50                   	push   eax
c0024047:	50                   	push   eax
c0024048:	6a 01                	push   0x1
c002404a:	56                   	push   esi
c002404b:	52                   	push   edx
c002404c:	53                   	push   ebx
c002404d:	51                   	push   ecx
c002404e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024052:	e8 ef fb ff ff       	call   c0023c46 <ATA::access(unsigned long long, int, void*, bool)>
c0024057:	83 c4 20             	add    esp,0x20
c002405a:	85 c0                	test   eax,eax
c002405c:	0f 95 c0             	setne  al
c002405f:	0f b6 c0             	movzx  eax,al
c0024062:	5b                   	pop    ebx
c0024063:	5e                   	pop    esi
c0024064:	5f                   	pop    edi
c0024065:	c3                   	ret    

c0024066 <ATA::detectCHS()>:
c0024066:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002406a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024070:	c1 e0 06             	shl    eax,0x6
c0024073:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024079:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024083:	c7 44 24 04 f7 bd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bdf7
c002408b:	e9 b5 5b ff ff       	jmp    c0019c45 <Krnl::panic(char const*)>

c0024090 <ATA::open(int, int, void*)>:
c0024090:	53                   	push   ebx
c0024091:	83 ec 08             	sub    esp,0x8
c0024094:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024098:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002409c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00240a0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00240a6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00240ac:	c1 e0 06             	shl    eax,0x6
c00240af:	01 d0                	add    eax,edx
c00240b1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00240b8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00240be:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00240c5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00240cf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00240d5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00240dc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00240e3:	75 0c                	jne    c00240f1 <ATA::open(int, int, void*)+0x61>
c00240e5:	83 ec 0c             	sub    esp,0xc
c00240e8:	53                   	push   ebx
c00240e9:	e8 78 ff ff ff       	call   c0024066 <ATA::detectCHS()>
c00240ee:	83 c4 10             	add    esp,0x10
c00240f1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00240f7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240fd:	c1 e0 06             	shl    eax,0x6
c0024100:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024107:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024111:	d1 e8                	shr    eax,1
c0024113:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024119:	6a 04                	push   0x4
c002411b:	6a 0c                	push   0xc
c002411d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024124:	50                   	push   eax
c0024125:	52                   	push   edx
c0024126:	e8 01 ec ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002412b:	90                   	nop
c002412c:	90                   	nop
c002412d:	6a 00                	push   0x0
c002412f:	6a 0c                	push   0xc
c0024131:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024138:	50                   	push   eax
c0024139:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002413f:	e8 e8 eb ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024144:	83 c4 14             	add    esp,0x14
c0024147:	53                   	push   ebx
c0024148:	e8 95 fc fe ff       	call   c0013de2 <PhysicalDisk::startCache()>
c002414d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024150:	e8 dd 1e ff ff       	call   c0016032 <createPartitionsForDisk(PhysicalDisk*)>
c0024155:	31 c0                	xor    eax,eax
c0024157:	83 c4 18             	add    esp,0x18
c002415a:	5b                   	pop    ebx
c002415b:	c3                   	ret    

c002415c <ATAPI::write(unsigned long long, int, void*)>:
c002415c:	b8 03 00 00 00       	mov    eax,0x3
c0024161:	c3                   	ret    

c0024162 <ATAPI::close(int, int, void*)>:
c0024162:	83 ec 0c             	sub    esp,0xc
c0024165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024169:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002416f:	85 c0                	test   eax,eax
c0024171:	74 0c                	je     c002417f <ATAPI::close(int, int, void*)+0x1d>
c0024173:	83 ec 0c             	sub    esp,0xc
c0024176:	8b 10                	mov    edx,DWORD PTR [eax]
c0024178:	50                   	push   eax
c0024179:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002417c:	83 c4 10             	add    esp,0x10
c002417f:	31 c0                	xor    eax,eax
c0024181:	83 c4 0c             	add    esp,0xc
c0024184:	c3                   	ret    
c0024185:	90                   	nop

c0024186 <ATAPI::ATAPI()>:
c0024186:	83 ec 0c             	sub    esp,0xc
c0024189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002418d:	83 ec 04             	sub    esp,0x4
c0024190:	68 00 08 00 00       	push   0x800
c0024195:	68 31 bf 02 c0       	push   0xc002bf31
c002419a:	50                   	push   eax
c002419b:	e8 da fb fe ff       	call   c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00241a0:	83 c4 10             	add    esp,0x10
c00241a3:	ba 4c be 02 c0       	mov    edx,0xc002be4c
c00241a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241ac:	89 10                	mov    DWORD PTR [eax],edx
c00241ae:	90                   	nop
c00241af:	83 c4 0c             	add    esp,0xc
c00241b2:	c3                   	ret    
c00241b3:	90                   	nop

c00241b4 <ATAPI::readyForCommand()>:
c00241b4:	56                   	push   esi
c00241b5:	53                   	push   ebx
c00241b6:	31 db                	xor    ebx,ebx
c00241b8:	50                   	push   eax
c00241b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00241bd:	50                   	push   eax
c00241be:	6a 0c                	push   0xc
c00241c0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00241c7:	50                   	push   eax
c00241c8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00241ce:	e8 19 ec ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00241d3:	83 c4 10             	add    esp,0x10
c00241d6:	a8 88                	test   al,0x88
c00241d8:	74 23                	je     c00241fd <ATAPI::readyForCommand()+0x49>
c00241da:	43                   	inc    ebx
c00241db:	83 fb 63             	cmp    ebx,0x63
c00241de:	7e dd                	jle    c00241bd <ATAPI::readyForCommand()+0x9>
c00241e0:	51                   	push   ecx
c00241e1:	51                   	push   ecx
c00241e2:	6a 00                	push   0x0
c00241e4:	68 40 42 0f 00       	push   0xf4240
c00241e9:	e8 bb 98 ff ff       	call   c001daa9 <nanoSleep(unsigned long long)>
c00241ee:	83 c4 10             	add    esp,0x10
c00241f1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00241f7:	75 c4                	jne    c00241bd <ATAPI::readyForCommand()+0x9>
c00241f9:	31 c0                	xor    eax,eax
c00241fb:	eb 02                	jmp    c00241ff <ATAPI::readyForCommand()+0x4b>
c00241fd:	b0 01                	mov    al,0x1
c00241ff:	5a                   	pop    edx
c0024200:	5b                   	pop    ebx
c0024201:	5e                   	pop    esi
c0024202:	c3                   	ret    
c0024203:	90                   	nop

c0024204 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024204:	55                   	push   ebp
c0024205:	57                   	push   edi
c0024206:	56                   	push   esi
c0024207:	53                   	push   ebx
c0024208:	83 ec 20             	sub    esp,0x20
c002420b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002420f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024213:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024217:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002421b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002421f:	6a 01                	push   0x1
c0024221:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024228:	50                   	push   eax
c0024229:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002422f:	e8 04 ed ff ff       	call   c0022f38 <IDE::enableIRQs(unsigned char, bool)>
c0024234:	5e                   	pop    esi
c0024235:	58                   	pop    eax
c0024236:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002423d:	50                   	push   eax
c002423e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024244:	e8 bd ea ff ff       	call   c0022d06 <IDE::prepareInterrupt(unsigned char)>
c0024249:	89 3c 24             	mov    DWORD PTR [esp],edi
c002424c:	e8 63 ff ff ff       	call   c00241b4 <ATAPI::readyForCommand()>
c0024251:	83 c4 10             	add    esp,0x10
c0024254:	84 c0                	test   al,al
c0024256:	75 0a                	jne    c0024262 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024258:	bb 01 00 00 00       	mov    ebx,0x1
c002425d:	e9 57 02 00 00       	jmp    c00244b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024262:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024268:	c1 e0 04             	shl    eax,0x4
c002426b:	0f b6 c0             	movzx  eax,al
c002426e:	50                   	push   eax
c002426f:	6a 06                	push   0x6
c0024271:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024278:	50                   	push   eax
c0024279:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002427f:	e8 a8 ea ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024284:	6a 00                	push   0x0
c0024286:	6a 01                	push   0x1
c0024288:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002428f:	50                   	push   eax
c0024290:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024296:	e8 91 ea ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002429b:	83 c4 20             	add    esp,0x20
c002429e:	0f b6 c3             	movzx  eax,bl
c00242a1:	0f b6 df             	movzx  ebx,bh
c00242a4:	50                   	push   eax
c00242a5:	6a 04                	push   0x4
c00242a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242ae:	50                   	push   eax
c00242af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242b5:	e8 72 ea ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ba:	53                   	push   ebx
c00242bb:	6a 05                	push   0x5
c00242bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242c4:	50                   	push   eax
c00242c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242cb:	e8 5c ea ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d0:	83 c4 20             	add    esp,0x20
c00242d3:	68 a0 00 00 00       	push   0xa0
c00242d8:	6a 07                	push   0x7
c00242da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242e1:	50                   	push   eax
c00242e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242e8:	e8 3f ea ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ed:	83 c4 0c             	add    esp,0xc
c00242f0:	6a 01                	push   0x1
c00242f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242f9:	50                   	push   eax
c00242fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024300:	e8 c9 f4 ff ff       	call   c00237ce <IDE::polling(unsigned char, unsigned int)>
c0024305:	83 c4 10             	add    esp,0x10
c0024308:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002430e:	84 c0                	test   al,al
c0024310:	74 23                	je     c0024335 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024312:	0f b6 d8             	movzx  ebx,al
c0024315:	0f b6 d2             	movzx  edx,dl
c0024318:	53                   	push   ebx
c0024319:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024320:	50                   	push   eax
c0024321:	52                   	push   edx
c0024322:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024328:	e8 f1 f3 ff ff       	call   c002371e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002432d:	83 c4 10             	add    esp,0x10
c0024330:	e9 84 01 00 00       	jmp    c00244b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024335:	0f b6 d2             	movzx  edx,dl
c0024338:	53                   	push   ebx
c0024339:	53                   	push   ebx
c002433a:	52                   	push   edx
c002433b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024341:	e8 d4 e9 ff ff       	call   c0022d1a <IDE::getBase(unsigned char)>
c0024346:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002434a:	b9 06 00 00 00       	mov    ecx,0x6
c002434f:	89 c2                	mov    edx,eax
c0024351:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024354:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024358:	83 c4 10             	add    esp,0x10
c002435b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024361:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024368:	85 db                	test   ebx,ebx
c002436a:	0f 84 ec 00 00 00    	je     c002445c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024370:	51                   	push   ecx
c0024371:	51                   	push   ecx
c0024372:	52                   	push   edx
c0024373:	50                   	push   eax
c0024374:	e8 21 eb ff ff       	call   c0022e9a <IDE::waitInterrupt(unsigned char)>
c0024379:	83 c4 10             	add    esp,0x10
c002437c:	84 c0                	test   al,al
c002437e:	0f 84 d4 fe ff ff    	je     c0024258 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024384:	56                   	push   esi
c0024385:	56                   	push   esi
c0024386:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002438d:	50                   	push   eax
c002438e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024394:	e8 6d e9 ff ff       	call   c0022d06 <IDE::prepareInterrupt(unsigned char)>
c0024399:	83 c4 0c             	add    esp,0xc
c002439c:	6a 04                	push   0x4
c002439e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243a5:	50                   	push   eax
c00243a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243ac:	e8 3b ea ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00243b1:	83 c4 0c             	add    esp,0xc
c00243b4:	89 c6                	mov    esi,eax
c00243b6:	6a 05                	push   0x5
c00243b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243bf:	50                   	push   eax
c00243c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243c6:	e8 21 ea ff ff       	call   c0022dec <IDE::read(unsigned char, unsigned char)>
c00243cb:	89 f1                	mov    ecx,esi
c00243cd:	0f b6 c0             	movzx  eax,al
c00243d0:	0f b6 f1             	movzx  esi,cl
c00243d3:	c1 e0 08             	shl    eax,0x8
c00243d6:	09 c6                	or     esi,eax
c00243d8:	d1 fe                	sar    esi,1
c00243da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00243de:	83 c4 10             	add    esp,0x10
c00243e1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00243e6:	74 41                	je     c0024429 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00243e8:	31 c9                	xor    ecx,ecx
c00243ea:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00243f0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00243f7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00243fb:	75 0a                	jne    c0024407 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00243fd:	01 c9                	add    ecx,ecx
c00243ff:	01 cd                	add    ebp,ecx
c0024401:	4b                   	dec    ebx
c0024402:	e9 54 ff ff ff       	jmp    c002435b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024407:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002440c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024410:	51                   	push   ecx
c0024411:	51                   	push   ecx
c0024412:	52                   	push   edx
c0024413:	50                   	push   eax
c0024414:	e8 01 e9 ff ff       	call   c0022d1a <IDE::getBase(unsigned char)>
c0024419:	89 c2                	mov    edx,eax
c002441b:	89 f0                	mov    eax,esi
c002441d:	66 ef                	out    dx,ax
c002441f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024423:	83 c4 10             	add    esp,0x10
c0024426:	41                   	inc    ecx
c0024427:	eb c1                	jmp    c00243ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024429:	31 f6                	xor    esi,esi
c002442b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024431:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024438:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002443c:	75 06                	jne    c0024444 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002443e:	01 f6                	add    esi,esi
c0024440:	01 f5                	add    ebp,esi
c0024442:	eb bd                	jmp    c0024401 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024444:	51                   	push   ecx
c0024445:	51                   	push   ecx
c0024446:	52                   	push   edx
c0024447:	50                   	push   eax
c0024448:	e8 cd e8 ff ff       	call   c0022d1a <IDE::getBase(unsigned char)>
c002444d:	89 c2                	mov    edx,eax
c002444f:	66 ed                	in     ax,dx
c0024451:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024456:	83 c4 10             	add    esp,0x10
c0024459:	46                   	inc    esi
c002445a:	eb cf                	jmp    c002442b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002445c:	51                   	push   ecx
c002445d:	51                   	push   ecx
c002445e:	52                   	push   edx
c002445f:	50                   	push   eax
c0024460:	e8 35 ea ff ff       	call   c0022e9a <IDE::waitInterrupt(unsigned char)>
c0024465:	83 c4 10             	add    esp,0x10
c0024468:	84 c0                	test   al,al
c002446a:	0f 84 e8 fd ff ff    	je     c0024258 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024470:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024475:	52                   	push   edx
c0024476:	52                   	push   edx
c0024477:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002447e:	50                   	push   eax
c002447f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024485:	e8 7c e8 ff ff       	call   c0022d06 <IDE::prepareInterrupt(unsigned char)>
c002448a:	83 c4 10             	add    esp,0x10
c002448d:	50                   	push   eax
c002448e:	50                   	push   eax
c002448f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024496:	50                   	push   eax
c0024497:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002449d:	e8 78 e8 ff ff       	call   c0022d1a <IDE::getBase(unsigned char)>
c00244a2:	8d 50 07             	lea    edx,[eax+0x7]
c00244a5:	ec                   	in     al,dx
c00244a6:	83 c4 10             	add    esp,0x10
c00244a9:	a8 88                	test   al,0x88
c00244ab:	74 0a                	je     c00244b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00244ad:	4b                   	dec    ebx
c00244ae:	75 dd                	jne    c002448d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00244b0:	bb 02 00 00 00       	mov    ebx,0x2
c00244b5:	eb 02                	jmp    c00244b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00244b7:	31 db                	xor    ebx,ebx
c00244b9:	83 c4 1c             	add    esp,0x1c
c00244bc:	89 d8                	mov    eax,ebx
c00244be:	5b                   	pop    ebx
c00244bf:	5e                   	pop    esi
c00244c0:	5f                   	pop    edi
c00244c1:	5d                   	pop    ebp
c00244c2:	c3                   	ret    
c00244c3:	90                   	nop

c00244c4 <ATAPI::diskRemoved()>:
c00244c4:	83 ec 18             	sub    esp,0x18
c00244c7:	68 3d bf 02 c0       	push   0xc002bf3d
c00244cc:	e8 3a e0 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00244d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00244d5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00244dc:	83 c4 1c             	add    esp,0x1c
c00244df:	c3                   	ret    

c00244e0 <ATAPI::eject()>:
c00244e0:	57                   	push   edi
c00244e1:	b9 03 00 00 00       	mov    ecx,0x3
c00244e6:	53                   	push   ebx
c00244e7:	83 ec 14             	sub    esp,0x14
c00244ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00244ee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00244f2:	fc                   	cld    
c00244f3:	31 c0                	xor    eax,eax
c00244f5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00244f7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00244fc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024501:	50                   	push   eax
c0024502:	50                   	push   eax
c0024503:	6a 00                	push   0x0
c0024505:	6a 00                	push   0x0
c0024507:	6a 00                	push   0x0
c0024509:	6a 02                	push   0x2
c002450b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002450f:	50                   	push   eax
c0024510:	53                   	push   ebx
c0024511:	e8 ee fc ff ff       	call   c0024204 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024516:	83 c4 14             	add    esp,0x14
c0024519:	53                   	push   ebx
c002451a:	e8 a5 ff ff ff       	call   c00244c4 <ATAPI::diskRemoved()>
c002451f:	83 c4 24             	add    esp,0x24
c0024522:	31 c0                	xor    eax,eax
c0024524:	5b                   	pop    ebx
c0024525:	5f                   	pop    edi
c0024526:	c3                   	ret    
c0024527:	90                   	nop

c0024528 <ATAPI::diskInserted()>:
c0024528:	53                   	push   ebx
c0024529:	83 ec 14             	sub    esp,0x14
c002452c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024530:	68 54 bf 02 c0       	push   0xc002bf54
c0024535:	e8 d1 df fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c002453a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024544:	e8 99 f8 fe ff       	call   c0013de2 <PhysicalDisk::startCache()>
c0024549:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002454d:	83 c4 18             	add    esp,0x18
c0024550:	5b                   	pop    ebx
c0024551:	e9 dc 1a ff ff       	jmp    c0016032 <createPartitionsForDisk(PhysicalDisk*)>

c0024556 <ATAPI::detectMedia()>:
c0024556:	56                   	push   esi
c0024557:	53                   	push   ebx
c0024558:	83 ec 28             	sub    esp,0x28
c002455b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002455f:	6a 0c                	push   0xc
c0024561:	6a 00                	push   0x0
c0024563:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024567:	56                   	push   esi
c0024568:	e8 e3 c1 fd ff       	call   c0000750 <memset>
c002456d:	58                   	pop    eax
c002456e:	5a                   	pop    edx
c002456f:	6a 00                	push   0x0
c0024571:	6a 00                	push   0x0
c0024573:	6a 00                	push   0x0
c0024575:	6a 00                	push   0x0
c0024577:	56                   	push   esi
c0024578:	53                   	push   ebx
c0024579:	e8 86 fc ff ff       	call   c0024204 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002457e:	83 c4 1c             	add    esp,0x1c
c0024581:	6a 0c                	push   0xc
c0024583:	6a 00                	push   0x0
c0024585:	56                   	push   esi
c0024586:	e8 c5 c1 fd ff       	call   c0000750 <memset>
c002458b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024590:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024595:	59                   	pop    ecx
c0024596:	58                   	pop    eax
c0024597:	6a 01                	push   0x1
c0024599:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002459d:	50                   	push   eax
c002459e:	6a 00                	push   0x0
c00245a0:	6a 12                	push   0x12
c00245a2:	56                   	push   esi
c00245a3:	53                   	push   ebx
c00245a4:	e8 5b fc ff ff       	call   c0024204 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245a9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00245ad:	83 c4 20             	add    esp,0x20
c00245b0:	83 e0 7f             	and    eax,0x7f
c00245b3:	3c 70                	cmp    al,0x70
c00245b5:	74 15                	je     c00245cc <ATAPI::detectMedia()+0x76>
c00245b7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00245be:	75 0c                	jne    c00245cc <ATAPI::detectMedia()+0x76>
c00245c0:	83 ec 0c             	sub    esp,0xc
c00245c3:	53                   	push   ebx
c00245c4:	e8 5f ff ff ff       	call   c0024528 <ATAPI::diskInserted()>
c00245c9:	83 c4 10             	add    esp,0x10
c00245cc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00245d0:	83 e0 0f             	and    eax,0xf
c00245d3:	3c 02                	cmp    al,0x2
c00245d5:	75 1b                	jne    c00245f2 <ATAPI::detectMedia()+0x9c>
c00245d7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00245dc:	75 2d                	jne    c002460b <ATAPI::detectMedia()+0xb5>
c00245de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00245e5:	74 24                	je     c002460b <ATAPI::detectMedia()+0xb5>
c00245e7:	83 ec 0c             	sub    esp,0xc
c00245ea:	53                   	push   ebx
c00245eb:	e8 d4 fe ff ff       	call   c00244c4 <ATAPI::diskRemoved()>
c00245f0:	eb 16                	jmp    c0024608 <ATAPI::detectMedia()+0xb2>
c00245f2:	84 c0                	test   al,al
c00245f4:	75 15                	jne    c002460b <ATAPI::detectMedia()+0xb5>
c00245f6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00245fd:	75 0c                	jne    c002460b <ATAPI::detectMedia()+0xb5>
c00245ff:	83 ec 0c             	sub    esp,0xc
c0024602:	53                   	push   ebx
c0024603:	e8 20 ff ff ff       	call   c0024528 <ATAPI::diskInserted()>
c0024608:	83 c4 10             	add    esp,0x10
c002460b:	83 c4 24             	add    esp,0x24
c002460e:	5b                   	pop    ebx
c002460f:	5e                   	pop    esi
c0024610:	c3                   	ret    
c0024611:	90                   	nop

c0024612 <ATAPI::open(int, int, void*)>:
c0024612:	53                   	push   ebx
c0024613:	83 ec 08             	sub    esp,0x8
c0024616:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002461a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002461e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024622:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024628:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002462e:	c1 e0 06             	shl    eax,0x6
c0024631:	01 d0                	add    eax,edx
c0024633:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002463a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024640:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024647:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024651:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024657:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002465e:	6a 04                	push   0x4
c0024660:	6a 0c                	push   0xc
c0024662:	51                   	push   ecx
c0024663:	52                   	push   edx
c0024664:	e8 c3 e6 ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024669:	90                   	nop
c002466a:	90                   	nop
c002466b:	6a 00                	push   0x0
c002466d:	6a 0c                	push   0xc
c002466f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024676:	50                   	push   eax
c0024677:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002467d:	e8 aa e6 ff ff       	call   c0022d2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024682:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024689:	83 c4 14             	add    esp,0x14
c002468c:	53                   	push   ebx
c002468d:	e8 c4 fe ff ff       	call   c0024556 <ATAPI::detectMedia()>
c0024692:	31 c0                	xor    eax,eax
c0024694:	83 c4 18             	add    esp,0x18
c0024697:	5b                   	pop    ebx
c0024698:	c3                   	ret    
c0024699:	90                   	nop

c002469a <ATAPI::read(unsigned long long, int, void*)>:
c002469a:	55                   	push   ebp
c002469b:	57                   	push   edi
c002469c:	56                   	push   esi
c002469d:	53                   	push   ebx
c002469e:	83 ec 1c             	sub    esp,0x1c
c00246a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00246a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00246a9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00246ad:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00246b4:	74 41                	je     c00246f7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00246b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246ba:	b9 03 00 00 00       	mov    ecx,0x3
c00246bf:	fc                   	cld    
c00246c0:	31 c0                	xor    eax,eax
c00246c2:	86 fb                	xchg   bl,bh
c00246c4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246c6:	c1 c3 10             	rol    ebx,0x10
c00246c9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00246ce:	89 e8                	mov    eax,ebp
c00246d0:	86 fb                	xchg   bl,bh
c00246d2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00246d6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00246da:	50                   	push   eax
c00246db:	50                   	push   eax
c00246dc:	55                   	push   ebp
c00246dd:	c1 e5 0b             	shl    ebp,0xb
c00246e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00246e4:	6a 00                	push   0x0
c00246e6:	55                   	push   ebp
c00246e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00246eb:	50                   	push   eax
c00246ec:	56                   	push   esi
c00246ed:	e8 12 fb ff ff       	call   c0024204 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00246f2:	83 c4 20             	add    esp,0x20
c00246f5:	eb 1a                	jmp    c0024711 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00246f7:	83 ec 0c             	sub    esp,0xc
c00246fa:	56                   	push   esi
c00246fb:	e8 56 fe ff ff       	call   c0024556 <ATAPI::detectMedia()>
c0024700:	83 c4 10             	add    esp,0x10
c0024703:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002470a:	75 aa                	jne    c00246b6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002470c:	b8 02 00 00 00       	mov    eax,0x2
c0024711:	83 c4 1c             	add    esp,0x1c
c0024714:	5b                   	pop    ebx
c0024715:	5e                   	pop    esi
c0024716:	5f                   	pop    edi
c0024717:	5d                   	pop    ebp
c0024718:	c3                   	ret    
c0024719:	90                   	nop

c002471a <SATA::close(int, int, void*)>:
c002471a:	83 ec 0c             	sub    esp,0xc
c002471d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024721:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024727:	85 c0                	test   eax,eax
c0024729:	74 0c                	je     c0024737 <SATA::close(int, int, void*)+0x1d>
c002472b:	83 ec 0c             	sub    esp,0xc
c002472e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024730:	50                   	push   eax
c0024731:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024734:	83 c4 10             	add    esp,0x10
c0024737:	31 c0                	xor    eax,eax
c0024739:	83 c4 0c             	add    esp,0xc
c002473c:	c3                   	ret    
c002473d:	90                   	nop

c002473e <SATA::powerSaving(PowerSavingLevel)>:
c002473e:	c3                   	ret    
c002473f:	90                   	nop

c0024740 <SATA::open(int, int, void*)>:
c0024740:	56                   	push   esi
c0024741:	53                   	push   ebx
c0024742:	50                   	push   eax
c0024743:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024747:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002474b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024755:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002475b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024765:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024769:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024773:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024779:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024780:	e8 bb b1 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024785:	89 c6                	mov    esi,eax
c0024787:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002478d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024793:	e8 a8 b1 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024798:	39 c6                	cmp    esi,eax
c002479a:	74 10                	je     c00247ac <SATA::open(int, int, void*)+0x6c>
c002479c:	83 ec 0c             	sub    esp,0xc
c002479f:	68 7c be 02 c0       	push   0xc002be7c
c00247a4:	e8 9c 54 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00247a9:	83 c4 10             	add    esp,0x10
c00247ac:	83 ec 0c             	sub    esp,0xc
c00247af:	6a 02                	push   0x2
c00247b1:	e8 eb c9 fe ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c00247b6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00247bc:	6a 03                	push   0x3
c00247be:	50                   	push   eax
c00247bf:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00247c5:	ff 35 f0 d6 02 c0    	push   DWORD PTR ds:0xc002d6f0
c00247cb:	e8 8e d1 fe ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c00247d0:	83 c4 14             	add    esp,0x14
c00247d3:	53                   	push   ebx
c00247d4:	e8 09 f6 fe ff       	call   c0013de2 <PhysicalDisk::startCache()>
c00247d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00247dc:	e8 51 18 ff ff       	call   c0016032 <createPartitionsForDisk(PhysicalDisk*)>
c00247e1:	83 c4 14             	add    esp,0x14
c00247e4:	31 c0                	xor    eax,eax
c00247e6:	5b                   	pop    ebx
c00247e7:	5e                   	pop    esi
c00247e8:	c3                   	ret    
c00247e9:	90                   	nop

c00247ea <SATA::SATA()>:
c00247ea:	83 ec 0c             	sub    esp,0xc
c00247ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247f1:	83 ec 04             	sub    esp,0x4
c00247f4:	68 00 02 00 00       	push   0x200
c00247f9:	68 90 be 02 c0       	push   0xc002be90
c00247fe:	50                   	push   eax
c00247ff:	e8 76 f5 fe ff       	call   c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024804:	83 c4 10             	add    esp,0x10
c0024807:	ba 00 bf 02 c0       	mov    edx,0xc002bf00
c002480c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024810:	89 10                	mov    DWORD PTR [eax],edx
c0024812:	90                   	nop
c0024813:	83 c4 0c             	add    esp,0xc
c0024816:	c3                   	ret    
c0024817:	90                   	nop

c0024818 <SATA::access(unsigned long long, int, void*, bool)>:
c0024818:	55                   	push   ebp
c0024819:	57                   	push   edi
c002481a:	56                   	push   esi
c002481b:	53                   	push   ebx
c002481c:	83 ec 2c             	sub    esp,0x2c
c002481f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024823:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024827:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002482b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002482f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024833:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024838:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002483c:	7e 10                	jle    c002484e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002483e:	83 ec 0c             	sub    esp,0xc
c0024841:	68 a0 be 02 c0       	push   0xc002bea0
c0024846:	e8 fa 53 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c002484b:	83 c4 10             	add    esp,0x10
c002484e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024854:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002485a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024860:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024864:	89 d0                	mov    eax,edx
c0024866:	c1 e0 07             	shl    eax,0x7
c0024869:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002486d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024877:	51                   	push   ecx
c0024878:	8d 42 02             	lea    eax,[edx+0x2]
c002487b:	51                   	push   ecx
c002487c:	c1 e0 07             	shl    eax,0x7
c002487f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024883:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024887:	50                   	push   eax
c0024888:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002488e:	e8 1b f0 ff ff       	call   c00238ae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024893:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024897:	83 c4 10             	add    esp,0x10
c002489a:	b8 01 00 00 00       	mov    eax,0x1
c002489f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00248a4:	0f 84 cb 01 00 00    	je     c0024a75 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00248aa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00248ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248b2:	c1 e0 09             	shl    eax,0x9
c00248b5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00248ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00248be:	74 0e                	je     c00248ce <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00248c0:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00248c6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00248ca:	89 c1                	mov    ecx,eax
c00248cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00248ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00248d2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00248d8:	8d 42 02             	lea    eax,[edx+0x2]
c00248db:	c1 e0 07             	shl    eax,0x7
c00248de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00248e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00248e4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00248ea:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00248f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00248f4:	c1 e1 05             	shl    ecx,0x5
c00248f7:	01 c8                	add    eax,ecx
c00248f9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00248fd:	83 e1 01             	and    ecx,0x1
c0024900:	89 ce                	mov    esi,ecx
c0024902:	8a 08                	mov    cl,BYTE PTR [eax]
c0024904:	c1 e6 06             	shl    esi,0x6
c0024907:	83 e1 bf             	and    ecx,0xffffffbf
c002490a:	09 f1                	or     ecx,esi
c002490c:	88 08                	mov    BYTE PTR [eax],cl
c002490e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024910:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024916:	81 c9 05 00 01 00    	or     ecx,0x10005
c002491c:	89 08                	mov    DWORD PTR [eax],ecx
c002491e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024924:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002492a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024930:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024933:	50                   	push   eax
c0024934:	68 90 00 00 00       	push   0x90
c0024939:	6a 00                	push   0x0
c002493b:	56                   	push   esi
c002493c:	e8 0f be fd ff       	call   c0000750 <memset>
c0024941:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024947:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002494b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024951:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024955:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024959:	83 c4 10             	add    esp,0x10
c002495c:	48                   	dec    eax
c002495d:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024962:	89 c1                	mov    ecx,eax
c0024964:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002496a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002496f:	09 c8                	or     eax,ecx
c0024971:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024977:	66 8b 06             	mov    ax,WORD PTR [esi]
c002497a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024981:	66 25 00 7f          	and    ax,0x7f00
c0024985:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024989:	66 0d 27 80          	or     ax,0x8027
c002498d:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024992:	66 89 06             	mov    WORD PTR [esi],ax
c0024995:	19 c0                	sbb    eax,eax
c0024997:	83 e0 f0             	and    eax,0xfffffff0
c002499a:	83 c0 35             	add    eax,0x35
c002499d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00249a0:	89 e8                	mov    eax,ebp
c00249a2:	c1 e8 10             	shr    eax,0x10
c00249a5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00249a8:	89 e8                	mov    eax,ebp
c00249aa:	c1 e8 18             	shr    eax,0x18
c00249ad:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00249b0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00249b4:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00249b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249bb:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00249be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00249c2:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00249c6:	89 d6                	mov    esi,edx
c00249c8:	31 c0                	xor    eax,eax
c00249ca:	c1 e6 07             	shl    esi,0x7
c00249cd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00249d1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00249d7:	80 e1 88             	and    cl,0x88
c00249da:	74 0a                	je     c00249e6 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00249dc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00249e1:	74 0a                	je     c00249ed <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00249e3:	40                   	inc    eax
c00249e4:	eb eb                	jmp    c00249d1 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00249e6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00249eb:	75 0a                	jne    c00249f7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00249ed:	83 ec 0c             	sub    esp,0xc
c00249f0:	68 d9 be 02 c0       	push   0xc002bed9
c00249f5:	eb 56                	jmp    c0024a4d <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00249f7:	b8 01 00 00 00       	mov    eax,0x1
c00249fc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024a00:	c1 e2 07             	shl    edx,0x7
c0024a03:	d3 e0                	shl    eax,cl
c0024a05:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024a09:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024a0f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024a15:	85 c8                	test   eax,ecx
c0024a17:	74 20                	je     c0024a39 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024a19:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024a1f:	0f ba e1 1e          	bt     ecx,0x1e
c0024a23:	73 ea                	jae    c0024a0f <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024a25:	83 ec 0c             	sub    esp,0xc
c0024a28:	68 e7 be 02 c0       	push   0xc002bee7
c0024a2d:	e8 13 52 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0024a32:	83 c4 10             	add    esp,0x10
c0024a35:	31 c0                	xor    eax,eax
c0024a37:	eb 3c                	jmp    c0024a75 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a39:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024a3f:	0f ba e0 1e          	bt     eax,0x1e
c0024a43:	73 17                	jae    c0024a5c <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024a45:	83 ec 0c             	sub    esp,0xc
c0024a48:	68 e7 be 02 c0       	push   0xc002bee7
c0024a4d:	e8 f3 51 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0024a52:	83 c4 10             	add    esp,0x10
c0024a55:	b8 01 00 00 00       	mov    eax,0x1
c0024a5a:	eb 19                	jmp    c0024a75 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a5c:	31 c0                	xor    eax,eax
c0024a5e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024a63:	75 10                	jne    c0024a75 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a65:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024a6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024a6f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024a73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024a75:	83 c4 2c             	add    esp,0x2c
c0024a78:	5b                   	pop    ebx
c0024a79:	5e                   	pop    esi
c0024a7a:	5f                   	pop    edi
c0024a7b:	5d                   	pop    ebp
c0024a7c:	c3                   	ret    
c0024a7d:	90                   	nop

c0024a7e <SATA::read(unsigned long long, int, void*)>:
c0024a7e:	57                   	push   edi
c0024a7f:	b8 04 00 00 00       	mov    eax,0x4
c0024a84:	56                   	push   esi
c0024a85:	53                   	push   ebx
c0024a86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024a8e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024a91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024a95:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024a99:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024a9f:	77 25                	ja     c0024ac6 <SATA::read(unsigned long long, int, void*)+0x48>
c0024aa1:	b8 06 00 00 00       	mov    eax,0x6
c0024aa6:	85 f6                	test   esi,esi
c0024aa8:	74 1c                	je     c0024ac6 <SATA::read(unsigned long long, int, void*)+0x48>
c0024aaa:	50                   	push   eax
c0024aab:	50                   	push   eax
c0024aac:	6a 00                	push   0x0
c0024aae:	56                   	push   esi
c0024aaf:	52                   	push   edx
c0024ab0:	53                   	push   ebx
c0024ab1:	51                   	push   ecx
c0024ab2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ab6:	e8 5d fd ff ff       	call   c0024818 <SATA::access(unsigned long long, int, void*, bool)>
c0024abb:	83 c4 20             	add    esp,0x20
c0024abe:	85 c0                	test   eax,eax
c0024ac0:	0f 95 c0             	setne  al
c0024ac3:	0f b6 c0             	movzx  eax,al
c0024ac6:	5b                   	pop    ebx
c0024ac7:	5e                   	pop    esi
c0024ac8:	5f                   	pop    edi
c0024ac9:	c3                   	ret    

c0024aca <SATA::write(unsigned long long, int, void*)>:
c0024aca:	55                   	push   ebp
c0024acb:	b8 04 00 00 00       	mov    eax,0x4
c0024ad0:	57                   	push   edi
c0024ad1:	56                   	push   esi
c0024ad2:	53                   	push   ebx
c0024ad3:	83 ec 0c             	sub    esp,0xc
c0024ad6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ada:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024ade:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024ae1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024ae5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024ae9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024aef:	77 3d                	ja     c0024b2e <SATA::write(unsigned long long, int, void*)+0x64>
c0024af1:	b8 06 00 00 00       	mov    eax,0x6
c0024af6:	85 ed                	test   ebp,ebp
c0024af8:	74 34                	je     c0024b2e <SATA::write(unsigned long long, int, void*)+0x64>
c0024afa:	c1 e3 09             	shl    ebx,0x9
c0024afd:	01 eb                	add    ebx,ebp
c0024aff:	89 d6                	mov    esi,edx
c0024b01:	89 cf                	mov    edi,ecx
c0024b03:	83 c6 01             	add    esi,0x1
c0024b06:	83 d7 00             	adc    edi,0x0
c0024b09:	50                   	push   eax
c0024b0a:	50                   	push   eax
c0024b0b:	6a 01                	push   0x1
c0024b0d:	55                   	push   ebp
c0024b0e:	81 c5 00 02 00 00    	add    ebp,0x200
c0024b14:	6a 01                	push   0x1
c0024b16:	51                   	push   ecx
c0024b17:	52                   	push   edx
c0024b18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b1c:	e8 f7 fc ff ff       	call   c0024818 <SATA::access(unsigned long long, int, void*, bool)>
c0024b21:	83 c4 20             	add    esp,0x20
c0024b24:	89 f2                	mov    edx,esi
c0024b26:	89 f9                	mov    ecx,edi
c0024b28:	39 dd                	cmp    ebp,ebx
c0024b2a:	75 d3                	jne    c0024aff <SATA::write(unsigned long long, int, void*)+0x35>
c0024b2c:	31 c0                	xor    eax,eax
c0024b2e:	83 c4 0c             	add    esp,0xc
c0024b31:	5b                   	pop    ebx
c0024b32:	5e                   	pop    esi
c0024b33:	5f                   	pop    edi
c0024b34:	5d                   	pop    ebp
c0024b35:	c3                   	ret    

c0024b36 <SATAPI::write(unsigned long long, int, void*)>:
c0024b36:	b8 03 00 00 00       	mov    eax,0x3
c0024b3b:	c3                   	ret    

c0024b3c <SATAPI::close(int, int, void*)>:
c0024b3c:	83 ec 0c             	sub    esp,0xc
c0024b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b49:	85 c0                	test   eax,eax
c0024b4b:	74 0c                	je     c0024b59 <SATAPI::close(int, int, void*)+0x1d>
c0024b4d:	83 ec 0c             	sub    esp,0xc
c0024b50:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b52:	50                   	push   eax
c0024b53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b56:	83 c4 10             	add    esp,0x10
c0024b59:	31 c0                	xor    eax,eax
c0024b5b:	83 c4 0c             	add    esp,0xc
c0024b5e:	c3                   	ret    
c0024b5f:	90                   	nop

c0024b60 <SATAPI::SATAPI()>:
c0024b60:	83 ec 0c             	sub    esp,0xc
c0024b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b67:	83 ec 04             	sub    esp,0x4
c0024b6a:	68 00 08 00 00       	push   0x800
c0024b6f:	68 30 bf 02 c0       	push   0xc002bf30
c0024b74:	50                   	push   eax
c0024b75:	e8 00 f2 fe ff       	call   c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024b7a:	83 c4 10             	add    esp,0x10
c0024b7d:	ba dc bf 02 c0       	mov    edx,0xc002bfdc
c0024b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b86:	89 10                	mov    DWORD PTR [eax],edx
c0024b88:	90                   	nop
c0024b89:	83 c4 0c             	add    esp,0xc
c0024b8c:	c3                   	ret    
c0024b8d:	90                   	nop

c0024b8e <SATAPI::diskRemoved()>:
c0024b8e:	83 ec 18             	sub    esp,0x18
c0024b91:	68 3c bf 02 c0       	push   0xc002bf3c
c0024b96:	e8 70 d9 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0024b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b9f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024ba6:	83 c4 1c             	add    esp,0x1c
c0024ba9:	c3                   	ret    

c0024baa <SATAPI::diskInserted()>:
c0024baa:	53                   	push   ebx
c0024bab:	83 ec 14             	sub    esp,0x14
c0024bae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024bb2:	68 53 bf 02 c0       	push   0xc002bf53
c0024bb7:	e8 4f d9 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0024bbc:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024bc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bc6:	e8 17 f2 fe ff       	call   c0013de2 <PhysicalDisk::startCache()>
c0024bcb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024bcf:	83 c4 18             	add    esp,0x18
c0024bd2:	5b                   	pop    ebx
c0024bd3:	e9 5a 14 ff ff       	jmp    c0016032 <createPartitionsForDisk(PhysicalDisk*)>

c0024bd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024bd8:	55                   	push   ebp
c0024bd9:	57                   	push   edi
c0024bda:	56                   	push   esi
c0024bdb:	53                   	push   ebx
c0024bdc:	83 ec 34             	sub    esp,0x34
c0024bdf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024be3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024be7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024beb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024bef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024bf3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024bf9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024bff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c03:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024c09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024c0d:	c1 e0 07             	shl    eax,0x7
c0024c10:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024c14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c18:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c26:	8d 58 02             	lea    ebx,[eax+0x2]
c0024c29:	c1 e3 07             	shl    ebx,0x7
c0024c2c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024c30:	53                   	push   ebx
c0024c31:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024c37:	e8 72 ec ff ff       	call   c00238ae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024c3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c40:	83 c4 10             	add    esp,0x10
c0024c43:	b8 01 00 00 00       	mov    eax,0x1
c0024c48:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024c4d:	0f 84 85 01 00 00    	je     c0024dd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024c53:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024c5b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c61:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024c67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024c6b:	c1 e1 05             	shl    ecx,0x5
c0024c6e:	01 c8                	add    eax,ecx
c0024c70:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c72:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024c78:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024c7e:	89 08                	mov    DWORD PTR [eax],ecx
c0024c80:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c86:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024c8c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024c92:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024c95:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024c98:	50                   	push   eax
c0024c99:	68 90 00 00 00       	push   0x90
c0024c9e:	6a 00                	push   0x0
c0024ca0:	53                   	push   ebx
c0024ca1:	e8 aa ba fd ff       	call   c0000750 <memset>
c0024ca6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024caa:	b9 0c 00 00 00       	mov    ecx,0xc
c0024caf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024cb1:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024cb7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024cbb:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024cc1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024cc5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024cc9:	48                   	dec    eax
c0024cca:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ccf:	89 c1                	mov    ecx,eax
c0024cd1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024cd7:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024cdc:	09 c8                	or     eax,ecx
c0024cde:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ce4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ce7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024cee:	66 25 00 7f          	and    ax,0x7f00
c0024cf2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024cf6:	66 0d 27 80          	or     ax,0x8027
c0024cfa:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024cfe:	66 89 03             	mov    WORD PTR [ebx],ax
c0024d01:	89 d0                	mov    eax,edx
c0024d03:	c1 ea 18             	shr    edx,0x18
c0024d06:	c1 e8 10             	shr    eax,0x10
c0024d09:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024d0c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024d0f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024d13:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024d16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d1a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024d1d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024d21:	83 c4 10             	add    esp,0x10
c0024d24:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024d28:	31 c0                	xor    eax,eax
c0024d2a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024d2e:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024d34:	80 e2 88             	and    dl,0x88
c0024d37:	74 0a                	je     c0024d43 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024d39:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d3e:	74 0a                	je     c0024d4a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024d40:	40                   	inc    eax
c0024d41:	eb eb                	jmp    c0024d2e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024d43:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d48:	75 0f                	jne    c0024d59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024d4a:	83 ec 0c             	sub    esp,0xc
c0024d4d:	68 d9 be 02 c0       	push   0xc002bed9
c0024d52:	e8 ee 4e ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0024d57:	eb 3f                	jmp    c0024d98 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024d59:	ba 01 00 00 00       	mov    edx,0x1
c0024d5e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024d66:	d3 e2                	shl    edx,cl
c0024d68:	c1 e0 07             	shl    eax,0x7
c0024d6b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024d71:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024d75:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024d7b:	85 ca                	test   edx,ecx
c0024d7d:	74 23                	je     c0024da2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024d7f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024d85:	0f ba e1 1e          	bt     ecx,0x1e
c0024d89:	73 ea                	jae    c0024d75 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024d8b:	83 ec 0c             	sub    esp,0xc
c0024d8e:	68 6b bf 02 c0       	push   0xc002bf6b
c0024d93:	e8 73 d7 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0024d98:	83 c4 10             	add    esp,0x10
c0024d9b:	b8 01 00 00 00       	mov    eax,0x1
c0024da0:	eb 36                	jmp    c0024dd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024da2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024da8:	0f ba e0 1e          	bt     eax,0x1e
c0024dac:	73 0a                	jae    c0024db8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024dae:	83 ec 0c             	sub    esp,0xc
c0024db1:	68 7e bf 02 c0       	push   0xc002bf7e
c0024db6:	eb db                	jmp    c0024d93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024db8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024dbd:	74 17                	je     c0024dd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024dbf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024dc4:	74 10                	je     c0024dd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024dc6:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024dcc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024dd0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024dd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024dd6:	31 c0                	xor    eax,eax
c0024dd8:	83 c4 2c             	add    esp,0x2c
c0024ddb:	5b                   	pop    ebx
c0024ddc:	5e                   	pop    esi
c0024ddd:	5f                   	pop    edi
c0024dde:	5d                   	pop    ebp
c0024ddf:	c3                   	ret    

c0024de0 <SATAPI::eject()>:
c0024de0:	57                   	push   edi
c0024de1:	b9 03 00 00 00       	mov    ecx,0x3
c0024de6:	53                   	push   ebx
c0024de7:	83 ec 14             	sub    esp,0x14
c0024dea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024dee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024df2:	fc                   	cld    
c0024df3:	31 c0                	xor    eax,eax
c0024df5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024df7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024dfc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024e01:	50                   	push   eax
c0024e02:	6a 00                	push   0x0
c0024e04:	6a 00                	push   0x0
c0024e06:	6a 00                	push   0x0
c0024e08:	6a 00                	push   0x0
c0024e0a:	6a 02                	push   0x2
c0024e0c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024e10:	50                   	push   eax
c0024e11:	53                   	push   ebx
c0024e12:	e8 c1 fd ff ff       	call   c0024bd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e17:	83 c4 14             	add    esp,0x14
c0024e1a:	53                   	push   ebx
c0024e1b:	e8 6e fd ff ff       	call   c0024b8e <SATAPI::diskRemoved()>
c0024e20:	83 c4 24             	add    esp,0x24
c0024e23:	31 c0                	xor    eax,eax
c0024e25:	5b                   	pop    ebx
c0024e26:	5f                   	pop    edi
c0024e27:	c3                   	ret    

c0024e28 <SATAPI::detectMedia()>:
c0024e28:	56                   	push   esi
c0024e29:	53                   	push   ebx
c0024e2a:	83 ec 28             	sub    esp,0x28
c0024e2d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e31:	6a 0c                	push   0xc
c0024e33:	6a 00                	push   0x0
c0024e35:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024e39:	56                   	push   esi
c0024e3a:	e8 11 b9 fd ff       	call   c0000750 <memset>
c0024e3f:	83 c4 0c             	add    esp,0xc
c0024e42:	6a 00                	push   0x0
c0024e44:	6a 00                	push   0x0
c0024e46:	6a 00                	push   0x0
c0024e48:	6a 00                	push   0x0
c0024e4a:	6a 00                	push   0x0
c0024e4c:	56                   	push   esi
c0024e4d:	53                   	push   ebx
c0024e4e:	e8 85 fd ff ff       	call   c0024bd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e53:	83 c4 1c             	add    esp,0x1c
c0024e56:	6a 0c                	push   0xc
c0024e58:	6a 00                	push   0x0
c0024e5a:	56                   	push   esi
c0024e5b:	e8 f0 b8 fd ff       	call   c0000750 <memset>
c0024e60:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024e65:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024e6a:	83 c4 0c             	add    esp,0xc
c0024e6d:	6a 01                	push   0x1
c0024e6f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024e73:	50                   	push   eax
c0024e74:	6a 00                	push   0x0
c0024e76:	6a 00                	push   0x0
c0024e78:	6a 12                	push   0x12
c0024e7a:	56                   	push   esi
c0024e7b:	53                   	push   ebx
c0024e7c:	e8 57 fd ff ff       	call   c0024bd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e81:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024e85:	83 c4 20             	add    esp,0x20
c0024e88:	83 e0 7f             	and    eax,0x7f
c0024e8b:	3c 70                	cmp    al,0x70
c0024e8d:	74 15                	je     c0024ea4 <SATAPI::detectMedia()+0x7c>
c0024e8f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024e96:	75 0c                	jne    c0024ea4 <SATAPI::detectMedia()+0x7c>
c0024e98:	83 ec 0c             	sub    esp,0xc
c0024e9b:	53                   	push   ebx
c0024e9c:	e8 09 fd ff ff       	call   c0024baa <SATAPI::diskInserted()>
c0024ea1:	83 c4 10             	add    esp,0x10
c0024ea4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ea8:	83 e0 0f             	and    eax,0xf
c0024eab:	3c 02                	cmp    al,0x2
c0024ead:	75 1b                	jne    c0024eca <SATAPI::detectMedia()+0xa2>
c0024eaf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024eb4:	75 2d                	jne    c0024ee3 <SATAPI::detectMedia()+0xbb>
c0024eb6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ebd:	74 24                	je     c0024ee3 <SATAPI::detectMedia()+0xbb>
c0024ebf:	83 ec 0c             	sub    esp,0xc
c0024ec2:	53                   	push   ebx
c0024ec3:	e8 c6 fc ff ff       	call   c0024b8e <SATAPI::diskRemoved()>
c0024ec8:	eb 16                	jmp    c0024ee0 <SATAPI::detectMedia()+0xb8>
c0024eca:	84 c0                	test   al,al
c0024ecc:	75 15                	jne    c0024ee3 <SATAPI::detectMedia()+0xbb>
c0024ece:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ed5:	75 0c                	jne    c0024ee3 <SATAPI::detectMedia()+0xbb>
c0024ed7:	83 ec 0c             	sub    esp,0xc
c0024eda:	53                   	push   ebx
c0024edb:	e8 ca fc ff ff       	call   c0024baa <SATAPI::diskInserted()>
c0024ee0:	83 c4 10             	add    esp,0x10
c0024ee3:	83 c4 24             	add    esp,0x24
c0024ee6:	5b                   	pop    ebx
c0024ee7:	5e                   	pop    esi
c0024ee8:	c3                   	ret    
c0024ee9:	90                   	nop

c0024eea <SATAPI::open(int, int, void*)>:
c0024eea:	56                   	push   esi
c0024eeb:	53                   	push   ebx
c0024eec:	50                   	push   eax
c0024eed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ef1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ef5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024eff:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024f05:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024f0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f13:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024f1d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024f23:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024f2a:	e8 11 aa fe ff       	call   c000f940 <Phys::allocatePage()>
c0024f2f:	89 c6                	mov    esi,eax
c0024f31:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024f37:	81 c6 00 10 00 00    	add    esi,0x1000
c0024f3d:	e8 fe a9 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024f42:	39 c6                	cmp    esi,eax
c0024f44:	74 10                	je     c0024f56 <SATAPI::open(int, int, void*)+0x6c>
c0024f46:	83 ec 0c             	sub    esp,0xc
c0024f49:	68 93 bf 02 c0       	push   0xc002bf93
c0024f4e:	e8 f2 4c ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0024f53:	83 c4 10             	add    esp,0x10
c0024f56:	83 ec 0c             	sub    esp,0xc
c0024f59:	6a 02                	push   0x2
c0024f5b:	e8 41 c2 fe ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0024f60:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024f66:	6a 03                	push   0x3
c0024f68:	50                   	push   eax
c0024f69:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024f6f:	ff 35 f0 d6 02 c0    	push   DWORD PTR ds:0xc002d6f0
c0024f75:	e8 e4 c9 fe ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0024f7a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024f81:	83 c4 14             	add    esp,0x14
c0024f84:	53                   	push   ebx
c0024f85:	e8 9e fe ff ff       	call   c0024e28 <SATAPI::detectMedia()>
c0024f8a:	83 c4 14             	add    esp,0x14
c0024f8d:	31 c0                	xor    eax,eax
c0024f8f:	5b                   	pop    ebx
c0024f90:	5e                   	pop    esi
c0024f91:	c3                   	ret    

c0024f92 <SATAPI::read(unsigned long long, int, void*)>:
c0024f92:	55                   	push   ebp
c0024f93:	57                   	push   edi
c0024f94:	56                   	push   esi
c0024f95:	53                   	push   ebx
c0024f96:	83 ec 1c             	sub    esp,0x1c
c0024f99:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024f9d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024fa1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024fa5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024fac:	74 19                	je     c0024fc7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024fae:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024fb3:	7e 2e                	jle    c0024fe3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024fb5:	83 ec 0c             	sub    esp,0xc
c0024fb8:	68 a9 bf 02 c0       	push   0xc002bfa9
c0024fbd:	e8 83 4c ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0024fc2:	83 c4 10             	add    esp,0x10
c0024fc5:	eb 1c                	jmp    c0024fe3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024fc7:	83 ec 0c             	sub    esp,0xc
c0024fca:	55                   	push   ebp
c0024fcb:	e8 58 fe ff ff       	call   c0024e28 <SATAPI::detectMedia()>
c0024fd0:	83 c4 10             	add    esp,0x10
c0024fd3:	b8 02 00 00 00       	mov    eax,0x2
c0024fd8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024fdf:	75 cd                	jne    c0024fae <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024fe1:	eb 49                	jmp    c002502c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024fe3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fe7:	b9 03 00 00 00       	mov    ecx,0x3
c0024fec:	fc                   	cld    
c0024fed:	31 c0                	xor    eax,eax
c0024fef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ff1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024ff6:	89 d8                	mov    eax,ebx
c0024ff8:	86 e0                	xchg   al,ah
c0024ffa:	c1 c0 10             	rol    eax,0x10
c0024ffd:	86 e0                	xchg   al,ah
c0024fff:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025003:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025007:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002500b:	50                   	push   eax
c002500c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025010:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025014:	56                   	push   esi
c0025015:	53                   	push   ebx
c0025016:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002501a:	c1 e0 0b             	shl    eax,0xb
c002501d:	50                   	push   eax
c002501e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025022:	50                   	push   eax
c0025023:	55                   	push   ebp
c0025024:	e8 af fb ff ff       	call   c0024bd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025029:	83 c4 20             	add    esp,0x20
c002502c:	83 c4 1c             	add    esp,0x1c
c002502f:	5b                   	pop    ebx
c0025030:	5e                   	pop    esi
c0025031:	5f                   	pop    edi
c0025032:	5d                   	pop    ebp
c0025033:	c3                   	ret    

c0025034 <AVX::open(int, int, void*)>:
c0025034:	83 ec 0c             	sub    esp,0xc
c0025037:	e8 3c 11 00 00       	call   c0026178 <avxInit>
c002503c:	b8 00 00 00 00       	mov    eax,0x0
c0025041:	83 c4 0c             	add    esp,0xc
c0025044:	c3                   	ret    
c0025045:	90                   	nop

c0025046 <AVX::close(int, int, void*)>:
c0025046:	83 ec 0c             	sub    esp,0xc
c0025049:	e8 2b 11 00 00       	call   c0026179 <avxClose>
c002504e:	b8 00 00 00 00       	mov    eax,0x0
c0025053:	83 c4 0c             	add    esp,0xc
c0025056:	c3                   	ret    
c0025057:	90                   	nop

c0025058 <AVX::available()>:
c0025058:	83 ec 0c             	sub    esp,0xc
c002505b:	e8 10 11 00 00       	call   c0026170 <avxDetect>
c0025060:	85 c0                	test   eax,eax
c0025062:	0f 95 c0             	setne  al
c0025065:	83 c4 0c             	add    esp,0xc
c0025068:	c3                   	ret    
c0025069:	90                   	nop

c002506a <AVX::save(void*)>:
c002506a:	83 ec 0c             	sub    esp,0xc
c002506d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025071:	83 ec 0c             	sub    esp,0xc
c0025074:	50                   	push   eax
c0025075:	e8 fc 10 00 00       	call   c0026176 <avxSave>
c002507a:	83 c4 10             	add    esp,0x10
c002507d:	90                   	nop
c002507e:	83 c4 0c             	add    esp,0xc
c0025081:	c3                   	ret    

c0025082 <AVX::load(void*)>:
c0025082:	83 ec 0c             	sub    esp,0xc
c0025085:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025089:	83 ec 0c             	sub    esp,0xc
c002508c:	50                   	push   eax
c002508d:	e8 e5 10 00 00       	call   c0026177 <avxLoad>
c0025092:	83 c4 10             	add    esp,0x10
c0025095:	90                   	nop
c0025096:	83 c4 0c             	add    esp,0xc
c0025099:	c3                   	ret    

c002509a <AVX::AVX()>:
c002509a:	83 ec 0c             	sub    esp,0xc
c002509d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a1:	83 ec 08             	sub    esp,0x8
c00250a4:	68 0c c0 02 c0       	push   0xc002c00c
c00250a9:	50                   	push   eax
c00250aa:	e8 a9 ed fe ff       	call   c0013e58 <FPU::FPU(char const*)>
c00250af:	83 c4 10             	add    esp,0x10
c00250b2:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c00250b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250bb:	89 10                	mov    DWORD PTR [eax],edx
c00250bd:	90                   	nop
c00250be:	83 c4 0c             	add    esp,0xc
c00250c1:	c3                   	ret    

c00250c2 <MMX::available()>:
c00250c2:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00250c7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00250cd:	83 e0 20             	and    eax,0x20
c00250d0:	84 c0                	test   al,al
c00250d2:	0f 95 c0             	setne  al
c00250d5:	c3                   	ret    

c00250d6 <MMX::open(int, int, void*)>:
c00250d6:	83 ec 0c             	sub    esp,0xc
c00250d9:	e8 24 11 00 00       	call   c0026202 <x87Init>
c00250de:	b8 00 00 00 00       	mov    eax,0x0
c00250e3:	83 c4 0c             	add    esp,0xc
c00250e6:	c3                   	ret    
c00250e7:	90                   	nop

c00250e8 <MMX::close(int, int, void*)>:
c00250e8:	83 ec 0c             	sub    esp,0xc
c00250eb:	e8 2c 11 00 00       	call   c002621c <x87Close>
c00250f0:	b8 00 00 00 00       	mov    eax,0x0
c00250f5:	83 c4 0c             	add    esp,0xc
c00250f8:	c3                   	ret    
c00250f9:	90                   	nop

c00250fa <MMX::save(void*)>:
c00250fa:	83 ec 0c             	sub    esp,0xc
c00250fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025101:	83 ec 0c             	sub    esp,0xc
c0025104:	50                   	push   eax
c0025105:	e8 e7 10 00 00       	call   c00261f1 <x87Save>
c002510a:	83 c4 10             	add    esp,0x10
c002510d:	90                   	nop
c002510e:	83 c4 0c             	add    esp,0xc
c0025111:	c3                   	ret    

c0025112 <MMX::load(void*)>:
c0025112:	83 ec 0c             	sub    esp,0xc
c0025115:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025119:	83 ec 0c             	sub    esp,0xc
c002511c:	50                   	push   eax
c002511d:	e8 d8 10 00 00       	call   c00261fa <x87Load>
c0025122:	83 c4 10             	add    esp,0x10
c0025125:	90                   	nop
c0025126:	83 c4 0c             	add    esp,0xc
c0025129:	c3                   	ret    

c002512a <MMX::MMX()>:
c002512a:	83 ec 0c             	sub    esp,0xc
c002512d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025131:	83 ec 08             	sub    esp,0x8
c0025134:	68 4c c0 02 c0       	push   0xc002c04c
c0025139:	50                   	push   eax
c002513a:	e8 19 ed fe ff       	call   c0013e58 <FPU::FPU(char const*)>
c002513f:	83 c4 10             	add    esp,0x10
c0025142:	ba 5c c0 02 c0       	mov    edx,0xc002c05c
c0025147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002514b:	89 10                	mov    DWORD PTR [eax],edx
c002514d:	90                   	nop
c002514e:	83 c4 0c             	add    esp,0xc
c0025151:	c3                   	ret    

c0025152 <SSE::open(int, int, void*)>:
c0025152:	83 ec 0c             	sub    esp,0xc
c0025155:	e8 5a 10 00 00       	call   c00261b4 <sseInit>
c002515a:	b8 00 00 00 00       	mov    eax,0x0
c002515f:	83 c4 0c             	add    esp,0xc
c0025162:	c3                   	ret    
c0025163:	90                   	nop

c0025164 <SSE::close(int, int, void*)>:
c0025164:	83 ec 0c             	sub    esp,0xc
c0025167:	e8 58 10 00 00       	call   c00261c4 <sseClose>
c002516c:	b8 00 00 00 00       	mov    eax,0x0
c0025171:	83 c4 0c             	add    esp,0xc
c0025174:	c3                   	ret    
c0025175:	90                   	nop

c0025176 <SSE::available()>:
c0025176:	83 ec 1c             	sub    esp,0x1c
c0025179:	e8 12 10 00 00       	call   c0026190 <absolutelyNoChanceInHell>
c002517e:	85 c0                	test   eax,eax
c0025180:	0f 95 c0             	setne  al
c0025183:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025187:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002518b:	83 c4 1c             	add    esp,0x1c
c002518e:	c3                   	ret    
c002518f:	90                   	nop

c0025190 <SSE::save(void*)>:
c0025190:	83 ec 0c             	sub    esp,0xc
c0025193:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025197:	83 ec 0c             	sub    esp,0xc
c002519a:	50                   	push   eax
c002519b:	e8 08 10 00 00       	call   c00261a8 <sseSave>
c00251a0:	83 c4 10             	add    esp,0x10
c00251a3:	90                   	nop
c00251a4:	83 c4 0c             	add    esp,0xc
c00251a7:	c3                   	ret    

c00251a8 <SSE::load(void*)>:
c00251a8:	83 ec 0c             	sub    esp,0xc
c00251ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251af:	83 ec 0c             	sub    esp,0xc
c00251b2:	50                   	push   eax
c00251b3:	e8 f6 0f 00 00       	call   c00261ae <sseLoad>
c00251b8:	83 c4 10             	add    esp,0x10
c00251bb:	90                   	nop
c00251bc:	83 c4 0c             	add    esp,0xc
c00251bf:	c3                   	ret    

c00251c0 <SSE::SSE()>:
c00251c0:	83 ec 0c             	sub    esp,0xc
c00251c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251c7:	83 ec 08             	sub    esp,0x8
c00251ca:	68 8c c0 02 c0       	push   0xc002c08c
c00251cf:	50                   	push   eax
c00251d0:	e8 83 ec fe ff       	call   c0013e58 <FPU::FPU(char const*)>
c00251d5:	83 c4 10             	add    esp,0x10
c00251d8:	ba 9c c0 02 c0       	mov    edx,0xc002c09c
c00251dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e1:	89 10                	mov    DWORD PTR [eax],edx
c00251e3:	90                   	nop
c00251e4:	83 c4 0c             	add    esp,0xc
c00251e7:	c3                   	ret    

c00251e8 <x87::open(int, int, void*)>:
c00251e8:	83 ec 0c             	sub    esp,0xc
c00251eb:	e8 12 10 00 00       	call   c0026202 <x87Init>
c00251f0:	b8 00 00 00 00       	mov    eax,0x0
c00251f5:	83 c4 0c             	add    esp,0xc
c00251f8:	c3                   	ret    
c00251f9:	90                   	nop

c00251fa <x87::close(int, int, void*)>:
c00251fa:	83 ec 0c             	sub    esp,0xc
c00251fd:	e8 1a 10 00 00       	call   c002621c <x87Close>
c0025202:	b8 00 00 00 00       	mov    eax,0x0
c0025207:	83 c4 0c             	add    esp,0xc
c002520a:	c3                   	ret    
c002520b:	90                   	nop

c002520c <x87::available()>:
c002520c:	83 ec 0c             	sub    esp,0xc
c002520f:	e8 c2 0f 00 00       	call   c00261d6 <x87Detect>
c0025214:	85 c0                	test   eax,eax
c0025216:	0f 95 c0             	setne  al
c0025219:	83 c4 0c             	add    esp,0xc
c002521c:	c3                   	ret    
c002521d:	90                   	nop

c002521e <x87::save(void*)>:
c002521e:	83 ec 0c             	sub    esp,0xc
c0025221:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025225:	83 ec 0c             	sub    esp,0xc
c0025228:	50                   	push   eax
c0025229:	e8 c3 0f 00 00       	call   c00261f1 <x87Save>
c002522e:	83 c4 10             	add    esp,0x10
c0025231:	90                   	nop
c0025232:	83 c4 0c             	add    esp,0xc
c0025235:	c3                   	ret    

c0025236 <x87::load(void*)>:
c0025236:	83 ec 0c             	sub    esp,0xc
c0025239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002523d:	83 ec 0c             	sub    esp,0xc
c0025240:	50                   	push   eax
c0025241:	e8 b4 0f 00 00       	call   c00261fa <x87Load>
c0025246:	83 c4 10             	add    esp,0x10
c0025249:	90                   	nop
c002524a:	83 c4 0c             	add    esp,0xc
c002524d:	c3                   	ret    

c002524e <x87::x87()>:
c002524e:	83 ec 0c             	sub    esp,0xc
c0025251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025255:	83 ec 08             	sub    esp,0x8
c0025258:	68 cc c0 02 c0       	push   0xc002c0cc
c002525d:	50                   	push   eax
c002525e:	e8 f5 eb fe ff       	call   c0013e58 <FPU::FPU(char const*)>
c0025263:	83 c4 10             	add    esp,0x10
c0025266:	ba dc c0 02 c0       	mov    edx,0xc002c0dc
c002526b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002526f:	89 10                	mov    DWORD PTR [eax],edx
c0025271:	90                   	nop
c0025272:	83 c4 0c             	add    esp,0xc
c0025275:	c3                   	ret    

c0025276 <APIC::disable()>:
c0025276:	90                   	nop
c0025277:	c3                   	ret    

c0025278 <APIC::close(int, int, void*)>:
c0025278:	55                   	push   ebp
c0025279:	89 e5                	mov    ebp,esp
c002527b:	83 ec 08             	sub    esp,0x8
c002527e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025281:	8b 00                	mov    eax,DWORD PTR [eax]
c0025283:	83 c0 3c             	add    eax,0x3c
c0025286:	8b 00                	mov    eax,DWORD PTR [eax]
c0025288:	83 ec 0c             	sub    esp,0xc
c002528b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002528e:	ff d0                	call   eax
c0025290:	83 c4 10             	add    esp,0x10
c0025293:	b8 00 00 00 00       	mov    eax,0x0
c0025298:	c9                   	leave  
c0025299:	c3                   	ret    

c002529a <IOAPIC::close(int, int, void*)>:
c002529a:	b8 00 00 00 00       	mov    eax,0x0
c002529f:	c3                   	ret    

c00252a0 <APIC::io_wait()>:
c00252a0:	eb 00                	jmp    c00252a2 <APIC::io_wait()+0x2>
c00252a2:	eb 00                	jmp    c00252a4 <APIC::io_wait()+0x4>
c00252a4:	90                   	nop
c00252a5:	c3                   	ret    

c00252a6 <APIC::getBase()>:
c00252a6:	55                   	push   ebp
c00252a7:	89 e5                	mov    ebp,esp
c00252a9:	83 ec 18             	sub    esp,0x18
c00252ac:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00252b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252b7:	83 e0 08             	and    eax,0x8
c00252ba:	84 c0                	test   al,al
c00252bc:	75 07                	jne    c00252c5 <APIC::getBase()+0x1f>
c00252be:	b8 00 00 00 00       	mov    eax,0x0
c00252c3:	eb 21                	jmp    c00252e6 <APIC::getBase()+0x40>
c00252c5:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c00252ca:	83 ec 08             	sub    esp,0x8
c00252cd:	6a 1b                	push   0x1b
c00252cf:	50                   	push   eax
c00252d0:	e8 6b 98 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00252d5:	83 c4 10             	add    esp,0x10
c00252d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00252db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00252de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00252e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00252e6:	c9                   	leave  
c00252e7:	c3                   	ret    

c00252e8 <APIC::eoi(unsigned char)>:
c00252e8:	55                   	push   ebp
c00252e9:	89 e5                	mov    ebp,esp
c00252eb:	83 ec 28             	sub    esp,0x28
c00252ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00252f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00252f4:	83 ec 0c             	sub    esp,0xc
c00252f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00252fa:	e8 a7 ff ff ff       	call   c00252a6 <APIC::getBase()>
c00252ff:	83 c4 10             	add    esp,0x10
c0025302:	05 b0 00 00 00       	add    eax,0xb0
c0025307:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002530a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002530d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025313:	90                   	nop
c0025314:	c9                   	leave  
c0025315:	c3                   	ret    

c0025316 <APIC::open(int, int, void*)>:
c0025316:	55                   	push   ebp
c0025317:	89 e5                	mov    ebp,esp
c0025319:	57                   	push   edi
c002531a:	56                   	push   esi
c002531b:	53                   	push   ebx
c002531c:	83 ec 2c             	sub    esp,0x2c
c002531f:	83 ec 0c             	sub    esp,0xc
c0025322:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025325:	e8 7c ff ff ff       	call   c00252a6 <APIC::getBase()>
c002532a:	83 c4 10             	add    esp,0x10
c002532d:	89 c2                	mov    edx,eax
c002532f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025332:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025338:	0f b6 f8             	movzx  edi,al
c002533b:	89 d0                	mov    eax,edx
c002533d:	ba 00 00 00 00       	mov    edx,0x0
c0025342:	89 c1                	mov    ecx,eax
c0025344:	80 e5 ff             	and    ch,0xff
c0025347:	89 cb                	mov    ebx,ecx
c0025349:	0f b6 f2             	movzx  esi,dl
c002534c:	89 d8                	mov    eax,ebx
c002534e:	89 f2                	mov    edx,esi
c0025350:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025353:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025356:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002535a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002535e:	83 e0 00             	and    eax,0x0
c0025361:	09 d0                	or     eax,edx
c0025363:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002536a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025370:	8d 50 01             	lea    edx,[eax+0x1]
c0025373:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025376:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002537c:	0f b6 d0             	movzx  edx,al
c002537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025382:	83 c2 08             	add    edx,0x8
c0025385:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025389:	0f b6 c9             	movzx  ecx,cl
c002538c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025392:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025396:	83 ec 0c             	sub    esp,0xc
c0025399:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002539c:	e8 05 ff ff ff       	call   c00252a6 <APIC::getBase()>
c00253a1:	83 c4 10             	add    esp,0x10
c00253a4:	05 f0 00 00 00       	add    eax,0xf0
c00253a9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00253ac:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00253af:	8b 00                	mov    eax,DWORD PTR [eax]
c00253b1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00253b4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00253bb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00253c2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00253c5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00253c8:	89 10                	mov    DWORD PTR [eax],edx
c00253ca:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00253d1:	a1 50 fe 02 c0       	mov    eax,ds:0xc002fe50
c00253d6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00253d9:	7d 7c                	jge    c0025457 <APIC::open(int, int, void*)+0x141>
c00253db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00253de:	8b 04 85 60 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd01a0]
c00253e5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00253e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00253eb:	8b 04 85 60 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd01a0]
c00253f2:	c1 e8 08             	shr    eax,0x8
c00253f5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00253f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00253fc:	8b 04 85 60 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd01a0]
c0025403:	c1 e8 18             	shr    eax,0x18
c0025406:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025409:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002540d:	75 40                	jne    c002544f <APIC::open(int, int, void*)+0x139>
c002540f:	83 ec 0c             	sub    esp,0xc
c0025412:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025415:	e8 8c fe ff ff       	call   c00252a6 <APIC::getBase()>
c002541a:	83 c4 10             	add    esp,0x10
c002541d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025421:	75 07                	jne    c002542a <APIC::open(int, int, void*)+0x114>
c0025423:	ba 60 03 00 00       	mov    edx,0x360
c0025428:	eb 05                	jmp    c002542f <APIC::open(int, int, void*)+0x119>
c002542a:	ba 50 03 00 00       	mov    edx,0x350
c002542f:	01 d0                	add    eax,edx
c0025431:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025434:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025437:	8b 00                	mov    eax,DWORD PTR [eax]
c0025439:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002543c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025443:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025447:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002544a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002544d:	89 10                	mov    DWORD PTR [eax],edx
c002544f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025452:	e9 7a ff ff ff       	jmp    c00253d1 <APIC::open(int, int, void*)+0xbb>
c0025457:	b8 00 00 00 00       	mov    eax,0x0
c002545c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002545f:	5b                   	pop    ebx
c0025460:	5e                   	pop    esi
c0025461:	5f                   	pop    edi
c0025462:	5d                   	pop    ebp
c0025463:	c3                   	ret    

c0025464 <IOAPIC::IOAPIC()>:
c0025464:	83 ec 0c             	sub    esp,0xc
c0025467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002546b:	83 ec 08             	sub    esp,0x8
c002546e:	68 0c c1 02 c0       	push   0xc002c10c
c0025473:	50                   	push   eax
c0025474:	e8 cf e6 fe ff       	call   c0013b48 <Device::Device(char const*)>
c0025479:	83 c4 10             	add    esp,0x10
c002547c:	ba 34 c2 02 c0       	mov    edx,0xc002c234
c0025481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025485:	89 10                	mov    DWORD PTR [eax],edx
c0025487:	90                   	nop
c0025488:	83 c4 0c             	add    esp,0xc
c002548b:	c3                   	ret    

c002548c <APIC::APIC()>:
c002548c:	53                   	push   ebx
c002548d:	83 ec 18             	sub    esp,0x18
c0025490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025494:	83 ec 08             	sub    esp,0x8
c0025497:	68 14 c1 02 c0       	push   0xc002c114
c002549c:	50                   	push   eax
c002549d:	e8 10 ee fe ff       	call   c00142b2 <InterruptController::InterruptController(char const*)>
c00254a2:	83 c4 10             	add    esp,0x10
c00254a5:	ba ec c1 02 c0       	mov    edx,0xc002c1ec
c00254aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00254ae:	89 10                	mov    DWORD PTR [eax],edx
c00254b0:	a0 20 19 03 c0       	mov    al,ds:0xc0031920
c00254b5:	83 f0 01             	xor    eax,0x1
c00254b8:	84 c0                	test   al,al
c00254ba:	0f 84 a1 00 00 00    	je     c0025561 <APIC::APIC()+0xd5>
c00254c0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00254c5:	a0 00 ff 02 c0       	mov    al,ds:0xc002ff00
c00254ca:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00254ce:	0f 83 86 00 00 00    	jae    c002555a <APIC::APIC()+0xce>
c00254d4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00254dc:	83 ec 0c             	sub    esp,0xc
c00254df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00254e3:	e8 b4 a0 fe ff       	call   c000f59c <malloc>
c00254e8:	83 c4 10             	add    esp,0x10
c00254eb:	89 c3                	mov    ebx,eax
c00254ed:	83 ec 0c             	sub    esp,0xc
c00254f0:	53                   	push   ebx
c00254f1:	e8 6e ff ff ff       	call   c0025464 <IOAPIC::IOAPIC()>
c00254f6:	83 c4 10             	add    esp,0x10
c00254f9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00254fd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025502:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025506:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c002550d:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c0025512:	40                   	inc    eax
c0025513:	a3 e0 18 03 c0       	mov    ds:0xc00318e0,eax
c0025518:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c002551d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025523:	83 ec 08             	sub    esp,0x8
c0025526:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002552a:	50                   	push   eax
c002552b:	e8 14 e4 fe ff       	call   c0013944 <Device::addChild(Device*)>
c0025530:	83 c4 10             	add    esp,0x10
c0025533:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025537:	8b 00                	mov    eax,DWORD PTR [eax]
c0025539:	83 c0 08             	add    eax,0x8
c002553c:	8b 00                	mov    eax,DWORD PTR [eax]
c002553e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025543:	6a 00                	push   0x0
c0025545:	6a 00                	push   0x0
c0025547:	52                   	push   edx
c0025548:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002554c:	ff d0                	call   eax
c002554e:	83 c4 10             	add    esp,0x10
c0025551:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025555:	e9 6b ff ff ff       	jmp    c00254c5 <APIC::APIC()+0x39>
c002555a:	c6 05 20 19 03 c0 01 	mov    BYTE PTR ds:0xc0031920,0x1
c0025561:	90                   	nop
c0025562:	83 c4 18             	add    esp,0x18
c0025565:	5b                   	pop    ebx
c0025566:	c3                   	ret    
c0025567:	90                   	nop

c0025568 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025568:	55                   	push   ebp
c0025569:	89 e5                	mov    ebp,esp
c002556b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002556e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025574:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025577:	72 1d                	jb     c0025596 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002557c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025585:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002558b:	01 d0                	add    eax,edx
c002558d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025590:	73 04                	jae    c0025596 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025592:	b0 01                	mov    al,0x1
c0025594:	eb 02                	jmp    c0025598 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025596:	b0 00                	mov    al,0x0
c0025598:	5d                   	pop    ebp
c0025599:	c3                   	ret    

c002559a <IOAPIC::read(int)>:
c002559a:	55                   	push   ebp
c002559b:	89 e5                	mov    ebp,esp
c002559d:	83 ec 10             	sub    esp,0x10
c00255a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00255a9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00255ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255af:	0f b6 d0             	movzx  edx,al
c00255b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00255b5:	89 10                	mov    DWORD PTR [eax],edx
c00255b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00255ba:	83 c0 10             	add    eax,0x10
c00255bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00255bf:	c9                   	leave  
c00255c0:	c3                   	ret    
c00255c1:	90                   	nop

c00255c2 <IOAPIC::open(int, int, void*)>:
c00255c2:	55                   	push   ebp
c00255c3:	89 e5                	mov    ebp,esp
c00255c5:	57                   	push   edi
c00255c6:	56                   	push   esi
c00255c7:	53                   	push   ebx
c00255c8:	83 ec 0c             	sub    esp,0xc
c00255cb:	83 ec 0c             	sub    esp,0xc
c00255ce:	68 3f c1 02 c0       	push   0xc002c13f
c00255d3:	e8 33 cf fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00255d8:	83 c4 10             	add    esp,0x10
c00255db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00255e1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00255e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00255f0:	8b 14 85 40 ff 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd00c0]
c00255f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025603:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025609:	8b 14 85 c0 ff 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0040]
c0025610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025613:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002561c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025625:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002562b:	0f b6 f8             	movzx  edi,al
c002562e:	89 d0                	mov    eax,edx
c0025630:	ba 00 00 00 00       	mov    edx,0x0
c0025635:	89 c1                	mov    ecx,eax
c0025637:	80 e5 ff             	and    ch,0xff
c002563a:	89 cb                	mov    ebx,ecx
c002563c:	0f b6 f2             	movzx  esi,dl
c002563f:	89 d8                	mov    eax,ebx
c0025641:	89 f2                	mov    edx,esi
c0025643:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025646:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025649:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002564d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025651:	83 e0 00             	and    eax,0x0
c0025654:	09 d0                	or     eax,edx
c0025656:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002565a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002565d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025663:	8d 50 01             	lea    edx,[eax+0x1]
c0025666:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025669:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002566f:	0f b6 d0             	movzx  edx,al
c0025672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025675:	83 c2 08             	add    edx,0x8
c0025678:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002567c:	0f b6 c9             	movzx  ecx,cl
c002567f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025685:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025689:	83 ec 08             	sub    esp,0x8
c002568c:	6a 01                	push   0x1
c002568e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025691:	e8 04 ff ff ff       	call   c002559a <IOAPIC::read(int)>
c0025696:	83 c4 10             	add    esp,0x10
c0025699:	c1 f8 10             	sar    eax,0x10
c002569c:	0f b6 c0             	movzx  eax,al
c002569f:	8d 50 01             	lea    edx,[eax+0x1]
c00256a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256a5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00256ab:	b8 00 00 00 00       	mov    eax,0x0
c00256b0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00256b3:	5b                   	pop    ebx
c00256b4:	5e                   	pop    esi
c00256b5:	5f                   	pop    edi
c00256b6:	5d                   	pop    ebp
c00256b7:	c3                   	ret    

c00256b8 <IOAPIC::write(int, int)>:
c00256b8:	55                   	push   ebp
c00256b9:	89 e5                	mov    ebp,esp
c00256bb:	83 ec 10             	sub    esp,0x10
c00256be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00256c7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00256ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256cd:	0f b6 d0             	movzx  edx,al
c00256d0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256d3:	89 10                	mov    DWORD PTR [eax],edx
c00256d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256d8:	8d 50 10             	lea    edx,[eax+0x10]
c00256db:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00256de:	89 02                	mov    DWORD PTR [edx],eax
c00256e0:	90                   	nop
c00256e1:	c9                   	leave  
c00256e2:	c3                   	ret    
c00256e3:	90                   	nop

c00256e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00256e4:	55                   	push   ebp
c00256e5:	89 e5                	mov    ebp,esp
c00256e7:	53                   	push   ebx
c00256e8:	83 ec 2c             	sub    esp,0x2c
c00256eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256ee:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00256f1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00256f4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00256f7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00256fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00256fd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025700:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025703:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025706:	88 d8                	mov    al,bl
c0025708:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002570b:	88 c8                	mov    al,cl
c002570d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025710:	88 d0                	mov    al,dl
c0025712:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025715:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025719:	83 c0 08             	add    eax,0x8
c002571c:	01 c0                	add    eax,eax
c002571e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025721:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025725:	83 c0 08             	add    eax,0x8
c0025728:	01 c0                	add    eax,eax
c002572a:	40                   	inc    eax
c002572b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002572e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025731:	50                   	push   eax
c0025732:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025735:	e8 60 fe ff ff       	call   c002559a <IOAPIC::read(int)>
c002573a:	83 c4 08             	add    esp,0x8
c002573d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025740:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025747:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002574a:	c1 e0 18             	shl    eax,0x18
c002574d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025750:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025753:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025756:	52                   	push   edx
c0025757:	50                   	push   eax
c0025758:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002575b:	e8 58 ff ff ff       	call   c00256b8 <IOAPIC::write(int, int)>
c0025760:	83 c4 0c             	add    esp,0xc
c0025763:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025766:	50                   	push   eax
c0025767:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002576a:	e8 2b fe ff ff       	call   c002559a <IOAPIC::read(int)>
c002576f:	83 c4 08             	add    esp,0x8
c0025772:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025775:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002577c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025783:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002578a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002578e:	74 09                	je     c0025799 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025790:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025797:	eb 07                	jmp    c00257a0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025799:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00257a0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00257a4:	74 09                	je     c00257af <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00257a6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00257ad:	eb 07                	jmp    c00257b6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00257af:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00257b6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00257bd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00257c1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00257c4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00257c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257ca:	52                   	push   edx
c00257cb:	50                   	push   eax
c00257cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257cf:	e8 e4 fe ff ff       	call   c00256b8 <IOAPIC::write(int, int)>
c00257d4:	83 c4 0c             	add    esp,0xc
c00257d7:	90                   	nop
c00257d8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00257db:	c9                   	leave  
c00257dc:	c3                   	ret    
c00257dd:	90                   	nop

c00257de <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00257de:	55                   	push   ebp
c00257df:	89 e5                	mov    ebp,esp
c00257e1:	57                   	push   edi
c00257e2:	56                   	push   esi
c00257e3:	53                   	push   ebx
c00257e4:	83 ec 2c             	sub    esp,0x2c
c00257e7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00257ea:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00257ed:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00257f1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00257f5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00257f9:	74 5a                	je     c0025855 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00257fb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00257ff:	7f 44                	jg     c0025845 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025801:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025804:	05 e0 c7 02 c0       	add    eax,0xc002c7e0
c0025809:	8a 00                	mov    al,BYTE PTR [eax]
c002580b:	0f b6 c0             	movzx  eax,al
c002580e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025811:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025814:	66 8b 84 00 e0 fe 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0120]
c002581c:	0f b7 c0             	movzx  eax,ax
c002581f:	83 e0 02             	and    eax,0x2
c0025822:	85 c0                	test   eax,eax
c0025824:	74 04                	je     c002582a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025826:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002582a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002582d:	66 8b 84 00 e0 fe 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0120]
c0025835:	0f b7 c0             	movzx  eax,ax
c0025838:	83 e0 08             	and    eax,0x8
c002583b:	85 c0                	test   eax,eax
c002583d:	74 16                	je     c0025855 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002583f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025843:	eb 10                	jmp    c0025855 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025845:	83 ec 0c             	sub    esp,0xc
c0025848:	68 50 c1 02 c0       	push   0xc002c150
c002584d:	e8 f3 43 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0025852:	83 c4 10             	add    esp,0x10
c0025855:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025859:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c002585e:	83 ec 08             	sub    esp,0x8
c0025861:	50                   	push   eax
c0025862:	68 88 c1 02 c0       	push   0xc002c188
c0025867:	e8 9f cc fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c002586c:	83 c4 10             	add    esp,0x10
c002586f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025876:	a1 e0 18 03 c0       	mov    eax,ds:0xc00318e0
c002587b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002587e:	7d 67                	jge    c00258e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025880:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025883:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c002588a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002588d:	83 ec 08             	sub    esp,0x8
c0025890:	52                   	push   edx
c0025891:	50                   	push   eax
c0025892:	e8 d1 fc ff ff       	call   c0025568 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025897:	83 c4 10             	add    esp,0x10
c002589a:	84 c0                	test   al,al
c002589c:	74 44                	je     c00258e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002589e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258a1:	8b 1c 85 00 19 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce700]
c00258a8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00258ac:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258af:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00258b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258b6:	83 c0 20             	add    eax,0x20
c00258b9:	0f b6 f0             	movzx  esi,al
c00258bc:	b8 00 00 00 00       	mov    eax,0x0
c00258c1:	99                   	cdq    
c00258c2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00258c5:	0f b6 c9             	movzx  ecx,cl
c00258c8:	83 ec 04             	sub    esp,0x4
c00258cb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00258ce:	57                   	push   edi
c00258cf:	56                   	push   esi
c00258d0:	52                   	push   edx
c00258d1:	50                   	push   eax
c00258d2:	51                   	push   ecx
c00258d3:	53                   	push   ebx
c00258d4:	e8 0b fe ff ff       	call   c00256e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00258d9:	83 c4 20             	add    esp,0x20
c00258dc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00258e0:	eb 05                	jmp    c00258e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00258e2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00258e5:	eb 8f                	jmp    c0025876 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00258e7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00258ea:	83 f0 01             	xor    eax,0x1
c00258ed:	84 c0                	test   al,al
c00258ef:	74 10                	je     c0025901 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00258f1:	83 ec 0c             	sub    esp,0xc
c00258f4:	68 9f c1 02 c0       	push   0xc002c19f
c00258f9:	e8 47 43 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00258fe:	83 c4 10             	add    esp,0x10
c0025901:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025905:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002590c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025910:	7f 65                	jg     c0025977 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025915:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025918:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002591f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025922:	01 ca                	add    edx,ecx
c0025924:	83 c2 54             	add    edx,0x54
c0025927:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002592b:	85 c0                	test   eax,eax
c002592d:	75 43                	jne    c0025972 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002592f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025932:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025935:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002593c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002593f:	01 ca                	add    edx,ecx
c0025941:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025944:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025947:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002594b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002594e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025951:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025958:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002595b:	01 ca                	add    edx,ecx
c002595d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025963:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025966:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002596a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002596d:	83 e8 20             	sub    eax,0x20
c0025970:	eb 1a                	jmp    c002598c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025972:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025975:	eb 95                	jmp    c002590c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025977:	83 ec 0c             	sub    esp,0xc
c002597a:	68 ac c1 02 c0       	push   0xc002c1ac
c002597f:	e8 c1 42 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0025984:	83 c4 10             	add    esp,0x10
c0025987:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002598c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002598f:	5b                   	pop    ebx
c0025990:	5e                   	pop    esi
c0025991:	5f                   	pop    edi
c0025992:	5d                   	pop    ebp
c0025993:	c3                   	ret    

c0025994 <PIC::disable()>:
c0025994:	55                   	push   ebp
c0025995:	89 e5                	mov    ebp,esp
c0025997:	83 ec 10             	sub    esp,0x10
c002599a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00259a0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00259a4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00259a7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00259ab:	ee                   	out    dx,al
c00259ac:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00259b2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00259b6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00259b9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00259bd:	ee                   	out    dx,al
c00259be:	90                   	nop
c00259bf:	c9                   	leave  
c00259c0:	c3                   	ret    
c00259c1:	90                   	nop

c00259c2 <PIC::close(int, int, void*)>:
c00259c2:	55                   	push   ebp
c00259c3:	89 e5                	mov    ebp,esp
c00259c5:	83 ec 08             	sub    esp,0x8
c00259c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00259cd:	83 c0 3c             	add    eax,0x3c
c00259d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00259d2:	83 ec 0c             	sub    esp,0xc
c00259d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259d8:	ff d0                	call   eax
c00259da:	83 c4 10             	add    esp,0x10
c00259dd:	b8 00 00 00 00       	mov    eax,0x0
c00259e2:	c9                   	leave  
c00259e3:	c3                   	ret    

c00259e4 <PIC::PIC()>:
c00259e4:	83 ec 0c             	sub    esp,0xc
c00259e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259eb:	83 ec 08             	sub    esp,0x8
c00259ee:	68 58 c2 02 c0       	push   0xc002c258
c00259f3:	50                   	push   eax
c00259f4:	e8 b9 e8 fe ff       	call   c00142b2 <InterruptController::InterruptController(char const*)>
c00259f9:	83 c4 10             	add    esp,0x10
c00259fc:	ba 84 c2 02 c0       	mov    edx,0xc002c284
c0025a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a05:	89 10                	mov    DWORD PTR [eax],edx
c0025a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a11:	0f b6 d0             	movzx  edx,al
c0025a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a18:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a29:	0f b6 d0             	movzx  edx,al
c0025a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a30:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a39:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a3f:	8d 50 01             	lea    edx,[eax+0x1]
c0025a42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a46:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025a4c:	0f b6 d0             	movzx  edx,al
c0025a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a53:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025a57:	83 e1 3f             	and    ecx,0x3f
c0025a5a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a68:	0f b6 d0             	movzx  edx,al
c0025a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a6f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a80:	0f b6 d0             	movzx  edx,al
c0025a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a87:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a90:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a96:	8d 50 01             	lea    edx,[eax+0x1]
c0025a99:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a9d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025aa3:	0f b6 d0             	movzx  edx,al
c0025aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aaa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025aae:	83 e1 3f             	and    ecx,0x3f
c0025ab1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ab5:	90                   	nop
c0025ab6:	83 c4 0c             	add    esp,0xc
c0025ab9:	c3                   	ret    

c0025aba <PIC::ioWait()>:
c0025aba:	eb 00                	jmp    c0025abc <PIC::ioWait()+0x2>
c0025abc:	eb 00                	jmp    c0025abe <PIC::ioWait()+0x4>
c0025abe:	90                   	nop
c0025abf:	c3                   	ret    

c0025ac0 <PIC::getIRQReg(int)>:
c0025ac0:	55                   	push   ebp
c0025ac1:	89 e5                	mov    ebp,esp
c0025ac3:	83 ec 10             	sub    esp,0x10
c0025ac6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ac9:	0f b6 c0             	movzx  eax,al
c0025acc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ad2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025ad5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ad8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025adc:	ee                   	out    dx,al
c0025add:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ae0:	0f b6 c0             	movzx  eax,al
c0025ae3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025ae9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025aec:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025aef:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025af3:	ee                   	out    dx,al
c0025af4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025afa:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025afe:	89 c2                	mov    edx,eax
c0025b00:	ec                   	in     al,dx
c0025b01:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025b04:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b07:	0f b6 c0             	movzx  eax,al
c0025b0a:	c1 e0 08             	shl    eax,0x8
c0025b0d:	89 c1                	mov    ecx,eax
c0025b0f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025b15:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025b19:	89 c2                	mov    edx,eax
c0025b1b:	ec                   	in     al,dx
c0025b1c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025b1f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025b22:	0f b6 c0             	movzx  eax,al
c0025b25:	09 c8                	or     eax,ecx
c0025b27:	c9                   	leave  
c0025b28:	c3                   	ret    
c0025b29:	90                   	nop

c0025b2a <PIC::eoi(unsigned char)>:
c0025b2a:	55                   	push   ebp
c0025b2b:	89 e5                	mov    ebp,esp
c0025b2d:	83 ec 14             	sub    esp,0x14
c0025b30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b33:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025b36:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025b3a:	75 1e                	jne    c0025b5a <PIC::eoi(unsigned char)+0x30>
c0025b3c:	6a 0b                	push   0xb
c0025b3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b41:	e8 7a ff ff ff       	call   c0025ac0 <PIC::getIRQReg(int)>
c0025b46:	83 c4 08             	add    esp,0x8
c0025b49:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025b4d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025b51:	25 80 00 00 00       	and    eax,0x80
c0025b56:	85 c0                	test   eax,eax
c0025b58:	74 5f                	je     c0025bb9 <PIC::eoi(unsigned char)+0x8f>
c0025b5a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025b5e:	75 2d                	jne    c0025b8d <PIC::eoi(unsigned char)+0x63>
c0025b60:	6a 0b                	push   0xb
c0025b62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b65:	e8 56 ff ff ff       	call   c0025ac0 <PIC::getIRQReg(int)>
c0025b6a:	83 c4 08             	add    esp,0x8
c0025b6d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025b71:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b74:	66 85 c0             	test   ax,ax
c0025b77:	78 14                	js     c0025b8d <PIC::eoi(unsigned char)+0x63>
c0025b79:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025b7f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025b83:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b86:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025b8a:	ee                   	out    dx,al
c0025b8b:	eb 2d                	jmp    c0025bba <PIC::eoi(unsigned char)+0x90>
c0025b8d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025b91:	76 12                	jbe    c0025ba5 <PIC::eoi(unsigned char)+0x7b>
c0025b93:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025b99:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025b9d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ba0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ba4:	ee                   	out    dx,al
c0025ba5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bab:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025baf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025bb2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025bb6:	ee                   	out    dx,al
c0025bb7:	eb 01                	jmp    c0025bba <PIC::eoi(unsigned char)+0x90>
c0025bb9:	90                   	nop
c0025bba:	c9                   	leave  
c0025bbb:	c3                   	ret    

c0025bbc <PIC::remap()>:
c0025bbc:	55                   	push   ebp
c0025bbd:	89 e5                	mov    ebp,esp
c0025bbf:	83 ec 48             	sub    esp,0x48
c0025bc2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025bc9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025bd0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025bd6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025bd9:	89 c2                	mov    edx,eax
c0025bdb:	ec                   	in     al,dx
c0025bdc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025bdf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025be2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025be5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025beb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025bee:	89 c2                	mov    edx,eax
c0025bf0:	ec                   	in     al,dx
c0025bf1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025bf4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025bf7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025bfa:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025c00:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025c04:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025c07:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025c0a:	ee                   	out    dx,al
c0025c0b:	83 ec 0c             	sub    esp,0xc
c0025c0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c11:	e8 a4 fe ff ff       	call   c0025aba <PIC::ioWait()>
c0025c16:	83 c4 10             	add    esp,0x10
c0025c19:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025c1f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025c23:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025c26:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025c29:	ee                   	out    dx,al
c0025c2a:	83 ec 0c             	sub    esp,0xc
c0025c2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c30:	e8 85 fe ff ff       	call   c0025aba <PIC::ioWait()>
c0025c35:	83 c4 10             	add    esp,0x10
c0025c38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025c3b:	0f b6 c0             	movzx  eax,al
c0025c3e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025c44:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025c47:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025c4a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025c4d:	ee                   	out    dx,al
c0025c4e:	83 ec 0c             	sub    esp,0xc
c0025c51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c54:	e8 61 fe ff ff       	call   c0025aba <PIC::ioWait()>
c0025c59:	83 c4 10             	add    esp,0x10
c0025c5c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c5f:	0f b6 c0             	movzx  eax,al
c0025c62:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025c68:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025c6b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025c6e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025c71:	ee                   	out    dx,al
c0025c72:	83 ec 0c             	sub    esp,0xc
c0025c75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c78:	e8 3d fe ff ff       	call   c0025aba <PIC::ioWait()>
c0025c7d:	83 c4 10             	add    esp,0x10
c0025c80:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025c86:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025c8a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025c8d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025c90:	ee                   	out    dx,al
c0025c91:	83 ec 0c             	sub    esp,0xc
c0025c94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c97:	e8 1e fe ff ff       	call   c0025aba <PIC::ioWait()>
c0025c9c:	83 c4 10             	add    esp,0x10
c0025c9f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025ca5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025ca9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025cac:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025caf:	ee                   	out    dx,al
c0025cb0:	83 ec 0c             	sub    esp,0xc
c0025cb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cb6:	e8 ff fd ff ff       	call   c0025aba <PIC::ioWait()>
c0025cbb:	83 c4 10             	add    esp,0x10
c0025cbe:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025cc4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025cc8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025ccb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025cce:	ee                   	out    dx,al
c0025ccf:	83 ec 0c             	sub    esp,0xc
c0025cd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cd5:	e8 e0 fd ff ff       	call   c0025aba <PIC::ioWait()>
c0025cda:	83 c4 10             	add    esp,0x10
c0025cdd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025ce3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025ce7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025cea:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ced:	ee                   	out    dx,al
c0025cee:	83 ec 0c             	sub    esp,0xc
c0025cf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cf4:	e8 c1 fd ff ff       	call   c0025aba <PIC::ioWait()>
c0025cf9:	83 c4 10             	add    esp,0x10
c0025cfc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025d00:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025d06:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025d09:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025d0c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025d0f:	ee                   	out    dx,al
c0025d10:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025d14:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025d1a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025d1d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025d20:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025d23:	ee                   	out    dx,al
c0025d24:	90                   	nop
c0025d25:	c9                   	leave  
c0025d26:	c3                   	ret    
c0025d27:	90                   	nop

c0025d28 <PIC::open(int, int, void*)>:
c0025d28:	55                   	push   ebp
c0025d29:	89 e5                	mov    ebp,esp
c0025d2b:	83 ec 18             	sub    esp,0x18
c0025d2e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025d34:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025d38:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d3b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d3f:	ee                   	out    dx,al
c0025d40:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025d46:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025d4a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d4d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d51:	ee                   	out    dx,al
c0025d52:	83 ec 0c             	sub    esp,0xc
c0025d55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d58:	e8 5f fe ff ff       	call   c0025bbc <PIC::remap()>
c0025d5d:	83 c4 10             	add    esp,0x10
c0025d60:	b8 00 00 00 00       	mov    eax,0x0
c0025d65:	c9                   	leave  
c0025d66:	c3                   	ret    
c0025d67:	90                   	nop

c0025d68 <APICTimer::close(int, int, void*)>:
c0025d68:	b8 00 00 00 00       	mov    eax,0x0
c0025d6d:	c3                   	ret    

c0025d6e <apicTimerHandler(regs*, void*)>:
c0025d6e:	83 ec 0c             	sub    esp,0xc
c0025d71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d77:	99                   	cdq    
c0025d78:	52                   	push   edx
c0025d79:	50                   	push   eax
c0025d7a:	6a 00                	push   0x0
c0025d7c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025d81:	e8 8e 07 00 00       	call   c0026514 <__udivdi3>
c0025d86:	83 c4 10             	add    esp,0x10
c0025d89:	83 ec 08             	sub    esp,0x8
c0025d8c:	52                   	push   edx
c0025d8d:	50                   	push   eax
c0025d8e:	e8 44 06 ff ff       	call   c00163d7 <timerHandler(unsigned long long)>
c0025d93:	83 c4 10             	add    esp,0x10
c0025d96:	90                   	nop
c0025d97:	83 c4 0c             	add    esp,0xc
c0025d9a:	c3                   	ret    
c0025d9b:	90                   	nop

c0025d9c <APICTimer::write(int)>:
c0025d9c:	53                   	push   ebx
c0025d9d:	83 ec 28             	sub    esp,0x28
c0025da0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025da4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025da8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025dae:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0025db3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025db9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025dbf:	83 ec 0c             	sub    esp,0xc
c0025dc2:	50                   	push   eax
c0025dc3:	e8 de f4 ff ff       	call   c00252a6 <APIC::getBase()>
c0025dc8:	83 c4 10             	add    esp,0x10
c0025dcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025dcf:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c0025dd4:	8b 15 f4 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dbf4
c0025dda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025dde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025de6:	05 e0 03 00 00       	add    eax,0x3e0
c0025deb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025df1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025df5:	05 80 03 00 00       	add    eax,0x380
c0025dfa:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025e00:	fb                   	sti    
c0025e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e05:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025e09:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025e0e:	83 d2 00             	adc    edx,0x0
c0025e11:	89 c1                	mov    ecx,eax
c0025e13:	89 d3                	mov    ebx,edx
c0025e15:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c0025e1a:	8b 15 f4 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dbf4
c0025e20:	39 c8                	cmp    eax,ecx
c0025e22:	89 d0                	mov    eax,edx
c0025e24:	19 d8                	sbb    eax,ebx
c0025e26:	73 02                	jae    c0025e2a <APICTimer::write(int)+0x8e>
c0025e28:	eb d7                	jmp    c0025e01 <APICTimer::write(int)+0x65>
c0025e2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e2e:	05 20 03 00 00       	add    eax,0x320
c0025e33:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025e39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e3d:	05 90 03 00 00       	add    eax,0x390
c0025e42:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e44:	f7 d0                	not    eax
c0025e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025e4a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025e52:	ba 00 00 00 00       	mov    edx,0x0
c0025e57:	f7 f3                	div    ebx
c0025e59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025e5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025e61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e67:	0d 00 00 02 00       	or     eax,0x20000
c0025e6c:	89 c2                	mov    edx,eax
c0025e6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e72:	05 20 03 00 00       	add    eax,0x320
c0025e77:	89 10                	mov    DWORD PTR [eax],edx
c0025e79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e7d:	05 e0 03 00 00       	add    eax,0x3e0
c0025e82:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025e88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e8c:	05 80 03 00 00       	add    eax,0x380
c0025e91:	89 c2                	mov    edx,eax
c0025e93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025e97:	89 02                	mov    DWORD PTR [edx],eax
c0025e99:	90                   	nop
c0025e9a:	83 c4 28             	add    esp,0x28
c0025e9d:	5b                   	pop    ebx
c0025e9e:	c3                   	ret    
c0025e9f:	90                   	nop

c0025ea0 <APICTimer::open(int, int, void*)>:
c0025ea0:	57                   	push   edi
c0025ea1:	56                   	push   esi
c0025ea2:	53                   	push   ebx
c0025ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ea9:	83 c0 24             	add    eax,0x24
c0025eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0025eae:	83 ec 08             	sub    esp,0x8
c0025eb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025eb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025eb9:	ff d0                	call   eax
c0025ebb:	83 c4 10             	add    esp,0x10
c0025ebe:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0025ec3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ec9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ecf:	83 ec 0c             	sub    esp,0xc
c0025ed2:	50                   	push   eax
c0025ed3:	e8 ce f3 ff ff       	call   c00252a6 <APIC::getBase()>
c0025ed8:	83 c4 10             	add    esp,0x10
c0025edb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025eeb:	0f b6 f8             	movzx  edi,al
c0025eee:	89 d0                	mov    eax,edx
c0025ef0:	ba 00 00 00 00       	mov    edx,0x0
c0025ef5:	89 c1                	mov    ecx,eax
c0025ef7:	80 e5 ff             	and    ch,0xff
c0025efa:	89 cb                	mov    ebx,ecx
c0025efc:	0f b6 f2             	movzx  esi,dl
c0025eff:	89 d8                	mov    eax,ebx
c0025f01:	89 f2                	mov    edx,esi
c0025f03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f07:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025f0a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025f0e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025f12:	83 e0 00             	and    eax,0x0
c0025f15:	09 d0                	or     eax,edx
c0025f17:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f25:	8d 50 01             	lea    edx,[eax+0x1]
c0025f28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f2c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025f32:	0f b6 d0             	movzx  edx,al
c0025f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f39:	83 c2 08             	add    edx,0x8
c0025f3c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025f40:	0f b6 c9             	movzx  ecx,cl
c0025f43:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025f49:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f51:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025f55:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025f63:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025f69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025f6d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025f73:	83 ec 0c             	sub    esp,0xc
c0025f76:	51                   	push   ecx
c0025f77:	6a 01                	push   0x1
c0025f79:	68 6e 5d 02 c0       	push   0xc0025d6e
c0025f7e:	52                   	push   edx
c0025f7f:	50                   	push   eax
c0025f80:	e8 37 d9 fe ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025f85:	83 c4 20             	add    esp,0x20
c0025f88:	89 c2                	mov    edx,eax
c0025f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f8e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025f94:	b8 00 00 00 00       	mov    eax,0x0
c0025f99:	5b                   	pop    ebx
c0025f9a:	5e                   	pop    esi
c0025f9b:	5f                   	pop    edi
c0025f9c:	c3                   	ret    
c0025f9d:	90                   	nop

c0025f9e <APICTimer::APICTimer()>:
c0025f9e:	83 ec 0c             	sub    esp,0xc
c0025fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa5:	83 ec 08             	sub    esp,0x8
c0025fa8:	68 c4 c2 02 c0       	push   0xc002c2c4
c0025fad:	50                   	push   eax
c0025fae:	e8 95 03 ff ff       	call   c0016348 <Timer::Timer(char const*)>
c0025fb3:	83 c4 10             	add    esp,0x10
c0025fb6:	ba d8 c2 02 c0       	mov    edx,0xc002c2d8
c0025fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbf:	89 10                	mov    DWORD PTR [eax],edx
c0025fc1:	90                   	nop
c0025fc2:	83 c4 0c             	add    esp,0xc
c0025fc5:	c3                   	ret    

c0025fc6 <PIT::write(int)>:
c0025fc6:	83 ec 10             	sub    esp,0x10
c0025fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fcd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025fd1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025fd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025fdb:	a3 24 19 03 c0       	mov    ds:0xc0031924,eax
c0025fe0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025fe5:	99                   	cdq    
c0025fe6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025fea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025fee:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025ff5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025ffa:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025ffe:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026003:	ee                   	out    dx,al
c0026004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026008:	0f b6 c0             	movzx  eax,al
c002600b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026012:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026016:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002601a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002601f:	ee                   	out    dx,al
c0026020:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026024:	c1 f8 08             	sar    eax,0x8
c0026027:	0f b6 c0             	movzx  eax,al
c002602a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026031:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026035:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026039:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002603e:	ee                   	out    dx,al
c002603f:	90                   	nop
c0026040:	83 c4 10             	add    esp,0x10
c0026043:	c3                   	ret    

c0026044 <pitHandler(regs*, void*)>:
c0026044:	83 ec 0c             	sub    esp,0xc
c0026047:	a1 24 19 03 c0       	mov    eax,ds:0xc0031924
c002604c:	99                   	cdq    
c002604d:	52                   	push   edx
c002604e:	50                   	push   eax
c002604f:	6a 00                	push   0x0
c0026051:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026056:	e8 b9 04 00 00       	call   c0026514 <__udivdi3>
c002605b:	83 c4 10             	add    esp,0x10
c002605e:	83 ec 08             	sub    esp,0x8
c0026061:	52                   	push   edx
c0026062:	50                   	push   eax
c0026063:	e8 6f 03 ff ff       	call   c00163d7 <timerHandler(unsigned long long)>
c0026068:	83 c4 10             	add    esp,0x10
c002606b:	90                   	nop
c002606c:	83 c4 0c             	add    esp,0xc
c002606f:	c3                   	ret    

c0026070 <PIT::open(int, int, void*)>:
c0026070:	83 ec 0c             	sub    esp,0xc
c0026073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026077:	8b 00                	mov    eax,DWORD PTR [eax]
c0026079:	83 c0 24             	add    eax,0x24
c002607c:	8b 00                	mov    eax,DWORD PTR [eax]
c002607e:	83 ec 08             	sub    esp,0x8
c0026081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026089:	ff d0                	call   eax
c002608b:	83 c4 10             	add    esp,0x10
c002608e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026092:	83 ec 0c             	sub    esp,0xc
c0026095:	6a 00                	push   0x0
c0026097:	6a 01                	push   0x1
c0026099:	68 44 60 02 c0       	push   0xc0026044
c002609e:	6a 00                	push   0x0
c00260a0:	50                   	push   eax
c00260a1:	e8 16 d8 fe ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00260a6:	83 c4 20             	add    esp,0x20
c00260a9:	89 c2                	mov    edx,eax
c00260ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260af:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00260b5:	b8 00 00 00 00       	mov    eax,0x0
c00260ba:	83 c4 0c             	add    esp,0xc
c00260bd:	c3                   	ret    

c00260be <PIT::close(int, int, void*)>:
c00260be:	83 ec 0c             	sub    esp,0xc
c00260c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00260cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d3:	6a 01                	push   0x1
c00260d5:	68 44 60 02 c0       	push   0xc0026044
c00260da:	6a 00                	push   0x0
c00260dc:	50                   	push   eax
c00260dd:	e8 24 d8 fe ff       	call   c0013906 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00260e2:	83 c4 10             	add    esp,0x10
c00260e5:	b8 00 00 00 00       	mov    eax,0x0
c00260ea:	83 c4 0c             	add    esp,0xc
c00260ed:	c3                   	ret    

c00260ee <PIT::PIT()>:
c00260ee:	83 ec 0c             	sub    esp,0xc
c00260f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f5:	83 ec 08             	sub    esp,0x8
c00260f8:	68 00 c3 02 c0       	push   0xc002c300
c00260fd:	50                   	push   eax
c00260fe:	e8 45 02 ff ff       	call   c0016348 <Timer::Timer(char const*)>
c0026103:	83 c4 10             	add    esp,0x10
c0026106:	ba 28 c3 02 c0       	mov    edx,0xc002c328
c002610b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002610f:	89 10                	mov    DWORD PTR [eax],edx
c0026111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026115:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002611b:	0f b6 d0             	movzx  edx,al
c002611e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026122:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026133:	0f b6 d0             	movzx  edx,al
c0026136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002613a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002613f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026143:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026149:	8d 50 01             	lea    edx,[eax+0x1]
c002614c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026150:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026156:	0f b6 d0             	movzx  edx,al
c0026159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002615d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026161:	83 e1 3f             	and    ecx,0x3f
c0026164:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026168:	90                   	nop
c0026169:	83 c4 0c             	add    esp,0xc
c002616c:	c3                   	ret    
c002616d:	66 90                	xchg   ax,ax
c002616f:	90                   	nop

c0026170 <avxDetect>:
c0026170:	b8 00 00 00 00       	mov    eax,0x0
c0026175:	c3                   	ret    

c0026176 <avxSave>:
c0026176:	c3                   	ret    

c0026177 <avxLoad>:
c0026177:	c3                   	ret    

c0026178 <avxInit>:
c0026178:	c3                   	ret    

c0026179 <avxClose>:
c0026179:	c3                   	ret    

c002617a <wouldSheSayYes>:
c002617a:	c3                   	ret    
c002617b:	49                   	dec    ecx
c002617c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026180:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026184:	75 20                	jne    c00261a6 <sseDetect.noSSE+0x1>
c0026186:	4e                   	dec    esi
c0026187:	79 61                	jns    c00261ea <x87Detect+0x14>
c0026189:	68 2e 2e 2e 00       	push   0x2e2e2e
c002618e:	66 90                	xchg   ax,ax

c0026190 <absolutelyNoChanceInHell>:
c0026190:	b8 01 00 00 00       	mov    eax,0x1
c0026195:	0f a2                	cpuid  
c0026197:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002619d:	74 06                	je     c00261a5 <sseDetect.noSSE>
c002619f:	b8 01 00 00 00       	mov    eax,0x1
c00261a4:	c3                   	ret    

c00261a5 <sseDetect.noSSE>:
c00261a5:	31 c0                	xor    eax,eax
c00261a7:	c3                   	ret    

c00261a8 <sseSave>:
c00261a8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00261ad:	c3                   	ret    

c00261ae <sseLoad>:
c00261ae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00261b3:	c3                   	ret    

c00261b4 <sseInit>:
c00261b4:	e8 49 00 00 00       	call   c0026202 <x87Init>
c00261b9:	0f 20 e0             	mov    eax,cr4
c00261bc:	66 0d 00 06          	or     ax,0x600
c00261c0:	0f 22 e0             	mov    cr4,eax
c00261c3:	c3                   	ret    

c00261c4 <sseClose>:
c00261c4:	c3                   	ret    
c00261c5:	66 90                	xchg   ax,ax
c00261c7:	66 90                	xchg   ax,ax
c00261c9:	66 90                	xchg   ax,ax
c00261cb:	66 90                	xchg   ax,ax
c00261cd:	66 90                	xchg   ax,ax
c00261cf:	90                   	nop

c00261d0 <value_37F>:
c00261d0:	7f 03                	jg     c00261d5 <value_37A+0x1>

c00261d2 <value_37E>:
c00261d2:	7e 03                	jle    c00261d7 <x87Detect+0x1>

c00261d4 <value_37A>:
c00261d4:	7a 03                	jp     c00261d9 <x87Detect+0x3>

c00261d6 <x87Detect>:
c00261d6:	b8 01 00 00 00       	mov    eax,0x1
c00261db:	0f a2                	cpuid  
c00261dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00261e3:	74 06                	je     c00261eb <x87Detect.nox87>
c00261e5:	b8 01 00 00 00       	mov    eax,0x1
c00261ea:	c3                   	ret    

c00261eb <x87Detect.nox87>:
c00261eb:	b8 00 00 00 00       	mov    eax,0x0
c00261f0:	c3                   	ret    

c00261f1 <x87Save>:
c00261f1:	55                   	push   ebp
c00261f2:	89 e5                	mov    ebp,esp
c00261f4:	9b dd 75 08          	fsave  [ebp+0x8]
c00261f8:	c9                   	leave  
c00261f9:	c3                   	ret    

c00261fa <x87Load>:
c00261fa:	55                   	push   ebp
c00261fb:	89 e5                	mov    ebp,esp
c00261fd:	dd 65 08             	frstor [ebp+0x8]
c0026200:	c9                   	leave  
c0026201:	c3                   	ret    

c0026202 <x87Init>:
c0026202:	9b db e3             	finit  
c0026205:	0f 20 c0             	mov    eax,cr0
c0026208:	66 25 fb ff          	and    ax,0xfffb
c002620c:	66 0d 22 00          	or     ax,0x22
c0026210:	0f 22 c0             	mov    cr0,eax
c0026213:	0f 06                	clts   
c0026215:	d9 2d d4 61 02 c0    	fldcw  WORD PTR ds:0xc00261d4
c002621b:	c3                   	ret    

c002621c <x87Close>:
c002621c:	c3                   	ret    
c002621d:	66 90                	xchg   ax,ax
c002621f:	90                   	nop

c0026220 <__do_global_ctors_aux>:
c0026220:	a1 14 8e 02 c0       	mov    eax,ds:0xc0028e14
c0026225:	83 f8 ff             	cmp    eax,0xffffffff
c0026228:	74 1a                	je     c0026244 <__do_global_ctors_aux+0x24>
c002622a:	55                   	push   ebp
c002622b:	89 e5                	mov    ebp,esp
c002622d:	53                   	push   ebx
c002622e:	52                   	push   edx
c002622f:	bb 14 8e 02 c0       	mov    ebx,0xc0028e14
c0026234:	ff d0                	call   eax
c0026236:	83 eb 04             	sub    ebx,0x4
c0026239:	8b 03                	mov    eax,DWORD PTR [ebx]
c002623b:	83 f8 ff             	cmp    eax,0xffffffff
c002623e:	75 f4                	jne    c0026234 <__do_global_ctors_aux+0x14>
c0026240:	58                   	pop    eax
c0026241:	5b                   	pop    ebx
c0026242:	5d                   	pop    ebp
c0026243:	c3                   	ret    
c0026244:	c3                   	ret    
c0026245:	66 90                	xchg   ax,ax
c0026247:	90                   	nop

c0026248 <__divdi3>:
c0026248:	55                   	push   ebp
c0026249:	57                   	push   edi
c002624a:	56                   	push   esi
c002624b:	53                   	push   ebx
c002624c:	83 ec 1c             	sub    esp,0x1c
c002624f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026253:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026257:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002625a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002625e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026262:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026266:	85 db                	test   ebx,ebx
c0026268:	0f 88 8e 00 00 00    	js     c00262fc <__divdi3+0xb4>
c002626e:	89 dd                	mov    ebp,ebx
c0026270:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026278:	89 d3                	mov    ebx,edx
c002627a:	85 d2                	test   edx,edx
c002627c:	79 0d                	jns    c002628b <__divdi3+0x43>
c002627e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026282:	f7 d8                	neg    eax
c0026284:	83 d2 00             	adc    edx,0x0
c0026287:	f7 da                	neg    edx
c0026289:	89 d3                	mov    ebx,edx
c002628b:	89 c7                	mov    edi,eax
c002628d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026290:	85 db                	test   ebx,ebx
c0026292:	75 48                	jne    c00262dc <__divdi3+0x94>
c0026294:	39 ef                	cmp    edi,ebp
c0026296:	76 24                	jbe    c00262bc <__divdi3+0x74>
c0026298:	89 ea                	mov    edx,ebp
c002629a:	f7 f7                	div    edi
c002629c:	89 c1                	mov    ecx,eax
c002629e:	31 f6                	xor    esi,esi
c00262a0:	89 c8                	mov    eax,ecx
c00262a2:	89 f2                	mov    edx,esi
c00262a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00262a8:	85 c9                	test   ecx,ecx
c00262aa:	74 07                	je     c00262b3 <__divdi3+0x6b>
c00262ac:	f7 d8                	neg    eax
c00262ae:	83 d2 00             	adc    edx,0x0
c00262b1:	f7 da                	neg    edx
c00262b3:	83 c4 1c             	add    esp,0x1c
c00262b6:	5b                   	pop    ebx
c00262b7:	5e                   	pop    esi
c00262b8:	5f                   	pop    edi
c00262b9:	5d                   	pop    ebp
c00262ba:	c3                   	ret    
c00262bb:	90                   	nop
c00262bc:	85 ff                	test   edi,edi
c00262be:	75 0b                	jne    c00262cb <__divdi3+0x83>
c00262c0:	b8 01 00 00 00       	mov    eax,0x1
c00262c5:	31 d2                	xor    edx,edx
c00262c7:	f7 f3                	div    ebx
c00262c9:	89 c7                	mov    edi,eax
c00262cb:	31 d2                	xor    edx,edx
c00262cd:	89 e8                	mov    eax,ebp
c00262cf:	f7 f7                	div    edi
c00262d1:	89 c6                	mov    esi,eax
c00262d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00262d6:	f7 f7                	div    edi
c00262d8:	89 c1                	mov    ecx,eax
c00262da:	eb c4                	jmp    c00262a0 <__divdi3+0x58>
c00262dc:	39 eb                	cmp    ebx,ebp
c00262de:	77 3c                	ja     c002631c <__divdi3+0xd4>
c00262e0:	0f bd f3             	bsr    esi,ebx
c00262e3:	83 f6 1f             	xor    esi,0x1f
c00262e6:	75 40                	jne    c0026328 <__divdi3+0xe0>
c00262e8:	39 eb                	cmp    ebx,ebp
c00262ea:	72 09                	jb     c00262f5 <__divdi3+0xad>
c00262ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00262ef:	0f 87 97 00 00 00    	ja     c002638c <__divdi3+0x144>
c00262f5:	b9 01 00 00 00       	mov    ecx,0x1
c00262fa:	eb a4                	jmp    c00262a0 <__divdi3+0x58>
c00262fc:	f7 d9                	neg    ecx
c00262fe:	83 d3 00             	adc    ebx,0x0
c0026301:	f7 db                	neg    ebx
c0026303:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026306:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002630a:	89 dd                	mov    ebp,ebx
c002630c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026314:	e9 5f ff ff ff       	jmp    c0026278 <__divdi3+0x30>
c0026319:	8d 76 00             	lea    esi,[esi+0x0]
c002631c:	31 f6                	xor    esi,esi
c002631e:	31 c9                	xor    ecx,ecx
c0026320:	e9 7b ff ff ff       	jmp    c00262a0 <__divdi3+0x58>
c0026325:	8d 76 00             	lea    esi,[esi+0x0]
c0026328:	b8 20 00 00 00       	mov    eax,0x20
c002632d:	29 f0                	sub    eax,esi
c002632f:	89 f1                	mov    ecx,esi
c0026331:	d3 e3                	shl    ebx,cl
c0026333:	89 fa                	mov    edx,edi
c0026335:	88 c1                	mov    cl,al
c0026337:	d3 ea                	shr    edx,cl
c0026339:	09 da                	or     edx,ebx
c002633b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002633f:	89 f1                	mov    ecx,esi
c0026341:	d3 e7                	shl    edi,cl
c0026343:	89 eb                	mov    ebx,ebp
c0026345:	88 c1                	mov    cl,al
c0026347:	d3 eb                	shr    ebx,cl
c0026349:	89 f1                	mov    ecx,esi
c002634b:	d3 e5                	shl    ebp,cl
c002634d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026350:	88 c1                	mov    cl,al
c0026352:	d3 ea                	shr    edx,cl
c0026354:	09 d5                	or     ebp,edx
c0026356:	89 e8                	mov    eax,ebp
c0026358:	89 da                	mov    edx,ebx
c002635a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002635e:	89 d3                	mov    ebx,edx
c0026360:	89 c5                	mov    ebp,eax
c0026362:	f7 e7                	mul    edi
c0026364:	39 d3                	cmp    ebx,edx
c0026366:	72 18                	jb     c0026380 <__divdi3+0x138>
c0026368:	74 0a                	je     c0026374 <__divdi3+0x12c>
c002636a:	89 e9                	mov    ecx,ebp
c002636c:	31 f6                	xor    esi,esi
c002636e:	e9 2d ff ff ff       	jmp    c00262a0 <__divdi3+0x58>
c0026373:	90                   	nop
c0026374:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026377:	89 f1                	mov    ecx,esi
c0026379:	d3 e7                	shl    edi,cl
c002637b:	39 c7                	cmp    edi,eax
c002637d:	73 eb                	jae    c002636a <__divdi3+0x122>
c002637f:	90                   	nop
c0026380:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026383:	31 f6                	xor    esi,esi
c0026385:	e9 16 ff ff ff       	jmp    c00262a0 <__divdi3+0x58>
c002638a:	66 90                	xchg   ax,ax
c002638c:	31 c9                	xor    ecx,ecx
c002638e:	e9 0d ff ff ff       	jmp    c00262a0 <__divdi3+0x58>
c0026393:	90                   	nop

c0026394 <__moddi3>:
c0026394:	55                   	push   ebp
c0026395:	57                   	push   edi
c0026396:	56                   	push   esi
c0026397:	53                   	push   ebx
c0026398:	83 ec 2c             	sub    esp,0x2c
c002639b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002639f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00263a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00263a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00263ab:	85 db                	test   ebx,ebx
c00263ad:	0f 88 85 00 00 00    	js     c0026438 <__moddi3+0xa4>
c00263b3:	89 de                	mov    esi,ebx
c00263b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00263bd:	89 d7                	mov    edi,edx
c00263bf:	85 d2                	test   edx,edx
c00263c1:	79 09                	jns    c00263cc <__moddi3+0x38>
c00263c3:	f7 d8                	neg    eax
c00263c5:	83 d2 00             	adc    edx,0x0
c00263c8:	f7 da                	neg    edx
c00263ca:	89 d7                	mov    edi,edx
c00263cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263d0:	89 cd                	mov    ebp,ecx
c00263d2:	85 ff                	test   edi,edi
c00263d4:	75 52                	jne    c0026428 <__moddi3+0x94>
c00263d6:	89 c3                	mov    ebx,eax
c00263d8:	39 f0                	cmp    eax,esi
c00263da:	76 24                	jbe    c0026400 <__moddi3+0x6c>
c00263dc:	89 c8                	mov    eax,ecx
c00263de:	89 f2                	mov    edx,esi
c00263e0:	f7 f3                	div    ebx
c00263e2:	89 d6                	mov    esi,edx
c00263e4:	89 f0                	mov    eax,esi
c00263e6:	31 d2                	xor    edx,edx
c00263e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263ec:	85 c9                	test   ecx,ecx
c00263ee:	74 07                	je     c00263f7 <__moddi3+0x63>
c00263f0:	f7 d8                	neg    eax
c00263f2:	83 d2 00             	adc    edx,0x0
c00263f5:	f7 da                	neg    edx
c00263f7:	83 c4 2c             	add    esp,0x2c
c00263fa:	5b                   	pop    ebx
c00263fb:	5e                   	pop    esi
c00263fc:	5f                   	pop    edi
c00263fd:	5d                   	pop    ebp
c00263fe:	c3                   	ret    
c00263ff:	90                   	nop
c0026400:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026404:	85 db                	test   ebx,ebx
c0026406:	75 0d                	jne    c0026415 <__moddi3+0x81>
c0026408:	b8 01 00 00 00       	mov    eax,0x1
c002640d:	31 d2                	xor    edx,edx
c002640f:	f7 f7                	div    edi
c0026411:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026415:	89 f0                	mov    eax,esi
c0026417:	31 d2                	xor    edx,edx
c0026419:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002641d:	f7 f7                	div    edi
c002641f:	89 e8                	mov    eax,ebp
c0026421:	f7 f7                	div    edi
c0026423:	89 d6                	mov    esi,edx
c0026425:	eb bd                	jmp    c00263e4 <__moddi3+0x50>
c0026427:	90                   	nop
c0026428:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002642c:	39 f7                	cmp    edi,esi
c002642e:	76 20                	jbe    c0026450 <__moddi3+0xbc>
c0026430:	89 c8                	mov    eax,ecx
c0026432:	89 f2                	mov    edx,esi
c0026434:	eb b2                	jmp    c00263e8 <__moddi3+0x54>
c0026436:	66 90                	xchg   ax,ax
c0026438:	f7 d9                	neg    ecx
c002643a:	83 d3 00             	adc    ebx,0x0
c002643d:	f7 db                	neg    ebx
c002643f:	89 de                	mov    esi,ebx
c0026441:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026449:	e9 6f ff ff ff       	jmp    c00263bd <__moddi3+0x29>
c002644e:	66 90                	xchg   ax,ax
c0026450:	0f bd c7             	bsr    eax,edi
c0026453:	83 f0 1f             	xor    eax,0x1f
c0026456:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002645a:	75 24                	jne    c0026480 <__moddi3+0xec>
c002645c:	39 f7                	cmp    edi,esi
c002645e:	72 06                	jb     c0026466 <__moddi3+0xd2>
c0026460:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026464:	77 0c                	ja     c0026472 <__moddi3+0xde>
c0026466:	89 e9                	mov    ecx,ebp
c0026468:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002646c:	19 fe                	sbb    esi,edi
c002646e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026476:	89 f2                	mov    edx,esi
c0026478:	e9 6b ff ff ff       	jmp    c00263e8 <__moddi3+0x54>
c002647d:	8d 76 00             	lea    esi,[esi+0x0]
c0026480:	b8 20 00 00 00       	mov    eax,0x20
c0026485:	89 c2                	mov    edx,eax
c0026487:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002648b:	29 da                	sub    edx,ebx
c002648d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026491:	88 d9                	mov    cl,bl
c0026493:	d3 e7                	shl    edi,cl
c0026495:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026499:	88 d1                	mov    cl,dl
c002649b:	d3 e8                	shr    eax,cl
c002649d:	09 c7                	or     edi,eax
c002649f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00264a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00264a7:	89 d8                	mov    eax,ebx
c00264a9:	88 d9                	mov    cl,bl
c00264ab:	d3 e7                	shl    edi,cl
c00264ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00264b1:	89 f3                	mov    ebx,esi
c00264b3:	88 d1                	mov    cl,dl
c00264b5:	d3 eb                	shr    ebx,cl
c00264b7:	89 c7                	mov    edi,eax
c00264b9:	88 c1                	mov    cl,al
c00264bb:	d3 e6                	shl    esi,cl
c00264bd:	89 e8                	mov    eax,ebp
c00264bf:	88 d1                	mov    cl,dl
c00264c1:	d3 e8                	shr    eax,cl
c00264c3:	09 f0                	or     eax,esi
c00264c5:	89 f9                	mov    ecx,edi
c00264c7:	d3 e5                	shl    ebp,cl
c00264c9:	89 da                	mov    edx,ebx
c00264cb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00264cf:	89 d3                	mov    ebx,edx
c00264d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00264d5:	89 c6                	mov    esi,eax
c00264d7:	89 d1                	mov    ecx,edx
c00264d9:	39 d3                	cmp    ebx,edx
c00264db:	72 27                	jb     c0026504 <__moddi3+0x170>
c00264dd:	74 21                	je     c0026500 <__moddi3+0x16c>
c00264df:	29 f5                	sub    ebp,esi
c00264e1:	19 cb                	sbb    ebx,ecx
c00264e3:	89 de                	mov    esi,ebx
c00264e5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00264e9:	d3 e6                	shl    esi,cl
c00264eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00264ef:	89 f9                	mov    ecx,edi
c00264f1:	d3 ed                	shr    ebp,cl
c00264f3:	09 ee                	or     esi,ebp
c00264f5:	89 f0                	mov    eax,esi
c00264f7:	d3 eb                	shr    ebx,cl
c00264f9:	89 da                	mov    edx,ebx
c00264fb:	e9 e8 fe ff ff       	jmp    c00263e8 <__moddi3+0x54>
c0026500:	39 c5                	cmp    ebp,eax
c0026502:	73 db                	jae    c00264df <__moddi3+0x14b>
c0026504:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026508:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002650c:	89 d1                	mov    ecx,edx
c002650e:	89 c6                	mov    esi,eax
c0026510:	eb cd                	jmp    c00264df <__moddi3+0x14b>
c0026512:	66 90                	xchg   ax,ax

c0026514 <__udivdi3>:
c0026514:	55                   	push   ebp
c0026515:	57                   	push   edi
c0026516:	56                   	push   esi
c0026517:	53                   	push   ebx
c0026518:	83 ec 1c             	sub    esp,0x1c
c002651b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002651f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026523:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026527:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002652b:	85 d2                	test   edx,edx
c002652d:	75 41                	jne    c0026570 <__udivdi3+0x5c>
c002652f:	39 f7                	cmp    edi,esi
c0026531:	76 15                	jbe    c0026548 <__udivdi3+0x34>
c0026533:	89 e8                	mov    eax,ebp
c0026535:	89 f2                	mov    edx,esi
c0026537:	f7 f7                	div    edi
c0026539:	31 db                	xor    ebx,ebx
c002653b:	89 da                	mov    edx,ebx
c002653d:	83 c4 1c             	add    esp,0x1c
c0026540:	5b                   	pop    ebx
c0026541:	5e                   	pop    esi
c0026542:	5f                   	pop    edi
c0026543:	5d                   	pop    ebp
c0026544:	c3                   	ret    
c0026545:	8d 76 00             	lea    esi,[esi+0x0]
c0026548:	89 f9                	mov    ecx,edi
c002654a:	85 ff                	test   edi,edi
c002654c:	75 0b                	jne    c0026559 <__udivdi3+0x45>
c002654e:	b8 01 00 00 00       	mov    eax,0x1
c0026553:	31 d2                	xor    edx,edx
c0026555:	f7 f7                	div    edi
c0026557:	89 c1                	mov    ecx,eax
c0026559:	31 d2                	xor    edx,edx
c002655b:	89 f0                	mov    eax,esi
c002655d:	f7 f1                	div    ecx
c002655f:	89 c3                	mov    ebx,eax
c0026561:	89 e8                	mov    eax,ebp
c0026563:	f7 f1                	div    ecx
c0026565:	89 da                	mov    edx,ebx
c0026567:	83 c4 1c             	add    esp,0x1c
c002656a:	5b                   	pop    ebx
c002656b:	5e                   	pop    esi
c002656c:	5f                   	pop    edi
c002656d:	5d                   	pop    ebp
c002656e:	c3                   	ret    
c002656f:	90                   	nop
c0026570:	39 f2                	cmp    edx,esi
c0026572:	77 1c                	ja     c0026590 <__udivdi3+0x7c>
c0026574:	0f bd da             	bsr    ebx,edx
c0026577:	83 f3 1f             	xor    ebx,0x1f
c002657a:	75 24                	jne    c00265a0 <__udivdi3+0x8c>
c002657c:	39 f2                	cmp    edx,esi
c002657e:	72 08                	jb     c0026588 <__udivdi3+0x74>
c0026580:	39 ef                	cmp    edi,ebp
c0026582:	0f 87 84 00 00 00    	ja     c002660c <__udivdi3+0xf8>
c0026588:	b8 01 00 00 00       	mov    eax,0x1
c002658d:	eb ac                	jmp    c002653b <__udivdi3+0x27>
c002658f:	90                   	nop
c0026590:	31 db                	xor    ebx,ebx
c0026592:	31 c0                	xor    eax,eax
c0026594:	89 da                	mov    edx,ebx
c0026596:	83 c4 1c             	add    esp,0x1c
c0026599:	5b                   	pop    ebx
c002659a:	5e                   	pop    esi
c002659b:	5f                   	pop    edi
c002659c:	5d                   	pop    ebp
c002659d:	c3                   	ret    
c002659e:	66 90                	xchg   ax,ax
c00265a0:	b8 20 00 00 00       	mov    eax,0x20
c00265a5:	29 d8                	sub    eax,ebx
c00265a7:	88 d9                	mov    cl,bl
c00265a9:	d3 e2                	shl    edx,cl
c00265ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00265af:	89 fa                	mov    edx,edi
c00265b1:	88 c1                	mov    cl,al
c00265b3:	d3 ea                	shr    edx,cl
c00265b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00265b9:	09 d1                	or     ecx,edx
c00265bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00265bf:	88 d9                	mov    cl,bl
c00265c1:	d3 e7                	shl    edi,cl
c00265c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265c7:	89 f7                	mov    edi,esi
c00265c9:	88 c1                	mov    cl,al
c00265cb:	d3 ef                	shr    edi,cl
c00265cd:	88 d9                	mov    cl,bl
c00265cf:	d3 e6                	shl    esi,cl
c00265d1:	89 ea                	mov    edx,ebp
c00265d3:	88 c1                	mov    cl,al
c00265d5:	d3 ea                	shr    edx,cl
c00265d7:	09 d6                	or     esi,edx
c00265d9:	89 f0                	mov    eax,esi
c00265db:	89 fa                	mov    edx,edi
c00265dd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00265e1:	89 d7                	mov    edi,edx
c00265e3:	89 c6                	mov    esi,eax
c00265e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00265e9:	39 d7                	cmp    edi,edx
c00265eb:	72 13                	jb     c0026600 <__udivdi3+0xec>
c00265ed:	74 09                	je     c00265f8 <__udivdi3+0xe4>
c00265ef:	89 f0                	mov    eax,esi
c00265f1:	31 db                	xor    ebx,ebx
c00265f3:	e9 43 ff ff ff       	jmp    c002653b <__udivdi3+0x27>
c00265f8:	88 d9                	mov    cl,bl
c00265fa:	d3 e5                	shl    ebp,cl
c00265fc:	39 c5                	cmp    ebp,eax
c00265fe:	73 ef                	jae    c00265ef <__udivdi3+0xdb>
c0026600:	8d 46 ff             	lea    eax,[esi-0x1]
c0026603:	31 db                	xor    ebx,ebx
c0026605:	e9 31 ff ff ff       	jmp    c002653b <__udivdi3+0x27>
c002660a:	66 90                	xchg   ax,ax
c002660c:	31 c0                	xor    eax,eax
c002660e:	e9 28 ff ff ff       	jmp    c002653b <__udivdi3+0x27>
c0026613:	90                   	nop

c0026614 <__umoddi3>:
c0026614:	55                   	push   ebp
c0026615:	57                   	push   edi
c0026616:	56                   	push   esi
c0026617:	53                   	push   ebx
c0026618:	83 ec 1c             	sub    esp,0x1c
c002661b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002661f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026623:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026627:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002662b:	89 da                	mov    edx,ebx
c002662d:	85 c0                	test   eax,eax
c002662f:	75 37                	jne    c0026668 <__umoddi3+0x54>
c0026631:	39 df                	cmp    edi,ebx
c0026633:	76 13                	jbe    c0026648 <__umoddi3+0x34>
c0026635:	89 f0                	mov    eax,esi
c0026637:	f7 f7                	div    edi
c0026639:	89 d0                	mov    eax,edx
c002663b:	31 d2                	xor    edx,edx
c002663d:	83 c4 1c             	add    esp,0x1c
c0026640:	5b                   	pop    ebx
c0026641:	5e                   	pop    esi
c0026642:	5f                   	pop    edi
c0026643:	5d                   	pop    ebp
c0026644:	c3                   	ret    
c0026645:	8d 76 00             	lea    esi,[esi+0x0]
c0026648:	89 fd                	mov    ebp,edi
c002664a:	85 ff                	test   edi,edi
c002664c:	75 0b                	jne    c0026659 <__umoddi3+0x45>
c002664e:	b8 01 00 00 00       	mov    eax,0x1
c0026653:	31 d2                	xor    edx,edx
c0026655:	f7 f7                	div    edi
c0026657:	89 c5                	mov    ebp,eax
c0026659:	89 d8                	mov    eax,ebx
c002665b:	31 d2                	xor    edx,edx
c002665d:	f7 f5                	div    ebp
c002665f:	89 f0                	mov    eax,esi
c0026661:	f7 f5                	div    ebp
c0026663:	89 d0                	mov    eax,edx
c0026665:	eb d4                	jmp    c002663b <__umoddi3+0x27>
c0026667:	90                   	nop
c0026668:	89 f1                	mov    ecx,esi
c002666a:	39 d8                	cmp    eax,ebx
c002666c:	76 0a                	jbe    c0026678 <__umoddi3+0x64>
c002666e:	89 f0                	mov    eax,esi
c0026670:	83 c4 1c             	add    esp,0x1c
c0026673:	5b                   	pop    ebx
c0026674:	5e                   	pop    esi
c0026675:	5f                   	pop    edi
c0026676:	5d                   	pop    ebp
c0026677:	c3                   	ret    
c0026678:	0f bd e8             	bsr    ebp,eax
c002667b:	83 f5 1f             	xor    ebp,0x1f
c002667e:	75 1c                	jne    c002669c <__umoddi3+0x88>
c0026680:	39 d8                	cmp    eax,ebx
c0026682:	72 04                	jb     c0026688 <__umoddi3+0x74>
c0026684:	39 f7                	cmp    edi,esi
c0026686:	77 08                	ja     c0026690 <__umoddi3+0x7c>
c0026688:	89 da                	mov    edx,ebx
c002668a:	29 fe                	sub    esi,edi
c002668c:	19 c2                	sbb    edx,eax
c002668e:	89 f1                	mov    ecx,esi
c0026690:	89 c8                	mov    eax,ecx
c0026692:	83 c4 1c             	add    esp,0x1c
c0026695:	5b                   	pop    ebx
c0026696:	5e                   	pop    esi
c0026697:	5f                   	pop    edi
c0026698:	5d                   	pop    ebp
c0026699:	c3                   	ret    
c002669a:	66 90                	xchg   ax,ax
c002669c:	ba 20 00 00 00       	mov    edx,0x20
c00266a1:	29 ea                	sub    edx,ebp
c00266a3:	89 e9                	mov    ecx,ebp
c00266a5:	d3 e0                	shl    eax,cl
c00266a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00266ab:	89 f8                	mov    eax,edi
c00266ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00266b1:	88 d1                	mov    cl,dl
c00266b3:	d3 e8                	shr    eax,cl
c00266b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266b9:	09 c1                	or     ecx,eax
c00266bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00266bf:	89 e9                	mov    ecx,ebp
c00266c1:	d3 e7                	shl    edi,cl
c00266c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266c7:	89 d8                	mov    eax,ebx
c00266c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00266cd:	88 d1                	mov    cl,dl
c00266cf:	d3 e8                	shr    eax,cl
c00266d1:	89 c7                	mov    edi,eax
c00266d3:	89 e9                	mov    ecx,ebp
c00266d5:	d3 e3                	shl    ebx,cl
c00266d7:	89 f0                	mov    eax,esi
c00266d9:	88 d1                	mov    cl,dl
c00266db:	d3 e8                	shr    eax,cl
c00266dd:	09 d8                	or     eax,ebx
c00266df:	89 e9                	mov    ecx,ebp
c00266e1:	d3 e6                	shl    esi,cl
c00266e3:	89 f3                	mov    ebx,esi
c00266e5:	89 fa                	mov    edx,edi
c00266e7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00266eb:	89 d1                	mov    ecx,edx
c00266ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266f1:	89 c6                	mov    esi,eax
c00266f3:	89 d7                	mov    edi,edx
c00266f5:	39 d1                	cmp    ecx,edx
c00266f7:	72 27                	jb     c0026720 <__umoddi3+0x10c>
c00266f9:	74 21                	je     c002671c <__umoddi3+0x108>
c00266fb:	89 ca                	mov    edx,ecx
c00266fd:	29 f3                	sub    ebx,esi
c00266ff:	19 fa                	sbb    edx,edi
c0026701:	89 d0                	mov    eax,edx
c0026703:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026707:	d3 e0                	shl    eax,cl
c0026709:	89 e9                	mov    ecx,ebp
c002670b:	d3 eb                	shr    ebx,cl
c002670d:	09 d8                	or     eax,ebx
c002670f:	d3 ea                	shr    edx,cl
c0026711:	83 c4 1c             	add    esp,0x1c
c0026714:	5b                   	pop    ebx
c0026715:	5e                   	pop    esi
c0026716:	5f                   	pop    edi
c0026717:	5d                   	pop    ebp
c0026718:	c3                   	ret    
c0026719:	8d 76 00             	lea    esi,[esi+0x0]
c002671c:	39 c3                	cmp    ebx,eax
c002671e:	73 db                	jae    c00266fb <__umoddi3+0xe7>
c0026720:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026724:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026728:	89 d7                	mov    edi,edx
c002672a:	89 c6                	mov    esi,eax
c002672c:	eb cd                	jmp    c00266fb <__umoddi3+0xe7>

c002672e <__addsf3>:
c002672e:	55                   	push   ebp
c002672f:	89 e5                	mov    ebp,esp
c0026731:	57                   	push   edi
c0026732:	56                   	push   esi
c0026733:	53                   	push   ebx
c0026734:	83 ec 08             	sub    esp,0x8
c0026737:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002673a:	89 fa                	mov    edx,edi
c002673c:	89 f8                	mov    eax,edi
c002673e:	c1 f8 17             	sar    eax,0x17
c0026741:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026744:	c1 e2 08             	shl    edx,0x8
c0026747:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002674d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026750:	89 de                	mov    esi,ebx
c0026752:	c1 fe 17             	sar    esi,0x17
c0026755:	c1 e3 08             	shl    ebx,0x8
c0026758:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002675e:	31 f0                	xor    eax,esi
c0026760:	0f 88 3b 01 00 00    	js     c00268a1 <__addsf3+0x173>
c0026766:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026769:	29 f1                	sub    ecx,esi
c002676b:	85 c9                	test   ecx,ecx
c002676d:	7e 54                	jle    c00267c3 <__addsf3+0x95>
c002676f:	89 f0                	mov    eax,esi
c0026771:	84 c0                	test   al,al
c0026773:	75 10                	jne    c0026785 <__addsf3+0x57>
c0026775:	85 db                	test   ebx,ebx
c0026777:	0f 84 aa 02 00 00    	je     c0026a27 <__addsf3+0x2f9>
c002677d:	49                   	dec    ecx
c002677e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026781:	74 38                	je     c00267bb <__addsf3+0x8d>
c0026783:	eb 13                	jmp    c0026798 <__addsf3+0x6a>
c0026785:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026788:	f7 d0                	not    eax
c002678a:	84 c0                	test   al,al
c002678c:	0f 84 95 02 00 00    	je     c0026a27 <__addsf3+0x2f9>
c0026792:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026798:	83 f9 1f             	cmp    ecx,0x1f
c002679b:	0f 8f 86 02 00 00    	jg     c0026a27 <__addsf3+0x2f9>
c00267a1:	89 de                	mov    esi,ebx
c00267a3:	d3 ee                	shr    esi,cl
c00267a5:	b8 20 00 00 00       	mov    eax,0x20
c00267aa:	29 c8                	sub    eax,ecx
c00267ac:	89 c1                	mov    ecx,eax
c00267ae:	d3 e3                	shl    ebx,cl
c00267b0:	31 c0                	xor    eax,eax
c00267b2:	85 db                	test   ebx,ebx
c00267b4:	0f 95 c0             	setne  al
c00267b7:	09 f0                	or     eax,esi
c00267b9:	01 d0                	add    eax,edx
c00267bb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00267be:	e9 b6 00 00 00       	jmp    c0026879 <__addsf3+0x14b>
c00267c3:	74 5c                	je     c0026821 <__addsf3+0xf3>
c00267c5:	89 f1                	mov    ecx,esi
c00267c7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00267ca:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00267cd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00267d1:	75 14                	jne    c00267e7 <__addsf3+0xb9>
c00267d3:	85 d2                	test   edx,edx
c00267d5:	0f 84 4c 02 00 00    	je     c0026a27 <__addsf3+0x2f9>
c00267db:	49                   	dec    ecx
c00267dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00267df:	0f 84 94 00 00 00    	je     c0026879 <__addsf3+0x14b>
c00267e5:	eb 12                	jmp    c00267f9 <__addsf3+0xcb>
c00267e7:	89 f0                	mov    eax,esi
c00267e9:	f7 d0                	not    eax
c00267eb:	84 c0                	test   al,al
c00267ed:	0f 84 34 02 00 00    	je     c0026a27 <__addsf3+0x2f9>
c00267f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00267f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00267fc:	83 f9 1f             	cmp    ecx,0x1f
c00267ff:	0f 8f 22 02 00 00    	jg     c0026a27 <__addsf3+0x2f9>
c0026805:	89 d7                	mov    edi,edx
c0026807:	d3 ef                	shr    edi,cl
c0026809:	b8 20 00 00 00       	mov    eax,0x20
c002680e:	29 c8                	sub    eax,ecx
c0026810:	89 c1                	mov    ecx,eax
c0026812:	d3 e2                	shl    edx,cl
c0026814:	31 c0                	xor    eax,eax
c0026816:	85 d2                	test   edx,edx
c0026818:	0f 95 c0             	setne  al
c002681b:	09 f8                	or     eax,edi
c002681d:	01 d8                	add    eax,ebx
c002681f:	eb 58                	jmp    c0026879 <__addsf3+0x14b>
c0026821:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026824:	8d 70 01             	lea    esi,[eax+0x1]
c0026827:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002682d:	75 32                	jne    c0026861 <__addsf3+0x133>
c002682f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026833:	75 1f                	jne    c0026854 <__addsf3+0x126>
c0026835:	85 d2                	test   edx,edx
c0026837:	0f 84 e0 01 00 00    	je     c0026a1d <__addsf3+0x2ef>
c002683d:	85 db                	test   ebx,ebx
c002683f:	0f 84 e2 01 00 00    	je     c0026a27 <__addsf3+0x2f9>
c0026845:	89 d0                	mov    eax,edx
c0026847:	01 d8                	add    eax,ebx
c0026849:	0f 89 a9 01 00 00    	jns    c00269f8 <__addsf3+0x2ca>
c002684f:	e9 9d 01 00 00       	jmp    c00269f1 <__addsf3+0x2c3>
c0026854:	85 d2                	test   edx,edx
c0026856:	0f 85 cb 01 00 00    	jne    c0026a27 <__addsf3+0x2f9>
c002685c:	e9 bc 01 00 00       	jmp    c0026a1d <__addsf3+0x2ef>
c0026861:	31 c0                	xor    eax,eax
c0026863:	89 f1                	mov    ecx,esi
c0026865:	f7 d1                	not    ecx
c0026867:	84 c9                	test   cl,cl
c0026869:	0f 84 90 01 00 00    	je     c00269ff <__addsf3+0x2d1>
c002686f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026872:	d1 e8                	shr    eax,1
c0026874:	e9 86 01 00 00       	jmp    c00269ff <__addsf3+0x2d1>
c0026879:	85 c0                	test   eax,eax
c002687b:	0f 89 7e 01 00 00    	jns    c00269ff <__addsf3+0x2d1>
c0026881:	46                   	inc    esi
c0026882:	89 f2                	mov    edx,esi
c0026884:	f7 d2                	not    edx
c0026886:	84 d2                	test   dl,dl
c0026888:	0f 84 6f 01 00 00    	je     c00269fd <__addsf3+0x2cf>
c002688e:	89 c2                	mov    edx,eax
c0026890:	83 e2 01             	and    edx,0x1
c0026893:	d1 e8                	shr    eax,1
c0026895:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002689a:	09 d0                	or     eax,edx
c002689c:	e9 5e 01 00 00       	jmp    c00269ff <__addsf3+0x2d1>
c00268a1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00268a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268a8:	89 f0                	mov    eax,esi
c00268aa:	0f b6 c0             	movzx  eax,al
c00268ad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00268b0:	29 c1                	sub    ecx,eax
c00268b2:	85 c9                	test   ecx,ecx
c00268b4:	7e 55                	jle    c002690b <__addsf3+0x1dd>
c00268b6:	85 c0                	test   eax,eax
c00268b8:	75 11                	jne    c00268cb <__addsf3+0x19d>
c00268ba:	85 db                	test   ebx,ebx
c00268bc:	0f 84 65 01 00 00    	je     c0026a27 <__addsf3+0x2f9>
c00268c2:	49                   	dec    ecx
c00268c3:	75 19                	jne    c00268de <__addsf3+0x1b0>
c00268c5:	89 d0                	mov    eax,edx
c00268c7:	29 d8                	sub    eax,ebx
c00268c9:	eb 38                	jmp    c0026903 <__addsf3+0x1d5>
c00268cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268ce:	f7 d0                	not    eax
c00268d0:	84 c0                	test   al,al
c00268d2:	0f 84 4f 01 00 00    	je     c0026a27 <__addsf3+0x2f9>
c00268d8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00268de:	83 f9 1f             	cmp    ecx,0x1f
c00268e1:	0f 8f 40 01 00 00    	jg     c0026a27 <__addsf3+0x2f9>
c00268e7:	89 de                	mov    esi,ebx
c00268e9:	d3 ee                	shr    esi,cl
c00268eb:	b8 20 00 00 00       	mov    eax,0x20
c00268f0:	29 c8                	sub    eax,ecx
c00268f2:	89 c1                	mov    ecx,eax
c00268f4:	d3 e3                	shl    ebx,cl
c00268f6:	31 c0                	xor    eax,eax
c00268f8:	85 db                	test   ebx,ebx
c00268fa:	0f 95 c0             	setne  al
c00268fd:	09 f0                	or     eax,esi
c00268ff:	29 c2                	sub    edx,eax
c0026901:	89 d0                	mov    eax,edx
c0026903:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026906:	e9 af 00 00 00       	jmp    c00269ba <__addsf3+0x28c>
c002690b:	74 5c                	je     c0026969 <__addsf3+0x23b>
c002690d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026910:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026913:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026917:	75 14                	jne    c002692d <__addsf3+0x1ff>
c0026919:	85 d2                	test   edx,edx
c002691b:	0f 84 06 01 00 00    	je     c0026a27 <__addsf3+0x2f9>
c0026921:	48                   	dec    eax
c0026922:	75 1b                	jne    c002693f <__addsf3+0x211>
c0026924:	89 d8                	mov    eax,ebx
c0026926:	29 d0                	sub    eax,edx
c0026928:	e9 8d 00 00 00       	jmp    c00269ba <__addsf3+0x28c>
c002692d:	89 f1                	mov    ecx,esi
c002692f:	f7 d1                	not    ecx
c0026931:	84 c9                	test   cl,cl
c0026933:	0f 84 ee 00 00 00    	je     c0026a27 <__addsf3+0x2f9>
c0026939:	81 ca 00 00 00 80    	or     edx,0x80000000
c002693f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026942:	83 f8 1f             	cmp    eax,0x1f
c0026945:	0f 8f dc 00 00 00    	jg     c0026a27 <__addsf3+0x2f9>
c002694b:	89 d7                	mov    edi,edx
c002694d:	88 c1                	mov    cl,al
c002694f:	d3 ef                	shr    edi,cl
c0026951:	b9 20 00 00 00       	mov    ecx,0x20
c0026956:	29 c1                	sub    ecx,eax
c0026958:	d3 e2                	shl    edx,cl
c002695a:	31 c0                	xor    eax,eax
c002695c:	85 d2                	test   edx,edx
c002695e:	0f 95 c0             	setne  al
c0026961:	09 f8                	or     eax,edi
c0026963:	29 c3                	sub    ebx,eax
c0026965:	89 d8                	mov    eax,ebx
c0026967:	eb 51                	jmp    c00269ba <__addsf3+0x28c>
c0026969:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002696c:	40                   	inc    eax
c002696d:	a8 fe                	test   al,0xfe
c002696f:	75 3d                	jne    c00269ae <__addsf3+0x280>
c0026971:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026975:	0f 85 a7 00 00 00    	jne    c0026a22 <__addsf3+0x2f4>
c002697b:	85 d2                	test   edx,edx
c002697d:	75 12                	jne    c0026991 <__addsf3+0x263>
c002697f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026982:	85 db                	test   ebx,ebx
c0026984:	0f 85 9d 00 00 00    	jne    c0026a27 <__addsf3+0x2f9>
c002698a:	31 ff                	xor    edi,edi
c002698c:	e9 96 00 00 00       	jmp    c0026a27 <__addsf3+0x2f9>
c0026991:	85 db                	test   ebx,ebx
c0026993:	0f 84 8e 00 00 00    	je     c0026a27 <__addsf3+0x2f9>
c0026999:	89 d0                	mov    eax,edx
c002699b:	29 d8                	sub    eax,ebx
c002699d:	79 06                	jns    c00269a5 <__addsf3+0x277>
c002699f:	89 d8                	mov    eax,ebx
c00269a1:	29 d0                	sub    eax,edx
c00269a3:	eb 5a                	jmp    c00269ff <__addsf3+0x2d1>
c00269a5:	bf 00 00 00 00       	mov    edi,0x0
c00269aa:	74 7b                	je     c0026a27 <__addsf3+0x2f9>
c00269ac:	eb 4a                	jmp    c00269f8 <__addsf3+0x2ca>
c00269ae:	89 d0                	mov    eax,edx
c00269b0:	29 d8                	sub    eax,ebx
c00269b2:	79 12                	jns    c00269c6 <__addsf3+0x298>
c00269b4:	89 d8                	mov    eax,ebx
c00269b6:	29 d0                	sub    eax,edx
c00269b8:	eb 09                	jmp    c00269c3 <__addsf3+0x295>
c00269ba:	85 c0                	test   eax,eax
c00269bc:	79 41                	jns    c00269ff <__addsf3+0x2d1>
c00269be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00269c3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00269c6:	31 f6                	xor    esi,esi
c00269c8:	85 c0                	test   eax,eax
c00269ca:	74 33                	je     c00269ff <__addsf3+0x2d1>
c00269cc:	0f bd c8             	bsr    ecx,eax
c00269cf:	83 f1 1f             	xor    ecx,0x1f
c00269d2:	d3 e0                	shl    eax,cl
c00269d4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00269d8:	39 ca                	cmp    edx,ecx
c00269da:	7f 10                	jg     c00269ec <__addsf3+0x2be>
c00269dc:	29 d1                	sub    ecx,edx
c00269de:	41                   	inc    ecx
c00269df:	d3 e8                	shr    eax,cl
c00269e1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269e4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00269ea:	eb 13                	jmp    c00269ff <__addsf3+0x2d1>
c00269ec:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269ef:	29 ce                	sub    esi,ecx
c00269f1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00269f6:	eb 07                	jmp    c00269ff <__addsf3+0x2d1>
c00269f8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269fb:	eb 02                	jmp    c00269ff <__addsf3+0x2d1>
c00269fd:	31 c0                	xor    eax,eax
c00269ff:	89 c2                	mov    edx,eax
c0026a01:	c1 ea 08             	shr    edx,0x8
c0026a04:	a8 7f                	test   al,0x7f
c0026a06:	0f 95 c1             	setne  cl
c0026a09:	09 d1                	or     ecx,edx
c0026a0b:	83 e1 01             	and    ecx,0x1
c0026a0e:	c1 e8 07             	shr    eax,0x7
c0026a11:	21 c8                	and    eax,ecx
c0026a13:	c1 e6 17             	shl    esi,0x17
c0026a16:	09 d6                	or     esi,edx
c0026a18:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026a1b:	eb 0a                	jmp    c0026a27 <__addsf3+0x2f9>
c0026a1d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a20:	eb 05                	jmp    c0026a27 <__addsf3+0x2f9>
c0026a22:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026a27:	89 f8                	mov    eax,edi
c0026a29:	5a                   	pop    edx
c0026a2a:	59                   	pop    ecx
c0026a2b:	5b                   	pop    ebx
c0026a2c:	5e                   	pop    esi
c0026a2d:	5f                   	pop    edi
c0026a2e:	5d                   	pop    ebp
c0026a2f:	c3                   	ret    

c0026a30 <__subsf3>:
c0026a30:	55                   	push   ebp
c0026a31:	89 e5                	mov    ebp,esp
c0026a33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a36:	05 00 00 00 80       	add    eax,0x80000000
c0026a3b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026a3e:	5d                   	pop    ebp
c0026a3f:	e9 ea fc ff ff       	jmp    c002672e <__addsf3>

c0026a44 <__negsf2>:
c0026a44:	55                   	push   ebp
c0026a45:	89 e5                	mov    ebp,esp
c0026a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a4a:	05 00 00 00 80       	add    eax,0x80000000
c0026a4f:	5d                   	pop    ebp
c0026a50:	c3                   	ret    

c0026a51 <__mulsf3>:
c0026a51:	55                   	push   ebp
c0026a52:	89 e5                	mov    ebp,esp
c0026a54:	57                   	push   edi
c0026a55:	56                   	push   esi
c0026a56:	53                   	push   ebx
c0026a57:	83 ec 1c             	sub    esp,0x1c
c0026a5a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026a5d:	89 f0                	mov    eax,esi
c0026a5f:	89 f1                	mov    ecx,esi
c0026a61:	c1 f9 17             	sar    ecx,0x17
c0026a64:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026a67:	c1 e0 08             	shl    eax,0x8
c0026a6a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026a6f:	89 c1                	mov    ecx,eax
c0026a71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a74:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026a77:	89 c7                	mov    edi,eax
c0026a79:	c1 ff 17             	sar    edi,0x17
c0026a7c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026a80:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026a83:	89 f8                	mov    eax,edi
c0026a85:	0f b6 c0             	movzx  eax,al
c0026a88:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026a8b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026a8f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026a92:	42                   	inc    edx
c0026a93:	80 e2 fe             	and    dl,0xfe
c0026a96:	75 7b                	jne    c0026b13 <__mulsf3+0xc2>
c0026a98:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026a9c:	74 54                	je     c0026af2 <__mulsf3+0xa1>
c0026a9e:	85 c9                	test   ecx,ecx
c0026aa0:	0f 85 64 01 00 00    	jne    c0026c0a <__mulsf3+0x1b9>
c0026aa6:	8d 57 01             	lea    edx,[edi+0x1]
c0026aa9:	80 e2 fe             	and    dl,0xfe
c0026aac:	75 1f                	jne    c0026acd <__mulsf3+0x7c>
c0026aae:	85 c0                	test   eax,eax
c0026ab0:	b8 00 00 00 00       	mov    eax,0x0
c0026ab5:	74 29                	je     c0026ae0 <__mulsf3+0x8f>
c0026ab7:	53                   	push   ebx
c0026ab8:	53                   	push   ebx
c0026ab9:	50                   	push   eax
c0026aba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026abd:	e8 96 05 00 00       	call   c0027058 <__nesf2>
c0026ac2:	83 c4 10             	add    esp,0x10
c0026ac5:	85 c0                	test   eax,eax
c0026ac7:	0f 85 3a 01 00 00    	jne    c0026c07 <__mulsf3+0x1b6>
c0026acd:	85 ff                	test   edi,edi
c0026acf:	0f 89 35 01 00 00    	jns    c0026c0a <__mulsf3+0x1b9>
c0026ad5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026adb:	e9 2a 01 00 00       	jmp    c0026c0a <__mulsf3+0x1b9>
c0026ae0:	51                   	push   ecx
c0026ae1:	51                   	push   ecx
c0026ae2:	50                   	push   eax
c0026ae3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ae6:	e8 6d 05 00 00       	call   c0027058 <__nesf2>
c0026aeb:	83 c4 10             	add    esp,0x10
c0026aee:	85 c0                	test   eax,eax
c0026af0:	eb 15                	jmp    c0026b07 <__mulsf3+0xb6>
c0026af2:	85 c9                	test   ecx,ecx
c0026af4:	74 0b                	je     c0026b01 <__mulsf3+0xb0>
c0026af6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026af9:	01 c9                	add    ecx,ecx
c0026afb:	78 16                	js     c0026b13 <__mulsf3+0xc2>
c0026afd:	89 d3                	mov    ebx,edx
c0026aff:	eb f5                	jmp    c0026af6 <__mulsf3+0xa5>
c0026b01:	89 f8                	mov    eax,edi
c0026b03:	f7 d0                	not    eax
c0026b05:	84 c0                	test   al,al
c0026b07:	75 c4                	jne    c0026acd <__mulsf3+0x7c>
c0026b09:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026b0e:	e9 f7 00 00 00       	jmp    c0026c0a <__mulsf3+0x1b9>
c0026b13:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026b16:	c1 e6 08             	shl    esi,0x8
c0026b19:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026b1f:	8d 57 01             	lea    edx,[edi+0x1]
c0026b22:	80 e2 fe             	and    dl,0xfe
c0026b25:	75 63                	jne    c0026b8a <__mulsf3+0x139>
c0026b27:	85 c0                	test   eax,eax
c0026b29:	74 2f                	je     c0026b5a <__mulsf3+0x109>
c0026b2b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026b2f:	0f 89 d2 00 00 00    	jns    c0026c07 <__mulsf3+0x1b6>
c0026b35:	52                   	push   edx
c0026b36:	52                   	push   edx
c0026b37:	6a 00                	push   0x0
c0026b39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b3c:	e8 dc 04 00 00       	call   c002701d <__eqsf2>
c0026b41:	83 c4 10             	add    esp,0x10
c0026b44:	85 c0                	test   eax,eax
c0026b46:	0f 85 bb 00 00 00    	jne    c0026c07 <__mulsf3+0x1b6>
c0026b4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b4f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026b55:	e9 b0 00 00 00       	jmp    c0026c0a <__mulsf3+0x1b9>
c0026b5a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026b5d:	50                   	push   eax
c0026b5e:	50                   	push   eax
c0026b5f:	6a 00                	push   0x0
c0026b61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b64:	e8 b4 04 00 00       	call   c002701d <__eqsf2>
c0026b69:	83 c4 10             	add    esp,0x10
c0026b6c:	85 c0                	test   eax,eax
c0026b6e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026b71:	75 0c                	jne    c0026b7f <__mulsf3+0x12e>
c0026b73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026b77:	0f 89 8a 00 00 00    	jns    c0026c07 <__mulsf3+0x1b6>
c0026b7d:	eb cd                	jmp    c0026b4c <__mulsf3+0xfb>
c0026b7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026b82:	01 f6                	add    esi,esi
c0026b84:	78 04                	js     c0026b8a <__mulsf3+0x139>
c0026b86:	89 c3                	mov    ebx,eax
c0026b88:	eb f5                	jmp    c0026b7f <__mulsf3+0x12e>
c0026b8a:	89 c8                	mov    eax,ecx
c0026b8c:	0d 00 00 00 80       	or     eax,0x80000000
c0026b91:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026b97:	f7 e6                	mul    esi
c0026b99:	85 c0                	test   eax,eax
c0026b9b:	0f 95 c0             	setne  al
c0026b9e:	0f b6 c0             	movzx  eax,al
c0026ba1:	09 c2                	or     edx,eax
c0026ba3:	78 03                	js     c0026ba8 <__mulsf3+0x157>
c0026ba5:	01 d2                	add    edx,edx
c0026ba7:	4b                   	dec    ebx
c0026ba8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026bae:	7f 22                	jg     c0026bd2 <__mulsf3+0x181>
c0026bb0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026bb6:	85 db                	test   ebx,ebx
c0026bb8:	7f 23                	jg     c0026bdd <__mulsf3+0x18c>
c0026bba:	83 fb e9             	cmp    ebx,0xffffffe9
c0026bbd:	7c 1a                	jl     c0026bd9 <__mulsf3+0x188>
c0026bbf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026bc5:	b9 01 00 00 00       	mov    ecx,0x1
c0026bca:	29 d9                	sub    ecx,ebx
c0026bcc:	d3 ea                	shr    edx,cl
c0026bce:	31 db                	xor    ebx,ebx
c0026bd0:	eb 0b                	jmp    c0026bdd <__mulsf3+0x18c>
c0026bd2:	bb ff 00 00 00       	mov    ebx,0xff
c0026bd7:	eb 02                	jmp    c0026bdb <__mulsf3+0x18a>
c0026bd9:	31 db                	xor    ebx,ebx
c0026bdb:	31 d2                	xor    edx,edx
c0026bdd:	89 d0                	mov    eax,edx
c0026bdf:	c1 e8 08             	shr    eax,0x8
c0026be2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026be5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026beb:	09 fb                	or     ebx,edi
c0026bed:	c1 e3 17             	shl    ebx,0x17
c0026bf0:	09 c3                	or     ebx,eax
c0026bf2:	f6 c2 7f             	test   dl,0x7f
c0026bf5:	0f 95 c1             	setne  cl
c0026bf8:	09 c8                	or     eax,ecx
c0026bfa:	83 e0 01             	and    eax,0x1
c0026bfd:	c1 ea 07             	shr    edx,0x7
c0026c00:	21 c2                	and    edx,eax
c0026c02:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026c05:	eb 03                	jmp    c0026c0a <__mulsf3+0x1b9>
c0026c07:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026c0a:	89 f0                	mov    eax,esi
c0026c0c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026c0f:	5b                   	pop    ebx
c0026c10:	5e                   	pop    esi
c0026c11:	5f                   	pop    edi
c0026c12:	5d                   	pop    ebp
c0026c13:	c3                   	ret    

c0026c14 <__divsf3>:
c0026c14:	55                   	push   ebp
c0026c15:	89 e5                	mov    ebp,esp
c0026c17:	57                   	push   edi
c0026c18:	56                   	push   esi
c0026c19:	53                   	push   ebx
c0026c1a:	83 ec 1c             	sub    esp,0x1c
c0026c1d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c20:	89 d8                	mov    eax,ebx
c0026c22:	89 d9                	mov    ecx,ebx
c0026c24:	c1 f9 17             	sar    ecx,0x17
c0026c27:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c2a:	c1 e0 08             	shl    eax,0x8
c0026c2d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c32:	89 c1                	mov    ecx,eax
c0026c34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c3a:	89 c7                	mov    edi,eax
c0026c3c:	c1 ff 17             	sar    edi,0x17
c0026c3f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c43:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c46:	89 f8                	mov    eax,edi
c0026c48:	0f b6 c0             	movzx  eax,al
c0026c4b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026c4e:	29 c6                	sub    esi,eax
c0026c50:	83 c6 7f             	add    esi,0x7f
c0026c53:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c56:	42                   	inc    edx
c0026c57:	80 e2 fe             	and    dl,0xfe
c0026c5a:	0f 85 9c 00 00 00    	jne    c0026cfc <__divsf3+0xe8>
c0026c60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c64:	74 33                	je     c0026c99 <__divsf3+0x85>
c0026c66:	85 c9                	test   ecx,ecx
c0026c68:	0f 85 c7 01 00 00    	jne    c0026e35 <__divsf3+0x221>
c0026c6e:	8d 57 01             	lea    edx,[edi+0x1]
c0026c71:	80 e2 fe             	and    dl,0xfe
c0026c74:	75 2f                	jne    c0026ca5 <__divsf3+0x91>
c0026c76:	85 c0                	test   eax,eax
c0026c78:	74 2b                	je     c0026ca5 <__divsf3+0x91>
c0026c7a:	51                   	push   ecx
c0026c7b:	51                   	push   ecx
c0026c7c:	6a 00                	push   0x0
c0026c7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c81:	e8 d2 03 00 00       	call   c0027058 <__nesf2>
c0026c86:	83 c4 10             	add    esp,0x10
c0026c89:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c8c:	85 c0                	test   eax,eax
c0026c8e:	0f 85 a1 01 00 00    	jne    c0026e35 <__divsf3+0x221>
c0026c94:	e9 92 01 00 00       	jmp    c0026e2b <__divsf3+0x217>
c0026c99:	85 c9                	test   ecx,ecx
c0026c9b:	75 1b                	jne    c0026cb8 <__divsf3+0xa4>
c0026c9d:	8d 57 01             	lea    edx,[edi+0x1]
c0026ca0:	80 e2 fe             	and    dl,0xfe
c0026ca3:	74 1e                	je     c0026cc3 <__divsf3+0xaf>
c0026ca5:	85 ff                	test   edi,edi
c0026ca7:	0f 89 88 01 00 00    	jns    c0026e35 <__divsf3+0x221>
c0026cad:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026cb3:	e9 7d 01 00 00       	jmp    c0026e35 <__divsf3+0x221>
c0026cb8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026cbb:	01 c9                	add    ecx,ecx
c0026cbd:	78 3d                	js     c0026cfc <__divsf3+0xe8>
c0026cbf:	89 d6                	mov    esi,edx
c0026cc1:	eb f5                	jmp    c0026cb8 <__divsf3+0xa4>
c0026cc3:	85 c0                	test   eax,eax
c0026cc5:	b8 00 00 00 00       	mov    eax,0x0
c0026cca:	74 18                	je     c0026ce4 <__divsf3+0xd0>
c0026ccc:	52                   	push   edx
c0026ccd:	52                   	push   edx
c0026cce:	50                   	push   eax
c0026ccf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cd2:	e8 81 03 00 00       	call   c0027058 <__nesf2>
c0026cd7:	83 c4 10             	add    esp,0x10
c0026cda:	85 c0                	test   eax,eax
c0026cdc:	0f 85 50 01 00 00    	jne    c0026e32 <__divsf3+0x21e>
c0026ce2:	eb c1                	jmp    c0026ca5 <__divsf3+0x91>
c0026ce4:	56                   	push   esi
c0026ce5:	56                   	push   esi
c0026ce6:	50                   	push   eax
c0026ce7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cea:	e8 69 03 00 00       	call   c0027058 <__nesf2>
c0026cef:	83 c4 10             	add    esp,0x10
c0026cf2:	85 c0                	test   eax,eax
c0026cf4:	0f 84 31 01 00 00    	je     c0026e2b <__divsf3+0x217>
c0026cfa:	eb a9                	jmp    c0026ca5 <__divsf3+0x91>
c0026cfc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026cff:	c1 e3 08             	shl    ebx,0x8
c0026d02:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d08:	8d 57 01             	lea    edx,[edi+0x1]
c0026d0b:	80 e2 fe             	and    dl,0xfe
c0026d0e:	75 71                	jne    c0026d81 <__divsf3+0x16d>
c0026d10:	85 c0                	test   eax,eax
c0026d12:	ba 00 00 00 00       	mov    edx,0x0
c0026d17:	74 2f                	je     c0026d48 <__divsf3+0x134>
c0026d19:	51                   	push   ecx
c0026d1a:	51                   	push   ecx
c0026d1b:	52                   	push   edx
c0026d1c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d1f:	e8 f9 02 00 00       	call   c002701d <__eqsf2>
c0026d24:	83 c4 10             	add    esp,0x10
c0026d27:	85 c0                	test   eax,eax
c0026d29:	0f 85 03 01 00 00    	jne    c0026e32 <__divsf3+0x21e>
c0026d2f:	31 d2                	xor    edx,edx
c0026d31:	89 d3                	mov    ebx,edx
c0026d33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026d36:	31 f8                	xor    eax,edi
c0026d38:	0f 89 f7 00 00 00    	jns    c0026e35 <__divsf3+0x221>
c0026d3e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026d43:	e9 ed 00 00 00       	jmp    c0026e35 <__divsf3+0x221>
c0026d48:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d4b:	50                   	push   eax
c0026d4c:	50                   	push   eax
c0026d4d:	52                   	push   edx
c0026d4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d51:	e8 c7 02 00 00       	call   c002701d <__eqsf2>
c0026d56:	83 c4 10             	add    esp,0x10
c0026d59:	85 c0                	test   eax,eax
c0026d5b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d5e:	75 16                	jne    c0026d76 <__divsf3+0x162>
c0026d60:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d63:	31 fb                	xor    ebx,edi
c0026d65:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026d6b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026d71:	e9 bf 00 00 00       	jmp    c0026e35 <__divsf3+0x221>
c0026d76:	8d 46 01             	lea    eax,[esi+0x1]
c0026d79:	01 db                	add    ebx,ebx
c0026d7b:	78 04                	js     c0026d81 <__divsf3+0x16d>
c0026d7d:	89 c6                	mov    esi,eax
c0026d7f:	eb f5                	jmp    c0026d76 <__divsf3+0x162>
c0026d81:	89 c8                	mov    eax,ecx
c0026d83:	0d 00 00 00 80       	or     eax,0x80000000
c0026d88:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d8e:	31 d2                	xor    edx,edx
c0026d90:	39 d8                	cmp    eax,ebx
c0026d92:	72 07                	jb     c0026d9b <__divsf3+0x187>
c0026d94:	29 d8                	sub    eax,ebx
c0026d96:	ba 01 00 00 00       	mov    edx,0x1
c0026d9b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026da2:	01 d2                	add    edx,edx
c0026da4:	89 c1                	mov    ecx,eax
c0026da6:	01 c0                	add    eax,eax
c0026da8:	85 c9                	test   ecx,ecx
c0026daa:	78 04                	js     c0026db0 <__divsf3+0x19c>
c0026dac:	39 c3                	cmp    ebx,eax
c0026dae:	77 05                	ja     c0026db5 <__divsf3+0x1a1>
c0026db0:	29 d8                	sub    eax,ebx
c0026db2:	83 ca 01             	or     edx,0x1
c0026db5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026db8:	75 e8                	jne    c0026da2 <__divsf3+0x18e>
c0026dba:	85 c0                	test   eax,eax
c0026dbc:	0f 95 c0             	setne  al
c0026dbf:	0f b6 c0             	movzx  eax,al
c0026dc2:	c1 e2 06             	shl    edx,0x6
c0026dc5:	09 c2                	or     edx,eax
c0026dc7:	78 03                	js     c0026dcc <__divsf3+0x1b8>
c0026dc9:	01 d2                	add    edx,edx
c0026dcb:	4e                   	dec    esi
c0026dcc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026dd2:	7f 22                	jg     c0026df6 <__divsf3+0x1e2>
c0026dd4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026dda:	85 f6                	test   esi,esi
c0026ddc:	7f 23                	jg     c0026e01 <__divsf3+0x1ed>
c0026dde:	83 fe e9             	cmp    esi,0xffffffe9
c0026de1:	7c 1a                	jl     c0026dfd <__divsf3+0x1e9>
c0026de3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026de9:	b9 01 00 00 00       	mov    ecx,0x1
c0026dee:	29 f1                	sub    ecx,esi
c0026df0:	d3 ea                	shr    edx,cl
c0026df2:	31 f6                	xor    esi,esi
c0026df4:	eb 0b                	jmp    c0026e01 <__divsf3+0x1ed>
c0026df6:	be ff 00 00 00       	mov    esi,0xff
c0026dfb:	eb 02                	jmp    c0026dff <__divsf3+0x1eb>
c0026dfd:	31 f6                	xor    esi,esi
c0026dff:	31 d2                	xor    edx,edx
c0026e01:	89 d0                	mov    eax,edx
c0026e03:	c1 e8 08             	shr    eax,0x8
c0026e06:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026e09:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026e0f:	09 fe                	or     esi,edi
c0026e11:	c1 e6 17             	shl    esi,0x17
c0026e14:	09 c6                	or     esi,eax
c0026e16:	f6 c2 7f             	test   dl,0x7f
c0026e19:	0f 95 c1             	setne  cl
c0026e1c:	09 c8                	or     eax,ecx
c0026e1e:	83 e0 01             	and    eax,0x1
c0026e21:	c1 ea 07             	shr    edx,0x7
c0026e24:	21 c2                	and    edx,eax
c0026e26:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026e29:	eb 0a                	jmp    c0026e35 <__divsf3+0x221>
c0026e2b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026e30:	eb 03                	jmp    c0026e35 <__divsf3+0x221>
c0026e32:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e35:	89 d8                	mov    eax,ebx
c0026e37:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e3a:	5b                   	pop    ebx
c0026e3b:	5e                   	pop    esi
c0026e3c:	5f                   	pop    edi
c0026e3d:	5d                   	pop    ebp
c0026e3e:	c3                   	ret    

c0026e3f <__floatsisf>:
c0026e3f:	55                   	push   ebp
c0026e40:	89 e5                	mov    ebp,esp
c0026e42:	53                   	push   ebx
c0026e43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026e46:	85 d2                	test   edx,edx
c0026e48:	7e 2b                	jle    c0026e75 <__floatsisf+0x36>
c0026e4a:	0f bd ca             	bsr    ecx,edx
c0026e4d:	83 f1 1f             	xor    ecx,0x1f
c0026e50:	d3 e2                	shl    edx,cl
c0026e52:	89 d0                	mov    eax,edx
c0026e54:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e59:	89 c3                	mov    ebx,eax
c0026e5b:	c1 eb 08             	shr    ebx,0x8
c0026e5e:	80 e2 7f             	and    dl,0x7f
c0026e61:	0f 95 c2             	setne  dl
c0026e64:	09 da                	or     edx,ebx
c0026e66:	83 e2 01             	and    edx,0x1
c0026e69:	c1 e8 07             	shr    eax,0x7
c0026e6c:	21 c2                	and    edx,eax
c0026e6e:	b8 9e 00 00 00       	mov    eax,0x9e
c0026e73:	eb 32                	jmp    c0026ea7 <__floatsisf+0x68>
c0026e75:	b8 00 00 00 00       	mov    eax,0x0
c0026e7a:	74 34                	je     c0026eb0 <__floatsisf+0x71>
c0026e7c:	f7 da                	neg    edx
c0026e7e:	0f bd ca             	bsr    ecx,edx
c0026e81:	83 f1 1f             	xor    ecx,0x1f
c0026e84:	d3 e2                	shl    edx,cl
c0026e86:	89 d0                	mov    eax,edx
c0026e88:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e8d:	89 c3                	mov    ebx,eax
c0026e8f:	c1 eb 08             	shr    ebx,0x8
c0026e92:	80 e2 7f             	and    dl,0x7f
c0026e95:	0f 95 c2             	setne  dl
c0026e98:	09 da                	or     edx,ebx
c0026e9a:	83 e2 01             	and    edx,0x1
c0026e9d:	c1 e8 07             	shr    eax,0x7
c0026ea0:	21 c2                	and    edx,eax
c0026ea2:	b8 9e 01 00 00       	mov    eax,0x19e
c0026ea7:	29 c8                	sub    eax,ecx
c0026ea9:	c1 e0 17             	shl    eax,0x17
c0026eac:	09 d8                	or     eax,ebx
c0026eae:	01 d0                	add    eax,edx
c0026eb0:	5b                   	pop    ebx
c0026eb1:	5d                   	pop    ebp
c0026eb2:	c3                   	ret    

c0026eb3 <__floatunsisf>:
c0026eb3:	55                   	push   ebp
c0026eb4:	89 e5                	mov    ebp,esp
c0026eb6:	53                   	push   ebx
c0026eb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026eba:	31 c0                	xor    eax,eax
c0026ebc:	85 d2                	test   edx,edx
c0026ebe:	74 32                	je     c0026ef2 <__floatunsisf+0x3f>
c0026ec0:	0f bd ca             	bsr    ecx,edx
c0026ec3:	83 f1 1f             	xor    ecx,0x1f
c0026ec6:	d3 e2                	shl    edx,cl
c0026ec8:	89 d0                	mov    eax,edx
c0026eca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ecf:	89 c3                	mov    ebx,eax
c0026ed1:	c1 eb 08             	shr    ebx,0x8
c0026ed4:	80 e2 7f             	and    dl,0x7f
c0026ed7:	0f 95 c2             	setne  dl
c0026eda:	09 da                	or     edx,ebx
c0026edc:	83 e2 01             	and    edx,0x1
c0026edf:	c1 e8 07             	shr    eax,0x7
c0026ee2:	21 c2                	and    edx,eax
c0026ee4:	b8 9e 00 00 00       	mov    eax,0x9e
c0026ee9:	29 c8                	sub    eax,ecx
c0026eeb:	c1 e0 17             	shl    eax,0x17
c0026eee:	09 d8                	or     eax,ebx
c0026ef0:	01 d0                	add    eax,edx
c0026ef2:	5b                   	pop    ebx
c0026ef3:	5d                   	pop    ebp
c0026ef4:	c3                   	ret    

c0026ef5 <__fixsfsi>:
c0026ef5:	55                   	push   ebp
c0026ef6:	89 e5                	mov    ebp,esp
c0026ef8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026efb:	89 d1                	mov    ecx,edx
c0026efd:	c1 e1 08             	shl    ecx,0x8
c0026f00:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026f06:	c1 fa 17             	sar    edx,0x17
c0026f09:	78 1c                	js     c0026f27 <__fixsfsi+0x32>
c0026f0b:	83 ea 7f             	sub    edx,0x7f
c0026f0e:	31 c0                	xor    eax,eax
c0026f10:	83 fa 1e             	cmp    edx,0x1e
c0026f13:	77 40                	ja     c0026f55 <__fixsfsi+0x60>
c0026f15:	89 c8                	mov    eax,ecx
c0026f17:	0d 00 00 00 80       	or     eax,0x80000000
c0026f1c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f21:	29 d1                	sub    ecx,edx
c0026f23:	d3 e8                	shr    eax,cl
c0026f25:	eb 2e                	jmp    c0026f55 <__fixsfsi+0x60>
c0026f27:	31 c0                	xor    eax,eax
c0026f29:	81 c2 81 00 00 00    	add    edx,0x81
c0026f2f:	78 24                	js     c0026f55 <__fixsfsi+0x60>
c0026f31:	83 fa 1e             	cmp    edx,0x1e
c0026f34:	7e 09                	jle    c0026f3f <__fixsfsi+0x4a>
c0026f36:	83 fa 1f             	cmp    edx,0x1f
c0026f39:	75 18                	jne    c0026f53 <__fixsfsi+0x5e>
c0026f3b:	85 c9                	test   ecx,ecx
c0026f3d:	75 14                	jne    c0026f53 <__fixsfsi+0x5e>
c0026f3f:	89 c8                	mov    eax,ecx
c0026f41:	0d 00 00 00 80       	or     eax,0x80000000
c0026f46:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f4b:	29 d1                	sub    ecx,edx
c0026f4d:	d3 e8                	shr    eax,cl
c0026f4f:	f7 d8                	neg    eax
c0026f51:	eb 02                	jmp    c0026f55 <__fixsfsi+0x60>
c0026f53:	31 c0                	xor    eax,eax
c0026f55:	5d                   	pop    ebp
c0026f56:	c3                   	ret    

c0026f57 <__fixunssfsi>:
c0026f57:	55                   	push   ebp
c0026f58:	89 e5                	mov    ebp,esp
c0026f5a:	53                   	push   ebx
c0026f5b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f5e:	89 d3                	mov    ebx,edx
c0026f60:	c1 fb 17             	sar    ebx,0x17
c0026f63:	83 eb 7f             	sub    ebx,0x7f
c0026f66:	31 c0                	xor    eax,eax
c0026f68:	83 fb 1f             	cmp    ebx,0x1f
c0026f6b:	77 18                	ja     c0026f85 <__fixunssfsi+0x2e>
c0026f6d:	89 d0                	mov    eax,edx
c0026f6f:	c1 e0 08             	shl    eax,0x8
c0026f72:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f77:	0d 00 00 00 80       	or     eax,0x80000000
c0026f7c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f81:	29 d9                	sub    ecx,ebx
c0026f83:	d3 e8                	shr    eax,cl
c0026f85:	5b                   	pop    ebx
c0026f86:	5d                   	pop    ebp
c0026f87:	c3                   	ret    

c0026f88 <__cmpsf2>:
c0026f88:	55                   	push   ebp
c0026f89:	89 e5                	mov    ebp,esp
c0026f8b:	57                   	push   edi
c0026f8c:	56                   	push   esi
c0026f8d:	53                   	push   ebx
c0026f8e:	83 ec 24             	sub    esp,0x24
c0026f91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f97:	e8 4f 10 00 00       	call   c0027feb <__truncdfsf2>
c0026f9c:	5a                   	pop    edx
c0026f9d:	59                   	pop    ecx
c0026f9e:	89 c3                	mov    ebx,eax
c0026fa0:	c1 e8 17             	shr    eax,0x17
c0026fa3:	0f b6 f0             	movzx  esi,al
c0026fa6:	89 d8                	mov    eax,ebx
c0026fa8:	c1 e8 1f             	shr    eax,0x1f
c0026fab:	31 c6                	xor    esi,eax
c0026fad:	c1 e3 08             	shl    ebx,0x8
c0026fb0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026fb3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026fb6:	e8 30 10 00 00       	call   c0027feb <__truncdfsf2>
c0026fbb:	83 c4 10             	add    esp,0x10
c0026fbe:	89 c1                	mov    ecx,eax
c0026fc0:	c1 e9 17             	shr    ecx,0x17
c0026fc3:	0f b6 c9             	movzx  ecx,cl
c0026fc6:	89 c7                	mov    edi,eax
c0026fc8:	c1 ef 1f             	shr    edi,0x1f
c0026fcb:	89 ca                	mov    edx,ecx
c0026fcd:	31 fa                	xor    edx,edi
c0026fcf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026fd2:	c1 e0 08             	shl    eax,0x8
c0026fd5:	89 c2                	mov    edx,eax
c0026fd7:	89 d8                	mov    eax,ebx
c0026fd9:	09 d0                	or     eax,edx
c0026fdb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fe0:	09 f0                	or     eax,esi
c0026fe2:	75 08                	jne    c0026fec <__cmpsf2+0x64>
c0026fe4:	31 c0                	xor    eax,eax
c0026fe6:	39 f9                	cmp    ecx,edi
c0026fe8:	75 0c                	jne    c0026ff6 <__cmpsf2+0x6e>
c0026fea:	eb 29                	jmp    c0027015 <__cmpsf2+0x8d>
c0026fec:	b8 01 00 00 00       	mov    eax,0x1
c0026ff1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026ff4:	7f 1f                	jg     c0027015 <__cmpsf2+0x8d>
c0026ff6:	83 c8 ff             	or     eax,0xffffffff
c0026ff9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026ffc:	7c 17                	jl     c0027015 <__cmpsf2+0x8d>
c0026ffe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027004:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002700a:	b8 01 00 00 00       	mov    eax,0x1
c002700f:	39 d3                	cmp    ebx,edx
c0027011:	77 02                	ja     c0027015 <__cmpsf2+0x8d>
c0027013:	19 c0                	sbb    eax,eax
c0027015:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027018:	5b                   	pop    ebx
c0027019:	5e                   	pop    esi
c002701a:	5f                   	pop    edi
c002701b:	5d                   	pop    ebp
c002701c:	c3                   	ret    

c002701d <__eqsf2>:
c002701d:	55                   	push   ebp
c002701e:	89 e5                	mov    ebp,esp
c0027020:	83 ec 24             	sub    esp,0x24
c0027023:	6a 01                	push   0x1
c0027025:	83 ec 0c             	sub    esp,0xc
c0027028:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002702b:	e8 df 10 00 00       	call   c002810f <__extendsfdf2>
c0027030:	83 c4 10             	add    esp,0x10
c0027033:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027036:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027039:	52                   	push   edx
c002703a:	50                   	push   eax
c002703b:	50                   	push   eax
c002703c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002703f:	e8 cb 10 00 00       	call   c002810f <__extendsfdf2>
c0027044:	59                   	pop    ecx
c0027045:	59                   	pop    ecx
c0027046:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027049:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002704c:	52                   	push   edx
c002704d:	50                   	push   eax
c002704e:	e8 35 ff ff ff       	call   c0026f88 <__cmpsf2>
c0027053:	83 c4 20             	add    esp,0x20
c0027056:	c9                   	leave  
c0027057:	c3                   	ret    

c0027058 <__nesf2>:
c0027058:	eb c3                	jmp    c002701d <__eqsf2>

c002705a <__gtsf2>:
c002705a:	55                   	push   ebp
c002705b:	89 e5                	mov    ebp,esp
c002705d:	83 ec 24             	sub    esp,0x24
c0027060:	6a ff                	push   0xffffffff
c0027062:	83 ec 0c             	sub    esp,0xc
c0027065:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027068:	e8 a2 10 00 00       	call   c002810f <__extendsfdf2>
c002706d:	83 c4 10             	add    esp,0x10
c0027070:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027073:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027076:	52                   	push   edx
c0027077:	50                   	push   eax
c0027078:	50                   	push   eax
c0027079:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002707c:	e8 8e 10 00 00       	call   c002810f <__extendsfdf2>
c0027081:	59                   	pop    ecx
c0027082:	59                   	pop    ecx
c0027083:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027086:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027089:	52                   	push   edx
c002708a:	50                   	push   eax
c002708b:	e8 f8 fe ff ff       	call   c0026f88 <__cmpsf2>
c0027090:	83 c4 20             	add    esp,0x20
c0027093:	c9                   	leave  
c0027094:	c3                   	ret    

c0027095 <__gesf2>:
c0027095:	eb c3                	jmp    c002705a <__gtsf2>

c0027097 <__ltsf2>:
c0027097:	eb 84                	jmp    c002701d <__eqsf2>

c0027099 <__lesf2>:
c0027099:	eb 82                	jmp    c002701d <__eqsf2>

c002709b <__adddf3>:
c002709b:	55                   	push   ebp
c002709c:	89 e5                	mov    ebp,esp
c002709e:	57                   	push   edi
c002709f:	56                   	push   esi
c00270a0:	53                   	push   ebx
c00270a1:	83 ec 24             	sub    esp,0x24
c00270a4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00270a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00270aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00270ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270b0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00270b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00270b6:	89 c8                	mov    eax,ecx
c00270b8:	89 ce                	mov    esi,ecx
c00270ba:	c1 fe 14             	sar    esi,0x14
c00270bd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00270c0:	89 fb                	mov    ebx,edi
c00270c2:	89 fa                	mov    edx,edi
c00270c4:	c1 e2 0b             	shl    edx,0xb
c00270c7:	c1 e0 0b             	shl    eax,0xb
c00270ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00270cf:	c1 eb 15             	shr    ebx,0x15
c00270d2:	09 d8                	or     eax,ebx
c00270d4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00270d7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00270da:	c1 fe 14             	sar    esi,0x14
c00270dd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00270e0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00270e3:	89 f3                	mov    ebx,esi
c00270e5:	c1 e3 0b             	shl    ebx,0xb
c00270e8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00270eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00270ee:	c1 e3 0b             	shl    ebx,0xb
c00270f1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00270f7:	c1 ee 15             	shr    esi,0x15
c00270fa:	09 f3                	or     ebx,esi
c00270fc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00270ff:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027102:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027105:	0f 88 5f 02 00 00    	js     c002736a <__adddf3+0x2cf>
c002710b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002710e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027111:	85 db                	test   ebx,ebx
c0027113:	0f 8e c7 00 00 00    	jle    c00271e0 <__adddf3+0x145>
c0027119:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027120:	75 1a                	jne    c002713c <__adddf3+0xa1>
c0027122:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027125:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027128:	0f 84 b2 05 00 00    	je     c00276e0 <__adddf3+0x645>
c002712e:	4b                   	dec    ebx
c002712f:	75 23                	jne    c0027154 <__adddf3+0xb9>
c0027131:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027134:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027137:	e9 99 00 00 00       	jmp    c00271d5 <__adddf3+0x13a>
c002713c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002713f:	f7 d6                	not    esi
c0027141:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027147:	0f 84 93 05 00 00    	je     c00276e0 <__adddf3+0x645>
c002714d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027154:	83 fb 1f             	cmp    ebx,0x1f
c0027157:	7e 42                	jle    c002719b <__adddf3+0x100>
c0027159:	83 fb 3f             	cmp    ebx,0x3f
c002715c:	0f 8f 7e 05 00 00    	jg     c00276e0 <__adddf3+0x645>
c0027162:	83 e3 1f             	and    ebx,0x1f
c0027165:	89 d9                	mov    ecx,ebx
c0027167:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002716a:	d3 ef                	shr    edi,cl
c002716c:	31 db                	xor    ebx,ebx
c002716e:	85 c9                	test   ecx,ecx
c0027170:	74 15                	je     c0027187 <__adddf3+0xec>
c0027172:	be 20 00 00 00       	mov    esi,0x20
c0027177:	29 ce                	sub    esi,ecx
c0027179:	89 f1                	mov    ecx,esi
c002717b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002717e:	d3 e6                	shl    esi,cl
c0027180:	31 db                	xor    ebx,ebx
c0027182:	85 f6                	test   esi,esi
c0027184:	0f 95 c3             	setne  bl
c0027187:	31 c9                	xor    ecx,ecx
c0027189:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002718d:	0f 95 c1             	setne  cl
c0027190:	09 cf                	or     edi,ecx
c0027192:	09 fb                	or     ebx,edi
c0027194:	01 da                	add    edx,ebx
c0027196:	83 d0 00             	adc    eax,0x0
c0027199:	eb 3a                	jmp    c00271d5 <__adddf3+0x13a>
c002719b:	bf 20 00 00 00       	mov    edi,0x20
c00271a0:	29 df                	sub    edi,ebx
c00271a2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271a8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271ab:	d3 e6                	shl    esi,cl
c00271ad:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271b0:	88 d9                	mov    cl,bl
c00271b2:	d3 ef                	shr    edi,cl
c00271b4:	09 fe                	or     esi,edi
c00271b6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00271b9:	88 d9                	mov    cl,bl
c00271bb:	d3 ef                	shr    edi,cl
c00271bd:	89 fb                	mov    ebx,edi
c00271bf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271c2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271c5:	d3 e7                	shl    edi,cl
c00271c7:	85 ff                	test   edi,edi
c00271c9:	0f 95 c1             	setne  cl
c00271cc:	0f b6 c9             	movzx  ecx,cl
c00271cf:	09 ce                	or     esi,ecx
c00271d1:	01 f2                	add    edx,esi
c00271d3:	11 d8                	adc    eax,ebx
c00271d5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00271d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271db:	e9 52 01 00 00       	jmp    c0027332 <__adddf3+0x297>
c00271e0:	0f 84 d5 00 00 00    	je     c00272bb <__adddf3+0x220>
c00271e6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00271e9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00271ec:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00271ef:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00271f2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00271f9:	75 20                	jne    c002721b <__adddf3+0x180>
c00271fb:	89 d6                	mov    esi,edx
c00271fd:	09 c6                	or     esi,eax
c00271ff:	0f 84 db 04 00 00    	je     c00276e0 <__adddf3+0x645>
c0027205:	4b                   	dec    ebx
c0027206:	75 29                	jne    c0027231 <__adddf3+0x196>
c0027208:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002720b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002720e:	01 d1                	add    ecx,edx
c0027210:	11 c6                	adc    esi,eax
c0027212:	89 f0                	mov    eax,esi
c0027214:	89 ca                	mov    edx,ecx
c0027216:	e9 17 01 00 00       	jmp    c0027332 <__adddf3+0x297>
c002721b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002721e:	f7 d6                	not    esi
c0027220:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027226:	0f 84 b4 04 00 00    	je     c00276e0 <__adddf3+0x645>
c002722c:	0d 00 00 00 80       	or     eax,0x80000000
c0027231:	83 fb 1f             	cmp    ebx,0x1f
c0027234:	7e 48                	jle    c002727e <__adddf3+0x1e3>
c0027236:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027239:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002723c:	83 fb 3f             	cmp    ebx,0x3f
c002723f:	0f 8f 9b 04 00 00    	jg     c00276e0 <__adddf3+0x645>
c0027245:	83 e3 1f             	and    ebx,0x1f
c0027248:	89 d9                	mov    ecx,ebx
c002724a:	89 c7                	mov    edi,eax
c002724c:	d3 ef                	shr    edi,cl
c002724e:	31 db                	xor    ebx,ebx
c0027250:	85 c9                	test   ecx,ecx
c0027252:	74 12                	je     c0027266 <__adddf3+0x1cb>
c0027254:	be 20 00 00 00       	mov    esi,0x20
c0027259:	29 ce                	sub    esi,ecx
c002725b:	89 f1                	mov    ecx,esi
c002725d:	d3 e0                	shl    eax,cl
c002725f:	31 db                	xor    ebx,ebx
c0027261:	85 c0                	test   eax,eax
c0027263:	0f 95 c3             	setne  bl
c0027266:	31 c0                	xor    eax,eax
c0027268:	85 d2                	test   edx,edx
c002726a:	0f 95 c0             	setne  al
c002726d:	09 c7                	or     edi,eax
c002726f:	09 fb                	or     ebx,edi
c0027271:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027274:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027277:	01 da                	add    edx,ebx
c0027279:	83 d6 00             	adc    esi,0x0
c002727c:	eb 39                	jmp    c00272b7 <__adddf3+0x21c>
c002727e:	be 20 00 00 00       	mov    esi,0x20
c0027283:	29 de                	sub    esi,ebx
c0027285:	89 c7                	mov    edi,eax
c0027287:	89 f1                	mov    ecx,esi
c0027289:	d3 e7                	shl    edi,cl
c002728b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002728e:	89 d7                	mov    edi,edx
c0027290:	88 d9                	mov    cl,bl
c0027292:	d3 ef                	shr    edi,cl
c0027294:	89 f9                	mov    ecx,edi
c0027296:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027299:	09 cf                	or     edi,ecx
c002729b:	88 d9                	mov    cl,bl
c002729d:	d3 e8                	shr    eax,cl
c002729f:	89 f1                	mov    ecx,esi
c00272a1:	d3 e2                	shl    edx,cl
c00272a3:	85 d2                	test   edx,edx
c00272a5:	0f 95 c2             	setne  dl
c00272a8:	0f b6 d2             	movzx  edx,dl
c00272ab:	09 d7                	or     edi,edx
c00272ad:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272b0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00272b3:	01 fa                	add    edx,edi
c00272b5:	11 c6                	adc    esi,eax
c00272b7:	89 f0                	mov    eax,esi
c00272b9:	eb 77                	jmp    c0027332 <__adddf3+0x297>
c00272bb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272be:	46                   	inc    esi
c00272bf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272c2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00272c8:	75 41                	jne    c002730b <__adddf3+0x270>
c00272ca:	89 d3                	mov    ebx,edx
c00272cc:	09 c3                	or     ebx,eax
c00272ce:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00272d5:	75 27                	jne    c00272fe <__adddf3+0x263>
c00272d7:	85 db                	test   ebx,ebx
c00272d9:	0f 84 fb 03 00 00    	je     c00276da <__adddf3+0x63f>
c00272df:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00272e2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00272e5:	0f 84 f5 03 00 00    	je     c00276e0 <__adddf3+0x645>
c00272eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00272ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00272f1:	85 c0                	test   eax,eax
c00272f3:	0f 89 91 03 00 00    	jns    c002768a <__adddf3+0x5ef>
c00272f9:	e9 85 03 00 00       	jmp    c0027683 <__adddf3+0x5e8>
c00272fe:	85 db                	test   ebx,ebx
c0027300:	0f 85 da 03 00 00    	jne    c00276e0 <__adddf3+0x645>
c0027306:	e9 cf 03 00 00       	jmp    c00276da <__adddf3+0x63f>
c002730b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002730e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027311:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027314:	f7 d1                	not    ecx
c0027316:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002731c:	0f 84 70 03 00 00    	je     c0027692 <__adddf3+0x5f7>
c0027322:	d1 ea                	shr    edx,1
c0027324:	89 c1                	mov    ecx,eax
c0027326:	c1 e1 1f             	shl    ecx,0x1f
c0027329:	09 ca                	or     edx,ecx
c002732b:	d1 e8                	shr    eax,1
c002732d:	e9 6f 03 00 00       	jmp    c00276a1 <__adddf3+0x606>
c0027332:	85 c0                	test   eax,eax
c0027334:	0f 89 67 03 00 00    	jns    c00276a1 <__adddf3+0x606>
c002733a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002733d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027340:	f7 d1                	not    ecx
c0027342:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027348:	0f 84 44 03 00 00    	je     c0027692 <__adddf3+0x5f7>
c002734e:	89 d1                	mov    ecx,edx
c0027350:	d1 e9                	shr    ecx,1
c0027352:	83 e2 01             	and    edx,0x1
c0027355:	09 ca                	or     edx,ecx
c0027357:	89 c1                	mov    ecx,eax
c0027359:	c1 e1 1f             	shl    ecx,0x1f
c002735c:	09 ca                	or     edx,ecx
c002735e:	d1 e8                	shr    eax,1
c0027360:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027365:	e9 37 03 00 00       	jmp    c00276a1 <__adddf3+0x606>
c002736a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002736d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027373:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027376:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027379:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002737f:	29 de                	sub    esi,ebx
c0027381:	85 f6                	test   esi,esi
c0027383:	0f 8e bd 00 00 00    	jle    c0027446 <__adddf3+0x3ab>
c0027389:	85 db                	test   ebx,ebx
c002738b:	75 17                	jne    c00273a4 <__adddf3+0x309>
c002738d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027390:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027393:	0f 84 47 03 00 00    	je     c00276e0 <__adddf3+0x645>
c0027399:	4e                   	dec    esi
c002739a:	75 20                	jne    c00273bc <__adddf3+0x321>
c002739c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002739f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00273a2:	eb 5b                	jmp    c00273ff <__adddf3+0x364>
c00273a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273a7:	f7 d3                	not    ebx
c00273a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273af:	0f 84 2b 03 00 00    	je     c00276e0 <__adddf3+0x645>
c00273b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00273bc:	83 fe 1f             	cmp    esi,0x1f
c00273bf:	7e 49                	jle    c002740a <__adddf3+0x36f>
c00273c1:	83 fe 3f             	cmp    esi,0x3f
c00273c4:	0f 8f 16 03 00 00    	jg     c00276e0 <__adddf3+0x645>
c00273ca:	83 e6 1f             	and    esi,0x1f
c00273cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273d0:	89 f1                	mov    ecx,esi
c00273d2:	d3 ef                	shr    edi,cl
c00273d4:	31 db                	xor    ebx,ebx
c00273d6:	85 f6                	test   esi,esi
c00273d8:	74 13                	je     c00273ed <__adddf3+0x352>
c00273da:	b9 20 00 00 00       	mov    ecx,0x20
c00273df:	29 f1                	sub    ecx,esi
c00273e1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273e4:	d3 e6                	shl    esi,cl
c00273e6:	31 db                	xor    ebx,ebx
c00273e8:	85 f6                	test   esi,esi
c00273ea:	0f 95 c3             	setne  bl
c00273ed:	31 c9                	xor    ecx,ecx
c00273ef:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00273f3:	0f 95 c1             	setne  cl
c00273f6:	09 cf                	or     edi,ecx
c00273f8:	09 fb                	or     ebx,edi
c00273fa:	29 da                	sub    edx,ebx
c00273fc:	83 d8 00             	sbb    eax,0x0
c00273ff:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027402:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027405:	e9 aa 01 00 00       	jmp    c00275b4 <__adddf3+0x519>
c002740a:	bf 20 00 00 00       	mov    edi,0x20
c002740f:	29 f7                	sub    edi,esi
c0027411:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027414:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027417:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002741a:	d3 e3                	shl    ebx,cl
c002741c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002741f:	89 f1                	mov    ecx,esi
c0027421:	d3 ef                	shr    edi,cl
c0027423:	09 fb                	or     ebx,edi
c0027425:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027428:	89 f1                	mov    ecx,esi
c002742a:	d3 ef                	shr    edi,cl
c002742c:	89 fe                	mov    esi,edi
c002742e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027431:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027434:	d3 e7                	shl    edi,cl
c0027436:	85 ff                	test   edi,edi
c0027438:	0f 95 c1             	setne  cl
c002743b:	0f b6 c9             	movzx  ecx,cl
c002743e:	09 cb                	or     ebx,ecx
c0027440:	29 da                	sub    edx,ebx
c0027442:	19 f0                	sbb    eax,esi
c0027444:	eb b9                	jmp    c00273ff <__adddf3+0x364>
c0027446:	0f 84 cd 00 00 00    	je     c0027519 <__adddf3+0x47e>
c002744c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002744f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027452:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027455:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027459:	75 1b                	jne    c0027476 <__adddf3+0x3db>
c002745b:	89 d6                	mov    esi,edx
c002745d:	09 c6                	or     esi,eax
c002745f:	0f 84 7b 02 00 00    	je     c00276e0 <__adddf3+0x645>
c0027465:	4b                   	dec    ebx
c0027466:	75 24                	jne    c002748c <__adddf3+0x3f1>
c0027468:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002746b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002746e:	29 d1                	sub    ecx,edx
c0027470:	19 c6                	sbb    esi,eax
c0027472:	89 ca                	mov    edx,ecx
c0027474:	eb 61                	jmp    c00274d7 <__adddf3+0x43c>
c0027476:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027479:	f7 d6                	not    esi
c002747b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027481:	0f 84 59 02 00 00    	je     c00276e0 <__adddf3+0x645>
c0027487:	0d 00 00 00 80       	or     eax,0x80000000
c002748c:	83 fb 1f             	cmp    ebx,0x1f
c002748f:	7e 4d                	jle    c00274de <__adddf3+0x443>
c0027491:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027494:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027497:	83 fb 3f             	cmp    ebx,0x3f
c002749a:	0f 8f 40 02 00 00    	jg     c00276e0 <__adddf3+0x645>
c00274a0:	83 e3 1f             	and    ebx,0x1f
c00274a3:	89 d9                	mov    ecx,ebx
c00274a5:	89 c7                	mov    edi,eax
c00274a7:	d3 ef                	shr    edi,cl
c00274a9:	31 db                	xor    ebx,ebx
c00274ab:	85 c9                	test   ecx,ecx
c00274ad:	74 12                	je     c00274c1 <__adddf3+0x426>
c00274af:	be 20 00 00 00       	mov    esi,0x20
c00274b4:	29 ce                	sub    esi,ecx
c00274b6:	89 f1                	mov    ecx,esi
c00274b8:	d3 e0                	shl    eax,cl
c00274ba:	31 db                	xor    ebx,ebx
c00274bc:	85 c0                	test   eax,eax
c00274be:	0f 95 c3             	setne  bl
c00274c1:	31 c0                	xor    eax,eax
c00274c3:	85 d2                	test   edx,edx
c00274c5:	0f 95 c0             	setne  al
c00274c8:	09 c7                	or     edi,eax
c00274ca:	09 fb                	or     ebx,edi
c00274cc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274d2:	29 da                	sub    edx,ebx
c00274d4:	83 de 00             	sbb    esi,0x0
c00274d7:	89 f0                	mov    eax,esi
c00274d9:	e9 d6 00 00 00       	jmp    c00275b4 <__adddf3+0x519>
c00274de:	be 20 00 00 00       	mov    esi,0x20
c00274e3:	29 de                	sub    esi,ebx
c00274e5:	89 c7                	mov    edi,eax
c00274e7:	89 f1                	mov    ecx,esi
c00274e9:	d3 e7                	shl    edi,cl
c00274eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00274ee:	89 d7                	mov    edi,edx
c00274f0:	88 d9                	mov    cl,bl
c00274f2:	d3 ef                	shr    edi,cl
c00274f4:	89 f9                	mov    ecx,edi
c00274f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00274f9:	09 cf                	or     edi,ecx
c00274fb:	88 d9                	mov    cl,bl
c00274fd:	d3 e8                	shr    eax,cl
c00274ff:	89 f1                	mov    ecx,esi
c0027501:	d3 e2                	shl    edx,cl
c0027503:	85 d2                	test   edx,edx
c0027505:	0f 95 c2             	setne  dl
c0027508:	0f b6 d2             	movzx  edx,dl
c002750b:	09 d7                	or     edi,edx
c002750d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027510:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027513:	29 fa                	sub    edx,edi
c0027515:	19 c6                	sbb    esi,eax
c0027517:	eb be                	jmp    c00274d7 <__adddf3+0x43c>
c0027519:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002751c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002751f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027525:	75 6a                	jne    c0027591 <__adddf3+0x4f6>
c0027527:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002752b:	75 58                	jne    c0027585 <__adddf3+0x4ea>
c002752d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027530:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027533:	89 d6                	mov    esi,edx
c0027535:	09 c6                	or     esi,eax
c0027537:	75 17                	jne    c0027550 <__adddf3+0x4b5>
c0027539:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002753c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002753f:	85 db                	test   ebx,ebx
c0027541:	0f 85 99 01 00 00    	jne    c00276e0 <__adddf3+0x645>
c0027547:	31 ff                	xor    edi,edi
c0027549:	31 c9                	xor    ecx,ecx
c002754b:	e9 90 01 00 00       	jmp    c00276e0 <__adddf3+0x645>
c0027550:	85 db                	test   ebx,ebx
c0027552:	0f 84 88 01 00 00    	je     c00276e0 <__adddf3+0x645>
c0027558:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002755b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002755e:	85 c0                	test   eax,eax
c0027560:	79 10                	jns    c0027572 <__adddf3+0x4d7>
c0027562:	31 c9                	xor    ecx,ecx
c0027564:	f7 da                	neg    edx
c0027566:	0f 95 c1             	setne  cl
c0027569:	01 c8                	add    eax,ecx
c002756b:	f7 d8                	neg    eax
c002756d:	e9 2f 01 00 00       	jmp    c00276a1 <__adddf3+0x606>
c0027572:	31 ff                	xor    edi,edi
c0027574:	31 c9                	xor    ecx,ecx
c0027576:	89 c3                	mov    ebx,eax
c0027578:	09 d3                	or     ebx,edx
c002757a:	0f 84 60 01 00 00    	je     c00276e0 <__adddf3+0x645>
c0027580:	e9 05 01 00 00       	jmp    c002768a <__adddf3+0x5ef>
c0027585:	31 ff                	xor    edi,edi
c0027587:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002758c:	e9 4f 01 00 00       	jmp    c00276e0 <__adddf3+0x645>
c0027591:	89 c1                	mov    ecx,eax
c0027593:	89 d0                	mov    eax,edx
c0027595:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027598:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002759b:	89 ca                	mov    edx,ecx
c002759d:	85 c9                	test   ecx,ecx
c002759f:	79 2c                	jns    c00275cd <__adddf3+0x532>
c00275a1:	31 c9                	xor    ecx,ecx
c00275a3:	f7 d8                	neg    eax
c00275a5:	0f 95 c1             	setne  cl
c00275a8:	01 ca                	add    edx,ecx
c00275aa:	f7 da                	neg    edx
c00275ac:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00275af:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275b2:	eb 19                	jmp    c00275cd <__adddf3+0x532>
c00275b4:	85 c0                	test   eax,eax
c00275b6:	0f 89 e5 00 00 00    	jns    c00276a1 <__adddf3+0x606>
c00275bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00275c1:	89 c1                	mov    ecx,eax
c00275c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00275c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00275c9:	89 d0                	mov    eax,edx
c00275cb:	89 ca                	mov    edx,ecx
c00275cd:	85 d2                	test   edx,edx
c00275cf:	74 59                	je     c002762a <__adddf3+0x58f>
c00275d1:	0f bd da             	bsr    ebx,edx
c00275d4:	83 f3 1f             	xor    ebx,0x1f
c00275d7:	88 d9                	mov    cl,bl
c00275d9:	d3 e2                	shl    edx,cl
c00275db:	bf 20 00 00 00       	mov    edi,0x20
c00275e0:	89 f9                	mov    ecx,edi
c00275e2:	29 d9                	sub    ecx,ebx
c00275e4:	89 c6                	mov    esi,eax
c00275e6:	d3 ee                	shr    esi,cl
c00275e8:	09 d6                	or     esi,edx
c00275ea:	88 d9                	mov    cl,bl
c00275ec:	d3 e0                	shl    eax,cl
c00275ee:	89 c2                	mov    edx,eax
c00275f0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00275f3:	25 ff 07 00 00       	and    eax,0x7ff
c00275f8:	39 d8                	cmp    eax,ebx
c00275fa:	7f 22                	jg     c002761e <__adddf3+0x583>
c00275fc:	29 c3                	sub    ebx,eax
c00275fe:	43                   	inc    ebx
c00275ff:	88 d9                	mov    cl,bl
c0027601:	d3 ea                	shr    edx,cl
c0027603:	29 df                	sub    edi,ebx
c0027605:	89 f9                	mov    ecx,edi
c0027607:	89 f0                	mov    eax,esi
c0027609:	d3 e0                	shl    eax,cl
c002760b:	09 c2                	or     edx,eax
c002760d:	89 f0                	mov    eax,esi
c002760f:	88 d9                	mov    cl,bl
c0027611:	d3 e8                	shr    eax,cl
c0027613:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027616:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002761c:	eb 6f                	jmp    c002768d <__adddf3+0x5f2>
c002761e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027621:	29 d8                	sub    eax,ebx
c0027623:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027626:	89 f0                	mov    eax,esi
c0027628:	eb 59                	jmp    c0027683 <__adddf3+0x5e8>
c002762a:	85 c0                	test   eax,eax
c002762c:	74 6a                	je     c0027698 <__adddf3+0x5fd>
c002762e:	0f bd c8             	bsr    ecx,eax
c0027631:	83 f1 1f             	xor    ecx,0x1f
c0027634:	d3 e0                	shl    eax,cl
c0027636:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027639:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002763f:	83 c1 20             	add    ecx,0x20
c0027642:	39 cb                	cmp    ebx,ecx
c0027644:	7f 35                	jg     c002767b <__adddf3+0x5e0>
c0027646:	29 d9                	sub    ecx,ebx
c0027648:	8d 71 01             	lea    esi,[ecx+0x1]
c002764b:	83 fe 1f             	cmp    esi,0x1f
c002764e:	7e 09                	jle    c0027659 <__adddf3+0x5be>
c0027650:	83 e9 1f             	sub    ecx,0x1f
c0027653:	d3 e8                	shr    eax,cl
c0027655:	89 c3                	mov    ebx,eax
c0027657:	eb 11                	jmp    c002766a <__adddf3+0x5cf>
c0027659:	b9 20 00 00 00       	mov    ecx,0x20
c002765e:	29 f1                	sub    ecx,esi
c0027660:	89 c3                	mov    ebx,eax
c0027662:	d3 e3                	shl    ebx,cl
c0027664:	89 f1                	mov    ecx,esi
c0027666:	d3 e8                	shr    eax,cl
c0027668:	89 c2                	mov    edx,eax
c002766a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002766d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027672:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027675:	89 d0                	mov    eax,edx
c0027677:	89 da                	mov    edx,ebx
c0027679:	eb 26                	jmp    c00276a1 <__adddf3+0x606>
c002767b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002767e:	29 cf                	sub    edi,ecx
c0027680:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027683:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027688:	eb 17                	jmp    c00276a1 <__adddf3+0x606>
c002768a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002768d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027690:	eb 0f                	jmp    c00276a1 <__adddf3+0x606>
c0027692:	31 d2                	xor    edx,edx
c0027694:	31 c0                	xor    eax,eax
c0027696:	eb 09                	jmp    c00276a1 <__adddf3+0x606>
c0027698:	89 c2                	mov    edx,eax
c002769a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00276a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276a4:	c1 e1 14             	shl    ecx,0x14
c00276a7:	89 c3                	mov    ebx,eax
c00276a9:	c1 eb 0b             	shr    ebx,0xb
c00276ac:	09 d9                	or     ecx,ebx
c00276ae:	89 d3                	mov    ebx,edx
c00276b0:	c1 eb 0b             	shr    ebx,0xb
c00276b3:	c1 e0 15             	shl    eax,0x15
c00276b6:	09 d8                	or     eax,ebx
c00276b8:	89 c7                	mov    edi,eax
c00276ba:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00276c0:	0f 95 c0             	setne  al
c00276c3:	89 c6                	mov    esi,eax
c00276c5:	09 f3                	or     ebx,esi
c00276c7:	83 e3 01             	and    ebx,0x1
c00276ca:	c1 ea 0a             	shr    edx,0xa
c00276cd:	21 da                	and    edx,ebx
c00276cf:	89 f8                	mov    eax,edi
c00276d1:	01 d0                	add    eax,edx
c00276d3:	83 d1 00             	adc    ecx,0x0
c00276d6:	89 c7                	mov    edi,eax
c00276d8:	eb 06                	jmp    c00276e0 <__adddf3+0x645>
c00276da:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276dd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276e0:	89 f8                	mov    eax,edi
c00276e2:	89 ca                	mov    edx,ecx
c00276e4:	83 c4 24             	add    esp,0x24
c00276e7:	5b                   	pop    ebx
c00276e8:	5e                   	pop    esi
c00276e9:	5f                   	pop    edi
c00276ea:	5d                   	pop    ebp
c00276eb:	c3                   	ret    

c00276ec <__subdf3>:
c00276ec:	55                   	push   ebp
c00276ed:	89 e5                	mov    ebp,esp
c00276ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00276f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00276f5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00276fb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00276fe:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027701:	5d                   	pop    ebp
c0027702:	e9 94 f9 ff ff       	jmp    c002709b <__adddf3>

c0027707 <__negdf2>:
c0027707:	55                   	push   ebp
c0027708:	89 e5                	mov    ebp,esp
c002770a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002770d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027710:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027716:	5d                   	pop    ebp
c0027717:	c3                   	ret    

c0027718 <__muldf3>:
c0027718:	55                   	push   ebp
c0027719:	89 e5                	mov    ebp,esp
c002771b:	57                   	push   edi
c002771c:	56                   	push   esi
c002771d:	53                   	push   ebx
c002771e:	83 ec 24             	sub    esp,0x24
c0027721:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027724:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027727:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002772a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002772d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027730:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027733:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027736:	89 c8                	mov    eax,ecx
c0027738:	c1 f8 14             	sar    eax,0x14
c002773b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002773e:	89 f8                	mov    eax,edi
c0027740:	89 fb                	mov    ebx,edi
c0027742:	c1 e3 0b             	shl    ebx,0xb
c0027745:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027748:	c1 e1 0b             	shl    ecx,0xb
c002774b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027751:	c1 e8 15             	shr    eax,0x15
c0027754:	09 c1                	or     ecx,eax
c0027756:	89 d6                	mov    esi,edx
c0027758:	89 d0                	mov    eax,edx
c002775a:	c1 f8 14             	sar    eax,0x14
c002775d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027760:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027763:	89 c3                	mov    ebx,eax
c0027765:	c1 e3 0b             	shl    ebx,0xb
c0027768:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002776b:	c1 e6 0b             	shl    esi,0xb
c002776e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027774:	c1 e8 15             	shr    eax,0x15
c0027777:	09 c6                	or     esi,eax
c0027779:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002777c:	25 ff 07 00 00       	and    eax,0x7ff
c0027781:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027784:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027787:	25 ff 07 00 00       	and    eax,0x7ff
c002778c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002778f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027792:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027795:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002779c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002779f:	40                   	inc    eax
c00277a0:	a9 fe 07 00 00       	test   eax,0x7fe
c00277a5:	0f 85 8d 00 00 00    	jne    c0027838 <__muldf3+0x120>
c00277ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277ae:	09 c8                	or     eax,ecx
c00277b0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00277b4:	74 44                	je     c00277fa <__muldf3+0xe2>
c00277b6:	85 c0                	test   eax,eax
c00277b8:	0f 85 31 02 00 00    	jne    c00279ef <__muldf3+0x2d7>
c00277be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00277c1:	40                   	inc    eax
c00277c2:	a9 fe 07 00 00       	test   eax,0x7fe
c00277c7:	75 13                	jne    c00277dc <__muldf3+0xc4>
c00277c9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277cc:	09 f1                	or     ecx,esi
c00277ce:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277d2:	74 22                	je     c00277f6 <__muldf3+0xde>
c00277d4:	85 c9                	test   ecx,ecx
c00277d6:	0f 85 0d 02 00 00    	jne    c00279e9 <__muldf3+0x2d1>
c00277dc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00277e0:	0f 89 09 02 00 00    	jns    c00279ef <__muldf3+0x2d7>
c00277e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277e9:	05 00 00 00 80       	add    eax,0x80000000
c00277ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00277f1:	e9 f9 01 00 00       	jmp    c00279ef <__muldf3+0x2d7>
c00277f6:	85 c9                	test   ecx,ecx
c00277f8:	eb 2e                	jmp    c0027828 <__muldf3+0x110>
c00277fa:	85 c0                	test   eax,eax
c00277fc:	74 20                	je     c002781e <__muldf3+0x106>
c00277fe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027801:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027804:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027807:	c1 ef 1f             	shr    edi,0x1f
c002780a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002780d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027810:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027813:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027816:	09 f9                	or     ecx,edi
c0027818:	78 1e                	js     c0027838 <__muldf3+0x120>
c002781a:	89 c3                	mov    ebx,eax
c002781c:	eb e0                	jmp    c00277fe <__muldf3+0xe6>
c002781e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027821:	f7 d0                	not    eax
c0027823:	a9 ff 07 00 00       	test   eax,0x7ff
c0027828:	75 b2                	jne    c00277dc <__muldf3+0xc4>
c002782a:	31 ff                	xor    edi,edi
c002782c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027833:	e9 b7 01 00 00       	jmp    c00279ef <__muldf3+0x2d7>
c0027838:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002783b:	40                   	inc    eax
c002783c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027841:	75 57                	jne    c002789a <__muldf3+0x182>
c0027843:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027846:	09 f0                	or     eax,esi
c0027848:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002784c:	74 23                	je     c0027871 <__muldf3+0x159>
c002784e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027852:	0f 89 91 01 00 00    	jns    c00279e9 <__muldf3+0x2d1>
c0027858:	85 c0                	test   eax,eax
c002785a:	0f 85 89 01 00 00    	jne    c00279e9 <__muldf3+0x2d1>
c0027860:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027863:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027869:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002786c:	e9 7e 01 00 00       	jmp    c00279ef <__muldf3+0x2d7>
c0027871:	85 c0                	test   eax,eax
c0027873:	75 0c                	jne    c0027881 <__muldf3+0x169>
c0027875:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027879:	0f 89 6a 01 00 00    	jns    c00279e9 <__muldf3+0x2d1>
c002787f:	eb df                	jmp    c0027860 <__muldf3+0x148>
c0027881:	01 f6                	add    esi,esi
c0027883:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027886:	c1 ea 1f             	shr    edx,0x1f
c0027889:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002788c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002788f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027892:	09 d6                	or     esi,edx
c0027894:	78 04                	js     c002789a <__muldf3+0x182>
c0027896:	89 c3                	mov    ebx,eax
c0027898:	eb e7                	jmp    c0027881 <__muldf3+0x169>
c002789a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00278a0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00278a6:	89 c8                	mov    eax,ecx
c00278a8:	f7 e6                	mul    esi
c00278aa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00278ad:	89 c7                	mov    edi,eax
c00278af:	89 c8                	mov    eax,ecx
c00278b1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00278b4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00278b7:	89 c1                	mov    ecx,eax
c00278b9:	89 f0                	mov    eax,esi
c00278bb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00278be:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00278c1:	89 c6                	mov    esi,eax
c00278c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278c6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00278c9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00278cc:	31 c0                	xor    eax,eax
c00278ce:	01 f1                	add    ecx,esi
c00278d0:	0f 92 c0             	setb   al
c00278d3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00278d6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00278d9:	83 d6 00             	adc    esi,0x0
c00278dc:	01 c7                	add    edi,eax
c00278de:	83 d6 00             	adc    esi,0x0
c00278e1:	01 ca                	add    edx,ecx
c00278e3:	0f 92 c1             	setb   cl
c00278e6:	0f b6 c9             	movzx  ecx,cl
c00278e9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00278ec:	83 d6 00             	adc    esi,0x0
c00278ef:	01 cf                	add    edi,ecx
c00278f1:	83 d6 00             	adc    esi,0x0
c00278f4:	31 c9                	xor    ecx,ecx
c00278f6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00278f9:	0f 95 c1             	setne  cl
c00278fc:	09 cf                	or     edi,ecx
c00278fe:	85 f6                	test   esi,esi
c0027900:	78 0c                	js     c002790e <__muldf3+0x1f6>
c0027902:	01 f6                	add    esi,esi
c0027904:	89 f8                	mov    eax,edi
c0027906:	c1 e8 1f             	shr    eax,0x1f
c0027909:	09 c6                	or     esi,eax
c002790b:	01 ff                	add    edi,edi
c002790d:	4b                   	dec    ebx
c002790e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027914:	0f 8f 85 00 00 00    	jg     c002799f <__muldf3+0x287>
c002791a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027920:	85 db                	test   ebx,ebx
c0027922:	0f 8f 84 00 00 00    	jg     c00279ac <__muldf3+0x294>
c0027928:	83 fb cc             	cmp    ebx,0xffffffcc
c002792b:	7c 79                	jl     c00279a6 <__muldf3+0x28e>
c002792d:	ba 01 00 00 00       	mov    edx,0x1
c0027932:	29 da                	sub    edx,ebx
c0027934:	81 ce 00 00 00 80    	or     esi,0x80000000
c002793a:	83 fa 1f             	cmp    edx,0x1f
c002793d:	7e 30                	jle    c002796f <__muldf3+0x257>
c002793f:	83 fa 20             	cmp    edx,0x20
c0027942:	75 0b                	jne    c002794f <__muldf3+0x237>
c0027944:	31 c0                	xor    eax,eax
c0027946:	85 ff                	test   edi,edi
c0027948:	0f 95 c0             	setne  al
c002794b:	89 c7                	mov    edi,eax
c002794d:	eb 1a                	jmp    c0027969 <__muldf3+0x251>
c002794f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027952:	89 f0                	mov    eax,esi
c0027954:	d3 e0                	shl    eax,cl
c0027956:	09 f8                	or     eax,edi
c0027958:	0f 95 c0             	setne  al
c002795b:	0f b6 c0             	movzx  eax,al
c002795e:	89 c7                	mov    edi,eax
c0027960:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027965:	29 d9                	sub    ecx,ebx
c0027967:	d3 ee                	shr    esi,cl
c0027969:	09 f7                	or     edi,esi
c002796b:	31 db                	xor    ebx,ebx
c002796d:	eb 3b                	jmp    c00279aa <__muldf3+0x292>
c002796f:	83 c3 1f             	add    ebx,0x1f
c0027972:	89 f0                	mov    eax,esi
c0027974:	88 d9                	mov    cl,bl
c0027976:	d3 e0                	shl    eax,cl
c0027978:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002797b:	89 f8                	mov    eax,edi
c002797d:	88 d1                	mov    cl,dl
c002797f:	d3 e8                	shr    eax,cl
c0027981:	89 c1                	mov    ecx,eax
c0027983:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027986:	09 c8                	or     eax,ecx
c0027988:	88 d9                	mov    cl,bl
c002798a:	d3 e7                	shl    edi,cl
c002798c:	31 db                	xor    ebx,ebx
c002798e:	85 ff                	test   edi,edi
c0027990:	0f 95 c3             	setne  bl
c0027993:	89 df                	mov    edi,ebx
c0027995:	09 c7                	or     edi,eax
c0027997:	88 d1                	mov    cl,dl
c0027999:	d3 ee                	shr    esi,cl
c002799b:	31 db                	xor    ebx,ebx
c002799d:	eb 0d                	jmp    c00279ac <__muldf3+0x294>
c002799f:	bb ff 07 00 00       	mov    ebx,0x7ff
c00279a4:	eb 02                	jmp    c00279a8 <__muldf3+0x290>
c00279a6:	31 db                	xor    ebx,ebx
c00279a8:	31 ff                	xor    edi,edi
c00279aa:	31 f6                	xor    esi,esi
c00279ac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279af:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00279b2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00279b7:	09 c3                	or     ebx,eax
c00279b9:	c1 e3 14             	shl    ebx,0x14
c00279bc:	89 f0                	mov    eax,esi
c00279be:	c1 e8 0b             	shr    eax,0xb
c00279c1:	09 c3                	or     ebx,eax
c00279c3:	89 f8                	mov    eax,edi
c00279c5:	c1 e8 0b             	shr    eax,0xb
c00279c8:	c1 e6 15             	shl    esi,0x15
c00279cb:	09 c6                	or     esi,eax
c00279cd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00279d3:	0f 95 c1             	setne  cl
c00279d6:	09 c8                	or     eax,ecx
c00279d8:	83 e0 01             	and    eax,0x1
c00279db:	c1 ef 0a             	shr    edi,0xa
c00279de:	21 c7                	and    edi,eax
c00279e0:	01 f7                	add    edi,esi
c00279e2:	83 d3 00             	adc    ebx,0x0
c00279e5:	89 da                	mov    edx,ebx
c00279e7:	eb 03                	jmp    c00279ec <__muldf3+0x2d4>
c00279e9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00279ec:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00279ef:	89 f8                	mov    eax,edi
c00279f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00279f4:	83 c4 24             	add    esp,0x24
c00279f7:	5b                   	pop    ebx
c00279f8:	5e                   	pop    esi
c00279f9:	5f                   	pop    edi
c00279fa:	5d                   	pop    ebp
c00279fb:	c3                   	ret    

c00279fc <__divdf3>:
c00279fc:	55                   	push   ebp
c00279fd:	89 e5                	mov    ebp,esp
c00279ff:	57                   	push   edi
c0027a00:	56                   	push   esi
c0027a01:	53                   	push   ebx
c0027a02:	83 ec 2c             	sub    esp,0x2c
c0027a05:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a08:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a0e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027a11:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027a14:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027a17:	89 ce                	mov    esi,ecx
c0027a19:	89 c8                	mov    eax,ecx
c0027a1b:	c1 f8 14             	sar    eax,0x14
c0027a1e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027a21:	89 f8                	mov    eax,edi
c0027a23:	89 fb                	mov    ebx,edi
c0027a25:	c1 e3 0b             	shl    ebx,0xb
c0027a28:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027a2b:	c1 e6 0b             	shl    esi,0xb
c0027a2e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027a34:	c1 e8 15             	shr    eax,0x15
c0027a37:	09 c6                	or     esi,eax
c0027a39:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027a3c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027a3f:	89 c2                	mov    edx,eax
c0027a41:	c1 fa 14             	sar    edx,0x14
c0027a44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027a47:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027a4a:	89 de                	mov    esi,ebx
c0027a4c:	c1 e6 0b             	shl    esi,0xb
c0027a4f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027a52:	c1 e0 0b             	shl    eax,0xb
c0027a55:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027a5a:	c1 eb 15             	shr    ebx,0x15
c0027a5d:	09 d8                	or     eax,ebx
c0027a5f:	89 c2                	mov    edx,eax
c0027a61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a64:	25 ff 07 00 00       	and    eax,0x7ff
c0027a69:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027a6c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a6f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a75:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027a78:	29 d8                	sub    eax,ebx
c0027a7a:	05 ff 03 00 00       	add    eax,0x3ff
c0027a7f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027a82:	46                   	inc    esi
c0027a83:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027a89:	0f 85 a5 00 00 00    	jne    c0027b34 <__divdf3+0x138>
c0027a8f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a92:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027a95:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027a99:	74 2a                	je     c0027ac5 <__divdf3+0xc9>
c0027a9b:	85 f6                	test   esi,esi
c0027a9d:	0f 85 cc 02 00 00    	jne    c0027d6f <__divdf3+0x373>
c0027aa3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027aa6:	40                   	inc    eax
c0027aa7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027aac:	75 26                	jne    c0027ad4 <__divdf3+0xd8>
c0027aae:	85 db                	test   ebx,ebx
c0027ab0:	74 22                	je     c0027ad4 <__divdf3+0xd8>
c0027ab2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ab5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ab8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027abb:	09 d0                	or     eax,edx
c0027abd:	0f 85 ac 02 00 00    	jne    c0027d6f <__divdf3+0x373>
c0027ac3:	eb 63                	jmp    c0027b28 <__divdf3+0x12c>
c0027ac5:	85 f6                	test   esi,esi
c0027ac7:	75 22                	jne    c0027aeb <__divdf3+0xef>
c0027ac9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027acc:	40                   	inc    eax
c0027acd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ad2:	74 36                	je     c0027b0a <__divdf3+0x10e>
c0027ad4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ad8:	0f 89 91 02 00 00    	jns    c0027d6f <__divdf3+0x373>
c0027ade:	89 f8                	mov    eax,edi
c0027ae0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ae6:	e9 80 02 00 00       	jmp    c0027d6b <__divdf3+0x36f>
c0027aeb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027aee:	01 f6                	add    esi,esi
c0027af0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027af3:	c1 ef 1f             	shr    edi,0x1f
c0027af6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027af9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027afc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027aff:	09 f7                	or     edi,esi
c0027b01:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027b04:	78 2e                	js     c0027b34 <__divdf3+0x138>
c0027b06:	89 c8                	mov    eax,ecx
c0027b08:	eb e1                	jmp    c0027aeb <__divdf3+0xef>
c0027b0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b0d:	09 d0                	or     eax,edx
c0027b0f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027b13:	74 0f                	je     c0027b24 <__divdf3+0x128>
c0027b15:	85 c0                	test   eax,eax
c0027b17:	74 bb                	je     c0027ad4 <__divdf3+0xd8>
c0027b19:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b1c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b1f:	e9 4b 02 00 00       	jmp    c0027d6f <__divdf3+0x373>
c0027b24:	85 c0                	test   eax,eax
c0027b26:	75 ac                	jne    c0027ad4 <__divdf3+0xd8>
c0027b28:	31 ff                	xor    edi,edi
c0027b2a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b2f:	e9 3b 02 00 00       	jmp    c0027d6f <__divdf3+0x373>
c0027b34:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b37:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027b3a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027b40:	75 6b                	jne    c0027bad <__divdf3+0x1b1>
c0027b42:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b45:	09 d6                	or     esi,edx
c0027b47:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027b4b:	74 28                	je     c0027b75 <__divdf3+0x179>
c0027b4d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b50:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b53:	85 f6                	test   esi,esi
c0027b55:	0f 85 14 02 00 00    	jne    c0027d6f <__divdf3+0x373>
c0027b5b:	31 ff                	xor    edi,edi
c0027b5d:	31 c9                	xor    ecx,ecx
c0027b5f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b62:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027b65:	0f 89 04 02 00 00    	jns    c0027d6f <__divdf3+0x373>
c0027b6b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027b70:	e9 fa 01 00 00       	jmp    c0027d6f <__divdf3+0x373>
c0027b75:	85 f6                	test   esi,esi
c0027b77:	75 1b                	jne    c0027b94 <__divdf3+0x198>
c0027b79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b7c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027b7f:	25 00 00 00 80       	and    eax,0x80000000
c0027b84:	31 c9                	xor    ecx,ecx
c0027b86:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027b8b:	89 cf                	mov    edi,ecx
c0027b8d:	89 c1                	mov    ecx,eax
c0027b8f:	e9 db 01 00 00       	jmp    c0027d6f <__divdf3+0x373>
c0027b94:	01 d2                	add    edx,edx
c0027b96:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027b99:	c1 eb 1f             	shr    ebx,0x1f
c0027b9c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b9f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027ba2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027ba5:	09 da                	or     edx,ebx
c0027ba7:	78 04                	js     c0027bad <__divdf3+0x1b1>
c0027ba9:	89 c8                	mov    eax,ecx
c0027bab:	eb e7                	jmp    c0027b94 <__divdf3+0x198>
c0027bad:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bb0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027bb6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027bbc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027bbf:	39 d6                	cmp    esi,edx
c0027bc1:	77 0d                	ja     c0027bd0 <__divdf3+0x1d4>
c0027bc3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027bc6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027bc9:	72 1b                	jb     c0027be6 <__divdf3+0x1ea>
c0027bcb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027bce:	75 16                	jne    c0027be6 <__divdf3+0x1ea>
c0027bd0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027bd3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027bd6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027bd9:	83 de 00             	sbb    esi,0x0
c0027bdc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027bdf:	ba 01 00 00 00       	mov    edx,0x1
c0027be4:	eb 02                	jmp    c0027be8 <__divdf3+0x1ec>
c0027be6:	31 d2                	xor    edx,edx
c0027be8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027bef:	31 ff                	xor    edi,edi
c0027bf1:	01 ff                	add    edi,edi
c0027bf3:	89 d1                	mov    ecx,edx
c0027bf5:	c1 e9 1f             	shr    ecx,0x1f
c0027bf8:	09 cf                	or     edi,ecx
c0027bfa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027bfd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027c00:	89 da                	mov    edx,ebx
c0027c02:	89 f3                	mov    ebx,esi
c0027c04:	8d 34 36             	lea    esi,[esi+esi*1]
c0027c07:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c0a:	c1 e9 1f             	shr    ecx,0x1f
c0027c0d:	09 ce                	or     esi,ecx
c0027c0f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c12:	01 c9                	add    ecx,ecx
c0027c14:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027c17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027c1a:	85 db                	test   ebx,ebx
c0027c1c:	78 29                	js     c0027c47 <__divdf3+0x24b>
c0027c1e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027c21:	72 07                	jb     c0027c2a <__divdf3+0x22e>
c0027c23:	75 3c                	jne    c0027c61 <__divdf3+0x265>
c0027c25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027c28:	77 37                	ja     c0027c61 <__divdf3+0x265>
c0027c2a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c2d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027c30:	31 d2                	xor    edx,edx
c0027c32:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027c35:	0f 97 c2             	seta   dl
c0027c38:	29 d6                	sub    esi,edx
c0027c3a:	89 d9                	mov    ecx,ebx
c0027c3c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027c3f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027c42:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027c45:	eb 17                	jmp    c0027c5e <__divdf3+0x262>
c0027c47:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c4a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027c50:	0f 97 c1             	seta   cl
c0027c53:	0f b6 c9             	movzx  ecx,cl
c0027c56:	29 ce                	sub    esi,ecx
c0027c58:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027c5b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027c5e:	83 ca 01             	or     edx,0x1
c0027c61:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027c64:	75 8b                	jne    c0027bf1 <__divdf3+0x1f5>
c0027c66:	c1 e7 09             	shl    edi,0x9
c0027c69:	89 d1                	mov    ecx,edx
c0027c6b:	c1 e9 17             	shr    ecx,0x17
c0027c6e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c71:	09 f3                	or     ebx,esi
c0027c73:	0f 95 c3             	setne  bl
c0027c76:	0f b6 db             	movzx  ebx,bl
c0027c79:	c1 e2 09             	shl    edx,0x9
c0027c7c:	09 d3                	or     ebx,edx
c0027c7e:	89 ca                	mov    edx,ecx
c0027c80:	09 fa                	or     edx,edi
c0027c82:	78 0c                	js     c0027c90 <__divdf3+0x294>
c0027c84:	01 d2                	add    edx,edx
c0027c86:	89 d9                	mov    ecx,ebx
c0027c88:	c1 e9 1f             	shr    ecx,0x1f
c0027c8b:	09 ca                	or     edx,ecx
c0027c8d:	01 db                	add    ebx,ebx
c0027c8f:	48                   	dec    eax
c0027c90:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027c95:	0f 8f 83 00 00 00    	jg     c0027d1e <__divdf3+0x322>
c0027c9b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ca1:	85 c0                	test   eax,eax
c0027ca3:	0f 8f 82 00 00 00    	jg     c0027d2b <__divdf3+0x32f>
c0027ca9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027cac:	7c 77                	jl     c0027d25 <__divdf3+0x329>
c0027cae:	be 01 00 00 00       	mov    esi,0x1
c0027cb3:	29 c6                	sub    esi,eax
c0027cb5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027cbb:	83 fe 1f             	cmp    esi,0x1f
c0027cbe:	7e 2f                	jle    c0027cef <__divdf3+0x2f3>
c0027cc0:	83 fe 20             	cmp    esi,0x20
c0027cc3:	75 0a                	jne    c0027ccf <__divdf3+0x2d3>
c0027cc5:	85 db                	test   ebx,ebx
c0027cc7:	0f 95 c3             	setne  bl
c0027cca:	0f b6 db             	movzx  ebx,bl
c0027ccd:	eb 1a                	jmp    c0027ce9 <__divdf3+0x2ed>
c0027ccf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027cd2:	89 d7                	mov    edi,edx
c0027cd4:	d3 e7                	shl    edi,cl
c0027cd6:	89 f9                	mov    ecx,edi
c0027cd8:	09 d9                	or     ecx,ebx
c0027cda:	0f 95 c3             	setne  bl
c0027cdd:	0f b6 db             	movzx  ebx,bl
c0027ce0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ce5:	29 c1                	sub    ecx,eax
c0027ce7:	d3 ea                	shr    edx,cl
c0027ce9:	09 d3                	or     ebx,edx
c0027ceb:	31 c0                	xor    eax,eax
c0027ced:	eb 3a                	jmp    c0027d29 <__divdf3+0x32d>
c0027cef:	83 c0 1f             	add    eax,0x1f
c0027cf2:	89 d7                	mov    edi,edx
c0027cf4:	88 c1                	mov    cl,al
c0027cf6:	d3 e7                	shl    edi,cl
c0027cf8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027cfb:	89 df                	mov    edi,ebx
c0027cfd:	89 f1                	mov    ecx,esi
c0027cff:	d3 ef                	shr    edi,cl
c0027d01:	89 f9                	mov    ecx,edi
c0027d03:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d06:	09 cf                	or     edi,ecx
c0027d08:	88 c1                	mov    cl,al
c0027d0a:	d3 e3                	shl    ebx,cl
c0027d0c:	85 db                	test   ebx,ebx
c0027d0e:	0f 95 c3             	setne  bl
c0027d11:	0f b6 db             	movzx  ebx,bl
c0027d14:	09 fb                	or     ebx,edi
c0027d16:	89 f1                	mov    ecx,esi
c0027d18:	d3 ea                	shr    edx,cl
c0027d1a:	31 c0                	xor    eax,eax
c0027d1c:	eb 0d                	jmp    c0027d2b <__divdf3+0x32f>
c0027d1e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027d23:	eb 02                	jmp    c0027d27 <__divdf3+0x32b>
c0027d25:	31 c0                	xor    eax,eax
c0027d27:	31 db                	xor    ebx,ebx
c0027d29:	31 d2                	xor    edx,edx
c0027d2b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027d2e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027d31:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027d37:	09 c8                	or     eax,ecx
c0027d39:	c1 e0 14             	shl    eax,0x14
c0027d3c:	89 d1                	mov    ecx,edx
c0027d3e:	c1 e9 0b             	shr    ecx,0xb
c0027d41:	09 c8                	or     eax,ecx
c0027d43:	89 c6                	mov    esi,eax
c0027d45:	89 d9                	mov    ecx,ebx
c0027d47:	c1 e9 0b             	shr    ecx,0xb
c0027d4a:	c1 e2 15             	shl    edx,0x15
c0027d4d:	09 ca                	or     edx,ecx
c0027d4f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027d55:	0f 95 c0             	setne  al
c0027d58:	09 c1                	or     ecx,eax
c0027d5a:	83 e1 01             	and    ecx,0x1
c0027d5d:	c1 eb 0a             	shr    ebx,0xa
c0027d60:	21 cb                	and    ebx,ecx
c0027d62:	01 d3                	add    ebx,edx
c0027d64:	89 d8                	mov    eax,ebx
c0027d66:	83 d6 00             	adc    esi,0x0
c0027d69:	89 f2                	mov    edx,esi
c0027d6b:	89 c7                	mov    edi,eax
c0027d6d:	89 d1                	mov    ecx,edx
c0027d6f:	89 f8                	mov    eax,edi
c0027d71:	89 ca                	mov    edx,ecx
c0027d73:	83 c4 2c             	add    esp,0x2c
c0027d76:	5b                   	pop    ebx
c0027d77:	5e                   	pop    esi
c0027d78:	5f                   	pop    edi
c0027d79:	5d                   	pop    ebp
c0027d7a:	c3                   	ret    

c0027d7b <__floatsidf>:
c0027d7b:	55                   	push   ebp
c0027d7c:	89 e5                	mov    ebp,esp
c0027d7e:	56                   	push   esi
c0027d7f:	53                   	push   ebx
c0027d80:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027d83:	85 db                	test   ebx,ebx
c0027d85:	7e 15                	jle    c0027d9c <__floatsidf+0x21>
c0027d87:	0f bd cb             	bsr    ecx,ebx
c0027d8a:	83 f1 1f             	xor    ecx,0x1f
c0027d8d:	d3 e3                	shl    ebx,cl
c0027d8f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027d95:	b8 1e 04 00 00       	mov    eax,0x41e
c0027d9a:	eb 21                	jmp    c0027dbd <__floatsidf+0x42>
c0027d9c:	b8 00 00 00 00       	mov    eax,0x0
c0027da1:	ba 00 00 00 00       	mov    edx,0x0
c0027da6:	74 2a                	je     c0027dd2 <__floatsidf+0x57>
c0027da8:	f7 db                	neg    ebx
c0027daa:	0f bd cb             	bsr    ecx,ebx
c0027dad:	83 f1 1f             	xor    ecx,0x1f
c0027db0:	d3 e3                	shl    ebx,cl
c0027db2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027db8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027dbd:	29 c8                	sub    eax,ecx
c0027dbf:	c1 e0 14             	shl    eax,0x14
c0027dc2:	89 c1                	mov    ecx,eax
c0027dc4:	89 de                	mov    esi,ebx
c0027dc6:	c1 ee 0b             	shr    esi,0xb
c0027dc9:	09 f1                	or     ecx,esi
c0027dcb:	89 ca                	mov    edx,ecx
c0027dcd:	c1 e3 15             	shl    ebx,0x15
c0027dd0:	89 d8                	mov    eax,ebx
c0027dd2:	5b                   	pop    ebx
c0027dd3:	5e                   	pop    esi
c0027dd4:	5d                   	pop    ebp
c0027dd5:	c3                   	ret    

c0027dd6 <__floatunsidf>:
c0027dd6:	55                   	push   ebp
c0027dd7:	89 e5                	mov    ebp,esp
c0027dd9:	56                   	push   esi
c0027dda:	53                   	push   ebx
c0027ddb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027dde:	85 db                	test   ebx,ebx
c0027de0:	74 2a                	je     c0027e0c <__floatunsidf+0x36>
c0027de2:	0f bd cb             	bsr    ecx,ebx
c0027de5:	83 f1 1f             	xor    ecx,0x1f
c0027de8:	d3 e3                	shl    ebx,cl
c0027dea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027df0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027df5:	29 c8                	sub    eax,ecx
c0027df7:	c1 e0 14             	shl    eax,0x14
c0027dfa:	89 c1                	mov    ecx,eax
c0027dfc:	89 de                	mov    esi,ebx
c0027dfe:	c1 ee 0b             	shr    esi,0xb
c0027e01:	09 f1                	or     ecx,esi
c0027e03:	89 ca                	mov    edx,ecx
c0027e05:	c1 e3 15             	shl    ebx,0x15
c0027e08:	89 d8                	mov    eax,ebx
c0027e0a:	eb 04                	jmp    c0027e10 <__floatunsidf+0x3a>
c0027e0c:	31 c0                	xor    eax,eax
c0027e0e:	31 d2                	xor    edx,edx
c0027e10:	5b                   	pop    ebx
c0027e11:	5e                   	pop    esi
c0027e12:	5d                   	pop    ebp
c0027e13:	c3                   	ret    

c0027e14 <__fixdfsi>:
c0027e14:	55                   	push   ebp
c0027e15:	89 e5                	mov    ebp,esp
c0027e17:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027e1a:	89 d1                	mov    ecx,edx
c0027e1c:	c1 e1 0b             	shl    ecx,0xb
c0027e1f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027e28:	c1 e8 15             	shr    eax,0x15
c0027e2b:	09 c1                	or     ecx,eax
c0027e2d:	c1 fa 14             	sar    edx,0x14
c0027e30:	78 1f                	js     c0027e51 <__fixdfsi+0x3d>
c0027e32:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027e38:	31 c0                	xor    eax,eax
c0027e3a:	83 fa 1e             	cmp    edx,0x1e
c0027e3d:	77 40                	ja     c0027e7f <__fixdfsi+0x6b>
c0027e3f:	89 c8                	mov    eax,ecx
c0027e41:	0d 00 00 00 80       	or     eax,0x80000000
c0027e46:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e4b:	29 d1                	sub    ecx,edx
c0027e4d:	d3 e8                	shr    eax,cl
c0027e4f:	eb 2e                	jmp    c0027e7f <__fixdfsi+0x6b>
c0027e51:	31 c0                	xor    eax,eax
c0027e53:	81 c2 01 04 00 00    	add    edx,0x401
c0027e59:	78 24                	js     c0027e7f <__fixdfsi+0x6b>
c0027e5b:	83 fa 1e             	cmp    edx,0x1e
c0027e5e:	7e 09                	jle    c0027e69 <__fixdfsi+0x55>
c0027e60:	83 fa 1f             	cmp    edx,0x1f
c0027e63:	75 18                	jne    c0027e7d <__fixdfsi+0x69>
c0027e65:	85 c9                	test   ecx,ecx
c0027e67:	75 14                	jne    c0027e7d <__fixdfsi+0x69>
c0027e69:	89 c8                	mov    eax,ecx
c0027e6b:	0d 00 00 00 80       	or     eax,0x80000000
c0027e70:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e75:	29 d1                	sub    ecx,edx
c0027e77:	d3 e8                	shr    eax,cl
c0027e79:	f7 d8                	neg    eax
c0027e7b:	eb 02                	jmp    c0027e7f <__fixdfsi+0x6b>
c0027e7d:	31 c0                	xor    eax,eax
c0027e7f:	5d                   	pop    ebp
c0027e80:	c3                   	ret    

c0027e81 <__fixunsdfsi>:
c0027e81:	55                   	push   ebp
c0027e82:	89 e5                	mov    ebp,esp
c0027e84:	53                   	push   ebx
c0027e85:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027e88:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027e8b:	89 d3                	mov    ebx,edx
c0027e8d:	c1 fb 14             	sar    ebx,0x14
c0027e90:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027e96:	31 c0                	xor    eax,eax
c0027e98:	83 fb 1f             	cmp    ebx,0x1f
c0027e9b:	77 1d                	ja     c0027eba <__fixunsdfsi+0x39>
c0027e9d:	89 d0                	mov    eax,edx
c0027e9f:	c1 e0 0b             	shl    eax,0xb
c0027ea2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ea7:	c1 e9 15             	shr    ecx,0x15
c0027eaa:	09 c8                	or     eax,ecx
c0027eac:	0d 00 00 00 80       	or     eax,0x80000000
c0027eb1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027eb6:	29 d9                	sub    ecx,ebx
c0027eb8:	d3 e8                	shr    eax,cl
c0027eba:	5b                   	pop    ebx
c0027ebb:	5d                   	pop    ebp
c0027ebc:	c3                   	ret    

c0027ebd <__cmpdf2>:
c0027ebd:	55                   	push   ebp
c0027ebe:	89 e5                	mov    ebp,esp
c0027ec0:	57                   	push   edi
c0027ec1:	56                   	push   esi
c0027ec2:	53                   	push   ebx
c0027ec3:	83 ec 0c             	sub    esp,0xc
c0027ec6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027ec9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ecc:	89 ca                	mov    edx,ecx
c0027ece:	c1 ea 14             	shr    edx,0x14
c0027ed1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027ed7:	89 cb                	mov    ebx,ecx
c0027ed9:	c1 fb 1f             	sar    ebx,0x1f
c0027edc:	31 da                	xor    edx,ebx
c0027ede:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027ee1:	89 df                	mov    edi,ebx
c0027ee3:	c1 e7 0b             	shl    edi,0xb
c0027ee6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ee9:	c1 e1 0b             	shl    ecx,0xb
c0027eec:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ef2:	c1 eb 15             	shr    ebx,0x15
c0027ef5:	09 d9                	or     ecx,ebx
c0027ef7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027efa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027efd:	89 ce                	mov    esi,ecx
c0027eff:	c1 ee 14             	shr    esi,0x14
c0027f02:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f08:	89 cb                	mov    ebx,ecx
c0027f0a:	c1 fb 1f             	sar    ebx,0x1f
c0027f0d:	31 de                	xor    esi,ebx
c0027f0f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027f12:	89 df                	mov    edi,ebx
c0027f14:	c1 e7 0b             	shl    edi,0xb
c0027f17:	c1 e1 0b             	shl    ecx,0xb
c0027f1a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f20:	c1 eb 15             	shr    ebx,0x15
c0027f23:	09 d9                	or     ecx,ebx
c0027f25:	89 d3                	mov    ebx,edx
c0027f27:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f2d:	43                   	inc    ebx
c0027f2e:	83 fb 01             	cmp    ebx,0x1
c0027f31:	77 08                	ja     c0027f3b <__cmpdf2+0x7e>
c0027f33:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f36:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027f39:	75 68                	jne    c0027fa3 <__cmpdf2+0xe6>
c0027f3b:	89 f3                	mov    ebx,esi
c0027f3d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f43:	43                   	inc    ebx
c0027f44:	83 fb 01             	cmp    ebx,0x1
c0027f47:	77 06                	ja     c0027f4f <__cmpdf2+0x92>
c0027f49:	89 fb                	mov    ebx,edi
c0027f4b:	09 cb                	or     ebx,ecx
c0027f4d:	75 54                	jne    c0027fa3 <__cmpdf2+0xe6>
c0027f4f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f52:	09 f8                	or     eax,edi
c0027f54:	09 c8                	or     eax,ecx
c0027f56:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027f59:	75 12                	jne    c0027f6d <__cmpdf2+0xb0>
c0027f5b:	8d 42 01             	lea    eax,[edx+0x1]
c0027f5e:	83 f8 01             	cmp    eax,0x1
c0027f61:	77 0a                	ja     c0027f6d <__cmpdf2+0xb0>
c0027f63:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027f66:	31 c0                	xor    eax,eax
c0027f68:	83 fb 01             	cmp    ebx,0x1
c0027f6b:	76 36                	jbe    c0027fa3 <__cmpdf2+0xe6>
c0027f6d:	b8 01 00 00 00       	mov    eax,0x1
c0027f72:	39 f2                	cmp    edx,esi
c0027f74:	7f 2d                	jg     c0027fa3 <__cmpdf2+0xe6>
c0027f76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027f7b:	7c 26                	jl     c0027fa3 <__cmpdf2+0xe6>
c0027f7d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f80:	77 07                	ja     c0027f89 <__cmpdf2+0xcc>
c0027f82:	72 16                	jb     c0027f9a <__cmpdf2+0xdd>
c0027f84:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027f87:	76 0a                	jbe    c0027f93 <__cmpdf2+0xd6>
c0027f89:	89 d0                	mov    eax,edx
c0027f8b:	c1 f8 1f             	sar    eax,0x1f
c0027f8e:	83 c8 01             	or     eax,0x1
c0027f91:	eb 10                	jmp    c0027fa3 <__cmpdf2+0xe6>
c0027f93:	b8 00 00 00 00       	mov    eax,0x0
c0027f98:	73 09                	jae    c0027fa3 <__cmpdf2+0xe6>
c0027f9a:	89 d0                	mov    eax,edx
c0027f9c:	c1 f8 1f             	sar    eax,0x1f
c0027f9f:	83 e0 02             	and    eax,0x2
c0027fa2:	48                   	dec    eax
c0027fa3:	83 c4 0c             	add    esp,0xc
c0027fa6:	5b                   	pop    ebx
c0027fa7:	5e                   	pop    esi
c0027fa8:	5f                   	pop    edi
c0027fa9:	5d                   	pop    ebp
c0027faa:	c3                   	ret    

c0027fab <__eqdf2>:
c0027fab:	55                   	push   ebp
c0027fac:	89 e5                	mov    ebp,esp
c0027fae:	50                   	push   eax
c0027faf:	6a 01                	push   0x1
c0027fb1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027fb4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027fb7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027fba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027fbd:	e8 fb fe ff ff       	call   c0027ebd <__cmpdf2>
c0027fc2:	83 c4 18             	add    esp,0x18
c0027fc5:	c9                   	leave  
c0027fc6:	c3                   	ret    

c0027fc7 <__nedf2>:
c0027fc7:	eb e2                	jmp    c0027fab <__eqdf2>

c0027fc9 <__gtdf2>:
c0027fc9:	55                   	push   ebp
c0027fca:	89 e5                	mov    ebp,esp
c0027fcc:	50                   	push   eax
c0027fcd:	6a ff                	push   0xffffffff
c0027fcf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027fd2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027fd5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027fd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027fdb:	e8 dd fe ff ff       	call   c0027ebd <__cmpdf2>
c0027fe0:	83 c4 18             	add    esp,0x18
c0027fe3:	c9                   	leave  
c0027fe4:	c3                   	ret    

c0027fe5 <__gedf2>:
c0027fe5:	eb e2                	jmp    c0027fc9 <__gtdf2>

c0027fe7 <__ltdf2>:
c0027fe7:	eb c2                	jmp    c0027fab <__eqdf2>

c0027fe9 <__ledf2>:
c0027fe9:	eb c0                	jmp    c0027fab <__eqdf2>

c0027feb <__truncdfsf2>:
c0027feb:	55                   	push   ebp
c0027fec:	89 e5                	mov    ebp,esp
c0027fee:	57                   	push   edi
c0027fef:	56                   	push   esi
c0027ff0:	53                   	push   ebx
c0027ff1:	83 ec 0c             	sub    esp,0xc
c0027ff4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027ff7:	89 d1                	mov    ecx,edx
c0027ff9:	c1 f9 14             	sar    ecx,0x14
c0027ffc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fff:	89 df                	mov    edi,ebx
c0028001:	c1 e7 0b             	shl    edi,0xb
c0028004:	89 d0                	mov    eax,edx
c0028006:	c1 e0 0b             	shl    eax,0xb
c0028009:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002800e:	c1 eb 15             	shr    ebx,0x15
c0028011:	09 d8                	or     eax,ebx
c0028013:	89 cb                	mov    ebx,ecx
c0028015:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002801b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028021:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028027:	0f 86 9e 00 00 00    	jbe    c00280cb <__truncdfsf2+0xe0>
c002802d:	85 db                	test   ebx,ebx
c002802f:	75 0a                	jne    c002803b <__truncdfsf2+0x50>
c0028031:	c1 fa 17             	sar    edx,0x17
c0028034:	30 d2                	xor    dl,dl
c0028036:	e9 84 00 00 00       	jmp    c00280bf <__truncdfsf2+0xd4>
c002803b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028041:	83 fe 83             	cmp    esi,0xffffff83
c0028044:	7d 4b                	jge    c0028091 <__truncdfsf2+0xa6>
c0028046:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002804b:	29 f1                	sub    ecx,esi
c002804d:	83 f9 1f             	cmp    ecx,0x1f
c0028050:	7f 6b                	jg     c00280bd <__truncdfsf2+0xd2>
c0028052:	0d 00 00 00 80       	or     eax,0x80000000
c0028057:	89 c3                	mov    ebx,eax
c0028059:	d3 eb                	shr    ebx,cl
c002805b:	be 01 00 00 00       	mov    esi,0x1
c0028060:	d3 e6                	shl    esi,cl
c0028062:	4e                   	dec    esi
c0028063:	21 f0                	and    eax,esi
c0028065:	09 f8                	or     eax,edi
c0028067:	0f 95 c0             	setne  al
c002806a:	0f b6 c0             	movzx  eax,al
c002806d:	09 c3                	or     ebx,eax
c002806f:	89 d9                	mov    ecx,ebx
c0028071:	c1 e9 08             	shr    ecx,0x8
c0028074:	f6 c3 7f             	test   bl,0x7f
c0028077:	0f 95 c0             	setne  al
c002807a:	09 c8                	or     eax,ecx
c002807c:	83 e0 01             	and    eax,0x1
c002807f:	c1 eb 07             	shr    ebx,0x7
c0028082:	21 c3                	and    ebx,eax
c0028084:	81 e2 00 00 00 80    	and    edx,0x80000000
c002808a:	09 d1                	or     ecx,edx
c002808c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002808f:	eb 76                	jmp    c0028107 <__truncdfsf2+0x11c>
c0028091:	83 c6 80             	add    esi,0xffffff80
c0028094:	7e 1d                	jle    c00280b3 <__truncdfsf2+0xc8>
c0028096:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002809c:	75 0b                	jne    c00280a9 <__truncdfsf2+0xbe>
c002809e:	09 f8                	or     eax,edi
c00280a0:	74 09                	je     c00280ab <__truncdfsf2+0xc0>
c00280a2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00280a7:	eb 02                	jmp    c00280ab <__truncdfsf2+0xc0>
c00280a9:	31 c0                	xor    eax,eax
c00280ab:	c1 fa 17             	sar    edx,0x17
c00280ae:	80 ca ff             	or     dl,0xff
c00280b1:	eb 0e                	jmp    c00280c1 <__truncdfsf2+0xd6>
c00280b3:	c1 fa 1f             	sar    edx,0x1f
c00280b6:	c1 e2 08             	shl    edx,0x8
c00280b9:	09 ca                	or     edx,ecx
c00280bb:	eb 04                	jmp    c00280c1 <__truncdfsf2+0xd6>
c00280bd:	31 d2                	xor    edx,edx
c00280bf:	31 c0                	xor    eax,eax
c00280c1:	c1 e2 17             	shl    edx,0x17
c00280c4:	c1 e8 08             	shr    eax,0x8
c00280c7:	09 d0                	or     eax,edx
c00280c9:	eb 3c                	jmp    c0028107 <__truncdfsf2+0x11c>
c00280cb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00280d1:	89 ca                	mov    edx,ecx
c00280d3:	c1 fa 0b             	sar    edx,0xb
c00280d6:	c1 e2 08             	shl    edx,0x8
c00280d9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00280dc:	31 db                	xor    ebx,ebx
c00280de:	85 ff                	test   edi,edi
c00280e0:	0f 95 c3             	setne  bl
c00280e3:	09 d8                	or     eax,ebx
c00280e5:	89 c3                	mov    ebx,eax
c00280e7:	c1 eb 08             	shr    ebx,0x8
c00280ea:	a8 7f                	test   al,0x7f
c00280ec:	0f 95 c2             	setne  dl
c00280ef:	89 d6                	mov    esi,edx
c00280f1:	09 de                	or     esi,ebx
c00280f3:	83 e6 01             	and    esi,0x1
c00280f6:	c1 e8 07             	shr    eax,0x7
c00280f9:	21 f0                	and    eax,esi
c00280fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00280fe:	09 ca                	or     edx,ecx
c0028100:	c1 e2 17             	shl    edx,0x17
c0028103:	09 da                	or     edx,ebx
c0028105:	01 d0                	add    eax,edx
c0028107:	83 c4 0c             	add    esp,0xc
c002810a:	5b                   	pop    ebx
c002810b:	5e                   	pop    esi
c002810c:	5f                   	pop    edi
c002810d:	5d                   	pop    ebp
c002810e:	c3                   	ret    

c002810f <__extendsfdf2>:
c002810f:	55                   	push   ebp
c0028110:	89 e5                	mov    ebp,esp
c0028112:	57                   	push   edi
c0028113:	56                   	push   esi
c0028114:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028117:	89 d1                	mov    ecx,edx
c0028119:	c1 f9 17             	sar    ecx,0x17
c002811c:	c1 e2 08             	shl    edx,0x8
c002811f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028125:	89 c8                	mov    eax,ecx
c0028127:	80 e4 f8             	and    ah,0xf8
c002812a:	8d 71 01             	lea    esi,[ecx+0x1]
c002812d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028133:	75 27                	jne    c002815c <__extendsfdf2+0x4d>
c0028135:	81 e1 ff 00 00 00    	and    ecx,0xff
c002813b:	75 18                	jne    c0028155 <__extendsfdf2+0x46>
c002813d:	85 d2                	test   edx,edx
c002813f:	74 20                	je     c0028161 <__extendsfdf2+0x52>
c0028141:	41                   	inc    ecx
c0028142:	01 d2                	add    edx,edx
c0028144:	79 fb                	jns    c0028141 <__extendsfdf2+0x32>
c0028146:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002814c:	29 c8                	sub    eax,ecx
c002814e:	05 81 03 00 00       	add    eax,0x381
c0028153:	eb 0c                	jmp    c0028161 <__extendsfdf2+0x52>
c0028155:	05 00 07 00 00       	add    eax,0x700
c002815a:	eb 05                	jmp    c0028161 <__extendsfdf2+0x52>
c002815c:	05 80 03 00 00       	add    eax,0x380
c0028161:	c1 e0 14             	shl    eax,0x14
c0028164:	89 c1                	mov    ecx,eax
c0028166:	89 d0                	mov    eax,edx
c0028168:	c1 e8 0b             	shr    eax,0xb
c002816b:	09 c1                	or     ecx,eax
c002816d:	c1 e2 15             	shl    edx,0x15
c0028170:	89 d0                	mov    eax,edx
c0028172:	89 ca                	mov    edx,ecx
c0028174:	5e                   	pop    esi
c0028175:	5f                   	pop    edi
c0028176:	5d                   	pop    ebp
c0028177:	c3                   	ret    
c0028178:	66 90                	xchg   ax,ax
c002817a:	66 90                	xchg   ax,ax
c002817c:	66 90                	xchg   ax,ax
c002817e:	66 90                	xchg   ax,ax

c0028180 <fabs>:
c0028180:	83 ec 0c             	sub    esp,0xc
c0028183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028187:	89 04 24             	mov    DWORD PTR [esp],eax
c002818a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002818e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028193:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028197:	dd 04 24             	fld    QWORD PTR [esp]
c002819a:	83 c4 0c             	add    esp,0xc
c002819d:	c3                   	ret    
c002819e:	66 90                	xchg   ax,ax

c00281a0 <lrint>:
c00281a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00281a4:	83 ec 04             	sub    esp,0x4
c00281a7:	db 1c 24             	fistp  DWORD PTR [esp]
c00281aa:	58                   	pop    eax
c00281ab:	c3                   	ret    

c00281ac <lrintf>:
c00281ac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00281b0:	83 ec 04             	sub    esp,0x4
c00281b3:	db 1c 24             	fistp  DWORD PTR [esp]
c00281b6:	58                   	pop    eax
c00281b7:	c3                   	ret    

Disassembly of section .init:

c00281b8 <_init>:
c00281b8:	55                   	push   ebp
c00281b9:	89 e5                	mov    ebp,esp
c00281bb:	e8 58 7f fd ff       	call   c0000118 <frame_dummy>
c00281c0:	e8 5b e0 ff ff       	call   c0026220 <__do_global_ctors_aux>
c00281c5:	5d                   	pop    ebp
c00281c6:	c3                   	ret    

Disassembly of section .fini:

c00281c7 <_fini>:
c00281c7:	55                   	push   ebp
c00281c8:	89 e5                	mov    ebp,esp
c00281ca:	e8 d9 7e fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00281cf:	5d                   	pop    ebp
c00281d0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00281d2 <Computer::~Computer()>:
c00281d2:	83 ec 0c             	sub    esp,0xc
c00281d5:	ba 5c 9d 02 c0       	mov    edx,0xc0029d5c
c00281da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281de:	89 10                	mov    DWORD PTR [eax],edx
c00281e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281e4:	83 ec 0c             	sub    esp,0xc
c00281e7:	50                   	push   eax
c00281e8:	e8 25 b6 fe ff       	call   c0013812 <Device::~Device()>
c00281ed:	83 c4 10             	add    esp,0x10
c00281f0:	90                   	nop
c00281f1:	83 c4 0c             	add    esp,0xc
c00281f4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00281f6 <Computer::~Computer()>:
c00281f6:	83 ec 0c             	sub    esp,0xc
c00281f9:	83 ec 0c             	sub    esp,0xc
c00281fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028200:	e8 cd ff ff ff       	call   c00281d2 <Computer::~Computer()>
c0028205:	83 c4 10             	add    esp,0x10
c0028208:	83 ec 08             	sub    esp,0x8
c002820b:	68 ec 01 00 00       	push   0x1ec
c0028210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028214:	e8 1a a2 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028219:	83 c4 10             	add    esp,0x10
c002821c:	83 c4 0c             	add    esp,0xc
c002821f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028220 <idleCommon()>:
c0028220:	83 ec 0c             	sub    esp,0xc
c0028223:	fa                   	cli    
c0028224:	ff 05 a8 0a 03 c0    	inc    DWORD PTR ds:0xc0030aa8
c002822a:	e8 a0 55 ff ff       	call   c001d7cf <schedule()>
c002822f:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c0028234:	48                   	dec    eax
c0028235:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c002823a:	75 01                	jne    c002823d <idleCommon()+0x1d>
c002823c:	fb                   	sti    
c002823d:	83 c4 0c             	add    esp,0xc
c0028240:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028242 <LinkedList<UnixFile>::~LinkedList()>:
c0028242:	90                   	nop
c0028243:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028244 <LinkedList<UnixFile>::LinkedList()>:
c0028244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028248:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002824e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028252:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028259:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002825d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002826e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028272:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002827d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028284:	90                   	nop
c0028285:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028286 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028286:	83 ec 0c             	sub    esp,0xc
c0028289:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002828e:	75 10                	jne    c00282a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028290:	83 ec 0c             	sub    esp,0xc
c0028293:	68 38 9f 02 c0       	push   0xc0029f38
c0028298:	e8 a8 19 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c002829d:	83 c4 10             	add    esp,0x10
c00282a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00282a6:	85 c0                	test   eax,eax
c00282a8:	74 34                	je     c00282de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00282aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282b1:	85 c0                	test   eax,eax
c00282b3:	74 29                	je     c00282de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00282b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00282c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282dc:	eb 65                	jmp    c0028343 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00282de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00282e4:	85 c0                	test   eax,eax
c00282e6:	75 4b                	jne    c0028333 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00282e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282ef:	85 c0                	test   eax,eax
c00282f1:	75 40                	jne    c0028333 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00282f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282fb:	89 10                	mov    DWORD PTR [eax],edx
c00282fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028301:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028305:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002830c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002830f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002831a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002831d:	85 c0                	test   eax,eax
c002831f:	74 22                	je     c0028343 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028321:	83 ec 0c             	sub    esp,0xc
c0028324:	68 5a 9f 02 c0       	push   0xc0029f5a
c0028329:	e8 17 19 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c002832e:	83 c4 10             	add    esp,0x10
c0028331:	eb 10                	jmp    c0028343 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028333:	83 ec 0c             	sub    esp,0xc
c0028336:	68 64 9f 02 c0       	push   0xc0029f64
c002833b:	e8 05 19 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0028340:	83 c4 10             	add    esp,0x10
c0028343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028347:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002834a:	8d 50 01             	lea    edx,[eax+0x1]
c002834d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028351:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028354:	90                   	nop
c0028355:	83 c4 0c             	add    esp,0xc
c0028358:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002835a <LinkedList<UnixFile>::getFirstElement()>:
c002835a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002835e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028360:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028362 <LinkedList<UnixFile>::removeFirst()>:
c0028362:	83 ec 0c             	sub    esp,0xc
c0028365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028369:	8b 00                	mov    eax,DWORD PTR [eax]
c002836b:	85 c0                	test   eax,eax
c002836d:	75 12                	jne    c0028381 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002836f:	83 ec 0c             	sub    esp,0xc
c0028372:	68 70 9f 02 c0       	push   0xc0029f70
c0028377:	e8 c9 18 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c002837c:	83 c4 10             	add    esp,0x10
c002837f:	eb 7e                	jmp    c00283ff <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028385:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028388:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002838b:	85 c0                	test   eax,eax
c002838d:	74 10                	je     c002839f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002838f:	83 ec 0c             	sub    esp,0xc
c0028392:	68 bb 9f 02 c0       	push   0xc0029fbb
c0028397:	e8 a9 18 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c002839c:	83 c4 10             	add    esp,0x10
c002839f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00283a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283a8:	85 c0                	test   eax,eax
c00283aa:	75 33                	jne    c00283df <LinkedList<UnixFile>::removeFirst()+0x7d>
c00283ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00283b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00283c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283c8:	83 f8 01             	cmp    eax,0x1
c00283cb:	74 21                	je     c00283ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00283cd:	83 ec 0c             	sub    esp,0xc
c00283d0:	68 94 9f 02 c0       	push   0xc0029f94
c00283d5:	e8 6b 18 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00283da:	83 c4 10             	add    esp,0x10
c00283dd:	eb 0f                	jmp    c00283ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00283df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00283e5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00283e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ec:	89 10                	mov    DWORD PTR [eax],edx
c00283ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283f5:	8d 50 ff             	lea    edx,[eax-0x1]
c00283f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283ff:	83 c4 0c             	add    esp,0xc
c0028402:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028404 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028408:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002840b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002840c <DriverlessDevice::~DriverlessDevice()>:
c002840c:	ba bc a6 02 c0       	mov    edx,0xc002a6bc
c0028411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028415:	89 10                	mov    DWORD PTR [eax],edx
c0028417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002841b:	50                   	push   eax
c002841c:	e8 f1 b3 fe ff       	call   c0013812 <Device::~Device()>
c0028421:	83 c4 04             	add    esp,0x4
c0028424:	90                   	nop
c0028425:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028426 <DriverlessDevice::~DriverlessDevice()>:
c0028426:	83 ec 0c             	sub    esp,0xc
c0028429:	83 ec 0c             	sub    esp,0xc
c002842c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028430:	e8 d7 ff ff ff       	call   c002840c <DriverlessDevice::~DriverlessDevice()>
c0028435:	83 c4 10             	add    esp,0x10
c0028438:	83 ec 08             	sub    esp,0x8
c002843b:	68 58 01 00 00       	push   0x158
c0028440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028444:	e8 ea 9f fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028449:	83 c4 10             	add    esp,0x10
c002844c:	83 c4 0c             	add    esp,0xc
c002844f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028450 <LinkedList<Device>::addElement(Device*)>:
c0028450:	83 ec 0c             	sub    esp,0xc
c0028453:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028458:	75 10                	jne    c002846a <LinkedList<Device>::addElement(Device*)+0x1a>
c002845a:	83 ec 0c             	sub    esp,0xc
c002845d:	68 38 9f 02 c0       	push   0xc0029f38
c0028462:	e8 de 17 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0028467:	83 c4 10             	add    esp,0x10
c002846a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002846e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028470:	85 c0                	test   eax,eax
c0028472:	74 3a                	je     c00284ae <LinkedList<Device>::addElement(Device*)+0x5e>
c0028474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028478:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002847b:	85 c0                	test   eax,eax
c002847d:	74 2f                	je     c00284ae <LinkedList<Device>::addElement(Device*)+0x5e>
c002847f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028483:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028486:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002848a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028494:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028498:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002849b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284a2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00284ac:	eb 68                	jmp    c0028516 <LinkedList<Device>::addElement(Device*)+0xc6>
c00284ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284b4:	85 c0                	test   eax,eax
c00284b6:	75 4e                	jne    c0028506 <LinkedList<Device>::addElement(Device*)+0xb6>
c00284b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284bf:	85 c0                	test   eax,eax
c00284c1:	75 43                	jne    c0028506 <LinkedList<Device>::addElement(Device*)+0xb6>
c00284c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284cb:	89 10                	mov    DWORD PTR [eax],edx
c00284cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284df:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00284e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284f0:	85 c0                	test   eax,eax
c00284f2:	74 22                	je     c0028516 <LinkedList<Device>::addElement(Device*)+0xc6>
c00284f4:	83 ec 0c             	sub    esp,0xc
c00284f7:	68 5a 9f 02 c0       	push   0xc0029f5a
c00284fc:	e8 44 17 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0028501:	83 c4 10             	add    esp,0x10
c0028504:	eb 10                	jmp    c0028516 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028506:	83 ec 0c             	sub    esp,0xc
c0028509:	68 64 9f 02 c0       	push   0xc0029f64
c002850e:	e8 32 17 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0028513:	83 c4 10             	add    esp,0x10
c0028516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002851d:	8d 50 01             	lea    edx,[eax+0x1]
c0028520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028524:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028527:	90                   	nop
c0028528:	83 c4 0c             	add    esp,0xc
c002852b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002852c <LinkedList<Device>::LinkedList()>:
c002852c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028530:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002853a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028545:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002854c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028550:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002855a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028565:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002856c:	90                   	nop
c002856d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002856e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002856e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028572:	8b 00                	mov    eax,DWORD PTR [eax]
c0028574:	85 c0                	test   eax,eax
c0028576:	75 0e                	jne    c0028586 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002857c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002857f:	85 c0                	test   eax,eax
c0028581:	75 03                	jne    c0028586 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028583:	b0 01                	mov    al,0x1
c0028585:	c3                   	ret    
c0028586:	b0 00                	mov    al,0x0
c0028588:	90                   	nop
c0028589:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002858a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002858a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002858e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028590:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028592 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028592:	83 ec 0c             	sub    esp,0xc
c0028595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028599:	8b 00                	mov    eax,DWORD PTR [eax]
c002859b:	85 c0                	test   eax,eax
c002859d:	75 15                	jne    c00285b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002859f:	83 ec 0c             	sub    esp,0xc
c00285a2:	68 70 9f 02 c0       	push   0xc0029f70
c00285a7:	e8 99 16 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00285ac:	83 c4 10             	add    esp,0x10
c00285af:	e9 88 00 00 00       	jmp    c002863c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00285b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00285be:	85 c0                	test   eax,eax
c00285c0:	0f 95 c0             	setne  al
c00285c3:	84 c0                	test   al,al
c00285c5:	74 10                	je     c00285d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00285c7:	83 ec 0c             	sub    esp,0xc
c00285ca:	68 bb 9f 02 c0       	push   0xc0029fbb
c00285cf:	e8 71 16 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00285d4:	83 c4 10             	add    esp,0x10
c00285d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285db:	8b 00                	mov    eax,DWORD PTR [eax]
c00285dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00285e0:	85 c0                	test   eax,eax
c00285e2:	0f 94 c0             	sete   al
c00285e5:	84 c0                	test   al,al
c00285e7:	74 33                	je     c002861c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00285e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028602:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028605:	83 f8 01             	cmp    eax,0x1
c0028608:	74 21                	je     c002862b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002860a:	83 ec 0c             	sub    esp,0xc
c002860d:	68 94 9f 02 c0       	push   0xc0029f94
c0028612:	e8 2e 16 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0028617:	83 c4 10             	add    esp,0x10
c002861a:	eb 0f                	jmp    c002862b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002861c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028620:	8b 00                	mov    eax,DWORD PTR [eax]
c0028622:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028629:	89 10                	mov    DWORD PTR [eax],edx
c002862b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028632:	8d 50 ff             	lea    edx,[eax-0x1]
c0028635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028639:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002863c:	83 c4 0c             	add    esp,0xc
c002863f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028640:	83 ec 0c             	sub    esp,0xc
c0028643:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028648:	75 10                	jne    c002865a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002864a:	83 ec 0c             	sub    esp,0xc
c002864d:	68 38 9f 02 c0       	push   0xc0029f38
c0028652:	e8 ee 15 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0028657:	83 c4 10             	add    esp,0x10
c002865a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002865e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028660:	85 c0                	test   eax,eax
c0028662:	74 34                	je     c0028698 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028668:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002866b:	85 c0                	test   eax,eax
c002866d:	74 29                	je     c0028698 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002866f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028673:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028676:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002867a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002867d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028681:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028685:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002868f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028696:	eb 65                	jmp    c00286fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869c:	8b 00                	mov    eax,DWORD PTR [eax]
c002869e:	85 c0                	test   eax,eax
c00286a0:	75 4b                	jne    c00286ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00286a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286a9:	85 c0                	test   eax,eax
c00286ab:	75 40                	jne    c00286ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00286ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286b5:	89 10                	mov    DWORD PTR [eax],edx
c00286b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00286d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286d7:	85 c0                	test   eax,eax
c00286d9:	74 22                	je     c00286fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00286db:	83 ec 0c             	sub    esp,0xc
c00286de:	68 5a 9f 02 c0       	push   0xc0029f5a
c00286e3:	e8 5d 15 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00286e8:	83 c4 10             	add    esp,0x10
c00286eb:	eb 10                	jmp    c00286fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00286ed:	83 ec 0c             	sub    esp,0xc
c00286f0:	68 64 9f 02 c0       	push   0xc0029f64
c00286f5:	e8 4b 15 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00286fa:	83 c4 10             	add    esp,0x10
c00286fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028701:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028704:	8d 50 01             	lea    edx,[eax+0x1]
c0028707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002870e:	90                   	nop
c002870f:	83 c4 0c             	add    esp,0xc
c0028712:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028714 <ACPI::~ACPI()>:
c0028714:	83 ec 0c             	sub    esp,0xc
c0028717:	ba 20 af 02 c0       	mov    edx,0xc002af20
c002871c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028720:	89 10                	mov    DWORD PTR [eax],edx
c0028722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028726:	83 ec 0c             	sub    esp,0xc
c0028729:	50                   	push   eax
c002872a:	e8 e3 b0 fe ff       	call   c0013812 <Device::~Device()>
c002872f:	83 c4 10             	add    esp,0x10
c0028732:	90                   	nop
c0028733:	83 c4 0c             	add    esp,0xc
c0028736:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028738 <ACPI::~ACPI()>:
c0028738:	83 ec 0c             	sub    esp,0xc
c002873b:	83 ec 0c             	sub    esp,0xc
c002873e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028742:	e8 cd ff ff ff       	call   c0028714 <ACPI::~ACPI()>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	83 ec 08             	sub    esp,0x8
c002874d:	68 64 12 00 00       	push   0x1264
c0028752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028756:	e8 d8 9c fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c002875b:	83 c4 10             	add    esp,0x10
c002875e:	83 c4 0c             	add    esp,0xc
c0028761:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028762 <LinkedList<Device>::~LinkedList()>:
c0028762:	90                   	nop
c0028763:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028764 <LinkedList<Device>::isEmpty()>:
c0028764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028768:	8b 00                	mov    eax,DWORD PTR [eax]
c002876a:	85 c0                	test   eax,eax
c002876c:	75 0e                	jne    c002877c <LinkedList<Device>::isEmpty()+0x18>
c002876e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028772:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028775:	85 c0                	test   eax,eax
c0028777:	75 03                	jne    c002877c <LinkedList<Device>::isEmpty()+0x18>
c0028779:	b0 01                	mov    al,0x1
c002877b:	c3                   	ret    
c002877c:	b0 00                	mov    al,0x0
c002877e:	90                   	nop
c002877f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028780 <LinkedList<Device>::getFirstElement()>:
c0028780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028784:	8b 00                	mov    eax,DWORD PTR [eax]
c0028786:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028788 <LinkedList<Device>::removeFirst()>:
c0028788:	83 ec 0c             	sub    esp,0xc
c002878b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028791:	85 c0                	test   eax,eax
c0028793:	75 15                	jne    c00287aa <LinkedList<Device>::removeFirst()+0x22>
c0028795:	83 ec 0c             	sub    esp,0xc
c0028798:	68 70 9f 02 c0       	push   0xc0029f70
c002879d:	e8 a3 14 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00287a2:	83 c4 10             	add    esp,0x10
c00287a5:	e9 87 00 00 00       	jmp    c0028831 <LinkedList<Device>::removeFirst()+0xa9>
c00287aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00287b7:	85 c0                	test   eax,eax
c00287b9:	74 10                	je     c00287cb <LinkedList<Device>::removeFirst()+0x43>
c00287bb:	83 ec 0c             	sub    esp,0xc
c00287be:	68 bb 9f 02 c0       	push   0xc0029fbb
c00287c3:	e8 7d 14 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c00287c8:	83 c4 10             	add    esp,0x10
c00287cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00287d1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00287d7:	85 c0                	test   eax,eax
c00287d9:	75 33                	jne    c002880e <LinkedList<Device>::removeFirst()+0x86>
c00287db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f7:	83 f8 01             	cmp    eax,0x1
c00287fa:	74 24                	je     c0028820 <LinkedList<Device>::removeFirst()+0x98>
c00287fc:	83 ec 0c             	sub    esp,0xc
c00287ff:	68 94 9f 02 c0       	push   0xc0029f94
c0028804:	e8 3c 14 ff ff       	call   c0019c45 <Krnl::panic(char const*)>
c0028809:	83 c4 10             	add    esp,0x10
c002880c:	eb 12                	jmp    c0028820 <LinkedList<Device>::removeFirst()+0x98>
c002880e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028812:	8b 00                	mov    eax,DWORD PTR [eax]
c0028814:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002881a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881e:	89 10                	mov    DWORD PTR [eax],edx
c0028820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028824:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028827:	8d 50 ff             	lea    edx,[eax-0x1]
c002882a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028831:	83 c4 0c             	add    esp,0xc
c0028834:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028836 <CPU::~CPU()>:
c0028836:	83 ec 0c             	sub    esp,0xc
c0028839:	ba 70 b1 02 c0       	mov    edx,0xc002b170
c002883e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028842:	89 10                	mov    DWORD PTR [eax],edx
c0028844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028848:	83 ec 0c             	sub    esp,0xc
c002884b:	50                   	push   eax
c002884c:	e8 c1 af fe ff       	call   c0013812 <Device::~Device()>
c0028851:	83 c4 10             	add    esp,0x10
c0028854:	90                   	nop
c0028855:	83 c4 0c             	add    esp,0xc
c0028858:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002885a <CPU::~CPU()>:
c002885a:	83 ec 0c             	sub    esp,0xc
c002885d:	83 ec 0c             	sub    esp,0xc
c0028860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028864:	e8 cd ff ff ff       	call   c0028836 <CPU::~CPU()>
c0028869:	83 c4 10             	add    esp,0x10
c002886c:	83 ec 08             	sub    esp,0x8
c002886f:	68 98 11 00 00       	push   0x1198
c0028874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028878:	e8 b6 9b fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c002887d:	83 c4 10             	add    esp,0x10
c0028880:	83 c4 0c             	add    esp,0xc
c0028883:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028884 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028884:	90                   	nop
c0028885:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028886 <ThreadControlBlock::ThreadControlBlock()>:
c0028886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002888a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028895:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002889c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288a0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00288a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288ab:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00288b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00288bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00288c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00288cd:	90                   	nop
c00288ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00288d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00288d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028905:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028909:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028910:	90                   	nop
c0028911:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028912 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028912:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028916:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028919:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002891a <Vm::_FPUState::_FPUState()>:
c002891a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002891e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028925:	90                   	nop
c0028926:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028928 <PCI::~PCI()>:
c0028928:	83 ec 0c             	sub    esp,0xc
c002892b:	ba 9c bc 02 c0       	mov    edx,0xc002bc9c
c0028930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028934:	89 10                	mov    DWORD PTR [eax],edx
c0028936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893a:	83 ec 0c             	sub    esp,0xc
c002893d:	50                   	push   eax
c002893e:	e8 9f a8 fe ff       	call   c00131e2 <Bus::~Bus()>
c0028943:	83 c4 10             	add    esp,0x10
c0028946:	90                   	nop
c0028947:	83 c4 0c             	add    esp,0xc
c002894a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002894c <PCI::~PCI()>:
c002894c:	83 ec 0c             	sub    esp,0xc
c002894f:	83 ec 0c             	sub    esp,0xc
c0028952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028956:	e8 cd ff ff ff       	call   c0028928 <PCI::~PCI()>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	83 ec 08             	sub    esp,0x8
c0028961:	68 5c 01 00 00       	push   0x15c
c0028966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002896a:	e8 c4 9a fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c002896f:	83 c4 10             	add    esp,0x10
c0028972:	83 c4 0c             	add    esp,0xc
c0028975:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028976 <IDE::~IDE()>:
c0028976:	83 ec 0c             	sub    esp,0xc
c0028979:	ba 50 bd 02 c0       	mov    edx,0xc002bd50
c002897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028982:	89 10                	mov    DWORD PTR [eax],edx
c0028984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028988:	83 ec 0c             	sub    esp,0xc
c002898b:	50                   	push   eax
c002898c:	e8 97 b3 fe ff       	call   c0013d28 <HardDiskController::~HardDiskController()>
c0028991:	83 c4 10             	add    esp,0x10
c0028994:	90                   	nop
c0028995:	83 c4 0c             	add    esp,0xc
c0028998:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002899a <IDE::~IDE()>:
c002899a:	83 ec 0c             	sub    esp,0xc
c002899d:	83 ec 0c             	sub    esp,0xc
c00289a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289a4:	e8 cd ff ff ff       	call   c0028976 <IDE::~IDE()>
c00289a9:	83 c4 10             	add    esp,0x10
c00289ac:	83 ec 08             	sub    esp,0x8
c00289af:	68 70 02 00 00       	push   0x270
c00289b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289b8:	e8 76 9a fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c00289bd:	83 c4 10             	add    esp,0x10
c00289c0:	83 c4 0c             	add    esp,0xc
c00289c3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00289c4 <SATABus::~SATABus()>:
c00289c4:	83 ec 0c             	sub    esp,0xc
c00289c7:	ba c8 bd 02 c0       	mov    edx,0xc002bdc8
c00289cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d0:	89 10                	mov    DWORD PTR [eax],edx
c00289d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d6:	83 ec 0c             	sub    esp,0xc
c00289d9:	50                   	push   eax
c00289da:	e8 49 b3 fe ff       	call   c0013d28 <HardDiskController::~HardDiskController()>
c00289df:	83 c4 10             	add    esp,0x10
c00289e2:	90                   	nop
c00289e3:	83 c4 0c             	add    esp,0xc
c00289e6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00289e8 <SATABus::~SATABus()>:
c00289e8:	83 ec 0c             	sub    esp,0xc
c00289eb:	83 ec 0c             	sub    esp,0xc
c00289ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289f2:	e8 cd ff ff ff       	call   c00289c4 <SATABus::~SATABus()>
c00289f7:	83 c4 10             	add    esp,0x10
c00289fa:	83 ec 08             	sub    esp,0x8
c00289fd:	68 64 01 00 00       	push   0x164
c0028a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a06:	e8 28 9a fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028a0b:	83 c4 10             	add    esp,0x10
c0028a0e:	83 c4 0c             	add    esp,0xc
c0028a11:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028a12 <ATA::~ATA()>:
c0028a12:	83 ec 0c             	sub    esp,0xc
c0028a15:	ba 14 be 02 c0       	mov    edx,0xc002be14
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	89 10                	mov    DWORD PTR [eax],edx
c0028a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a24:	83 ec 0c             	sub    esp,0xc
c0028a27:	50                   	push   eax
c0028a28:	e8 dd b3 fe ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0028a2d:	83 c4 10             	add    esp,0x10
c0028a30:	90                   	nop
c0028a31:	83 c4 0c             	add    esp,0xc
c0028a34:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028a36 <ATA::~ATA()>:
c0028a36:	83 ec 0c             	sub    esp,0xc
c0028a39:	83 ec 0c             	sub    esp,0xc
c0028a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a40:	e8 cd ff ff ff       	call   c0028a12 <ATA::~ATA()>
c0028a45:	83 c4 10             	add    esp,0x10
c0028a48:	83 ec 08             	sub    esp,0x8
c0028a4b:	68 7c 01 00 00       	push   0x17c
c0028a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a54:	e8 da 99 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028a59:	83 c4 10             	add    esp,0x10
c0028a5c:	83 c4 0c             	add    esp,0xc
c0028a5f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028a60 <ATAPI::~ATAPI()>:
c0028a60:	83 ec 0c             	sub    esp,0xc
c0028a63:	ba 4c be 02 c0       	mov    edx,0xc002be4c
c0028a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6c:	89 10                	mov    DWORD PTR [eax],edx
c0028a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a72:	83 ec 0c             	sub    esp,0xc
c0028a75:	50                   	push   eax
c0028a76:	e8 8f b3 fe ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0028a7b:	83 c4 10             	add    esp,0x10
c0028a7e:	90                   	nop
c0028a7f:	83 c4 0c             	add    esp,0xc
c0028a82:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028a84 <ATAPI::~ATAPI()>:
c0028a84:	83 ec 0c             	sub    esp,0xc
c0028a87:	83 ec 0c             	sub    esp,0xc
c0028a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a8e:	e8 cd ff ff ff       	call   c0028a60 <ATAPI::~ATAPI()>
c0028a93:	83 c4 10             	add    esp,0x10
c0028a96:	83 ec 08             	sub    esp,0x8
c0028a99:	68 80 01 00 00       	push   0x180
c0028a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa2:	e8 8c 99 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028aa7:	83 c4 10             	add    esp,0x10
c0028aaa:	83 c4 0c             	add    esp,0xc
c0028aad:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028aae <SATA::~SATA()>:
c0028aae:	83 ec 0c             	sub    esp,0xc
c0028ab1:	ba 00 bf 02 c0       	mov    edx,0xc002bf00
c0028ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aba:	89 10                	mov    DWORD PTR [eax],edx
c0028abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac0:	83 ec 0c             	sub    esp,0xc
c0028ac3:	50                   	push   eax
c0028ac4:	e8 41 b3 fe ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0028ac9:	83 c4 10             	add    esp,0x10
c0028acc:	90                   	nop
c0028acd:	83 c4 0c             	add    esp,0xc
c0028ad0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ad2 <SATA::~SATA()>:
c0028ad2:	83 ec 0c             	sub    esp,0xc
c0028ad5:	83 ec 0c             	sub    esp,0xc
c0028ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028adc:	e8 cd ff ff ff       	call   c0028aae <SATA::~SATA()>
c0028ae1:	83 c4 10             	add    esp,0x10
c0028ae4:	83 ec 08             	sub    esp,0x8
c0028ae7:	68 7c 01 00 00       	push   0x17c
c0028aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af0:	e8 3e 99 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028af5:	83 c4 10             	add    esp,0x10
c0028af8:	83 c4 0c             	add    esp,0xc
c0028afb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028afc <SATAPI::~SATAPI()>:
c0028afc:	83 ec 0c             	sub    esp,0xc
c0028aff:	ba dc bf 02 c0       	mov    edx,0xc002bfdc
c0028b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b08:	89 10                	mov    DWORD PTR [eax],edx
c0028b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0e:	83 ec 0c             	sub    esp,0xc
c0028b11:	50                   	push   eax
c0028b12:	e8 f3 b2 fe ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0028b17:	83 c4 10             	add    esp,0x10
c0028b1a:	90                   	nop
c0028b1b:	83 c4 0c             	add    esp,0xc
c0028b1e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028b20 <SATAPI::~SATAPI()>:
c0028b20:	83 ec 0c             	sub    esp,0xc
c0028b23:	83 ec 0c             	sub    esp,0xc
c0028b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b2a:	e8 cd ff ff ff       	call   c0028afc <SATAPI::~SATAPI()>
c0028b2f:	83 c4 10             	add    esp,0x10
c0028b32:	83 ec 08             	sub    esp,0x8
c0028b35:	68 80 01 00 00       	push   0x180
c0028b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b3e:	e8 f0 98 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028b43:	83 c4 10             	add    esp,0x10
c0028b46:	83 c4 0c             	add    esp,0xc
c0028b49:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028b4a <AVX::~AVX()>:
c0028b4a:	83 ec 0c             	sub    esp,0xc
c0028b4d:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c0028b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b56:	89 10                	mov    DWORD PTR [eax],edx
c0028b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5c:	83 ec 0c             	sub    esp,0xc
c0028b5f:	50                   	push   eax
c0028b60:	e8 29 b3 fe ff       	call   c0013e8e <FPU::~FPU()>
c0028b65:	83 c4 10             	add    esp,0x10
c0028b68:	90                   	nop
c0028b69:	83 c4 0c             	add    esp,0xc
c0028b6c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028b6e <AVX::~AVX()>:
c0028b6e:	83 ec 0c             	sub    esp,0xc
c0028b71:	83 ec 0c             	sub    esp,0xc
c0028b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b78:	e8 cd ff ff ff       	call   c0028b4a <AVX::~AVX()>
c0028b7d:	83 c4 10             	add    esp,0x10
c0028b80:	83 ec 08             	sub    esp,0x8
c0028b83:	68 58 01 00 00       	push   0x158
c0028b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b8c:	e8 a2 98 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028b91:	83 c4 10             	add    esp,0x10
c0028b94:	83 c4 0c             	add    esp,0xc
c0028b97:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028b98 <MMX::~MMX()>:
c0028b98:	83 ec 0c             	sub    esp,0xc
c0028b9b:	ba 5c c0 02 c0       	mov    edx,0xc002c05c
c0028ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba4:	89 10                	mov    DWORD PTR [eax],edx
c0028ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baa:	83 ec 0c             	sub    esp,0xc
c0028bad:	50                   	push   eax
c0028bae:	e8 db b2 fe ff       	call   c0013e8e <FPU::~FPU()>
c0028bb3:	83 c4 10             	add    esp,0x10
c0028bb6:	90                   	nop
c0028bb7:	83 c4 0c             	add    esp,0xc
c0028bba:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028bbc <MMX::~MMX()>:
c0028bbc:	83 ec 0c             	sub    esp,0xc
c0028bbf:	83 ec 0c             	sub    esp,0xc
c0028bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc6:	e8 cd ff ff ff       	call   c0028b98 <MMX::~MMX()>
c0028bcb:	83 c4 10             	add    esp,0x10
c0028bce:	83 ec 08             	sub    esp,0x8
c0028bd1:	68 58 01 00 00       	push   0x158
c0028bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bda:	e8 54 98 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028bdf:	83 c4 10             	add    esp,0x10
c0028be2:	83 c4 0c             	add    esp,0xc
c0028be5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028be6 <SSE::~SSE()>:
c0028be6:	83 ec 0c             	sub    esp,0xc
c0028be9:	ba 9c c0 02 c0       	mov    edx,0xc002c09c
c0028bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf2:	89 10                	mov    DWORD PTR [eax],edx
c0028bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf8:	83 ec 0c             	sub    esp,0xc
c0028bfb:	50                   	push   eax
c0028bfc:	e8 8d b2 fe ff       	call   c0013e8e <FPU::~FPU()>
c0028c01:	83 c4 10             	add    esp,0x10
c0028c04:	90                   	nop
c0028c05:	83 c4 0c             	add    esp,0xc
c0028c08:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028c0a <SSE::~SSE()>:
c0028c0a:	83 ec 0c             	sub    esp,0xc
c0028c0d:	83 ec 0c             	sub    esp,0xc
c0028c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c14:	e8 cd ff ff ff       	call   c0028be6 <SSE::~SSE()>
c0028c19:	83 c4 10             	add    esp,0x10
c0028c1c:	83 ec 08             	sub    esp,0x8
c0028c1f:	68 58 01 00 00       	push   0x158
c0028c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c28:	e8 06 98 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028c2d:	83 c4 10             	add    esp,0x10
c0028c30:	83 c4 0c             	add    esp,0xc
c0028c33:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028c34 <x87::~x87()>:
c0028c34:	83 ec 0c             	sub    esp,0xc
c0028c37:	ba dc c0 02 c0       	mov    edx,0xc002c0dc
c0028c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c40:	89 10                	mov    DWORD PTR [eax],edx
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	83 ec 0c             	sub    esp,0xc
c0028c49:	50                   	push   eax
c0028c4a:	e8 3f b2 fe ff       	call   c0013e8e <FPU::~FPU()>
c0028c4f:	83 c4 10             	add    esp,0x10
c0028c52:	90                   	nop
c0028c53:	83 c4 0c             	add    esp,0xc
c0028c56:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028c58 <x87::~x87()>:
c0028c58:	83 ec 0c             	sub    esp,0xc
c0028c5b:	83 ec 0c             	sub    esp,0xc
c0028c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c62:	e8 cd ff ff ff       	call   c0028c34 <x87::~x87()>
c0028c67:	83 c4 10             	add    esp,0x10
c0028c6a:	83 ec 08             	sub    esp,0x8
c0028c6d:	68 58 01 00 00       	push   0x158
c0028c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c76:	e8 b8 97 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028c7b:	83 c4 10             	add    esp,0x10
c0028c7e:	83 c4 0c             	add    esp,0xc
c0028c81:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028c82 <IOAPIC::~IOAPIC()>:
c0028c82:	83 ec 0c             	sub    esp,0xc
c0028c85:	ba 34 c2 02 c0       	mov    edx,0xc002c234
c0028c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8e:	89 10                	mov    DWORD PTR [eax],edx
c0028c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c94:	83 ec 0c             	sub    esp,0xc
c0028c97:	50                   	push   eax
c0028c98:	e8 75 ab fe ff       	call   c0013812 <Device::~Device()>
c0028c9d:	83 c4 10             	add    esp,0x10
c0028ca0:	90                   	nop
c0028ca1:	83 c4 0c             	add    esp,0xc
c0028ca4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028ca6 <IOAPIC::~IOAPIC()>:
c0028ca6:	83 ec 0c             	sub    esp,0xc
c0028ca9:	83 ec 0c             	sub    esp,0xc
c0028cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb0:	e8 cd ff ff ff       	call   c0028c82 <IOAPIC::~IOAPIC()>
c0028cb5:	83 c4 10             	add    esp,0x10
c0028cb8:	83 ec 08             	sub    esp,0x8
c0028cbb:	68 68 01 00 00       	push   0x168
c0028cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc4:	e8 6a 97 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028cc9:	83 c4 10             	add    esp,0x10
c0028ccc:	83 c4 0c             	add    esp,0xc
c0028ccf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028cd0 <APIC::~APIC()>:
c0028cd0:	83 ec 0c             	sub    esp,0xc
c0028cd3:	ba ec c1 02 c0       	mov    edx,0xc002c1ec
c0028cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdc:	89 10                	mov    DWORD PTR [eax],edx
c0028cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce2:	83 ec 0c             	sub    esp,0xc
c0028ce5:	50                   	push   eax
c0028ce6:	e8 6d b6 fe ff       	call   c0014358 <InterruptController::~InterruptController()>
c0028ceb:	83 c4 10             	add    esp,0x10
c0028cee:	90                   	nop
c0028cef:	83 c4 0c             	add    esp,0xc
c0028cf2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028cf4 <APIC::~APIC()>:
c0028cf4:	83 ec 0c             	sub    esp,0xc
c0028cf7:	83 ec 0c             	sub    esp,0xc
c0028cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cfe:	e8 cd ff ff ff       	call   c0028cd0 <APIC::~APIC()>
c0028d03:	83 c4 10             	add    esp,0x10
c0028d06:	83 ec 08             	sub    esp,0x8
c0028d09:	68 58 21 00 00       	push   0x2158
c0028d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d12:	e8 1c 97 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028d17:	83 c4 10             	add    esp,0x10
c0028d1a:	83 c4 0c             	add    esp,0xc
c0028d1d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028d1e <PIC::~PIC()>:
c0028d1e:	83 ec 0c             	sub    esp,0xc
c0028d21:	ba 84 c2 02 c0       	mov    edx,0xc002c284
c0028d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2a:	89 10                	mov    DWORD PTR [eax],edx
c0028d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d30:	83 ec 0c             	sub    esp,0xc
c0028d33:	50                   	push   eax
c0028d34:	e8 1f b6 fe ff       	call   c0014358 <InterruptController::~InterruptController()>
c0028d39:	83 c4 10             	add    esp,0x10
c0028d3c:	90                   	nop
c0028d3d:	83 c4 0c             	add    esp,0xc
c0028d40:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028d42 <PIC::~PIC()>:
c0028d42:	83 ec 0c             	sub    esp,0xc
c0028d45:	83 ec 0c             	sub    esp,0xc
c0028d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4c:	e8 cd ff ff ff       	call   c0028d1e <PIC::~PIC()>
c0028d51:	83 c4 10             	add    esp,0x10
c0028d54:	83 ec 08             	sub    esp,0x8
c0028d57:	68 58 21 00 00       	push   0x2158
c0028d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d60:	e8 ce 96 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028d65:	83 c4 10             	add    esp,0x10
c0028d68:	83 c4 0c             	add    esp,0xc
c0028d6b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028d6c <APICTimer::~APICTimer()>:
c0028d6c:	83 ec 0c             	sub    esp,0xc
c0028d6f:	ba d8 c2 02 c0       	mov    edx,0xc002c2d8
c0028d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d78:	89 10                	mov    DWORD PTR [eax],edx
c0028d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7e:	83 ec 0c             	sub    esp,0xc
c0028d81:	50                   	push   eax
c0028d82:	e8 f7 d5 fe ff       	call   c001637e <Timer::~Timer()>
c0028d87:	83 c4 10             	add    esp,0x10
c0028d8a:	90                   	nop
c0028d8b:	83 c4 0c             	add    esp,0xc
c0028d8e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028d90 <APICTimer::~APICTimer()>:
c0028d90:	83 ec 0c             	sub    esp,0xc
c0028d93:	83 ec 0c             	sub    esp,0xc
c0028d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9a:	e8 cd ff ff ff       	call   c0028d6c <APICTimer::~APICTimer()>
c0028d9f:	83 c4 10             	add    esp,0x10
c0028da2:	83 ec 08             	sub    esp,0x8
c0028da5:	68 60 01 00 00       	push   0x160
c0028daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dae:	e8 80 96 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028db3:	83 c4 10             	add    esp,0x10
c0028db6:	83 c4 0c             	add    esp,0xc
c0028db9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028dba <PIT::~PIT()>:
c0028dba:	83 ec 0c             	sub    esp,0xc
c0028dbd:	ba 28 c3 02 c0       	mov    edx,0xc002c328
c0028dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc6:	89 10                	mov    DWORD PTR [eax],edx
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	83 ec 0c             	sub    esp,0xc
c0028dcf:	50                   	push   eax
c0028dd0:	e8 a9 d5 fe ff       	call   c001637e <Timer::~Timer()>
c0028dd5:	83 c4 10             	add    esp,0x10
c0028dd8:	90                   	nop
c0028dd9:	83 c4 0c             	add    esp,0xc
c0028ddc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028dde <PIT::~PIT()>:
c0028dde:	83 ec 0c             	sub    esp,0xc
c0028de1:	83 ec 0c             	sub    esp,0xc
c0028de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de8:	e8 cd ff ff ff       	call   c0028dba <PIT::~PIT()>
c0028ded:	83 c4 10             	add    esp,0x10
c0028df0:	83 ec 08             	sub    esp,0x8
c0028df3:	68 5c 01 00 00       	push   0x15c
c0028df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfc:	e8 32 96 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	83 c4 0c             	add    esp,0xc
c0028e07:	c3                   	ret    
